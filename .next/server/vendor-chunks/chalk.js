"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/chalk";
exports.ids = ["vendor-chunks/chalk"];
exports.modules = {

/***/ "(instrument)/./node_modules/chalk/source/index.js":
/*!********************************************!*\
  !*** ./node_modules/chalk/source/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst ansiStyles = __webpack_require__(/*! ansi-styles */ \"(instrument)/./node_modules/ansi-styles/index.js\");\nconst {\n  stdout: stdoutColor,\n  stderr: stderrColor\n} = __webpack_require__(/*! supports-color */ \"(instrument)/./node_modules/supports-color/index.js\");\nconst {\n  stringReplaceAll,\n  stringEncaseCRLFWithFirstIndex\n} = __webpack_require__(/*! ./util */ \"(instrument)/./node_modules/chalk/source/util.js\");\n\n// `supportsColor.level` â†’ `ansiStyles.color[name]` mapping\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\nconst styles = Object.create(null);\nconst applyOptions = (object, options = {}) => {\n  if (options.level > 3 || options.level < 0) {\n    throw new Error('The `level` option should be an integer from 0 to 3');\n  }\n\n  // Detect level if not set manually\n  const colorLevel = stdoutColor ? stdoutColor.level : 0;\n  object.level = options.level === undefined ? colorLevel : options.level;\n};\nclass ChalkClass {\n  constructor(options) {\n    return chalkFactory(options);\n  }\n}\nconst chalkFactory = options => {\n  const chalk = {};\n  applyOptions(chalk, options);\n  chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);\n  Object.setPrototypeOf(chalk, Chalk.prototype);\n  Object.setPrototypeOf(chalk.template, chalk);\n  chalk.template.constructor = () => {\n    throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');\n  };\n  chalk.template.Instance = ChalkClass;\n  return chalk.template;\n};\nfunction Chalk(options) {\n  return chalkFactory(options);\n}\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n  styles[styleName] = {\n    get() {\n      const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\n      Object.defineProperty(this, styleName, {\n        value: builder\n      });\n      return builder;\n    }\n  };\n}\nstyles.visible = {\n  get() {\n    const builder = createBuilder(this, this._styler, true);\n    Object.defineProperty(this, 'visible', {\n      value: builder\n    });\n    return builder;\n  }\n};\nconst usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];\nfor (const model of usedModels) {\n  styles[model] = {\n    get() {\n      const {\n        level\n      } = this;\n      return function (...arguments_) {\n        const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);\n        return createBuilder(this, styler, this._isEmpty);\n      };\n    }\n  };\n}\nfor (const model of usedModels) {\n  const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n  styles[bgModel] = {\n    get() {\n      const {\n        level\n      } = this;\n      return function (...arguments_) {\n        const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);\n        return createBuilder(this, styler, this._isEmpty);\n      };\n    }\n  };\n}\nconst proto = Object.defineProperties(() => {}, {\n  ...styles,\n  level: {\n    enumerable: true,\n    get() {\n      return this._generator.level;\n    },\n    set(level) {\n      this._generator.level = level;\n    }\n  }\n});\nconst createStyler = (open, close, parent) => {\n  let openAll;\n  let closeAll;\n  if (parent === undefined) {\n    openAll = open;\n    closeAll = close;\n  } else {\n    openAll = parent.openAll + open;\n    closeAll = close + parent.closeAll;\n  }\n  return {\n    open,\n    close,\n    openAll,\n    closeAll,\n    parent\n  };\n};\nconst createBuilder = (self, _styler, _isEmpty) => {\n  const builder = (...arguments_) => {\n    // Single argument is hot path, implicit coercion is faster than anything\n    // eslint-disable-next-line no-implicit-coercion\n    return applyStyle(builder, arguments_.length === 1 ? '' + arguments_[0] : arguments_.join(' '));\n  };\n\n  // `__proto__` is used because we must return a function, but there is\n  // no way to create a function with a different prototype\n  builder.__proto__ = proto; // eslint-disable-line no-proto\n\n  builder._generator = self;\n  builder._styler = _styler;\n  builder._isEmpty = _isEmpty;\n  return builder;\n};\nconst applyStyle = (self, string) => {\n  if (self.level <= 0 || !string) {\n    return self._isEmpty ? '' : string;\n  }\n  let styler = self._styler;\n  if (styler === undefined) {\n    return string;\n  }\n  const {\n    openAll,\n    closeAll\n  } = styler;\n  if (string.indexOf('\\u001B') !== -1) {\n    while (styler !== undefined) {\n      // Replace any instances already present with a re-opening code\n      // otherwise only the part of the string until said closing code\n      // will be colored, and the rest will simply be 'plain'.\n      string = stringReplaceAll(string, styler.close, styler.open);\n      styler = styler.parent;\n    }\n  }\n\n  // We can move both next actions out of loop, because remaining actions in loop won't have\n  // any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n  // after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n  const lfIndex = string.indexOf('\\n');\n  if (lfIndex !== -1) {\n    string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n  }\n  return openAll + string + closeAll;\n};\nlet template;\nconst chalkTag = (chalk, ...strings) => {\n  const [firstString] = strings;\n  if (!Array.isArray(firstString)) {\n    // If chalk() was called by itself or with a string,\n    // return the string itself as a string.\n    return strings.join(' ');\n  }\n  const arguments_ = strings.slice(1);\n  const parts = [firstString.raw[0]];\n  for (let i = 1; i < firstString.length; i++) {\n    parts.push(String(arguments_[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'), String(firstString.raw[i]));\n  }\n  if (template === undefined) {\n    template = __webpack_require__(/*! ./templates */ \"(instrument)/./node_modules/chalk/source/templates.js\");\n  }\n  return template(chalk, parts.join(''));\n};\nObject.defineProperties(Chalk.prototype, styles);\nconst chalk = Chalk(); // eslint-disable-line new-cap\nchalk.supportsColor = stdoutColor;\nchalk.stderr = Chalk({\n  level: stderrColor ? stderrColor.level : 0\n}); // eslint-disable-line new-cap\nchalk.stderr.supportsColor = stderrColor;\n\n// For TypeScript\nchalk.Level = {\n  None: 0,\n  Basic: 1,\n  Ansi256: 2,\n  TrueColor: 3,\n  0: 'None',\n  1: 'Basic',\n  2: 'Ansi256',\n  3: 'TrueColor'\n};\nmodule.exports = chalk;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/chalk/source/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/chalk/source/templates.js":
/*!************************************************!*\
  !*** ./node_modules/chalk/source/templates.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nconst TEMPLATE_REGEX = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\nconst ESCAPES = new Map([['n', '\\n'], ['r', '\\r'], ['t', '\\t'], ['b', '\\b'], ['f', '\\f'], ['v', '\\v'], ['0', '\\0'], ['\\\\', '\\\\'], ['e', '\\u001B'], ['a', '\\u0007']]);\nfunction unescape(c) {\n  const u = c[0] === 'u';\n  const bracket = c[1] === '{';\n  if (u && !bracket && c.length === 5 || c[0] === 'x' && c.length === 3) {\n    return String.fromCharCode(parseInt(c.slice(1), 16));\n  }\n  if (u && bracket) {\n    return String.fromCodePoint(parseInt(c.slice(2, -1), 16));\n  }\n  return ESCAPES.get(c) || c;\n}\nfunction parseArguments(name, arguments_) {\n  const results = [];\n  const chunks = arguments_.trim().split(/\\s*,\\s*/g);\n  let matches;\n  for (const chunk of chunks) {\n    const number = Number(chunk);\n    if (!Number.isNaN(number)) {\n      results.push(number);\n    } else if (matches = chunk.match(STRING_REGEX)) {\n      results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));\n    } else {\n      throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n    }\n  }\n  return results;\n}\nfunction parseStyle(style) {\n  STYLE_REGEX.lastIndex = 0;\n  const results = [];\n  let matches;\n  while ((matches = STYLE_REGEX.exec(style)) !== null) {\n    const name = matches[1];\n    if (matches[2]) {\n      const args = parseArguments(name, matches[2]);\n      results.push([name].concat(args));\n    } else {\n      results.push([name]);\n    }\n  }\n  return results;\n}\nfunction buildStyle(chalk, styles) {\n  const enabled = {};\n  for (const layer of styles) {\n    for (const style of layer.styles) {\n      enabled[style[0]] = layer.inverse ? null : style.slice(1);\n    }\n  }\n  let current = chalk;\n  for (const [styleName, styles] of Object.entries(enabled)) {\n    if (!Array.isArray(styles)) {\n      continue;\n    }\n    if (!(styleName in current)) {\n      throw new Error(`Unknown Chalk style: ${styleName}`);\n    }\n    current = styles.length > 0 ? current[styleName](...styles) : current[styleName];\n  }\n  return current;\n}\nmodule.exports = (chalk, temporary) => {\n  const styles = [];\n  const chunks = [];\n  let chunk = [];\n\n  // eslint-disable-next-line max-params\n  temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {\n    if (escapeCharacter) {\n      chunk.push(unescape(escapeCharacter));\n    } else if (style) {\n      const string = chunk.join('');\n      chunk = [];\n      chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));\n      styles.push({\n        inverse,\n        styles: parseStyle(style)\n      });\n    } else if (close) {\n      if (styles.length === 0) {\n        throw new Error('Found extraneous } in Chalk template literal');\n      }\n      chunks.push(buildStyle(chalk, styles)(chunk.join('')));\n      chunk = [];\n      styles.pop();\n    } else {\n      chunk.push(character);\n    }\n  });\n  chunks.push(chunk.join(''));\n  if (styles.length > 0) {\n    const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n    throw new Error(errMsg);\n  }\n  return chunks.join('');\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/chalk/source/templates.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/chalk/source/util.js":
/*!*******************************************!*\
  !*** ./node_modules/chalk/source/util.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n\nconst stringReplaceAll = (string, substring, replacer) => {\n  let index = string.indexOf(substring);\n  if (index === -1) {\n    return string;\n  }\n  const substringLength = substring.length;\n  let endIndex = 0;\n  let returnValue = '';\n  do {\n    returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;\n    endIndex = index + substringLength;\n    index = string.indexOf(substring, endIndex);\n  } while (index !== -1);\n  returnValue += string.substr(endIndex);\n  return returnValue;\n};\nconst stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {\n  let endIndex = 0;\n  let returnValue = '';\n  do {\n    const gotCR = string[index - 1] === '\\r';\n    returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\n    endIndex = index + 1;\n    index = string.indexOf('\\n', endIndex);\n  } while (index !== -1);\n  returnValue += string.substr(endIndex);\n  return returnValue;\n};\nmodule.exports = {\n  stringReplaceAll,\n  stringEncaseCRLFWithFirstIndex\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL2NoYWxrL3NvdXJjZS91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLE1BQU1BLGdCQUFnQixHQUFHQSxDQUFDQyxNQUFNLEVBQUVDLFNBQVMsRUFBRUMsUUFBUSxLQUFLO0VBQ3pELElBQUlDLEtBQUssR0FBR0gsTUFBTSxDQUFDSSxPQUFPLENBQUNILFNBQVMsQ0FBQztFQUNyQyxJQUFJRSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7SUFDakIsT0FBT0gsTUFBTTtFQUNkO0VBRUEsTUFBTUssZUFBZSxHQUFHSixTQUFTLENBQUNLLE1BQU07RUFDeEMsSUFBSUMsUUFBUSxHQUFHLENBQUM7RUFDaEIsSUFBSUMsV0FBVyxHQUFHLEVBQUU7RUFDcEIsR0FBRztJQUNGQSxXQUFXLElBQUlSLE1BQU0sQ0FBQ1MsTUFBTSxDQUFDRixRQUFRLEVBQUVKLEtBQUssR0FBR0ksUUFBUSxDQUFDLEdBQUdOLFNBQVMsR0FBR0MsUUFBUTtJQUMvRUssUUFBUSxHQUFHSixLQUFLLEdBQUdFLGVBQWU7SUFDbENGLEtBQUssR0FBR0gsTUFBTSxDQUFDSSxPQUFPLENBQUNILFNBQVMsRUFBRU0sUUFBUSxDQUFDO0VBQzVDLENBQUMsUUFBUUosS0FBSyxLQUFLLENBQUMsQ0FBQztFQUVyQkssV0FBVyxJQUFJUixNQUFNLENBQUNTLE1BQU0sQ0FBQ0YsUUFBUSxDQUFDO0VBQ3RDLE9BQU9DLFdBQVc7QUFDbkIsQ0FBQztBQUVELE1BQU1FLDhCQUE4QixHQUFHQSxDQUFDVixNQUFNLEVBQUVXLE1BQU0sRUFBRUMsT0FBTyxFQUFFVCxLQUFLLEtBQUs7RUFDMUUsSUFBSUksUUFBUSxHQUFHLENBQUM7RUFDaEIsSUFBSUMsV0FBVyxHQUFHLEVBQUU7RUFDcEIsR0FBRztJQUNGLE1BQU1LLEtBQUssR0FBR2IsTUFBTSxDQUFDRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSTtJQUN4Q0ssV0FBVyxJQUFJUixNQUFNLENBQUNTLE1BQU0sQ0FBQ0YsUUFBUSxFQUFFLENBQUNNLEtBQUssR0FBR1YsS0FBSyxHQUFHLENBQUMsR0FBR0EsS0FBSyxJQUFJSSxRQUFRLENBQUMsR0FBR0ksTUFBTSxJQUFJRSxLQUFLLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHRCxPQUFPO0lBQzNITCxRQUFRLEdBQUdKLEtBQUssR0FBRyxDQUFDO0lBQ3BCQSxLQUFLLEdBQUdILE1BQU0sQ0FBQ0ksT0FBTyxDQUFDLElBQUksRUFBRUcsUUFBUSxDQUFDO0VBQ3ZDLENBQUMsUUFBUUosS0FBSyxLQUFLLENBQUMsQ0FBQztFQUVyQkssV0FBVyxJQUFJUixNQUFNLENBQUNTLE1BQU0sQ0FBQ0YsUUFBUSxDQUFDO0VBQ3RDLE9BQU9DLFdBQVc7QUFDbkIsQ0FBQztBQUVETSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNoQmhCLGdCQUFnQjtFQUNoQlc7QUFDRCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL2NoYWxrL3NvdXJjZS91dGlsLmpzP2I1NGIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJpbmdSZXBsYWNlQWxsID0gKHN0cmluZywgc3Vic3RyaW5nLCByZXBsYWNlcikgPT4ge1xuXHRsZXQgaW5kZXggPSBzdHJpbmcuaW5kZXhPZihzdWJzdHJpbmcpO1xuXHRpZiAoaW5kZXggPT09IC0xKSB7XG5cdFx0cmV0dXJuIHN0cmluZztcblx0fVxuXG5cdGNvbnN0IHN1YnN0cmluZ0xlbmd0aCA9IHN1YnN0cmluZy5sZW5ndGg7XG5cdGxldCBlbmRJbmRleCA9IDA7XG5cdGxldCByZXR1cm5WYWx1ZSA9ICcnO1xuXHRkbyB7XG5cdFx0cmV0dXJuVmFsdWUgKz0gc3RyaW5nLnN1YnN0cihlbmRJbmRleCwgaW5kZXggLSBlbmRJbmRleCkgKyBzdWJzdHJpbmcgKyByZXBsYWNlcjtcblx0XHRlbmRJbmRleCA9IGluZGV4ICsgc3Vic3RyaW5nTGVuZ3RoO1xuXHRcdGluZGV4ID0gc3RyaW5nLmluZGV4T2Yoc3Vic3RyaW5nLCBlbmRJbmRleCk7XG5cdH0gd2hpbGUgKGluZGV4ICE9PSAtMSk7XG5cblx0cmV0dXJuVmFsdWUgKz0gc3RyaW5nLnN1YnN0cihlbmRJbmRleCk7XG5cdHJldHVybiByZXR1cm5WYWx1ZTtcbn07XG5cbmNvbnN0IHN0cmluZ0VuY2FzZUNSTEZXaXRoRmlyc3RJbmRleCA9IChzdHJpbmcsIHByZWZpeCwgcG9zdGZpeCwgaW5kZXgpID0+IHtcblx0bGV0IGVuZEluZGV4ID0gMDtcblx0bGV0IHJldHVyblZhbHVlID0gJyc7XG5cdGRvIHtcblx0XHRjb25zdCBnb3RDUiA9IHN0cmluZ1tpbmRleCAtIDFdID09PSAnXFxyJztcblx0XHRyZXR1cm5WYWx1ZSArPSBzdHJpbmcuc3Vic3RyKGVuZEluZGV4LCAoZ290Q1IgPyBpbmRleCAtIDEgOiBpbmRleCkgLSBlbmRJbmRleCkgKyBwcmVmaXggKyAoZ290Q1IgPyAnXFxyXFxuJyA6ICdcXG4nKSArIHBvc3RmaXg7XG5cdFx0ZW5kSW5kZXggPSBpbmRleCArIDE7XG5cdFx0aW5kZXggPSBzdHJpbmcuaW5kZXhPZignXFxuJywgZW5kSW5kZXgpO1xuXHR9IHdoaWxlIChpbmRleCAhPT0gLTEpO1xuXG5cdHJldHVyblZhbHVlICs9IHN0cmluZy5zdWJzdHIoZW5kSW5kZXgpO1xuXHRyZXR1cm4gcmV0dXJuVmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0c3RyaW5nUmVwbGFjZUFsbCxcblx0c3RyaW5nRW5jYXNlQ1JMRldpdGhGaXJzdEluZGV4XG59O1xuIl0sIm5hbWVzIjpbInN0cmluZ1JlcGxhY2VBbGwiLCJzdHJpbmciLCJzdWJzdHJpbmciLCJyZXBsYWNlciIsImluZGV4IiwiaW5kZXhPZiIsInN1YnN0cmluZ0xlbmd0aCIsImxlbmd0aCIsImVuZEluZGV4IiwicmV0dXJuVmFsdWUiLCJzdWJzdHIiLCJzdHJpbmdFbmNhc2VDUkxGV2l0aEZpcnN0SW5kZXgiLCJwcmVmaXgiLCJwb3N0Zml4IiwiZ290Q1IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/chalk/source/util.js\n");

/***/ })

};
;