"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/import-in-the-middle";
exports.ids = ["vendor-chunks/import-in-the-middle"];
exports.modules = {

/***/ "(instrument)/./node_modules/import-in-the-middle/index.js":
/*!****************************************************!*\
  !*** ./node_modules/import-in-the-middle/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2.0 License.\n//\n// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2021 Datadog, Inc.\n\nconst path = __webpack_require__(/*! path */ \"path\");\nconst parse = __webpack_require__(/*! module-details-from-path */ \"(instrument)/./node_modules/module-details-from-path/index.js\");\nconst {\n  fileURLToPath\n} = __webpack_require__(/*! url */ \"url\");\nconst {\n  MessageChannel\n} = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst {\n  importHooks,\n  specifiers,\n  toHook\n} = __webpack_require__(/*! ./lib/register */ \"(instrument)/./node_modules/import-in-the-middle/lib/register.js\");\nfunction addHook(hook) {\n  importHooks.push(hook);\n  toHook.forEach(([name, namespace]) => hook(name, namespace));\n}\nfunction removeHook(hook) {\n  const index = importHooks.indexOf(hook);\n  if (index > -1) {\n    importHooks.splice(index, 1);\n  }\n}\nfunction callHookFn(hookFn, namespace, name, baseDir) {\n  const newDefault = hookFn(namespace, name, baseDir);\n  if (newDefault && newDefault !== namespace) {\n    namespace.default = newDefault;\n  }\n}\nlet sendModulesToLoader;\n\n/**\n * EXPERIMENTAL\n * This feature is experimental and may change in minor versions.\n * **NOTE** This feature is incompatible with the {internals: true} Hook option.\n *\n * Creates a message channel with a port that can be used to add hooks to the\n * list of exclusively included modules.\n *\n * This can be used to only wrap modules that are Hook'ed, however modules need\n * to be hooked before they are imported.\n *\n * ```ts\n * import { register } from 'module'\n * import { Hook, createAddHookMessageChannel } from 'import-in-the-middle'\n *\n * const { registerOptions, waitForAllMessagesAcknowledged } = createAddHookMessageChannel()\n *\n * register('import-in-the-middle/hook.mjs', import.meta.url, registerOptions)\n *\n * Hook(['fs'], (exported, name, baseDir) => {\n *   // Instrument the fs module\n * })\n *\n * // Ensure that the loader has acknowledged all the modules\n * // before we allow execution to continue\n * await waitForAllMessagesAcknowledged()\n * ```\n */\nfunction createAddHookMessageChannel() {\n  const {\n    port1,\n    port2\n  } = new MessageChannel();\n  let pendingAckCount = 0;\n  let resolveFn;\n  sendModulesToLoader = modules => {\n    pendingAckCount++;\n    port1.postMessage(modules);\n  };\n  port1.on('message', () => {\n    pendingAckCount--;\n    if (resolveFn && pendingAckCount <= 0) {\n      resolveFn();\n    }\n  }).unref();\n  function waitForAllMessagesAcknowledged() {\n    // This timer is to prevent the process from exiting with code 13:\n    // 13: Unsettled Top-Level Await.\n    const timer = setInterval(() => {}, 1000);\n    const promise = new Promise(resolve => {\n      resolveFn = resolve;\n    }).then(() => {\n      clearInterval(timer);\n    });\n    if (pendingAckCount === 0) {\n      resolveFn();\n    }\n    return promise;\n  }\n  const addHookMessagePort = port2;\n  const registerOptions = {\n    data: {\n      addHookMessagePort,\n      include: []\n    },\n    transferList: [addHookMessagePort]\n  };\n  return {\n    registerOptions,\n    addHookMessagePort,\n    waitForAllMessagesAcknowledged\n  };\n}\nfunction Hook(modules, options, hookFn) {\n  if (this instanceof Hook === false) return new Hook(modules, options, hookFn);\n  if (typeof modules === 'function') {\n    hookFn = modules;\n    modules = null;\n    options = null;\n  } else if (typeof options === 'function') {\n    hookFn = options;\n    options = null;\n  }\n  const internals = options ? options.internals === true : false;\n  if (sendModulesToLoader && Array.isArray(modules)) {\n    sendModulesToLoader(modules);\n  }\n  this._iitmHook = (name, namespace) => {\n    const filename = name;\n    const isBuiltin = name.startsWith('node:');\n    let baseDir;\n    if (isBuiltin) {\n      name = name.replace(/^node:/, '');\n    } else {\n      if (name.startsWith('file://')) {\n        try {\n          name = fileURLToPath(name);\n        } catch (e) {}\n      }\n      const details = parse(name);\n      if (details) {\n        name = details.name;\n        baseDir = details.basedir;\n      }\n    }\n    if (modules) {\n      for (const moduleName of modules) {\n        if (moduleName === name) {\n          if (baseDir) {\n            if (internals) {\n              name = name + path.sep + path.relative(baseDir, fileURLToPath(filename));\n            } else {\n              if (!baseDir.endsWith(specifiers.get(filename))) continue;\n            }\n          }\n          callHookFn(hookFn, namespace, name, baseDir);\n        }\n      }\n    } else {\n      callHookFn(hookFn, namespace, name, baseDir);\n    }\n  };\n  addHook(this._iitmHook);\n}\nHook.prototype.unhook = function () {\n  removeHook(this._iitmHook);\n};\nmodule.exports = Hook;\nmodule.exports.Hook = Hook;\nmodule.exports.addHook = addHook;\nmodule.exports.removeHook = removeHook;\nmodule.exports.createAddHookMessageChannel = createAddHookMessageChannel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/import-in-the-middle/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/import-in-the-middle/lib/register.js":
/*!***********************************************************!*\
  !*** ./node_modules/import-in-the-middle/lib/register.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n// Unless explicitly stated otherwise all files in this repository are licensed under the Apache 2.0 License.\n//\n// This product includes software developed at Datadog (https://www.datadoghq.com/). Copyright 2021 Datadog, Inc.\n\nconst importHooks = []; // TODO should this be a Set?\nconst setters = new WeakMap();\nconst getters = new WeakMap();\nconst specifiers = new Map();\nconst toHook = [];\nconst proxyHandler = {\n  set(target, name, value) {\n    return setters.get(target)[name](value);\n  },\n  get(target, name) {\n    if (name === Symbol.toStringTag) {\n      return 'Module';\n    }\n    const getter = getters.get(target)[name];\n    if (typeof getter === 'function') {\n      return getter();\n    }\n  },\n  defineProperty(target, property, descriptor) {\n    if (!('value' in descriptor)) {\n      throw new Error('Getters/setters are not supported for exports property descriptors.');\n    }\n    return setters.get(target)[property](descriptor.value);\n  }\n};\nfunction register(name, namespace, set, get, specifier) {\n  specifiers.set(name, specifier);\n  setters.set(namespace, set);\n  getters.set(namespace, get);\n  const proxy = new Proxy(namespace, proxyHandler);\n  importHooks.forEach(hook => hook(name, proxy));\n  toHook.push([name, proxy]);\n}\nexports.register = register;\nexports.importHooks = importHooks;\nexports.specifiers = specifiers;\nexports.toHook = toHook;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL2ltcG9ydC1pbi10aGUtbWlkZGxlL2xpYi9yZWdpc3Rlci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxXQUFXLEdBQUcsRUFBRSxFQUFDO0FBQ3ZCLE1BQU1DLE9BQU8sR0FBRyxJQUFJQyxPQUFPLENBQUMsQ0FBQztBQUM3QixNQUFNQyxPQUFPLEdBQUcsSUFBSUQsT0FBTyxDQUFDLENBQUM7QUFDN0IsTUFBTUUsVUFBVSxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLE1BQU1DLE1BQU0sR0FBRyxFQUFFO0FBRWpCLE1BQU1DLFlBQVksR0FBRztFQUNuQkMsR0FBR0EsQ0FBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRTtJQUN4QixPQUFPVixPQUFPLENBQUNXLEdBQUcsQ0FBQ0gsTUFBTSxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDQyxLQUFLLENBQUM7RUFDekMsQ0FBQztFQUVEQyxHQUFHQSxDQUFFSCxNQUFNLEVBQUVDLElBQUksRUFBRTtJQUNqQixJQUFJQSxJQUFJLEtBQUtHLE1BQU0sQ0FBQ0MsV0FBVyxFQUFFO01BQy9CLE9BQU8sUUFBUTtJQUNqQjtJQUVBLE1BQU1DLE1BQU0sR0FBR1osT0FBTyxDQUFDUyxHQUFHLENBQUNILE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUM7SUFFeEMsSUFBSSxPQUFPSyxNQUFNLEtBQUssVUFBVSxFQUFFO01BQ2hDLE9BQU9BLE1BQU0sQ0FBQyxDQUFDO0lBQ2pCO0VBQ0YsQ0FBQztFQUVEQyxjQUFjQSxDQUFFUCxNQUFNLEVBQUVRLFFBQVEsRUFBRUMsVUFBVSxFQUFFO0lBQzVDLElBQUssRUFBRSxPQUFPLElBQUlBLFVBQVUsQ0FBQyxFQUFHO01BQzlCLE1BQU0sSUFBSUMsS0FBSyxDQUFDLHFFQUFxRSxDQUFDO0lBQ3hGO0lBRUEsT0FBT2xCLE9BQU8sQ0FBQ1csR0FBRyxDQUFDSCxNQUFNLENBQUMsQ0FBQ1EsUUFBUSxDQUFDLENBQUNDLFVBQVUsQ0FBQ1AsS0FBSyxDQUFDO0VBQ3hEO0FBQ0YsQ0FBQztBQUVELFNBQVNTLFFBQVFBLENBQUVWLElBQUksRUFBRVcsU0FBUyxFQUFFYixHQUFHLEVBQUVJLEdBQUcsRUFBRVUsU0FBUyxFQUFFO0VBQ3ZEbEIsVUFBVSxDQUFDSSxHQUFHLENBQUNFLElBQUksRUFBRVksU0FBUyxDQUFDO0VBQy9CckIsT0FBTyxDQUFDTyxHQUFHLENBQUNhLFNBQVMsRUFBRWIsR0FBRyxDQUFDO0VBQzNCTCxPQUFPLENBQUNLLEdBQUcsQ0FBQ2EsU0FBUyxFQUFFVCxHQUFHLENBQUM7RUFDM0IsTUFBTVcsS0FBSyxHQUFHLElBQUlDLEtBQUssQ0FBQ0gsU0FBUyxFQUFFZCxZQUFZLENBQUM7RUFDaERQLFdBQVcsQ0FBQ3lCLE9BQU8sQ0FBQ0MsSUFBSSxJQUFJQSxJQUFJLENBQUNoQixJQUFJLEVBQUVhLEtBQUssQ0FBQyxDQUFDO0VBQzlDakIsTUFBTSxDQUFDcUIsSUFBSSxDQUFDLENBQUNqQixJQUFJLEVBQUVhLEtBQUssQ0FBQyxDQUFDO0FBQzVCO0FBRUFLLGdCQUFnQixHQUFHUixRQUFRO0FBQzNCUSxtQkFBbUIsR0FBRzVCLFdBQVc7QUFDakM0QixrQkFBa0IsR0FBR3hCLFVBQVU7QUFDL0J3QixjQUFjLEdBQUd0QixNQUFNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL2ltcG9ydC1pbi10aGUtbWlkZGxlL2xpYi9yZWdpc3Rlci5qcz9hOTVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFVubGVzcyBleHBsaWNpdGx5IHN0YXRlZCBvdGhlcndpc2UgYWxsIGZpbGVzIGluIHRoaXMgcmVwb3NpdG9yeSBhcmUgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyLjAgTGljZW5zZS5cbi8vXG4vLyBUaGlzIHByb2R1Y3QgaW5jbHVkZXMgc29mdHdhcmUgZGV2ZWxvcGVkIGF0IERhdGFkb2cgKGh0dHBzOi8vd3d3LmRhdGFkb2docS5jb20vKS4gQ29weXJpZ2h0IDIwMjEgRGF0YWRvZywgSW5jLlxuXG5jb25zdCBpbXBvcnRIb29rcyA9IFtdIC8vIFRPRE8gc2hvdWxkIHRoaXMgYmUgYSBTZXQ/XG5jb25zdCBzZXR0ZXJzID0gbmV3IFdlYWtNYXAoKVxuY29uc3QgZ2V0dGVycyA9IG5ldyBXZWFrTWFwKClcbmNvbnN0IHNwZWNpZmllcnMgPSBuZXcgTWFwKClcbmNvbnN0IHRvSG9vayA9IFtdXG5cbmNvbnN0IHByb3h5SGFuZGxlciA9IHtcbiAgc2V0ICh0YXJnZXQsIG5hbWUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHNldHRlcnMuZ2V0KHRhcmdldClbbmFtZV0odmFsdWUpXG4gIH0sXG5cbiAgZ2V0ICh0YXJnZXQsIG5hbWUpIHtcbiAgICBpZiAobmFtZSA9PT0gU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gICAgICByZXR1cm4gJ01vZHVsZSdcbiAgICB9XG5cbiAgICBjb25zdCBnZXR0ZXIgPSBnZXR0ZXJzLmdldCh0YXJnZXQpW25hbWVdXG5cbiAgICBpZiAodHlwZW9mIGdldHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGdldHRlcigpXG4gICAgfVxuICB9LFxuXG4gIGRlZmluZVByb3BlcnR5ICh0YXJnZXQsIHByb3BlcnR5LCBkZXNjcmlwdG9yKSB7XG4gICAgaWYgKCghKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dldHRlcnMvc2V0dGVycyBhcmUgbm90IHN1cHBvcnRlZCBmb3IgZXhwb3J0cyBwcm9wZXJ0eSBkZXNjcmlwdG9ycy4nKVxuICAgIH1cblxuICAgIHJldHVybiBzZXR0ZXJzLmdldCh0YXJnZXQpW3Byb3BlcnR5XShkZXNjcmlwdG9yLnZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyIChuYW1lLCBuYW1lc3BhY2UsIHNldCwgZ2V0LCBzcGVjaWZpZXIpIHtcbiAgc3BlY2lmaWVycy5zZXQobmFtZSwgc3BlY2lmaWVyKVxuICBzZXR0ZXJzLnNldChuYW1lc3BhY2UsIHNldClcbiAgZ2V0dGVycy5zZXQobmFtZXNwYWNlLCBnZXQpXG4gIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KG5hbWVzcGFjZSwgcHJveHlIYW5kbGVyKVxuICBpbXBvcnRIb29rcy5mb3JFYWNoKGhvb2sgPT4gaG9vayhuYW1lLCBwcm94eSkpXG4gIHRvSG9vay5wdXNoKFtuYW1lLCBwcm94eV0pXG59XG5cbmV4cG9ydHMucmVnaXN0ZXIgPSByZWdpc3RlclxuZXhwb3J0cy5pbXBvcnRIb29rcyA9IGltcG9ydEhvb2tzXG5leHBvcnRzLnNwZWNpZmllcnMgPSBzcGVjaWZpZXJzXG5leHBvcnRzLnRvSG9vayA9IHRvSG9va1xuIl0sIm5hbWVzIjpbImltcG9ydEhvb2tzIiwic2V0dGVycyIsIldlYWtNYXAiLCJnZXR0ZXJzIiwic3BlY2lmaWVycyIsIk1hcCIsInRvSG9vayIsInByb3h5SGFuZGxlciIsInNldCIsInRhcmdldCIsIm5hbWUiLCJ2YWx1ZSIsImdldCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiZ2V0dGVyIiwiZGVmaW5lUHJvcGVydHkiLCJwcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJFcnJvciIsInJlZ2lzdGVyIiwibmFtZXNwYWNlIiwic3BlY2lmaWVyIiwicHJveHkiLCJQcm94eSIsImZvckVhY2giLCJob29rIiwicHVzaCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/import-in-the-middle/lib/register.js\n");

/***/ })

};
;