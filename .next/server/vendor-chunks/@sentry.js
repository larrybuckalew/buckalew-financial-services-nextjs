"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry";
exports.ids = ["vendor-chunks/@sentry"];
exports.modules = {

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/api.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/api.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dsn = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn) {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn, sdkInfo) {\n  const params = {\n    sentry_version: SENTRY_API_VERSION\n  };\n  if (dsn.publicKey) {\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    params.sentry_key = dsn.publicKey;\n  }\n  if (sdkInfo) {\n    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n  }\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel, sdkInfo) {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n  const dsn$1 = dsn.makeDsn(dsnLike);\n  if (!dsn$1) {\n    return '';\n  }\n  const endpoint = `${getBaseApiEndpoint(dsn$1)}embed/error-page/`;\n  let encodedOptions = `dsn=${dsn.dsnToString(dsn$1)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n    if (key === 'onClose') {\n      continue;\n    }\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key])}`;\n    }\n  }\n  return `${endpoint}?${encodedOptions}`;\n}\nexports.getEnvelopeEndpointWithUrlEncodedAuth = getEnvelopeEndpointWithUrlEncodedAuth;\nexports.getReportDialogEndpoint = getReportDialogEndpoint;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYXBpLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsR0FBRyxHQUFHQyxtQkFBTyxDQUFDLG1HQUFzQixDQUFDO0FBRTNDLE1BQU1DLGtCQUFrQixHQUFHLEdBQUc7O0FBRTlCO0FBQ0EsU0FBU0Msa0JBQWtCQSxDQUFDSCxHQUFHLEVBQUU7RUFDL0IsTUFBTUksUUFBUSxHQUFHSixHQUFHLENBQUNJLFFBQVEsR0FBSSxHQUFFSixHQUFHLENBQUNJLFFBQVMsR0FBRSxHQUFHLEVBQUU7RUFDdkQsTUFBTUMsSUFBSSxHQUFHTCxHQUFHLENBQUNLLElBQUksR0FBSSxJQUFHTCxHQUFHLENBQUNLLElBQUssRUFBQyxHQUFHLEVBQUU7RUFDM0MsT0FBUSxHQUFFRCxRQUFTLEtBQUlKLEdBQUcsQ0FBQ00sSUFBSyxHQUFFRCxJQUFLLEdBQUVMLEdBQUcsQ0FBQ08sSUFBSSxHQUFJLElBQUdQLEdBQUcsQ0FBQ08sSUFBSyxFQUFDLEdBQUcsRUFBRyxPQUFNO0FBQ2hGOztBQUVBO0FBQ0EsU0FBU0Msa0JBQWtCQSxDQUFDUixHQUFHLEVBQUU7RUFDL0IsT0FBUSxHQUFFRyxrQkFBa0IsQ0FBQ0gsR0FBRyxDQUFFLEdBQUVBLEdBQUcsQ0FBQ1MsU0FBVSxZQUFXO0FBQy9EOztBQUVBO0FBQ0EsU0FBU0MsWUFBWUEsQ0FBQ1YsR0FBRyxFQUFFVyxPQUFPLEVBQUU7RUFDbEMsTUFBTUMsTUFBTSxHQUFHO0lBQ2JDLGNBQWMsRUFBRVg7RUFDbEIsQ0FBQztFQUVELElBQUlGLEdBQUcsQ0FBQ2MsU0FBUyxFQUFFO0lBQ2pCO0lBQ0E7SUFDQUYsTUFBTSxDQUFDRyxVQUFVLEdBQUdmLEdBQUcsQ0FBQ2MsU0FBUztFQUNuQztFQUVBLElBQUlILE9BQU8sRUFBRTtJQUNYQyxNQUFNLENBQUNJLGFBQWEsR0FBSSxHQUFFTCxPQUFPLENBQUNNLElBQUssSUFBR04sT0FBTyxDQUFDTyxPQUFRLEVBQUM7RUFDN0Q7RUFFQSxPQUFPLElBQUlDLGVBQWUsQ0FBQ1AsTUFBTSxDQUFDLENBQUNRLFFBQVEsQ0FBQyxDQUFDO0FBQy9DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxxQ0FBcUNBLENBQUNyQixHQUFHLEVBQUVzQixNQUFNLEVBQUVYLE9BQU8sRUFBRTtFQUNuRSxPQUFPVyxNQUFNLEdBQUdBLE1BQU0sR0FBSSxHQUFFZCxrQkFBa0IsQ0FBQ1IsR0FBRyxDQUFFLElBQUdVLFlBQVksQ0FBQ1YsR0FBRyxFQUFFVyxPQUFPLENBQUUsRUFBQztBQUNyRjs7QUFFQTtBQUNBLFNBQVNZLHVCQUF1QkEsQ0FDOUJDLE9BQU8sRUFDUEMsYUFBYSxFQUdiO0VBQ0EsTUFBTUMsS0FBSyxHQUFHMUIsR0FBRyxDQUFDMkIsT0FBTyxDQUFDSCxPQUFPLENBQUM7RUFDbEMsSUFBSSxDQUFDRSxLQUFLLEVBQUU7SUFDVixPQUFPLEVBQUU7RUFDWDtFQUVBLE1BQU1FLFFBQVEsR0FBSSxHQUFFekIsa0JBQWtCLENBQUN1QixLQUFLLENBQUUsbUJBQWtCO0VBRWhFLElBQUlHLGNBQWMsR0FBSSxPQUFNN0IsR0FBRyxDQUFDOEIsV0FBVyxDQUFDSixLQUFLLENBQUUsRUFBQztFQUNwRCxLQUFLLE1BQU1LLEdBQUcsSUFBSU4sYUFBYSxFQUFFO0lBQy9CLElBQUlNLEdBQUcsS0FBSyxLQUFLLEVBQUU7TUFDakI7SUFDRjtJQUVBLElBQUlBLEdBQUcsS0FBSyxTQUFTLEVBQUU7TUFDckI7SUFDRjtJQUVBLElBQUlBLEdBQUcsS0FBSyxNQUFNLEVBQUU7TUFDbEIsTUFBTUMsSUFBSSxHQUFHUCxhQUFhLENBQUNPLElBQUk7TUFDL0IsSUFBSSxDQUFDQSxJQUFJLEVBQUU7UUFDVDtNQUNGO01BQ0EsSUFBSUEsSUFBSSxDQUFDZixJQUFJLEVBQUU7UUFDYlksY0FBYyxJQUFLLFNBQVFJLGtCQUFrQixDQUFDRCxJQUFJLENBQUNmLElBQUksQ0FBRSxFQUFDO01BQzVEO01BQ0EsSUFBSWUsSUFBSSxDQUFDRSxLQUFLLEVBQUU7UUFDZEwsY0FBYyxJQUFLLFVBQVNJLGtCQUFrQixDQUFDRCxJQUFJLENBQUNFLEtBQUssQ0FBRSxFQUFDO01BQzlEO0lBQ0YsQ0FBQyxNQUFNO01BQ0xMLGNBQWMsSUFBSyxJQUFHSSxrQkFBa0IsQ0FBQ0YsR0FBRyxDQUFFLElBQUdFLGtCQUFrQixDQUFDUixhQUFhLENBQUNNLEdBQUcsQ0FBRSxDQUFFLEVBQUM7SUFDNUY7RUFDRjtFQUVBLE9BQVEsR0FBRUgsUUFBUyxJQUFHQyxjQUFlLEVBQUM7QUFDeEM7QUFFQS9CLDZDQUE2QyxHQUFHdUIscUNBQXFDO0FBQ3JGdkIsK0JBQStCLEdBQUd5Qix1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9hcGkuanM/MmU1YyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBkc24gPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2Rzbi5qcycpO1xuXG5jb25zdCBTRU5UUllfQVBJX1ZFUlNJT04gPSAnNyc7XG5cbi8qKiBSZXR1cm5zIHRoZSBwcmVmaXggdG8gY29uc3RydWN0IFNlbnRyeSBpbmdlc3Rpb24gQVBJIGVuZHBvaW50cy4gKi9cbmZ1bmN0aW9uIGdldEJhc2VBcGlFbmRwb2ludChkc24pIHtcbiAgY29uc3QgcHJvdG9jb2wgPSBkc24ucHJvdG9jb2wgPyBgJHtkc24ucHJvdG9jb2x9OmAgOiAnJztcbiAgY29uc3QgcG9ydCA9IGRzbi5wb3J0ID8gYDoke2Rzbi5wb3J0fWAgOiAnJztcbiAgcmV0dXJuIGAke3Byb3RvY29sfS8vJHtkc24uaG9zdH0ke3BvcnR9JHtkc24ucGF0aCA/IGAvJHtkc24ucGF0aH1gIDogJyd9L2FwaS9gO1xufVxuXG4vKiogUmV0dXJucyB0aGUgaW5nZXN0IEFQSSBlbmRwb2ludCBmb3IgdGFyZ2V0LiAqL1xuZnVuY3Rpb24gX2dldEluZ2VzdEVuZHBvaW50KGRzbikge1xuICByZXR1cm4gYCR7Z2V0QmFzZUFwaUVuZHBvaW50KGRzbil9JHtkc24ucHJvamVjdElkfS9lbnZlbG9wZS9gO1xufVxuXG4vKiogUmV0dXJucyBhIFVSTC1lbmNvZGVkIHN0cmluZyB3aXRoIGF1dGggY29uZmlnIHN1aXRhYmxlIGZvciBhIHF1ZXJ5IHN0cmluZy4gKi9cbmZ1bmN0aW9uIF9lbmNvZGVkQXV0aChkc24sIHNka0luZm8pIHtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIHNlbnRyeV92ZXJzaW9uOiBTRU5UUllfQVBJX1ZFUlNJT04sXG4gIH07XG5cbiAgaWYgKGRzbi5wdWJsaWNLZXkpIHtcbiAgICAvLyBXZSBzZW5kIG9ubHkgdGhlIG1pbmltdW0gc2V0IG9mIHJlcXVpcmVkIGluZm9ybWF0aW9uLiBTZWVcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8yNTcyLlxuICAgIHBhcmFtcy5zZW50cnlfa2V5ID0gZHNuLnB1YmxpY0tleTtcbiAgfVxuXG4gIGlmIChzZGtJbmZvKSB7XG4gICAgcGFyYW1zLnNlbnRyeV9jbGllbnQgPSBgJHtzZGtJbmZvLm5hbWV9LyR7c2RrSW5mby52ZXJzaW9ufWA7XG4gIH1cblxuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXJhbXMpLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZW52ZWxvcGUgZW5kcG9pbnQgVVJMIHdpdGggYXV0aCBpbiB0aGUgcXVlcnkgc3RyaW5nLlxuICpcbiAqIFNlbmRpbmcgYXV0aCBhcyBwYXJ0IG9mIHRoZSBxdWVyeSBzdHJpbmcgYW5kIG5vdCBhcyBjdXN0b20gSFRUUCBoZWFkZXJzIGF2b2lkcyBDT1JTIHByZWZsaWdodCByZXF1ZXN0cy5cbiAqL1xuZnVuY3Rpb24gZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aChkc24sIHR1bm5lbCwgc2RrSW5mbykge1xuICByZXR1cm4gdHVubmVsID8gdHVubmVsIDogYCR7X2dldEluZ2VzdEVuZHBvaW50KGRzbil9PyR7X2VuY29kZWRBdXRoKGRzbiwgc2RrSW5mbyl9YDtcbn1cblxuLyoqIFJldHVybnMgdGhlIHVybCB0byB0aGUgcmVwb3J0IGRpYWxvZyBlbmRwb2ludC4gKi9cbmZ1bmN0aW9uIGdldFJlcG9ydERpYWxvZ0VuZHBvaW50KFxuICBkc25MaWtlLFxuICBkaWFsb2dPcHRpb25zXG5cbixcbikge1xuICBjb25zdCBkc24kMSA9IGRzbi5tYWtlRHNuKGRzbkxpa2UpO1xuICBpZiAoIWRzbiQxKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY29uc3QgZW5kcG9pbnQgPSBgJHtnZXRCYXNlQXBpRW5kcG9pbnQoZHNuJDEpfWVtYmVkL2Vycm9yLXBhZ2UvYDtcblxuICBsZXQgZW5jb2RlZE9wdGlvbnMgPSBgZHNuPSR7ZHNuLmRzblRvU3RyaW5nKGRzbiQxKX1gO1xuICBmb3IgKGNvbnN0IGtleSBpbiBkaWFsb2dPcHRpb25zKSB7XG4gICAgaWYgKGtleSA9PT0gJ2RzbicpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdvbkNsb3NlJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3VzZXInKSB7XG4gICAgICBjb25zdCB1c2VyID0gZGlhbG9nT3B0aW9ucy51c2VyO1xuICAgICAgaWYgKCF1c2VyKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHVzZXIubmFtZSkge1xuICAgICAgICBlbmNvZGVkT3B0aW9ucyArPSBgJm5hbWU9JHtlbmNvZGVVUklDb21wb25lbnQodXNlci5uYW1lKX1gO1xuICAgICAgfVxuICAgICAgaWYgKHVzZXIuZW1haWwpIHtcbiAgICAgICAgZW5jb2RlZE9wdGlvbnMgKz0gYCZlbWFpbD0ke2VuY29kZVVSSUNvbXBvbmVudCh1c2VyLmVtYWlsKX1gO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGVkT3B0aW9ucyArPSBgJiR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KGRpYWxvZ09wdGlvbnNba2V5XSApfWA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGAke2VuZHBvaW50fT8ke2VuY29kZWRPcHRpb25zfWA7XG59XG5cbmV4cG9ydHMuZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCA9IGdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGg7XG5leHBvcnRzLmdldFJlcG9ydERpYWxvZ0VuZHBvaW50ID0gZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkc24iLCJyZXF1aXJlIiwiU0VOVFJZX0FQSV9WRVJTSU9OIiwiZ2V0QmFzZUFwaUVuZHBvaW50IiwicHJvdG9jb2wiLCJwb3J0IiwiaG9zdCIsInBhdGgiLCJfZ2V0SW5nZXN0RW5kcG9pbnQiLCJwcm9qZWN0SWQiLCJfZW5jb2RlZEF1dGgiLCJzZGtJbmZvIiwicGFyYW1zIiwic2VudHJ5X3ZlcnNpb24iLCJwdWJsaWNLZXkiLCJzZW50cnlfa2V5Iiwic2VudHJ5X2NsaWVudCIsIm5hbWUiLCJ2ZXJzaW9uIiwiVVJMU2VhcmNoUGFyYW1zIiwidG9TdHJpbmciLCJnZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoIiwidHVubmVsIiwiZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQiLCJkc25MaWtlIiwiZGlhbG9nT3B0aW9ucyIsImRzbiQxIiwibWFrZURzbiIsImVuZHBvaW50IiwiZW5jb2RlZE9wdGlvbnMiLCJkc25Ub1N0cmluZyIsImtleSIsInVzZXIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJlbWFpbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/asyncContext/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst stackStrategy = __webpack_require__(/*! ./stackStrategy.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js\");\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nfunction setAsyncContextStrategy(strategy) {\n  // Get main carrier (global for every environment)\n  const registry = carrier.getMainCarrier();\n  const sentry = carrier.getSentryCarrier(registry);\n  sentry.acs = strategy;\n}\n\n/**\n * Get the current async context strategy.\n * If none has been setup, the default will be used.\n */\nfunction getAsyncContextStrategy(carrier$1) {\n  const sentry = carrier.getSentryCarrier(carrier$1);\n  if (sentry.acs) {\n    return sentry.acs;\n  }\n\n  // Otherwise, use the default one (stack)\n  return stackStrategy.getStackAsyncContextStrategy();\n}\nexports.getAsyncContextStrategy = getAsyncContextStrategy;\nexports.setAsyncContextStrategy = setAsyncContextStrategy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYXN5bmNDb250ZXh0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLG9GQUFlLENBQUM7QUFDeEMsTUFBTUMsYUFBYSxHQUFHRCxtQkFBTyxDQUFDLDRHQUFvQixDQUFDOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsdUJBQXVCQSxDQUFDQyxRQUFRLEVBQUU7RUFDekM7RUFDQSxNQUFNQyxRQUFRLEdBQUdMLE9BQU8sQ0FBQ00sY0FBYyxDQUFDLENBQUM7RUFDekMsTUFBTUMsTUFBTSxHQUFHUCxPQUFPLENBQUNRLGdCQUFnQixDQUFDSCxRQUFRLENBQUM7RUFDakRFLE1BQU0sQ0FBQ0UsR0FBRyxHQUFHTCxRQUFRO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU00sdUJBQXVCQSxDQUFDQyxTQUFTLEVBQUU7RUFDMUMsTUFBTUosTUFBTSxHQUFHUCxPQUFPLENBQUNRLGdCQUFnQixDQUFDRyxTQUFTLENBQUM7RUFFbEQsSUFBSUosTUFBTSxDQUFDRSxHQUFHLEVBQUU7SUFDZCxPQUFPRixNQUFNLENBQUNFLEdBQUc7RUFDbkI7O0VBRUE7RUFDQSxPQUFPUCxhQUFhLENBQUNVLDRCQUE0QixDQUFDLENBQUM7QUFDckQ7QUFFQWQsK0JBQStCLEdBQUdZLHVCQUF1QjtBQUN6RFosK0JBQStCLEdBQUdLLHVCQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2FzeW5jQ29udGV4dC9pbmRleC5qcz9kYzMwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNhcnJpZXIgPSByZXF1aXJlKCcuLi9jYXJyaWVyLmpzJyk7XG5jb25zdCBzdGFja1N0cmF0ZWd5ID0gcmVxdWlyZSgnLi9zdGFja1N0cmF0ZWd5LmpzJyk7XG5cbi8qKlxuICogQHByaXZhdGUgUHJpdmF0ZSBBUEkgd2l0aCBubyBzZW12ZXIgZ3VhcmFudGVlcyFcbiAqXG4gKiBTZXRzIHRoZSBnbG9iYWwgYXN5bmMgY29udGV4dCBzdHJhdGVneVxuICovXG5mdW5jdGlvbiBzZXRBc3luY0NvbnRleHRTdHJhdGVneShzdHJhdGVneSkge1xuICAvLyBHZXQgbWFpbiBjYXJyaWVyIChnbG9iYWwgZm9yIGV2ZXJ5IGVudmlyb25tZW50KVxuICBjb25zdCByZWdpc3RyeSA9IGNhcnJpZXIuZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3Qgc2VudHJ5ID0gY2Fycmllci5nZXRTZW50cnlDYXJyaWVyKHJlZ2lzdHJ5KTtcbiAgc2VudHJ5LmFjcyA9IHN0cmF0ZWd5O1xufVxuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudCBhc3luYyBjb250ZXh0IHN0cmF0ZWd5LlxuICogSWYgbm9uZSBoYXMgYmVlbiBzZXR1cCwgdGhlIGRlZmF1bHQgd2lsbCBiZSB1c2VkLlxuICovXG5mdW5jdGlvbiBnZXRBc3luY0NvbnRleHRTdHJhdGVneShjYXJyaWVyJDEpIHtcbiAgY29uc3Qgc2VudHJ5ID0gY2Fycmllci5nZXRTZW50cnlDYXJyaWVyKGNhcnJpZXIkMSk7XG5cbiAgaWYgKHNlbnRyeS5hY3MpIHtcbiAgICByZXR1cm4gc2VudHJ5LmFjcztcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwgdXNlIHRoZSBkZWZhdWx0IG9uZSAoc3RhY2spXG4gIHJldHVybiBzdGFja1N0cmF0ZWd5LmdldFN0YWNrQXN5bmNDb250ZXh0U3RyYXRlZ3koKTtcbn1cblxuZXhwb3J0cy5nZXRBc3luY0NvbnRleHRTdHJhdGVneSA9IGdldEFzeW5jQ29udGV4dFN0cmF0ZWd5O1xuZXhwb3J0cy5zZXRBc3luY0NvbnRleHRTdHJhdGVneSA9IHNldEFzeW5jQ29udGV4dFN0cmF0ZWd5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjYXJyaWVyIiwicmVxdWlyZSIsInN0YWNrU3RyYXRlZ3kiLCJzZXRBc3luY0NvbnRleHRTdHJhdGVneSIsInN0cmF0ZWd5IiwicmVnaXN0cnkiLCJnZXRNYWluQ2FycmllciIsInNlbnRyeSIsImdldFNlbnRyeUNhcnJpZXIiLCJhY3MiLCJnZXRBc3luY0NvbnRleHRTdHJhdGVneSIsImNhcnJpZXIkMSIsImdldFN0YWNrQXN5bmNDb250ZXh0U3RyYXRlZ3kiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst defaultScopes = __webpack_require__(/*! ../defaultScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js\");\nconst scope = __webpack_require__(/*! ../scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst is = __webpack_require__(/*! ../utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\n\n/**\n * This is an object that holds a stack of scopes.\n */\nclass AsyncContextStack {\n  constructor(scope$1, isolationScope) {\n    let assignedScope;\n    if (!scope$1) {\n      assignedScope = new scope.Scope();\n    } else {\n      assignedScope = scope$1;\n    }\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new scope.Scope();\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    // scope stack for domains or the process\n    this._stack = [{\n      scope: assignedScope\n    }];\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Fork a scope for the stack.\n   */\n  withScope(callback) {\n    const scope = this._pushScope();\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      this._popScope();\n      throw e;\n    }\n    if (is.isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(res => {\n        this._popScope();\n        return res;\n      }, e => {\n        this._popScope();\n        throw e;\n      });\n    }\n    this._popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * Get the client of the stack.\n   */\n  getClient() {\n    return this.getStackTop().client;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   */\n  getScope() {\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * Get the isolation scope for the stack.\n   */\n  getIsolationScope() {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   */\n  getStackTop() {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * Push a scope to the stack.\n   */\n  _pushScope() {\n    // We want to clone the content of prev scope\n    const scope = this.getScope().clone();\n    this._stack.push({\n      client: this.getClient(),\n      scope\n    });\n    return scope;\n  }\n\n  /**\n   * Pop a scope from the stack.\n   */\n  _popScope() {\n    if (this._stack.length <= 1) return false;\n    return !!this._stack.pop();\n  }\n}\n\n/**\n * Get the global async context stack.\n * This will be removed during the v8 cycle and is only here to make migration easier.\n */\nfunction getAsyncContextStack() {\n  const registry = carrier.getMainCarrier();\n  const sentry = carrier.getSentryCarrier(registry);\n  return sentry.stack = sentry.stack || new AsyncContextStack(defaultScopes.getDefaultCurrentScope(), defaultScopes.getDefaultIsolationScope());\n}\nfunction withScope(callback) {\n  return getAsyncContextStack().withScope(callback);\n}\nfunction withSetScope(scope, callback) {\n  const stack = getAsyncContextStack();\n  return stack.withScope(() => {\n    stack.getStackTop().scope = scope;\n    return callback(scope);\n  });\n}\nfunction withIsolationScope(callback) {\n  return getAsyncContextStack().withScope(() => {\n    return callback(getAsyncContextStack().getIsolationScope());\n  });\n}\n\n/**\n * Get the stack-based async context strategy.\n */\nfunction getStackAsyncContextStrategy() {\n  return {\n    withIsolationScope,\n    withScope,\n    withSetScope,\n    withSetIsolationScope: (_isolationScope, callback) => {\n      return withIsolationScope(callback);\n    },\n    getCurrentScope: () => getAsyncContextStack().getScope(),\n    getIsolationScope: () => getAsyncContextStack().getIsolationScope()\n  };\n}\nexports.AsyncContextStack = AsyncContextStack;\nexports.getStackAsyncContextStrategy = getStackAsyncContextStrategy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/baseclient.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/baseclient.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/api.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\");\nconst integration = __webpack_require__(/*! ./integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst clientreport = __webpack_require__(/*! ./utils-hoist/clientreport.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js\");\nconst dsn = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst envelope$1 = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst error = __webpack_require__(/*! ./utils-hoist/error.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst syncpromise = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst parseSampleRate = __webpack_require__(/*! ./utils/parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\nconst prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nclass BaseClient {\n  /** Options passed to the SDK. */\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n\n  /** Array of set up integrations. */\n\n  /** Number of calls being processed */\n\n  /** Holds flushable  */\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  constructor(options) {\n    this._options = options;\n    this._integrations = {};\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n    if (options.dsn) {\n      this._dsn = dsn.makeDsn(options.dsn);\n    } else {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('No DSN provided, client will not send events.');\n    }\n    if (this._dsn) {\n      const url = api.getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options.tunnel, options._metadata ? options._metadata.sdk : undefined);\n      this._transport = options.transport({\n        tunnel: this._options.tunnel,\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url\n      });\n    }\n\n    // TODO(v9): Remove this deprecation warning\n    const tracingOptions = ['enableTracing', 'tracesSampleRate', 'tracesSampler'];\n    const undefinedOption = tracingOptions.find(option => option in options && options[option] == undefined);\n    if (undefinedOption) {\n      logger.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn(`[Sentry] Deprecation warning: \\`${undefinedOption}\\` is set to undefined, which leads to tracing being enabled. In v9, a value of \\`undefined\\` will result in tracing being disabled.`);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureException(exception, hint, scope) {\n    const eventId = misc.uuid4();\n\n    // ensure we haven't captured this very object before\n    if (misc.checkOrSetAlreadyCaught(exception)) {\n      debugBuild.DEBUG_BUILD && logger.logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint\n    };\n    this._process(this.eventFromException(exception, hintWithEventId).then(event => this._captureEvent(event, hintWithEventId, scope)));\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureMessage(message, level, hint, currentScope) {\n    const hintWithEventId = {\n      event_id: misc.uuid4(),\n      ...hint\n    };\n    const eventMessage = is.isParameterizedString(message) ? message : String(message);\n    const promisedEvent = is.isPrimitive(message) ? this.eventFromMessage(eventMessage, level, hintWithEventId) : this.eventFromException(message, hintWithEventId);\n    this._process(promisedEvent.then(event => this._captureEvent(event, hintWithEventId, currentScope)));\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureEvent(event, hint, currentScope) {\n    const eventId = misc.uuid4();\n\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && misc.checkOrSetAlreadyCaught(hint.originalException)) {\n      debugBuild.DEBUG_BUILD && logger.logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint\n    };\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanScope = sdkProcessingMetadata.capturedSpanScope;\n    this._process(this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope));\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureSession(session$1) {\n    if (!(typeof session$1.release === 'string')) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session$1);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.updateSession(session$1, {\n        init: false\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getDsn() {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getOptions() {\n    return this._options;\n  }\n\n  /**\n   * @see SdkMetadata\n   *\n   * @return The metadata of the SDK\n   */\n  getSdkMetadata() {\n    return this._options._metadata;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTransport() {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  flush(timeout) {\n    const transport = this._transport;\n    if (transport) {\n      this.emit('flush');\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return syncpromise.resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  close(timeout) {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      this.emit('close');\n      return result;\n    });\n  }\n\n  /** Get all installed event processors. */\n  getEventProcessors() {\n    return this._eventProcessors;\n  }\n\n  /** @inheritDoc */\n  addEventProcessor(eventProcessor) {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /** @inheritdoc */\n  init() {\n    if (this._isEnabled() ||\n    // Force integrations to be setup even if no DSN was set when we have\n    // Spotlight enabled. This is particularly important for browser as we\n    // don't support the `spotlight` option there and rely on the users\n    // adding the `spotlightBrowserIntegration()` to their integrations which\n    // wouldn't get initialized with the check below when there's no DSN set.\n    this._options.integrations.some(({\n      name\n    }) => name.startsWith('Spotlight'))) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n  getIntegrationByName(integrationName) {\n    return this._integrations[integrationName];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addIntegration(integration$1) {\n    const isAlreadyInstalled = this._integrations[integration$1.name];\n\n    // This hook takes care of only installing if not already installed\n    integration.setupIntegration(this, integration$1, this._integrations);\n    // Here we need to check manually to make sure to not run this multiple times\n    if (!isAlreadyInstalled) {\n      integration.afterSetupIntegrations(this, [integration$1]);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  sendEvent(event, hint = {}) {\n    this.emit('beforeSendEvent', event, hint);\n    let env = envelope.createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n    for (const attachment of hint.attachments || []) {\n      env = envelope$1.addItemToEnvelope(env, envelope$1.createAttachmentEnvelopeItem(attachment));\n    }\n    const promise = this.sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  sendSession(session) {\n    const env = envelope.createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(env);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  recordDroppedEvent(reason, category, eventOrCount) {\n    if (this._options.sendClientReports) {\n      // TODO v9: We do not need the `event` passed as third argument anymore, and can possibly remove this overload\n      // If event is passed as third argument, we assume this is a count of 1\n      const count = typeof eventOrCount === 'number' ? eventOrCount : 1;\n\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      debugBuild.DEBUG_BUILD && logger.logger.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : ''}`);\n      this._outcomes[key] = (this._outcomes[key] || 0) + count;\n    }\n  }\n\n  // Keep on() & emit() signatures in sync with types' client.ts interface\n  /* eslint-disable @typescript-eslint/unified-signatures */\n\n  /** @inheritdoc */\n\n  /** @inheritdoc */\n  on(hook, callback) {\n    const hooks = this._hooks[hook] = this._hooks[hook] || [];\n\n    // @ts-expect-error We assume the types are correct\n    hooks.push(callback);\n\n    // This function returns a callback execution handler that, when invoked,\n    // deregisters a callback. This is crucial for managing instances where callbacks\n    // need to be unregistered to prevent self-referencing in callback closures,\n    // ensuring proper garbage collection.\n    return () => {\n      // @ts-expect-error We assume the types are correct\n      const cbIndex = hooks.indexOf(callback);\n      if (cbIndex > -1) {\n        hooks.splice(cbIndex, 1);\n      }\n    };\n  }\n\n  /** @inheritdoc */\n\n  /** @inheritdoc */\n  emit(hook, ...rest) {\n    const callbacks = this._hooks[hook];\n    if (callbacks) {\n      callbacks.forEach(callback => callback(...rest));\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n  sendEnvelope(envelope) {\n    this.emit('beforeEnvelope', envelope);\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        debugBuild.DEBUG_BUILD && logger.logger.error('Error while sending envelope:', reason);\n        return reason;\n      });\n    }\n    debugBuild.DEBUG_BUILD && logger.logger.error('Transport disabled');\n    return syncpromise.resolvedSyncPromise({});\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n  _setupIntegrations() {\n    const {\n      integrations\n    } = this._options;\n    this._integrations = integration.setupIntegrations(this, integrations);\n    integration.afterSetupIntegrations(this, integrations);\n  }\n\n  /** Updates existing session based on the provided event */\n  _updateSessionFromEvent(session$1, event) {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n    if (exceptions) {\n      errored = true;\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session$1.status === 'ok';\n    const shouldUpdateAndSend = sessionNonTerminal && session$1.errors === 0 || sessionNonTerminal && crashed;\n    if (shouldUpdateAndSend) {\n      session.updateSession(session$1, {\n        ...(crashed && {\n          status: 'crashed'\n        }),\n        errors: session$1.errors || Number(errored || crashed)\n      });\n      this.captureSession(session$1);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  _isClientDoneProcessing(timeout) {\n    return new syncpromise.SyncPromise(resolve => {\n      let ticked = 0;\n      const tick = 1;\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n  _isEnabled() {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  _prepareEvent(event, hint, currentScope = currentScopes.getCurrentScope(), isolationScope = currentScopes.getIsolationScope()) {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations.length > 0) {\n      hint.integrations = integrations;\n    }\n    this.emit('preprocessEvent', event, hint);\n    if (!event.type) {\n      isolationScope.setLastEventId(event.event_id || hint.event_id);\n    }\n    return prepareEvent.prepareEvent(options, event, hint, currentScope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n      evt.contexts = {\n        trace: currentScopes.getTraceContextFromScope(currentScope),\n        ...evt.contexts\n      };\n      const dynamicSamplingContext$1 = dynamicSamplingContext.getDynamicSamplingContextFromScope(this, currentScope);\n      evt.sdkProcessingMetadata = {\n        dynamicSamplingContext: dynamicSamplingContext$1,\n        ...evt.sdkProcessingMetadata\n      };\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  _captureEvent(event, hint = {}, scope) {\n    return this._processEvent(event, hint, scope).then(finalEvent => {\n      return finalEvent.event_id;\n    }, reason => {\n      if (debugBuild.DEBUG_BUILD) {\n        // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n        // control flow, log just the message (no stack) as a log-level log.\n        const sentryError = reason;\n        if (sentryError.logLevel === 'log') {\n          logger.logger.log(sentryError.message);\n        } else {\n          logger.logger.warn(sentryError);\n        }\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  _processEvent(event, hint, currentScope) {\n    const options = this.getOptions();\n    const {\n      sampleRate\n    } = options;\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : parseSampleRate.parseSampleRate(sampleRate);\n    if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error', event);\n      return syncpromise.rejectedSyncPromise(new error.SentryError(`Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`, 'log'));\n    }\n    const dataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanIsolationScope = sdkProcessingMetadata.capturedSpanIsolationScope;\n    return this._prepareEvent(event, hint, currentScope, capturedSpanIsolationScope).then(prepared => {\n      if (prepared === null) {\n        this.recordDroppedEvent('event_processor', dataCategory, event);\n        throw new error.SentryError('An event processor returned `null`, will not send event.', 'log');\n      }\n      const isInternalException = hint.data && hint.data.__sentry__ === true;\n      if (isInternalException) {\n        return prepared;\n      }\n      const result = processBeforeSend(this, options, prepared, hint);\n      return _validateBeforeSendResult(result, beforeSendLabel);\n    }).then(processedEvent => {\n      if (processedEvent === null) {\n        this.recordDroppedEvent('before_send', dataCategory, event);\n        if (isTransaction) {\n          const spans = event.spans || [];\n          // the transaction itself counts as one span, plus all the child spans that are added\n          const spanCount = 1 + spans.length;\n          this.recordDroppedEvent('before_send', 'span', spanCount);\n        }\n        throw new error.SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, 'log');\n      }\n      const session = currentScope && currentScope.getSession();\n      if (!isTransaction && session) {\n        this._updateSessionFromEvent(session, processedEvent);\n      }\n      if (isTransaction) {\n        const spanCountBefore = processedEvent.sdkProcessingMetadata && processedEvent.sdkProcessingMetadata.spanCountBeforeProcessing || 0;\n        const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n        const droppedSpanCount = spanCountBefore - spanCountAfter;\n        if (droppedSpanCount > 0) {\n          this.recordDroppedEvent('before_send', 'span', droppedSpanCount);\n        }\n      }\n\n      // None of the Sentry built event processor will update transaction name,\n      // so if the transaction name has been changed by an event processor, we know\n      // it has to come from custom event processor added by a user\n      const transactionInfo = processedEvent.transaction_info;\n      if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n        const source = 'custom';\n        processedEvent.transaction_info = {\n          ...transactionInfo,\n          source\n        };\n      }\n      this.sendEvent(processedEvent, hint);\n      return processedEvent;\n    }).then(null, reason => {\n      if (reason instanceof error.SentryError) {\n        throw reason;\n      }\n      this.captureException(reason, {\n        data: {\n          __sentry__: true\n        },\n        originalException: reason\n      });\n      throw new error.SentryError(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`);\n    });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  _process(promise) {\n    this._numProcessing++;\n    void promise.then(value => {\n      this._numProcessing--;\n      return value;\n    }, reason => {\n      this._numProcessing--;\n      return reason;\n    });\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  _clearOutcomes() {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.entries(outcomes).map(([key, quantity]) => {\n      const [reason, category] = key.split(':');\n      return {\n        reason,\n        category,\n        quantity\n      };\n    });\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  _flushOutcomes() {\n    debugBuild.DEBUG_BUILD && logger.logger.log('Flushing outcomes...');\n    const outcomes = this._clearOutcomes();\n    if (outcomes.length === 0) {\n      debugBuild.DEBUG_BUILD && logger.logger.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      debugBuild.DEBUG_BUILD && logger.logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n    debugBuild.DEBUG_BUILD && logger.logger.log('Sending outcomes:', outcomes);\n    const envelope = clientreport.createClientReportEnvelope(outcomes, this._options.tunnel && dsn.dsnToString(this._dsn));\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(beforeSendResult, beforeSendLabel) {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (is.isThenable(beforeSendResult)) {\n    return beforeSendResult.then(event => {\n      if (!is.isPlainObject(event) && event !== null) {\n        throw new error.SentryError(invalidValueError);\n      }\n      return event;\n    }, e => {\n      throw new error.SentryError(`${beforeSendLabel} rejected with ${e}`);\n    });\n  } else if (!is.isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw new error.SentryError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(client, options, event, hint) {\n  const {\n    beforeSend,\n    beforeSendTransaction,\n    beforeSendSpan\n  } = options;\n  if (isErrorEvent(event) && beforeSend) {\n    return beforeSend(event, hint);\n  }\n  if (isTransactionEvent(event)) {\n    if (event.spans && beforeSendSpan) {\n      const processedSpans = [];\n      for (const span of event.spans) {\n        const processedSpan = beforeSendSpan(span);\n        if (processedSpan) {\n          processedSpans.push(processedSpan);\n        } else {\n          spanUtils.showSpanDropWarning();\n          client.recordDroppedEvent('before_send', 'span');\n        }\n      }\n      event.spans = processedSpans;\n    }\n    if (beforeSendTransaction) {\n      if (event.spans) {\n        // We store the # of spans before processing in SDK metadata,\n        // so we can compare it afterwards to determine how many spans were dropped\n        const spanCountBefore = event.spans.length;\n        event.sdkProcessingMetadata = {\n          ...event.sdkProcessingMetadata,\n          spanCountBeforeProcessing: spanCountBefore\n        };\n      }\n      return beforeSendTransaction(event, hint);\n    }\n  }\n  return event;\n}\nfunction isErrorEvent(event) {\n  return event.type === undefined;\n}\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\nexports.BaseClient = BaseClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/baseclient.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/breadcrumbs.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst time = __webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nfunction addBreadcrumb(breadcrumb, hint) {\n  const client = currentScopes.getClient();\n  const isolationScope = currentScopes.getIsolationScope();\n  if (!client) return;\n  const {\n    beforeBreadcrumb = null,\n    maxBreadcrumbs = DEFAULT_BREADCRUMBS\n  } = client.getOptions();\n  if (maxBreadcrumbs <= 0) return;\n  const timestamp = time.dateTimestampInSeconds();\n  const mergedBreadcrumb = {\n    timestamp,\n    ...breadcrumb\n  };\n  const finalBreadcrumb = beforeBreadcrumb ? logger.consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;\n  if (finalBreadcrumb === null) return;\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\nexports.addBreadcrumb = addBreadcrumb;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYnJlYWRjcnVtYnMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsK0ZBQW9CLENBQUM7QUFDbkQsTUFBTUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLHlHQUF5QixDQUFDO0FBQ2pELE1BQU1FLElBQUksR0FBR0YsbUJBQU8sQ0FBQyxxR0FBdUIsQ0FBQzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNRyxtQkFBbUIsR0FBRyxHQUFHOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxhQUFhQSxDQUFDQyxVQUFVLEVBQUVDLElBQUksRUFBRTtFQUN2QyxNQUFNQyxNQUFNLEdBQUdSLGFBQWEsQ0FBQ1MsU0FBUyxDQUFDLENBQUM7RUFDeEMsTUFBTUMsY0FBYyxHQUFHVixhQUFhLENBQUNXLGlCQUFpQixDQUFDLENBQUM7RUFFeEQsSUFBSSxDQUFDSCxNQUFNLEVBQUU7RUFFYixNQUFNO0lBQUVJLGdCQUFnQixHQUFHLElBQUk7SUFBRUMsY0FBYyxHQUFHVDtFQUFvQixDQUFDLEdBQUdJLE1BQU0sQ0FBQ00sVUFBVSxDQUFDLENBQUM7RUFFN0YsSUFBSUQsY0FBYyxJQUFJLENBQUMsRUFBRTtFQUV6QixNQUFNRSxTQUFTLEdBQUdaLElBQUksQ0FBQ2Esc0JBQXNCLENBQUMsQ0FBQztFQUMvQyxNQUFNQyxnQkFBZ0IsR0FBRztJQUFFRixTQUFTO0lBQUUsR0FBR1Q7RUFBVyxDQUFDO0VBQ3JELE1BQU1ZLGVBQWUsR0FBR04sZ0JBQWdCLEdBQ25DVixNQUFNLENBQUNpQixjQUFjLENBQUMsTUFBTVAsZ0JBQWdCLENBQUNLLGdCQUFnQixFQUFFVixJQUFJLENBQUMsQ0FBQyxHQUN0RVUsZ0JBQWdCO0VBRXBCLElBQUlDLGVBQWUsS0FBSyxJQUFJLEVBQUU7RUFFOUIsSUFBSVYsTUFBTSxDQUFDWSxJQUFJLEVBQUU7SUFDZlosTUFBTSxDQUFDWSxJQUFJLENBQUMscUJBQXFCLEVBQUVGLGVBQWUsRUFBRVgsSUFBSSxDQUFDO0VBQzNEO0VBRUFHLGNBQWMsQ0FBQ0wsYUFBYSxDQUFDYSxlQUFlLEVBQUVMLGNBQWMsQ0FBQztBQUMvRDtBQUVBZixxQkFBcUIsR0FBR08sYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2JyZWFkY3J1bWJzLmpzPzA0OGMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9sb2dnZXIuanMnKTtcbmNvbnN0IHRpbWUgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L3RpbWUuanMnKTtcblxuLyoqXG4gKiBEZWZhdWx0IG1heGltdW0gbnVtYmVyIG9mIGJyZWFkY3J1bWJzIGFkZGVkIHRvIGFuIGV2ZW50LiBDYW4gYmUgb3ZlcndyaXR0ZW5cbiAqIHdpdGgge0BsaW5rIE9wdGlvbnMubWF4QnJlYWRjcnVtYnN9LlxuICovXG5jb25zdCBERUZBVUxUX0JSRUFEQ1JVTUJTID0gMTAwO1xuXG4vKipcbiAqIFJlY29yZHMgYSBuZXcgYnJlYWRjcnVtYiB3aGljaCB3aWxsIGJlIGF0dGFjaGVkIHRvIGZ1dHVyZSBldmVudHMuXG4gKlxuICogQnJlYWRjcnVtYnMgd2lsbCBiZSBhZGRlZCB0byBzdWJzZXF1ZW50IGV2ZW50cyB0byBwcm92aWRlIG1vcmUgY29udGV4dCBvblxuICogdXNlcidzIGFjdGlvbnMgcHJpb3IgdG8gYW4gZXJyb3Igb3IgY3Jhc2guXG4gKi9cbmZ1bmN0aW9uIGFkZEJyZWFkY3J1bWIoYnJlYWRjcnVtYiwgaGludCkge1xuICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuICBjb25zdCBpc29sYXRpb25TY29wZSA9IGN1cnJlbnRTY29wZXMuZ2V0SXNvbGF0aW9uU2NvcGUoKTtcblxuICBpZiAoIWNsaWVudCkgcmV0dXJuO1xuXG4gIGNvbnN0IHsgYmVmb3JlQnJlYWRjcnVtYiA9IG51bGwsIG1heEJyZWFkY3J1bWJzID0gREVGQVVMVF9CUkVBRENSVU1CUyB9ID0gY2xpZW50LmdldE9wdGlvbnMoKTtcblxuICBpZiAobWF4QnJlYWRjcnVtYnMgPD0gMCkgcmV0dXJuO1xuXG4gIGNvbnN0IHRpbWVzdGFtcCA9IHRpbWUuZGF0ZVRpbWVzdGFtcEluU2Vjb25kcygpO1xuICBjb25zdCBtZXJnZWRCcmVhZGNydW1iID0geyB0aW1lc3RhbXAsIC4uLmJyZWFkY3J1bWIgfTtcbiAgY29uc3QgZmluYWxCcmVhZGNydW1iID0gYmVmb3JlQnJlYWRjcnVtYlxuICAgID8gKGxvZ2dlci5jb25zb2xlU2FuZGJveCgoKSA9PiBiZWZvcmVCcmVhZGNydW1iKG1lcmdlZEJyZWFkY3J1bWIsIGhpbnQpKSApXG4gICAgOiBtZXJnZWRCcmVhZGNydW1iO1xuXG4gIGlmIChmaW5hbEJyZWFkY3J1bWIgPT09IG51bGwpIHJldHVybjtcblxuICBpZiAoY2xpZW50LmVtaXQpIHtcbiAgICBjbGllbnQuZW1pdCgnYmVmb3JlQWRkQnJlYWRjcnVtYicsIGZpbmFsQnJlYWRjcnVtYiwgaGludCk7XG4gIH1cblxuICBpc29sYXRpb25TY29wZS5hZGRCcmVhZGNydW1iKGZpbmFsQnJlYWRjcnVtYiwgbWF4QnJlYWRjcnVtYnMpO1xufVxuXG5leHBvcnRzLmFkZEJyZWFkY3J1bWIgPSBhZGRCcmVhZGNydW1iO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJlYWRjcnVtYnMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjdXJyZW50U2NvcGVzIiwicmVxdWlyZSIsImxvZ2dlciIsInRpbWUiLCJERUZBVUxUX0JSRUFEQ1JVTUJTIiwiYWRkQnJlYWRjcnVtYiIsImJyZWFkY3J1bWIiLCJoaW50IiwiY2xpZW50IiwiZ2V0Q2xpZW50IiwiaXNvbGF0aW9uU2NvcGUiLCJnZXRJc29sYXRpb25TY29wZSIsImJlZm9yZUJyZWFkY3J1bWIiLCJtYXhCcmVhZGNydW1icyIsImdldE9wdGlvbnMiLCJ0aW1lc3RhbXAiLCJkYXRlVGltZXN0YW1wSW5TZWNvbmRzIiwibWVyZ2VkQnJlYWRjcnVtYiIsImZpbmFsQnJlYWRjcnVtYiIsImNvbnNvbGVTYW5kYm94IiwiZW1pdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/carrier.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst version = __webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * An object that contains globally accessible properties and maintains a scope stack.\n * @hidden\n */\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  // This ensures a Sentry carrier exists\n  getSentryCarrier(worldwide.GLOBAL_OBJ);\n  return worldwide.GLOBAL_OBJ;\n}\n\n/** Will either get the existing sentry carrier, or create a new one. */\nfunction getSentryCarrier(carrier) {\n  const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n\n  // For now: First SDK that sets the .version property wins\n  __SENTRY__.version = __SENTRY__.version || version.SDK_VERSION;\n\n  // Intentionally populating and returning the version of \"this\" SDK instance\n  // rather than what's set in .version so that \"this\" SDK always gets its carrier\n  return __SENTRY__[version.SDK_VERSION] = __SENTRY__[version.SDK_VERSION] || {};\n}\nexports.getMainCarrier = getMainCarrier;\nexports.getSentryCarrier = getSentryCarrier;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY2Fycmllci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQywyR0FBMEIsQ0FBQztBQUNuRCxNQUFNQyxTQUFTLEdBQUdELG1CQUFPLENBQUMsK0dBQTRCLENBQUM7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsY0FBY0EsQ0FBQSxFQUFHO0VBQ3hCO0VBQ0FDLGdCQUFnQixDQUFDRixTQUFTLENBQUNHLFVBQVUsQ0FBQztFQUN0QyxPQUFPSCxTQUFTLENBQUNHLFVBQVU7QUFDN0I7O0FBRUE7QUFDQSxTQUFTRCxnQkFBZ0JBLENBQUNFLE9BQU8sRUFBRTtFQUNqQyxNQUFNQyxVQUFVLEdBQUlELE9BQU8sQ0FBQ0MsVUFBVSxHQUFHRCxPQUFPLENBQUNDLFVBQVUsSUFBSSxDQUFDLENBQUU7O0VBRWxFO0VBQ0FBLFVBQVUsQ0FBQ1AsT0FBTyxHQUFHTyxVQUFVLENBQUNQLE9BQU8sSUFBSUEsT0FBTyxDQUFDUSxXQUFXOztFQUU5RDtFQUNBO0VBQ0EsT0FBUUQsVUFBVSxDQUFDUCxPQUFPLENBQUNRLFdBQVcsQ0FBQyxHQUFHRCxVQUFVLENBQUNQLE9BQU8sQ0FBQ1EsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pGO0FBRUFWLHNCQUFzQixHQUFHSyxjQUFjO0FBQ3ZDTCx3QkFBd0IsR0FBR00sZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY2Fycmllci5qcz82YjZjIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHZlcnNpb24gPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L3ZlcnNpb24uanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3Qvd29ybGR3aWRlLmpzJyk7XG5cbi8qKlxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgZ2xvYmFsbHkgYWNjZXNzaWJsZSBwcm9wZXJ0aWVzIGFuZCBtYWludGFpbnMgYSBzY29wZSBzdGFjay5cbiAqIEBoaWRkZW5cbiAqL1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdsb2JhbCBzaGltIHJlZ2lzdHJ5LlxuICpcbiAqIEZJWE1FOiBUaGlzIGZ1bmN0aW9uIGlzIHByb2JsZW1hdGljLCBiZWNhdXNlIGRlc3BpdGUgYWx3YXlzIHJldHVybmluZyBhIHZhbGlkIENhcnJpZXIsXG4gKiBpdCBoYXMgYW4gb3B0aW9uYWwgYF9fU0VOVFJZX19gIHByb3BlcnR5LCB3aGljaCB0aGVuIGluIHR1cm4gcmVxdWlyZXMgdXMgdG8gYWx3YXlzIHBlcmZvcm0gYW4gdW5uZWNlc3NhcnkgY2hlY2tcbiAqIGF0IHRoZSBjYWxsLXNpdGUuIFdlIGFsd2F5cyBhY2Nlc3MgdGhlIGNhcnJpZXIgdGhyb3VnaCB0aGlzIGZ1bmN0aW9uLCBzbyB3ZSBjYW4gZ3VhcmFudGVlIHRoYXQgYF9fU0VOVFJZX19gIGlzIHRoZXJlLlxuICoqL1xuZnVuY3Rpb24gZ2V0TWFpbkNhcnJpZXIoKSB7XG4gIC8vIFRoaXMgZW5zdXJlcyBhIFNlbnRyeSBjYXJyaWVyIGV4aXN0c1xuICBnZXRTZW50cnlDYXJyaWVyKHdvcmxkd2lkZS5HTE9CQUxfT0JKKTtcbiAgcmV0dXJuIHdvcmxkd2lkZS5HTE9CQUxfT0JKO1xufVxuXG4vKiogV2lsbCBlaXRoZXIgZ2V0IHRoZSBleGlzdGluZyBzZW50cnkgY2Fycmllciwgb3IgY3JlYXRlIGEgbmV3IG9uZS4gKi9cbmZ1bmN0aW9uIGdldFNlbnRyeUNhcnJpZXIoY2Fycmllcikge1xuICBjb25zdCBfX1NFTlRSWV9fID0gKGNhcnJpZXIuX19TRU5UUllfXyA9IGNhcnJpZXIuX19TRU5UUllfXyB8fCB7fSk7XG5cbiAgLy8gRm9yIG5vdzogRmlyc3QgU0RLIHRoYXQgc2V0cyB0aGUgLnZlcnNpb24gcHJvcGVydHkgd2luc1xuICBfX1NFTlRSWV9fLnZlcnNpb24gPSBfX1NFTlRSWV9fLnZlcnNpb24gfHwgdmVyc2lvbi5TREtfVkVSU0lPTjtcblxuICAvLyBJbnRlbnRpb25hbGx5IHBvcHVsYXRpbmcgYW5kIHJldHVybmluZyB0aGUgdmVyc2lvbiBvZiBcInRoaXNcIiBTREsgaW5zdGFuY2VcbiAgLy8gcmF0aGVyIHRoYW4gd2hhdCdzIHNldCBpbiAudmVyc2lvbiBzbyB0aGF0IFwidGhpc1wiIFNESyBhbHdheXMgZ2V0cyBpdHMgY2FycmllclxuICByZXR1cm4gKF9fU0VOVFJZX19bdmVyc2lvbi5TREtfVkVSU0lPTl0gPSBfX1NFTlRSWV9fW3ZlcnNpb24uU0RLX1ZFUlNJT05dIHx8IHt9KTtcbn1cblxuZXhwb3J0cy5nZXRNYWluQ2FycmllciA9IGdldE1haW5DYXJyaWVyO1xuZXhwb3J0cy5nZXRTZW50cnlDYXJyaWVyID0gZ2V0U2VudHJ5Q2Fycmllcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhcnJpZXIuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2ZXJzaW9uIiwicmVxdWlyZSIsIndvcmxkd2lkZSIsImdldE1haW5DYXJyaWVyIiwiZ2V0U2VudHJ5Q2FycmllciIsIkdMT0JBTF9PQkoiLCJjYXJyaWVyIiwiX19TRU5UUllfXyIsIlNES19WRVJTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/checkin.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dsn = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst envelope = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * Create envelope from check in item.\n */\nfunction createCheckInEnvelope(checkIn, dynamicSamplingContext, metadata, tunnel, dsn$1) {\n  const headers = {\n    sent_at: new Date().toISOString()\n  };\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version\n    };\n  }\n  if (!!tunnel && !!dsn$1) {\n    headers.dsn = dsn.dsnToString(dsn$1);\n  }\n  if (dynamicSamplingContext) {\n    headers.trace = object.dropUndefinedKeys(dynamicSamplingContext);\n  }\n  const item = createCheckInEnvelopeItem(checkIn);\n  return envelope.createEnvelope(headers, [item]);\n}\nfunction createCheckInEnvelopeItem(checkIn) {\n  const checkInHeaders = {\n    type: 'check_in'\n  };\n  return [checkInHeaders, checkIn];\n}\nexports.createCheckInEnvelope = createCheckInEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY2hlY2tpbi5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLEdBQUcsR0FBR0MsbUJBQU8sQ0FBQyxtR0FBc0IsQ0FBQztBQUMzQyxNQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsNkdBQTJCLENBQUM7QUFDckQsTUFBTUUsTUFBTSxHQUFHRixtQkFBTyxDQUFDLHlHQUF5QixDQUFDOztBQUVqRDtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxxQkFBcUJBLENBQzVCQyxPQUFPLEVBQ1BDLHNCQUFzQixFQUN0QkMsUUFBUSxFQUNSQyxNQUFNLEVBQ05DLEtBQUssRUFDTDtFQUNBLE1BQU1DLE9BQU8sR0FBRztJQUNkQyxPQUFPLEVBQUUsSUFBSUMsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDO0VBQ2xDLENBQUM7RUFFRCxJQUFJTixRQUFRLElBQUlBLFFBQVEsQ0FBQ08sR0FBRyxFQUFFO0lBQzVCSixPQUFPLENBQUNJLEdBQUcsR0FBRztNQUNaQyxJQUFJLEVBQUVSLFFBQVEsQ0FBQ08sR0FBRyxDQUFDQyxJQUFJO01BQ3ZCQyxPQUFPLEVBQUVULFFBQVEsQ0FBQ08sR0FBRyxDQUFDRTtJQUN4QixDQUFDO0VBQ0g7RUFFQSxJQUFJLENBQUMsQ0FBQ1IsTUFBTSxJQUFJLENBQUMsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3ZCQyxPQUFPLENBQUNWLEdBQUcsR0FBR0EsR0FBRyxDQUFDaUIsV0FBVyxDQUFDUixLQUFLLENBQUM7RUFDdEM7RUFFQSxJQUFJSCxzQkFBc0IsRUFBRTtJQUMxQkksT0FBTyxDQUFDUSxLQUFLLEdBQUdmLE1BQU0sQ0FBQ2dCLGlCQUFpQixDQUFDYixzQkFBc0IsQ0FBQztFQUNsRTtFQUVBLE1BQU1jLElBQUksR0FBR0MseUJBQXlCLENBQUNoQixPQUFPLENBQUM7RUFDL0MsT0FBT0gsUUFBUSxDQUFDb0IsY0FBYyxDQUFDWixPQUFPLEVBQUUsQ0FBQ1UsSUFBSSxDQUFDLENBQUM7QUFDakQ7QUFFQSxTQUFTQyx5QkFBeUJBLENBQUNoQixPQUFPLEVBQUU7RUFDMUMsTUFBTWtCLGNBQWMsR0FBRztJQUNyQkMsSUFBSSxFQUFFO0VBQ1IsQ0FBQztFQUNELE9BQU8sQ0FBQ0QsY0FBYyxFQUFFbEIsT0FBTyxDQUFDO0FBQ2xDO0FBRUFQLDZCQUE2QixHQUFHTSxxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9jaGVja2luLmpzP2Y4NzIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZHNuID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9kc24uanMnKTtcbmNvbnN0IGVudmVsb3BlID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9lbnZlbG9wZS5qcycpO1xuY29uc3Qgb2JqZWN0ID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9vYmplY3QuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgZW52ZWxvcGUgZnJvbSBjaGVjayBpbiBpdGVtLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGVja0luRW52ZWxvcGUoXG4gIGNoZWNrSW4sXG4gIGR5bmFtaWNTYW1wbGluZ0NvbnRleHQsXG4gIG1ldGFkYXRhLFxuICB0dW5uZWwsXG4gIGRzbiQxLFxuKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICB9O1xuXG4gIGlmIChtZXRhZGF0YSAmJiBtZXRhZGF0YS5zZGspIHtcbiAgICBoZWFkZXJzLnNkayA9IHtcbiAgICAgIG5hbWU6IG1ldGFkYXRhLnNkay5uYW1lLFxuICAgICAgdmVyc2lvbjogbWV0YWRhdGEuc2RrLnZlcnNpb24sXG4gICAgfTtcbiAgfVxuXG4gIGlmICghIXR1bm5lbCAmJiAhIWRzbiQxKSB7XG4gICAgaGVhZGVycy5kc24gPSBkc24uZHNuVG9TdHJpbmcoZHNuJDEpO1xuICB9XG5cbiAgaWYgKGR5bmFtaWNTYW1wbGluZ0NvbnRleHQpIHtcbiAgICBoZWFkZXJzLnRyYWNlID0gb2JqZWN0LmRyb3BVbmRlZmluZWRLZXlzKGR5bmFtaWNTYW1wbGluZ0NvbnRleHQpIDtcbiAgfVxuXG4gIGNvbnN0IGl0ZW0gPSBjcmVhdGVDaGVja0luRW52ZWxvcGVJdGVtKGNoZWNrSW4pO1xuICByZXR1cm4gZW52ZWxvcGUuY3JlYXRlRW52ZWxvcGUoaGVhZGVycywgW2l0ZW1dKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2hlY2tJbkVudmVsb3BlSXRlbShjaGVja0luKSB7XG4gIGNvbnN0IGNoZWNrSW5IZWFkZXJzID0ge1xuICAgIHR5cGU6ICdjaGVja19pbicsXG4gIH07XG4gIHJldHVybiBbY2hlY2tJbkhlYWRlcnMsIGNoZWNrSW5dO1xufVxuXG5leHBvcnRzLmNyZWF0ZUNoZWNrSW5FbnZlbG9wZSA9IGNyZWF0ZUNoZWNrSW5FbnZlbG9wZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZWNraW4uanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkc24iLCJyZXF1aXJlIiwiZW52ZWxvcGUiLCJvYmplY3QiLCJjcmVhdGVDaGVja0luRW52ZWxvcGUiLCJjaGVja0luIiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dCIsIm1ldGFkYXRhIiwidHVubmVsIiwiZHNuJDEiLCJoZWFkZXJzIiwic2VudF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInNkayIsIm5hbWUiLCJ2ZXJzaW9uIiwiZHNuVG9TdHJpbmciLCJ0cmFjZSIsImRyb3BVbmRlZmluZWRLZXlzIiwiaXRlbSIsImNyZWF0ZUNoZWNrSW5FbnZlbG9wZUl0ZW0iLCJjcmVhdGVFbnZlbG9wZSIsImNoZWNrSW5IZWFkZXJzIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst DEFAULT_ENVIRONMENT = 'production';\nexports.DEFAULT_ENVIRONMENT = DEFAULT_ENVIRONMENT;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsbUJBQW1CLEdBQUcsWUFBWTtBQUV4Q0YsMkJBQTJCLEdBQUdFLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2NvbnN0YW50cy5qcz80ZmQ2Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IERFRkFVTFRfRU5WSVJPTk1FTlQgPSAncHJvZHVjdGlvbic7XG5cbmV4cG9ydHMuREVGQVVMVF9FTlZJUk9OTUVOVCA9IERFRkFVTFRfRU5WSVJPTk1FTlQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJERUZBVUxUX0VOVklST05NRU5UIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/currentScopes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst index = __webpack_require__(/*! ./asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ./carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst scope = __webpack_require__(/*! ./scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * Get the currently active scope.\n */\nfunction getCurrentScope() {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  return acs.getCurrentScope();\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */\nfunction getIsolationScope() {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  return acs.getIsolationScope();\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nfunction getGlobalScope() {\n  return worldwide.getGlobalSingleton('globalScope', () => new scope.Scope());\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */\n\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nfunction withScope(...rest) {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n    if (!scope) {\n      return acs.withScope(callback);\n    }\n    return acs.withSetScope(scope, callback);\n  }\n  return acs.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */\n\n/**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */\nfunction withIsolationScope(...rest) {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [isolationScope, callback] = rest;\n    if (!isolationScope) {\n      return acs.withIsolationScope(callback);\n    }\n    return acs.withSetIsolationScope(isolationScope, callback);\n  }\n  return acs.withIsolationScope(rest[0]);\n}\n\n/**\n * Get the currently active client.\n */\nfunction getClient() {\n  return getCurrentScope().getClient();\n}\n\n/**\n * Get a trace context for the given scope.\n */\nfunction getTraceContextFromScope(scope) {\n  const propagationContext = scope.getPropagationContext();\n\n  // TODO(v9): Use generateSpanId() instead of spanId\n  // eslint-disable-next-line deprecation/deprecation\n  const {\n    traceId,\n    spanId,\n    parentSpanId\n  } = propagationContext;\n  const traceContext = object.dropUndefinedKeys({\n    trace_id: traceId,\n    span_id: spanId,\n    parent_span_id: parentSpanId\n  });\n  return traceContext;\n}\nexports.getClient = getClient;\nexports.getCurrentScope = getCurrentScope;\nexports.getGlobalScope = getGlobalScope;\nexports.getIsolationScope = getIsolationScope;\nexports.getTraceContextFromScope = getTraceContextFromScope;\nexports.withIsolationScope = withIsolationScope;\nexports.withScope = withScope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/debug-build.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nexports.DEBUG_BUILD = DEBUG_BUILD;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFdBQVcsR0FBSSxPQUFPQyxnQkFBZ0IsS0FBSyxXQUFXLElBQUlBLGdCQUFpQjtBQUVqRkgsbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcz9mMDNmIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydHMuREVCVUdfQlVJTEQgPSBERUJVR19CVUlMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiREVCVUdfQlVJTEQiLCJfX1NFTlRSWV9ERUJVR19fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/defaultScopes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst scope = __webpack_require__(/*! ./scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/** Get the default current scope. */\nfunction getDefaultCurrentScope() {\n  return worldwide.getGlobalSingleton('defaultCurrentScope', () => new scope.Scope());\n}\n\n/** Get the default isolation scope. */\nfunction getDefaultIsolationScope() {\n  return worldwide.getGlobalSingleton('defaultIsolationScope', () => new scope.Scope());\n}\nexports.getDefaultCurrentScope = getDefaultCurrentScope;\nexports.getDefaultIsolationScope = getDefaultIsolationScope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZGVmYXVsdFNjb3Blcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLEtBQUssR0FBR0MsbUJBQU8sQ0FBQywrRUFBWSxDQUFDO0FBQ25DLE1BQU1DLFNBQVMsR0FBR0QsbUJBQU8sQ0FBQywrR0FBNEIsQ0FBQzs7QUFFdkQ7QUFDQSxTQUFTRSxzQkFBc0JBLENBQUEsRUFBRztFQUNoQyxPQUFPRCxTQUFTLENBQUNFLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFLE1BQU0sSUFBSUosS0FBSyxDQUFDSyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3JGOztBQUVBO0FBQ0EsU0FBU0Msd0JBQXdCQSxDQUFBLEVBQUc7RUFDbEMsT0FBT0osU0FBUyxDQUFDRSxrQkFBa0IsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLElBQUlKLEtBQUssQ0FBQ0ssS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2RjtBQUVBUCw4QkFBOEIsR0FBR0ssc0JBQXNCO0FBQ3ZETCxnQ0FBZ0MsR0FBR1Esd0JBQXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZGVmYXVsdFNjb3Blcy5qcz8xM2JkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHNjb3BlID0gcmVxdWlyZSgnLi9zY29wZS5qcycpO1xuY29uc3Qgd29ybGR3aWRlID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC93b3JsZHdpZGUuanMnKTtcblxuLyoqIEdldCB0aGUgZGVmYXVsdCBjdXJyZW50IHNjb3BlLiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEN1cnJlbnRTY29wZSgpIHtcbiAgcmV0dXJuIHdvcmxkd2lkZS5nZXRHbG9iYWxTaW5nbGV0b24oJ2RlZmF1bHRDdXJyZW50U2NvcGUnLCAoKSA9PiBuZXcgc2NvcGUuU2NvcGUoKSk7XG59XG5cbi8qKiBHZXQgdGhlIGRlZmF1bHQgaXNvbGF0aW9uIHNjb3BlLiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlKCkge1xuICByZXR1cm4gd29ybGR3aWRlLmdldEdsb2JhbFNpbmdsZXRvbignZGVmYXVsdElzb2xhdGlvblNjb3BlJywgKCkgPT4gbmV3IHNjb3BlLlNjb3BlKCkpO1xufVxuXG5leHBvcnRzLmdldERlZmF1bHRDdXJyZW50U2NvcGUgPSBnZXREZWZhdWx0Q3VycmVudFNjb3BlO1xuZXhwb3J0cy5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUgPSBnZXREZWZhdWx0SXNvbGF0aW9uU2NvcGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0U2NvcGVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2NvcGUiLCJyZXF1aXJlIiwid29ybGR3aWRlIiwiZ2V0RGVmYXVsdEN1cnJlbnRTY29wZSIsImdldEdsb2JhbFNpbmdsZXRvbiIsIlNjb3BlIiwiZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/envelope.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst dsn = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst envelope = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\n__webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ./utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\n__webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nfunction createSessionEnvelope(session, dsn$1, metadata, tunnel) {\n  const sdkInfo = envelope.getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && {\n      sdk: sdkInfo\n    }),\n    ...(!!tunnel && dsn$1 && {\n      dsn: dsn.dsnToString(dsn$1)\n    })\n  };\n  const envelopeItem = 'aggregates' in session ? [{\n    type: 'sessions'\n  }, session] : [{\n    type: 'session'\n  }, session.toJSON()];\n  return envelope.createEnvelope(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nfunction createEventEnvelope(event, dsn, metadata, tunnel) {\n  const sdkInfo = envelope.getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjust a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n  const envelopeHeaders = envelope.createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n  const eventItem = [{\n    type: eventType\n  }, event];\n  return envelope.createEnvelope(envelopeHeaders, [eventItem]);\n}\n\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */\nfunction createSpanEnvelope(spans, client) {\n  function dscHasRequiredProps(dsc) {\n    return !!dsc.trace_id && !!dsc.public_key;\n  }\n\n  // For the moment we'll obtain the DSC from the first span in the array\n  // This might need to be changed if we permit sending multiple spans from\n  // different segments in one envelope\n  const dsc = dynamicSamplingContext.getDynamicSamplingContextFromSpan(spans[0]);\n  const dsn$1 = client && client.getDsn();\n  const tunnel = client && client.getOptions().tunnel;\n  const headers = {\n    sent_at: new Date().toISOString(),\n    ...(dscHasRequiredProps(dsc) && {\n      trace: dsc\n    }),\n    ...(!!tunnel && dsn$1 && {\n      dsn: dsn.dsnToString(dsn$1)\n    })\n  };\n  const beforeSendSpan = client && client.getOptions().beforeSendSpan;\n  const convertToSpanJSON = beforeSendSpan ? span => {\n    const spanJson = beforeSendSpan(spanUtils.spanToJSON(span));\n    if (!spanJson) {\n      spanUtils.showSpanDropWarning();\n    }\n    return spanJson;\n  } : span => spanUtils.spanToJSON(span);\n  const items = [];\n  for (const span of spans) {\n    const spanJson = convertToSpanJSON(span);\n    if (spanJson) {\n      items.push(envelope.createSpanEnvelopeItem(spanJson));\n    }\n  }\n  return envelope.createEnvelope(headers, items);\n}\nexports.createEventEnvelope = createEventEnvelope;\nexports.createSessionEnvelope = createSessionEnvelope;\nexports.createSpanEnvelope = createSpanEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/eventProcessors.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst syncpromise = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */\nfunction notifyEventProcessors(processors, event, hint, index = 0) {\n  return new syncpromise.SyncPromise((resolve, reject) => {\n    const processor = processors[index];\n    if (event === null || typeof processor !== 'function') {\n      resolve(event);\n    } else {\n      const result = processor({\n        ...event\n      }, hint);\n      debugBuild.DEBUG_BUILD && processor.id && result === null && logger.logger.log(`Event processor \"${processor.id}\" dropped event`);\n      if (is.isThenable(result)) {\n        void result.then(final => notifyEventProcessors(processors, final, hint, index + 1).then(resolve)).then(null, reject);\n      } else {\n        void notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n      }\n    }\n  });\n}\nexports.notifyEventProcessors = notifyEventProcessors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZXZlbnRQcm9jZXNzb3JzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLDJGQUFrQixDQUFDO0FBQzlDLE1BQU1DLEVBQUUsR0FBR0QsbUJBQU8sQ0FBQyxpR0FBcUIsQ0FBQztBQUN6QyxNQUFNRSxNQUFNLEdBQUdGLG1CQUFPLENBQUMseUdBQXlCLENBQUM7QUFDakQsTUFBTUcsV0FBVyxHQUFHSCxtQkFBTyxDQUFDLG1IQUE4QixDQUFDOztBQUUzRDtBQUNBO0FBQ0E7QUFDQSxTQUFTSSxxQkFBcUJBLENBQzVCQyxVQUFVLEVBQ1ZDLEtBQUssRUFDTEMsSUFBSSxFQUNKQyxLQUFLLEdBQUcsQ0FBQyxFQUNUO0VBQ0EsT0FBTyxJQUFJTCxXQUFXLENBQUNNLFdBQVcsQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztJQUN0RCxNQUFNQyxTQUFTLEdBQUdQLFVBQVUsQ0FBQ0csS0FBSyxDQUFDO0lBQ25DLElBQUlGLEtBQUssS0FBSyxJQUFJLElBQUksT0FBT00sU0FBUyxLQUFLLFVBQVUsRUFBRTtNQUNyREYsT0FBTyxDQUFDSixLQUFLLENBQUM7SUFDaEIsQ0FBQyxNQUFNO01BQ0wsTUFBTU8sTUFBTSxHQUFHRCxTQUFTLENBQUM7UUFBRSxHQUFHTjtNQUFNLENBQUMsRUFBRUMsSUFBSSxDQUFDO01BRTVDUixVQUFVLENBQUNlLFdBQVcsSUFBSUYsU0FBUyxDQUFDRyxFQUFFLElBQUlGLE1BQU0sS0FBSyxJQUFJLElBQUlYLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDYyxHQUFHLENBQUUsb0JBQW1CSixTQUFTLENBQUNHLEVBQUcsaUJBQWdCLENBQUM7TUFFakksSUFBSWQsRUFBRSxDQUFDZ0IsVUFBVSxDQUFDSixNQUFNLENBQUMsRUFBRTtRQUN6QixLQUFLQSxNQUFNLENBQ1JLLElBQUksQ0FBQ0MsS0FBSyxJQUFJZixxQkFBcUIsQ0FBQ0MsVUFBVSxFQUFFYyxLQUFLLEVBQUVaLElBQUksRUFBRUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDVSxJQUFJLENBQUNSLE9BQU8sQ0FBQyxDQUFDLENBQ3RGUSxJQUFJLENBQUMsSUFBSSxFQUFFUCxNQUFNLENBQUM7TUFDdkIsQ0FBQyxNQUFNO1FBQ0wsS0FBS1AscUJBQXFCLENBQUNDLFVBQVUsRUFBRVEsTUFBTSxFQUFFTixJQUFJLEVBQUVDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FDNURVLElBQUksQ0FBQ1IsT0FBTyxDQUFDLENBQ2JRLElBQUksQ0FBQyxJQUFJLEVBQUVQLE1BQU0sQ0FBQztNQUN2QjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQWQsNkJBQTZCLEdBQUdPLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2V2ZW50UHJvY2Vzc29ycy5qcz83ZTIxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBpcyA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvaXMuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJyk7XG5jb25zdCBzeW5jcHJvbWlzZSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3Qvc3luY3Byb21pc2UuanMnKTtcblxuLyoqXG4gKiBQcm9jZXNzIGFuIGFycmF5IG9mIGV2ZW50IHByb2Nlc3NvcnMsIHJldHVybmluZyB0aGUgcHJvY2Vzc2VkIGV2ZW50IChvciBgbnVsbGAgaWYgdGhlIGV2ZW50IHdhcyBkcm9wcGVkKS5cbiAqL1xuZnVuY3Rpb24gbm90aWZ5RXZlbnRQcm9jZXNzb3JzKFxuICBwcm9jZXNzb3JzLFxuICBldmVudCxcbiAgaGludCxcbiAgaW5kZXggPSAwLFxuKSB7XG4gIHJldHVybiBuZXcgc3luY3Byb21pc2UuU3luY1Byb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHByb2Nlc3NvciA9IHByb2Nlc3NvcnNbaW5kZXhdO1xuICAgIGlmIChldmVudCA9PT0gbnVsbCB8fCB0eXBlb2YgcHJvY2Vzc29yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXNvbHZlKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcHJvY2Vzc29yKHsgLi4uZXZlbnQgfSwgaGludCkgO1xuXG4gICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIHByb2Nlc3Nvci5pZCAmJiByZXN1bHQgPT09IG51bGwgJiYgbG9nZ2VyLmxvZ2dlci5sb2coYEV2ZW50IHByb2Nlc3NvciBcIiR7cHJvY2Vzc29yLmlkfVwiIGRyb3BwZWQgZXZlbnRgKTtcblxuICAgICAgaWYgKGlzLmlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICB2b2lkIHJlc3VsdFxuICAgICAgICAgIC50aGVuKGZpbmFsID0+IG5vdGlmeUV2ZW50UHJvY2Vzc29ycyhwcm9jZXNzb3JzLCBmaW5hbCwgaGludCwgaW5kZXggKyAxKS50aGVuKHJlc29sdmUpKVxuICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2b2lkIG5vdGlmeUV2ZW50UHJvY2Vzc29ycyhwcm9jZXNzb3JzLCByZXN1bHQsIGhpbnQsIGluZGV4ICsgMSlcbiAgICAgICAgICAudGhlbihyZXNvbHZlKVxuICAgICAgICAgIC50aGVuKG51bGwsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0cy5ub3RpZnlFdmVudFByb2Nlc3NvcnMgPSBub3RpZnlFdmVudFByb2Nlc3NvcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudFByb2Nlc3NvcnMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWJ1Z0J1aWxkIiwicmVxdWlyZSIsImlzIiwibG9nZ2VyIiwic3luY3Byb21pc2UiLCJub3RpZnlFdmVudFByb2Nlc3NvcnMiLCJwcm9jZXNzb3JzIiwiZXZlbnQiLCJoaW50IiwiaW5kZXgiLCJTeW5jUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9jZXNzb3IiLCJyZXN1bHQiLCJERUJVR19CVUlMRCIsImlkIiwibG9nIiwiaXNUaGVuYWJsZSIsInRoZW4iLCJmaW5hbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/exports.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/exports.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst time = __webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\");\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nfunction captureException(exception, hint) {\n  return currentScopes.getCurrentScope().captureException(exception, prepareEvent.parseEventHintOrCaptureContext(hint));\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */\nfunction captureMessage(message, captureContext) {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? {\n    captureContext\n  } : undefined;\n  return currentScopes.getCurrentScope().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */\nfunction captureEvent(event, hint) {\n  return currentScopes.getCurrentScope().captureEvent(event, hint);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\nfunction setContext(name, context) {\n  currentScopes.getIsolationScope().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nfunction setExtras(extras) {\n  currentScopes.getIsolationScope().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nfunction setExtra(key, extra) {\n  currentScopes.getIsolationScope().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nfunction setTags(tags) {\n  currentScopes.getIsolationScope().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nfunction setTag(key, value) {\n  currentScopes.getIsolationScope().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nfunction setUser(user) {\n  currentScopes.getIsolationScope().setUser(user);\n}\n\n/**\n * The last error event id of the isolation scope.\n *\n * Warning: This function really returns the last recorded error event id on the current\n * isolation scope. If you call this function after handling a certain error and another error\n * is captured in between, the last one is returned instead of the one you might expect.\n * Also, ids of events that were never sent to Sentry (for example because\n * they were dropped in `beforeSend`) could be returned.\n *\n * @returns The last event id of the isolation scope.\n */\nfunction lastEventId() {\n  return currentScopes.getIsolationScope().lastEventId();\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nfunction captureCheckIn(checkIn, upsertMonitorConfig) {\n  const scope = currentScopes.getCurrentScope();\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n  }\n  return misc.uuid4();\n}\n\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nfunction withMonitor(monitorSlug, callback, upsertMonitorConfig) {\n  const checkInId = captureCheckIn({\n    monitorSlug,\n    status: 'in_progress'\n  }, upsertMonitorConfig);\n  const now = time.timestampInSeconds();\n  function finishCheckIn(status) {\n    captureCheckIn({\n      monitorSlug,\n      status,\n      checkInId,\n      duration: time.timestampInSeconds() - now\n    });\n  }\n  return currentScopes.withIsolationScope(() => {\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = callback();\n    } catch (e) {\n      finishCheckIn('error');\n      throw e;\n    }\n    if (is.isThenable(maybePromiseResult)) {\n      Promise.resolve(maybePromiseResult).then(() => {\n        finishCheckIn('ok');\n      }, e => {\n        finishCheckIn('error');\n        throw e;\n      });\n    } else {\n      finishCheckIn('ok');\n    }\n    return maybePromiseResult;\n  });\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nasync function flush(timeout) {\n  const client = currentScopes.getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot flush events. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nasync function close(timeout) {\n  const client = currentScopes.getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Returns true if Sentry has been properly initialized.\n */\nfunction isInitialized() {\n  return !!currentScopes.getClient();\n}\n\n/** If the SDK is initialized & enabled. */\nfunction isEnabled() {\n  const client = currentScopes.getClient();\n  return !!client && client.getOptions().enabled !== false && !!client.getTransport();\n}\n\n/**\n * Add an event processor.\n * This will be added to the current isolation scope, ensuring any event that is processed in the current execution\n * context will have the processor applied.\n */\nfunction addEventProcessor(callback) {\n  currentScopes.getIsolationScope().addEventProcessor(callback);\n}\n\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */\nfunction startSession(context) {\n  const client = currentScopes.getClient();\n  const isolationScope = currentScopes.getIsolationScope();\n  const currentScope = currentScopes.getCurrentScope();\n  const {\n    release,\n    environment = constants.DEFAULT_ENVIRONMENT\n  } = client && client.getOptions() || {};\n\n  // Will fetch userAgent if called from browser sdk\n  const {\n    userAgent\n  } = worldwide.GLOBAL_OBJ.navigator || {};\n  const session$1 = session.makeSession({\n    release,\n    environment,\n    user: currentScope.getUser() || isolationScope.getUser(),\n    ...(userAgent && {\n      userAgent\n    }),\n    ...context\n  });\n\n  // End existing session if there's one\n  const currentSession = isolationScope.getSession();\n  if (currentSession && currentSession.status === 'ok') {\n    session.updateSession(currentSession, {\n      status: 'exited'\n    });\n  }\n  endSession();\n\n  // Afterwards we set the new session on the scope\n  isolationScope.setSession(session$1);\n\n  // TODO (v8): Remove this and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  currentScope.setSession(session$1);\n  return session$1;\n}\n\n/**\n * End the session on the current isolation scope.\n */\nfunction endSession() {\n  const isolationScope = currentScopes.getIsolationScope();\n  const currentScope = currentScopes.getCurrentScope();\n  const session$1 = currentScope.getSession() || isolationScope.getSession();\n  if (session$1) {\n    session.closeSession(session$1);\n  }\n  _sendSessionUpdate();\n\n  // the session is over; take it off of the scope\n  isolationScope.setSession();\n\n  // TODO (v8): Remove this and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  currentScope.setSession();\n}\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate() {\n  const isolationScope = currentScopes.getIsolationScope();\n  const currentScope = currentScopes.getCurrentScope();\n  const client = currentScopes.getClient();\n  // TODO (v8): Remove currentScope and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session && client) {\n    client.captureSession(session);\n  }\n}\n\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */\nfunction captureSession(end = false) {\n  // both send the update and pull the session from the scope\n  if (end) {\n    endSession();\n    return;\n  }\n\n  // only send the update\n  _sendSessionUpdate();\n}\nexports.addEventProcessor = addEventProcessor;\nexports.captureCheckIn = captureCheckIn;\nexports.captureEvent = captureEvent;\nexports.captureException = captureException;\nexports.captureMessage = captureMessage;\nexports.captureSession = captureSession;\nexports.close = close;\nexports.endSession = endSession;\nexports.flush = flush;\nexports.isEnabled = isEnabled;\nexports.isInitialized = isInitialized;\nexports.lastEventId = lastEventId;\nexports.setContext = setContext;\nexports.setExtra = setExtra;\nexports.setExtras = setExtras;\nexports.setTag = setTag;\nexports.setTags = setTags;\nexports.setUser = setUser;\nexports.startSession = startSession;\nexports.withMonitor = withMonitor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/feedback.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/feedback.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * Send user feedback to Sentry.\n */\nfunction captureFeedback(params, hint = {}, scope = currentScopes.getCurrentScope()) {\n  const {\n    message,\n    name,\n    email,\n    url,\n    source,\n    associatedEventId,\n    tags\n  } = params;\n  const feedbackEvent = {\n    contexts: {\n      feedback: object.dropUndefinedKeys({\n        contact_email: email,\n        name,\n        message,\n        url,\n        source,\n        associated_event_id: associatedEventId\n      })\n    },\n    type: 'feedback',\n    level: 'info',\n    tags\n  };\n  const client = scope && scope.getClient() || currentScopes.getClient();\n  if (client) {\n    client.emit('beforeSendFeedback', feedbackEvent, hint);\n  }\n  const eventId = scope.captureEvent(feedbackEvent, hint);\n  return eventId;\n}\nexports.captureFeedback = captureFeedback;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZmVlZGJhY2suanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsK0ZBQW9CLENBQUM7QUFDbkQsTUFBTUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLHlHQUF5QixDQUFDOztBQUVqRDtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxlQUFlQSxDQUN0QkMsTUFBTSxFQUNOQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQ1RDLEtBQUssR0FBR04sYUFBYSxDQUFDTyxlQUFlLENBQUMsQ0FBQyxFQUN2QztFQUNBLE1BQU07SUFBRUMsT0FBTztJQUFFQyxJQUFJO0lBQUVDLEtBQUs7SUFBRUMsR0FBRztJQUFFQyxNQUFNO0lBQUVDLGlCQUFpQjtJQUFFQztFQUFLLENBQUMsR0FBR1YsTUFBTTtFQUU3RSxNQUFNVyxhQUFhLEdBQUc7SUFDcEJDLFFBQVEsRUFBRTtNQUNSQyxRQUFRLEVBQUVmLE1BQU0sQ0FBQ2dCLGlCQUFpQixDQUFDO1FBQ2pDQyxhQUFhLEVBQUVULEtBQUs7UUFDcEJELElBQUk7UUFDSkQsT0FBTztRQUNQRyxHQUFHO1FBQ0hDLE1BQU07UUFDTlEsbUJBQW1CLEVBQUVQO01BQ3ZCLENBQUM7SUFDSCxDQUFDO0lBQ0RRLElBQUksRUFBRSxVQUFVO0lBQ2hCQyxLQUFLLEVBQUUsTUFBTTtJQUNiUjtFQUNGLENBQUM7RUFFRCxNQUFNUyxNQUFNLEdBQUlqQixLQUFLLElBQUlBLEtBQUssQ0FBQ2tCLFNBQVMsQ0FBQyxDQUFDLElBQUt4QixhQUFhLENBQUN3QixTQUFTLENBQUMsQ0FBQztFQUV4RSxJQUFJRCxNQUFNLEVBQUU7SUFDVkEsTUFBTSxDQUFDRSxJQUFJLENBQUMsb0JBQW9CLEVBQUVWLGFBQWEsRUFBRVYsSUFBSSxDQUFDO0VBQ3hEO0VBRUEsTUFBTXFCLE9BQU8sR0FBR3BCLEtBQUssQ0FBQ3FCLFlBQVksQ0FBQ1osYUFBYSxFQUFFVixJQUFJLENBQUM7RUFFdkQsT0FBT3FCLE9BQU87QUFDaEI7QUFFQTVCLHVCQUF1QixHQUFHSyxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZmVlZGJhY2suanM/MjVmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBvYmplY3QgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L29iamVjdC5qcycpO1xuXG4vKipcbiAqIFNlbmQgdXNlciBmZWVkYmFjayB0byBTZW50cnkuXG4gKi9cbmZ1bmN0aW9uIGNhcHR1cmVGZWVkYmFjayhcbiAgcGFyYW1zLFxuICBoaW50ID0ge30sXG4gIHNjb3BlID0gY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGUoKSxcbikge1xuICBjb25zdCB7IG1lc3NhZ2UsIG5hbWUsIGVtYWlsLCB1cmwsIHNvdXJjZSwgYXNzb2NpYXRlZEV2ZW50SWQsIHRhZ3MgfSA9IHBhcmFtcztcblxuICBjb25zdCBmZWVkYmFja0V2ZW50ID0ge1xuICAgIGNvbnRleHRzOiB7XG4gICAgICBmZWVkYmFjazogb2JqZWN0LmRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICAgICAgY29udGFjdF9lbWFpbDogZW1haWwsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIHVybCxcbiAgICAgICAgc291cmNlLFxuICAgICAgICBhc3NvY2lhdGVkX2V2ZW50X2lkOiBhc3NvY2lhdGVkRXZlbnRJZCxcbiAgICAgIH0pLFxuICAgIH0sXG4gICAgdHlwZTogJ2ZlZWRiYWNrJyxcbiAgICBsZXZlbDogJ2luZm8nLFxuICAgIHRhZ3MsXG4gIH07XG5cbiAgY29uc3QgY2xpZW50ID0gKHNjb3BlICYmIHNjb3BlLmdldENsaWVudCgpKSB8fCBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuXG4gIGlmIChjbGllbnQpIHtcbiAgICBjbGllbnQuZW1pdCgnYmVmb3JlU2VuZEZlZWRiYWNrJywgZmVlZGJhY2tFdmVudCwgaGludCk7XG4gIH1cblxuICBjb25zdCBldmVudElkID0gc2NvcGUuY2FwdHVyZUV2ZW50KGZlZWRiYWNrRXZlbnQsIGhpbnQpO1xuXG4gIHJldHVybiBldmVudElkO1xufVxuXG5leHBvcnRzLmNhcHR1cmVGZWVkYmFjayA9IGNhcHR1cmVGZWVkYmFjaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZlZWRiYWNrLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3VycmVudFNjb3BlcyIsInJlcXVpcmUiLCJvYmplY3QiLCJjYXB0dXJlRmVlZGJhY2siLCJwYXJhbXMiLCJoaW50Iiwic2NvcGUiLCJnZXRDdXJyZW50U2NvcGUiLCJtZXNzYWdlIiwibmFtZSIsImVtYWlsIiwidXJsIiwic291cmNlIiwiYXNzb2NpYXRlZEV2ZW50SWQiLCJ0YWdzIiwiZmVlZGJhY2tFdmVudCIsImNvbnRleHRzIiwiZmVlZGJhY2siLCJkcm9wVW5kZWZpbmVkS2V5cyIsImNvbnRhY3RfZW1haWwiLCJhc3NvY2lhdGVkX2V2ZW50X2lkIiwidHlwZSIsImxldmVsIiwiY2xpZW50IiwiZ2V0Q2xpZW50IiwiZW1pdCIsImV2ZW50SWQiLCJjYXB0dXJlRXZlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/feedback.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/fetch.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/fetch.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst semanticAttributes = __webpack_require__(/*! ./semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\n__webpack_require__(/*! ./tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\n__webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ./utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\n__webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n__webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\n__webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst url = __webpack_require__(/*! ./utils-hoist/url.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/url.js\");\nconst baggage = __webpack_require__(/*! ./utils-hoist/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\");\n__webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ./utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./tracing/sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst spanstatus = __webpack_require__(/*! ./tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst trace = __webpack_require__(/*! ./tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst traceData = __webpack_require__(/*! ./utils/traceData.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\");\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction instrumentFetchRequest(handlerData, shouldCreateSpan, shouldAttachHeaders, spans, spanOrigin = 'auto.http.browser') {\n  if (!handlerData.fetchData) {\n    return undefined;\n  }\n  const shouldCreateSpanResult = hasTracingEnabled.hasTracingEnabled() && shouldCreateSpan(handlerData.fetchData.url);\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n  const {\n    method,\n    url: url$1\n  } = handlerData.fetchData;\n  const fullUrl = getFullURL(url$1);\n  const host = fullUrl ? url.parseUrl(fullUrl).host : undefined;\n  const hasParent = !!spanUtils.getActiveSpan();\n  const span = shouldCreateSpanResult && hasParent ? trace.startInactiveSpan({\n    name: `${method} ${url$1}`,\n    attributes: {\n      url: url$1,\n      type: 'fetch',\n      'http.method': method,\n      'http.url': fullUrl,\n      'server.address': host,\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client'\n    }\n  }) : new sentryNonRecordingSpan.SentryNonRecordingSpan();\n  handlerData.fetchData.__span = span.spanContext().spanId;\n  spans[span.spanContext().spanId] = span;\n  if (shouldAttachHeaders(handlerData.fetchData.url)) {\n    const request = handlerData.args[0];\n    const options = handlerData.args[1] || {};\n    const headers = _addTracingHeadersToFetchRequest(request, options,\n    // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n    // we do not want to use the span as base for the trace headers,\n    // which means that the headers will be generated from the scope and the sampling decision is deferred\n    hasTracingEnabled.hasTracingEnabled() && hasParent ? span : undefined);\n    if (headers) {\n      // Ensure this is actually set, if no options have been passed previously\n      handlerData.args[1] = options;\n      options.headers = headers;\n    }\n  }\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n */\nfunction _addTracingHeadersToFetchRequest(request, fetchOptionsObj, span) {\n  const traceHeaders = traceData.getTraceData({\n    span\n  });\n  const sentryTrace = traceHeaders['sentry-trace'];\n  const baggage = traceHeaders.baggage;\n\n  // Nothing to do, when we return undefined here, the original headers will be used\n  if (!sentryTrace) {\n    return undefined;\n  }\n  const headers = fetchOptionsObj.headers || (isRequest(request) ? request.headers : undefined);\n  if (!headers) {\n    return {\n      ...traceHeaders\n    };\n  } else if (isHeaders(headers)) {\n    const newHeaders = new Headers(headers);\n    newHeaders.set('sentry-trace', sentryTrace);\n    if (baggage) {\n      const prevBaggageHeader = newHeaders.get('baggage');\n      if (prevBaggageHeader) {\n        const prevHeaderStrippedFromSentryBaggage = stripBaggageHeaderOfSentryBaggageValues(prevBaggageHeader);\n        newHeaders.set('baggage',\n        // If there are non-sentry entries (i.e. if the stripped string is non-empty/truthy) combine the stripped header and sentry baggage header\n        // otherwise just set the sentry baggage header\n        prevHeaderStrippedFromSentryBaggage ? `${prevHeaderStrippedFromSentryBaggage},${baggage}` : baggage);\n      } else {\n        newHeaders.set('baggage', baggage);\n      }\n    }\n    return newHeaders;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers\n    // Remove any existing sentry-trace headers\n    .filter(header => {\n      return !(Array.isArray(header) && header[0] === 'sentry-trace');\n    })\n    // Get rid of previous sentry baggage values in baggage header\n    .map(header => {\n      if (Array.isArray(header) && header[0] === 'baggage' && typeof header[1] === 'string') {\n        const [headerName, headerValue, ...rest] = header;\n        return [headerName, stripBaggageHeaderOfSentryBaggageValues(headerValue), ...rest];\n      } else {\n        return header;\n      }\n    }),\n    // Attach the new sentry-trace header\n    ['sentry-trace', sentryTrace]];\n    if (baggage) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push(['baggage', baggage]);\n    }\n    return newHeaders;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    let newBaggageHeaders = [];\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders = existingBaggageHeader.map(headerItem => typeof headerItem === 'string' ? stripBaggageHeaderOfSentryBaggageValues(headerItem) : headerItem).filter(headerItem => headerItem === '');\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(stripBaggageHeaderOfSentryBaggageValues(existingBaggageHeader));\n    }\n    if (baggage) {\n      newBaggageHeaders.push(baggage);\n    }\n    return {\n      ...headers,\n      'sentry-trace': sentryTrace,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined\n    };\n  }\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n *\n * @deprecated This function will not be exported anymore in v9.\n */\nfunction addTracingHeadersToFetchRequest(request, _client, _scope, fetchOptionsObj, span) {\n  return _addTracingHeadersToFetchRequest(request, fetchOptionsObj, span);\n}\nfunction getFullURL(url) {\n  try {\n    const parsed = new URL(url);\n    return parsed.href;\n  } catch (e) {\n    return undefined;\n  }\n}\nfunction endSpan(span, handlerData) {\n  if (handlerData.response) {\n    spanstatus.setHttpStatus(span, handlerData.response.status);\n    const contentLength = handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus({\n      code: spanstatus.SPAN_STATUS_ERROR,\n      message: 'internal_error'\n    });\n  }\n  span.end();\n}\nfunction stripBaggageHeaderOfSentryBaggageValues(baggageHeader) {\n  return baggageHeader.split(',')\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  .filter(baggageEntry => !baggageEntry.split('=')[0].startsWith(baggage.SENTRY_BAGGAGE_KEY_PREFIX)).join(',');\n}\nfunction isRequest(request) {\n  return typeof Request !== 'undefined' && is.isInstanceOf(request, Request);\n}\nfunction isHeaders(headers) {\n  return typeof Headers !== 'undefined' && is.isInstanceOf(headers, Headers);\n}\nexports.addTracingHeadersToFetchRequest = addTracingHeadersToFetchRequest;\nexports.instrumentFetchRequest = instrumentFetchRequest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/fetch.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/getCurrentHubShim.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/getCurrentHubShim.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst breadcrumbs = __webpack_require__(/*! ./breadcrumbs.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\n\n/**\n * This is for legacy reasons, and returns a proxy object instead of a hub to be used.\n *\n * @deprecated Use the methods directly from the top level Sentry API (e.g. `Sentry.withScope`)\n * For more information see our migration guide for\n * [replacing `getCurrentHub` and `Hub`](https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#deprecate-hub)\n * usage\n */\n// eslint-disable-next-line deprecation/deprecation\nfunction getCurrentHubShim() {\n  return {\n    bindClient(client) {\n      const scope = currentScopes.getCurrentScope();\n      scope.setClient(client);\n    },\n    withScope: currentScopes.withScope,\n    getClient: () => currentScopes.getClient(),\n    getScope: currentScopes.getCurrentScope,\n    getIsolationScope: currentScopes.getIsolationScope,\n    captureException: (exception, hint) => {\n      return currentScopes.getCurrentScope().captureException(exception, hint);\n    },\n    captureMessage: (message, level, hint) => {\n      return currentScopes.getCurrentScope().captureMessage(message, level, hint);\n    },\n    captureEvent: exports$1.captureEvent,\n    addBreadcrumb: breadcrumbs.addBreadcrumb,\n    setUser: exports$1.setUser,\n    setTags: exports$1.setTags,\n    setTag: exports$1.setTag,\n    setExtra: exports$1.setExtra,\n    setExtras: exports$1.setExtras,\n    setContext: exports$1.setContext,\n    getIntegration(integration) {\n      const client = currentScopes.getClient();\n      return client && client.getIntegrationByName(integration.id) || null;\n    },\n    startSession: exports$1.startSession,\n    endSession: exports$1.endSession,\n    captureSession(end) {\n      // both send the update and pull the session from the scope\n      if (end) {\n        return exports$1.endSession();\n      }\n\n      // only send the update\n      _sendSessionUpdate();\n    }\n  };\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n *\n * @deprecated Use the respective replacement method directly instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst getCurrentHub = getCurrentHubShim;\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate() {\n  const scope = currentScopes.getCurrentScope();\n  const client = currentScopes.getClient();\n  const session = scope.getSession();\n  if (client && session) {\n    client.captureSession(session);\n  }\n}\nexports.getCurrentHub = getCurrentHub;\nexports.getCurrentHubShim = getCurrentHubShim;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZ2V0Q3VycmVudEh1YlNoaW0uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxXQUFXLEdBQUdDLG1CQUFPLENBQUMsMkZBQWtCLENBQUM7QUFDL0MsTUFBTUMsYUFBYSxHQUFHRCxtQkFBTyxDQUFDLCtGQUFvQixDQUFDO0FBQ25ELE1BQU1FLFNBQVMsR0FBR0YsbUJBQU8sQ0FBQyxtRkFBYyxDQUFDOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxpQkFBaUJBLENBQUEsRUFBRztFQUMzQixPQUFPO0lBQ0xDLFVBQVVBLENBQUNDLE1BQU0sRUFBRTtNQUNqQixNQUFNQyxLQUFLLEdBQUdMLGFBQWEsQ0FBQ00sZUFBZSxDQUFDLENBQUM7TUFDN0NELEtBQUssQ0FBQ0UsU0FBUyxDQUFDSCxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVESSxTQUFTLEVBQUVSLGFBQWEsQ0FBQ1EsU0FBUztJQUNsQ0MsU0FBUyxFQUFFQSxDQUFBLEtBQU1ULGFBQWEsQ0FBQ1MsU0FBUyxDQUFDLENBQUM7SUFDMUNDLFFBQVEsRUFBRVYsYUFBYSxDQUFDTSxlQUFlO0lBQ3ZDSyxpQkFBaUIsRUFBRVgsYUFBYSxDQUFDVyxpQkFBaUI7SUFDbERDLGdCQUFnQixFQUFFQSxDQUFDQyxTQUFTLEVBQUVDLElBQUksS0FBSztNQUNyQyxPQUFPZCxhQUFhLENBQUNNLGVBQWUsQ0FBQyxDQUFDLENBQUNNLGdCQUFnQixDQUFDQyxTQUFTLEVBQUVDLElBQUksQ0FBQztJQUMxRSxDQUFDO0lBQ0RDLGNBQWMsRUFBRUEsQ0FBQ0MsT0FBTyxFQUFFQyxLQUFLLEVBQUVILElBQUksS0FBSztNQUN4QyxPQUFPZCxhQUFhLENBQUNNLGVBQWUsQ0FBQyxDQUFDLENBQUNTLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFQyxLQUFLLEVBQUVILElBQUksQ0FBQztJQUM3RSxDQUFDO0lBQ0RJLFlBQVksRUFBRWpCLFNBQVMsQ0FBQ2lCLFlBQVk7SUFDcENDLGFBQWEsRUFBRXJCLFdBQVcsQ0FBQ3FCLGFBQWE7SUFDeENDLE9BQU8sRUFBRW5CLFNBQVMsQ0FBQ21CLE9BQU87SUFDMUJDLE9BQU8sRUFBRXBCLFNBQVMsQ0FBQ29CLE9BQU87SUFDMUJDLE1BQU0sRUFBRXJCLFNBQVMsQ0FBQ3FCLE1BQU07SUFDeEJDLFFBQVEsRUFBRXRCLFNBQVMsQ0FBQ3NCLFFBQVE7SUFDNUJDLFNBQVMsRUFBRXZCLFNBQVMsQ0FBQ3VCLFNBQVM7SUFDOUJDLFVBQVUsRUFBRXhCLFNBQVMsQ0FBQ3dCLFVBQVU7SUFFaENDLGNBQWNBLENBQUNDLFdBQVcsRUFBRTtNQUMxQixNQUFNdkIsTUFBTSxHQUFHSixhQUFhLENBQUNTLFNBQVMsQ0FBQyxDQUFDO01BQ3hDLE9BQVFMLE1BQU0sSUFBSUEsTUFBTSxDQUFDd0Isb0JBQW9CLENBQUNELFdBQVcsQ0FBQ0UsRUFBRSxDQUFDLElBQUssSUFBSTtJQUN4RSxDQUFDO0lBRURDLFlBQVksRUFBRTdCLFNBQVMsQ0FBQzZCLFlBQVk7SUFDcENDLFVBQVUsRUFBRTlCLFNBQVMsQ0FBQzhCLFVBQVU7SUFDaENDLGNBQWNBLENBQUNDLEdBQUcsRUFBRTtNQUNsQjtNQUNBLElBQUlBLEdBQUcsRUFBRTtRQUNQLE9BQU9oQyxTQUFTLENBQUM4QixVQUFVLENBQUMsQ0FBQztNQUMvQjs7TUFFQTtNQUNBRyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3RCO0VBQ0YsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsYUFBYSxHQUFHakMsaUJBQWlCOztBQUV2QztBQUNBO0FBQ0E7QUFDQSxTQUFTZ0Msa0JBQWtCQSxDQUFBLEVBQUc7RUFDNUIsTUFBTTdCLEtBQUssR0FBR0wsYUFBYSxDQUFDTSxlQUFlLENBQUMsQ0FBQztFQUM3QyxNQUFNRixNQUFNLEdBQUdKLGFBQWEsQ0FBQ1MsU0FBUyxDQUFDLENBQUM7RUFFeEMsTUFBTTJCLE9BQU8sR0FBRy9CLEtBQUssQ0FBQ2dDLFVBQVUsQ0FBQyxDQUFDO0VBQ2xDLElBQUlqQyxNQUFNLElBQUlnQyxPQUFPLEVBQUU7SUFDckJoQyxNQUFNLENBQUM0QixjQUFjLENBQUNJLE9BQU8sQ0FBQztFQUNoQztBQUNGO0FBRUF4QyxxQkFBcUIsR0FBR3VDLGFBQWE7QUFDckN2Qyx5QkFBeUIsR0FBR00saUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZ2V0Q3VycmVudEh1YlNoaW0uanM/ZWUxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBicmVhZGNydW1icyA9IHJlcXVpcmUoJy4vYnJlYWRjcnVtYnMuanMnKTtcbmNvbnN0IGN1cnJlbnRTY29wZXMgPSByZXF1aXJlKCcuL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGV4cG9ydHMkMSA9IHJlcXVpcmUoJy4vZXhwb3J0cy5qcycpO1xuXG4vKipcbiAqIFRoaXMgaXMgZm9yIGxlZ2FjeSByZWFzb25zLCBhbmQgcmV0dXJucyBhIHByb3h5IG9iamVjdCBpbnN0ZWFkIG9mIGEgaHViIHRvIGJlIHVzZWQuXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBtZXRob2RzIGRpcmVjdGx5IGZyb20gdGhlIHRvcCBsZXZlbCBTZW50cnkgQVBJIChlLmcuIGBTZW50cnkud2l0aFNjb3BlYClcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSBvdXIgbWlncmF0aW9uIGd1aWRlIGZvclxuICogW3JlcGxhY2luZyBgZ2V0Q3VycmVudEh1YmAgYW5kIGBIdWJgXShodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2Jsb2IvZGV2ZWxvcC9NSUdSQVRJT04ubWQjZGVwcmVjYXRlLWh1YilcbiAqIHVzYWdlXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuZnVuY3Rpb24gZ2V0Q3VycmVudEh1YlNoaW0oKSB7XG4gIHJldHVybiB7XG4gICAgYmluZENsaWVudChjbGllbnQpIHtcbiAgICAgIGNvbnN0IHNjb3BlID0gY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGUoKTtcbiAgICAgIHNjb3BlLnNldENsaWVudChjbGllbnQpO1xuICAgIH0sXG5cbiAgICB3aXRoU2NvcGU6IGN1cnJlbnRTY29wZXMud2l0aFNjb3BlLFxuICAgIGdldENsaWVudDogKCkgPT4gY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKSAsXG4gICAgZ2V0U2NvcGU6IGN1cnJlbnRTY29wZXMuZ2V0Q3VycmVudFNjb3BlLFxuICAgIGdldElzb2xhdGlvblNjb3BlOiBjdXJyZW50U2NvcGVzLmdldElzb2xhdGlvblNjb3BlLFxuICAgIGNhcHR1cmVFeGNlcHRpb246IChleGNlcHRpb24sIGhpbnQpID0+IHtcbiAgICAgIHJldHVybiBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSgpLmNhcHR1cmVFeGNlcHRpb24oZXhjZXB0aW9uLCBoaW50KTtcbiAgICB9LFxuICAgIGNhcHR1cmVNZXNzYWdlOiAobWVzc2FnZSwgbGV2ZWwsIGhpbnQpID0+IHtcbiAgICAgIHJldHVybiBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSgpLmNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UsIGxldmVsLCBoaW50KTtcbiAgICB9LFxuICAgIGNhcHR1cmVFdmVudDogZXhwb3J0cyQxLmNhcHR1cmVFdmVudCxcbiAgICBhZGRCcmVhZGNydW1iOiBicmVhZGNydW1icy5hZGRCcmVhZGNydW1iLFxuICAgIHNldFVzZXI6IGV4cG9ydHMkMS5zZXRVc2VyLFxuICAgIHNldFRhZ3M6IGV4cG9ydHMkMS5zZXRUYWdzLFxuICAgIHNldFRhZzogZXhwb3J0cyQxLnNldFRhZyxcbiAgICBzZXRFeHRyYTogZXhwb3J0cyQxLnNldEV4dHJhLFxuICAgIHNldEV4dHJhczogZXhwb3J0cyQxLnNldEV4dHJhcyxcbiAgICBzZXRDb250ZXh0OiBleHBvcnRzJDEuc2V0Q29udGV4dCxcblxuICAgIGdldEludGVncmF0aW9uKGludGVncmF0aW9uKSB7XG4gICAgICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuICAgICAgcmV0dXJuIChjbGllbnQgJiYgY2xpZW50LmdldEludGVncmF0aW9uQnlOYW1lKGludGVncmF0aW9uLmlkKSkgfHwgbnVsbDtcbiAgICB9LFxuXG4gICAgc3RhcnRTZXNzaW9uOiBleHBvcnRzJDEuc3RhcnRTZXNzaW9uLFxuICAgIGVuZFNlc3Npb246IGV4cG9ydHMkMS5lbmRTZXNzaW9uLFxuICAgIGNhcHR1cmVTZXNzaW9uKGVuZCkge1xuICAgICAgLy8gYm90aCBzZW5kIHRoZSB1cGRhdGUgYW5kIHB1bGwgdGhlIHNlc3Npb24gZnJvbSB0aGUgc2NvcGVcbiAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMkMS5lbmRTZXNzaW9uKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIG9ubHkgc2VuZCB0aGUgdXBkYXRlXG4gICAgICBfc2VuZFNlc3Npb25VcGRhdGUoKTtcbiAgICB9LFxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGRlZmF1bHQgaHViIGluc3RhbmNlLlxuICpcbiAqIElmIGEgaHViIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCBpbiB0aGUgZ2xvYmFsIGNhcnJpZXIgYnV0IHRoaXMgbW9kdWxlXG4gKiBjb250YWlucyBhIG1vcmUgcmVjZW50IHZlcnNpb24sIGl0IHJlcGxhY2VzIHRoZSByZWdpc3RlcmVkIHZlcnNpb24uXG4gKiBPdGhlcndpc2UsIHRoZSBjdXJyZW50bHkgcmVnaXN0ZXJlZCBodWIgd2lsbCBiZSByZXR1cm5lZC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIHJlc3BlY3RpdmUgcmVwbGFjZW1lbnQgbWV0aG9kIGRpcmVjdGx5IGluc3RlYWQuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuY29uc3QgZ2V0Q3VycmVudEh1YiA9IGdldEN1cnJlbnRIdWJTaGltO1xuXG4vKipcbiAqIFNlbmRzIHRoZSBjdXJyZW50IFNlc3Npb24gb24gdGhlIHNjb3BlXG4gKi9cbmZ1bmN0aW9uIF9zZW5kU2Vzc2lvblVwZGF0ZSgpIHtcbiAgY29uc3Qgc2NvcGUgPSBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSgpO1xuICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuXG4gIGNvbnN0IHNlc3Npb24gPSBzY29wZS5nZXRTZXNzaW9uKCk7XG4gIGlmIChjbGllbnQgJiYgc2Vzc2lvbikge1xuICAgIGNsaWVudC5jYXB0dXJlU2Vzc2lvbihzZXNzaW9uKTtcbiAgfVxufVxuXG5leHBvcnRzLmdldEN1cnJlbnRIdWIgPSBnZXRDdXJyZW50SHViO1xuZXhwb3J0cy5nZXRDdXJyZW50SHViU2hpbSA9IGdldEN1cnJlbnRIdWJTaGltO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0Q3VycmVudEh1YlNoaW0uanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJicmVhZGNydW1icyIsInJlcXVpcmUiLCJjdXJyZW50U2NvcGVzIiwiZXhwb3J0cyQxIiwiZ2V0Q3VycmVudEh1YlNoaW0iLCJiaW5kQ2xpZW50IiwiY2xpZW50Iiwic2NvcGUiLCJnZXRDdXJyZW50U2NvcGUiLCJzZXRDbGllbnQiLCJ3aXRoU2NvcGUiLCJnZXRDbGllbnQiLCJnZXRTY29wZSIsImdldElzb2xhdGlvblNjb3BlIiwiY2FwdHVyZUV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhpbnQiLCJjYXB0dXJlTWVzc2FnZSIsIm1lc3NhZ2UiLCJsZXZlbCIsImNhcHR1cmVFdmVudCIsImFkZEJyZWFkY3J1bWIiLCJzZXRVc2VyIiwic2V0VGFncyIsInNldFRhZyIsInNldEV4dHJhIiwic2V0RXh0cmFzIiwic2V0Q29udGV4dCIsImdldEludGVncmF0aW9uIiwiaW50ZWdyYXRpb24iLCJnZXRJbnRlZ3JhdGlvbkJ5TmFtZSIsImlkIiwic3RhcnRTZXNzaW9uIiwiZW5kU2Vzc2lvbiIsImNhcHR1cmVTZXNzaW9uIiwiZW5kIiwiX3NlbmRTZXNzaW9uVXBkYXRlIiwiZ2V0Q3VycmVudEh1YiIsInNlc3Npb24iLCJnZXRTZXNzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/getCurrentHubShim.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors = __webpack_require__(/*! ./tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\nconst utils = __webpack_require__(/*! ./tracing/utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\nconst hubextensions = __webpack_require__(/*! ./tracing/hubextensions.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/hubextensions.js\");\nconst idleSpan = __webpack_require__(/*! ./tracing/idleSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js\");\nconst sentrySpan = __webpack_require__(/*! ./tracing/sentrySpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./tracing/sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst spanstatus = __webpack_require__(/*! ./tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst trace = __webpack_require__(/*! ./tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst measurement = __webpack_require__(/*! ./tracing/measurement.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js\");\nconst sampling = __webpack_require__(/*! ./tracing/sampling.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js\");\nconst logSpans = __webpack_require__(/*! ./tracing/logSpans.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\");\nconst semanticAttributes = __webpack_require__(/*! ./semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst defaultScopes = __webpack_require__(/*! ./defaultScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js\");\nconst index = __webpack_require__(/*! ./asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ./carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst sessionflusher = __webpack_require__(/*! ./sessionflusher.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/sessionflusher.js\");\nconst scope = __webpack_require__(/*! ./scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst eventProcessors = __webpack_require__(/*! ./eventProcessors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/api.js\");\nconst baseclient = __webpack_require__(/*! ./baseclient.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/baseclient.js\");\nconst serverRuntimeClient = __webpack_require__(/*! ./server-runtime-client.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/server-runtime-client.js\");\nconst sdk = __webpack_require__(/*! ./sdk.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/sdk.js\");\nconst base = __webpack_require__(/*! ./transports/base.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/transports/base.js\");\nconst offline = __webpack_require__(/*! ./transports/offline.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/transports/offline.js\");\nconst multiplexed = __webpack_require__(/*! ./transports/multiplexed.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/transports/multiplexed.js\");\nconst integration = __webpack_require__(/*! ./integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst applyScopeDataToEvent = __webpack_require__(/*! ./utils/applyScopeDataToEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js\");\nconst prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\");\nconst checkin = __webpack_require__(/*! ./checkin.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ./utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst isSentryRequestUrl = __webpack_require__(/*! ./utils/isSentryRequestUrl.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js\");\nconst handleCallbackErrors = __webpack_require__(/*! ./utils/handleCallbackErrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\");\nconst parameterize = __webpack_require__(/*! ./utils/parameterize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parameterize.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst parseSampleRate = __webpack_require__(/*! ./utils/parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\nconst sdkMetadata = __webpack_require__(/*! ./utils/sdkMetadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js\");\nconst traceData = __webpack_require__(/*! ./utils/traceData.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\");\nconst meta = __webpack_require__(/*! ./utils/meta.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/meta.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst breadcrumbs = __webpack_require__(/*! ./breadcrumbs.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js\");\nconst functiontostring = __webpack_require__(/*! ./integrations/functiontostring.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js\");\nconst inboundfilters = __webpack_require__(/*! ./integrations/inboundfilters.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js\");\nconst linkederrors = __webpack_require__(/*! ./integrations/linkederrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js\");\nconst metadata = __webpack_require__(/*! ./integrations/metadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/metadata.js\");\nconst requestdata = __webpack_require__(/*! ./integrations/requestdata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/requestdata.js\");\nconst captureconsole = __webpack_require__(/*! ./integrations/captureconsole.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js\");\nconst debug = __webpack_require__(/*! ./integrations/debug.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/debug.js\");\nconst dedupe = __webpack_require__(/*! ./integrations/dedupe.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/dedupe.js\");\nconst extraerrordata = __webpack_require__(/*! ./integrations/extraerrordata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js\");\nconst rewriteframes = __webpack_require__(/*! ./integrations/rewriteframes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js\");\nconst sessiontiming = __webpack_require__(/*! ./integrations/sessiontiming.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js\");\nconst zoderrors = __webpack_require__(/*! ./integrations/zoderrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js\");\nconst thirdPartyErrorsFilter = __webpack_require__(/*! ./integrations/third-party-errors-filter.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js\");\nconst exports$2 = __webpack_require__(/*! ./metrics/exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports.js\");\nconst profiling = __webpack_require__(/*! ./profiling.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/profiling.js\");\nconst exportsDefault = __webpack_require__(/*! ./metrics/exports-default.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports-default.js\");\nconst browserAggregator = __webpack_require__(/*! ./metrics/browser-aggregator.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js\");\nconst metricSummary = __webpack_require__(/*! ./metrics/metric-summary.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js\");\nconst fetch = __webpack_require__(/*! ./fetch.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/fetch.js\");\nconst trpc = __webpack_require__(/*! ./trpc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/trpc.js\");\nconst feedback = __webpack_require__(/*! ./feedback.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/feedback.js\");\nconst getCurrentHubShim = __webpack_require__(/*! ./getCurrentHubShim.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/getCurrentHubShim.js\");\nconst aggregateErrors = __webpack_require__(/*! ./utils-hoist/aggregate-errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js\");\nconst array = __webpack_require__(/*! ./utils-hoist/array.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/array.js\");\nconst breadcrumbLogLevel = __webpack_require__(/*! ./utils-hoist/breadcrumb-log-level.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/breadcrumb-log-level.js\");\nconst browser = __webpack_require__(/*! ./utils-hoist/browser.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/browser.js\");\nconst dsn = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst error = __webpack_require__(/*! ./utils-hoist/error.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js\");\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst console = __webpack_require__(/*! ./utils-hoist/instrument/console.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js\");\nconst fetch$1 = __webpack_require__(/*! ./utils-hoist/instrument/fetch.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/fetch.js\");\nconst globalError = __webpack_require__(/*! ./utils-hoist/instrument/globalError.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js\");\nconst globalUnhandledRejection = __webpack_require__(/*! ./utils-hoist/instrument/globalUnhandledRejection.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js\");\nconst handlers = __webpack_require__(/*! ./utils-hoist/instrument/handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst isBrowser = __webpack_require__(/*! ./utils-hoist/isBrowser.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/isBrowser.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst memo = __webpack_require__(/*! ./utils-hoist/memo.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/memo.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst node = __webpack_require__(/*! ./utils-hoist/node.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node.js\");\nconst normalize = __webpack_require__(/*! ./utils-hoist/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst path = __webpack_require__(/*! ./utils-hoist/path.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/path.js\");\nconst promisebuffer = __webpack_require__(/*! ./utils-hoist/promisebuffer.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js\");\nconst requestdata$1 = __webpack_require__(/*! ./utils-hoist/requestdata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js\");\nconst severity = __webpack_require__(/*! ./utils-hoist/severity.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/severity.js\");\nconst stacktrace = __webpack_require__(/*! ./utils-hoist/stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\nconst nodeStackTrace = __webpack_require__(/*! ./utils-hoist/node-stack-trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js\");\nconst string = __webpack_require__(/*! ./utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst supports = __webpack_require__(/*! ./utils-hoist/supports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/supports.js\");\nconst syncpromise = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst time = __webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst tracing = __webpack_require__(/*! ./utils-hoist/tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js\");\nconst env = __webpack_require__(/*! ./utils-hoist/env.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/env.js\");\nconst envelope$1 = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst clientreport = __webpack_require__(/*! ./utils-hoist/clientreport.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js\");\nconst ratelimit = __webpack_require__(/*! ./utils-hoist/ratelimit.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js\");\nconst baggage = __webpack_require__(/*! ./utils-hoist/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\");\nconst url = __webpack_require__(/*! ./utils-hoist/url.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/url.js\");\nconst cache = __webpack_require__(/*! ./utils-hoist/cache.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cache.js\");\nconst eventbuilder = __webpack_require__(/*! ./utils-hoist/eventbuilder.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js\");\nconst anr = __webpack_require__(/*! ./utils-hoist/anr.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/anr.js\");\nconst lru = __webpack_require__(/*! ./utils-hoist/lru.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/lru.js\");\nconst propagationContext = __webpack_require__(/*! ./utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst vercelWaitUntil = __webpack_require__(/*! ./utils-hoist/vercelWaitUntil.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vercelWaitUntil.js\");\nconst version = __webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\nconst debugIds = __webpack_require__(/*! ./utils-hoist/debug-ids.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js\");\nconst escapeStringForRegex = __webpack_require__(/*! ./utils-hoist/vendor/escapeStringForRegex.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/escapeStringForRegex.js\");\nconst supportsHistory = __webpack_require__(/*! ./utils-hoist/vendor/supportsHistory.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/supportsHistory.js\");\nconst _asyncNullishCoalesce = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_asyncNullishCoalesce.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncNullishCoalesce.js\");\nconst _asyncOptionalChain = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_asyncOptionalChain.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js\");\nconst _asyncOptionalChainDelete = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js\");\nconst _nullishCoalesce = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_nullishCoalesce.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js\");\nconst _optionalChain = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_optionalChain.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js\");\nconst _optionalChainDelete = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_optionalChainDelete.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChainDelete.js\");\nexports.registerSpanErrorInstrumentation = errors.registerSpanErrorInstrumentation;\nexports.getCapturedScopesOnSpan = utils.getCapturedScopesOnSpan;\nexports.setCapturedScopesOnSpan = utils.setCapturedScopesOnSpan;\nexports.addTracingExtensions = hubextensions.addTracingExtensions;\nexports.TRACING_DEFAULTS = idleSpan.TRACING_DEFAULTS;\nexports.startIdleSpan = idleSpan.startIdleSpan;\nexports.SentrySpan = sentrySpan.SentrySpan;\nexports.SentryNonRecordingSpan = sentryNonRecordingSpan.SentryNonRecordingSpan;\nexports.SPAN_STATUS_ERROR = spanstatus.SPAN_STATUS_ERROR;\nexports.SPAN_STATUS_OK = spanstatus.SPAN_STATUS_OK;\nexports.SPAN_STATUS_UNSET = spanstatus.SPAN_STATUS_UNSET;\nexports.getSpanStatusFromHttpCode = spanstatus.getSpanStatusFromHttpCode;\nexports.setHttpStatus = spanstatus.setHttpStatus;\nexports.continueTrace = trace.continueTrace;\nexports.startInactiveSpan = trace.startInactiveSpan;\nexports.startNewTrace = trace.startNewTrace;\nexports.startSpan = trace.startSpan;\nexports.startSpanManual = trace.startSpanManual;\nexports.suppressTracing = trace.suppressTracing;\nexports.withActiveSpan = trace.withActiveSpan;\nexports.getDynamicSamplingContextFromClient = dynamicSamplingContext.getDynamicSamplingContextFromClient;\nexports.getDynamicSamplingContextFromScope = dynamicSamplingContext.getDynamicSamplingContextFromScope;\nexports.getDynamicSamplingContextFromSpan = dynamicSamplingContext.getDynamicSamplingContextFromSpan;\nexports.spanToBaggageHeader = dynamicSamplingContext.spanToBaggageHeader;\nexports.setMeasurement = measurement.setMeasurement;\nexports.timedEventsToMeasurements = measurement.timedEventsToMeasurements;\nexports.sampleSpan = sampling.sampleSpan;\nexports.logSpanEnd = logSpans.logSpanEnd;\nexports.logSpanStart = logSpans.logSpanStart;\nexports.SEMANTIC_ATTRIBUTE_CACHE_HIT = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_HIT;\nexports.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE;\nexports.SEMANTIC_ATTRIBUTE_CACHE_KEY = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_KEY;\nexports.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME;\nexports.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = semanticAttributes.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD;\nexports.SEMANTIC_ATTRIBUTE_PROFILE_ID = semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.SEMANTIC_ATTRIBUTE_URL_FULL = semanticAttributes.SEMANTIC_ATTRIBUTE_URL_FULL;\nexports.createEventEnvelope = envelope.createEventEnvelope;\nexports.createSessionEnvelope = envelope.createSessionEnvelope;\nexports.createSpanEnvelope = envelope.createSpanEnvelope;\nexports.addEventProcessor = exports$1.addEventProcessor;\nexports.captureCheckIn = exports$1.captureCheckIn;\nexports.captureEvent = exports$1.captureEvent;\nexports.captureException = exports$1.captureException;\nexports.captureMessage = exports$1.captureMessage;\nexports.captureSession = exports$1.captureSession;\nexports.close = exports$1.close;\nexports.endSession = exports$1.endSession;\nexports.flush = exports$1.flush;\nexports.isEnabled = exports$1.isEnabled;\nexports.isInitialized = exports$1.isInitialized;\nexports.lastEventId = exports$1.lastEventId;\nexports.setContext = exports$1.setContext;\nexports.setExtra = exports$1.setExtra;\nexports.setExtras = exports$1.setExtras;\nexports.setTag = exports$1.setTag;\nexports.setTags = exports$1.setTags;\nexports.setUser = exports$1.setUser;\nexports.startSession = exports$1.startSession;\nexports.withMonitor = exports$1.withMonitor;\nexports.getClient = currentScopes.getClient;\nexports.getCurrentScope = currentScopes.getCurrentScope;\nexports.getGlobalScope = currentScopes.getGlobalScope;\nexports.getIsolationScope = currentScopes.getIsolationScope;\nexports.getTraceContextFromScope = currentScopes.getTraceContextFromScope;\nexports.withIsolationScope = currentScopes.withIsolationScope;\nexports.withScope = currentScopes.withScope;\nexports.getDefaultCurrentScope = defaultScopes.getDefaultCurrentScope;\nexports.getDefaultIsolationScope = defaultScopes.getDefaultIsolationScope;\nexports.setAsyncContextStrategy = index.setAsyncContextStrategy;\nexports.getMainCarrier = carrier.getMainCarrier;\nexports.closeSession = session.closeSession;\nexports.makeSession = session.makeSession;\nexports.updateSession = session.updateSession;\nexports.SessionFlusher = sessionflusher.SessionFlusher;\nexports.Scope = scope.Scope;\nexports.notifyEventProcessors = eventProcessors.notifyEventProcessors;\nexports.getEnvelopeEndpointWithUrlEncodedAuth = api.getEnvelopeEndpointWithUrlEncodedAuth;\nexports.getReportDialogEndpoint = api.getReportDialogEndpoint;\nexports.BaseClient = baseclient.BaseClient;\nexports.ServerRuntimeClient = serverRuntimeClient.ServerRuntimeClient;\nexports.initAndBind = sdk.initAndBind;\nexports.setCurrentClient = sdk.setCurrentClient;\nexports.createTransport = base.createTransport;\nexports.makeOfflineTransport = offline.makeOfflineTransport;\nexports.makeMultiplexedTransport = multiplexed.makeMultiplexedTransport;\nexports.addIntegration = integration.addIntegration;\nexports.defineIntegration = integration.defineIntegration;\nexports.getIntegrationsToSetup = integration.getIntegrationsToSetup;\nexports.applyScopeDataToEvent = applyScopeDataToEvent.applyScopeDataToEvent;\nexports.mergeScopeData = applyScopeDataToEvent.mergeScopeData;\nexports.prepareEvent = prepareEvent.prepareEvent;\nexports.createCheckInEnvelope = checkin.createCheckInEnvelope;\nexports.hasTracingEnabled = hasTracingEnabled.hasTracingEnabled;\nexports.isSentryRequestUrl = isSentryRequestUrl.isSentryRequestUrl;\nexports.handleCallbackErrors = handleCallbackErrors.handleCallbackErrors;\nexports.parameterize = parameterize.parameterize;\nexports.addChildSpanToSpan = spanUtils.addChildSpanToSpan;\nexports.getActiveSpan = spanUtils.getActiveSpan;\nexports.getRootSpan = spanUtils.getRootSpan;\nexports.getSpanDescendants = spanUtils.getSpanDescendants;\nexports.getStatusMessage = spanUtils.getStatusMessage;\nexports.spanIsSampled = spanUtils.spanIsSampled;\nexports.spanTimeInputToSeconds = spanUtils.spanTimeInputToSeconds;\nexports.spanToJSON = spanUtils.spanToJSON;\nexports.spanToTraceContext = spanUtils.spanToTraceContext;\nexports.spanToTraceHeader = spanUtils.spanToTraceHeader;\nexports.updateSpanName = spanUtils.updateSpanName;\nexports.parseSampleRate = parseSampleRate.parseSampleRate;\nexports.applySdkMetadata = sdkMetadata.applySdkMetadata;\nexports.getTraceData = traceData.getTraceData;\nexports.getTraceMetaTags = meta.getTraceMetaTags;\nexports.DEFAULT_ENVIRONMENT = constants.DEFAULT_ENVIRONMENT;\nexports.addBreadcrumb = breadcrumbs.addBreadcrumb;\nexports.functionToStringIntegration = functiontostring.functionToStringIntegration;\nexports.inboundFiltersIntegration = inboundfilters.inboundFiltersIntegration;\nexports.linkedErrorsIntegration = linkederrors.linkedErrorsIntegration;\nexports.moduleMetadataIntegration = metadata.moduleMetadataIntegration;\nexports.requestDataIntegration = requestdata.requestDataIntegration;\nexports.captureConsoleIntegration = captureconsole.captureConsoleIntegration;\nexports.debugIntegration = debug.debugIntegration;\nexports.dedupeIntegration = dedupe.dedupeIntegration;\nexports.extraErrorDataIntegration = extraerrordata.extraErrorDataIntegration;\nexports.rewriteFramesIntegration = rewriteframes.rewriteFramesIntegration;\nexports.sessionTimingIntegration = sessiontiming.sessionTimingIntegration;\nexports.zodErrorsIntegration = zoderrors.zodErrorsIntegration;\nexports.thirdPartyErrorFilterIntegration = thirdPartyErrorsFilter.thirdPartyErrorFilterIntegration;\nexports.metrics = exports$2.metrics;\nexports.profiler = profiling.profiler;\nexports.metricsDefault = exportsDefault.metricsDefault;\nexports.BrowserMetricsAggregator = browserAggregator.BrowserMetricsAggregator;\nexports.getMetricSummaryJsonForSpan = metricSummary.getMetricSummaryJsonForSpan;\nexports.addTracingHeadersToFetchRequest = fetch.addTracingHeadersToFetchRequest;\nexports.instrumentFetchRequest = fetch.instrumentFetchRequest;\nexports.trpcMiddleware = trpc.trpcMiddleware;\nexports.captureFeedback = feedback.captureFeedback;\nexports.getCurrentHub = getCurrentHubShim.getCurrentHub;\nexports.getCurrentHubShim = getCurrentHubShim.getCurrentHubShim;\nexports.applyAggregateErrorsToEvent = aggregateErrors.applyAggregateErrorsToEvent;\nexports.flatten = array.flatten;\nexports.getBreadcrumbLogLevelFromHttpStatusCode = breadcrumbLogLevel.getBreadcrumbLogLevelFromHttpStatusCode;\nexports.getComponentName = browser.getComponentName;\nexports.getDomElement = browser.getDomElement;\nexports.getLocationHref = browser.getLocationHref;\nexports.htmlTreeAsString = browser.htmlTreeAsString;\nexports.dsnFromString = dsn.dsnFromString;\nexports.dsnToString = dsn.dsnToString;\nexports.makeDsn = dsn.makeDsn;\nexports.SentryError = error.SentryError;\nexports.GLOBAL_OBJ = worldwide.GLOBAL_OBJ;\nexports.getGlobalSingleton = worldwide.getGlobalSingleton;\nexports.addConsoleInstrumentationHandler = console.addConsoleInstrumentationHandler;\nexports.addFetchEndInstrumentationHandler = fetch$1.addFetchEndInstrumentationHandler;\nexports.addFetchInstrumentationHandler = fetch$1.addFetchInstrumentationHandler;\nexports.addGlobalErrorInstrumentationHandler = globalError.addGlobalErrorInstrumentationHandler;\nexports.addGlobalUnhandledRejectionInstrumentationHandler = globalUnhandledRejection.addGlobalUnhandledRejectionInstrumentationHandler;\nexports.addHandler = handlers.addHandler;\nexports.maybeInstrument = handlers.maybeInstrument;\nexports.resetInstrumentationHandlers = handlers.resetInstrumentationHandlers;\nexports.triggerHandlers = handlers.triggerHandlers;\nexports.isDOMError = is.isDOMError;\nexports.isDOMException = is.isDOMException;\nexports.isElement = is.isElement;\nexports.isError = is.isError;\nexports.isErrorEvent = is.isErrorEvent;\nexports.isEvent = is.isEvent;\nexports.isInstanceOf = is.isInstanceOf;\nexports.isParameterizedString = is.isParameterizedString;\nexports.isPlainObject = is.isPlainObject;\nexports.isPrimitive = is.isPrimitive;\nexports.isRegExp = is.isRegExp;\nexports.isString = is.isString;\nexports.isSyntheticEvent = is.isSyntheticEvent;\nexports.isThenable = is.isThenable;\nexports.isVueViewModel = is.isVueViewModel;\nexports.isBrowser = isBrowser.isBrowser;\nexports.CONSOLE_LEVELS = logger.CONSOLE_LEVELS;\nexports.consoleSandbox = logger.consoleSandbox;\nexports.logger = logger.logger;\nexports.originalConsoleMethods = logger.originalConsoleMethods;\nexports.memoBuilder = memo.memoBuilder;\nexports.addContextToFrame = misc.addContextToFrame;\nexports.addExceptionMechanism = misc.addExceptionMechanism;\nexports.addExceptionTypeValue = misc.addExceptionTypeValue;\nexports.arrayify = misc.arrayify;\nexports.checkOrSetAlreadyCaught = misc.checkOrSetAlreadyCaught;\nexports.getEventDescription = misc.getEventDescription;\nexports.parseSemver = misc.parseSemver;\nexports.uuid4 = misc.uuid4;\nexports.dynamicRequire = node.dynamicRequire;\nexports.isNodeEnv = node.isNodeEnv;\nexports.loadModule = node.loadModule;\nexports.normalize = normalize.normalize;\nexports.normalizeToSize = normalize.normalizeToSize;\nexports.normalizeUrlToBase = normalize.normalizeUrlToBase;\nexports.addNonEnumerableProperty = object.addNonEnumerableProperty;\nexports.convertToPlainObject = object.convertToPlainObject;\nexports.dropUndefinedKeys = object.dropUndefinedKeys;\nexports.extractExceptionKeysForMessage = object.extractExceptionKeysForMessage;\nexports.fill = object.fill;\nexports.getOriginalFunction = object.getOriginalFunction;\nexports.markFunctionWrapped = object.markFunctionWrapped;\nexports.objectify = object.objectify;\nexports.urlEncode = object.urlEncode;\nexports.basename = path.basename;\nexports.dirname = path.dirname;\nexports.isAbsolute = path.isAbsolute;\nexports.join = path.join;\nexports.normalizePath = path.normalizePath;\nexports.relative = path.relative;\nexports.resolve = path.resolve;\nexports.makePromiseBuffer = promisebuffer.makePromiseBuffer;\nexports.DEFAULT_USER_INCLUDES = requestdata$1.DEFAULT_USER_INCLUDES;\nexports.addNormalizedRequestDataToEvent = requestdata$1.addNormalizedRequestDataToEvent;\nexports.addRequestDataToEvent = requestdata$1.addRequestDataToEvent;\nexports.extractPathForTransaction = requestdata$1.extractPathForTransaction;\nexports.extractQueryParamsFromUrl = requestdata$1.extractQueryParamsFromUrl;\nexports.extractRequestData = requestdata$1.extractRequestData;\nexports.headersToDict = requestdata$1.headersToDict;\nexports.httpRequestToRequestData = requestdata$1.httpRequestToRequestData;\nexports.winterCGHeadersToDict = requestdata$1.winterCGHeadersToDict;\nexports.winterCGRequestToRequestData = requestdata$1.winterCGRequestToRequestData;\nexports.severityLevelFromString = severity.severityLevelFromString;\nexports.validSeverityLevels = severity.validSeverityLevels;\nexports.UNKNOWN_FUNCTION = stacktrace.UNKNOWN_FUNCTION;\nexports.createStackParser = stacktrace.createStackParser;\nexports.getFramesFromEvent = stacktrace.getFramesFromEvent;\nexports.getFunctionName = stacktrace.getFunctionName;\nexports.stackParserFromStackParserOptions = stacktrace.stackParserFromStackParserOptions;\nexports.stripSentryFramesAndReverse = stacktrace.stripSentryFramesAndReverse;\nexports.filenameIsInApp = nodeStackTrace.filenameIsInApp;\nexports.node = nodeStackTrace.node;\nexports.nodeStackLineParser = nodeStackTrace.nodeStackLineParser;\nexports.isMatchingPattern = string.isMatchingPattern;\nexports.safeJoin = string.safeJoin;\nexports.snipLine = string.snipLine;\nexports.stringMatchesSomePattern = string.stringMatchesSomePattern;\nexports.truncate = string.truncate;\nexports.isNativeFunction = supports.isNativeFunction;\nexports.supportsDOMError = supports.supportsDOMError;\nexports.supportsDOMException = supports.supportsDOMException;\nexports.supportsErrorEvent = supports.supportsErrorEvent;\nexports.supportsFetch = supports.supportsFetch;\nexports.supportsNativeFetch = supports.supportsNativeFetch;\nexports.supportsReferrerPolicy = supports.supportsReferrerPolicy;\nexports.supportsReportingObserver = supports.supportsReportingObserver;\nexports.SyncPromise = syncpromise.SyncPromise;\nexports.rejectedSyncPromise = syncpromise.rejectedSyncPromise;\nexports.resolvedSyncPromise = syncpromise.resolvedSyncPromise;\nObject.defineProperty(exports, \"_browserPerformanceTimeOriginMode\", ({\n  enumerable: true,\n  get: () => time._browserPerformanceTimeOriginMode\n}));\nexports.browserPerformanceTimeOrigin = time.browserPerformanceTimeOrigin;\nexports.dateTimestampInSeconds = time.dateTimestampInSeconds;\nexports.timestampInSeconds = time.timestampInSeconds;\nexports.TRACEPARENT_REGEXP = tracing.TRACEPARENT_REGEXP;\nexports.extractTraceparentData = tracing.extractTraceparentData;\nexports.generateSentryTraceHeader = tracing.generateSentryTraceHeader;\nexports.propagationContextFromHeaders = tracing.propagationContextFromHeaders;\nexports.getSDKSource = env.getSDKSource;\nexports.isBrowserBundle = env.isBrowserBundle;\nexports.addItemToEnvelope = envelope$1.addItemToEnvelope;\nexports.createAttachmentEnvelopeItem = envelope$1.createAttachmentEnvelopeItem;\nexports.createEnvelope = envelope$1.createEnvelope;\nexports.createEventEnvelopeHeaders = envelope$1.createEventEnvelopeHeaders;\nexports.createSpanEnvelopeItem = envelope$1.createSpanEnvelopeItem;\nexports.envelopeContainsItemType = envelope$1.envelopeContainsItemType;\nexports.envelopeItemTypeToDataCategory = envelope$1.envelopeItemTypeToDataCategory;\nexports.forEachEnvelopeItem = envelope$1.forEachEnvelopeItem;\nexports.getSdkMetadataForEnvelopeHeader = envelope$1.getSdkMetadataForEnvelopeHeader;\nexports.parseEnvelope = envelope$1.parseEnvelope;\nexports.serializeEnvelope = envelope$1.serializeEnvelope;\nexports.createClientReportEnvelope = clientreport.createClientReportEnvelope;\nexports.DEFAULT_RETRY_AFTER = ratelimit.DEFAULT_RETRY_AFTER;\nexports.disabledUntil = ratelimit.disabledUntil;\nexports.isRateLimited = ratelimit.isRateLimited;\nexports.parseRetryAfterHeader = ratelimit.parseRetryAfterHeader;\nexports.updateRateLimits = ratelimit.updateRateLimits;\nexports.BAGGAGE_HEADER_NAME = baggage.BAGGAGE_HEADER_NAME;\nexports.MAX_BAGGAGE_STRING_LENGTH = baggage.MAX_BAGGAGE_STRING_LENGTH;\nexports.SENTRY_BAGGAGE_KEY_PREFIX = baggage.SENTRY_BAGGAGE_KEY_PREFIX;\nexports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = baggage.SENTRY_BAGGAGE_KEY_PREFIX_REGEX;\nexports.baggageHeaderToDynamicSamplingContext = baggage.baggageHeaderToDynamicSamplingContext;\nexports.dynamicSamplingContextToSentryBaggageHeader = baggage.dynamicSamplingContextToSentryBaggageHeader;\nexports.parseBaggageHeader = baggage.parseBaggageHeader;\nexports.getNumberOfUrlSegments = url.getNumberOfUrlSegments;\nexports.getSanitizedUrlString = url.getSanitizedUrlString;\nexports.parseUrl = url.parseUrl;\nexports.stripUrlQueryAndFragment = url.stripUrlQueryAndFragment;\nexports.makeFifoCache = cache.makeFifoCache;\nexports.eventFromMessage = eventbuilder.eventFromMessage;\nexports.eventFromUnknownInput = eventbuilder.eventFromUnknownInput;\nexports.exceptionFromError = eventbuilder.exceptionFromError;\nexports.parseStackFrames = eventbuilder.parseStackFrames;\nexports.callFrameToStackFrame = anr.callFrameToStackFrame;\nexports.watchdogTimer = anr.watchdogTimer;\nexports.LRUMap = lru.LRUMap;\nexports.generatePropagationContext = propagationContext.generatePropagationContext;\nexports.generateSpanId = propagationContext.generateSpanId;\nexports.generateTraceId = propagationContext.generateTraceId;\nexports.vercelWaitUntil = vercelWaitUntil.vercelWaitUntil;\nexports.SDK_VERSION = version.SDK_VERSION;\nexports.getDebugImagesForResources = debugIds.getDebugImagesForResources;\nexports.getFilenameToDebugIdMap = debugIds.getFilenameToDebugIdMap;\nexports.escapeStringForRegex = escapeStringForRegex.escapeStringForRegex;\nexports.supportsHistory = supportsHistory.supportsHistory;\nexports._asyncNullishCoalesce = _asyncNullishCoalesce._asyncNullishCoalesce;\nexports._asyncOptionalChain = _asyncOptionalChain._asyncOptionalChain;\nexports._asyncOptionalChainDelete = _asyncOptionalChainDelete._asyncOptionalChainDelete;\nexports._nullishCoalesce = _nullishCoalesce._nullishCoalesce;\nexports._optionalChain = _optionalChain._optionalChain;\nexports._optionalChainDelete = _optionalChainDelete._optionalChainDelete;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integration.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integration.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst installedIntegrations = [];\n\n/** Map of integrations assigned to a client */\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preserve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations) {\n  const integrationsByName = {};\n  integrations.forEach(currentInstance => {\n    const {\n      name\n    } = currentInstance;\n    const existingInstance = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n    integrationsByName[name] = currentInstance;\n  });\n  return Object.values(integrationsByName);\n}\n\n/** Gets integrations to install */\nfunction getIntegrationsToSetup(options) {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach(integration => {\n    integration.isDefaultInstance = true;\n  });\n  let integrations;\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    const resolvedUserIntegrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [resolvedUserIntegrations];\n  } else {\n    integrations = defaultIntegrations;\n  }\n  const finalIntegrations = filterDuplicates(integrations);\n\n  // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or\n  // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event\n  // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore\n  // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.\n  const debugIndex = finalIntegrations.findIndex(integration => integration.name === 'Debug');\n  if (debugIndex > -1) {\n    const [debugInstance] = finalIntegrations.splice(debugIndex, 1);\n    finalIntegrations.push(debugInstance);\n  }\n  return finalIntegrations;\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nfunction setupIntegrations(client, integrations) {\n  const integrationIndex = {};\n  integrations.forEach(integration => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n  return integrationIndex;\n}\n\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */\nfunction afterSetupIntegrations(client, integrations) {\n  for (const integration of integrations) {\n    // guard against empty provided integrations\n    if (integration && integration.afterAllSetup) {\n      integration.afterAllSetup(client);\n    }\n  }\n}\n\n/** Setup a single integration.  */\nfunction setupIntegration(client, integration, integrationIndex) {\n  if (integrationIndex[integration.name]) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === 'function') {\n    integration.setupOnce();\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n  if (typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration);\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n  if (typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration);\n    const processor = Object.assign((event, hint) => callback(event, hint, client), {\n      id: integration.name\n    });\n    client.addEventProcessor(processor);\n  }\n  debugBuild.DEBUG_BUILD && logger.logger.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current scope's client. */\nfunction addIntegration(integration) {\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n  client.addIntegration(integration);\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nfunction defineIntegration(fn) {\n  return fn;\n}\nexports.addIntegration = addIntegration;\nexports.afterSetupIntegrations = afterSetupIntegrations;\nexports.defineIntegration = defineIntegration;\nexports.getIntegrationsToSetup = getIntegrationsToSetup;\nexports.installedIntegrations = installedIntegrations;\nexports.setupIntegration = setupIntegration;\nexports.setupIntegrations = setupIntegrations;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsK0ZBQW9CLENBQUM7QUFDbkQsTUFBTUMsVUFBVSxHQUFHRCxtQkFBTyxDQUFDLDJGQUFrQixDQUFDO0FBQzlDLE1BQU1FLE1BQU0sR0FBR0YsbUJBQU8sQ0FBQyx5R0FBeUIsQ0FBQztBQUVqRCxNQUFNRyxxQkFBcUIsR0FBRyxFQUFFOztBQUVoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxnQkFBZ0JBLENBQUNDLFlBQVksRUFBRTtFQUN0QyxNQUFNQyxrQkFBa0IsR0FBRyxDQUFDLENBQUM7RUFFN0JELFlBQVksQ0FBQ0UsT0FBTyxDQUFFQyxlQUFlLElBQUs7SUFDeEMsTUFBTTtNQUFFQztJQUFLLENBQUMsR0FBR0QsZUFBZTtJQUVoQyxNQUFNRSxnQkFBZ0IsR0FBR0osa0JBQWtCLENBQUNHLElBQUksQ0FBQzs7SUFFakQ7SUFDQTtJQUNBLElBQUlDLGdCQUFnQixJQUFJLENBQUNBLGdCQUFnQixDQUFDQyxpQkFBaUIsSUFBSUgsZUFBZSxDQUFDRyxpQkFBaUIsRUFBRTtNQUNoRztJQUNGO0lBRUFMLGtCQUFrQixDQUFDRyxJQUFJLENBQUMsR0FBR0QsZUFBZTtFQUM1QyxDQUFDLENBQUM7RUFFRixPQUFPYixNQUFNLENBQUNpQixNQUFNLENBQUNOLGtCQUFrQixDQUFDO0FBQzFDOztBQUVBO0FBQ0EsU0FBU08sc0JBQXNCQSxDQUFDQyxPQUFPLEVBQUU7RUFDdkMsTUFBTUMsbUJBQW1CLEdBQUdELE9BQU8sQ0FBQ0MsbUJBQW1CLElBQUksRUFBRTtFQUM3RCxNQUFNQyxnQkFBZ0IsR0FBR0YsT0FBTyxDQUFDVCxZQUFZOztFQUU3QztFQUNBVSxtQkFBbUIsQ0FBQ1IsT0FBTyxDQUFFVSxXQUFXLElBQUs7SUFDM0NBLFdBQVcsQ0FBQ04saUJBQWlCLEdBQUcsSUFBSTtFQUN0QyxDQUFDLENBQUM7RUFFRixJQUFJTixZQUFZO0VBRWhCLElBQUlhLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSCxnQkFBZ0IsQ0FBQyxFQUFFO0lBQ25DWCxZQUFZLEdBQUcsQ0FBQyxHQUFHVSxtQkFBbUIsRUFBRSxHQUFHQyxnQkFBZ0IsQ0FBQztFQUM5RCxDQUFDLE1BQU0sSUFBSSxPQUFPQSxnQkFBZ0IsS0FBSyxVQUFVLEVBQUU7SUFDakQsTUFBTUksd0JBQXdCLEdBQUdKLGdCQUFnQixDQUFDRCxtQkFBbUIsQ0FBQztJQUN0RVYsWUFBWSxHQUFHYSxLQUFLLENBQUNDLE9BQU8sQ0FBQ0Msd0JBQXdCLENBQUMsR0FBR0Esd0JBQXdCLEdBQUcsQ0FBQ0Esd0JBQXdCLENBQUM7RUFDaEgsQ0FBQyxNQUFNO0lBQ0xmLFlBQVksR0FBR1UsbUJBQW1CO0VBQ3BDO0VBRUEsTUFBTU0saUJBQWlCLEdBQUdqQixnQkFBZ0IsQ0FBQ0MsWUFBWSxDQUFDOztFQUV4RDtFQUNBO0VBQ0E7RUFDQTtFQUNBLE1BQU1pQixVQUFVLEdBQUdELGlCQUFpQixDQUFDRSxTQUFTLENBQUNOLFdBQVcsSUFBSUEsV0FBVyxDQUFDUixJQUFJLEtBQUssT0FBTyxDQUFDO0VBQzNGLElBQUlhLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRTtJQUNuQixNQUFNLENBQUNFLGFBQWEsQ0FBQyxHQUFHSCxpQkFBaUIsQ0FBQ0ksTUFBTSxDQUFDSCxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQy9ERCxpQkFBaUIsQ0FBQ0ssSUFBSSxDQUFDRixhQUFhLENBQUM7RUFDdkM7RUFFQSxPQUFPSCxpQkFBaUI7QUFDMUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU00saUJBQWlCQSxDQUFDQyxNQUFNLEVBQUV2QixZQUFZLEVBQUU7RUFDL0MsTUFBTXdCLGdCQUFnQixHQUFHLENBQUMsQ0FBQztFQUUzQnhCLFlBQVksQ0FBQ0UsT0FBTyxDQUFDVSxXQUFXLElBQUk7SUFDbEM7SUFDQSxJQUFJQSxXQUFXLEVBQUU7TUFDZmEsZ0JBQWdCLENBQUNGLE1BQU0sRUFBRVgsV0FBVyxFQUFFWSxnQkFBZ0IsQ0FBQztJQUN6RDtFQUNGLENBQUMsQ0FBQztFQUVGLE9BQU9BLGdCQUFnQjtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxzQkFBc0JBLENBQUNILE1BQU0sRUFBRXZCLFlBQVksRUFBRTtFQUNwRCxLQUFLLE1BQU1ZLFdBQVcsSUFBSVosWUFBWSxFQUFFO0lBQ3RDO0lBQ0EsSUFBSVksV0FBVyxJQUFJQSxXQUFXLENBQUNlLGFBQWEsRUFBRTtNQUM1Q2YsV0FBVyxDQUFDZSxhQUFhLENBQUNKLE1BQU0sQ0FBQztJQUNuQztFQUNGO0FBQ0Y7O0FBRUE7QUFDQSxTQUFTRSxnQkFBZ0JBLENBQUNGLE1BQU0sRUFBRVgsV0FBVyxFQUFFWSxnQkFBZ0IsRUFBRTtFQUMvRCxJQUFJQSxnQkFBZ0IsQ0FBQ1osV0FBVyxDQUFDUixJQUFJLENBQUMsRUFBRTtJQUN0Q1IsVUFBVSxDQUFDZ0MsV0FBVyxJQUFJL0IsTUFBTSxDQUFDQSxNQUFNLENBQUNnQyxHQUFHLENBQUUseURBQXdEakIsV0FBVyxDQUFDUixJQUFLLEVBQUMsQ0FBQztJQUN4SDtFQUNGO0VBQ0FvQixnQkFBZ0IsQ0FBQ1osV0FBVyxDQUFDUixJQUFJLENBQUMsR0FBR1EsV0FBVzs7RUFFaEQ7RUFDQSxJQUFJZCxxQkFBcUIsQ0FBQ2dDLE9BQU8sQ0FBQ2xCLFdBQVcsQ0FBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksT0FBT1EsV0FBVyxDQUFDbUIsU0FBUyxLQUFLLFVBQVUsRUFBRTtJQUN6R25CLFdBQVcsQ0FBQ21CLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZCakMscUJBQXFCLENBQUN1QixJQUFJLENBQUNULFdBQVcsQ0FBQ1IsSUFBSSxDQUFDO0VBQzlDOztFQUVBO0VBQ0EsSUFBSVEsV0FBVyxDQUFDb0IsS0FBSyxJQUFJLE9BQU9wQixXQUFXLENBQUNvQixLQUFLLEtBQUssVUFBVSxFQUFFO0lBQ2hFcEIsV0FBVyxDQUFDb0IsS0FBSyxDQUFDVCxNQUFNLENBQUM7RUFDM0I7RUFFQSxJQUFJLE9BQU9YLFdBQVcsQ0FBQ3FCLGVBQWUsS0FBSyxVQUFVLEVBQUU7SUFDckQsTUFBTUMsUUFBUSxHQUFHdEIsV0FBVyxDQUFDcUIsZUFBZSxDQUFDRSxJQUFJLENBQUN2QixXQUFXLENBQUM7SUFDOURXLE1BQU0sQ0FBQ2EsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUNDLEtBQUssRUFBRUMsSUFBSSxLQUFLSixRQUFRLENBQUNHLEtBQUssRUFBRUMsSUFBSSxFQUFFZixNQUFNLENBQUMsQ0FBQztFQUM5RTtFQUVBLElBQUksT0FBT1gsV0FBVyxDQUFDMkIsWUFBWSxLQUFLLFVBQVUsRUFBRTtJQUNsRCxNQUFNTCxRQUFRLEdBQUd0QixXQUFXLENBQUMyQixZQUFZLENBQUNKLElBQUksQ0FBQ3ZCLFdBQVcsQ0FBQztJQUUzRCxNQUFNNEIsU0FBUyxHQUFHbEQsTUFBTSxDQUFDbUQsTUFBTSxDQUFDLENBQUNKLEtBQUssRUFBRUMsSUFBSSxLQUFLSixRQUFRLENBQUNHLEtBQUssRUFBRUMsSUFBSSxFQUFFZixNQUFNLENBQUMsRUFBRTtNQUM5RW1CLEVBQUUsRUFBRTlCLFdBQVcsQ0FBQ1I7SUFDbEIsQ0FBQyxDQUFDO0lBRUZtQixNQUFNLENBQUNvQixpQkFBaUIsQ0FBQ0gsU0FBUyxDQUFDO0VBQ3JDO0VBRUE1QyxVQUFVLENBQUNnQyxXQUFXLElBQUkvQixNQUFNLENBQUNBLE1BQU0sQ0FBQ2dDLEdBQUcsQ0FBRSwwQkFBeUJqQixXQUFXLENBQUNSLElBQUssRUFBQyxDQUFDO0FBQzNGOztBQUVBO0FBQ0EsU0FBU3dDLGNBQWNBLENBQUNoQyxXQUFXLEVBQUU7RUFDbkMsTUFBTVcsTUFBTSxHQUFHN0IsYUFBYSxDQUFDbUQsU0FBUyxDQUFDLENBQUM7RUFFeEMsSUFBSSxDQUFDdEIsTUFBTSxFQUFFO0lBQ1gzQixVQUFVLENBQUNnQyxXQUFXLElBQUkvQixNQUFNLENBQUNBLE1BQU0sQ0FBQ2lELElBQUksQ0FBRSwyQkFBMEJsQyxXQUFXLENBQUNSLElBQUssdUNBQXNDLENBQUM7SUFDaEk7RUFDRjtFQUVBbUIsTUFBTSxDQUFDcUIsY0FBYyxDQUFDaEMsV0FBVyxDQUFDO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU21DLGlCQUFpQkEsQ0FBQ0MsRUFBRSxFQUFFO0VBQzdCLE9BQU9BLEVBQUU7QUFDWDtBQUVBeEQsc0JBQXNCLEdBQUdvRCxjQUFjO0FBQ3ZDcEQsOEJBQThCLEdBQUdrQyxzQkFBc0I7QUFDdkRsQyx5QkFBeUIsR0FBR3VELGlCQUFpQjtBQUM3Q3ZELDhCQUE4QixHQUFHZ0Isc0JBQXNCO0FBQ3ZEaEIsNkJBQTZCLEdBQUdNLHFCQUFxQjtBQUNyRE4sd0JBQXdCLEdBQUdpQyxnQkFBZ0I7QUFDM0NqQyx5QkFBeUIsR0FBRzhCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9uLmpzPzE2YjciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJyk7XG5cbmNvbnN0IGluc3RhbGxlZEludGVncmF0aW9ucyA9IFtdO1xuXG4vKiogTWFwIG9mIGludGVncmF0aW9ucyBhc3NpZ25lZCB0byBhIGNsaWVudCAqL1xuXG4vKipcbiAqIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gdGhlIGdpdmVuIGFycmF5LCBwcmVmZXJyaW5nIHRoZSBsYXN0IGluc3RhbmNlIG9mIGFueSBkdXBsaWNhdGUuIE5vdCBndWFyYW50ZWVkIHRvXG4gKiBwcmVzZXJ2ZSB0aGUgb3JkZXIgb2YgaW50ZWdyYXRpb25zIGluIHRoZSBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBmaWx0ZXJEdXBsaWNhdGVzKGludGVncmF0aW9ucykge1xuICBjb25zdCBpbnRlZ3JhdGlvbnNCeU5hbWUgPSB7fTtcblxuICBpbnRlZ3JhdGlvbnMuZm9yRWFjaCgoY3VycmVudEluc3RhbmNlKSA9PiB7XG4gICAgY29uc3QgeyBuYW1lIH0gPSBjdXJyZW50SW5zdGFuY2U7XG5cbiAgICBjb25zdCBleGlzdGluZ0luc3RhbmNlID0gaW50ZWdyYXRpb25zQnlOYW1lW25hbWVdO1xuXG4gICAgLy8gV2Ugd2FudCBpbnRlZ3JhdGlvbnMgbGF0ZXIgaW4gdGhlIGFycmF5IHRvIG92ZXJ3cml0ZSBlYXJsaWVyIG9uZXMgb2YgdGhlIHNhbWUgdHlwZSwgZXhjZXB0IHRoYXQgd2UgbmV2ZXIgd2FudCBhXG4gICAgLy8gZGVmYXVsdCBpbnN0YW5jZSB0byBvdmVyd3JpdGUgYW4gZXhpc3RpbmcgdXNlciBpbnN0YW5jZVxuICAgIGlmIChleGlzdGluZ0luc3RhbmNlICYmICFleGlzdGluZ0luc3RhbmNlLmlzRGVmYXVsdEluc3RhbmNlICYmIGN1cnJlbnRJbnN0YW5jZS5pc0RlZmF1bHRJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludGVncmF0aW9uc0J5TmFtZVtuYW1lXSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgfSk7XG5cbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoaW50ZWdyYXRpb25zQnlOYW1lKTtcbn1cblxuLyoqIEdldHMgaW50ZWdyYXRpb25zIHRvIGluc3RhbGwgKi9cbmZ1bmN0aW9uIGdldEludGVncmF0aW9uc1RvU2V0dXAob3B0aW9ucykge1xuICBjb25zdCBkZWZhdWx0SW50ZWdyYXRpb25zID0gb3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zIHx8IFtdO1xuICBjb25zdCB1c2VySW50ZWdyYXRpb25zID0gb3B0aW9ucy5pbnRlZ3JhdGlvbnM7XG5cbiAgLy8gV2UgZmxhZyBkZWZhdWx0IGluc3RhbmNlcywgc28gdGhhdCBsYXRlciB3ZSBjYW4gdGVsbCB0aGVtIGFwYXJ0IGZyb20gYW55IHVzZXItY3JlYXRlZCBpbnN0YW5jZXMgb2YgdGhlIHNhbWUgY2xhc3NcbiAgZGVmYXVsdEludGVncmF0aW9ucy5mb3JFYWNoKChpbnRlZ3JhdGlvbikgPT4ge1xuICAgIGludGVncmF0aW9uLmlzRGVmYXVsdEluc3RhbmNlID0gdHJ1ZTtcbiAgfSk7XG5cbiAgbGV0IGludGVncmF0aW9ucztcblxuICBpZiAoQXJyYXkuaXNBcnJheSh1c2VySW50ZWdyYXRpb25zKSkge1xuICAgIGludGVncmF0aW9ucyA9IFsuLi5kZWZhdWx0SW50ZWdyYXRpb25zLCAuLi51c2VySW50ZWdyYXRpb25zXTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdXNlckludGVncmF0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IHJlc29sdmVkVXNlckludGVncmF0aW9ucyA9IHVzZXJJbnRlZ3JhdGlvbnMoZGVmYXVsdEludGVncmF0aW9ucyk7XG4gICAgaW50ZWdyYXRpb25zID0gQXJyYXkuaXNBcnJheShyZXNvbHZlZFVzZXJJbnRlZ3JhdGlvbnMpID8gcmVzb2x2ZWRVc2VySW50ZWdyYXRpb25zIDogW3Jlc29sdmVkVXNlckludGVncmF0aW9uc107XG4gIH0gZWxzZSB7XG4gICAgaW50ZWdyYXRpb25zID0gZGVmYXVsdEludGVncmF0aW9ucztcbiAgfVxuXG4gIGNvbnN0IGZpbmFsSW50ZWdyYXRpb25zID0gZmlsdGVyRHVwbGljYXRlcyhpbnRlZ3JhdGlvbnMpO1xuXG4gIC8vIFRoZSBgRGVidWdgIGludGVncmF0aW9uIHByaW50cyBjb3BpZXMgb2YgdGhlIGBldmVudGAgYW5kIGBoaW50YCB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBgYmVmb3JlU2VuZGAgb3JcbiAgLy8gYGJlZm9yZVNlbmRUcmFuc2FjdGlvbmAuIEl0IHRoZXJlZm9yZSBoYXMgdG8gcnVuIGFmdGVyIGFsbCBvdGhlciBpbnRlZ3JhdGlvbnMsIHNvIHRoYXQgdGhlIGNoYW5nZXMgb2YgYWxsIGV2ZW50XG4gIC8vIHByb2Nlc3NvcnMgd2lsbCBiZSByZWZsZWN0ZWQgaW4gdGhlIHByaW50ZWQgdmFsdWVzLiBGb3IgbGFjayBvZiBhIG1vcmUgZWxlZ2FudCB3YXkgdG8gZ3VhcmFudGVlIHRoYXQsIHdlIHRoZXJlZm9yZVxuICAvLyBsb2NhdGUgaXQgYW5kLCBhc3N1bWluZyBpdCBleGlzdHMsIHBvcCBpdCBvdXQgb2YgaXRzIGN1cnJlbnQgc3BvdCBhbmQgc2hvdmUgaXQgb250byB0aGUgZW5kIG9mIHRoZSBhcnJheS5cbiAgY29uc3QgZGVidWdJbmRleCA9IGZpbmFsSW50ZWdyYXRpb25zLmZpbmRJbmRleChpbnRlZ3JhdGlvbiA9PiBpbnRlZ3JhdGlvbi5uYW1lID09PSAnRGVidWcnKTtcbiAgaWYgKGRlYnVnSW5kZXggPiAtMSkge1xuICAgIGNvbnN0IFtkZWJ1Z0luc3RhbmNlXSA9IGZpbmFsSW50ZWdyYXRpb25zLnNwbGljZShkZWJ1Z0luZGV4LCAxKSA7XG4gICAgZmluYWxJbnRlZ3JhdGlvbnMucHVzaChkZWJ1Z0luc3RhbmNlKTtcbiAgfVxuXG4gIHJldHVybiBmaW5hbEludGVncmF0aW9ucztcbn1cblxuLyoqXG4gKiBHaXZlbiBhIGxpc3Qgb2YgaW50ZWdyYXRpb24gaW5zdGFuY2VzIHRoaXMgaW5zdGFsbHMgdGhlbSBhbGwuIFdoZW4gYHdpdGhEZWZhdWx0c2AgaXMgc2V0IHRvIGB0cnVlYCB0aGVuIGFsbCBkZWZhdWx0XG4gKiBpbnRlZ3JhdGlvbnMgYXJlIGFkZGVkIHVubGVzcyB0aGV5IHdlcmUgYWxyZWFkeSBwcm92aWRlZCBiZWZvcmUuXG4gKiBAcGFyYW0gaW50ZWdyYXRpb25zIGFycmF5IG9mIGludGVncmF0aW9uIGluc3RhbmNlc1xuICogQHBhcmFtIHdpdGhEZWZhdWx0IHNob3VsZCBlbmFibGUgZGVmYXVsdCBpbnRlZ3JhdGlvbnNcbiAqL1xuZnVuY3Rpb24gc2V0dXBJbnRlZ3JhdGlvbnMoY2xpZW50LCBpbnRlZ3JhdGlvbnMpIHtcbiAgY29uc3QgaW50ZWdyYXRpb25JbmRleCA9IHt9O1xuXG4gIGludGVncmF0aW9ucy5mb3JFYWNoKGludGVncmF0aW9uID0+IHtcbiAgICAvLyBndWFyZCBhZ2FpbnN0IGVtcHR5IHByb3ZpZGVkIGludGVncmF0aW9uc1xuICAgIGlmIChpbnRlZ3JhdGlvbikge1xuICAgICAgc2V0dXBJbnRlZ3JhdGlvbihjbGllbnQsIGludGVncmF0aW9uLCBpbnRlZ3JhdGlvbkluZGV4KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBpbnRlZ3JhdGlvbkluZGV4O1xufVxuXG4vKipcbiAqIEV4ZWN1dGUgdGhlIGBhZnRlckFsbFNldHVwYCBob29rcyBvZiB0aGUgZ2l2ZW4gaW50ZWdyYXRpb25zLlxuICovXG5mdW5jdGlvbiBhZnRlclNldHVwSW50ZWdyYXRpb25zKGNsaWVudCwgaW50ZWdyYXRpb25zKSB7XG4gIGZvciAoY29uc3QgaW50ZWdyYXRpb24gb2YgaW50ZWdyYXRpb25zKSB7XG4gICAgLy8gZ3VhcmQgYWdhaW5zdCBlbXB0eSBwcm92aWRlZCBpbnRlZ3JhdGlvbnNcbiAgICBpZiAoaW50ZWdyYXRpb24gJiYgaW50ZWdyYXRpb24uYWZ0ZXJBbGxTZXR1cCkge1xuICAgICAgaW50ZWdyYXRpb24uYWZ0ZXJBbGxTZXR1cChjbGllbnQpO1xuICAgIH1cbiAgfVxufVxuXG4vKiogU2V0dXAgYSBzaW5nbGUgaW50ZWdyYXRpb24uICAqL1xuZnVuY3Rpb24gc2V0dXBJbnRlZ3JhdGlvbihjbGllbnQsIGludGVncmF0aW9uLCBpbnRlZ3JhdGlvbkluZGV4KSB7XG4gIGlmIChpbnRlZ3JhdGlvbkluZGV4W2ludGVncmF0aW9uLm5hbWVdKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nZ2VyLmxvZyhgSW50ZWdyYXRpb24gc2tpcHBlZCBiZWNhdXNlIGl0IHdhcyBhbHJlYWR5IGluc3RhbGxlZDogJHtpbnRlZ3JhdGlvbi5uYW1lfWApO1xuICAgIHJldHVybjtcbiAgfVxuICBpbnRlZ3JhdGlvbkluZGV4W2ludGVncmF0aW9uLm5hbWVdID0gaW50ZWdyYXRpb247XG5cbiAgLy8gYHNldHVwT25jZWAgaXMgb25seSBjYWxsZWQgdGhlIGZpcnN0IHRpbWVcbiAgaWYgKGluc3RhbGxlZEludGVncmF0aW9ucy5pbmRleE9mKGludGVncmF0aW9uLm5hbWUpID09PSAtMSAmJiB0eXBlb2YgaW50ZWdyYXRpb24uc2V0dXBPbmNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW50ZWdyYXRpb24uc2V0dXBPbmNlKCk7XG4gICAgaW5zdGFsbGVkSW50ZWdyYXRpb25zLnB1c2goaW50ZWdyYXRpb24ubmFtZSk7XG4gIH1cblxuICAvLyBgc2V0dXBgIGlzIHJ1biBmb3IgZWFjaCBjbGllbnRcbiAgaWYgKGludGVncmF0aW9uLnNldHVwICYmIHR5cGVvZiBpbnRlZ3JhdGlvbi5zZXR1cCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGludGVncmF0aW9uLnNldHVwKGNsaWVudCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGludGVncmF0aW9uLnByZXByb2Nlc3NFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gaW50ZWdyYXRpb24ucHJlcHJvY2Vzc0V2ZW50LmJpbmQoaW50ZWdyYXRpb24pIDtcbiAgICBjbGllbnQub24oJ3ByZXByb2Nlc3NFdmVudCcsIChldmVudCwgaGludCkgPT4gY2FsbGJhY2soZXZlbnQsIGhpbnQsIGNsaWVudCkpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpbnRlZ3JhdGlvbi5wcm9jZXNzRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBjYWxsYmFjayA9IGludGVncmF0aW9uLnByb2Nlc3NFdmVudC5iaW5kKGludGVncmF0aW9uKSA7XG5cbiAgICBjb25zdCBwcm9jZXNzb3IgPSBPYmplY3QuYXNzaWduKChldmVudCwgaGludCkgPT4gY2FsbGJhY2soZXZlbnQsIGhpbnQsIGNsaWVudCksIHtcbiAgICAgIGlkOiBpbnRlZ3JhdGlvbi5uYW1lLFxuICAgIH0pO1xuXG4gICAgY2xpZW50LmFkZEV2ZW50UHJvY2Vzc29yKHByb2Nlc3Nvcik7XG4gIH1cblxuICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2dnZXIubG9nKGBJbnRlZ3JhdGlvbiBpbnN0YWxsZWQ6ICR7aW50ZWdyYXRpb24ubmFtZX1gKTtcbn1cblxuLyoqIEFkZCBhbiBpbnRlZ3JhdGlvbiB0byB0aGUgY3VycmVudCBzY29wZSdzIGNsaWVudC4gKi9cbmZ1bmN0aW9uIGFkZEludGVncmF0aW9uKGludGVncmF0aW9uKSB7XG4gIGNvbnN0IGNsaWVudCA9IGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCk7XG5cbiAgaWYgKCFjbGllbnQpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2dnZXIud2FybihgQ2Fubm90IGFkZCBpbnRlZ3JhdGlvbiBcIiR7aW50ZWdyYXRpb24ubmFtZX1cIiBiZWNhdXNlIG5vIFNESyBDbGllbnQgaXMgYXZhaWxhYmxlLmApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNsaWVudC5hZGRJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbik7XG59XG5cbi8qKlxuICogRGVmaW5lIGFuIGludGVncmF0aW9uIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gY3JlYXRlIGFuIGludGVncmF0aW9uIGluc3RhbmNlLlxuICogTm90ZSB0aGF0IHRoaXMgYnkgZGVzaWduIGhpZGVzIHRoZSBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9mIHRoZSBpbnRlZ3JhdGlvbiwgYXMgdGhleSBhcmUgY29uc2lkZXJlZCBpbnRlcm5hbC5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lSW50ZWdyYXRpb24oZm4pIHtcbiAgcmV0dXJuIGZuO1xufVxuXG5leHBvcnRzLmFkZEludGVncmF0aW9uID0gYWRkSW50ZWdyYXRpb247XG5leHBvcnRzLmFmdGVyU2V0dXBJbnRlZ3JhdGlvbnMgPSBhZnRlclNldHVwSW50ZWdyYXRpb25zO1xuZXhwb3J0cy5kZWZpbmVJbnRlZ3JhdGlvbiA9IGRlZmluZUludGVncmF0aW9uO1xuZXhwb3J0cy5nZXRJbnRlZ3JhdGlvbnNUb1NldHVwID0gZ2V0SW50ZWdyYXRpb25zVG9TZXR1cDtcbmV4cG9ydHMuaW5zdGFsbGVkSW50ZWdyYXRpb25zID0gaW5zdGFsbGVkSW50ZWdyYXRpb25zO1xuZXhwb3J0cy5zZXR1cEludGVncmF0aW9uID0gc2V0dXBJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2V0dXBJbnRlZ3JhdGlvbnMgPSBzZXR1cEludGVncmF0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVncmF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3VycmVudFNjb3BlcyIsInJlcXVpcmUiLCJkZWJ1Z0J1aWxkIiwibG9nZ2VyIiwiaW5zdGFsbGVkSW50ZWdyYXRpb25zIiwiZmlsdGVyRHVwbGljYXRlcyIsImludGVncmF0aW9ucyIsImludGVncmF0aW9uc0J5TmFtZSIsImZvckVhY2giLCJjdXJyZW50SW5zdGFuY2UiLCJuYW1lIiwiZXhpc3RpbmdJbnN0YW5jZSIsImlzRGVmYXVsdEluc3RhbmNlIiwidmFsdWVzIiwiZ2V0SW50ZWdyYXRpb25zVG9TZXR1cCIsIm9wdGlvbnMiLCJkZWZhdWx0SW50ZWdyYXRpb25zIiwidXNlckludGVncmF0aW9ucyIsImludGVncmF0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwicmVzb2x2ZWRVc2VySW50ZWdyYXRpb25zIiwiZmluYWxJbnRlZ3JhdGlvbnMiLCJkZWJ1Z0luZGV4IiwiZmluZEluZGV4IiwiZGVidWdJbnN0YW5jZSIsInNwbGljZSIsInB1c2giLCJzZXR1cEludGVncmF0aW9ucyIsImNsaWVudCIsImludGVncmF0aW9uSW5kZXgiLCJzZXR1cEludGVncmF0aW9uIiwiYWZ0ZXJTZXR1cEludGVncmF0aW9ucyIsImFmdGVyQWxsU2V0dXAiLCJERUJVR19CVUlMRCIsImxvZyIsImluZGV4T2YiLCJzZXR1cE9uY2UiLCJzZXR1cCIsInByZXByb2Nlc3NFdmVudCIsImNhbGxiYWNrIiwiYmluZCIsIm9uIiwiZXZlbnQiLCJoaW50IiwicHJvY2Vzc0V2ZW50IiwicHJvY2Vzc29yIiwiYXNzaWduIiwiaWQiLCJhZGRFdmVudFByb2Nlc3NvciIsImFkZEludGVncmF0aW9uIiwiZ2V0Q2xpZW50Iiwid2FybiIsImRlZmluZUludGVncmF0aW9uIiwiZm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst console = __webpack_require__(/*! ../utils-hoist/instrument/console.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst misc = __webpack_require__(/*! ../utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst severity = __webpack_require__(/*! ../utils-hoist/severity.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/severity.js\");\nconst string = __webpack_require__(/*! ../utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst worldwide = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst INTEGRATION_NAME = 'CaptureConsole';\nconst _captureConsoleIntegration = (options = {}) => {\n  const levels = options.levels || logger.CONSOLE_LEVELS;\n  // TODO(v9): Flip default value to `true`\n  const handled = !!options.handled;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!('console' in worldwide.GLOBAL_OBJ)) {\n        return;\n      }\n      console.addConsoleInstrumentationHandler(({\n        args,\n        level\n      }) => {\n        if (currentScopes.getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n        consoleHandler(args, level, handled);\n      });\n    }\n  };\n};\n\n/**\n * Send Console API calls as Sentry Events.\n */\nconst captureConsoleIntegration = integration.defineIntegration(_captureConsoleIntegration);\nfunction consoleHandler(args, level, handled) {\n  const captureContext = {\n    level: severity.severityLevelFromString(level),\n    extra: {\n      arguments: args\n    }\n  };\n  currentScopes.withScope(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n      misc.addExceptionMechanism(event, {\n        handled,\n        type: 'console'\n      });\n      return event;\n    });\n    if (level === 'assert') {\n      if (!args[0]) {\n        const message = `Assertion failed: ${string.safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n        scope.setExtra('arguments', args.slice(1));\n        exports$1.captureMessage(message, captureContext);\n      }\n      return;\n    }\n    const error = args.find(arg => arg instanceof Error);\n    if (error) {\n      exports$1.captureException(error, captureContext);\n      return;\n    }\n    const message = string.safeJoin(args, ' ');\n    exports$1.captureMessage(message, captureContext);\n  });\n}\nexports.captureConsoleIntegration = captureConsoleIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NhcHR1cmVjb25zb2xlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLGdHQUFxQixDQUFDO0FBQ3BELE1BQU1DLFNBQVMsR0FBR0QsbUJBQU8sQ0FBQyxvRkFBZSxDQUFDO0FBQzFDLE1BQU1FLFdBQVcsR0FBR0YsbUJBQU8sQ0FBQyw0RkFBbUIsQ0FBQztBQUNoRCxNQUFNRyxPQUFPLEdBQUdILG1CQUFPLENBQUMsa0lBQXNDLENBQUM7QUFDL0QsTUFBTUksTUFBTSxHQUFHSixtQkFBTyxDQUFDLDBHQUEwQixDQUFDO0FBQ2xELE1BQU1LLElBQUksR0FBR0wsbUJBQU8sQ0FBQyxzR0FBd0IsQ0FBQztBQUM5QyxNQUFNTSxRQUFRLEdBQUdOLG1CQUFPLENBQUMsOEdBQTRCLENBQUM7QUFDdEQsTUFBTU8sTUFBTSxHQUFHUCxtQkFBTyxDQUFDLDBHQUEwQixDQUFDO0FBQ2xELE1BQU1RLFNBQVMsR0FBR1IsbUJBQU8sQ0FBQyxnSEFBNkIsQ0FBQztBQUV4RCxNQUFNUyxnQkFBZ0IsR0FBRyxnQkFBZ0I7QUFFekMsTUFBTUMsMEJBQTBCLEdBQUlBLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSztFQUNwRCxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQ0MsTUFBTSxJQUFJUixNQUFNLENBQUNTLGNBQWM7RUFDdEQ7RUFDQSxNQUFNQyxPQUFPLEdBQUcsQ0FBQyxDQUFDSCxPQUFPLENBQUNHLE9BQU87RUFFakMsT0FBTztJQUNMQyxJQUFJLEVBQUVOLGdCQUFnQjtJQUN0Qk8sS0FBS0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ1osSUFBSSxFQUFFLFNBQVMsSUFBSVQsU0FBUyxDQUFDVSxVQUFVLENBQUMsRUFBRTtRQUN4QztNQUNGO01BRUFmLE9BQU8sQ0FBQ2dCLGdDQUFnQyxDQUFDLENBQUM7UUFBRUMsSUFBSTtRQUFFQztNQUFNLENBQUMsS0FBSztRQUM1RCxJQUFJdEIsYUFBYSxDQUFDdUIsU0FBUyxDQUFDLENBQUMsS0FBS0wsTUFBTSxJQUFJLENBQUNMLE1BQU0sQ0FBQ1csUUFBUSxDQUFDRixLQUFLLENBQUMsRUFBRTtVQUNuRTtRQUNGO1FBRUFHLGNBQWMsQ0FBQ0osSUFBSSxFQUFFQyxLQUFLLEVBQUVQLE9BQU8sQ0FBQztNQUN0QyxDQUFDLENBQUM7SUFDSjtFQUNGLENBQUM7QUFDSCxDQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLE1BQU1XLHlCQUF5QixHQUFHdkIsV0FBVyxDQUFDd0IsaUJBQWlCLENBQUNoQiwwQkFBMEIsQ0FBQztBQUUzRixTQUFTYyxjQUFjQSxDQUFDSixJQUFJLEVBQUVDLEtBQUssRUFBRVAsT0FBTyxFQUFFO0VBQzVDLE1BQU1hLGNBQWMsR0FBRztJQUNyQk4sS0FBSyxFQUFFZixRQUFRLENBQUNzQix1QkFBdUIsQ0FBQ1AsS0FBSyxDQUFDO0lBQzlDUSxLQUFLLEVBQUU7TUFDTEMsU0FBUyxFQUFFVjtJQUNiO0VBQ0YsQ0FBQztFQUVEckIsYUFBYSxDQUFDZ0MsU0FBUyxDQUFDQyxLQUFLLElBQUk7SUFDL0JBLEtBQUssQ0FBQ0MsaUJBQWlCLENBQUNDLEtBQUssSUFBSTtNQUMvQkEsS0FBSyxDQUFDOUIsTUFBTSxHQUFHLFNBQVM7TUFFeEJDLElBQUksQ0FBQzhCLHFCQUFxQixDQUFDRCxLQUFLLEVBQUU7UUFDaENwQixPQUFPO1FBQ1BzQixJQUFJLEVBQUU7TUFDUixDQUFDLENBQUM7TUFFRixPQUFPRixLQUFLO0lBQ2QsQ0FBQyxDQUFDO0lBRUYsSUFBSWIsS0FBSyxLQUFLLFFBQVEsRUFBRTtNQUN0QixJQUFJLENBQUNELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNaLE1BQU1pQixPQUFPLEdBQUkscUJBQW9COUIsTUFBTSxDQUFDK0IsUUFBUSxDQUFDbEIsSUFBSSxDQUFDbUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLGdCQUFpQixFQUFDO1FBQzlGUCxLQUFLLENBQUNRLFFBQVEsQ0FBQyxXQUFXLEVBQUVwQixJQUFJLENBQUNtQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUN0QyxTQUFTLENBQUN3QyxjQUFjLENBQUNKLE9BQU8sRUFBRVYsY0FBYyxDQUFDO01BQ25EO01BQ0E7SUFDRjtJQUVBLE1BQU1lLEtBQUssR0FBR3RCLElBQUksQ0FBQ3VCLElBQUksQ0FBQ0MsR0FBRyxJQUFJQSxHQUFHLFlBQVlDLEtBQUssQ0FBQztJQUNwRCxJQUFJSCxLQUFLLEVBQUU7TUFDVHpDLFNBQVMsQ0FBQzZDLGdCQUFnQixDQUFDSixLQUFLLEVBQUVmLGNBQWMsQ0FBQztNQUNqRDtJQUNGO0lBRUEsTUFBTVUsT0FBTyxHQUFHOUIsTUFBTSxDQUFDK0IsUUFBUSxDQUFDbEIsSUFBSSxFQUFFLEdBQUcsQ0FBQztJQUMxQ25CLFNBQVMsQ0FBQ3dDLGNBQWMsQ0FBQ0osT0FBTyxFQUFFVixjQUFjLENBQUM7RUFDbkQsQ0FBQyxDQUFDO0FBQ0o7QUFFQTlCLGlDQUFpQyxHQUFHNEIseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NhcHR1cmVjb25zb2xlLmpzP2YzNmIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4uL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGV4cG9ydHMkMSA9IHJlcXVpcmUoJy4uL2V4cG9ydHMuanMnKTtcbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24uanMnKTtcbmNvbnN0IGNvbnNvbGUgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9pbnN0cnVtZW50L2NvbnNvbGUuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuY29uc3QgbWlzYyA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L21pc2MuanMnKTtcbmNvbnN0IHNldmVyaXR5ID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3Qvc2V2ZXJpdHkuanMnKTtcbmNvbnN0IHN0cmluZyA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L3N0cmluZy5qcycpO1xuY29uc3Qgd29ybGR3aWRlID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3Qvd29ybGR3aWRlLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQ2FwdHVyZUNvbnNvbGUnO1xuXG5jb25zdCBfY2FwdHVyZUNvbnNvbGVJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IGxldmVscyA9IG9wdGlvbnMubGV2ZWxzIHx8IGxvZ2dlci5DT05TT0xFX0xFVkVMUztcbiAgLy8gVE9ETyh2OSk6IEZsaXAgZGVmYXVsdCB2YWx1ZSB0byBgdHJ1ZWBcbiAgY29uc3QgaGFuZGxlZCA9ICEhb3B0aW9ucy5oYW5kbGVkO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGlmICghKCdjb25zb2xlJyBpbiB3b3JsZHdpZGUuR0xPQkFMX09CSikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyKCh7IGFyZ3MsIGxldmVsIH0pID0+IHtcbiAgICAgICAgaWYgKGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCkgIT09IGNsaWVudCB8fCAhbGV2ZWxzLmluY2x1ZGVzKGxldmVsKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGVIYW5kbGVyKGFyZ3MsIGxldmVsLCBoYW5kbGVkKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogU2VuZCBDb25zb2xlIEFQSSBjYWxscyBhcyBTZW50cnkgRXZlbnRzLlxuICovXG5jb25zdCBjYXB0dXJlQ29uc29sZUludGVncmF0aW9uID0gaW50ZWdyYXRpb24uZGVmaW5lSW50ZWdyYXRpb24oX2NhcHR1cmVDb25zb2xlSW50ZWdyYXRpb24pO1xuXG5mdW5jdGlvbiBjb25zb2xlSGFuZGxlcihhcmdzLCBsZXZlbCwgaGFuZGxlZCkge1xuICBjb25zdCBjYXB0dXJlQ29udGV4dCA9IHtcbiAgICBsZXZlbDogc2V2ZXJpdHkuc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcobGV2ZWwpLFxuICAgIGV4dHJhOiB7XG4gICAgICBhcmd1bWVudHM6IGFyZ3MsXG4gICAgfSxcbiAgfTtcblxuICBjdXJyZW50U2NvcGVzLndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgc2NvcGUuYWRkRXZlbnRQcm9jZXNzb3IoZXZlbnQgPT4ge1xuICAgICAgZXZlbnQubG9nZ2VyID0gJ2NvbnNvbGUnO1xuXG4gICAgICBtaXNjLmFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwge1xuICAgICAgICBoYW5kbGVkLFxuICAgICAgICB0eXBlOiAnY29uc29sZScsXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0pO1xuXG4gICAgaWYgKGxldmVsID09PSAnYXNzZXJ0Jykge1xuICAgICAgaWYgKCFhcmdzWzBdKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgQXNzZXJ0aW9uIGZhaWxlZDogJHtzdHJpbmcuc2FmZUpvaW4oYXJncy5zbGljZSgxKSwgJyAnKSB8fCAnY29uc29sZS5hc3NlcnQnfWA7XG4gICAgICAgIHNjb3BlLnNldEV4dHJhKCdhcmd1bWVudHMnLCBhcmdzLnNsaWNlKDEpKTtcbiAgICAgICAgZXhwb3J0cyQxLmNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UsIGNhcHR1cmVDb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlcnJvciA9IGFyZ3MuZmluZChhcmcgPT4gYXJnIGluc3RhbmNlb2YgRXJyb3IpO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgZXhwb3J0cyQxLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIGNhcHR1cmVDb250ZXh0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtZXNzYWdlID0gc3RyaW5nLnNhZmVKb2luKGFyZ3MsICcgJyk7XG4gICAgZXhwb3J0cyQxLmNhcHR1cmVNZXNzYWdlKG1lc3NhZ2UsIGNhcHR1cmVDb250ZXh0KTtcbiAgfSk7XG59XG5cbmV4cG9ydHMuY2FwdHVyZUNvbnNvbGVJbnRlZ3JhdGlvbiA9IGNhcHR1cmVDb25zb2xlSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXB0dXJlY29uc29sZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImN1cnJlbnRTY29wZXMiLCJyZXF1aXJlIiwiZXhwb3J0cyQxIiwiaW50ZWdyYXRpb24iLCJjb25zb2xlIiwibG9nZ2VyIiwibWlzYyIsInNldmVyaXR5Iiwic3RyaW5nIiwid29ybGR3aWRlIiwiSU5URUdSQVRJT05fTkFNRSIsIl9jYXB0dXJlQ29uc29sZUludGVncmF0aW9uIiwib3B0aW9ucyIsImxldmVscyIsIkNPTlNPTEVfTEVWRUxTIiwiaGFuZGxlZCIsIm5hbWUiLCJzZXR1cCIsImNsaWVudCIsIkdMT0JBTF9PQkoiLCJhZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImFyZ3MiLCJsZXZlbCIsImdldENsaWVudCIsImluY2x1ZGVzIiwiY29uc29sZUhhbmRsZXIiLCJjYXB0dXJlQ29uc29sZUludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iLCJjYXB0dXJlQ29udGV4dCIsInNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nIiwiZXh0cmEiLCJhcmd1bWVudHMiLCJ3aXRoU2NvcGUiLCJzY29wZSIsImFkZEV2ZW50UHJvY2Vzc29yIiwiZXZlbnQiLCJhZGRFeGNlcHRpb25NZWNoYW5pc20iLCJ0eXBlIiwibWVzc2FnZSIsInNhZmVKb2luIiwic2xpY2UiLCJzZXRFeHRyYSIsImNhcHR1cmVNZXNzYWdlIiwiZXJyb3IiLCJmaW5kIiwiYXJnIiwiRXJyb3IiLCJjYXB0dXJlRXhjZXB0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/debug.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/debug.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst INTEGRATION_NAME = 'Debug';\nconst _debugIntegration = (options = {}) => {\n  const _options = {\n    debugger: false,\n    stringify: false,\n    ...options\n  };\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      client.on('beforeSendEvent', (event, hint) => {\n        if (_options.debugger) {\n          // eslint-disable-next-line no-debugger\n          debugger;\n        }\n\n        /* eslint-disable no-console */\n        logger.consoleSandbox(() => {\n          if (_options.stringify) {\n            console.log(JSON.stringify(event, null, 2));\n            if (hint && Object.keys(hint).length) {\n              console.log(JSON.stringify(hint, null, 2));\n            }\n          } else {\n            console.log(event);\n            if (hint && Object.keys(hint).length) {\n              console.log(hint);\n            }\n          }\n        });\n        /* eslint-enable no-console */\n      });\n    }\n  };\n};\n\n/**\n * Integration to debug sent Sentry events.\n * This integration should not be used in production.\n *\n * @deprecated This integration is deprecated and will be removed in the next major version of the SDK.\n * To log outgoing events, use [Hook Options](https://docs.sentry.io/platforms/javascript/configuration/options/#hooks) (`beforeSend`, `beforeSendTransaction`, ...).\n */\nconst debugIntegration = integration.defineIntegration(_debugIntegration);\nexports.debugIntegration = debugIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2RlYnVnLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsV0FBVyxHQUFHQyxtQkFBTyxDQUFDLDRGQUFtQixDQUFDO0FBQ2hELE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUVsRCxNQUFNRSxnQkFBZ0IsR0FBRyxPQUFPO0FBRWhDLE1BQU1DLGlCQUFpQixHQUFJQSxDQUFDQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEtBQUs7RUFDM0MsTUFBTUMsUUFBUSxHQUFHO0lBQ2ZDLFFBQVEsRUFBRSxLQUFLO0lBQ2ZDLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLEdBQUdIO0VBQ0wsQ0FBQztFQUVELE9BQU87SUFDTEksSUFBSSxFQUFFTixnQkFBZ0I7SUFDdEJPLEtBQUtBLENBQUNDLE1BQU0sRUFBRTtNQUNaQSxNQUFNLENBQUNDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDQyxLQUFLLEVBQUVDLElBQUksS0FBSztRQUM1QyxJQUFJUixRQUFRLENBQUNDLFFBQVEsRUFBRTtVQUNyQjtVQUNBO1FBQ0Y7O1FBRUE7UUFDQUwsTUFBTSxDQUFDYSxjQUFjLENBQUMsTUFBTTtVQUMxQixJQUFJVCxRQUFRLENBQUNFLFNBQVMsRUFBRTtZQUN0QlEsT0FBTyxDQUFDQyxHQUFHLENBQUNDLElBQUksQ0FBQ1YsU0FBUyxDQUFDSyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzNDLElBQUlDLElBQUksSUFBSWxCLE1BQU0sQ0FBQ3VCLElBQUksQ0FBQ0wsSUFBSSxDQUFDLENBQUNNLE1BQU0sRUFBRTtjQUNwQ0osT0FBTyxDQUFDQyxHQUFHLENBQUNDLElBQUksQ0FBQ1YsU0FBUyxDQUFDTSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzVDO1VBQ0YsQ0FBQyxNQUFNO1lBQ0xFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSixLQUFLLENBQUM7WUFDbEIsSUFBSUMsSUFBSSxJQUFJbEIsTUFBTSxDQUFDdUIsSUFBSSxDQUFDTCxJQUFJLENBQUMsQ0FBQ00sTUFBTSxFQUFFO2NBQ3BDSixPQUFPLENBQUNDLEdBQUcsQ0FBQ0gsSUFBSSxDQUFDO1lBQ25CO1VBQ0Y7UUFDRixDQUFDLENBQUM7UUFDRjtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNTyxnQkFBZ0IsR0FBR3JCLFdBQVcsQ0FBQ3NCLGlCQUFpQixDQUFDbEIsaUJBQWlCLENBQUM7QUFFekVOLHdCQUF3QixHQUFHdUIsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2RlYnVnLmpzPzA2ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRGVidWcnO1xuXG5jb25zdCBfZGVidWdJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IF9vcHRpb25zID0ge1xuICAgIGRlYnVnZ2VyOiBmYWxzZSxcbiAgICBzdHJpbmdpZnk6IGZhbHNlLFxuICAgIC4uLm9wdGlvbnMsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgY2xpZW50Lm9uKCdiZWZvcmVTZW5kRXZlbnQnLCAoZXZlbnQsIGhpbnQpID0+IHtcbiAgICAgICAgaWYgKF9vcHRpb25zLmRlYnVnZ2VyKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyXG4gICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgICAgIGxvZ2dlci5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgICAgaWYgKF9vcHRpb25zLnN0cmluZ2lmeSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpKTtcbiAgICAgICAgICAgIGlmIChoaW50ICYmIE9iamVjdC5rZXlzKGhpbnQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShoaW50LCBudWxsLCAyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcbiAgICAgICAgICAgIGlmIChoaW50ICYmIE9iamVjdC5rZXlzKGhpbnQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhoaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogSW50ZWdyYXRpb24gdG8gZGVidWcgc2VudCBTZW50cnkgZXZlbnRzLlxuICogVGhpcyBpbnRlZ3JhdGlvbiBzaG91bGQgbm90IGJlIHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGludGVncmF0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIHRoZSBTREsuXG4gKiBUbyBsb2cgb3V0Z29pbmcgZXZlbnRzLCB1c2UgW0hvb2sgT3B0aW9uc10oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9jb25maWd1cmF0aW9uL29wdGlvbnMvI2hvb2tzKSAoYGJlZm9yZVNlbmRgLCBgYmVmb3JlU2VuZFRyYW5zYWN0aW9uYCwgLi4uKS5cbiAqL1xuY29uc3QgZGVidWdJbnRlZ3JhdGlvbiA9IGludGVncmF0aW9uLmRlZmluZUludGVncmF0aW9uKF9kZWJ1Z0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5kZWJ1Z0ludGVncmF0aW9uID0gZGVidWdJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW50ZWdyYXRpb24iLCJyZXF1aXJlIiwibG9nZ2VyIiwiSU5URUdSQVRJT05fTkFNRSIsIl9kZWJ1Z0ludGVncmF0aW9uIiwib3B0aW9ucyIsIl9vcHRpb25zIiwiZGVidWdnZXIiLCJzdHJpbmdpZnkiLCJuYW1lIiwic2V0dXAiLCJjbGllbnQiLCJvbiIsImV2ZW50IiwiaGludCIsImNvbnNvbGVTYW5kYm94IiwiY29uc29sZSIsImxvZyIsIkpTT04iLCJrZXlzIiwibGVuZ3RoIiwiZGVidWdJbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/debug.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/dedupe.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/dedupe.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst stacktrace = __webpack_require__(/*! ../utils-hoist/stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\nconst INTEGRATION_NAME = 'Dedupe';\nconst _dedupeIntegration = () => {\n  let previousEvent;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          debugBuild.DEBUG_BUILD && logger.logger.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch (_oO) {} // eslint-disable-line no-empty\n\n      return previousEvent = currentEvent;\n    }\n  };\n};\n\n/**\n * Deduplication filter.\n */\nconst dedupeIntegration = integration.defineIntegration(_dedupeIntegration);\n\n/** only exported for tests. */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  return false;\n}\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n  if (!previousException || !currentException) {\n    return false;\n  }\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  let currentFrames = stacktrace.getFramesFromEvent(currentEvent);\n  let previousFrames = stacktrace.getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n  currentFrames = currentFrames;\n  previousFrames = previousFrames;\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameA = previousFrames[i];\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameB = currentFrames[i];\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint;\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\nexports._shouldDropEvent = _shouldDropEvent;\nexports.dedupeIntegration = dedupeIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/dedupe.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst is = __webpack_require__(/*! ../utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst normalize = __webpack_require__(/*! ../utils-hoist/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst string = __webpack_require__(/*! ../utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst INTEGRATION_NAME = 'ExtraErrorData';\n\n/**\n * Extract additional data for from original exceptions.\n */\nconst _extraErrorDataIntegration = (options = {}) => {\n  const {\n    depth = 3,\n    captureErrorCause = true\n  } = options;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, hint, client) {\n      const {\n        maxValueLength = 250\n      } = client.getOptions();\n      return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause, maxValueLength);\n    }\n  };\n};\nconst extraErrorDataIntegration = integration.defineIntegration(_extraErrorDataIntegration);\nfunction _enhanceEventWithErrorData(event, hint = {}, depth, captureErrorCause, maxValueLength) {\n  if (!hint.originalException || !is.isError(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = hint.originalException.name || hint.originalException.constructor.name;\n  const errorData = _extractErrorData(hint.originalException, captureErrorCause, maxValueLength);\n  if (errorData) {\n    const contexts = {\n      ...event.contexts\n    };\n    const normalizedErrorData = normalize.normalize(errorData, depth);\n    if (is.isPlainObject(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      object.addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n    return {\n      ...event,\n      contexts\n    };\n  }\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(error, captureErrorCause, maxValueLength) {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber', 'toJSON'];\n    const extraErrorInfo = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = is.isError(value) || typeof value === 'string' ? string.truncate(`${value}`, maxValueLength) : value;\n    }\n\n    // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n    if (captureErrorCause && error.cause !== undefined) {\n      extraErrorInfo.cause = is.isError(error.cause) ? error.cause.toString() : error.cause;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON();\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = is.isError(value) ? value.toString() : value;\n      }\n    }\n    return extraErrorInfo;\n  } catch (oO) {\n    debugBuild.DEBUG_BUILD && logger.logger.error('Unable to extract extra data from the Error object:', oO);\n  }\n  return null;\n}\nexports.extraErrorDataIntegration = extraErrorDataIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nlet originalFunctionToString;\nconst INTEGRATION_NAME = 'FunctionToString';\nconst SETUP_CLIENTS = new WeakMap();\nconst _functionToStringIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        Function.prototype.toString = function (...args) {\n          const originalFunction = object.getOriginalFunction(this);\n          const context = SETUP_CLIENTS.has(currentScopes.getClient()) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch (e) {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    }\n  };\n};\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nconst functionToStringIntegration = integration.defineIntegration(_functionToStringIntegration);\nexports.functionToStringIntegration = functionToStringIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2Z1bmN0aW9udG9zdHJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsZ0dBQXFCLENBQUM7QUFDcEQsTUFBTUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLDRGQUFtQixDQUFDO0FBQ2hELE1BQU1FLE1BQU0sR0FBR0YsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUVsRCxJQUFJRyx3QkFBd0I7QUFFNUIsTUFBTUMsZ0JBQWdCLEdBQUcsa0JBQWtCO0FBRTNDLE1BQU1DLGFBQWEsR0FBRyxJQUFJQyxPQUFPLENBQUMsQ0FBQztBQUVuQyxNQUFNQyw0QkFBNEIsR0FBSUEsQ0FBQSxLQUFNO0VBQzFDLE9BQU87SUFDTEMsSUFBSSxFQUFFSixnQkFBZ0I7SUFDdEJLLFNBQVNBLENBQUEsRUFBRztNQUNWO01BQ0FOLHdCQUF3QixHQUFHTyxRQUFRLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUTs7TUFFdEQ7TUFDQTtNQUNBLElBQUk7UUFDRkYsUUFBUSxDQUFDQyxTQUFTLENBQUNDLFFBQVEsR0FBRyxVQUFXLEdBQUdDLElBQUksRUFBRTtVQUNoRCxNQUFNQyxnQkFBZ0IsR0FBR1osTUFBTSxDQUFDYSxtQkFBbUIsQ0FBQyxJQUFJLENBQUM7VUFDekQsTUFBTUMsT0FBTyxHQUNYWCxhQUFhLENBQUNZLEdBQUcsQ0FBQ2xCLGFBQWEsQ0FBQ21CLFNBQVMsQ0FBQyxDQUFFLENBQUMsSUFBSUosZ0JBQWdCLEtBQUtLLFNBQVMsR0FBR0wsZ0JBQWdCLEdBQUcsSUFBSTtVQUMzRyxPQUFPWCx3QkFBd0IsQ0FBQ2lCLEtBQUssQ0FBQ0osT0FBTyxFQUFFSCxJQUFJLENBQUM7UUFDdEQsQ0FBQztNQUNILENBQUMsQ0FBQyxPQUFPUSxDQUFDLEVBQUU7UUFDVjtNQUFBO0lBRUosQ0FBQztJQUNEQyxLQUFLQSxDQUFDQyxNQUFNLEVBQUU7TUFDWmxCLGFBQWEsQ0FBQ21CLEdBQUcsQ0FBQ0QsTUFBTSxFQUFFLElBQUksQ0FBQztJQUNqQztFQUNGLENBQUM7QUFDSCxDQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNRSwyQkFBMkIsR0FBR3hCLFdBQVcsQ0FBQ3lCLGlCQUFpQixDQUFDbkIsNEJBQTRCLENBQUM7QUFFL0ZWLG1DQUFtQyxHQUFHNEIsMkJBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2Z1bmN0aW9udG9zdHJpbmcuanM/MWNiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3Qgb2JqZWN0ID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3Qvb2JqZWN0LmpzJyk7XG5cbmxldCBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmc7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRnVuY3Rpb25Ub1N0cmluZyc7XG5cbmNvbnN0IFNFVFVQX0NMSUVOVFMgPSBuZXcgV2Vha01hcCgpO1xuXG5jb25zdCBfZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICAgIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcblxuICAgICAgLy8gaW50cmluc2ljcyAobGlrZSBGdW5jdGlvbi5wcm90b3R5cGUpIG1pZ2h0IGJlIGltbXV0YWJsZSBpbiBzb21lIGVudmlyb25tZW50c1xuICAgICAgLy8gZS5nLiBOb2RlIHdpdGggLS1mcm96ZW4taW50cmluc2ljcywgWFMgKGFuIGVtYmVkZGVkIEphdmFTY3JpcHQgZW5naW5lKSBvciBTRVMgKGEgSmF2YVNjcmlwdCBwcm9wb3NhbClcbiAgICAgIHRyeSB7XG4gICAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICggLi4uYXJncykge1xuICAgICAgICAgIGNvbnN0IG9yaWdpbmFsRnVuY3Rpb24gPSBvYmplY3QuZ2V0T3JpZ2luYWxGdW5jdGlvbih0aGlzKTtcbiAgICAgICAgICBjb25zdCBjb250ZXh0ID1cbiAgICAgICAgICAgIFNFVFVQX0NMSUVOVFMuaGFzKGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCkgKSAmJiBvcmlnaW5hbEZ1bmN0aW9uICE9PSB1bmRlZmluZWQgPyBvcmlnaW5hbEZ1bmN0aW9uIDogdGhpcztcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGhlcmUsIGp1c3QgZG9uJ3QgcGF0Y2ggdGhpc1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBTRVRVUF9DTElFTlRTLnNldChjbGllbnQsIHRydWUpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogUGF0Y2ggdG9TdHJpbmcgY2FsbHMgdG8gcmV0dXJuIHByb3BlciBuYW1lIGZvciB3cmFwcGVkIGZ1bmN0aW9ucy5cbiAqXG4gKiBgYGBqc1xuICogU2VudHJ5LmluaXQoe1xuICogICBpbnRlZ3JhdGlvbnM6IFtcbiAqICAgICBmdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24oKSxcbiAqICAgXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiA9IGludGVncmF0aW9uLmRlZmluZUludGVncmF0aW9uKF9mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiA9IGZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9udG9zdHJpbmcuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjdXJyZW50U2NvcGVzIiwicmVxdWlyZSIsImludGVncmF0aW9uIiwib2JqZWN0Iiwib3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nIiwiSU5URUdSQVRJT05fTkFNRSIsIlNFVFVQX0NMSUVOVFMiLCJXZWFrTWFwIiwiX2Z1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiIsIm5hbWUiLCJzZXR1cE9uY2UiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiYXJncyIsIm9yaWdpbmFsRnVuY3Rpb24iLCJnZXRPcmlnaW5hbEZ1bmN0aW9uIiwiY29udGV4dCIsImhhcyIsImdldENsaWVudCIsInVuZGVmaW5lZCIsImFwcGx5IiwiZSIsInNldHVwIiwiY2xpZW50Iiwic2V0IiwiZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst misc = __webpack_require__(/*! ../utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst string = __webpack_require__(/*! ../utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/, /^ResizeObserver loop completed with undelivered notifications.$/,\n// The browser logs this when a ResizeObserver handler takes a bit longer. Usually this is not an actual issue though. It indicates slowness.\n/^Cannot redefine property: googletag$/,\n// This is thrown when google tag manager is used in combination with an ad blocker\n\"undefined is not an object (evaluating 'a.L')\",\n// Random error that happens but not actionable or noticeable to end-users.\n'can\\'t redefine non-configurable property \"solana\"',\n// Probably a browser extension or custom browser (Brave) throwing this error\n\"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\",\n// Error thrown by GTM, seemingly not affecting end-users\n\"Can't find variable: _AutofillCallbackHandler\",\n// Unactionable error in instagram webview https://developers.facebook.com/community/threads/320013549791141/\n/^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/ // unactionable error from CEFSharp, a .NET library that embeds chromium in .NET apps\n];\n\n/** Options for the InboundFilters integration */\n\nconst INTEGRATION_NAME = 'InboundFilters';\nconst _inboundFiltersIntegration = (options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const clientOptions = client.getOptions();\n      const mergedOptions = _mergeOptions(options, clientOptions);\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    }\n  };\n};\nconst inboundFiltersIntegration = integration.defineIntegration(_inboundFiltersIntegration);\nfunction _mergeOptions(internalOptions = {}, clientOptions = {}) {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [...(internalOptions.ignoreErrors || []), ...(clientOptions.ignoreErrors || []), ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS)],\n    ignoreTransactions: [...(internalOptions.ignoreTransactions || []), ...(clientOptions.ignoreTransactions || [])],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true\n  };\n}\nfunction _shouldDropEvent(event, options) {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${misc.getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${misc.getEventDescription(event)}`);\n    return true;\n  }\n  if (_isUselessError(event)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${misc.getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${misc.getEventDescription(event)}`);\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${misc.getEventDescription(event)}.\\nUrl: ${_getEventFilterUrl(event)}`);\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${misc.getEventDescription(event)}.\\nUrl: ${_getEventFilterUrl(event)}`);\n    return true;\n  }\n  return false;\n}\nfunction _isIgnoredError(event, ignoreErrors) {\n  // If event.type, this is not an error\n  if (event.type || !ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n  return _getPossibleEventMessages(event).some(message => string.stringMatchesSomePattern(message, ignoreErrors));\n}\nfunction _isIgnoredTransaction(event, ignoreTransactions) {\n  if (event.type !== 'transaction' || !ignoreTransactions || !ignoreTransactions.length) {\n    return false;\n  }\n  const name = event.transaction;\n  return name ? string.stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\nfunction _isDeniedUrl(event, denyUrls) {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : string.stringMatchesSomePattern(url, denyUrls);\n}\nfunction _isAllowedUrl(event, allowUrls) {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : string.stringMatchesSomePattern(url, allowUrls);\n}\nfunction _getPossibleEventMessages(event) {\n  const possibleMessages = [];\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n  let lastException;\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    lastException = event.exception.values[event.exception.values.length - 1];\n  } catch (e) {\n    // try catching to save bundle size checking existence of variables\n  }\n  if (lastException) {\n    if (lastException.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  }\n  return possibleMessages;\n}\nfunction _isSentryError(event) {\n  try {\n    // @ts-expect-error can't be a sentry error if undefined\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\nfunction _getLastValidUrl(frames = []) {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n  return null;\n}\nfunction _getEventFilterUrl(event) {\n  try {\n    let frames;\n    try {\n      // @ts-expect-error we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    debugBuild.DEBUG_BUILD && logger.logger.error(`Cannot extract url for event ${misc.getEventDescription(event)}`);\n    return null;\n  }\n}\nfunction _isUselessError(event) {\n  if (event.type) {\n    // event is not an error\n    return false;\n  }\n\n  // We only want to consider events for dropping that actually have recorded exception values.\n  if (!event.exception || !event.exception.values || event.exception.values.length === 0) {\n    return false;\n  }\n  return (\n    // No top-level message\n    !event.message &&\n    // There are no exception values that have a stacktrace, a non-generic-Error type or value\n    !event.exception.values.some(value => value.stacktrace || value.type && value.type !== 'Error' || value.value)\n  );\n}\nexports.inboundFiltersIntegration = inboundFiltersIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst aggregateErrors = __webpack_require__(/*! ../utils-hoist/aggregate-errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js\");\nconst eventbuilder = __webpack_require__(/*! ../utils-hoist/eventbuilder.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js\");\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\nconst INTEGRATION_NAME = 'LinkedErrors';\nconst _linkedErrorsIntegration = (options = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n      aggregateErrors.applyAggregateErrorsToEvent(eventbuilder.exceptionFromError, options.stackParser, options.maxValueLength, key, limit, event, hint);\n    }\n  };\n};\nconst linkedErrorsIntegration = integration.defineIntegration(_linkedErrorsIntegration);\nexports.linkedErrorsIntegration = linkedErrorsIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xpbmtlZGVycm9ycy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyw0RkFBbUIsQ0FBQztBQUNoRCxNQUFNQyxlQUFlLEdBQUdELG1CQUFPLENBQUMsOEhBQW9DLENBQUM7QUFDckUsTUFBTUUsWUFBWSxHQUFHRixtQkFBTyxDQUFDLHNIQUFnQyxDQUFDO0FBRTlELE1BQU1HLFdBQVcsR0FBRyxPQUFPO0FBQzNCLE1BQU1DLGFBQWEsR0FBRyxDQUFDO0FBRXZCLE1BQU1DLGdCQUFnQixHQUFHLGNBQWM7QUFFdkMsTUFBTUMsd0JBQXdCLEdBQUlBLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSztFQUNsRCxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQ0MsS0FBSyxJQUFJSixhQUFhO0VBQzVDLE1BQU1LLEdBQUcsR0FBR0YsT0FBTyxDQUFDRSxHQUFHLElBQUlOLFdBQVc7RUFFdEMsT0FBTztJQUNMTyxJQUFJLEVBQUVMLGdCQUFnQjtJQUN0Qk0sZUFBZUEsQ0FBQ0MsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtNQUNuQyxNQUFNUCxPQUFPLEdBQUdPLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLENBQUM7TUFFbkNkLGVBQWUsQ0FBQ2UsMkJBQTJCLENBQ3pDZCxZQUFZLENBQUNlLGtCQUFrQixFQUMvQlYsT0FBTyxDQUFDVyxXQUFXLEVBQ25CWCxPQUFPLENBQUNZLGNBQWMsRUFDdEJWLEdBQUcsRUFDSEQsS0FBSyxFQUNMSSxLQUFLLEVBQ0xDLElBQ0YsQ0FBQztJQUNIO0VBQ0YsQ0FBQztBQUNILENBQUU7QUFFRixNQUFNTyx1QkFBdUIsR0FBR3JCLFdBQVcsQ0FBQ3NCLGlCQUFpQixDQUFDZix3QkFBd0IsQ0FBQztBQUV2RlQsK0JBQStCLEdBQUd1Qix1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbGlua2VkZXJyb3JzLmpzPzA5ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgYWdncmVnYXRlRXJyb3JzID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvYWdncmVnYXRlLWVycm9ycy5qcycpO1xuY29uc3QgZXZlbnRidWlsZGVyID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvZXZlbnRidWlsZGVyLmpzJyk7XG5cbmNvbnN0IERFRkFVTFRfS0VZID0gJ2NhdXNlJztcbmNvbnN0IERFRkFVTFRfTElNSVQgPSA1O1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0xpbmtlZEVycm9ycyc7XG5cbmNvbnN0IF9saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IGxpbWl0ID0gb3B0aW9ucy5saW1pdCB8fCBERUZBVUxUX0xJTUlUO1xuICBjb25zdCBrZXkgPSBvcHRpb25zLmtleSB8fCBERUZBVUxUX0tFWTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgcHJlcHJvY2Vzc0V2ZW50KGV2ZW50LCBoaW50LCBjbGllbnQpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuXG4gICAgICBhZ2dyZWdhdGVFcnJvcnMuYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50KFxuICAgICAgICBldmVudGJ1aWxkZXIuZXhjZXB0aW9uRnJvbUVycm9yLFxuICAgICAgICBvcHRpb25zLnN0YWNrUGFyc2VyLFxuICAgICAgICBvcHRpb25zLm1heFZhbHVlTGVuZ3RoLFxuICAgICAgICBrZXksXG4gICAgICAgIGxpbWl0LFxuICAgICAgICBldmVudCxcbiAgICAgICAgaGludCxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuY29uc3QgbGlua2VkRXJyb3JzSW50ZWdyYXRpb24gPSBpbnRlZ3JhdGlvbi5kZWZpbmVJbnRlZ3JhdGlvbihfbGlua2VkRXJyb3JzSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmxpbmtlZEVycm9yc0ludGVncmF0aW9uID0gbGlua2VkRXJyb3JzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW5rZWRlcnJvcnMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnRlZ3JhdGlvbiIsInJlcXVpcmUiLCJhZ2dyZWdhdGVFcnJvcnMiLCJldmVudGJ1aWxkZXIiLCJERUZBVUxUX0tFWSIsIkRFRkFVTFRfTElNSVQiLCJJTlRFR1JBVElPTl9OQU1FIiwiX2xpbmtlZEVycm9yc0ludGVncmF0aW9uIiwib3B0aW9ucyIsImxpbWl0Iiwia2V5IiwibmFtZSIsInByZXByb2Nlc3NFdmVudCIsImV2ZW50IiwiaGludCIsImNsaWVudCIsImdldE9wdGlvbnMiLCJhcHBseUFnZ3JlZ2F0ZUVycm9yc1RvRXZlbnQiLCJleGNlcHRpb25Gcm9tRXJyb3IiLCJzdGFja1BhcnNlciIsIm1heFZhbHVlTGVuZ3RoIiwibGlua2VkRXJyb3JzSW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/metadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/metadata.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst metadata = __webpack_require__(/*! ../metadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\n\n/**\n * Adds module metadata to stack frames.\n *\n * Metadata can be injected by the Sentry bundler plugins using the `moduleMetadata` config option.\n *\n * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events\n * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams\n * our sources\n */\nconst moduleMetadataIntegration = integration.defineIntegration(() => {\n  return {\n    name: 'ModuleMetadata',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      client.on('beforeEnvelope', envelope$1 => {\n        envelope.forEachEnvelopeItem(envelope$1, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? item[1] : undefined;\n            if (event) {\n              metadata.stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n        const stackParser = client.getOptions().stackParser;\n        metadata.addMetadataToStackFrames(stackParser, event);\n      });\n    }\n  };\n});\nexports.moduleMetadataIntegration = moduleMetadataIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21ldGFkYXRhLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsV0FBVyxHQUFHQyxtQkFBTyxDQUFDLDRGQUFtQixDQUFDO0FBQ2hELE1BQU1DLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyxzRkFBZ0IsQ0FBQztBQUMxQyxNQUFNRSxRQUFRLEdBQUdGLG1CQUFPLENBQUMsOEdBQTRCLENBQUM7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1HLHlCQUF5QixHQUFHSixXQUFXLENBQUNLLGlCQUFpQixDQUFDLE1BQU07RUFDcEUsT0FBTztJQUNMQyxJQUFJLEVBQUUsZ0JBQWdCO0lBQ3RCQyxLQUFLQSxDQUFDQyxNQUFNLEVBQUU7TUFDWjtNQUNBQSxNQUFNLENBQUNDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRUMsVUFBVSxJQUFJO1FBQ3hDUCxRQUFRLENBQUNRLG1CQUFtQixDQUFDRCxVQUFVLEVBQUUsQ0FBQ0UsSUFBSSxFQUFFQyxJQUFJLEtBQUs7VUFDdkQsSUFBSUEsSUFBSSxLQUFLLE9BQU8sRUFBRTtZQUNwQixNQUFNQyxLQUFLLEdBQUdDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSixJQUFJLENBQUMsR0FBSUEsSUFBSSxDQUFHLENBQUMsQ0FBQyxHQUFHSyxTQUFTO1lBRTFELElBQUlILEtBQUssRUFBRTtjQUNUWixRQUFRLENBQUNnQiw0QkFBNEIsQ0FBQ0osS0FBSyxDQUFDO2NBQzVDRixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUdFLEtBQUs7WUFDakI7VUFDRjtRQUNGLENBQUMsQ0FBQztNQUNKLENBQUMsQ0FBQztNQUVGTixNQUFNLENBQUNDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRUssS0FBSyxJQUFJO1FBQ3ZDO1FBQ0EsSUFBSUEsS0FBSyxDQUFDRCxJQUFJLEVBQUU7VUFDZDtRQUNGO1FBRUEsTUFBTU0sV0FBVyxHQUFHWCxNQUFNLENBQUNZLFVBQVUsQ0FBQyxDQUFDLENBQUNELFdBQVc7UUFDbkRqQixRQUFRLENBQUNtQix3QkFBd0IsQ0FBQ0YsV0FBVyxFQUFFTCxLQUFLLENBQUM7TUFDdkQsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUZoQixpQ0FBaUMsR0FBR00seUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21ldGFkYXRhLmpzP2YwOWYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW50ZWdyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgbWV0YWRhdGEgPSByZXF1aXJlKCcuLi9tZXRhZGF0YS5qcycpO1xuY29uc3QgZW52ZWxvcGUgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9lbnZlbG9wZS5qcycpO1xuXG4vKipcbiAqIEFkZHMgbW9kdWxlIG1ldGFkYXRhIHRvIHN0YWNrIGZyYW1lcy5cbiAqXG4gKiBNZXRhZGF0YSBjYW4gYmUgaW5qZWN0ZWQgYnkgdGhlIFNlbnRyeSBidW5kbGVyIHBsdWdpbnMgdXNpbmcgdGhlIGBtb2R1bGVNZXRhZGF0YWAgY29uZmlnIG9wdGlvbi5cbiAqXG4gKiBXaGVuIHRoaXMgaW50ZWdyYXRpb24gaXMgYWRkZWQsIHRoZSBtZXRhZGF0YSBwYXNzZWQgdG8gdGhlIGJ1bmRsZXIgcGx1Z2luIGlzIGFkZGVkIHRvIHRoZSBzdGFjayBmcmFtZXMgb2YgYWxsIGV2ZW50c1xuICogdW5kZXIgdGhlIGBtb2R1bGVfbWV0YWRhdGFgIHByb3BlcnR5LiBUaGlzIGNhbiBiZSB1c2VkIHRvIGhlbHAgaW4gdGFnZ2luZyBvciByb3V0aW5nIG9mIGV2ZW50cyBmcm9tIGRpZmZlcmVudCB0ZWFtc1xuICogb3VyIHNvdXJjZXNcbiAqL1xuY29uc3QgbW9kdWxlTWV0YWRhdGFJbnRlZ3JhdGlvbiA9IGludGVncmF0aW9uLmRlZmluZUludGVncmF0aW9uKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnTW9kdWxlTWV0YWRhdGEnLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgLy8gV2UgbmVlZCB0byBzdHJpcCBtZXRhZGF0YSBmcm9tIHN0YWNrIGZyYW1lcyBiZWZvcmUgc2VuZGluZyB0aGVtIHRvIFNlbnRyeSBzaW5jZSB0aGVzZSBhcmUgY2xpZW50IHNpZGUgb25seS5cbiAgICAgIGNsaWVudC5vbignYmVmb3JlRW52ZWxvcGUnLCBlbnZlbG9wZSQxID0+IHtcbiAgICAgICAgZW52ZWxvcGUuZm9yRWFjaEVudmVsb3BlSXRlbShlbnZlbG9wZSQxLCAoaXRlbSwgdHlwZSkgPT4ge1xuICAgICAgICAgIGlmICh0eXBlID09PSAnZXZlbnQnKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IEFycmF5LmlzQXJyYXkoaXRlbSkgPyAoaXRlbSApWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgbWV0YWRhdGEuc3RyaXBNZXRhZGF0YUZyb21TdGFja0ZyYW1lcyhldmVudCk7XG4gICAgICAgICAgICAgIGl0ZW1bMV0gPSBldmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGNsaWVudC5vbignYXBwbHlGcmFtZU1ldGFkYXRhJywgZXZlbnQgPT4ge1xuICAgICAgICAvLyBPbmx5IGFwcGx5IHN0YWNrIGZyYW1lIG1ldGFkYXRhIHRvIGVycm9yIGV2ZW50c1xuICAgICAgICBpZiAoZXZlbnQudHlwZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YWNrUGFyc2VyID0gY2xpZW50LmdldE9wdGlvbnMoKS5zdGFja1BhcnNlcjtcbiAgICAgICAgbWV0YWRhdGEuYWRkTWV0YWRhdGFUb1N0YWNrRnJhbWVzKHN0YWNrUGFyc2VyLCBldmVudCk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSk7XG5cbmV4cG9ydHMubW9kdWxlTWV0YWRhdGFJbnRlZ3JhdGlvbiA9IG1vZHVsZU1ldGFkYXRhSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhZGF0YS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImludGVncmF0aW9uIiwicmVxdWlyZSIsIm1ldGFkYXRhIiwiZW52ZWxvcGUiLCJtb2R1bGVNZXRhZGF0YUludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iLCJuYW1lIiwic2V0dXAiLCJjbGllbnQiLCJvbiIsImVudmVsb3BlJDEiLCJmb3JFYWNoRW52ZWxvcGVJdGVtIiwiaXRlbSIsInR5cGUiLCJldmVudCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsInN0cmlwTWV0YWRhdGFGcm9tU3RhY2tGcmFtZXMiLCJzdGFja1BhcnNlciIsImdldE9wdGlvbnMiLCJhZGRNZXRhZGF0YVRvU3RhY2tGcmFtZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/metadata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/requestdata.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/requestdata.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst requestdata = __webpack_require__(/*! ../utils-hoist/requestdata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js\");\nconst DEFAULT_OPTIONS = {\n  include: {\n    cookies: true,\n    data: true,\n    headers: true,\n    ip: false,\n    query_string: true,\n    url: true,\n    user: {\n      id: true,\n      username: true,\n      email: true\n    }\n  },\n  transactionNamingScheme: 'methodPath'\n};\nconst INTEGRATION_NAME = 'RequestData';\nconst _requestDataIntegration = (options = {}) => {\n  const _options = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n    include: {\n      ...DEFAULT_OPTIONS.include,\n      ...options.include,\n      user: options.include && typeof options.include.user === 'boolean' ? options.include.user : {\n        ...DEFAULT_OPTIONS.include.user,\n        // Unclear why TS still thinks `options.include.user` could be a boolean at this point\n        ...(options.include || {}).user\n      }\n    }\n  };\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      // Note: In the long run, most of the logic here should probably move into the request data utility functions. For\n      // the moment it lives here, though, until https://github.com/getsentry/sentry-javascript/issues/5718 is addressed.\n      // (TL;DR: Those functions touch many parts of the repo in many different ways, and need to be cleaned up. Once\n      // that's happened, it will be easier to add this logic in without worrying about unexpected side effects.)\n\n      const {\n        sdkProcessingMetadata = {}\n      } = event;\n      const {\n        request,\n        normalizedRequest\n      } = sdkProcessingMetadata;\n      const addRequestDataOptions = convertReqDataIntegrationOptsToAddReqDataOpts(_options);\n\n      // If this is set, it takes precedence over the plain request object\n      if (normalizedRequest) {\n        // Some other data is not available in standard HTTP requests, but can sometimes be augmented by e.g. Express or Next.js\n        const ipAddress = request ? request.ip || request.socket && request.socket.remoteAddress : undefined;\n        const user = request ? request.user : undefined;\n        requestdata.addNormalizedRequestDataToEvent(event, normalizedRequest, {\n          ipAddress,\n          user\n        }, addRequestDataOptions);\n        return event;\n      }\n\n      // TODO(v9): Eventually we can remove this fallback branch and only rely on the normalizedRequest above\n      if (!request) {\n        return event;\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      return requestdata.addRequestDataToEvent(event, request, addRequestDataOptions);\n    }\n  };\n};\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nconst requestDataIntegration = integration.defineIntegration(_requestDataIntegration);\n\n/** Convert this integration's options to match what `addRequestDataToEvent` expects */\n/** TODO: Can possibly be deleted once https://github.com/getsentry/sentry-javascript/issues/5718 is fixed */\nfunction convertReqDataIntegrationOptsToAddReqDataOpts(integrationOptions) {\n  const {\n    // eslint-disable-next-line deprecation/deprecation\n    transactionNamingScheme,\n    include: {\n      ip,\n      user,\n      ...requestOptions\n    }\n  } = integrationOptions;\n  const requestIncludeKeys = ['method'];\n  for (const [key, value] of Object.entries(requestOptions)) {\n    if (value) {\n      requestIncludeKeys.push(key);\n    }\n  }\n  let addReqDataUserOpt;\n  if (user === undefined) {\n    addReqDataUserOpt = true;\n  } else if (typeof user === 'boolean') {\n    addReqDataUserOpt = user;\n  } else {\n    const userIncludeKeys = [];\n    for (const [key, value] of Object.entries(user)) {\n      if (value) {\n        userIncludeKeys.push(key);\n      }\n    }\n    addReqDataUserOpt = userIncludeKeys;\n  }\n  return {\n    include: {\n      ip,\n      user: addReqDataUserOpt,\n      request: requestIncludeKeys.length !== 0 ? requestIncludeKeys : undefined,\n      transaction: transactionNamingScheme\n    }\n  };\n}\nexports.requestDataIntegration = requestDataIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/requestdata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst path = __webpack_require__(/*! ../utils-hoist/path.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/path.js\");\nconst worldwide = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst INTEGRATION_NAME = 'RewriteFrames';\n\n/**\n * Rewrite event frames paths.\n */\nconst rewriteFramesIntegration = integration.defineIntegration((options = {}) => {\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n  const isBrowser = 'window' in worldwide.GLOBAL_OBJ && worldwide.GLOBAL_OBJ.window !== undefined;\n  const iteratee = options.iteratee || generateIteratee({\n    isBrowser,\n    root,\n    prefix\n  });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event) {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception.values.map(value => ({\n            ...value,\n            ...(value.stacktrace && {\n              stacktrace: _processStacktrace(value.stacktrace)\n            })\n          }))\n        }\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace) {\n    return {\n      ...stacktrace,\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(f => iteratee(f))\n    };\n  }\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n      return processedEvent;\n    }\n  };\n});\n\n/**\n * Exported only for tests.\n */\nfunction generateIteratee({\n  isBrowser,\n  root,\n  prefix\n}) {\n  return frame => {\n    if (!frame.filename) {\n      return frame;\n    }\n\n    // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n    const isWindowsFrame = /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n    // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n    frame.filename.includes('\\\\') && !frame.filename.includes('/');\n\n    // Check if the frame filename begins with `/`\n    const startsWithSlash = /^\\//.test(frame.filename);\n    if (isBrowser) {\n      if (root) {\n        const oldFilename = frame.filename;\n        if (oldFilename.indexOf(root) === 0) {\n          frame.filename = oldFilename.replace(root, prefix);\n        }\n      }\n    } else {\n      if (isWindowsFrame || startsWithSlash) {\n        const filename = isWindowsFrame ? frame.filename.replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n        .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n        const base = root ? path.relative(root, filename) : path.basename(filename);\n        frame.filename = `${prefix}${base}`;\n      }\n    }\n    return frame;\n  };\n}\nexports.generateIteratee = generateIteratee;\nexports.rewriteFramesIntegration = rewriteFramesIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst INTEGRATION_NAME = 'SessionTiming';\nconst _sessionTimingIntegration = () => {\n  const startTime = time.timestampInSeconds() * 1000;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      const now = time.timestampInSeconds() * 1000;\n      return {\n        ...event,\n        extra: {\n          ...event.extra,\n          ['session:start']: startTime,\n          ['session:duration']: now - startTime,\n          ['session:end']: now\n        }\n      };\n    }\n  };\n};\n\n/**\n * This function adds duration since the sessionTimingIntegration was initialized\n * till the time event was sent.\n *\n * @deprecated This integration is deprecated and will be removed in the next major version of the SDK.\n * To capture session durations alongside events, use [Context](https://docs.sentry.io/platforms/javascript/enriching-events/context/) (`Sentry.setContext()`).\n */\nconst sessionTimingIntegration = integration.defineIntegration(_sessionTimingIntegration);\nexports.sessionTimingIntegration = sessionTimingIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Nlc3Npb250aW1pbmcuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxXQUFXLEdBQUdDLG1CQUFPLENBQUMsNEZBQW1CLENBQUM7QUFDaEQsTUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLHNHQUF3QixDQUFDO0FBRTlDLE1BQU1FLGdCQUFnQixHQUFHLGVBQWU7QUFFeEMsTUFBTUMseUJBQXlCLEdBQUlBLENBQUEsS0FBTTtFQUN2QyxNQUFNQyxTQUFTLEdBQUdILElBQUksQ0FBQ0ksa0JBQWtCLENBQUMsQ0FBQyxHQUFHLElBQUk7RUFFbEQsT0FBTztJQUNMQyxJQUFJLEVBQUVKLGdCQUFnQjtJQUN0QkssWUFBWUEsQ0FBQ0MsS0FBSyxFQUFFO01BQ2xCLE1BQU1DLEdBQUcsR0FBR1IsSUFBSSxDQUFDSSxrQkFBa0IsQ0FBQyxDQUFDLEdBQUcsSUFBSTtNQUU1QyxPQUFPO1FBQ0wsR0FBR0csS0FBSztRQUNSRSxLQUFLLEVBQUU7VUFDTCxHQUFHRixLQUFLLENBQUNFLEtBQUs7VUFDZCxDQUFDLGVBQWUsR0FBR04sU0FBUztVQUM1QixDQUFDLGtCQUFrQixHQUFHSyxHQUFHLEdBQUdMLFNBQVM7VUFDckMsQ0FBQyxhQUFhLEdBQUdLO1FBQ25CO01BQ0YsQ0FBQztJQUNIO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNRSx3QkFBd0IsR0FBR1osV0FBVyxDQUFDYSxpQkFBaUIsQ0FBQ1QseUJBQXlCLENBQUM7QUFFekZOLGdDQUFnQyxHQUFHYyx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvc2Vzc2lvbnRpbWluZy5qcz8zYTcwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24uanMnKTtcbmNvbnN0IHRpbWUgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC90aW1lLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnU2Vzc2lvblRpbWluZyc7XG5cbmNvbnN0IF9zZXNzaW9uVGltaW5nSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICBjb25zdCBzdGFydFRpbWUgPSB0aW1lLnRpbWVzdGFtcEluU2Vjb25kcygpICogMTAwMDtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgcHJvY2Vzc0V2ZW50KGV2ZW50KSB7XG4gICAgICBjb25zdCBub3cgPSB0aW1lLnRpbWVzdGFtcEluU2Vjb25kcygpICogMTAwMDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZXZlbnQsXG4gICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgLi4uZXZlbnQuZXh0cmEsXG4gICAgICAgICAgWydzZXNzaW9uOnN0YXJ0J106IHN0YXJ0VGltZSxcbiAgICAgICAgICBbJ3Nlc3Npb246ZHVyYXRpb24nXTogbm93IC0gc3RhcnRUaW1lLFxuICAgICAgICAgIFsnc2Vzc2lvbjplbmQnXTogbm93LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWRkcyBkdXJhdGlvbiBzaW5jZSB0aGUgc2Vzc2lvblRpbWluZ0ludGVncmF0aW9uIHdhcyBpbml0aWFsaXplZFxuICogdGlsbCB0aGUgdGltZSBldmVudCB3YXMgc2VudC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGludGVncmF0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIHRoZSBTREsuXG4gKiBUbyBjYXB0dXJlIHNlc3Npb24gZHVyYXRpb25zIGFsb25nc2lkZSBldmVudHMsIHVzZSBbQ29udGV4dF0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9lbnJpY2hpbmctZXZlbnRzL2NvbnRleHQvKSAoYFNlbnRyeS5zZXRDb250ZXh0KClgKS5cbiAqL1xuY29uc3Qgc2Vzc2lvblRpbWluZ0ludGVncmF0aW9uID0gaW50ZWdyYXRpb24uZGVmaW5lSW50ZWdyYXRpb24oX3Nlc3Npb25UaW1pbmdJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuc2Vzc2lvblRpbWluZ0ludGVncmF0aW9uID0gc2Vzc2lvblRpbWluZ0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2Vzc2lvbnRpbWluZy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImludGVncmF0aW9uIiwicmVxdWlyZSIsInRpbWUiLCJJTlRFR1JBVElPTl9OQU1FIiwiX3Nlc3Npb25UaW1pbmdJbnRlZ3JhdGlvbiIsInN0YXJ0VGltZSIsInRpbWVzdGFtcEluU2Vjb25kcyIsIm5hbWUiLCJwcm9jZXNzRXZlbnQiLCJldmVudCIsIm5vdyIsImV4dHJhIiwic2Vzc2lvblRpbWluZ0ludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst metadata = __webpack_require__(/*! ../metadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst stacktrace = __webpack_require__(/*! ../utils-hoist/stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\n\n/**\n * This integration allows you to filter out, or tag error events that do not come from user code marked with a bundle key via the Sentry bundler plugins.\n */\nconst thirdPartyErrorFilterIntegration = integration.defineIntegration(options => {\n  return {\n    name: 'ThirdPartyErrorsFilter',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      // TODO(lforst): Move this cleanup logic into a more central place in the SDK.\n      client.on('beforeEnvelope', envelope$1 => {\n        envelope.forEachEnvelopeItem(envelope$1, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? item[1] : undefined;\n            if (event) {\n              metadata.stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n        const stackParser = client.getOptions().stackParser;\n        metadata.addMetadataToStackFrames(stackParser, event);\n      });\n    },\n    processEvent(event) {\n      const frameKeys = getBundleKeysForAllFramesWithFilenames(event);\n      if (frameKeys) {\n        const arrayMethod = options.behaviour === 'drop-error-if-contains-third-party-frames' || options.behaviour === 'apply-tag-if-contains-third-party-frames' ? 'some' : 'every';\n        const behaviourApplies = frameKeys[arrayMethod](keys => !keys.some(key => options.filterKeys.includes(key)));\n        if (behaviourApplies) {\n          const shouldDrop = options.behaviour === 'drop-error-if-contains-third-party-frames' || options.behaviour === 'drop-error-if-exclusively-contains-third-party-frames';\n          if (shouldDrop) {\n            return null;\n          } else {\n            event.tags = {\n              ...event.tags,\n              third_party_code: true\n            };\n          }\n        }\n      }\n      return event;\n    }\n  };\n});\nfunction getBundleKeysForAllFramesWithFilenames(event) {\n  const frames = stacktrace.getFramesFromEvent(event);\n  if (!frames) {\n    return undefined;\n  }\n  return frames\n  // Exclude frames without a filename since these are likely native code or built-ins\n  .filter(frame => !!frame.filename).map(frame => {\n    if (frame.module_metadata) {\n      return Object.keys(frame.module_metadata).filter(key => key.startsWith(BUNDLER_PLUGIN_APP_KEY_PREFIX)).map(key => key.slice(BUNDLER_PLUGIN_APP_KEY_PREFIX.length));\n    }\n    return [];\n  });\n}\nconst BUNDLER_PLUGIN_APP_KEY_PREFIX = '_sentryBundlerPluginAppKey:';\nexports.thirdPartyErrorFilterIntegration = thirdPartyErrorFilterIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst is = __webpack_require__(/*! ../utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst string = __webpack_require__(/*! ../utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst DEFAULT_LIMIT = 10;\nconst INTEGRATION_NAME = 'ZodErrors';\n\n// Simplified ZodIssue type definition\n\nfunction originalExceptionIsZodError(originalException) {\n  return is.isError(originalException) && originalException.name === 'ZodError' && Array.isArray(originalException.errors);\n}\n\n/**\n * Formats child objects or arrays to a string\n * That is preserved when sent to Sentry\n */\nfunction formatIssueTitle(issue) {\n  return {\n    ...issue,\n    path: 'path' in issue && Array.isArray(issue.path) ? issue.path.join('.') : undefined,\n    keys: 'keys' in issue ? JSON.stringify(issue.keys) : undefined,\n    unionErrors: 'unionErrors' in issue ? JSON.stringify(issue.unionErrors) : undefined\n  };\n}\n\n/**\n * Zod error message is a stringified version of ZodError.issues\n * This doesn't display well in the Sentry UI. Replace it with something shorter.\n */\nfunction formatIssueMessage(zodError) {\n  const errorKeyMap = new Set();\n  for (const iss of zodError.issues) {\n    if (iss.path && iss.path[0]) {\n      errorKeyMap.add(iss.path[0]);\n    }\n  }\n  const errorKeys = Array.from(errorKeyMap);\n  return `Failed to validate keys: ${string.truncate(errorKeys.join(', '), 100)}`;\n}\n\n/**\n * Applies ZodError issues to an event extras and replaces the error message\n */\nfunction applyZodErrorsToEvent(limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !hint.originalException || !originalExceptionIsZodError(hint.originalException) || hint.originalException.issues.length === 0) {\n    return event;\n  }\n  return {\n    ...event,\n    exception: {\n      ...event.exception,\n      values: [{\n        ...event.exception.values[0],\n        value: formatIssueMessage(hint.originalException)\n      }, ...event.exception.values.slice(1)]\n    },\n    extra: {\n      ...event.extra,\n      'zoderror.issues': hint.originalException.errors.slice(0, limit).map(formatIssueTitle)\n    }\n  };\n}\nconst _zodErrorsIntegration = (options = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent, hint) {\n      const processedEvent = applyZodErrorsToEvent(limit, originalEvent, hint);\n      return processedEvent;\n    }\n  };\n};\nconst zodErrorsIntegration = integration.defineIntegration(_zodErrorsIntegration);\nexports.applyZodErrorsToEvent = applyZodErrorsToEvent;\nexports.zodErrorsIntegration = zodErrorsIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metadata.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/** Keys are source filename/url, values are metadata objects. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst filenameMetadataMap = new Map();\n/** Set of stack strings that have already been parsed. */\nconst parsedStacks = new Set();\nfunction ensureMetadataStacksAreParsed(parser) {\n  if (!worldwide.GLOBAL_OBJ._sentryModuleMetadata) {\n    return;\n  }\n  for (const stack of Object.keys(worldwide.GLOBAL_OBJ._sentryModuleMetadata)) {\n    const metadata = worldwide.GLOBAL_OBJ._sentryModuleMetadata[stack];\n    if (parsedStacks.has(stack)) {\n      continue;\n    }\n\n    // Ensure this stack doesn't get parsed again\n    parsedStacks.add(stack);\n    const frames = parser(stack);\n\n    // Go through the frames starting from the top of the stack and find the first one with a filename\n    for (const frame of frames.reverse()) {\n      if (frame.filename) {\n        // Save the metadata for this filename\n        filenameMetadataMap.set(frame.filename, metadata);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Retrieve metadata for a specific JavaScript file URL.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadataForUrl(parser, filename) {\n  ensureMetadataStacksAreParsed(parser);\n  return filenameMetadataMap.get(filename);\n}\n\n/**\n * Adds metadata to stack frames.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\nfunction addMetadataToStackFrames(parser, event) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n      for (const frame of exception.stacktrace.frames || []) {\n        if (!frame.filename || frame.module_metadata) {\n          continue;\n        }\n        const metadata = getMetadataForUrl(parser, frame.filename);\n        if (metadata) {\n          frame.module_metadata = metadata;\n        }\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Strips metadata from stack frames.\n */\nfunction stripMetadataFromStackFrames(event) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n      for (const frame of exception.stacktrace.frames || []) {\n        delete frame.module_metadata;\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\nexports.addMetadataToStackFrames = addMetadataToStackFrames;\nexports.getMetadataForUrl = getMetadataForUrl;\nexports.stripMetadataFromStackFrames = stripMetadataFromStackFrames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxTQUFTLEdBQUdDLG1CQUFPLENBQUMsK0dBQTRCLENBQUM7O0FBRXZEO0FBQ0E7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztBQUNyQztBQUNBLE1BQU1DLFlBQVksR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztBQUU5QixTQUFTQyw2QkFBNkJBLENBQUNDLE1BQU0sRUFBRTtFQUM3QyxJQUFJLENBQUNQLFNBQVMsQ0FBQ1EsVUFBVSxDQUFDQyxxQkFBcUIsRUFBRTtJQUMvQztFQUNGO0VBRUEsS0FBSyxNQUFNQyxLQUFLLElBQUlkLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDWCxTQUFTLENBQUNRLFVBQVUsQ0FBQ0MscUJBQXFCLENBQUMsRUFBRTtJQUMzRSxNQUFNRyxRQUFRLEdBQUdaLFNBQVMsQ0FBQ1EsVUFBVSxDQUFDQyxxQkFBcUIsQ0FBQ0MsS0FBSyxDQUFDO0lBRWxFLElBQUlOLFlBQVksQ0FBQ1MsR0FBRyxDQUFDSCxLQUFLLENBQUMsRUFBRTtNQUMzQjtJQUNGOztJQUVBO0lBQ0FOLFlBQVksQ0FBQ1UsR0FBRyxDQUFDSixLQUFLLENBQUM7SUFFdkIsTUFBTUssTUFBTSxHQUFHUixNQUFNLENBQUNHLEtBQUssQ0FBQzs7SUFFNUI7SUFDQSxLQUFLLE1BQU1NLEtBQUssSUFBSUQsTUFBTSxDQUFDRSxPQUFPLENBQUMsQ0FBQyxFQUFFO01BQ3BDLElBQUlELEtBQUssQ0FBQ0UsUUFBUSxFQUFFO1FBQ2xCO1FBQ0FoQixtQkFBbUIsQ0FBQ2lCLEdBQUcsQ0FBQ0gsS0FBSyxDQUFDRSxRQUFRLEVBQUVOLFFBQVEsQ0FBQztRQUNqRDtNQUNGO0lBQ0Y7RUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNRLGlCQUFpQkEsQ0FBQ2IsTUFBTSxFQUFFVyxRQUFRLEVBQUU7RUFDM0NaLDZCQUE2QixDQUFDQyxNQUFNLENBQUM7RUFDckMsT0FBT0wsbUJBQW1CLENBQUNtQixHQUFHLENBQUNILFFBQVEsQ0FBQztBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ksd0JBQXdCQSxDQUFDZixNQUFNLEVBQUVnQixLQUFLLEVBQUU7RUFDL0MsSUFBSTtJQUNGO0lBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0YsU0FBUyxJQUFJO01BQzFDLElBQUksQ0FBQ0EsU0FBUyxDQUFDRyxVQUFVLEVBQUU7UUFDekI7TUFDRjtNQUVBLEtBQUssTUFBTVgsS0FBSyxJQUFJUSxTQUFTLENBQUNHLFVBQVUsQ0FBQ1osTUFBTSxJQUFJLEVBQUUsRUFBRTtRQUNyRCxJQUFJLENBQUNDLEtBQUssQ0FBQ0UsUUFBUSxJQUFJRixLQUFLLENBQUNZLGVBQWUsRUFBRTtVQUM1QztRQUNGO1FBRUEsTUFBTWhCLFFBQVEsR0FBR1EsaUJBQWlCLENBQUNiLE1BQU0sRUFBRVMsS0FBSyxDQUFDRSxRQUFRLENBQUM7UUFFMUQsSUFBSU4sUUFBUSxFQUFFO1VBQ1pJLEtBQUssQ0FBQ1ksZUFBZSxHQUFHaEIsUUFBUTtRQUNsQztNQUNGO0lBQ0YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU9pQixDQUFDLEVBQUU7SUFDVjtFQUFBO0FBRUo7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsNEJBQTRCQSxDQUFDUCxLQUFLLEVBQUU7RUFDM0MsSUFBSTtJQUNGO0lBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0YsU0FBUyxJQUFJO01BQzFDLElBQUksQ0FBQ0EsU0FBUyxDQUFDRyxVQUFVLEVBQUU7UUFDekI7TUFDRjtNQUVBLEtBQUssTUFBTVgsS0FBSyxJQUFJUSxTQUFTLENBQUNHLFVBQVUsQ0FBQ1osTUFBTSxJQUFJLEVBQUUsRUFBRTtRQUNyRCxPQUFPQyxLQUFLLENBQUNZLGVBQWU7TUFDOUI7SUFDRixDQUFDLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT0MsQ0FBQyxFQUFFO0lBQ1Y7RUFBQTtBQUVKO0FBRUEvQixnQ0FBZ0MsR0FBR3dCLHdCQUF3QjtBQUMzRHhCLHlCQUF5QixHQUFHc0IsaUJBQWlCO0FBQzdDdEIsb0NBQW9DLEdBQUdnQyw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9tZXRhZGF0YS5qcz9mZDY1Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3Qvd29ybGR3aWRlLmpzJyk7XG5cbi8qKiBLZXlzIGFyZSBzb3VyY2UgZmlsZW5hbWUvdXJsLCB2YWx1ZXMgYXJlIG1ldGFkYXRhIG9iamVjdHMuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3QgZmlsZW5hbWVNZXRhZGF0YU1hcCA9IG5ldyBNYXAoKTtcbi8qKiBTZXQgb2Ygc3RhY2sgc3RyaW5ncyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHBhcnNlZC4gKi9cbmNvbnN0IHBhcnNlZFN0YWNrcyA9IG5ldyBTZXQoKTtcblxuZnVuY3Rpb24gZW5zdXJlTWV0YWRhdGFTdGFja3NBcmVQYXJzZWQocGFyc2VyKSB7XG4gIGlmICghd29ybGR3aWRlLkdMT0JBTF9PQkouX3NlbnRyeU1vZHVsZU1ldGFkYXRhKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChjb25zdCBzdGFjayBvZiBPYmplY3Qua2V5cyh3b3JsZHdpZGUuR0xPQkFMX09CSi5fc2VudHJ5TW9kdWxlTWV0YWRhdGEpKSB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB3b3JsZHdpZGUuR0xPQkFMX09CSi5fc2VudHJ5TW9kdWxlTWV0YWRhdGFbc3RhY2tdO1xuXG4gICAgaWYgKHBhcnNlZFN0YWNrcy5oYXMoc3RhY2spKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgdGhpcyBzdGFjayBkb2Vzbid0IGdldCBwYXJzZWQgYWdhaW5cbiAgICBwYXJzZWRTdGFja3MuYWRkKHN0YWNrKTtcblxuICAgIGNvbnN0IGZyYW1lcyA9IHBhcnNlcihzdGFjayk7XG5cbiAgICAvLyBHbyB0aHJvdWdoIHRoZSBmcmFtZXMgc3RhcnRpbmcgZnJvbSB0aGUgdG9wIG9mIHRoZSBzdGFjayBhbmQgZmluZCB0aGUgZmlyc3Qgb25lIHdpdGggYSBmaWxlbmFtZVxuICAgIGZvciAoY29uc3QgZnJhbWUgb2YgZnJhbWVzLnJldmVyc2UoKSkge1xuICAgICAgaWYgKGZyYW1lLmZpbGVuYW1lKSB7XG4gICAgICAgIC8vIFNhdmUgdGhlIG1ldGFkYXRhIGZvciB0aGlzIGZpbGVuYW1lXG4gICAgICAgIGZpbGVuYW1lTWV0YWRhdGFNYXAuc2V0KGZyYW1lLmZpbGVuYW1lLCBtZXRhZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJldHJpZXZlIG1ldGFkYXRhIGZvciBhIHNwZWNpZmljIEphdmFTY3JpcHQgZmlsZSBVUkwuXG4gKlxuICogTWV0YWRhdGEgaXMgaW5qZWN0ZWQgYnkgdGhlIFNlbnRyeSBidW5kbGVyIHBsdWdpbnMgdXNpbmcgdGhlIGBfZXhwZXJpbWVudHMubW9kdWxlTWV0YWRhdGFgIGNvbmZpZyBvcHRpb24uXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBnZXRNZXRhZGF0YUZvclVybChwYXJzZXIsIGZpbGVuYW1lKSB7XG4gIGVuc3VyZU1ldGFkYXRhU3RhY2tzQXJlUGFyc2VkKHBhcnNlcik7XG4gIHJldHVybiBmaWxlbmFtZU1ldGFkYXRhTWFwLmdldChmaWxlbmFtZSk7XG59XG5cbi8qKlxuICogQWRkcyBtZXRhZGF0YSB0byBzdGFjayBmcmFtZXMuXG4gKlxuICogTWV0YWRhdGEgaXMgaW5qZWN0ZWQgYnkgdGhlIFNlbnRyeSBidW5kbGVyIHBsdWdpbnMgdXNpbmcgdGhlIGBfZXhwZXJpbWVudHMubW9kdWxlTWV0YWRhdGFgIGNvbmZpZyBvcHRpb24uXG4gKi9cbmZ1bmN0aW9uIGFkZE1ldGFkYXRhVG9TdGFja0ZyYW1lcyhwYXJzZXIsIGV2ZW50KSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICBldmVudC5leGNlcHRpb24udmFsdWVzLmZvckVhY2goZXhjZXB0aW9uID0+IHtcbiAgICAgIGlmICghZXhjZXB0aW9uLnN0YWNrdHJhY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IGZyYW1lIG9mIGV4Y2VwdGlvbi5zdGFja3RyYWNlLmZyYW1lcyB8fCBbXSkge1xuICAgICAgICBpZiAoIWZyYW1lLmZpbGVuYW1lIHx8IGZyYW1lLm1vZHVsZV9tZXRhZGF0YSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBnZXRNZXRhZGF0YUZvclVybChwYXJzZXIsIGZyYW1lLmZpbGVuYW1lKTtcblxuICAgICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgICBmcmFtZS5tb2R1bGVfbWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7XG4gICAgLy8gVG8gc2F2ZSBidW5kbGUgc2l6ZSB3ZSdyZSBqdXN0IHRyeSBjYXRjaGluZyBoZXJlIGluc3RlYWQgb2YgY2hlY2tpbmcgZm9yIHRoZSBleGlzdGVuY2Ugb2YgYWxsIHRoZSBkaWZmZXJlbnQgb2JqZWN0cy5cbiAgfVxufVxuXG4vKipcbiAqIFN0cmlwcyBtZXRhZGF0YSBmcm9tIHN0YWNrIGZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gc3RyaXBNZXRhZGF0YUZyb21TdGFja0ZyYW1lcyhldmVudCkge1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcy5mb3JFYWNoKGV4Y2VwdGlvbiA9PiB7XG4gICAgICBpZiAoIWV4Y2VwdGlvbi5zdGFja3RyYWNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBmcmFtZSBvZiBleGNlcHRpb24uc3RhY2t0cmFjZS5mcmFtZXMgfHwgW10pIHtcbiAgICAgICAgZGVsZXRlIGZyYW1lLm1vZHVsZV9tZXRhZGF0YTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge1xuICAgIC8vIFRvIHNhdmUgYnVuZGxlIHNpemUgd2UncmUganVzdCB0cnkgY2F0Y2hpbmcgaGVyZSBpbnN0ZWFkIG9mIGNoZWNraW5nIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFsbCB0aGUgZGlmZmVyZW50IG9iamVjdHMuXG4gIH1cbn1cblxuZXhwb3J0cy5hZGRNZXRhZGF0YVRvU3RhY2tGcmFtZXMgPSBhZGRNZXRhZGF0YVRvU3RhY2tGcmFtZXM7XG5leHBvcnRzLmdldE1ldGFkYXRhRm9yVXJsID0gZ2V0TWV0YWRhdGFGb3JVcmw7XG5leHBvcnRzLnN0cmlwTWV0YWRhdGFGcm9tU3RhY2tGcmFtZXMgPSBzdHJpcE1ldGFkYXRhRnJvbVN0YWNrRnJhbWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3b3JsZHdpZGUiLCJyZXF1aXJlIiwiZmlsZW5hbWVNZXRhZGF0YU1hcCIsIk1hcCIsInBhcnNlZFN0YWNrcyIsIlNldCIsImVuc3VyZU1ldGFkYXRhU3RhY2tzQXJlUGFyc2VkIiwicGFyc2VyIiwiR0xPQkFMX09CSiIsIl9zZW50cnlNb2R1bGVNZXRhZGF0YSIsInN0YWNrIiwia2V5cyIsIm1ldGFkYXRhIiwiaGFzIiwiYWRkIiwiZnJhbWVzIiwiZnJhbWUiLCJyZXZlcnNlIiwiZmlsZW5hbWUiLCJzZXQiLCJnZXRNZXRhZGF0YUZvclVybCIsImdldCIsImFkZE1ldGFkYXRhVG9TdGFja0ZyYW1lcyIsImV2ZW50IiwiZXhjZXB0aW9uIiwidmFsdWVzIiwiZm9yRWFjaCIsInN0YWNrdHJhY2UiLCJtb2R1bGVfbWV0YWRhdGEiLCJfIiwic3RyaXBNZXRhZGF0YUZyb21TdGFja0ZyYW1lcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/aggregator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/aggregator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/envelope.js\");\nconst instance = __webpack_require__(/*! ./instance.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/instance.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js\");\n\n/**\n * A metrics aggregator that aggregates metrics in memory and flushes them periodically.\n */\nclass MetricsAggregator {\n  // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets\n  // when the aggregator is garbage collected.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n\n  // Different metrics have different weights. We use this to limit the number of metrics\n  // that we store in memory.\n\n  // We adjust the type here to add the `unref()` part, as setInterval can technically return a number or a NodeJS.Timer\n\n  // SDKs are required to shift the flush interval by random() * rollup_in_seconds.\n  // That shift is determined once per startup to create jittering.\n\n  // An SDK is required to perform force flushing ahead of scheduled time if the memory\n  // pressure is too high. There is no rule for this other than that SDKs should be tracking\n  // abstract aggregation complexity (eg: a counter only carries a single float, whereas a\n  // distribution is a float per emission).\n  //\n  // Force flush is used on either shutdown, flush() or when we exceed the max weight.\n\n  constructor(_client) {\n    this._client = _client;\n    this._buckets = new Map();\n    this._bucketsTotalWeight = 0;\n    this._interval = setInterval(() => this._flush(), constants.DEFAULT_FLUSH_INTERVAL);\n    if (this._interval.unref) {\n      this._interval.unref();\n    }\n    this._flushShift = Math.floor(Math.random() * constants.DEFAULT_FLUSH_INTERVAL / 1000);\n    this._forceFlush = false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  add(metricType, unsanitizedName, value, unsanitizedUnit = 'none', unsanitizedTags = {}, maybeFloatTimestamp = time.timestampInSeconds()) {\n    const timestamp = Math.floor(maybeFloatTimestamp);\n    const name = utils.sanitizeMetricKey(unsanitizedName);\n    const tags = utils.sanitizeTags(unsanitizedTags);\n    const unit = utils.sanitizeUnit(unsanitizedUnit);\n    const bucketKey = utils.getBucketKey(metricType, name, unit, tags);\n    let bucketItem = this._buckets.get(bucketKey);\n    // If this is a set metric, we need to calculate the delta from the previous weight.\n    const previousWeight = bucketItem && metricType === constants.SET_METRIC_TYPE ? bucketItem.metric.weight : 0;\n    if (bucketItem) {\n      bucketItem.metric.add(value);\n      // TODO(abhi): Do we need this check?\n      if (bucketItem.timestamp < timestamp) {\n        bucketItem.timestamp = timestamp;\n      }\n    } else {\n      bucketItem = {\n        // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.\n        metric: new instance.METRIC_MAP[metricType](value),\n        timestamp,\n        metricType,\n        name,\n        unit,\n        tags\n      };\n      this._buckets.set(bucketKey, bucketItem);\n    }\n\n    // If value is a string, it's a set metric so calculate the delta from the previous weight.\n    const val = typeof value === 'string' ? bucketItem.metric.weight - previousWeight : value;\n    spanUtils.updateMetricSummaryOnActiveSpan(metricType, name, val, unit, unsanitizedTags, bucketKey);\n\n    // We need to keep track of the total weight of the buckets so that we can\n    // flush them when we exceed the max weight.\n    this._bucketsTotalWeight += bucketItem.metric.weight;\n    if (this._bucketsTotalWeight >= constants.MAX_WEIGHT) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flushes the current metrics to the transport via the transport.\n   */\n  flush() {\n    this._forceFlush = true;\n    this._flush();\n  }\n\n  /**\n   * Shuts down metrics aggregator and clears all metrics.\n   */\n  close() {\n    this._forceFlush = true;\n    clearInterval(this._interval);\n    this._flush();\n  }\n\n  /**\n   * Flushes the buckets according to the internal state of the aggregator.\n   * If it is a force flush, which happens on shutdown, it will flush all buckets.\n   * Otherwise, it will only flush buckets that are older than the flush interval,\n   * and according to the flush shift.\n   *\n   * This function mutates `_forceFlush` and `_bucketsTotalWeight` properties.\n   */\n  _flush() {\n    // TODO(@anonrig): Add Atomics for locking to avoid having force flush and regular flush\n    // running at the same time.\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\n\n    // This path eliminates the need for checking for timestamps since we're forcing a flush.\n    // Remember to reset the flag, or it will always flush all metrics.\n    if (this._forceFlush) {\n      this._forceFlush = false;\n      this._bucketsTotalWeight = 0;\n      this._captureMetrics(this._buckets);\n      this._buckets.clear();\n      return;\n    }\n    const cutoffSeconds = Math.floor(time.timestampInSeconds()) - constants.DEFAULT_FLUSH_INTERVAL / 1000 - this._flushShift;\n    // TODO(@anonrig): Optimization opportunity.\n    // Convert this map to an array and store key in the bucketItem.\n    const flushedBuckets = new Map();\n    for (const [key, bucket] of this._buckets) {\n      if (bucket.timestamp <= cutoffSeconds) {\n        flushedBuckets.set(key, bucket);\n        this._bucketsTotalWeight -= bucket.metric.weight;\n      }\n    }\n    for (const [key] of flushedBuckets) {\n      this._buckets.delete(key);\n    }\n    this._captureMetrics(flushedBuckets);\n  }\n\n  /**\n   * Only captures a subset of the buckets passed to this function.\n   * @param flushedBuckets\n   */\n  _captureMetrics(flushedBuckets) {\n    if (flushedBuckets.size > 0) {\n      // TODO(@anonrig): Optimization opportunity.\n      // This copy operation can be avoided if we store the key in the bucketItem.\n      const buckets = Array.from(flushedBuckets).map(([, bucketItem]) => bucketItem);\n      envelope.captureAggregateMetrics(this._client, buckets);\n    }\n  }\n}\nexports.MetricsAggregator = MetricsAggregator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/aggregator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/envelope.js\");\nconst instance = __webpack_require__(/*! ./instance.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/instance.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js\");\n\n/**\n * A simple metrics aggregator that aggregates metrics in memory and flushes them periodically.\n * Default flush interval is 5 seconds.\n *\n * @experimental This API is experimental and might change in the future.\n */\nclass BrowserMetricsAggregator {\n  // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets\n  // when the aggregator is garbage collected.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n\n  constructor(_client) {\n    this._client = _client;\n    this._buckets = new Map();\n    this._interval = setInterval(() => this.flush(), constants.DEFAULT_BROWSER_FLUSH_INTERVAL);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  add(metricType, unsanitizedName, value, unsanitizedUnit = 'none', unsanitizedTags = {}, maybeFloatTimestamp = time.timestampInSeconds()) {\n    const timestamp = Math.floor(maybeFloatTimestamp);\n    const name = utils.sanitizeMetricKey(unsanitizedName);\n    const tags = utils.sanitizeTags(unsanitizedTags);\n    const unit = utils.sanitizeUnit(unsanitizedUnit);\n    const bucketKey = utils.getBucketKey(metricType, name, unit, tags);\n    let bucketItem = this._buckets.get(bucketKey);\n    // If this is a set metric, we need to calculate the delta from the previous weight.\n    const previousWeight = bucketItem && metricType === constants.SET_METRIC_TYPE ? bucketItem.metric.weight : 0;\n    if (bucketItem) {\n      bucketItem.metric.add(value);\n      // TODO(abhi): Do we need this check?\n      if (bucketItem.timestamp < timestamp) {\n        bucketItem.timestamp = timestamp;\n      }\n    } else {\n      bucketItem = {\n        // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.\n        metric: new instance.METRIC_MAP[metricType](value),\n        timestamp,\n        metricType,\n        name,\n        unit,\n        tags\n      };\n      this._buckets.set(bucketKey, bucketItem);\n    }\n\n    // If value is a string, it's a set metric so calculate the delta from the previous weight.\n    const val = typeof value === 'string' ? bucketItem.metric.weight - previousWeight : value;\n    spanUtils.updateMetricSummaryOnActiveSpan(metricType, name, val, unit, unsanitizedTags, bucketKey);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  flush() {\n    // short circuit if buckets are empty.\n    if (this._buckets.size === 0) {\n      return;\n    }\n    const metricBuckets = Array.from(this._buckets.values());\n    envelope.captureAggregateMetrics(this._client, metricBuckets);\n    this._buckets.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  close() {\n    clearInterval(this._interval);\n    this.flush();\n  }\n}\nexports.BrowserMetricsAggregator = BrowserMetricsAggregator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst COUNTER_METRIC_TYPE = 'c';\nconst GAUGE_METRIC_TYPE = 'g';\nconst SET_METRIC_TYPE = 's';\nconst DISTRIBUTION_METRIC_TYPE = 'd';\n\n/**\n * This does not match spec in https://develop.sentry.dev/sdk/metrics\n * but was chosen to optimize for the most common case in browser environments.\n */\nconst DEFAULT_BROWSER_FLUSH_INTERVAL = 5000;\n\n/**\n * SDKs are required to bucket into 10 second intervals (rollup in seconds)\n * which is the current lower bound of metric accuracy.\n */\nconst DEFAULT_FLUSH_INTERVAL = 10000;\n\n/**\n * The maximum number of metrics that should be stored in memory.\n */\nconst MAX_WEIGHT = 10000;\nexports.COUNTER_METRIC_TYPE = COUNTER_METRIC_TYPE;\nexports.DEFAULT_BROWSER_FLUSH_INTERVAL = DEFAULT_BROWSER_FLUSH_INTERVAL;\nexports.DEFAULT_FLUSH_INTERVAL = DEFAULT_FLUSH_INTERVAL;\nexports.DISTRIBUTION_METRIC_TYPE = DISTRIBUTION_METRIC_TYPE;\nexports.GAUGE_METRIC_TYPE = GAUGE_METRIC_TYPE;\nexports.MAX_WEIGHT = MAX_WEIGHT;\nexports.SET_METRIC_TYPE = SET_METRIC_TYPE;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxtQkFBbUIsR0FBRyxHQUFHO0FBQy9CLE1BQU1DLGlCQUFpQixHQUFHLEdBQUc7QUFDN0IsTUFBTUMsZUFBZSxHQUFHLEdBQUc7QUFDM0IsTUFBTUMsd0JBQXdCLEdBQUcsR0FBRzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyw4QkFBOEIsR0FBRyxJQUFJOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLHNCQUFzQixHQUFHLEtBQUs7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFVBQVUsR0FBRyxLQUFLO0FBRXhCUiwyQkFBMkIsR0FBR0UsbUJBQW1CO0FBQ2pERixzQ0FBc0MsR0FBR00sOEJBQThCO0FBQ3ZFTiw4QkFBOEIsR0FBR08sc0JBQXNCO0FBQ3ZEUCxnQ0FBZ0MsR0FBR0ssd0JBQXdCO0FBQzNETCx5QkFBeUIsR0FBR0csaUJBQWlCO0FBQzdDSCxrQkFBa0IsR0FBR1EsVUFBVTtBQUMvQlIsdUJBQXVCLEdBQUdJLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9tZXRyaWNzL2NvbnN0YW50cy5qcz9kNzJlIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IENPVU5URVJfTUVUUklDX1RZUEUgPSAnYycgO1xuY29uc3QgR0FVR0VfTUVUUklDX1RZUEUgPSAnZycgO1xuY29uc3QgU0VUX01FVFJJQ19UWVBFID0gJ3MnIDtcbmNvbnN0IERJU1RSSUJVVElPTl9NRVRSSUNfVFlQRSA9ICdkJyA7XG5cbi8qKlxuICogVGhpcyBkb2VzIG5vdCBtYXRjaCBzcGVjIGluIGh0dHBzOi8vZGV2ZWxvcC5zZW50cnkuZGV2L3Nkay9tZXRyaWNzXG4gKiBidXQgd2FzIGNob3NlbiB0byBvcHRpbWl6ZSBmb3IgdGhlIG1vc3QgY29tbW9uIGNhc2UgaW4gYnJvd3NlciBlbnZpcm9ubWVudHMuXG4gKi9cbmNvbnN0IERFRkFVTFRfQlJPV1NFUl9GTFVTSF9JTlRFUlZBTCA9IDUwMDA7XG5cbi8qKlxuICogU0RLcyBhcmUgcmVxdWlyZWQgdG8gYnVja2V0IGludG8gMTAgc2Vjb25kIGludGVydmFscyAocm9sbHVwIGluIHNlY29uZHMpXG4gKiB3aGljaCBpcyB0aGUgY3VycmVudCBsb3dlciBib3VuZCBvZiBtZXRyaWMgYWNjdXJhY3kuXG4gKi9cbmNvbnN0IERFRkFVTFRfRkxVU0hfSU5URVJWQUwgPSAxMDAwMDtcblxuLyoqXG4gKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgbWV0cmljcyB0aGF0IHNob3VsZCBiZSBzdG9yZWQgaW4gbWVtb3J5LlxuICovXG5jb25zdCBNQVhfV0VJR0hUID0gMTAwMDA7XG5cbmV4cG9ydHMuQ09VTlRFUl9NRVRSSUNfVFlQRSA9IENPVU5URVJfTUVUUklDX1RZUEU7XG5leHBvcnRzLkRFRkFVTFRfQlJPV1NFUl9GTFVTSF9JTlRFUlZBTCA9IERFRkFVTFRfQlJPV1NFUl9GTFVTSF9JTlRFUlZBTDtcbmV4cG9ydHMuREVGQVVMVF9GTFVTSF9JTlRFUlZBTCA9IERFRkFVTFRfRkxVU0hfSU5URVJWQUw7XG5leHBvcnRzLkRJU1RSSUJVVElPTl9NRVRSSUNfVFlQRSA9IERJU1RSSUJVVElPTl9NRVRSSUNfVFlQRTtcbmV4cG9ydHMuR0FVR0VfTUVUUklDX1RZUEUgPSBHQVVHRV9NRVRSSUNfVFlQRTtcbmV4cG9ydHMuTUFYX1dFSUdIVCA9IE1BWF9XRUlHSFQ7XG5leHBvcnRzLlNFVF9NRVRSSUNfVFlQRSA9IFNFVF9NRVRSSUNfVFlQRTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkNPVU5URVJfTUVUUklDX1RZUEUiLCJHQVVHRV9NRVRSSUNfVFlQRSIsIlNFVF9NRVRSSUNfVFlQRSIsIkRJU1RSSUJVVElPTl9NRVRSSUNfVFlQRSIsIkRFRkFVTFRfQlJPV1NFUl9GTFVTSF9JTlRFUlZBTCIsIkRFRkFVTFRfRkxVU0hfSU5URVJWQUwiLCJNQVhfV0VJR0hUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/envelope.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/envelope.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dsn = __webpack_require__(/*! ../utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js\");\n\n/**\n * Captures aggregated metrics to the supplied client.\n */\nfunction captureAggregateMetrics(client, metricBucketItems) {\n  logger.logger.log(`Flushing aggregated metrics, number of metrics: ${metricBucketItems.length}`);\n  const dsn = client.getDsn();\n  const metadata = client.getSdkMetadata();\n  const tunnel = client.getOptions().tunnel;\n  const metricsEnvelope = createMetricEnvelope(metricBucketItems, dsn, metadata, tunnel);\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(metricsEnvelope);\n}\n\n/**\n * Create envelope from a metric aggregate.\n */\nfunction createMetricEnvelope(metricBucketItems, dsn$1, metadata, tunnel) {\n  const headers = {\n    sent_at: new Date().toISOString()\n  };\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version\n    };\n  }\n  if (!!tunnel && dsn$1) {\n    headers.dsn = dsn.dsnToString(dsn$1);\n  }\n  const item = createMetricEnvelopeItem(metricBucketItems);\n  return envelope.createEnvelope(headers, [item]);\n}\nfunction createMetricEnvelopeItem(metricBucketItems) {\n  const payload = utils.serializeMetricBuckets(metricBucketItems);\n  const metricHeaders = {\n    type: 'statsd',\n    length: payload.length\n  };\n  return [metricHeaders, payload];\n}\nexports.captureAggregateMetrics = captureAggregateMetrics;\nexports.createMetricEnvelope = createMetricEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9lbnZlbG9wZS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLEdBQUcsR0FBR0MsbUJBQU8sQ0FBQyxvR0FBdUIsQ0FBQztBQUM1QyxNQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsOEdBQTRCLENBQUM7QUFDdEQsTUFBTUUsTUFBTSxHQUFHRixtQkFBTyxDQUFDLDBHQUEwQixDQUFDO0FBQ2xELE1BQU1HLEtBQUssR0FBR0gsbUJBQU8sQ0FBQyx1RkFBWSxDQUFDOztBQUVuQztBQUNBO0FBQ0E7QUFDQSxTQUFTSSx1QkFBdUJBLENBQUNDLE1BQU0sRUFBRUMsaUJBQWlCLEVBQUU7RUFDMURKLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDSyxHQUFHLENBQUUsbURBQWtERCxpQkFBaUIsQ0FBQ0UsTUFBTyxFQUFDLENBQUM7RUFDaEcsTUFBTVQsR0FBRyxHQUFHTSxNQUFNLENBQUNJLE1BQU0sQ0FBQyxDQUFDO0VBQzNCLE1BQU1DLFFBQVEsR0FBR0wsTUFBTSxDQUFDTSxjQUFjLENBQUMsQ0FBQztFQUN4QyxNQUFNQyxNQUFNLEdBQUdQLE1BQU0sQ0FBQ1EsVUFBVSxDQUFDLENBQUMsQ0FBQ0QsTUFBTTtFQUV6QyxNQUFNRSxlQUFlLEdBQUdDLG9CQUFvQixDQUFDVCxpQkFBaUIsRUFBRVAsR0FBRyxFQUFFVyxRQUFRLEVBQUVFLE1BQU0sQ0FBQzs7RUFFdEY7RUFDQTtFQUNBUCxNQUFNLENBQUNXLFlBQVksQ0FBQ0YsZUFBZSxDQUFDO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLG9CQUFvQkEsQ0FDM0JULGlCQUFpQixFQUNqQlcsS0FBSyxFQUNMUCxRQUFRLEVBQ1JFLE1BQU0sRUFDTjtFQUNBLE1BQU1NLE9BQU8sR0FBRztJQUNkQyxPQUFPLEVBQUUsSUFBSUMsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDO0VBQ2xDLENBQUM7RUFFRCxJQUFJWCxRQUFRLElBQUlBLFFBQVEsQ0FBQ1ksR0FBRyxFQUFFO0lBQzVCSixPQUFPLENBQUNJLEdBQUcsR0FBRztNQUNaQyxJQUFJLEVBQUViLFFBQVEsQ0FBQ1ksR0FBRyxDQUFDQyxJQUFJO01BQ3ZCQyxPQUFPLEVBQUVkLFFBQVEsQ0FBQ1ksR0FBRyxDQUFDRTtJQUN4QixDQUFDO0VBQ0g7RUFFQSxJQUFJLENBQUMsQ0FBQ1osTUFBTSxJQUFJSyxLQUFLLEVBQUU7SUFDckJDLE9BQU8sQ0FBQ25CLEdBQUcsR0FBR0EsR0FBRyxDQUFDMEIsV0FBVyxDQUFDUixLQUFLLENBQUM7RUFDdEM7RUFFQSxNQUFNUyxJQUFJLEdBQUdDLHdCQUF3QixDQUFDckIsaUJBQWlCLENBQUM7RUFDeEQsT0FBT0wsUUFBUSxDQUFDMkIsY0FBYyxDQUFDVixPQUFPLEVBQUUsQ0FBQ1EsSUFBSSxDQUFDLENBQUM7QUFDakQ7QUFFQSxTQUFTQyx3QkFBd0JBLENBQUNyQixpQkFBaUIsRUFBRTtFQUNuRCxNQUFNdUIsT0FBTyxHQUFHMUIsS0FBSyxDQUFDMkIsc0JBQXNCLENBQUN4QixpQkFBaUIsQ0FBQztFQUMvRCxNQUFNeUIsYUFBYSxHQUFHO0lBQ3BCQyxJQUFJLEVBQUUsUUFBUTtJQUNkeEIsTUFBTSxFQUFFcUIsT0FBTyxDQUFDckI7RUFDbEIsQ0FBQztFQUNELE9BQU8sQ0FBQ3VCLGFBQWEsRUFBRUYsT0FBTyxDQUFDO0FBQ2pDO0FBRUFoQywrQkFBK0IsR0FBR08sdUJBQXVCO0FBQ3pEUCw0QkFBNEIsR0FBR2tCLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL21ldHJpY3MvZW52ZWxvcGUuanM/ZGU5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBkc24gPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9kc24uanMnKTtcbmNvbnN0IGVudmVsb3BlID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvZW52ZWxvcGUuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XG5cbi8qKlxuICogQ2FwdHVyZXMgYWdncmVnYXRlZCBtZXRyaWNzIHRvIHRoZSBzdXBwbGllZCBjbGllbnQuXG4gKi9cbmZ1bmN0aW9uIGNhcHR1cmVBZ2dyZWdhdGVNZXRyaWNzKGNsaWVudCwgbWV0cmljQnVja2V0SXRlbXMpIHtcbiAgbG9nZ2VyLmxvZ2dlci5sb2coYEZsdXNoaW5nIGFnZ3JlZ2F0ZWQgbWV0cmljcywgbnVtYmVyIG9mIG1ldHJpY3M6ICR7bWV0cmljQnVja2V0SXRlbXMubGVuZ3RofWApO1xuICBjb25zdCBkc24gPSBjbGllbnQuZ2V0RHNuKCk7XG4gIGNvbnN0IG1ldGFkYXRhID0gY2xpZW50LmdldFNka01ldGFkYXRhKCk7XG4gIGNvbnN0IHR1bm5lbCA9IGNsaWVudC5nZXRPcHRpb25zKCkudHVubmVsO1xuXG4gIGNvbnN0IG1ldHJpY3NFbnZlbG9wZSA9IGNyZWF0ZU1ldHJpY0VudmVsb3BlKG1ldHJpY0J1Y2tldEl0ZW1zLCBkc24sIG1ldGFkYXRhLCB0dW5uZWwpO1xuXG4gIC8vIHNlbmRFbnZlbG9wZSBzaG91bGQgbm90IHRocm93XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgY2xpZW50LnNlbmRFbnZlbG9wZShtZXRyaWNzRW52ZWxvcGUpO1xufVxuXG4vKipcbiAqIENyZWF0ZSBlbnZlbG9wZSBmcm9tIGEgbWV0cmljIGFnZ3JlZ2F0ZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWV0cmljRW52ZWxvcGUoXG4gIG1ldHJpY0J1Y2tldEl0ZW1zLFxuICBkc24kMSxcbiAgbWV0YWRhdGEsXG4gIHR1bm5lbCxcbikge1xuICBjb25zdCBoZWFkZXJzID0ge1xuICAgIHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgfTtcblxuICBpZiAobWV0YWRhdGEgJiYgbWV0YWRhdGEuc2RrKSB7XG4gICAgaGVhZGVycy5zZGsgPSB7XG4gICAgICBuYW1lOiBtZXRhZGF0YS5zZGsubmFtZSxcbiAgICAgIHZlcnNpb246IG1ldGFkYXRhLnNkay52ZXJzaW9uLFxuICAgIH07XG4gIH1cblxuICBpZiAoISF0dW5uZWwgJiYgZHNuJDEpIHtcbiAgICBoZWFkZXJzLmRzbiA9IGRzbi5kc25Ub1N0cmluZyhkc24kMSk7XG4gIH1cblxuICBjb25zdCBpdGVtID0gY3JlYXRlTWV0cmljRW52ZWxvcGVJdGVtKG1ldHJpY0J1Y2tldEl0ZW1zKTtcbiAgcmV0dXJuIGVudmVsb3BlLmNyZWF0ZUVudmVsb3BlKGhlYWRlcnMsIFtpdGVtXSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1ldHJpY0VudmVsb3BlSXRlbShtZXRyaWNCdWNrZXRJdGVtcykge1xuICBjb25zdCBwYXlsb2FkID0gdXRpbHMuc2VyaWFsaXplTWV0cmljQnVja2V0cyhtZXRyaWNCdWNrZXRJdGVtcyk7XG4gIGNvbnN0IG1ldHJpY0hlYWRlcnMgPSB7XG4gICAgdHlwZTogJ3N0YXRzZCcsXG4gICAgbGVuZ3RoOiBwYXlsb2FkLmxlbmd0aCxcbiAgfTtcbiAgcmV0dXJuIFttZXRyaWNIZWFkZXJzLCBwYXlsb2FkXTtcbn1cblxuZXhwb3J0cy5jYXB0dXJlQWdncmVnYXRlTWV0cmljcyA9IGNhcHR1cmVBZ2dyZWdhdGVNZXRyaWNzO1xuZXhwb3J0cy5jcmVhdGVNZXRyaWNFbnZlbG9wZSA9IGNyZWF0ZU1ldHJpY0VudmVsb3BlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52ZWxvcGUuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkc24iLCJyZXF1aXJlIiwiZW52ZWxvcGUiLCJsb2dnZXIiLCJ1dGlscyIsImNhcHR1cmVBZ2dyZWdhdGVNZXRyaWNzIiwiY2xpZW50IiwibWV0cmljQnVja2V0SXRlbXMiLCJsb2ciLCJsZW5ndGgiLCJnZXREc24iLCJtZXRhZGF0YSIsImdldFNka01ldGFkYXRhIiwidHVubmVsIiwiZ2V0T3B0aW9ucyIsIm1ldHJpY3NFbnZlbG9wZSIsImNyZWF0ZU1ldHJpY0VudmVsb3BlIiwic2VuZEVudmVsb3BlIiwiZHNuJDEiLCJoZWFkZXJzIiwic2VudF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInNkayIsIm5hbWUiLCJ2ZXJzaW9uIiwiZHNuVG9TdHJpbmciLCJpdGVtIiwiY3JlYXRlTWV0cmljRW52ZWxvcGVJdGVtIiwiY3JlYXRlRW52ZWxvcGUiLCJwYXlsb2FkIiwic2VyaWFsaXplTWV0cmljQnVja2V0cyIsIm1ldHJpY0hlYWRlcnMiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/envelope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports-default.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/exports-default.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst aggregator = __webpack_require__(/*! ./aggregator.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/aggregator.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports.js\");\n\n/**\n * Adds a value to a counter metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction increment(name, value = 1, data) {\n  // eslint-disable-next-line deprecation/deprecation\n  exports$1.metrics.increment(aggregator.MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a distribution metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction distribution(name, value, data) {\n  // eslint-disable-next-line deprecation/deprecation\n  exports$1.metrics.distribution(aggregator.MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a set metric. Value must be a string or integer.\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction set(name, value, data) {\n  // eslint-disable-next-line deprecation/deprecation\n  exports$1.metrics.set(aggregator.MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a gauge metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction gauge(name, value, data) {\n  // eslint-disable-next-line deprecation/deprecation\n  exports$1.metrics.gauge(aggregator.MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a timing metric.\n * The metric is added as a distribution metric.\n *\n * You can either directly capture a numeric `value`, or wrap a callback function in `timing`.\n * In the latter case, the duration of the callback execution will be captured as a span & a metric.\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\n\nfunction timing(name, value, unit = 'second', data) {\n  // eslint-disable-next-line deprecation/deprecation\n  return exports$1.metrics.timing(aggregator.MetricsAggregator, name, value, unit, data);\n}\n\n/**\n * Returns the metrics aggregator for a given client.\n */\nfunction getMetricsAggregatorForClient(client) {\n  // eslint-disable-next-line deprecation/deprecation\n  return exports$1.metrics.getMetricsAggregatorForClient(client, aggregator.MetricsAggregator);\n}\n\n/**\n * The metrics API is used to capture custom metrics in Sentry.\n *\n * @deprecated The Sentry metrics beta has ended. This export will be removed in a future release.\n */\nconst metricsDefault = {\n  increment,\n  distribution,\n  set,\n  gauge,\n  timing,\n  /**\n   * @ignore This is for internal use only.\n   */\n  getMetricsAggregatorForClient\n};\nexports.metricsDefault = metricsDefault;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9leHBvcnRzLWRlZmF1bHQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxVQUFVLEdBQUdDLG1CQUFPLENBQUMsaUdBQWlCLENBQUM7QUFDN0MsTUFBTUMsU0FBUyxHQUFHRCxtQkFBTyxDQUFDLDJGQUFjLENBQUM7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxTQUFTQSxDQUFDQyxJQUFJLEVBQUVMLEtBQUssR0FBRyxDQUFDLEVBQUVNLElBQUksRUFBRTtFQUN4QztFQUNBSCxTQUFTLENBQUNJLE9BQU8sQ0FBQ0gsU0FBUyxDQUFDSCxVQUFVLENBQUNPLGlCQUFpQixFQUFFSCxJQUFJLEVBQUVMLEtBQUssRUFBRU0sSUFBSSxDQUFDO0FBQzlFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxZQUFZQSxDQUFDSixJQUFJLEVBQUVMLEtBQUssRUFBRU0sSUFBSSxFQUFFO0VBQ3ZDO0VBQ0FILFNBQVMsQ0FBQ0ksT0FBTyxDQUFDRSxZQUFZLENBQUNSLFVBQVUsQ0FBQ08saUJBQWlCLEVBQUVILElBQUksRUFBRUwsS0FBSyxFQUFFTSxJQUFJLENBQUM7QUFDakY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNJLEdBQUdBLENBQUNMLElBQUksRUFBRUwsS0FBSyxFQUFFTSxJQUFJLEVBQUU7RUFDOUI7RUFDQUgsU0FBUyxDQUFDSSxPQUFPLENBQUNHLEdBQUcsQ0FBQ1QsVUFBVSxDQUFDTyxpQkFBaUIsRUFBRUgsSUFBSSxFQUFFTCxLQUFLLEVBQUVNLElBQUksQ0FBQztBQUN4RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ssS0FBS0EsQ0FBQ04sSUFBSSxFQUFFTCxLQUFLLEVBQUVNLElBQUksRUFBRTtFQUNoQztFQUNBSCxTQUFTLENBQUNJLE9BQU8sQ0FBQ0ksS0FBSyxDQUFDVixVQUFVLENBQUNPLGlCQUFpQixFQUFFSCxJQUFJLEVBQUVMLEtBQUssRUFBRU0sSUFBSSxDQUFDO0FBQzFFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTTSxNQUFNQSxDQUNiUCxJQUFJLEVBQ0pMLEtBQUssRUFDTGEsSUFBSSxHQUFHLFFBQVEsRUFDZlAsSUFBSSxFQUNKO0VBQ0E7RUFDQSxPQUFPSCxTQUFTLENBQUNJLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDWCxVQUFVLENBQUNPLGlCQUFpQixFQUFFSCxJQUFJLEVBQUVMLEtBQUssRUFBRWEsSUFBSSxFQUFFUCxJQUFJLENBQUM7QUFDeEY7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU1EsNkJBQTZCQSxDQUFDQyxNQUFNLEVBQUU7RUFDN0M7RUFDQSxPQUFPWixTQUFTLENBQUNJLE9BQU8sQ0FBQ08sNkJBQTZCLENBQUNDLE1BQU0sRUFBRWQsVUFBVSxDQUFDTyxpQkFBaUIsQ0FBQztBQUM5Rjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTVEsY0FBYyxHQUVqQjtFQUNEWixTQUFTO0VBQ1RLLFlBQVk7RUFDWkMsR0FBRztFQUNIQyxLQUFLO0VBQ0xDLE1BQU07RUFDTjtBQUNGO0FBQ0E7RUFDRUU7QUFDRixDQUFDO0FBRURmLHNCQUFzQixHQUFHaUIsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL21ldHJpY3MvZXhwb3J0cy1kZWZhdWx0LmpzPzA0NGYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgYWdncmVnYXRvciA9IHJlcXVpcmUoJy4vYWdncmVnYXRvci5qcycpO1xuY29uc3QgZXhwb3J0cyQxID0gcmVxdWlyZSgnLi9leHBvcnRzLmpzJyk7XG5cbi8qKlxuICogQWRkcyBhIHZhbHVlIHRvIGEgY291bnRlciBtZXRyaWNcbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGUgU2VudHJ5IG1ldHJpY3MgYmV0YSBoYXMgZW5kZWQuIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuICovXG5mdW5jdGlvbiBpbmNyZW1lbnQobmFtZSwgdmFsdWUgPSAxLCBkYXRhKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBleHBvcnRzJDEubWV0cmljcy5pbmNyZW1lbnQoYWdncmVnYXRvci5NZXRyaWNzQWdncmVnYXRvciwgbmFtZSwgdmFsdWUsIGRhdGEpO1xufVxuXG4vKipcbiAqIEFkZHMgYSB2YWx1ZSB0byBhIGRpc3RyaWJ1dGlvbiBtZXRyaWNcbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGUgU2VudHJ5IG1ldHJpY3MgYmV0YSBoYXMgZW5kZWQuIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuICovXG5mdW5jdGlvbiBkaXN0cmlidXRpb24obmFtZSwgdmFsdWUsIGRhdGEpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGV4cG9ydHMkMS5tZXRyaWNzLmRpc3RyaWJ1dGlvbihhZ2dyZWdhdG9yLk1ldHJpY3NBZ2dyZWdhdG9yLCBuYW1lLCB2YWx1ZSwgZGF0YSk7XG59XG5cbi8qKlxuICogQWRkcyBhIHZhbHVlIHRvIGEgc2V0IG1ldHJpYy4gVmFsdWUgbXVzdCBiZSBhIHN0cmluZyBvciBpbnRlZ2VyLlxuICpcbiAqIEBkZXByZWNhdGVkIFRoZSBTZW50cnkgbWV0cmljcyBiZXRhIGhhcyBlbmRlZC4gVGhpcyBtZXRob2Qgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuXG4gKi9cbmZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSwgZGF0YSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgZXhwb3J0cyQxLm1ldHJpY3Muc2V0KGFnZ3JlZ2F0b3IuTWV0cmljc0FnZ3JlZ2F0b3IsIG5hbWUsIHZhbHVlLCBkYXRhKTtcbn1cblxuLyoqXG4gKiBBZGRzIGEgdmFsdWUgdG8gYSBnYXVnZSBtZXRyaWNcbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGUgU2VudHJ5IG1ldHJpY3MgYmV0YSBoYXMgZW5kZWQuIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuICovXG5mdW5jdGlvbiBnYXVnZShuYW1lLCB2YWx1ZSwgZGF0YSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgZXhwb3J0cyQxLm1ldHJpY3MuZ2F1Z2UoYWdncmVnYXRvci5NZXRyaWNzQWdncmVnYXRvciwgbmFtZSwgdmFsdWUsIGRhdGEpO1xufVxuXG4vKipcbiAqIEFkZHMgYSB0aW1pbmcgbWV0cmljLlxuICogVGhlIG1ldHJpYyBpcyBhZGRlZCBhcyBhIGRpc3RyaWJ1dGlvbiBtZXRyaWMuXG4gKlxuICogWW91IGNhbiBlaXRoZXIgZGlyZWN0bHkgY2FwdHVyZSBhIG51bWVyaWMgYHZhbHVlYCwgb3Igd3JhcCBhIGNhbGxiYWNrIGZ1bmN0aW9uIGluIGB0aW1pbmdgLlxuICogSW4gdGhlIGxhdHRlciBjYXNlLCB0aGUgZHVyYXRpb24gb2YgdGhlIGNhbGxiYWNrIGV4ZWN1dGlvbiB3aWxsIGJlIGNhcHR1cmVkIGFzIGEgc3BhbiAmIGEgbWV0cmljLlxuICpcbiAqIEBkZXByZWNhdGVkIFRoZSBTZW50cnkgbWV0cmljcyBiZXRhIGhhcyBlbmRlZC4gVGhpcyBtZXRob2Qgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuXG4gKi9cblxuZnVuY3Rpb24gdGltaW5nKFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdW5pdCA9ICdzZWNvbmQnLFxuICBkYXRhLFxuKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICByZXR1cm4gZXhwb3J0cyQxLm1ldHJpY3MudGltaW5nKGFnZ3JlZ2F0b3IuTWV0cmljc0FnZ3JlZ2F0b3IsIG5hbWUsIHZhbHVlLCB1bml0LCBkYXRhKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtZXRyaWNzIGFnZ3JlZ2F0b3IgZm9yIGEgZ2l2ZW4gY2xpZW50LlxuICovXG5mdW5jdGlvbiBnZXRNZXRyaWNzQWdncmVnYXRvckZvckNsaWVudChjbGllbnQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIHJldHVybiBleHBvcnRzJDEubWV0cmljcy5nZXRNZXRyaWNzQWdncmVnYXRvckZvckNsaWVudChjbGllbnQsIGFnZ3JlZ2F0b3IuTWV0cmljc0FnZ3JlZ2F0b3IpO1xufVxuXG4vKipcbiAqIFRoZSBtZXRyaWNzIEFQSSBpcyB1c2VkIHRvIGNhcHR1cmUgY3VzdG9tIG1ldHJpY3MgaW4gU2VudHJ5LlxuICpcbiAqIEBkZXByZWNhdGVkIFRoZSBTZW50cnkgbWV0cmljcyBiZXRhIGhhcyBlbmRlZC4gVGhpcyBleHBvcnQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuXG4gKi9cbmNvbnN0IG1ldHJpY3NEZWZhdWx0XG5cbiA9IHtcbiAgaW5jcmVtZW50LFxuICBkaXN0cmlidXRpb24sXG4gIHNldCxcbiAgZ2F1Z2UsXG4gIHRpbWluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmUgVGhpcyBpcyBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAqL1xuICBnZXRNZXRyaWNzQWdncmVnYXRvckZvckNsaWVudCxcbn07XG5cbmV4cG9ydHMubWV0cmljc0RlZmF1bHQgPSBtZXRyaWNzRGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cG9ydHMtZGVmYXVsdC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFnZ3JlZ2F0b3IiLCJyZXF1aXJlIiwiZXhwb3J0cyQxIiwiaW5jcmVtZW50IiwibmFtZSIsImRhdGEiLCJtZXRyaWNzIiwiTWV0cmljc0FnZ3JlZ2F0b3IiLCJkaXN0cmlidXRpb24iLCJzZXQiLCJnYXVnZSIsInRpbWluZyIsInVuaXQiLCJnZXRNZXRyaWNzQWdncmVnYXRvckZvckNsaWVudCIsImNsaWVudCIsIm1ldHJpY3NEZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports-default.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/exports.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\n__webpack_require__(/*! ../tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\nconst worldwide = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n__webpack_require__(/*! ../utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst trace = __webpack_require__(/*! ../tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst handleCallbackErrors = __webpack_require__(/*! ../utils/handleCallbackErrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js\");\n\n/**\n * Gets the metrics aggregator for a given client.\n * @param client The client for which to get the metrics aggregator.\n * @param Aggregator Optional metrics aggregator class to use to create an aggregator if one does not exist.\n */\nfunction getMetricsAggregatorForClient(client, Aggregator) {\n  const globalMetricsAggregators = worldwide.getGlobalSingleton('globalMetricsAggregators', () => new WeakMap());\n  const aggregator = globalMetricsAggregators.get(client);\n  if (aggregator) {\n    return aggregator;\n  }\n  const newAggregator = new Aggregator(client);\n  client.on('flush', () => newAggregator.flush());\n  client.on('close', () => newAggregator.close());\n  globalMetricsAggregators.set(client, newAggregator);\n  return newAggregator;\n}\nfunction addToMetricsAggregator(Aggregator, metricType, name, value, data = {}) {\n  const client = data.client || currentScopes.getClient();\n  if (!client) {\n    return;\n  }\n  const span = spanUtils.getActiveSpan();\n  const rootSpan = span ? spanUtils.getRootSpan(span) : undefined;\n  const transactionName = rootSpan && spanUtils.spanToJSON(rootSpan).description;\n  const {\n    unit,\n    tags,\n    timestamp\n  } = data;\n  const {\n    release,\n    environment\n  } = client.getOptions();\n  const metricTags = {};\n  if (release) {\n    metricTags.release = release;\n  }\n  if (environment) {\n    metricTags.environment = environment;\n  }\n  if (transactionName) {\n    metricTags.transaction = transactionName;\n  }\n  debugBuild.DEBUG_BUILD && logger.logger.log(`Adding value of ${value} to ${metricType} metric ${name}`);\n  const aggregator = getMetricsAggregatorForClient(client, Aggregator);\n  aggregator.add(metricType, name, value, unit, {\n    ...metricTags,\n    ...tags\n  }, timestamp);\n}\n\n/**\n * Adds a value to a counter metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction increment(aggregator, name, value = 1, data) {\n  addToMetricsAggregator(aggregator, constants.COUNTER_METRIC_TYPE, name, ensureNumber(value), data);\n}\n\n/**\n * Adds a value to a distribution metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction distribution(aggregator, name, value, data) {\n  addToMetricsAggregator(aggregator, constants.DISTRIBUTION_METRIC_TYPE, name, ensureNumber(value), data);\n}\n\n/**\n * Adds a timing metric.\n * The metric is added as a distribution metric.\n *\n * You can either directly capture a numeric `value`, or wrap a callback function in `timing`.\n * In the latter case, the duration of the callback execution will be captured as a span & a metric.\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction timing(aggregator, name, value, unit = 'second', data) {\n  // callback form\n  if (typeof value === 'function') {\n    const startTime = time.timestampInSeconds();\n    return trace.startSpanManual({\n      op: 'metrics.timing',\n      name,\n      startTime,\n      onlyIfParent: true\n    }, span => {\n      return handleCallbackErrors.handleCallbackErrors(() => value(), () => {\n        // no special error handling necessary\n      }, () => {\n        const endTime = time.timestampInSeconds();\n        const timeDiff = endTime - startTime;\n        // eslint-disable-next-line deprecation/deprecation\n        distribution(aggregator, name, timeDiff, {\n          ...data,\n          unit: 'second'\n        });\n        span.end(endTime);\n      });\n    });\n  }\n\n  // value form\n  // eslint-disable-next-line deprecation/deprecation\n  distribution(aggregator, name, value, {\n    ...data,\n    unit\n  });\n}\n\n/**\n * Adds a value to a set metric. Value must be a string or integer.\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction set(aggregator, name, value, data) {\n  addToMetricsAggregator(aggregator, constants.SET_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a gauge metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction gauge(aggregator, name, value, data) {\n  addToMetricsAggregator(aggregator, constants.GAUGE_METRIC_TYPE, name, ensureNumber(value), data);\n}\n\n/**\n * The metrics API is used to capture custom metrics in Sentry.\n *\n * @deprecated The Sentry metrics beta has ended. This export will be removed in a future release.\n */\nconst metrics = {\n  increment,\n  distribution,\n  set,\n  gauge,\n  timing,\n  /**\n   * @ignore This is for internal use only.\n   */\n  getMetricsAggregatorForClient\n};\n\n// Although this is typed to be a number, we try to handle strings as well here\nfunction ensureNumber(number) {\n  return typeof number === 'string' ? parseInt(number) : number;\n}\nexports.metrics = metrics;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/instance.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/instance.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js\");\n\n/**\n * A metric instance representing a counter.\n */\nclass CounterMetric {\n  constructor(_value) {\n    this._value = _value;\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return 1;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._value += value;\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return `${this._value}`;\n  }\n}\n\n/**\n * A metric instance representing a gauge.\n */\nclass GaugeMetric {\n  constructor(value) {\n    this._last = value;\n    this._min = value;\n    this._max = value;\n    this._sum = value;\n    this._count = 1;\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return 5;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._last = value;\n    if (value < this._min) {\n      this._min = value;\n    }\n    if (value > this._max) {\n      this._max = value;\n    }\n    this._sum += value;\n    this._count++;\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return `${this._last}:${this._min}:${this._max}:${this._sum}:${this._count}`;\n  }\n}\n\n/**\n * A metric instance representing a distribution.\n */\nclass DistributionMetric {\n  constructor(first) {\n    this._value = [first];\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return this._value.length;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._value.push(value);\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return this._value.join(':');\n  }\n}\n\n/**\n * A metric instance representing a set.\n */\nclass SetMetric {\n  constructor(first) {\n    this.first = first;\n    this._value = new Set([first]);\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return this._value.size;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._value.add(value);\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return Array.from(this._value).map(val => typeof val === 'string' ? utils.simpleHash(val) : val).join(':');\n  }\n}\nconst METRIC_MAP = {\n  [constants.COUNTER_METRIC_TYPE]: CounterMetric,\n  [constants.GAUGE_METRIC_TYPE]: GaugeMetric,\n  [constants.DISTRIBUTION_METRIC_TYPE]: DistributionMetric,\n  [constants.SET_METRIC_TYPE]: SetMetric\n};\nexports.CounterMetric = CounterMetric;\nexports.DistributionMetric = DistributionMetric;\nexports.GaugeMetric = GaugeMetric;\nexports.METRIC_MAP = METRIC_MAP;\nexports.SetMetric = SetMetric;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9pbnN0YW5jZS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQywrRkFBZ0IsQ0FBQztBQUMzQyxNQUFNQyxLQUFLLEdBQUdELG1CQUFPLENBQUMsdUZBQVksQ0FBQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0EsTUFBTUUsYUFBYSxDQUFFO0VBQ2xCQyxXQUFXQSxDQUFFQyxNQUFNLEVBQUU7SUFBQyxJQUFJLENBQUNBLE1BQU0sR0FBR0EsTUFBTTtFQUFDOztFQUU1QztFQUNDLElBQUlDLE1BQU1BLENBQUEsRUFBRztJQUNaLE9BQU8sQ0FBQztFQUNWOztFQUVBO0VBQ0NDLEdBQUdBLENBQUNSLEtBQUssRUFBRTtJQUNWLElBQUksQ0FBQ00sTUFBTSxJQUFJTixLQUFLO0VBQ3RCOztFQUVBO0VBQ0NTLFFBQVFBLENBQUEsRUFBRztJQUNWLE9BQVEsR0FBRSxJQUFJLENBQUNILE1BQU8sRUFBQztFQUN6QjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU1JLFdBQVcsQ0FBRTtFQUVoQkwsV0FBV0EsQ0FBQ0wsS0FBSyxFQUFFO0lBQ2xCLElBQUksQ0FBQ1csS0FBSyxHQUFHWCxLQUFLO0lBQ2xCLElBQUksQ0FBQ1ksSUFBSSxHQUFHWixLQUFLO0lBQ2pCLElBQUksQ0FBQ2EsSUFBSSxHQUFHYixLQUFLO0lBQ2pCLElBQUksQ0FBQ2MsSUFBSSxHQUFHZCxLQUFLO0lBQ2pCLElBQUksQ0FBQ2UsTUFBTSxHQUFHLENBQUM7RUFDakI7O0VBRUE7RUFDQyxJQUFJUixNQUFNQSxDQUFBLEVBQUc7SUFDWixPQUFPLENBQUM7RUFDVjs7RUFFQTtFQUNDQyxHQUFHQSxDQUFDUixLQUFLLEVBQUU7SUFDVixJQUFJLENBQUNXLEtBQUssR0FBR1gsS0FBSztJQUNsQixJQUFJQSxLQUFLLEdBQUcsSUFBSSxDQUFDWSxJQUFJLEVBQUU7TUFDckIsSUFBSSxDQUFDQSxJQUFJLEdBQUdaLEtBQUs7SUFDbkI7SUFDQSxJQUFJQSxLQUFLLEdBQUcsSUFBSSxDQUFDYSxJQUFJLEVBQUU7TUFDckIsSUFBSSxDQUFDQSxJQUFJLEdBQUdiLEtBQUs7SUFDbkI7SUFDQSxJQUFJLENBQUNjLElBQUksSUFBSWQsS0FBSztJQUNsQixJQUFJLENBQUNlLE1BQU0sRUFBRTtFQUNmOztFQUVBO0VBQ0NOLFFBQVFBLENBQUEsRUFBRztJQUNWLE9BQVEsR0FBRSxJQUFJLENBQUNFLEtBQU0sSUFBRyxJQUFJLENBQUNDLElBQUssSUFBRyxJQUFJLENBQUNDLElBQUssSUFBRyxJQUFJLENBQUNDLElBQUssSUFBRyxJQUFJLENBQUNDLE1BQU8sRUFBQztFQUM5RTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGtCQUFrQixDQUFFO0VBRXZCWCxXQUFXQSxDQUFDWSxLQUFLLEVBQUU7SUFDbEIsSUFBSSxDQUFDWCxNQUFNLEdBQUcsQ0FBQ1csS0FBSyxDQUFDO0VBQ3ZCOztFQUVBO0VBQ0MsSUFBSVYsTUFBTUEsQ0FBQSxFQUFHO0lBQ1osT0FBTyxJQUFJLENBQUNELE1BQU0sQ0FBQ1ksTUFBTTtFQUMzQjs7RUFFQTtFQUNDVixHQUFHQSxDQUFDUixLQUFLLEVBQUU7SUFDVixJQUFJLENBQUNNLE1BQU0sQ0FBQ2EsSUFBSSxDQUFDbkIsS0FBSyxDQUFDO0VBQ3pCOztFQUVBO0VBQ0NTLFFBQVFBLENBQUEsRUFBRztJQUNWLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNjLElBQUksQ0FBQyxHQUFHLENBQUM7RUFDOUI7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxTQUFTLENBQUU7RUFFZGhCLFdBQVdBLENBQUVZLEtBQUssRUFBRTtJQUFDLElBQUksQ0FBQ0EsS0FBSyxHQUFHQSxLQUFLO0lBQ3RDLElBQUksQ0FBQ1gsTUFBTSxHQUFHLElBQUlnQixHQUFHLENBQUMsQ0FBQ0wsS0FBSyxDQUFDLENBQUM7RUFDaEM7O0VBRUE7RUFDQyxJQUFJVixNQUFNQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUksQ0FBQ0QsTUFBTSxDQUFDaUIsSUFBSTtFQUN6Qjs7RUFFQTtFQUNDZixHQUFHQSxDQUFDUixLQUFLLEVBQUU7SUFDVixJQUFJLENBQUNNLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDUixLQUFLLENBQUM7RUFDeEI7O0VBRUE7RUFDQ1MsUUFBUUEsQ0FBQSxFQUFHO0lBQ1YsT0FBT2UsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDbkIsTUFBTSxDQUFDLENBQzNCb0IsR0FBRyxDQUFDQyxHQUFHLElBQUssT0FBT0EsR0FBRyxLQUFLLFFBQVEsR0FBR3hCLEtBQUssQ0FBQ3lCLFVBQVUsQ0FBQ0QsR0FBRyxDQUFDLEdBQUdBLEdBQUksQ0FBQyxDQUNuRVAsSUFBSSxDQUFDLEdBQUcsQ0FBQztFQUNkO0FBQ0Y7QUFFQSxNQUFNUyxVQUFVLEdBQUc7RUFDakIsQ0FBQzVCLFNBQVMsQ0FBQzZCLG1CQUFtQixHQUFHMUIsYUFBYTtFQUM5QyxDQUFDSCxTQUFTLENBQUM4QixpQkFBaUIsR0FBR3JCLFdBQVc7RUFDMUMsQ0FBQ1QsU0FBUyxDQUFDK0Isd0JBQXdCLEdBQUdoQixrQkFBa0I7RUFDeEQsQ0FBQ2YsU0FBUyxDQUFDZ0MsZUFBZSxHQUFHWjtBQUMvQixDQUFDO0FBRUR0QixxQkFBcUIsR0FBR0ssYUFBYTtBQUNyQ0wsMEJBQTBCLEdBQUdpQixrQkFBa0I7QUFDL0NqQixtQkFBbUIsR0FBR1csV0FBVztBQUNqQ1gsa0JBQWtCLEdBQUc4QixVQUFVO0FBQy9COUIsaUJBQWlCLEdBQUdzQixTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9pbnN0YW5jZS5qcz8zZDg1Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzLmpzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMuanMnKTtcblxuLyoqXG4gKiBBIG1ldHJpYyBpbnN0YW5jZSByZXByZXNlbnRpbmcgYSBjb3VudGVyLlxuICovXG5jbGFzcyBDb3VudGVyTWV0cmljICB7XG4gICBjb25zdHJ1Y3RvciggX3ZhbHVlKSB7dGhpcy5fdmFsdWUgPSBfdmFsdWU7fVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgZ2V0IHdlaWdodCgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgYWRkKHZhbHVlKSB7XG4gICAgdGhpcy5fdmFsdWUgKz0gdmFsdWU7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgJHt0aGlzLl92YWx1ZX1gO1xuICB9XG59XG5cbi8qKlxuICogQSBtZXRyaWMgaW5zdGFuY2UgcmVwcmVzZW50aW5nIGEgZ2F1Z2UuXG4gKi9cbmNsYXNzIEdhdWdlTWV0cmljICB7XG5cbiAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgdGhpcy5fbGFzdCA9IHZhbHVlO1xuICAgIHRoaXMuX21pbiA9IHZhbHVlO1xuICAgIHRoaXMuX21heCA9IHZhbHVlO1xuICAgIHRoaXMuX3N1bSA9IHZhbHVlO1xuICAgIHRoaXMuX2NvdW50ID0gMTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgZ2V0IHdlaWdodCgpIHtcbiAgICByZXR1cm4gNTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgYWRkKHZhbHVlKSB7XG4gICAgdGhpcy5fbGFzdCA9IHZhbHVlO1xuICAgIGlmICh2YWx1ZSA8IHRoaXMuX21pbikge1xuICAgICAgdGhpcy5fbWluID0gdmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA+IHRoaXMuX21heCkge1xuICAgICAgdGhpcy5fbWF4ID0gdmFsdWU7XG4gICAgfVxuICAgIHRoaXMuX3N1bSArPSB2YWx1ZTtcbiAgICB0aGlzLl9jb3VudCsrO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5fbGFzdH06JHt0aGlzLl9taW59OiR7dGhpcy5fbWF4fToke3RoaXMuX3N1bX06JHt0aGlzLl9jb3VudH1gO1xuICB9XG59XG5cbi8qKlxuICogQSBtZXRyaWMgaW5zdGFuY2UgcmVwcmVzZW50aW5nIGEgZGlzdHJpYnV0aW9uLlxuICovXG5jbGFzcyBEaXN0cmlidXRpb25NZXRyaWMgIHtcblxuICAgY29uc3RydWN0b3IoZmlyc3QpIHtcbiAgICB0aGlzLl92YWx1ZSA9IFtmaXJzdF07XG4gIH1cblxuICAvKiogQGluaGVyaXREb2MgKi9cbiAgIGdldCB3ZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlLmxlbmd0aDtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgYWRkKHZhbHVlKSB7XG4gICAgdGhpcy5fdmFsdWUucHVzaCh2YWx1ZSk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZS5qb2luKCc6Jyk7XG4gIH1cbn1cblxuLyoqXG4gKiBBIG1ldHJpYyBpbnN0YW5jZSByZXByZXNlbnRpbmcgYSBzZXQuXG4gKi9cbmNsYXNzIFNldE1ldHJpYyAge1xuXG4gICBjb25zdHJ1Y3RvciggZmlyc3QpIHt0aGlzLmZpcnN0ID0gZmlyc3Q7XG4gICAgdGhpcy5fdmFsdWUgPSBuZXcgU2V0KFtmaXJzdF0pO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gICBnZXQgd2VpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZS5zaXplO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBhZGQodmFsdWUpIHtcbiAgICB0aGlzLl92YWx1ZS5hZGQodmFsdWUpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl92YWx1ZSlcbiAgICAgIC5tYXAodmFsID0+ICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/IHV0aWxzLnNpbXBsZUhhc2godmFsKSA6IHZhbCkpXG4gICAgICAuam9pbignOicpO1xuICB9XG59XG5cbmNvbnN0IE1FVFJJQ19NQVAgPSB7XG4gIFtjb25zdGFudHMuQ09VTlRFUl9NRVRSSUNfVFlQRV06IENvdW50ZXJNZXRyaWMsXG4gIFtjb25zdGFudHMuR0FVR0VfTUVUUklDX1RZUEVdOiBHYXVnZU1ldHJpYyxcbiAgW2NvbnN0YW50cy5ESVNUUklCVVRJT05fTUVUUklDX1RZUEVdOiBEaXN0cmlidXRpb25NZXRyaWMsXG4gIFtjb25zdGFudHMuU0VUX01FVFJJQ19UWVBFXTogU2V0TWV0cmljLFxufTtcblxuZXhwb3J0cy5Db3VudGVyTWV0cmljID0gQ291bnRlck1ldHJpYztcbmV4cG9ydHMuRGlzdHJpYnV0aW9uTWV0cmljID0gRGlzdHJpYnV0aW9uTWV0cmljO1xuZXhwb3J0cy5HYXVnZU1ldHJpYyA9IEdhdWdlTWV0cmljO1xuZXhwb3J0cy5NRVRSSUNfTUFQID0gTUVUUklDX01BUDtcbmV4cG9ydHMuU2V0TWV0cmljID0gU2V0TWV0cmljO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdGFuY2UuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb25zdGFudHMiLCJyZXF1aXJlIiwidXRpbHMiLCJDb3VudGVyTWV0cmljIiwiY29uc3RydWN0b3IiLCJfdmFsdWUiLCJ3ZWlnaHQiLCJhZGQiLCJ0b1N0cmluZyIsIkdhdWdlTWV0cmljIiwiX2xhc3QiLCJfbWluIiwiX21heCIsIl9zdW0iLCJfY291bnQiLCJEaXN0cmlidXRpb25NZXRyaWMiLCJmaXJzdCIsImxlbmd0aCIsInB1c2giLCJqb2luIiwiU2V0TWV0cmljIiwiU2V0Iiwic2l6ZSIsIkFycmF5IiwiZnJvbSIsIm1hcCIsInZhbCIsInNpbXBsZUhhc2giLCJNRVRSSUNfTUFQIiwiQ09VTlRFUl9NRVRSSUNfVFlQRSIsIkdBVUdFX01FVFJJQ19UWVBFIiwiRElTVFJJQlVUSU9OX01FVFJJQ19UWVBFIiwiU0VUX01FVFJJQ19UWVBFIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/instance.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * key: bucketKey\n * value: [exportKey, MetricSummary]\n */\n\nconst METRICS_SPAN_FIELD = '_sentryMetrics';\n\n/**\n * Fetches the metric summary if it exists for the passed span\n */\nfunction getMetricSummaryJsonForSpan(span) {\n  const storage = span[METRICS_SPAN_FIELD];\n  if (!storage) {\n    return undefined;\n  }\n  const output = {};\n  for (const [, [exportKey, summary]] of storage) {\n    const arr = output[exportKey] || (output[exportKey] = []);\n    arr.push(object.dropUndefinedKeys(summary));\n  }\n  return output;\n}\n\n/**\n * Updates the metric summary on a span.\n */\nfunction updateMetricSummaryOnSpan(span, metricType, sanitizedName, value, unit, tags, bucketKey) {\n  const existingStorage = span[METRICS_SPAN_FIELD];\n  const storage = existingStorage || (span[METRICS_SPAN_FIELD] = new Map());\n  const exportKey = `${metricType}:${sanitizedName}@${unit}`;\n  const bucketItem = storage.get(bucketKey);\n  if (bucketItem) {\n    const [, summary] = bucketItem;\n    storage.set(bucketKey, [exportKey, {\n      min: Math.min(summary.min, value),\n      max: Math.max(summary.max, value),\n      count: summary.count += 1,\n      sum: summary.sum += value,\n      tags: summary.tags\n    }]);\n  } else {\n    storage.set(bucketKey, [exportKey, {\n      min: value,\n      max: value,\n      count: 1,\n      sum: value,\n      tags\n    }]);\n  }\n}\nexports.getMetricSummaryJsonForSpan = getMetricSummaryJsonForSpan;\nexports.updateMetricSummaryOnSpan = updateMetricSummaryOnSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9tZXRyaWMtc3VtbWFyeS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQzs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUMsa0JBQWtCLEdBQUcsZ0JBQWdCOztBQUUzQztBQUNBO0FBQ0E7QUFDQSxTQUFTQywyQkFBMkJBLENBQUNDLElBQUksRUFBRTtFQUN6QyxNQUFNQyxPQUFPLEdBQUlELElBQUksQ0FBR0Ysa0JBQWtCLENBQUM7RUFFM0MsSUFBSSxDQUFDRyxPQUFPLEVBQUU7SUFDWixPQUFPQyxTQUFTO0VBQ2xCO0VBQ0EsTUFBTUMsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUVqQixLQUFLLE1BQU0sR0FBRyxDQUFDQyxTQUFTLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLElBQUlKLE9BQU8sRUFBRTtJQUM5QyxNQUFNSyxHQUFHLEdBQUdILE1BQU0sQ0FBQ0MsU0FBUyxDQUFDLEtBQUtELE1BQU0sQ0FBQ0MsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3pERSxHQUFHLENBQUNDLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxpQkFBaUIsQ0FBQ0gsT0FBTyxDQUFDLENBQUM7RUFDN0M7RUFFQSxPQUFPRixNQUFNO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU00seUJBQXlCQSxDQUNoQ1QsSUFBSSxFQUNKVSxVQUFVLEVBQ1ZDLGFBQWEsRUFDYmhCLEtBQUssRUFDTGlCLElBQUksRUFDSkMsSUFBSSxFQUNKQyxTQUFTLEVBQ1Q7RUFDQSxNQUFNQyxlQUFlLEdBQUlmLElBQUksQ0FBR0Ysa0JBQWtCLENBQUM7RUFDbkQsTUFBTUcsT0FBTyxHQUNYYyxlQUFlLEtBQ2JmLElBQUksQ0FBR0Ysa0JBQWtCLENBQUMsR0FBRyxJQUFJa0IsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUUzQyxNQUFNWixTQUFTLEdBQUksR0FBRU0sVUFBVyxJQUFHQyxhQUFjLElBQUdDLElBQUssRUFBQztFQUMxRCxNQUFNSyxVQUFVLEdBQUdoQixPQUFPLENBQUNpQixHQUFHLENBQUNKLFNBQVMsQ0FBQztFQUV6QyxJQUFJRyxVQUFVLEVBQUU7SUFDZCxNQUFNLEdBQUdaLE9BQU8sQ0FBQyxHQUFHWSxVQUFVO0lBQzlCaEIsT0FBTyxDQUFDa0IsR0FBRyxDQUFDTCxTQUFTLEVBQUUsQ0FDckJWLFNBQVMsRUFDVDtNQUNFZ0IsR0FBRyxFQUFFQyxJQUFJLENBQUNELEdBQUcsQ0FBQ2YsT0FBTyxDQUFDZSxHQUFHLEVBQUV6QixLQUFLLENBQUM7TUFDakMyQixHQUFHLEVBQUVELElBQUksQ0FBQ0MsR0FBRyxDQUFDakIsT0FBTyxDQUFDaUIsR0FBRyxFQUFFM0IsS0FBSyxDQUFDO01BQ2pDNEIsS0FBSyxFQUFHbEIsT0FBTyxDQUFDa0IsS0FBSyxJQUFJLENBQUU7TUFDM0JDLEdBQUcsRUFBR25CLE9BQU8sQ0FBQ21CLEdBQUcsSUFBSTdCLEtBQU07TUFDM0JrQixJQUFJLEVBQUVSLE9BQU8sQ0FBQ1E7SUFDaEIsQ0FBQyxDQUNGLENBQUM7RUFDSixDQUFDLE1BQU07SUFDTFosT0FBTyxDQUFDa0IsR0FBRyxDQUFDTCxTQUFTLEVBQUUsQ0FDckJWLFNBQVMsRUFDVDtNQUNFZ0IsR0FBRyxFQUFFekIsS0FBSztNQUNWMkIsR0FBRyxFQUFFM0IsS0FBSztNQUNWNEIsS0FBSyxFQUFFLENBQUM7TUFDUkMsR0FBRyxFQUFFN0IsS0FBSztNQUNWa0I7SUFDRixDQUFDLENBQ0YsQ0FBQztFQUNKO0FBQ0Y7QUFFQW5CLG1DQUFtQyxHQUFHSywyQkFBMkI7QUFDakVMLGlDQUFpQyxHQUFHZSx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9tZXRyaWNzL21ldHJpYy1zdW1tYXJ5LmpzPzA0MWIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgb2JqZWN0ID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3Qvb2JqZWN0LmpzJyk7XG5cbi8qKlxuICoga2V5OiBidWNrZXRLZXlcbiAqIHZhbHVlOiBbZXhwb3J0S2V5LCBNZXRyaWNTdW1tYXJ5XVxuICovXG5cbmNvbnN0IE1FVFJJQ1NfU1BBTl9GSUVMRCA9ICdfc2VudHJ5TWV0cmljcyc7XG5cbi8qKlxuICogRmV0Y2hlcyB0aGUgbWV0cmljIHN1bW1hcnkgaWYgaXQgZXhpc3RzIGZvciB0aGUgcGFzc2VkIHNwYW5cbiAqL1xuZnVuY3Rpb24gZ2V0TWV0cmljU3VtbWFyeUpzb25Gb3JTcGFuKHNwYW4pIHtcbiAgY29uc3Qgc3RvcmFnZSA9IChzcGFuIClbTUVUUklDU19TUEFOX0ZJRUxEXTtcblxuICBpZiAoIXN0b3JhZ2UpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuXG4gIGZvciAoY29uc3QgWywgW2V4cG9ydEtleSwgc3VtbWFyeV1dIG9mIHN0b3JhZ2UpIHtcbiAgICBjb25zdCBhcnIgPSBvdXRwdXRbZXhwb3J0S2V5XSB8fCAob3V0cHV0W2V4cG9ydEtleV0gPSBbXSk7XG4gICAgYXJyLnB1c2gob2JqZWN0LmRyb3BVbmRlZmluZWRLZXlzKHN1bW1hcnkpKTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgbWV0cmljIHN1bW1hcnkgb24gYSBzcGFuLlxuICovXG5mdW5jdGlvbiB1cGRhdGVNZXRyaWNTdW1tYXJ5T25TcGFuKFxuICBzcGFuLFxuICBtZXRyaWNUeXBlLFxuICBzYW5pdGl6ZWROYW1lLFxuICB2YWx1ZSxcbiAgdW5pdCxcbiAgdGFncyxcbiAgYnVja2V0S2V5LFxuKSB7XG4gIGNvbnN0IGV4aXN0aW5nU3RvcmFnZSA9IChzcGFuIClbTUVUUklDU19TUEFOX0ZJRUxEXTtcbiAgY29uc3Qgc3RvcmFnZSA9XG4gICAgZXhpc3RpbmdTdG9yYWdlIHx8XG4gICAgKChzcGFuIClbTUVUUklDU19TUEFOX0ZJRUxEXSA9IG5ldyBNYXAoKSk7XG5cbiAgY29uc3QgZXhwb3J0S2V5ID0gYCR7bWV0cmljVHlwZX06JHtzYW5pdGl6ZWROYW1lfUAke3VuaXR9YDtcbiAgY29uc3QgYnVja2V0SXRlbSA9IHN0b3JhZ2UuZ2V0KGJ1Y2tldEtleSk7XG5cbiAgaWYgKGJ1Y2tldEl0ZW0pIHtcbiAgICBjb25zdCBbLCBzdW1tYXJ5XSA9IGJ1Y2tldEl0ZW07XG4gICAgc3RvcmFnZS5zZXQoYnVja2V0S2V5LCBbXG4gICAgICBleHBvcnRLZXksXG4gICAgICB7XG4gICAgICAgIG1pbjogTWF0aC5taW4oc3VtbWFyeS5taW4sIHZhbHVlKSxcbiAgICAgICAgbWF4OiBNYXRoLm1heChzdW1tYXJ5Lm1heCwgdmFsdWUpLFxuICAgICAgICBjb3VudDogKHN1bW1hcnkuY291bnQgKz0gMSksXG4gICAgICAgIHN1bTogKHN1bW1hcnkuc3VtICs9IHZhbHVlKSxcbiAgICAgICAgdGFnczogc3VtbWFyeS50YWdzLFxuICAgICAgfSxcbiAgICBdKTtcbiAgfSBlbHNlIHtcbiAgICBzdG9yYWdlLnNldChidWNrZXRLZXksIFtcbiAgICAgIGV4cG9ydEtleSxcbiAgICAgIHtcbiAgICAgICAgbWluOiB2YWx1ZSxcbiAgICAgICAgbWF4OiB2YWx1ZSxcbiAgICAgICAgY291bnQ6IDEsXG4gICAgICAgIHN1bTogdmFsdWUsXG4gICAgICAgIHRhZ3MsXG4gICAgICB9LFxuICAgIF0pO1xuICB9XG59XG5cbmV4cG9ydHMuZ2V0TWV0cmljU3VtbWFyeUpzb25Gb3JTcGFuID0gZ2V0TWV0cmljU3VtbWFyeUpzb25Gb3JTcGFuO1xuZXhwb3J0cy51cGRhdGVNZXRyaWNTdW1tYXJ5T25TcGFuID0gdXBkYXRlTWV0cmljU3VtbWFyeU9uU3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldHJpYy1zdW1tYXJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwib2JqZWN0IiwicmVxdWlyZSIsIk1FVFJJQ1NfU1BBTl9GSUVMRCIsImdldE1ldHJpY1N1bW1hcnlKc29uRm9yU3BhbiIsInNwYW4iLCJzdG9yYWdlIiwidW5kZWZpbmVkIiwib3V0cHV0IiwiZXhwb3J0S2V5Iiwic3VtbWFyeSIsImFyciIsInB1c2giLCJkcm9wVW5kZWZpbmVkS2V5cyIsInVwZGF0ZU1ldHJpY1N1bW1hcnlPblNwYW4iLCJtZXRyaWNUeXBlIiwic2FuaXRpemVkTmFtZSIsInVuaXQiLCJ0YWdzIiwiYnVja2V0S2V5IiwiZXhpc3RpbmdTdG9yYWdlIiwiTWFwIiwiYnVja2V0SXRlbSIsImdldCIsInNldCIsIm1pbiIsIk1hdGgiLCJtYXgiLCJjb3VudCIsInN1bSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * Generate bucket key from metric properties.\n */\nfunction getBucketKey(metricType, name, unit, tags) {\n  const stringifiedTags = Object.entries(object.dropUndefinedKeys(tags)).sort((a, b) => a[0].localeCompare(b[0]));\n  return `${metricType}${name}${unit}${stringifiedTags}`;\n}\n\n/* eslint-disable no-bitwise */\n/**\n * Simple hash function for strings.\n */\nfunction simpleHash(s) {\n  let rv = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    rv = (rv << 5) - rv + c;\n    rv &= rv;\n  }\n  return rv >>> 0;\n}\n/* eslint-enable no-bitwise */\n\n/**\n * Serialize metrics buckets into a string based on statsd format.\n *\n * Example of format:\n * metric.name@second:1:1.2|d|#a:value,b:anothervalue|T12345677\n * Segments:\n * name: metric.name\n * unit: second\n * value: [1, 1.2]\n * type of metric: d (distribution)\n * tags: { a: value, b: anothervalue }\n * timestamp: 12345677\n */\nfunction serializeMetricBuckets(metricBucketItems) {\n  let out = '';\n  for (const item of metricBucketItems) {\n    const tagEntries = Object.entries(item.tags);\n    const maybeTags = tagEntries.length > 0 ? `|#${tagEntries.map(([key, value]) => `${key}:${value}`).join(',')}` : '';\n    out += `${item.name}@${item.unit}:${item.metric}|${item.metricType}${maybeTags}|T${item.timestamp}\\n`;\n  }\n  return out;\n}\n\n/**\n * Sanitizes units\n *\n * These Regex's are straight from the normalisation docs:\n * https://develop.sentry.dev/sdk/metrics/#normalization\n */\nfunction sanitizeUnit(unit) {\n  return unit.replace(/[^\\w]+/gi, '_');\n}\n\n/**\n * Sanitizes metric keys\n *\n * These Regex's are straight from the normalisation docs:\n * https://develop.sentry.dev/sdk/metrics/#normalization\n */\nfunction sanitizeMetricKey(key) {\n  return key.replace(/[^\\w\\-.]+/gi, '_');\n}\n\n/**\n * Sanitizes metric keys\n *\n * These Regex's are straight from the normalisation docs:\n * https://develop.sentry.dev/sdk/metrics/#normalization\n */\nfunction sanitizeTagKey(key) {\n  return key.replace(/[^\\w\\-./]+/gi, '');\n}\n\n/**\n * These Regex's are straight from the normalisation docs:\n * https://develop.sentry.dev/sdk/metrics/#normalization\n */\nconst tagValueReplacements = [['\\n', '\\\\n'], ['\\r', '\\\\r'], ['\\t', '\\\\t'], ['\\\\', '\\\\\\\\'], ['|', '\\\\u{7c}'], [',', '\\\\u{2c}']];\nfunction getCharOrReplacement(input) {\n  for (const [search, replacement] of tagValueReplacements) {\n    if (input === search) {\n      return replacement;\n    }\n  }\n  return input;\n}\nfunction sanitizeTagValue(value) {\n  return [...value].reduce((acc, char) => acc + getCharOrReplacement(char), '');\n}\n\n/**\n * Sanitizes tags.\n */\nfunction sanitizeTags(unsanitizedTags) {\n  const tags = {};\n  for (const key in unsanitizedTags) {\n    if (Object.prototype.hasOwnProperty.call(unsanitizedTags, key)) {\n      const sanitizedKey = sanitizeTagKey(key);\n      tags[sanitizedKey] = sanitizeTagValue(String(unsanitizedTags[key]));\n    }\n  }\n  return tags;\n}\nexports.getBucketKey = getBucketKey;\nexports.sanitizeMetricKey = sanitizeMetricKey;\nexports.sanitizeTags = sanitizeTags;\nexports.sanitizeUnit = sanitizeUnit;\nexports.serializeMetricBuckets = serializeMetricBuckets;\nexports.simpleHash = simpleHash;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/profiling.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/profiling.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nfunction isProfilingIntegrationWithProfiler(integration) {\n  return !!integration && typeof integration['_profiler'] !== 'undefined' && typeof integration['_profiler']['start'] === 'function' && typeof integration['_profiler']['stop'] === 'function';\n}\n/**\n * Starts the Sentry continuous profiler.\n * This mode is exclusive with the transaction profiler and will only work if the profilesSampleRate is set to a falsy value.\n * In continuous profiling mode, the profiler will keep reporting profile chunks to Sentry until it is stopped, which allows for continuous profiling of the application.\n */\nfunction startProfiler() {\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n  const integration = client.getIntegrationByName('ProfilingIntegration');\n  if (!integration) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('ProfilingIntegration is not available');\n    return;\n  }\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n  integration._profiler.start();\n}\n\n/**\n * Stops the Sentry continuous profiler.\n * Calls to stop will stop the profiler and flush the currently collected profile data to Sentry.\n */\nfunction stopProfiler() {\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n  const integration = client.getIntegrationByName('ProfilingIntegration');\n  if (!integration) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('ProfilingIntegration is not available');\n    return;\n  }\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n  integration._profiler.stop();\n}\nconst profiler = {\n  startProfiler,\n  stopProfiler\n};\nexports.profiler = profiler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvcHJvZmlsaW5nLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLCtGQUFvQixDQUFDO0FBQ25ELE1BQU1DLFVBQVUsR0FBR0QsbUJBQU8sQ0FBQywyRkFBa0IsQ0FBQztBQUM5QyxNQUFNRSxNQUFNLEdBQUdGLG1CQUFPLENBQUMseUdBQXlCLENBQUM7QUFFakQsU0FBU0csa0NBQWtDQSxDQUN6Q0MsV0FBVyxFQUNYO0VBQ0EsT0FDRSxDQUFDLENBQUNBLFdBQVcsSUFDYixPQUFPQSxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssV0FBVyxJQUMvQyxPQUFPQSxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssVUFBVSxJQUN2RCxPQUFPQSxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssVUFBVTtBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxhQUFhQSxDQUFBLEVBQUc7RUFDdkIsTUFBTUMsTUFBTSxHQUFHUCxhQUFhLENBQUNRLFNBQVMsQ0FBQyxDQUFDO0VBQ3hDLElBQUksQ0FBQ0QsTUFBTSxFQUFFO0lBQ1hMLFVBQVUsQ0FBQ08sV0FBVyxJQUFJTixNQUFNLENBQUNBLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0lBQ3BHO0VBQ0Y7RUFFQSxNQUFNTCxXQUFXLEdBQUdFLE1BQU0sQ0FBQ0ksb0JBQW9CLENBQUMsc0JBQXNCLENBQUM7RUFFdkUsSUFBSSxDQUFDTixXQUFXLEVBQUU7SUFDaEJILFVBQVUsQ0FBQ08sV0FBVyxJQUFJTixNQUFNLENBQUNBLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLHVDQUF1QyxDQUFDO0lBQ3JGO0VBQ0Y7RUFFQSxJQUFJLENBQUNOLGtDQUFrQyxDQUFDQyxXQUFXLENBQUMsRUFBRTtJQUNwREgsVUFBVSxDQUFDTyxXQUFXLElBQUlOLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDTyxJQUFJLENBQUMscURBQXFELENBQUM7SUFDbkc7RUFDRjtFQUVBTCxXQUFXLENBQUNPLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxZQUFZQSxDQUFBLEVBQUc7RUFDdEIsTUFBTVAsTUFBTSxHQUFHUCxhQUFhLENBQUNRLFNBQVMsQ0FBQyxDQUFDO0VBQ3hDLElBQUksQ0FBQ0QsTUFBTSxFQUFFO0lBQ1hMLFVBQVUsQ0FBQ08sV0FBVyxJQUFJTixNQUFNLENBQUNBLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0lBQ3BHO0VBQ0Y7RUFFQSxNQUFNTCxXQUFXLEdBQUdFLE1BQU0sQ0FBQ0ksb0JBQW9CLENBQUMsc0JBQXNCLENBQUM7RUFDdkUsSUFBSSxDQUFDTixXQUFXLEVBQUU7SUFDaEJILFVBQVUsQ0FBQ08sV0FBVyxJQUFJTixNQUFNLENBQUNBLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLHVDQUF1QyxDQUFDO0lBQ3JGO0VBQ0Y7RUFFQSxJQUFJLENBQUNOLGtDQUFrQyxDQUFDQyxXQUFXLENBQUMsRUFBRTtJQUNwREgsVUFBVSxDQUFDTyxXQUFXLElBQUlOLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDTyxJQUFJLENBQUMscURBQXFELENBQUM7SUFDbkc7RUFDRjtFQUVBTCxXQUFXLENBQUNPLFNBQVMsQ0FBQ0csSUFBSSxDQUFDLENBQUM7QUFDOUI7QUFFQSxNQUFNQyxRQUFRLEdBQUc7RUFDZlYsYUFBYTtFQUNiUTtBQUNGLENBQUM7QUFFRGhCLGdCQUFnQixHQUFHa0IsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3Byb2ZpbGluZy5qcz9mMTg5Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGN1cnJlbnRTY29wZXMgPSByZXF1aXJlKCcuL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuXG5mdW5jdGlvbiBpc1Byb2ZpbGluZ0ludGVncmF0aW9uV2l0aFByb2ZpbGVyKFxuICBpbnRlZ3JhdGlvbixcbikge1xuICByZXR1cm4gKFxuICAgICEhaW50ZWdyYXRpb24gJiZcbiAgICB0eXBlb2YgaW50ZWdyYXRpb25bJ19wcm9maWxlciddICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBpbnRlZ3JhdGlvblsnX3Byb2ZpbGVyJ11bJ3N0YXJ0J10gPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgaW50ZWdyYXRpb25bJ19wcm9maWxlciddWydzdG9wJ10gPT09ICdmdW5jdGlvbidcbiAgKTtcbn1cbi8qKlxuICogU3RhcnRzIHRoZSBTZW50cnkgY29udGludW91cyBwcm9maWxlci5cbiAqIFRoaXMgbW9kZSBpcyBleGNsdXNpdmUgd2l0aCB0aGUgdHJhbnNhY3Rpb24gcHJvZmlsZXIgYW5kIHdpbGwgb25seSB3b3JrIGlmIHRoZSBwcm9maWxlc1NhbXBsZVJhdGUgaXMgc2V0IHRvIGEgZmFsc3kgdmFsdWUuXG4gKiBJbiBjb250aW51b3VzIHByb2ZpbGluZyBtb2RlLCB0aGUgcHJvZmlsZXIgd2lsbCBrZWVwIHJlcG9ydGluZyBwcm9maWxlIGNodW5rcyB0byBTZW50cnkgdW50aWwgaXQgaXMgc3RvcHBlZCwgd2hpY2ggYWxsb3dzIGZvciBjb250aW51b3VzIHByb2ZpbGluZyBvZiB0aGUgYXBwbGljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0UHJvZmlsZXIoKSB7XG4gIGNvbnN0IGNsaWVudCA9IGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCk7XG4gIGlmICghY2xpZW50KSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nZ2VyLndhcm4oJ05vIFNlbnRyeSBjbGllbnQgYXZhaWxhYmxlLCBwcm9maWxpbmcgaXMgbm90IHN0YXJ0ZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpbnRlZ3JhdGlvbiA9IGNsaWVudC5nZXRJbnRlZ3JhdGlvbkJ5TmFtZSgnUHJvZmlsaW5nSW50ZWdyYXRpb24nKTtcblxuICBpZiAoIWludGVncmF0aW9uKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nZ2VyLndhcm4oJ1Byb2ZpbGluZ0ludGVncmF0aW9uIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWlzUHJvZmlsaW5nSW50ZWdyYXRpb25XaXRoUHJvZmlsZXIoaW50ZWdyYXRpb24pKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nZ2VyLndhcm4oJ1Byb2ZpbGVyIGlzIG5vdCBhdmFpbGFibGUgb24gcHJvZmlsaW5nIGludGVncmF0aW9uLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGludGVncmF0aW9uLl9wcm9maWxlci5zdGFydCgpO1xufVxuXG4vKipcbiAqIFN0b3BzIHRoZSBTZW50cnkgY29udGludW91cyBwcm9maWxlci5cbiAqIENhbGxzIHRvIHN0b3Agd2lsbCBzdG9wIHRoZSBwcm9maWxlciBhbmQgZmx1c2ggdGhlIGN1cnJlbnRseSBjb2xsZWN0ZWQgcHJvZmlsZSBkYXRhIHRvIFNlbnRyeS5cbiAqL1xuZnVuY3Rpb24gc3RvcFByb2ZpbGVyKCkge1xuICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuICBpZiAoIWNsaWVudCkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZ2dlci53YXJuKCdObyBTZW50cnkgY2xpZW50IGF2YWlsYWJsZSwgcHJvZmlsaW5nIGlzIG5vdCBzdGFydGVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaW50ZWdyYXRpb24gPSBjbGllbnQuZ2V0SW50ZWdyYXRpb25CeU5hbWUoJ1Byb2ZpbGluZ0ludGVncmF0aW9uJyk7XG4gIGlmICghaW50ZWdyYXRpb24pIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2dnZXIud2FybignUHJvZmlsaW5nSW50ZWdyYXRpb24gaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghaXNQcm9maWxpbmdJbnRlZ3JhdGlvbldpdGhQcm9maWxlcihpbnRlZ3JhdGlvbikpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2dnZXIud2FybignUHJvZmlsZXIgaXMgbm90IGF2YWlsYWJsZSBvbiBwcm9maWxpbmcgaW50ZWdyYXRpb24uJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW50ZWdyYXRpb24uX3Byb2ZpbGVyLnN0b3AoKTtcbn1cblxuY29uc3QgcHJvZmlsZXIgPSB7XG4gIHN0YXJ0UHJvZmlsZXIsXG4gIHN0b3BQcm9maWxlcixcbn07XG5cbmV4cG9ydHMucHJvZmlsZXIgPSBwcm9maWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2ZpbGluZy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImN1cnJlbnRTY29wZXMiLCJyZXF1aXJlIiwiZGVidWdCdWlsZCIsImxvZ2dlciIsImlzUHJvZmlsaW5nSW50ZWdyYXRpb25XaXRoUHJvZmlsZXIiLCJpbnRlZ3JhdGlvbiIsInN0YXJ0UHJvZmlsZXIiLCJjbGllbnQiLCJnZXRDbGllbnQiLCJERUJVR19CVUlMRCIsIndhcm4iLCJnZXRJbnRlZ3JhdGlvbkJ5TmFtZSIsIl9wcm9maWxlciIsInN0YXJ0Iiwic3RvcFByb2ZpbGVyIiwic3RvcCIsInByb2ZpbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/profiling.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/scope.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/scope.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst propagationContext = __webpack_require__(/*! ./utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst time = __webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst merge = __webpack_require__(/*! ./utils/merge.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js\");\nconst spanOnScope = __webpack_require__(/*! ./utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information.\n */\nclass ScopeClass {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called during event processing. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /** Propagation Context for distributed tracing */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n\n  /** Session */\n\n  /** Request Mode Session Status */\n  // eslint-disable-next-line deprecation/deprecation\n\n  /** The client on this scope */\n\n  /** Contains the last event id of a captured event.  */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: propagationContext.generateTraceId(),\n      spanId: propagationContext.generateSpanId()\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clone() {\n    const newScope = new ScopeClass();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = {\n      ...this._tags\n    };\n    newScope._extra = {\n      ...this._extra\n    };\n    newScope._contexts = {\n      ...this._contexts\n    };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values]\n      };\n    }\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._requestSession = this._requestSession;\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = {\n      ...this._sdkProcessingMetadata\n    };\n    newScope._propagationContext = {\n      ...this._propagationContext\n    };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n    spanOnScope._setSpanForScope(newScope, spanOnScope._getSpanForScope(this));\n    return newScope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setClient(client) {\n    this._client = client;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setLastEventId(lastEventId) {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getClient() {\n    return this._client;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  lastEventId() {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addScopeListener(callback) {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addEventProcessor(callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setUser(user) {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined\n    };\n    if (this._session) {\n      session.updateSession(this._session, {\n        user\n      });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getUser() {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  getRequestSession() {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  setRequestSession(requestSession) {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTags(tags) {\n    this._tags = {\n      ...this._tags,\n      ...tags\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTag(key, value) {\n    this._tags = {\n      ...this._tags,\n      [key]: value\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtras(extras) {\n    this._extra = {\n      ...this._extra,\n      ...extras\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtra(key, extra) {\n    this._extra = {\n      ...this._extra,\n      [key]: extra\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setFingerprint(fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setLevel(level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTransactionName(name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setSession(session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSession() {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  update(captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n    const [scopeInstance, requestSession] = scopeToMerge instanceof Scope ?\n    // eslint-disable-next-line deprecation/deprecation\n    [scopeToMerge.getScopeData(), scopeToMerge.getRequestSession()] : is.isPlainObject(scopeToMerge) ? [captureContext, captureContext.requestSession] : [];\n    const {\n      tags,\n      extra,\n      user,\n      contexts,\n      level,\n      fingerprint = [],\n      propagationContext\n    } = scopeInstance || {};\n    this._tags = {\n      ...this._tags,\n      ...tags\n    };\n    this._extra = {\n      ...this._extra,\n      ...extra\n    };\n    this._contexts = {\n      ...this._contexts,\n      ...contexts\n    };\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n    if (level) {\n      this._level = level;\n    }\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n    if (requestSession) {\n      this._requestSession = requestSession;\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear() {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._session = undefined;\n    spanOnScope._setSpanForScope(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({\n      traceId: propagationContext.generateTraceId()\n    });\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n    const mergedBreadcrumb = {\n      timestamp: time.dateTimestampInSeconds(),\n      ...breadcrumb\n    };\n    const breadcrumbs = this._breadcrumbs;\n    breadcrumbs.push(mergedBreadcrumb);\n    this._breadcrumbs = breadcrumbs.length > maxCrumbs ? breadcrumbs.slice(-maxCrumbs) : breadcrumbs;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getLastBreadcrumb() {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clearBreadcrumbs() {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addAttachment(attachment) {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clearAttachments() {\n    this._attachments = [];\n    return this;\n  }\n\n  /** @inheritDoc */\n  getScopeData() {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: spanOnScope._getSpanForScope(this)\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setSDKProcessingMetadata(newData) {\n    this._sdkProcessingMetadata = merge.merge(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setPropagationContext(context) {\n    this._propagationContext = {\n      // eslint-disable-next-line deprecation/deprecation\n      spanId: propagationContext.generateSpanId(),\n      ...context\n    };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getPropagationContext() {\n    return this._propagationContext;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureException(exception, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : misc.uuid4();\n    if (!this._client) {\n      logger.logger.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n    const syntheticException = new Error('Sentry syntheticException');\n    this._client.captureException(exception, {\n      originalException: exception,\n      syntheticException,\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureMessage(message, level, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : misc.uuid4();\n    if (!this._client) {\n      logger.logger.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n    const syntheticException = new Error(message);\n    this._client.captureMessage(message, level, {\n      originalException: message,\n      syntheticException,\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureEvent(event, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : misc.uuid4();\n    if (!this._client) {\n      logger.logger.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n    this._client.captureEvent(event, {\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  _notifyScopeListeners() {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n\n/**\n * Holds additional event information.\n */\nconst Scope = ScopeClass;\n\n/**\n * Holds additional event information.\n */\n\nexports.Scope = Scope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/sdk.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/sdk.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      logger.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      logger.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = currentScopes.getCurrentScope();\n  scope.update(options.initialScope);\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  client.init();\n  return client;\n}\n\n/**\n * Make the given client the current client.\n */\nfunction setCurrentClient(client) {\n  currentScopes.getCurrentScope().setClient(client);\n}\nexports.initAndBind = initAndBind;\nexports.setCurrentClient = setCurrentClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvc2RrLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLCtGQUFvQixDQUFDO0FBQ25ELE1BQU1DLFVBQVUsR0FBR0QsbUJBQU8sQ0FBQywyRkFBa0IsQ0FBQztBQUM5QyxNQUFNRSxNQUFNLEdBQUdGLG1CQUFPLENBQUMseUdBQXlCLENBQUM7O0FBRWpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0csV0FBV0EsQ0FDbEJDLFdBQVcsRUFDWEMsT0FBTyxFQUNQO0VBQ0EsSUFBSUEsT0FBTyxDQUFDQyxLQUFLLEtBQUssSUFBSSxFQUFFO0lBQzFCLElBQUlMLFVBQVUsQ0FBQ00sV0FBVyxFQUFFO01BQzFCTCxNQUFNLENBQUNBLE1BQU0sQ0FBQ00sTUFBTSxDQUFDLENBQUM7SUFDeEIsQ0FBQyxNQUFNO01BQ0w7TUFDQU4sTUFBTSxDQUFDTyxjQUFjLENBQUMsTUFBTTtRQUMxQjtRQUNBQyxPQUFPLENBQUNDLElBQUksQ0FBQyw4RUFBOEUsQ0FBQztNQUM5RixDQUFDLENBQUM7SUFDSjtFQUNGO0VBQ0EsTUFBTUMsS0FBSyxHQUFHYixhQUFhLENBQUNjLGVBQWUsQ0FBQyxDQUFDO0VBQzdDRCxLQUFLLENBQUNFLE1BQU0sQ0FBQ1QsT0FBTyxDQUFDVSxZQUFZLENBQUM7RUFFbEMsTUFBTUMsTUFBTSxHQUFHLElBQUlaLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDO0VBQ3ZDWSxnQkFBZ0IsQ0FBQ0QsTUFBTSxDQUFDO0VBQ3hCQSxNQUFNLENBQUNFLElBQUksQ0FBQyxDQUFDO0VBQ2IsT0FBT0YsTUFBTTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGdCQUFnQkEsQ0FBQ0QsTUFBTSxFQUFFO0VBQ2hDakIsYUFBYSxDQUFDYyxlQUFlLENBQUMsQ0FBQyxDQUFDTSxTQUFTLENBQUNILE1BQU0sQ0FBQztBQUNuRDtBQUVBbkIsbUJBQW1CLEdBQUdNLFdBQVc7QUFDakNOLHdCQUF3QixHQUFHb0IsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvc2RrLmpzPzRiMGMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJyk7XG5cbi8qKiBBIGNsYXNzIG9iamVjdCB0aGF0IGNhbiBpbnN0YW50aWF0ZSBDbGllbnQgb2JqZWN0cy4gKi9cblxuLyoqXG4gKiBJbnRlcm5hbCBmdW5jdGlvbiB0byBjcmVhdGUgYSBuZXcgU0RLIGNsaWVudCBpbnN0YW5jZS4gVGhlIGNsaWVudCBpc1xuICogaW5zdGFsbGVkIGFuZCB0aGVuIGJvdW5kIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICpcbiAqIEBwYXJhbSBjbGllbnRDbGFzcyBUaGUgY2xpZW50IGNsYXNzIHRvIGluc3RhbnRpYXRlLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBjbGllbnQuXG4gKi9cbmZ1bmN0aW9uIGluaXRBbmRCaW5kKFxuICBjbGllbnRDbGFzcyxcbiAgb3B0aW9ucyxcbikge1xuICBpZiAob3B0aW9ucy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuICAgIGlmIChkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEKSB7XG4gICAgICBsb2dnZXIubG9nZ2VyLmVuYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1c2UgYGNvbnNvbGUud2FybmAgcmF0aGVyIHRoYW4gYGxvZ2dlci53YXJuYCBzaW5jZSBieSBub24tZGVidWcgYnVuZGxlcyBoYXZlIGFsbCBgbG9nZ2VyLnhgIHN0YXRlbWVudHMgc3RyaXBwZWRcbiAgICAgIGxvZ2dlci5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignW1NlbnRyeV0gQ2Fubm90IGluaXRpYWxpemUgU0RLIHdpdGggYGRlYnVnYCBvcHRpb24gdXNpbmcgYSBub24tZGVidWcgYnVuZGxlLicpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHNjb3BlID0gY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGUoKTtcbiAgc2NvcGUudXBkYXRlKG9wdGlvbnMuaW5pdGlhbFNjb3BlKTtcblxuICBjb25zdCBjbGllbnQgPSBuZXcgY2xpZW50Q2xhc3Mob3B0aW9ucyk7XG4gIHNldEN1cnJlbnRDbGllbnQoY2xpZW50KTtcbiAgY2xpZW50LmluaXQoKTtcbiAgcmV0dXJuIGNsaWVudDtcbn1cblxuLyoqXG4gKiBNYWtlIHRoZSBnaXZlbiBjbGllbnQgdGhlIGN1cnJlbnQgY2xpZW50LlxuICovXG5mdW5jdGlvbiBzZXRDdXJyZW50Q2xpZW50KGNsaWVudCkge1xuICBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSgpLnNldENsaWVudChjbGllbnQpO1xufVxuXG5leHBvcnRzLmluaXRBbmRCaW5kID0gaW5pdEFuZEJpbmQ7XG5leHBvcnRzLnNldEN1cnJlbnRDbGllbnQgPSBzZXRDdXJyZW50Q2xpZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2RrLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3VycmVudFNjb3BlcyIsInJlcXVpcmUiLCJkZWJ1Z0J1aWxkIiwibG9nZ2VyIiwiaW5pdEFuZEJpbmQiLCJjbGllbnRDbGFzcyIsIm9wdGlvbnMiLCJkZWJ1ZyIsIkRFQlVHX0JVSUxEIiwiZW5hYmxlIiwiY29uc29sZVNhbmRib3giLCJjb25zb2xlIiwid2FybiIsInNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwidXBkYXRlIiwiaW5pdGlhbFNjb3BlIiwiY2xpZW50Iiwic2V0Q3VycmVudENsaWVudCIsImluaXQiLCJzZXRDbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/sdk.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/semanticAttributes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Use this attribute to represent the sample rate used for a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n\n/**\n * Use this attribute to represent the origin of a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';\n\n/** The reason why an idle span finished. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason';\n\n/** The unit of a measurement, which may be stored as a TimedEvent. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit';\n\n/** The value of a measurement, which may be stored as a TimedEvent. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value';\n\n/**\n * A custom span name set by users guaranteed to be taken over any automatically\n * inferred name. This attribute is removed before the span is sent.\n *\n * @internal only meant for internal SDK usage\n * @hidden\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name';\n\n/**\n * The id of the profile that this span occurred in.\n */\nconst SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id';\nconst SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time';\nconst SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit';\nconst SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key';\nconst SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size';\n\n/** TODO: Remove these once we update to latest semantic conventions */\nconst SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method';\nconst SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full';\nexports.SEMANTIC_ATTRIBUTE_CACHE_HIT = SEMANTIC_ATTRIBUTE_CACHE_HIT;\nexports.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE;\nexports.SEMANTIC_ATTRIBUTE_CACHE_KEY = SEMANTIC_ATTRIBUTE_CACHE_KEY;\nexports.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME;\nexports.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD;\nexports.SEMANTIC_ATTRIBUTE_PROFILE_ID = SEMANTIC_ATTRIBUTE_PROFILE_ID;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.SEMANTIC_ATTRIBUTE_URL_FULL = SEMANTIC_ATTRIBUTE_URL_FULL;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvc2VtYW50aWNBdHRyaWJ1dGVzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxnQ0FBZ0MsR0FBRyxlQUFlOztBQUV4RDtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxxQ0FBcUMsR0FBRyxvQkFBb0I7O0FBRWxFO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLDRCQUE0QixHQUFHLFdBQVc7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGdDQUFnQyxHQUFHLGVBQWU7O0FBRXhEO0FBQ0EsTUFBTUMsaURBQWlELEdBQUcsZ0NBQWdDOztBQUUxRjtBQUNBLE1BQU1DLDBDQUEwQyxHQUFHLHlCQUF5Qjs7QUFFNUU7QUFDQSxNQUFNQywyQ0FBMkMsR0FBRywwQkFBMEI7O0FBRTlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsMENBQTBDLEdBQUcseUJBQXlCOztBQUU1RTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyw2QkFBNkIsR0FBRyxtQkFBbUI7QUFFekQsTUFBTUMsaUNBQWlDLEdBQUcsdUJBQXVCO0FBRWpFLE1BQU1DLDRCQUE0QixHQUFHLFdBQVc7QUFFaEQsTUFBTUMsNEJBQTRCLEdBQUcsV0FBVztBQUVoRCxNQUFNQyxrQ0FBa0MsR0FBRyxpQkFBaUI7O0FBRTVEO0FBQ0EsTUFBTUMsc0NBQXNDLEdBQUcscUJBQXFCO0FBQ3BFLE1BQU1DLDJCQUEyQixHQUFHLFVBQVU7QUFFOUNoQixvQ0FBb0MsR0FBR1ksNEJBQTRCO0FBQ25FWiwwQ0FBMEMsR0FBR2Msa0NBQWtDO0FBQy9FZCxvQ0FBb0MsR0FBR2EsNEJBQTRCO0FBQ25FYix5Q0FBeUMsR0FBR1csaUNBQWlDO0FBQzdFWCw4Q0FBOEMsR0FBR2Usc0NBQXNDO0FBQ3ZGZixxQ0FBcUMsR0FBR1UsNkJBQTZCO0FBQ3JFVixrREFBa0QsR0FBR1MsMENBQTBDO0FBQy9GVCx5REFBeUQsR0FBR00saURBQWlEO0FBQzdHTixrREFBa0QsR0FBR08sMENBQTBDO0FBQy9GUCxtREFBbUQsR0FBR1EsMkNBQTJDO0FBQ2pHUixvQ0FBb0MsR0FBR0ksNEJBQTRCO0FBQ25FSix3Q0FBd0MsR0FBR0ssZ0NBQWdDO0FBQzNFTCw2Q0FBNkMsR0FBR0cscUNBQXFDO0FBQ3JGSCx3Q0FBd0MsR0FBR0UsZ0NBQWdDO0FBQzNFRixtQ0FBbUMsR0FBR2dCLDJCQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3NlbWFudGljQXR0cmlidXRlcy5qcz9mMWI2Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVXNlIHRoaXMgYXR0cmlidXRlIHRvIHJlcHJlc2VudCB0aGUgc291cmNlIG9mIGEgc3Bhbi5cbiAqIFNob3VsZCBiZSBvbmUgb2Y6IGN1c3RvbSwgdXJsLCByb3V0ZSwgdmlldywgY29tcG9uZW50LCB0YXNrLCB1bmtub3duXG4gKlxuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSA9ICdzZW50cnkuc291cmNlJztcblxuLyoqXG4gKiBVc2UgdGhpcyBhdHRyaWJ1dGUgdG8gcmVwcmVzZW50IHRoZSBzYW1wbGUgcmF0ZSB1c2VkIGZvciBhIHNwYW4uXG4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEUgPSAnc2VudHJ5LnNhbXBsZV9yYXRlJztcblxuLyoqXG4gKiBVc2UgdGhpcyBhdHRyaWJ1dGUgdG8gcmVwcmVzZW50IHRoZSBvcGVyYXRpb24gb2YgYSBzcGFuLlxuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QID0gJ3NlbnRyeS5vcCc7XG5cbi8qKlxuICogVXNlIHRoaXMgYXR0cmlidXRlIHRvIHJlcHJlc2VudCB0aGUgb3JpZ2luIG9mIGEgc3Bhbi5cbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4gPSAnc2VudHJ5Lm9yaWdpbic7XG5cbi8qKiBUaGUgcmVhc29uIHdoeSBhbiBpZGxlIHNwYW4gZmluaXNoZWQuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0lETEVfU1BBTl9GSU5JU0hfUkVBU09OID0gJ3NlbnRyeS5pZGxlX3NwYW5fZmluaXNoX3JlYXNvbic7XG5cbi8qKiBUaGUgdW5pdCBvZiBhIG1lYXN1cmVtZW50LCB3aGljaCBtYXkgYmUgc3RvcmVkIGFzIGEgVGltZWRFdmVudC4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVCA9ICdzZW50cnkubWVhc3VyZW1lbnRfdW5pdCc7XG5cbi8qKiBUaGUgdmFsdWUgb2YgYSBtZWFzdXJlbWVudCwgd2hpY2ggbWF5IGJlIHN0b3JlZCBhcyBhIFRpbWVkRXZlbnQuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFID0gJ3NlbnRyeS5tZWFzdXJlbWVudF92YWx1ZSc7XG5cbi8qKlxuICogQSBjdXN0b20gc3BhbiBuYW1lIHNldCBieSB1c2VycyBndWFyYW50ZWVkIHRvIGJlIHRha2VuIG92ZXIgYW55IGF1dG9tYXRpY2FsbHlcbiAqIGluZmVycmVkIG5hbWUuIFRoaXMgYXR0cmlidXRlIGlzIHJlbW92ZWQgYmVmb3JlIHRoZSBzcGFuIGlzIHNlbnQuXG4gKlxuICogQGludGVybmFsIG9ubHkgbWVhbnQgZm9yIGludGVybmFsIFNESyB1c2FnZVxuICogQGhpZGRlblxuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUUgPSAnc2VudHJ5LmN1c3RvbV9zcGFuX25hbWUnO1xuXG4vKipcbiAqIFRoZSBpZCBvZiB0aGUgcHJvZmlsZSB0aGF0IHRoaXMgc3BhbiBvY2N1cnJlZCBpbi5cbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQgPSAnc2VudHJ5LnByb2ZpbGVfaWQnO1xuXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfRVhDTFVTSVZFX1RJTUUgPSAnc2VudHJ5LmV4Y2x1c2l2ZV90aW1lJztcblxuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVCA9ICdjYWNoZS5oaXQnO1xuXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZID0gJ2NhY2hlLmtleSc7XG5cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUgPSAnY2FjaGUuaXRlbV9zaXplJztcblxuLyoqIFRPRE86IFJlbW92ZSB0aGVzZSBvbmNlIHdlIHVwZGF0ZSB0byBsYXRlc3Qgc2VtYW50aWMgY29udmVudGlvbnMgKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9IVFRQX1JFUVVFU1RfTUVUSE9EID0gJ2h0dHAucmVxdWVzdC5tZXRob2QnO1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMID0gJ3VybC5mdWxsJztcblxuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElUID0gU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRSA9IFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkU7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9LRVkgPSBTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfRVhDTFVTSVZFX1RJTUUgPSBTRU1BTlRJQ19BVFRSSUJVVEVfRVhDTFVTSVZFX1RJTUU7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9IVFRQX1JFUVVFU1RfTUVUSE9EID0gU0VNQU5USUNfQVRUUklCVVRFX0hUVFBfUkVRVUVTVF9NRVRIT0Q7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9QUk9GSUxFX0lEID0gU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQ7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfQ1VTVE9NX1NQQU5fTkFNRSA9IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfQ1VTVE9NX1NQQU5fTkFNRTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9JRExFX1NQQU5fRklOSVNIX1JFQVNPTiA9IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfSURMRV9TUEFOX0ZJTklTSF9SRUFTT047XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVCA9IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9WQUxVRSA9IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVkFMVUU7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AgPSBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiA9IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFID0gU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UgPSBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMID0gU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VtYW50aWNBdHRyaWJ1dGVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9JRExFX1NQQU5fRklOSVNIX1JFQVNPTiIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVCIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVkFMVUUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfUFJPRklMRV9JRCIsIlNFTUFOVElDX0FUVFJJQlVURV9FWENMVVNJVkVfVElNRSIsIlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQiLCJTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZIiwiU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRSIsIlNFTUFOVElDX0FUVFJJQlVURV9IVFRQX1JFUVVFU1RfTUVUSE9EIiwiU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/server-runtime-client.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/server-runtime-client.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst baseclient = __webpack_require__(/*! ./baseclient.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/baseclient.js\");\nconst checkin = __webpack_require__(/*! ./checkin.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst sessionflusher = __webpack_require__(/*! ./sessionflusher.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/sessionflusher.js\");\nconst errors = __webpack_require__(/*! ./tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\n__webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ./utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n__webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanOnScope = __webpack_require__(/*! ./utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst syncpromise = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst eventbuilder = __webpack_require__(/*! ./utils-hoist/eventbuilder.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nclass ServerRuntimeClient extends baseclient.BaseClient {\n  // eslint-disable-next-line deprecation/deprecation\n\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  constructor(options) {\n    // Server clients always support tracing\n    errors.registerSpanErrorInstrumentation();\n    super(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  eventFromException(exception, hint) {\n    const event = eventbuilder.eventFromUnknownInput(this, this._options.stackParser, exception, hint);\n    event.level = 'error';\n    return syncpromise.resolvedSyncPromise(event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  eventFromMessage(message, level = 'info', hint) {\n    return syncpromise.resolvedSyncPromise(eventbuilder.eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureException(exception, hint, scope) {\n    // Check if `_sessionFlusher` exists because it is initialized (defined) only when the `autoSessionTracking` is enabled.\n    // The expectation is that session aggregates are only sent when `autoSessionTracking` is enabled.\n    // TODO(v9): Our goal in the future is to not have the `autoSessionTracking` option and instead rely on integrations doing the creation and sending of sessions. We will not have a central kill-switch for sessions.\n    // TODO(v9): This should move into the httpIntegration.\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._options.autoSessionTracking && this._sessionFlusher) {\n      // eslint-disable-next-line deprecation/deprecation\n      const requestSession = currentScopes.getIsolationScope().getRequestSession();\n\n      // Necessary checks to ensure this is code block is executed only within a request\n      // Should override the status only if `requestSession.status` is `Ok`, which is its initial stage\n      if (requestSession && requestSession.status === 'ok') {\n        requestSession.status = 'errored';\n      }\n    }\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureEvent(event, hint, scope) {\n    // Check if `_sessionFlusher` exists because it is initialized only when the `autoSessionTracking` is enabled.\n    // The expectation is that session aggregates are only sent when `autoSessionTracking` is enabled.\n    // TODO(v9): Our goal in the future is to not have the `autoSessionTracking` option and instead rely on integrations doing the creation and sending of sessions. We will not have a central kill-switch for sessions.\n    // TODO(v9): This should move into the httpIntegration.\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._options.autoSessionTracking && this._sessionFlusher) {\n      const eventType = event.type || 'exception';\n      const isException = eventType === 'exception' && event.exception && event.exception.values && event.exception.values.length > 0;\n\n      // If the event is of type Exception, then a request session should be captured\n      if (isException) {\n        // eslint-disable-next-line deprecation/deprecation\n        const requestSession = currentScopes.getIsolationScope().getRequestSession();\n\n        // Ensure that this is happening within the bounds of a request, and make sure not to override\n        // Session Status if Errored / Crashed\n        if (requestSession && requestSession.status === 'ok') {\n          requestSession.status = 'errored';\n        }\n      }\n    }\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   *\n   * @inheritdoc\n   */\n  close(timeout) {\n    if (this._sessionFlusher) {\n      this._sessionFlusher.close();\n    }\n    return super.close(timeout);\n  }\n\n  /**\n   * Initializes an instance of SessionFlusher on the client which will aggregate and periodically flush session data.\n   *\n   * NOTICE: This method will implicitly create an interval that is periodically called.\n   * To clean up this resources, call `.close()` when you no longer intend to use the client.\n   * Not doing so will result in a memory leak.\n   */\n  initSessionFlusher() {\n    const {\n      release,\n      environment\n    } = this._options;\n    if (!release) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot initialize an instance of SessionFlusher if no release is provided!');\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      this._sessionFlusher = new sessionflusher.SessionFlusher(this, {\n        release,\n        environment\n      });\n    }\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  captureCheckIn(checkIn, monitorConfig, scope) {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : misc.uuid4();\n    if (!this._isEnabled()) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('SDK not enabled, will not capture checkin.');\n      return id;\n    }\n    const options = this.getOptions();\n    const {\n      release,\n      environment,\n      tunnel\n    } = options;\n    const serializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment\n    };\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n        failure_issue_threshold: monitorConfig.failureIssueThreshold,\n        recovery_threshold: monitorConfig.recoveryThreshold\n      };\n    }\n    const [dynamicSamplingContext, traceContext] = this._getTraceInfoFromScope(scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext\n      };\n    }\n    const envelope = checkin.createCheckInEnvelope(serializedCheckIn, dynamicSamplingContext, this.getSdkMetadata(), tunnel, this.getDsn());\n    debugBuild.DEBUG_BUILD && logger.logger.info('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n    return id;\n  }\n\n  /**\n   * Method responsible for capturing/ending a request session by calling `incrementSessionStatusCount` to increment\n   * appropriate session aggregates bucket\n   *\n   * @deprecated This method should not be used or extended. It's functionality will move into the `httpIntegration` and not be part of any public API.\n   */\n  _captureRequestSession() {\n    if (!this._sessionFlusher) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('Discarded request mode session because autoSessionTracking option was disabled');\n    } else {\n      this._sessionFlusher.incrementSessionStatusCount();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _prepareEvent(event, hint, scope, isolationScope) {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: (event.contexts || {}).runtime || this._options.runtime\n      };\n    }\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n    return super._prepareEvent(event, hint, scope, isolationScope);\n  }\n\n  /** Extract trace information from scope */\n  _getTraceInfoFromScope(scope) {\n    if (!scope) {\n      return [undefined, undefined];\n    }\n    const span = spanOnScope._getSpanForScope(scope);\n    const traceContext = span ? spanUtils.spanToTraceContext(span) : currentScopes.getTraceContextFromScope(scope);\n    const dynamicSamplingContext$1 = span ? dynamicSamplingContext.getDynamicSamplingContextFromSpan(span) : dynamicSamplingContext.getDynamicSamplingContextFromScope(this, scope);\n    return [dynamicSamplingContext$1, traceContext];\n  }\n}\nexports.ServerRuntimeClient = ServerRuntimeClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/server-runtime-client.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/session.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/session.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n__webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ./utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\n__webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst time = __webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\n__webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = time.timestampInSeconds();\n  const session = {\n    sid: misc.uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session)\n  };\n  if (context) {\n    updateSession(session, context);\n  }\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nfunction updateSession(session, context = {}) {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n  session.timestamp = context.timestamp || time.timestampInSeconds();\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : misc.uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nfunction closeSession(session, status) {\n  let context = {};\n  if (status) {\n    context = {\n      status\n    };\n  } else if (session.status === 'ok') {\n    context = {\n      status: 'exited'\n    };\n  }\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session) {\n  return object.dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent\n    }\n  });\n}\nexports.closeSession = closeSession;\nexports.makeSession = makeSession;\nexports.updateSession = updateSession;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/session.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/sessionflusher.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/sessionflusher.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * @deprecated `SessionFlusher` is deprecated and will be removed in the next major version of the SDK.\n */\n// TODO(v9): The goal for the SessionFlusher is to become a stupidly simple mechanism to aggregate \"Sessions\" (actually \"RequestSessions\"). It should probably live directly inside the Http integration/instrumentation.\n// eslint-disable-next-line deprecation/deprecation\nclass SessionFlusher {\n  // We adjust the type here to add the `unref()` part, as setInterval can technically return a number or a NodeJS.Timer\n\n  constructor(client, attrs) {\n    this._client = client;\n    this.flushTimeout = 60;\n    this._pendingAggregates = new Map();\n    this._isEnabled = true;\n\n    // Call to setInterval, so that flush is called every 60 seconds.\n    this._intervalId = setInterval(() => this.flush(), this.flushTimeout * 1000);\n    if (this._intervalId.unref) {\n      this._intervalId.unref();\n    }\n    this._sessionAttrs = attrs;\n  }\n\n  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */\n  flush() {\n    const sessionAggregates = this.getSessionAggregates();\n    if (sessionAggregates.aggregates.length === 0) {\n      return;\n    }\n    this._pendingAggregates = new Map();\n    this._client.sendSession(sessionAggregates);\n  }\n\n  /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n  getSessionAggregates() {\n    const aggregates = Array.from(this._pendingAggregates.values());\n    const sessionAggregates = {\n      attrs: this._sessionAttrs,\n      aggregates\n    };\n    return object.dropUndefinedKeys(sessionAggregates);\n  }\n\n  /** JSDoc */\n  close() {\n    clearInterval(this._intervalId);\n    this._isEnabled = false;\n    this.flush();\n  }\n\n  /**\n   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n   * `_incrementSessionStatusCount` along with the start date\n   */\n  incrementSessionStatusCount() {\n    if (!this._isEnabled) {\n      return;\n    }\n    const isolationScope = currentScopes.getIsolationScope();\n    // eslint-disable-next-line deprecation/deprecation\n    const requestSession = isolationScope.getRequestSession();\n    if (requestSession && requestSession.status) {\n      this._incrementSessionStatusCount(requestSession.status, new Date());\n      // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n      // case captureRequestSession is called more than once to prevent double count\n      // eslint-disable-next-line deprecation/deprecation\n      isolationScope.setRequestSession(undefined);\n      /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n    }\n  }\n\n  /**\n   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n   * the session received\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  _incrementSessionStatusCount(status, date) {\n    // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n    const sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n\n    // corresponds to aggregated sessions in one specific minute bucket\n    // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n    let aggregationCounts = this._pendingAggregates.get(sessionStartedTrunc);\n    if (!aggregationCounts) {\n      aggregationCounts = {\n        started: new Date(sessionStartedTrunc).toISOString()\n      };\n      this._pendingAggregates.set(sessionStartedTrunc, aggregationCounts);\n    }\n    switch (status) {\n      case 'errored':\n        aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n        return aggregationCounts.errored;\n      case 'ok':\n        aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n        return aggregationCounts.exited;\n      default:\n        aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n        return aggregationCounts.crashed;\n    }\n  }\n}\nexports.SessionFlusher = SessionFlusher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/sessionflusher.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst constants = __webpack_require__(/*! ../constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst baggage = __webpack_require__(/*! ../utils-hoist/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * If you change this value, also update the terser plugin config to\n * avoid minification of the object property!\n */\nconst FROZEN_DSC_FIELD = '_frozenDsc';\n\n/**\n * Freeze the given DSC on the given span.\n */\nfunction freezeDscOnSpan(span, dsc) {\n  const spanWithMaybeDsc = span;\n  object.addNonEnumerableProperty(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n}\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nfunction getDynamicSamplingContextFromClient(trace_id, client) {\n  const options = client.getOptions();\n  const {\n    publicKey: public_key\n  } = client.getDsn() || {};\n  const dsc = object.dropUndefinedKeys({\n    environment: options.environment || constants.DEFAULT_ENVIRONMENT,\n    release: options.release,\n    public_key,\n    trace_id\n  });\n  client.emit('createDsc', dsc);\n  return dsc;\n}\n\n/**\n * Get the dynamic sampling context for the currently active scopes.\n */\nfunction getDynamicSamplingContextFromScope(client, scope) {\n  const propagationContext = scope.getPropagationContext();\n  return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n}\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nfunction getDynamicSamplingContextFromSpan(span) {\n  const client = currentScopes.getClient();\n  if (!client) {\n    return {};\n  }\n  const rootSpan = spanUtils.getRootSpan(span);\n\n  // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n  const frozenDsc = rootSpan[FROZEN_DSC_FIELD];\n  if (frozenDsc) {\n    return frozenDsc;\n  }\n\n  // For OpenTelemetry, we freeze the DSC on the trace state\n  const traceState = rootSpan.spanContext().traceState;\n  const traceStateDsc = traceState && traceState.get('sentry.dsc');\n\n  // If the span has a DSC, we want it to take precedence\n  const dscOnTraceState = traceStateDsc && baggage.baggageHeaderToDynamicSamplingContext(traceStateDsc);\n  if (dscOnTraceState) {\n    return dscOnTraceState;\n  }\n\n  // Else, we generate it from the span\n  const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n  const jsonSpan = spanUtils.spanToJSON(rootSpan);\n  const attributes = jsonSpan.data || {};\n  const maybeSampleRate = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  if (maybeSampleRate != null) {\n    dsc.sample_rate = `${maybeSampleRate}`;\n  }\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const source = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  const name = jsonSpan.description;\n  if (source !== 'url' && name) {\n    dsc.transaction = name;\n  }\n\n  // How can we even land here with hasTracingEnabled() returning false?\n  // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n  // So we end up with an active span that is not sampled (neither positively nor negatively)\n  if (hasTracingEnabled.hasTracingEnabled()) {\n    dsc.sampled = String(spanUtils.spanIsSampled(rootSpan));\n  }\n  client.emit('createDsc', dsc, rootSpan);\n  return dsc;\n}\n\n/**\n * Convert a Span to a baggage header.\n */\nfunction spanToBaggageHeader(span) {\n  const dsc = getDynamicSamplingContextFromSpan(span);\n  return baggage.dynamicSamplingContextToSentryBaggageHeader(dsc);\n}\nexports.freezeDscOnSpan = freezeDscOnSpan;\nexports.getDynamicSamplingContextFromClient = getDynamicSamplingContextFromClient;\nexports.getDynamicSamplingContextFromScope = getDynamicSamplingContextFromScope;\nexports.getDynamicSamplingContextFromSpan = getDynamicSamplingContextFromSpan;\nexports.spanToBaggageHeader = spanToBaggageHeader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9keW5hbWljU2FtcGxpbmdDb250ZXh0LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsU0FBUyxHQUFHQyxtQkFBTyxDQUFDLHdGQUFpQixDQUFDO0FBQzVDLE1BQU1DLGFBQWEsR0FBR0QsbUJBQU8sQ0FBQyxnR0FBcUIsQ0FBQztBQUNwRCxNQUFNRSxrQkFBa0IsR0FBR0YsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUM5RCxNQUFNRyxPQUFPLEdBQUdILG1CQUFPLENBQUMsNEdBQTJCLENBQUM7QUFDcEQsTUFBTUksTUFBTSxHQUFHSixtQkFBTyxDQUFDLDBHQUEwQixDQUFDO0FBQ2xELE1BQU1LLGlCQUFpQixHQUFHTCxtQkFBTyxDQUFDLG9IQUErQixDQUFDO0FBQ2xFLE1BQU1NLFNBQVMsR0FBR04sbUJBQU8sQ0FBQyxvR0FBdUIsQ0FBQzs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNTyxnQkFBZ0IsR0FBRyxZQUFZOztBQUVyQztBQUNBO0FBQ0E7QUFDQSxTQUFTQyxlQUFlQSxDQUFDQyxJQUFJLEVBQUVDLEdBQUcsRUFBRTtFQUNsQyxNQUFNQyxnQkFBZ0IsR0FBR0YsSUFBSTtFQUM3QkwsTUFBTSxDQUFDUSx3QkFBd0IsQ0FBQ0QsZ0JBQWdCLEVBQUVKLGdCQUFnQixFQUFFRyxHQUFHLENBQUM7QUFDMUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNHLG1DQUFtQ0EsQ0FBQ0MsUUFBUSxFQUFFQyxNQUFNLEVBQUU7RUFDN0QsTUFBTUMsT0FBTyxHQUFHRCxNQUFNLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0VBRW5DLE1BQU07SUFBRUMsU0FBUyxFQUFFQztFQUFXLENBQUMsR0FBR0osTUFBTSxDQUFDSyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUV2RCxNQUFNVixHQUFHLEdBQUdOLE1BQU0sQ0FBQ2lCLGlCQUFpQixDQUFDO0lBQ25DQyxXQUFXLEVBQUVOLE9BQU8sQ0FBQ00sV0FBVyxJQUFJdkIsU0FBUyxDQUFDd0IsbUJBQW1CO0lBQ2pFQyxPQUFPLEVBQUVSLE9BQU8sQ0FBQ1EsT0FBTztJQUN4QkwsVUFBVTtJQUNWTDtFQUNGLENBQUMsQ0FBQztFQUVGQyxNQUFNLENBQUNVLElBQUksQ0FBQyxXQUFXLEVBQUVmLEdBQUcsQ0FBQztFQUU3QixPQUFPQSxHQUFHO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU2dCLGtDQUFrQ0EsQ0FBQ1gsTUFBTSxFQUFFWSxLQUFLLEVBQUU7RUFDekQsTUFBTUMsa0JBQWtCLEdBQUdELEtBQUssQ0FBQ0UscUJBQXFCLENBQUMsQ0FBQztFQUN4RCxPQUFPRCxrQkFBa0IsQ0FBQ2xCLEdBQUcsSUFBSUcsbUNBQW1DLENBQUNlLGtCQUFrQixDQUFDRSxPQUFPLEVBQUVmLE1BQU0sQ0FBQztBQUMxRzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNnQixpQ0FBaUNBLENBQUN0QixJQUFJLEVBQUU7RUFDL0MsTUFBTU0sTUFBTSxHQUFHZCxhQUFhLENBQUMrQixTQUFTLENBQUMsQ0FBQztFQUN4QyxJQUFJLENBQUNqQixNQUFNLEVBQUU7SUFDWCxPQUFPLENBQUMsQ0FBQztFQUNYO0VBRUEsTUFBTWtCLFFBQVEsR0FBRzNCLFNBQVMsQ0FBQzRCLFdBQVcsQ0FBQ3pCLElBQUksQ0FBQzs7RUFFNUM7RUFDQSxNQUFNMEIsU0FBUyxHQUFJRixRQUFRLENBQUcxQixnQkFBZ0IsQ0FBQztFQUMvQyxJQUFJNEIsU0FBUyxFQUFFO0lBQ2IsT0FBT0EsU0FBUztFQUNsQjs7RUFFQTtFQUNBLE1BQU1DLFVBQVUsR0FBR0gsUUFBUSxDQUFDSSxXQUFXLENBQUMsQ0FBQyxDQUFDRCxVQUFVO0VBQ3BELE1BQU1FLGFBQWEsR0FBR0YsVUFBVSxJQUFJQSxVQUFVLENBQUNHLEdBQUcsQ0FBQyxZQUFZLENBQUM7O0VBRWhFO0VBQ0EsTUFBTUMsZUFBZSxHQUFHRixhQUFhLElBQUluQyxPQUFPLENBQUNzQyxxQ0FBcUMsQ0FBQ0gsYUFBYSxDQUFDO0VBRXJHLElBQUlFLGVBQWUsRUFBRTtJQUNuQixPQUFPQSxlQUFlO0VBQ3hCOztFQUVBO0VBQ0EsTUFBTTlCLEdBQUcsR0FBR0csbUNBQW1DLENBQUNKLElBQUksQ0FBQzRCLFdBQVcsQ0FBQyxDQUFDLENBQUNQLE9BQU8sRUFBRWYsTUFBTSxDQUFDO0VBQ25GLE1BQU0yQixRQUFRLEdBQUdwQyxTQUFTLENBQUNxQyxVQUFVLENBQUNWLFFBQVEsQ0FBQztFQUMvQyxNQUFNVyxVQUFVLEdBQUdGLFFBQVEsQ0FBQ0csSUFBSSxJQUFJLENBQUMsQ0FBQztFQUN0QyxNQUFNQyxlQUFlLEdBQUdGLFVBQVUsQ0FBQzFDLGtCQUFrQixDQUFDNkMscUNBQXFDLENBQUM7RUFFNUYsSUFBSUQsZUFBZSxJQUFJLElBQUksRUFBRTtJQUMzQnBDLEdBQUcsQ0FBQ3NDLFdBQVcsR0FBSSxHQUFFRixlQUFnQixFQUFDO0VBQ3hDOztFQUVBO0VBQ0EsTUFBTUcsTUFBTSxHQUFHTCxVQUFVLENBQUMxQyxrQkFBa0IsQ0FBQ2dELGdDQUFnQyxDQUFDOztFQUU5RTtFQUNBLE1BQU1DLElBQUksR0FBR1QsUUFBUSxDQUFDVSxXQUFXO0VBQ2pDLElBQUlILE1BQU0sS0FBSyxLQUFLLElBQUlFLElBQUksRUFBRTtJQUM1QnpDLEdBQUcsQ0FBQzJDLFdBQVcsR0FBR0YsSUFBSTtFQUN4Qjs7RUFFQTtFQUNBO0VBQ0E7RUFDQSxJQUFJOUMsaUJBQWlCLENBQUNBLGlCQUFpQixDQUFDLENBQUMsRUFBRTtJQUN6Q0ssR0FBRyxDQUFDNEMsT0FBTyxHQUFHQyxNQUFNLENBQUNqRCxTQUFTLENBQUNrRCxhQUFhLENBQUN2QixRQUFRLENBQUMsQ0FBQztFQUN6RDtFQUVBbEIsTUFBTSxDQUFDVSxJQUFJLENBQUMsV0FBVyxFQUFFZixHQUFHLEVBQUV1QixRQUFRLENBQUM7RUFFdkMsT0FBT3ZCLEdBQUc7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTK0MsbUJBQW1CQSxDQUFDaEQsSUFBSSxFQUFFO0VBQ2pDLE1BQU1DLEdBQUcsR0FBR3FCLGlDQUFpQyxDQUFDdEIsSUFBSSxDQUFDO0VBQ25ELE9BQU9OLE9BQU8sQ0FBQ3VELDJDQUEyQyxDQUFDaEQsR0FBRyxDQUFDO0FBQ2pFO0FBRUFiLHVCQUF1QixHQUFHVyxlQUFlO0FBQ3pDWCwyQ0FBMkMsR0FBR2dCLG1DQUFtQztBQUNqRmhCLDBDQUEwQyxHQUFHNkIsa0NBQWtDO0FBQy9FN0IseUNBQXlDLEdBQUdrQyxpQ0FBaUM7QUFDN0VsQywyQkFBMkIsR0FBRzRELG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3RyYWNpbmcvZHluYW1pY1NhbXBsaW5nQ29udGV4dC5qcz9lNTA2Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cy5qcycpO1xuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4uL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IHNlbWFudGljQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4uL3NlbWFudGljQXR0cmlidXRlcy5qcycpO1xuY29uc3QgYmFnZ2FnZSA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2JhZ2dhZ2UuanMnKTtcbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L29iamVjdC5qcycpO1xuY29uc3QgaGFzVHJhY2luZ0VuYWJsZWQgPSByZXF1aXJlKCcuLi91dGlscy9oYXNUcmFjaW5nRW5hYmxlZC5qcycpO1xuY29uc3Qgc3BhblV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvc3BhblV0aWxzLmpzJyk7XG5cbi8qKlxuICogSWYgeW91IGNoYW5nZSB0aGlzIHZhbHVlLCBhbHNvIHVwZGF0ZSB0aGUgdGVyc2VyIHBsdWdpbiBjb25maWcgdG9cbiAqIGF2b2lkIG1pbmlmaWNhdGlvbiBvZiB0aGUgb2JqZWN0IHByb3BlcnR5IVxuICovXG5jb25zdCBGUk9aRU5fRFNDX0ZJRUxEID0gJ19mcm96ZW5Ec2MnO1xuXG4vKipcbiAqIEZyZWV6ZSB0aGUgZ2l2ZW4gRFNDIG9uIHRoZSBnaXZlbiBzcGFuLlxuICovXG5mdW5jdGlvbiBmcmVlemVEc2NPblNwYW4oc3BhbiwgZHNjKSB7XG4gIGNvbnN0IHNwYW5XaXRoTWF5YmVEc2MgPSBzcGFuIDtcbiAgb2JqZWN0LmFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eShzcGFuV2l0aE1heWJlRHNjLCBGUk9aRU5fRFNDX0ZJRUxELCBkc2MpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBkeW5hbWljIHNhbXBsaW5nIGNvbnRleHQgZnJvbSBhIGNsaWVudC5cbiAqXG4gKiBEaXNwYXRjaGVzIHRoZSBgY3JlYXRlRHNjYCBsaWZlY3ljbGUgaG9vayBhcyBhIHNpZGUgZWZmZWN0LlxuICovXG5mdW5jdGlvbiBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbUNsaWVudCh0cmFjZV9pZCwgY2xpZW50KSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuXG4gIGNvbnN0IHsgcHVibGljS2V5OiBwdWJsaWNfa2V5IH0gPSBjbGllbnQuZ2V0RHNuKCkgfHwge307XG5cbiAgY29uc3QgZHNjID0gb2JqZWN0LmRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICBlbnZpcm9ubWVudDogb3B0aW9ucy5lbnZpcm9ubWVudCB8fCBjb25zdGFudHMuREVGQVVMVF9FTlZJUk9OTUVOVCxcbiAgICByZWxlYXNlOiBvcHRpb25zLnJlbGVhc2UsXG4gICAgcHVibGljX2tleSxcbiAgICB0cmFjZV9pZCxcbiAgfSkgO1xuXG4gIGNsaWVudC5lbWl0KCdjcmVhdGVEc2MnLCBkc2MpO1xuXG4gIHJldHVybiBkc2M7XG59XG5cbi8qKlxuICogR2V0IHRoZSBkeW5hbWljIHNhbXBsaW5nIGNvbnRleHQgZm9yIHRoZSBjdXJyZW50bHkgYWN0aXZlIHNjb3Blcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TY29wZShjbGllbnQsIHNjb3BlKSB7XG4gIGNvbnN0IHByb3BhZ2F0aW9uQ29udGV4dCA9IHNjb3BlLmdldFByb3BhZ2F0aW9uQ29udGV4dCgpO1xuICByZXR1cm4gcHJvcGFnYXRpb25Db250ZXh0LmRzYyB8fCBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbUNsaWVudChwcm9wYWdhdGlvbkNvbnRleHQudHJhY2VJZCwgY2xpZW50KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZHluYW1pYyBzYW1wbGluZyBjb250ZXh0IGZyb20gYSBzcGFuIChhbmQgY2xpZW50IGFuZCBzY29wZSlcbiAqXG4gKiBAcGFyYW0gc3BhbiB0aGUgc3BhbiBmcm9tIHdoaWNoIGEgZmV3IHZhbHVlcyBsaWtlIHRoZSByb290IHNwYW4gbmFtZSBhbmQgc2FtcGxlIHJhdGUgYXJlIGV4dHJhY3RlZC5cbiAqXG4gKiBAcmV0dXJucyBhIGR5bmFtaWMgc2FtcGxpbmcgY29udGV4dFxuICovXG5mdW5jdGlvbiBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4oc3Bhbikge1xuICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuICBpZiAoIWNsaWVudCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IHJvb3RTcGFuID0gc3BhblV0aWxzLmdldFJvb3RTcGFuKHNwYW4pO1xuXG4gIC8vIEZvciBjb3JlIGltcGxlbWVudGF0aW9uLCB3ZSBmcmVlemUgdGhlIERTQyBvbnRvIHRoZSBzcGFuIGFzIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcbiAgY29uc3QgZnJvemVuRHNjID0gKHJvb3RTcGFuIClbRlJPWkVOX0RTQ19GSUVMRF07XG4gIGlmIChmcm96ZW5Ec2MpIHtcbiAgICByZXR1cm4gZnJvemVuRHNjO1xuICB9XG5cbiAgLy8gRm9yIE9wZW5UZWxlbWV0cnksIHdlIGZyZWV6ZSB0aGUgRFNDIG9uIHRoZSB0cmFjZSBzdGF0ZVxuICBjb25zdCB0cmFjZVN0YXRlID0gcm9vdFNwYW4uc3BhbkNvbnRleHQoKS50cmFjZVN0YXRlO1xuICBjb25zdCB0cmFjZVN0YXRlRHNjID0gdHJhY2VTdGF0ZSAmJiB0cmFjZVN0YXRlLmdldCgnc2VudHJ5LmRzYycpO1xuXG4gIC8vIElmIHRoZSBzcGFuIGhhcyBhIERTQywgd2Ugd2FudCBpdCB0byB0YWtlIHByZWNlZGVuY2VcbiAgY29uc3QgZHNjT25UcmFjZVN0YXRlID0gdHJhY2VTdGF0ZURzYyAmJiBiYWdnYWdlLmJhZ2dhZ2VIZWFkZXJUb0R5bmFtaWNTYW1wbGluZ0NvbnRleHQodHJhY2VTdGF0ZURzYyk7XG5cbiAgaWYgKGRzY09uVHJhY2VTdGF0ZSkge1xuICAgIHJldHVybiBkc2NPblRyYWNlU3RhdGU7XG4gIH1cblxuICAvLyBFbHNlLCB3ZSBnZW5lcmF0ZSBpdCBmcm9tIHRoZSBzcGFuXG4gIGNvbnN0IGRzYyA9IGdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tQ2xpZW50KHNwYW4uc3BhbkNvbnRleHQoKS50cmFjZUlkLCBjbGllbnQpO1xuICBjb25zdCBqc29uU3BhbiA9IHNwYW5VdGlscy5zcGFuVG9KU09OKHJvb3RTcGFuKTtcbiAgY29uc3QgYXR0cmlidXRlcyA9IGpzb25TcGFuLmRhdGEgfHwge307XG4gIGNvbnN0IG1heWJlU2FtcGxlUmF0ZSA9IGF0dHJpYnV0ZXNbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEVdO1xuXG4gIGlmIChtYXliZVNhbXBsZVJhdGUgIT0gbnVsbCkge1xuICAgIGRzYy5zYW1wbGVfcmF0ZSA9IGAke21heWJlU2FtcGxlUmF0ZX1gO1xuICB9XG5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byBoYXZlIGEgdHJhbnNhY3Rpb24gbmFtZSBpbiB0aGUgRFNDIGlmIHRoZSBzb3VyY2UgaXMgXCJ1cmxcIiBiZWNhdXNlIFVSTHMgbWlnaHQgY29udGFpbiBQSUlcbiAgY29uc3Qgc291cmNlID0gYXR0cmlidXRlc1tzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0VdO1xuXG4gIC8vIGFmdGVyIEpTT04gY29udmVyc2lvbiwgdHhuLm5hbWUgYmVjb21lcyBqc29uU3Bhbi5kZXNjcmlwdGlvblxuICBjb25zdCBuYW1lID0ganNvblNwYW4uZGVzY3JpcHRpb247XG4gIGlmIChzb3VyY2UgIT09ICd1cmwnICYmIG5hbWUpIHtcbiAgICBkc2MudHJhbnNhY3Rpb24gPSBuYW1lO1xuICB9XG5cbiAgLy8gSG93IGNhbiB3ZSBldmVuIGxhbmQgaGVyZSB3aXRoIGhhc1RyYWNpbmdFbmFibGVkKCkgcmV0dXJuaW5nIGZhbHNlP1xuICAvLyBPdGVsIGNyZWF0ZXMgYSBOb24tcmVjb3JkaW5nIHNwYW4gaW4gVHJhY2luZyBXaXRob3V0IFBlcmZvcm1hbmNlIG1vZGUgd2hlbiBoYW5kbGluZyBpbmNvbWluZyByZXF1ZXN0c1xuICAvLyBTbyB3ZSBlbmQgdXAgd2l0aCBhbiBhY3RpdmUgc3BhbiB0aGF0IGlzIG5vdCBzYW1wbGVkIChuZWl0aGVyIHBvc2l0aXZlbHkgbm9yIG5lZ2F0aXZlbHkpXG4gIGlmIChoYXNUcmFjaW5nRW5hYmxlZC5oYXNUcmFjaW5nRW5hYmxlZCgpKSB7XG4gICAgZHNjLnNhbXBsZWQgPSBTdHJpbmcoc3BhblV0aWxzLnNwYW5Jc1NhbXBsZWQocm9vdFNwYW4pKTtcbiAgfVxuXG4gIGNsaWVudC5lbWl0KCdjcmVhdGVEc2MnLCBkc2MsIHJvb3RTcGFuKTtcblxuICByZXR1cm4gZHNjO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBTcGFuIHRvIGEgYmFnZ2FnZSBoZWFkZXIuXG4gKi9cbmZ1bmN0aW9uIHNwYW5Ub0JhZ2dhZ2VIZWFkZXIoc3Bhbikge1xuICBjb25zdCBkc2MgPSBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4oc3Bhbik7XG4gIHJldHVybiBiYWdnYWdlLmR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIoZHNjKTtcbn1cblxuZXhwb3J0cy5mcmVlemVEc2NPblNwYW4gPSBmcmVlemVEc2NPblNwYW47XG5leHBvcnRzLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tQ2xpZW50ID0gZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21DbGllbnQ7XG5leHBvcnRzLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU2NvcGUgPSBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNjb3BlO1xuZXhwb3J0cy5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4gPSBnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW47XG5leHBvcnRzLnNwYW5Ub0JhZ2dhZ2VIZWFkZXIgPSBzcGFuVG9CYWdnYWdlSGVhZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHluYW1pY1NhbXBsaW5nQ29udGV4dC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbnN0YW50cyIsInJlcXVpcmUiLCJjdXJyZW50U2NvcGVzIiwic2VtYW50aWNBdHRyaWJ1dGVzIiwiYmFnZ2FnZSIsIm9iamVjdCIsImhhc1RyYWNpbmdFbmFibGVkIiwic3BhblV0aWxzIiwiRlJPWkVOX0RTQ19GSUVMRCIsImZyZWV6ZURzY09uU3BhbiIsInNwYW4iLCJkc2MiLCJzcGFuV2l0aE1heWJlRHNjIiwiYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21DbGllbnQiLCJ0cmFjZV9pZCIsImNsaWVudCIsIm9wdGlvbnMiLCJnZXRPcHRpb25zIiwicHVibGljS2V5IiwicHVibGljX2tleSIsImdldERzbiIsImRyb3BVbmRlZmluZWRLZXlzIiwiZW52aXJvbm1lbnQiLCJERUZBVUxUX0VOVklST05NRU5UIiwicmVsZWFzZSIsImVtaXQiLCJnZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNjb3BlIiwic2NvcGUiLCJwcm9wYWdhdGlvbkNvbnRleHQiLCJnZXRQcm9wYWdhdGlvbkNvbnRleHQiLCJ0cmFjZUlkIiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuIiwiZ2V0Q2xpZW50Iiwicm9vdFNwYW4iLCJnZXRSb290U3BhbiIsImZyb3plbkRzYyIsInRyYWNlU3RhdGUiLCJzcGFuQ29udGV4dCIsInRyYWNlU3RhdGVEc2MiLCJnZXQiLCJkc2NPblRyYWNlU3RhdGUiLCJiYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0IiwianNvblNwYW4iLCJzcGFuVG9KU09OIiwiYXR0cmlidXRlcyIsImRhdGEiLCJtYXliZVNhbXBsZVJhdGUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFIiwic2FtcGxlX3JhdGUiLCJzb3VyY2UiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInRyYW5zYWN0aW9uIiwic2FtcGxlZCIsIlN0cmluZyIsInNwYW5Jc1NhbXBsZWQiLCJzcGFuVG9CYWdnYWdlSGVhZGVyIiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dFRvU2VudHJ5QmFnZ2FnZUhlYWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/errors.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst globalError = __webpack_require__(/*! ../utils-hoist/instrument/globalError.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js\");\nconst globalUnhandledRejection = __webpack_require__(/*! ../utils-hoist/instrument/globalUnhandledRejection.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst spanstatus = __webpack_require__(/*! ./spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nlet errorsInstrumented = false;\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nfunction registerSpanErrorInstrumentation() {\n  if (errorsInstrumented) {\n    return;\n  }\n  errorsInstrumented = true;\n  globalError.addGlobalErrorInstrumentationHandler(errorCallback);\n  globalUnhandledRejection.addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active root span as failed\n */\nfunction errorCallback() {\n  const activeSpan = spanUtils.getActiveSpan();\n  const rootSpan = activeSpan && spanUtils.getRootSpan(activeSpan);\n  if (rootSpan) {\n    const message = 'internal_error';\n    debugBuild.DEBUG_BUILD && logger.logger.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n    rootSpan.setStatus({\n      code: spanstatus.SPAN_STATUS_ERROR,\n      message\n    });\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\nexports.registerSpanErrorInstrumentation = registerSpanErrorInstrumentation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxVQUFVLEdBQUdDLG1CQUFPLENBQUMsNEZBQW1CLENBQUM7QUFDL0MsTUFBTUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLDBJQUEwQyxDQUFDO0FBQ3ZFLE1BQU1FLHdCQUF3QixHQUFHRixtQkFBTyxDQUFDLG9LQUF1RCxDQUFDO0FBQ2pHLE1BQU1HLE1BQU0sR0FBR0gsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUNsRCxNQUFNSSxTQUFTLEdBQUdKLG1CQUFPLENBQUMsb0dBQXVCLENBQUM7QUFDbEQsTUFBTUssVUFBVSxHQUFHTCxtQkFBTyxDQUFDLGlHQUFpQixDQUFDO0FBRTdDLElBQUlNLGtCQUFrQixHQUFHLEtBQUs7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGdDQUFnQ0EsQ0FBQSxFQUFHO0VBQzFDLElBQUlELGtCQUFrQixFQUFFO0lBQ3RCO0VBQ0Y7RUFFQUEsa0JBQWtCLEdBQUcsSUFBSTtFQUN6QkwsV0FBVyxDQUFDTyxvQ0FBb0MsQ0FBQ0MsYUFBYSxDQUFDO0VBQy9EUCx3QkFBd0IsQ0FBQ1EsaURBQWlELENBQUNELGFBQWEsQ0FBQztBQUMzRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxhQUFhQSxDQUFBLEVBQUc7RUFDdkIsTUFBTUUsVUFBVSxHQUFHUCxTQUFTLENBQUNRLGFBQWEsQ0FBQyxDQUFDO0VBQzVDLE1BQU1DLFFBQVEsR0FBR0YsVUFBVSxJQUFJUCxTQUFTLENBQUNVLFdBQVcsQ0FBQ0gsVUFBVSxDQUFDO0VBQ2hFLElBQUlFLFFBQVEsRUFBRTtJQUNaLE1BQU1FLE9BQU8sR0FBRyxnQkFBZ0I7SUFDaENoQixVQUFVLENBQUNpQixXQUFXLElBQUliLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDYyxHQUFHLENBQUUsd0JBQXVCRixPQUFRLDJCQUEwQixDQUFDO0lBQ3ZHRixRQUFRLENBQUNLLFNBQVMsQ0FBQztNQUFFQyxJQUFJLEVBQUVkLFVBQVUsQ0FBQ2UsaUJBQWlCO01BQUVMO0lBQVEsQ0FBQyxDQUFDO0VBQ3JFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBTixhQUFhLENBQUNZLEdBQUcsR0FBRyw2QkFBNkI7QUFFakR4Qix3Q0FBd0MsR0FBR1UsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9lcnJvcnMuanM/NTIyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGdsb2JhbEVycm9yID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9nbG9iYWxFcnJvci5qcycpO1xuY29uc3QgZ2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9nbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuY29uc3Qgc3BhblV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvc3BhblV0aWxzLmpzJyk7XG5jb25zdCBzcGFuc3RhdHVzID0gcmVxdWlyZSgnLi9zcGFuc3RhdHVzLmpzJyk7XG5cbmxldCBlcnJvcnNJbnN0cnVtZW50ZWQgPSBmYWxzZTtcblxuLyoqXG4gKiBFbnN1cmUgdGhhdCBnbG9iYWwgZXJyb3JzIGF1dG9tYXRpY2FsbHkgc2V0IHRoZSBhY3RpdmUgc3BhbiBzdGF0dXMuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyU3BhbkVycm9ySW5zdHJ1bWVudGF0aW9uKCkge1xuICBpZiAoZXJyb3JzSW5zdHJ1bWVudGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZXJyb3JzSW5zdHJ1bWVudGVkID0gdHJ1ZTtcbiAgZ2xvYmFsRXJyb3IuYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyKGVycm9yQ2FsbGJhY2spO1xuICBnbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlcihlcnJvckNhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBJZiBhbiBlcnJvciBvciB1bmhhbmRsZWQgcHJvbWlzZSBvY2N1cnMsIHdlIG1hcmsgdGhlIGFjdGl2ZSByb290IHNwYW4gYXMgZmFpbGVkXG4gKi9cbmZ1bmN0aW9uIGVycm9yQ2FsbGJhY2soKSB7XG4gIGNvbnN0IGFjdGl2ZVNwYW4gPSBzcGFuVXRpbHMuZ2V0QWN0aXZlU3BhbigpO1xuICBjb25zdCByb290U3BhbiA9IGFjdGl2ZVNwYW4gJiYgc3BhblV0aWxzLmdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pO1xuICBpZiAocm9vdFNwYW4pIHtcbiAgICBjb25zdCBtZXNzYWdlID0gJ2ludGVybmFsX2Vycm9yJztcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2dnZXIubG9nKGBbVHJhY2luZ10gUm9vdCBzcGFuOiAke21lc3NhZ2V9IC0+IEdsb2JhbCBlcnJvciBvY2N1cnJlZGApO1xuICAgIHJvb3RTcGFuLnNldFN0YXR1cyh7IGNvZGU6IHNwYW5zdGF0dXMuU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2UgfSk7XG4gIH1cbn1cblxuLy8gVGhlIGZ1bmN0aW9uIG5hbWUgd2lsbCBiZSBsb3N0IHdoZW4gYnVuZGxpbmcgYnV0IHdlIG5lZWQgdG8gYmUgYWJsZSB0byBpZGVudGlmeSB0aGlzIGxpc3RlbmVyIGxhdGVyIHRvIG1haW50YWluIHRoZVxuLy8gbm9kZS5qcyBkZWZhdWx0IGV4aXQgYmVoYXZpb3VyXG5lcnJvckNhbGxiYWNrLnRhZyA9ICdzZW50cnlfdHJhY2luZ0Vycm9yQ2FsbGJhY2snO1xuXG5leHBvcnRzLnJlZ2lzdGVyU3BhbkVycm9ySW5zdHJ1bWVudGF0aW9uID0gcmVnaXN0ZXJTcGFuRXJyb3JJbnN0cnVtZW50YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWJ1Z0J1aWxkIiwicmVxdWlyZSIsImdsb2JhbEVycm9yIiwiZ2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uIiwibG9nZ2VyIiwic3BhblV0aWxzIiwic3BhbnN0YXR1cyIsImVycm9yc0luc3RydW1lbnRlZCIsInJlZ2lzdGVyU3BhbkVycm9ySW5zdHJ1bWVudGF0aW9uIiwiYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiZXJyb3JDYWxsYmFjayIsImFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJhY3RpdmVTcGFuIiwiZ2V0QWN0aXZlU3BhbiIsInJvb3RTcGFuIiwiZ2V0Um9vdFNwYW4iLCJtZXNzYWdlIiwiREVCVUdfQlVJTEQiLCJsb2ciLCJzZXRTdGF0dXMiLCJjb2RlIiwiU1BBTl9TVEFUVVNfRVJST1IiLCJ0YWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/hubextensions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/hubextensions.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors = __webpack_require__(/*! ./errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\n\n/**\n * @deprecated Use `registerSpanErrorInstrumentation()` instead. In v9, this function will be removed. Note that you don't need to call this in Node-based SDKs or when using `browserTracingIntegration`.\n */\nfunction addTracingExtensions() {\n  errors.registerSpanErrorInstrumentation();\n}\nexports.addTracingExtensions = addTracingExtensions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9odWJleHRlbnNpb25zLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLHlGQUFhLENBQUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLG9CQUFvQkEsQ0FBQSxFQUFHO0VBQzlCRixNQUFNLENBQUNHLGdDQUFnQyxDQUFDLENBQUM7QUFDM0M7QUFFQUwsNEJBQTRCLEdBQUdJLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3RyYWNpbmcvaHViZXh0ZW5zaW9ucy5qcz9jOGJiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzLmpzJyk7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIGByZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbigpYCBpbnN0ZWFkLiBJbiB2OSwgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQuIE5vdGUgdGhhdCB5b3UgZG9uJ3QgbmVlZCB0byBjYWxsIHRoaXMgaW4gTm9kZS1iYXNlZCBTREtzIG9yIHdoZW4gdXNpbmcgYGJyb3dzZXJUcmFjaW5nSW50ZWdyYXRpb25gLlxuICovXG5mdW5jdGlvbiBhZGRUcmFjaW5nRXh0ZW5zaW9ucygpIHtcbiAgZXJyb3JzLnJlZ2lzdGVyU3BhbkVycm9ySW5zdHJ1bWVudGF0aW9uKCk7XG59XG5cbmV4cG9ydHMuYWRkVHJhY2luZ0V4dGVuc2lvbnMgPSBhZGRUcmFjaW5nRXh0ZW5zaW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh1YmV4dGVuc2lvbnMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlcnJvcnMiLCJyZXF1aXJlIiwiYWRkVHJhY2luZ0V4dGVuc2lvbnMiLCJyZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/hubextensions.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst spanOnScope = __webpack_require__(/*! ../utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst spanstatus = __webpack_require__(/*! ./spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst trace = __webpack_require__(/*! ./trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst TRACING_DEFAULTS = {\n  idleTimeout: 1000,\n  finalTimeout: 30000,\n  childSpanTimeout: 15000\n};\nconst FINISH_REASON_HEARTBEAT_FAILED = 'heartbeatFailed';\nconst FINISH_REASON_IDLE_TIMEOUT = 'idleTimeout';\nconst FINISH_REASON_FINAL_TIMEOUT = 'finalTimeout';\nconst FINISH_REASON_EXTERNAL_FINISH = 'externalFinish';\n\n/**\n * An idle span is a span that automatically finishes. It does this by tracking child spans as activities.\n * An idle span is always the active span.\n */\nfunction startIdleSpan(startSpanOptions, options = {}) {\n  // Activities store a list of active spans\n  const activities = new Map();\n\n  // We should not use heartbeat if we finished a span\n  let _finished = false;\n\n  // Timer that tracks idleTimeout\n  let _idleTimeoutID;\n\n  // The reason why the span was finished\n  let _finishReason = FINISH_REASON_EXTERNAL_FINISH;\n  let _autoFinishAllowed = !options.disableAutoFinish;\n  const _cleanupHooks = [];\n  const {\n    idleTimeout = TRACING_DEFAULTS.idleTimeout,\n    finalTimeout = TRACING_DEFAULTS.finalTimeout,\n    childSpanTimeout = TRACING_DEFAULTS.childSpanTimeout,\n    beforeSpanEnd\n  } = options;\n  const client = currentScopes.getClient();\n  if (!client || !hasTracingEnabled.hasTracingEnabled()) {\n    return new sentryNonRecordingSpan.SentryNonRecordingSpan();\n  }\n  const scope = currentScopes.getCurrentScope();\n  const previousActiveSpan = spanUtils.getActiveSpan();\n  const span = _startIdleSpan(startSpanOptions);\n\n  // We patch span.end to ensure we can run some things before the span is ended\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  span.end = new Proxy(span.end, {\n    apply(target, thisArg, args) {\n      if (beforeSpanEnd) {\n        beforeSpanEnd(span);\n      }\n\n      // Just ensuring that this keeps working, even if we ever have more arguments here\n      const [definedEndTimestamp, ...rest] = args;\n      const timestamp = definedEndTimestamp || time.timestampInSeconds();\n      const spanEndTimestamp = spanUtils.spanTimeInputToSeconds(timestamp);\n\n      // Ensure we end with the last span timestamp, if possible\n      const spans = spanUtils.getSpanDescendants(span).filter(child => child !== span);\n\n      // If we have no spans, we just end, nothing else to do here\n      if (!spans.length) {\n        onIdleSpanEnded(spanEndTimestamp);\n        return Reflect.apply(target, thisArg, [spanEndTimestamp, ...rest]);\n      }\n      const childEndTimestamps = spans.map(span => spanUtils.spanToJSON(span).timestamp).filter(timestamp => !!timestamp);\n      const latestSpanEndTimestamp = childEndTimestamps.length ? Math.max(...childEndTimestamps) : undefined;\n\n      // In reality this should always exist here, but type-wise it may be undefined...\n      const spanStartTimestamp = spanUtils.spanToJSON(span).start_timestamp;\n\n      // The final endTimestamp should:\n      // * Never be before the span start timestamp\n      // * Be the latestSpanEndTimestamp, if there is one, and it is smaller than the passed span end timestamp\n      // * Otherwise be the passed end timestamp\n      // Final timestamp can never be after finalTimeout\n      const endTimestamp = Math.min(spanStartTimestamp ? spanStartTimestamp + finalTimeout / 1000 : Infinity, Math.max(spanStartTimestamp || -Infinity, Math.min(spanEndTimestamp, latestSpanEndTimestamp || Infinity)));\n      onIdleSpanEnded(endTimestamp);\n      return Reflect.apply(target, thisArg, [endTimestamp, ...rest]);\n    }\n  });\n\n  /**\n   * Cancels the existing idle timeout, if there is one.\n   */\n  function _cancelIdleTimeout() {\n    if (_idleTimeoutID) {\n      clearTimeout(_idleTimeoutID);\n      _idleTimeoutID = undefined;\n    }\n  }\n\n  /**\n   * Restarts idle timeout, if there is no running idle timeout it will start one.\n   */\n  function _restartIdleTimeout(endTimestamp) {\n    _cancelIdleTimeout();\n    _idleTimeoutID = setTimeout(() => {\n      if (!_finished && activities.size === 0 && _autoFinishAllowed) {\n        _finishReason = FINISH_REASON_IDLE_TIMEOUT;\n        span.end(endTimestamp);\n      }\n    }, idleTimeout);\n  }\n\n  /**\n   * Restarts child span timeout, if there is none running it will start one.\n   */\n  function _restartChildSpanTimeout(endTimestamp) {\n    _idleTimeoutID = setTimeout(() => {\n      if (!_finished && _autoFinishAllowed) {\n        _finishReason = FINISH_REASON_HEARTBEAT_FAILED;\n        span.end(endTimestamp);\n      }\n    }, childSpanTimeout);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  function _pushActivity(spanId) {\n    _cancelIdleTimeout();\n    activities.set(spanId, true);\n    const endTimestamp = time.timestampInSeconds();\n    // We need to add the timeout here to have the real endtimestamp of the idle span\n    // Remember timestampInSeconds is in seconds, timeout is in ms\n    _restartChildSpanTimeout(endTimestamp + childSpanTimeout / 1000);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  function _popActivity(spanId) {\n    if (activities.has(spanId)) {\n      activities.delete(spanId);\n    }\n    if (activities.size === 0) {\n      const endTimestamp = time.timestampInSeconds();\n      // We need to add the timeout here to have the real endtimestamp of the idle span\n      // Remember timestampInSeconds is in seconds, timeout is in ms\n      _restartIdleTimeout(endTimestamp + idleTimeout / 1000);\n    }\n  }\n  function onIdleSpanEnded(endTimestamp) {\n    _finished = true;\n    activities.clear();\n    _cleanupHooks.forEach(cleanup => cleanup());\n    spanOnScope._setSpanForScope(scope, previousActiveSpan);\n    const spanJSON = spanUtils.spanToJSON(span);\n    const {\n      start_timestamp: startTimestamp\n    } = spanJSON;\n    // This should never happen, but to make TS happy...\n    if (!startTimestamp) {\n      return;\n    }\n    const attributes = spanJSON.data || {};\n    if (!attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON]) {\n      span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, _finishReason);\n    }\n    logger.logger.log(`[Tracing] Idle span \"${spanJSON.op}\" finished`);\n    const childSpans = spanUtils.getSpanDescendants(span).filter(child => child !== span);\n    let discardedSpans = 0;\n    childSpans.forEach(childSpan => {\n      // We cancel all pending spans with status \"cancelled\" to indicate the idle span was finished early\n      if (childSpan.isRecording()) {\n        childSpan.setStatus({\n          code: spanstatus.SPAN_STATUS_ERROR,\n          message: 'cancelled'\n        });\n        childSpan.end(endTimestamp);\n        debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Cancelling span since span ended early', JSON.stringify(childSpan, undefined, 2));\n      }\n      const childSpanJSON = spanUtils.spanToJSON(childSpan);\n      const {\n        timestamp: childEndTimestamp = 0,\n        start_timestamp: childStartTimestamp = 0\n      } = childSpanJSON;\n      const spanStartedBeforeIdleSpanEnd = childStartTimestamp <= endTimestamp;\n\n      // Add a delta with idle timeout so that we prevent false positives\n      const timeoutWithMarginOfError = (finalTimeout + idleTimeout) / 1000;\n      const spanEndedBeforeFinalTimeout = childEndTimestamp - childStartTimestamp <= timeoutWithMarginOfError;\n      if (debugBuild.DEBUG_BUILD) {\n        const stringifiedSpan = JSON.stringify(childSpan, undefined, 2);\n        if (!spanStartedBeforeIdleSpanEnd) {\n          logger.logger.log('[Tracing] Discarding span since it happened after idle span was finished', stringifiedSpan);\n        } else if (!spanEndedBeforeFinalTimeout) {\n          logger.logger.log('[Tracing] Discarding span since it finished after idle span final timeout', stringifiedSpan);\n        }\n      }\n      if (!spanEndedBeforeFinalTimeout || !spanStartedBeforeIdleSpanEnd) {\n        spanUtils.removeChildSpanFromSpan(span, childSpan);\n        discardedSpans++;\n      }\n    });\n    if (discardedSpans > 0) {\n      span.setAttribute('sentry.idle_span_discarded_spans', discardedSpans);\n    }\n  }\n  _cleanupHooks.push(client.on('spanStart', startedSpan => {\n    // If we already finished the idle span,\n    // or if this is the idle span itself being started,\n    // or if the started span has already been closed,\n    // we don't care about it for activity\n    if (_finished || startedSpan === span || !!spanUtils.spanToJSON(startedSpan).timestamp) {\n      return;\n    }\n    const allSpans = spanUtils.getSpanDescendants(span);\n\n    // If the span that was just started is a child of the idle span, we should track it\n    if (allSpans.includes(startedSpan)) {\n      _pushActivity(startedSpan.spanContext().spanId);\n    }\n  }));\n  _cleanupHooks.push(client.on('spanEnd', endedSpan => {\n    if (_finished) {\n      return;\n    }\n    _popActivity(endedSpan.spanContext().spanId);\n  }));\n  _cleanupHooks.push(client.on('idleSpanEnableAutoFinish', spanToAllowAutoFinish => {\n    if (spanToAllowAutoFinish === span) {\n      _autoFinishAllowed = true;\n      _restartIdleTimeout();\n      if (activities.size) {\n        _restartChildSpanTimeout();\n      }\n    }\n  }));\n\n  // We only start the initial idle timeout if we are not delaying the auto finish\n  if (!options.disableAutoFinish) {\n    _restartIdleTimeout();\n  }\n  setTimeout(() => {\n    if (!_finished) {\n      span.setStatus({\n        code: spanstatus.SPAN_STATUS_ERROR,\n        message: 'deadline_exceeded'\n      });\n      _finishReason = FINISH_REASON_FINAL_TIMEOUT;\n      span.end();\n    }\n  }, finalTimeout);\n  return span;\n}\nfunction _startIdleSpan(options) {\n  const span = trace.startInactiveSpan(options);\n  spanOnScope._setSpanForScope(currentScopes.getCurrentScope(), span);\n  debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Started span is an idle span');\n  return span;\n}\nexports.TRACING_DEFAULTS = TRACING_DEFAULTS;\nexports.startIdleSpan = startIdleSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/logSpans.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Print a log message for a started span.\n */\nfunction logSpanStart(span) {\n  if (!debugBuild.DEBUG_BUILD) return;\n  const {\n    description = '< unknown name >',\n    op = '< unknown op >',\n    parent_span_id: parentSpanId\n  } = spanUtils.spanToJSON(span);\n  const {\n    spanId\n  } = span.spanContext();\n  const sampled = spanUtils.spanIsSampled(span);\n  const rootSpan = spanUtils.getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n  const infoParts = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n  if (!isRootSpan) {\n    const {\n      op,\n      description\n    } = spanUtils.spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n  logger.logger.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nfunction logSpanEnd(span) {\n  if (!debugBuild.DEBUG_BUILD) return;\n  const {\n    description = '< unknown name >',\n    op = '< unknown op >'\n  } = spanUtils.spanToJSON(span);\n  const {\n    spanId\n  } = span.spanContext();\n  const rootSpan = spanUtils.getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  logger.logger.log(msg);\n}\nexports.logSpanEnd = logSpanEnd;\nexports.logSpanStart = logSpanStart;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9sb2dTcGFucy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyw0RkFBbUIsQ0FBQztBQUMvQyxNQUFNQyxNQUFNLEdBQUdELG1CQUFPLENBQUMsMEdBQTBCLENBQUM7QUFDbEQsTUFBTUUsU0FBUyxHQUFHRixtQkFBTyxDQUFDLG9HQUF1QixDQUFDOztBQUVsRDtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxZQUFZQSxDQUFDQyxJQUFJLEVBQUU7RUFDMUIsSUFBSSxDQUFDTCxVQUFVLENBQUNNLFdBQVcsRUFBRTtFQUU3QixNQUFNO0lBQUVDLFdBQVcsR0FBRyxrQkFBa0I7SUFBRUMsRUFBRSxHQUFHLGdCQUFnQjtJQUFFQyxjQUFjLEVBQUVDO0VBQWEsQ0FBQyxHQUFHUCxTQUFTLENBQUNRLFVBQVUsQ0FBQ04sSUFBSSxDQUFDO0VBQzVILE1BQU07SUFBRU87RUFBTyxDQUFDLEdBQUdQLElBQUksQ0FBQ1EsV0FBVyxDQUFDLENBQUM7RUFFckMsTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQUNZLGFBQWEsQ0FBQ1YsSUFBSSxDQUFDO0VBQzdDLE1BQU1XLFFBQVEsR0FBR2IsU0FBUyxDQUFDYyxXQUFXLENBQUNaLElBQUksQ0FBQztFQUM1QyxNQUFNYSxVQUFVLEdBQUdGLFFBQVEsS0FBS1gsSUFBSTtFQUVwQyxNQUFNYyxNQUFNLEdBQUksc0JBQXFCTCxPQUFPLEdBQUcsU0FBUyxHQUFHLFdBQVksSUFBR0ksVUFBVSxHQUFHLE9BQU8sR0FBRyxFQUFHLE1BQUs7RUFFekcsTUFBTUUsU0FBUyxHQUFHLENBQUUsT0FBTVosRUFBRyxFQUFDLEVBQUcsU0FBUUQsV0FBWSxFQUFDLEVBQUcsT0FBTUssTUFBTyxFQUFDLENBQUM7RUFFeEUsSUFBSUYsWUFBWSxFQUFFO0lBQ2hCVSxTQUFTLENBQUNDLElBQUksQ0FBRSxjQUFhWCxZQUFhLEVBQUMsQ0FBQztFQUM5QztFQUVBLElBQUksQ0FBQ1EsVUFBVSxFQUFFO0lBQ2YsTUFBTTtNQUFFVixFQUFFO01BQUVEO0lBQVksQ0FBQyxHQUFHSixTQUFTLENBQUNRLFVBQVUsQ0FBQ0ssUUFBUSxDQUFDO0lBQzFESSxTQUFTLENBQUNDLElBQUksQ0FBRSxZQUFXTCxRQUFRLENBQUNILFdBQVcsQ0FBQyxDQUFDLENBQUNELE1BQU8sRUFBQyxDQUFDO0lBQzNELElBQUlKLEVBQUUsRUFBRTtNQUNOWSxTQUFTLENBQUNDLElBQUksQ0FBRSxZQUFXYixFQUFHLEVBQUMsQ0FBQztJQUNsQztJQUNBLElBQUlELFdBQVcsRUFBRTtNQUNmYSxTQUFTLENBQUNDLElBQUksQ0FBRSxxQkFBb0JkLFdBQVksRUFBQyxDQUFDO0lBQ3BEO0VBQ0Y7RUFFQUwsTUFBTSxDQUFDQSxNQUFNLENBQUNvQixHQUFHLENBQUUsR0FBRUgsTUFBTztBQUM5QixJQUFJQyxTQUFTLENBQUNHLElBQUksQ0FBQyxNQUFNLENBQUUsRUFBQyxDQUFDO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFVBQVVBLENBQUNuQixJQUFJLEVBQUU7RUFDeEIsSUFBSSxDQUFDTCxVQUFVLENBQUNNLFdBQVcsRUFBRTtFQUU3QixNQUFNO0lBQUVDLFdBQVcsR0FBRyxrQkFBa0I7SUFBRUMsRUFBRSxHQUFHO0VBQWlCLENBQUMsR0FBR0wsU0FBUyxDQUFDUSxVQUFVLENBQUNOLElBQUksQ0FBQztFQUM5RixNQUFNO0lBQUVPO0VBQU8sQ0FBQyxHQUFHUCxJQUFJLENBQUNRLFdBQVcsQ0FBQyxDQUFDO0VBQ3JDLE1BQU1HLFFBQVEsR0FBR2IsU0FBUyxDQUFDYyxXQUFXLENBQUNaLElBQUksQ0FBQztFQUM1QyxNQUFNYSxVQUFVLEdBQUdGLFFBQVEsS0FBS1gsSUFBSTtFQUVwQyxNQUFNb0IsR0FBRyxHQUFJLHdCQUF1QmpCLEVBQUcsS0FBSVUsVUFBVSxHQUFHLE9BQU8sR0FBRyxFQUFHLFNBQVFYLFdBQVksYUFBWUssTUFBTyxFQUFDO0VBQzdHVixNQUFNLENBQUNBLE1BQU0sQ0FBQ29CLEdBQUcsQ0FBQ0csR0FBRyxDQUFDO0FBQ3hCO0FBRUEzQixrQkFBa0IsR0FBRzBCLFVBQVU7QUFDL0IxQixvQkFBb0IsR0FBR00sWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3RyYWNpbmcvbG9nU3BhbnMuanM/NmMxYSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuY29uc3Qgc3BhblV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvc3BhblV0aWxzLmpzJyk7XG5cbi8qKlxuICogUHJpbnQgYSBsb2cgbWVzc2FnZSBmb3IgYSBzdGFydGVkIHNwYW4uXG4gKi9cbmZ1bmN0aW9uIGxvZ1NwYW5TdGFydChzcGFuKSB7XG4gIGlmICghZGVidWdCdWlsZC5ERUJVR19CVUlMRCkgcmV0dXJuO1xuXG4gIGNvbnN0IHsgZGVzY3JpcHRpb24gPSAnPCB1bmtub3duIG5hbWUgPicsIG9wID0gJzwgdW5rbm93biBvcCA+JywgcGFyZW50X3NwYW5faWQ6IHBhcmVudFNwYW5JZCB9ID0gc3BhblV0aWxzLnNwYW5Ub0pTT04oc3Bhbik7XG4gIGNvbnN0IHsgc3BhbklkIH0gPSBzcGFuLnNwYW5Db250ZXh0KCk7XG5cbiAgY29uc3Qgc2FtcGxlZCA9IHNwYW5VdGlscy5zcGFuSXNTYW1wbGVkKHNwYW4pO1xuICBjb25zdCByb290U3BhbiA9IHNwYW5VdGlscy5nZXRSb290U3BhbihzcGFuKTtcbiAgY29uc3QgaXNSb290U3BhbiA9IHJvb3RTcGFuID09PSBzcGFuO1xuXG4gIGNvbnN0IGhlYWRlciA9IGBbVHJhY2luZ10gU3RhcnRpbmcgJHtzYW1wbGVkID8gJ3NhbXBsZWQnIDogJ3Vuc2FtcGxlZCd9ICR7aXNSb290U3BhbiA/ICdyb290ICcgOiAnJ31zcGFuYDtcblxuICBjb25zdCBpbmZvUGFydHMgPSBbYG9wOiAke29wfWAsIGBuYW1lOiAke2Rlc2NyaXB0aW9ufWAsIGBJRDogJHtzcGFuSWR9YF07XG5cbiAgaWYgKHBhcmVudFNwYW5JZCkge1xuICAgIGluZm9QYXJ0cy5wdXNoKGBwYXJlbnQgSUQ6ICR7cGFyZW50U3BhbklkfWApO1xuICB9XG5cbiAgaWYgKCFpc1Jvb3RTcGFuKSB7XG4gICAgY29uc3QgeyBvcCwgZGVzY3JpcHRpb24gfSA9IHNwYW5VdGlscy5zcGFuVG9KU09OKHJvb3RTcGFuKTtcbiAgICBpbmZvUGFydHMucHVzaChgcm9vdCBJRDogJHtyb290U3Bhbi5zcGFuQ29udGV4dCgpLnNwYW5JZH1gKTtcbiAgICBpZiAob3ApIHtcbiAgICAgIGluZm9QYXJ0cy5wdXNoKGByb290IG9wOiAke29wfWApO1xuICAgIH1cbiAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgIGluZm9QYXJ0cy5wdXNoKGByb290IGRlc2NyaXB0aW9uOiAke2Rlc2NyaXB0aW9ufWApO1xuICAgIH1cbiAgfVxuXG4gIGxvZ2dlci5sb2dnZXIubG9nKGAke2hlYWRlcn1cbiAgJHtpbmZvUGFydHMuam9pbignXFxuICAnKX1gKTtcbn1cblxuLyoqXG4gKiBQcmludCBhIGxvZyBtZXNzYWdlIGZvciBhbiBlbmRlZCBzcGFuLlxuICovXG5mdW5jdGlvbiBsb2dTcGFuRW5kKHNwYW4pIHtcbiAgaWYgKCFkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEKSByZXR1cm47XG5cbiAgY29uc3QgeyBkZXNjcmlwdGlvbiA9ICc8IHVua25vd24gbmFtZSA+Jywgb3AgPSAnPCB1bmtub3duIG9wID4nIH0gPSBzcGFuVXRpbHMuc3BhblRvSlNPTihzcGFuKTtcbiAgY29uc3QgeyBzcGFuSWQgfSA9IHNwYW4uc3BhbkNvbnRleHQoKTtcbiAgY29uc3Qgcm9vdFNwYW4gPSBzcGFuVXRpbHMuZ2V0Um9vdFNwYW4oc3Bhbik7XG4gIGNvbnN0IGlzUm9vdFNwYW4gPSByb290U3BhbiA9PT0gc3BhbjtcblxuICBjb25zdCBtc2cgPSBgW1RyYWNpbmddIEZpbmlzaGluZyBcIiR7b3B9XCIgJHtpc1Jvb3RTcGFuID8gJ3Jvb3QgJyA6ICcnfXNwYW4gXCIke2Rlc2NyaXB0aW9ufVwiIHdpdGggSUQgJHtzcGFuSWR9YDtcbiAgbG9nZ2VyLmxvZ2dlci5sb2cobXNnKTtcbn1cblxuZXhwb3J0cy5sb2dTcGFuRW5kID0gbG9nU3BhbkVuZDtcbmV4cG9ydHMubG9nU3BhblN0YXJ0ID0gbG9nU3BhblN0YXJ0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nU3BhbnMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWJ1Z0J1aWxkIiwicmVxdWlyZSIsImxvZ2dlciIsInNwYW5VdGlscyIsImxvZ1NwYW5TdGFydCIsInNwYW4iLCJERUJVR19CVUlMRCIsImRlc2NyaXB0aW9uIiwib3AiLCJwYXJlbnRfc3Bhbl9pZCIsInBhcmVudFNwYW5JZCIsInNwYW5Ub0pTT04iLCJzcGFuSWQiLCJzcGFuQ29udGV4dCIsInNhbXBsZWQiLCJzcGFuSXNTYW1wbGVkIiwicm9vdFNwYW4iLCJnZXRSb290U3BhbiIsImlzUm9vdFNwYW4iLCJoZWFkZXIiLCJpbmZvUGFydHMiLCJwdXNoIiwibG9nIiwiam9pbiIsImxvZ1NwYW5FbmQiLCJtc2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/measurement.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nfunction setMeasurement(name, value, unit, activeSpan = spanUtils.getActiveSpan()) {\n  const rootSpan = activeSpan && spanUtils.getRootSpan(activeSpan);\n  if (rootSpan) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nfunction timedEventsToMeasurements(events) {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n  const measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT];\n    const value = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE];\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = {\n        value,\n        unit\n      };\n    }\n  });\n  return measurements;\n}\nexports.setMeasurement = setMeasurement;\nexports.timedEventsToMeasurements = timedEventsToMeasurements;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9tZWFzdXJlbWVudC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyw0RkFBbUIsQ0FBQztBQUMvQyxNQUFNQyxrQkFBa0IsR0FBR0QsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUM5RCxNQUFNRSxNQUFNLEdBQUdGLG1CQUFPLENBQUMsMEdBQTBCLENBQUM7QUFDbEQsTUFBTUcsU0FBUyxHQUFHSCxtQkFBTyxDQUFDLG9HQUF1QixDQUFDOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNJLGNBQWNBLENBQUNDLElBQUksRUFBRVAsS0FBSyxFQUFFUSxJQUFJLEVBQUVDLFVBQVUsR0FBR0osU0FBUyxDQUFDSyxhQUFhLENBQUMsQ0FBQyxFQUFFO0VBQ2pGLE1BQU1DLFFBQVEsR0FBR0YsVUFBVSxJQUFJSixTQUFTLENBQUNPLFdBQVcsQ0FBQ0gsVUFBVSxDQUFDO0VBRWhFLElBQUlFLFFBQVEsRUFBRTtJQUNaVixVQUFVLENBQUNZLFdBQVcsSUFBSVQsTUFBTSxDQUFDQSxNQUFNLENBQUNVLEdBQUcsQ0FBRSxtREFBa0RQLElBQUssTUFBS1AsS0FBTSxJQUFHUSxJQUFLLEVBQUMsQ0FBQztJQUN6SEcsUUFBUSxDQUFDSSxRQUFRLENBQUNSLElBQUksRUFBRTtNQUN0QixDQUFDSixrQkFBa0IsQ0FBQ2EsMkNBQTJDLEdBQUdoQixLQUFLO01BQ3ZFLENBQUNHLGtCQUFrQixDQUFDYywwQ0FBMEMsR0FBR1Q7SUFDbkUsQ0FBQyxDQUFDO0VBQ0o7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTVSx5QkFBeUJBLENBQUNDLE1BQU0sRUFBRTtFQUN6QyxJQUFJLENBQUNBLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQ2xDLE9BQU9DLFNBQVM7RUFDbEI7RUFFQSxNQUFNQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0VBQ3ZCSCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0MsS0FBSyxJQUFJO0lBQ3RCLE1BQU1DLFVBQVUsR0FBR0QsS0FBSyxDQUFDQyxVQUFVLElBQUksQ0FBQyxDQUFDO0lBQ3pDLE1BQU1qQixJQUFJLEdBQUdpQixVQUFVLENBQUN0QixrQkFBa0IsQ0FBQ2MsMENBQTBDLENBQUM7SUFDdEYsTUFBTWpCLEtBQUssR0FBR3lCLFVBQVUsQ0FBQ3RCLGtCQUFrQixDQUFDYSwyQ0FBMkMsQ0FBQztJQUV4RixJQUFJLE9BQU9SLElBQUksS0FBSyxRQUFRLElBQUksT0FBT1IsS0FBSyxLQUFLLFFBQVEsRUFBRTtNQUN6RHNCLFlBQVksQ0FBQ0UsS0FBSyxDQUFDakIsSUFBSSxDQUFDLEdBQUc7UUFBRVAsS0FBSztRQUFFUTtNQUFLLENBQUM7SUFDNUM7RUFDRixDQUFDLENBQUM7RUFFRixPQUFPYyxZQUFZO0FBQ3JCO0FBRUF2QixzQkFBc0IsR0FBR08sY0FBYztBQUN2Q1AsaUNBQWlDLEdBQUdtQix5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cmFjaW5nL21lYXN1cmVtZW50LmpzP2M1YzciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBzZW1hbnRpY0F0dHJpYnV0ZXMgPSByZXF1aXJlKCcuLi9zZW1hbnRpY0F0dHJpYnV0ZXMuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuY29uc3Qgc3BhblV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvc3BhblV0aWxzLmpzJyk7XG5cbi8qKlxuICogQWRkcyBhIG1lYXN1cmVtZW50IHRvIHRoZSBhY3RpdmUgdHJhbnNhY3Rpb24gb24gdGhlIGN1cnJlbnQgZ2xvYmFsIHNjb3BlLiBZb3UgY2FuIG9wdGlvbmFsbHkgcGFzcyBpbiBhIGRpZmZlcmVudCBzcGFuXG4gKiBhcyB0aGUgNHRoIHBhcmFtZXRlci5cbiAqL1xuZnVuY3Rpb24gc2V0TWVhc3VyZW1lbnQobmFtZSwgdmFsdWUsIHVuaXQsIGFjdGl2ZVNwYW4gPSBzcGFuVXRpbHMuZ2V0QWN0aXZlU3BhbigpKSB7XG4gIGNvbnN0IHJvb3RTcGFuID0gYWN0aXZlU3BhbiAmJiBzcGFuVXRpbHMuZ2V0Um9vdFNwYW4oYWN0aXZlU3Bhbik7XG5cbiAgaWYgKHJvb3RTcGFuKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nZ2VyLmxvZyhgW01lYXN1cmVtZW50XSBTZXR0aW5nIG1lYXN1cmVtZW50IG9uIHJvb3Qgc3BhbjogJHtuYW1lfSA9ICR7dmFsdWV9ICR7dW5pdH1gKTtcbiAgICByb290U3Bhbi5hZGRFdmVudChuYW1lLCB7XG4gICAgICBbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVkFMVUVdOiB2YWx1ZSxcbiAgICAgIFtzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9VTklUXTogdW5pdCAsXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0IHRpbWVkIGV2ZW50cyB0byBtZWFzdXJlbWVudHMuXG4gKi9cbmZ1bmN0aW9uIHRpbWVkRXZlbnRzVG9NZWFzdXJlbWVudHMoZXZlbnRzKSB7XG4gIGlmICghZXZlbnRzIHx8IGV2ZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgbWVhc3VyZW1lbnRzID0ge307XG4gIGV2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gZXZlbnQuYXR0cmlidXRlcyB8fCB7fTtcbiAgICBjb25zdCB1bml0ID0gYXR0cmlidXRlc1tzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9VTklUXSA7XG4gICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFXSA7XG5cbiAgICBpZiAodHlwZW9mIHVuaXQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIG1lYXN1cmVtZW50c1tldmVudC5uYW1lXSA9IHsgdmFsdWUsIHVuaXQgfTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBtZWFzdXJlbWVudHM7XG59XG5cbmV4cG9ydHMuc2V0TWVhc3VyZW1lbnQgPSBzZXRNZWFzdXJlbWVudDtcbmV4cG9ydHMudGltZWRFdmVudHNUb01lYXN1cmVtZW50cyA9IHRpbWVkRXZlbnRzVG9NZWFzdXJlbWVudHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZWFzdXJlbWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlYnVnQnVpbGQiLCJyZXF1aXJlIiwic2VtYW50aWNBdHRyaWJ1dGVzIiwibG9nZ2VyIiwic3BhblV0aWxzIiwic2V0TWVhc3VyZW1lbnQiLCJuYW1lIiwidW5pdCIsImFjdGl2ZVNwYW4iLCJnZXRBY3RpdmVTcGFuIiwicm9vdFNwYW4iLCJnZXRSb290U3BhbiIsIkRFQlVHX0JVSUxEIiwibG9nIiwiYWRkRXZlbnQiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9VTklUIiwidGltZWRFdmVudHNUb01lYXN1cmVtZW50cyIsImV2ZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm1lYXN1cmVtZW50cyIsImZvckVhY2giLCJldmVudCIsImF0dHJpYnV0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/sampling.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst parseSampleRate = __webpack_require__(/*! ../utils/parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\n\n/**\n * Makes a sampling decision for the given options.\n *\n * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n */\nfunction sampleSpan(options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled.hasTracingEnabled(options)) {\n    return [false];\n  }\n\n  // Casting this from unknown, as the type of `sdkProcessingMetadata` is only changed in v9 and `normalizedRequest` is set in SentryHttpInstrumentation\n  const normalizedRequest = currentScopes.getIsolationScope().getScopeData().sdkProcessingMetadata.normalizedRequest;\n  const enhancedSamplingContext = {\n    ...samplingContext,\n    normalizedRequest: samplingContext.normalizedRequest || normalizedRequest\n  };\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(enhancedSamplingContext);\n  } else if (enhancedSamplingContext.parentSampled !== undefined) {\n    sampleRate = enhancedSamplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n  } else {\n    // When `enableTracing === true`, we use a sample rate of 100%\n    sampleRate = 1;\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n  // (The only valid values are booleans or numbers between 0 and 1.)\n  const parsedSampleRate = parseSampleRate.parseSampleRate(sampleRate);\n  if (parsedSampleRate === undefined) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    return [false];\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!parsedSampleRate) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`[Tracing] Discarding transaction because ${typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'}`);\n    return [false, parsedSampleRate];\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  const shouldSample = Math.random() < parsedSampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!shouldSample) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(sampleRate)})`);\n    return [false, parsedSampleRate];\n  }\n  return [true, parsedSampleRate];\n}\nexports.sampleSpan = sampleSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst propagationContext = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * A Sentry Span that is non-recording, meaning it will not be sent to Sentry.\n */\nclass SentryNonRecordingSpan {\n  constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || propagationContext.generateTraceId();\n    this._spanId = spanContext.spanId || propagationContext.generateSpanId();\n  }\n\n  /** @inheritdoc */\n  spanContext() {\n    return {\n      spanId: this._spanId,\n      traceId: this._traceId,\n      traceFlags: spanUtils.TRACE_FLAG_NONE\n    };\n  }\n\n  /** @inheritdoc */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  end(_timestamp) {}\n\n  /** @inheritdoc */\n  setAttribute(_key, _value) {\n    return this;\n  }\n\n  /** @inheritdoc */\n  setAttributes(_values) {\n    return this;\n  }\n\n  /** @inheritdoc */\n  setStatus(_status) {\n    return this;\n  }\n\n  /** @inheritdoc */\n  updateName(_name) {\n    return this;\n  }\n\n  /** @inheritdoc */\n  isRecording() {\n    return false;\n  }\n\n  /** @inheritdoc */\n  addEvent(_name, _attributesOrStartTime, _startTime) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  addLink(_link) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  addLinks(_links) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  recordException(_exception, _time) {\n    // noop\n  }\n}\nexports.SentryNonRecordingSpan = SentryNonRecordingSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9zZW50cnlOb25SZWNvcmRpbmdTcGFuLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsa0JBQWtCLEdBQUdDLG1CQUFPLENBQUMsa0lBQXNDLENBQUM7QUFDMUUsTUFBTUMsU0FBUyxHQUFHRCxtQkFBTyxDQUFDLG9HQUF1QixDQUFDOztBQUVsRDtBQUNBO0FBQ0E7QUFDQSxNQUFNRSxzQkFBc0IsQ0FBRTtFQUUzQkMsV0FBV0EsQ0FBQ0MsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzdCLElBQUksQ0FBQ0MsUUFBUSxHQUFHRCxXQUFXLENBQUNFLE9BQU8sSUFBSVAsa0JBQWtCLENBQUNRLGVBQWUsQ0FBQyxDQUFDO0lBQzNFLElBQUksQ0FBQ0MsT0FBTyxHQUFHSixXQUFXLENBQUNLLE1BQU0sSUFBSVYsa0JBQWtCLENBQUNXLGNBQWMsQ0FBQyxDQUFDO0VBQzFFOztFQUVBO0VBQ0NOLFdBQVdBLENBQUEsRUFBRztJQUNiLE9BQU87TUFDTEssTUFBTSxFQUFFLElBQUksQ0FBQ0QsT0FBTztNQUNwQkYsT0FBTyxFQUFFLElBQUksQ0FBQ0QsUUFBUTtNQUN0Qk0sVUFBVSxFQUFFVixTQUFTLENBQUNXO0lBQ3hCLENBQUM7RUFDSDs7RUFFQTtFQUNBO0VBQ0NDLEdBQUdBLENBQUNDLFVBQVUsRUFBRSxDQUFDOztFQUVsQjtFQUNDQyxZQUFZQSxDQUFDQyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtJQUMxQixPQUFPLElBQUk7RUFDYjs7RUFFQTtFQUNDQyxhQUFhQSxDQUFDQyxPQUFPLEVBQUU7SUFDdEIsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7RUFDQ0MsU0FBU0EsQ0FBQ0MsT0FBTyxFQUFFO0lBQ2xCLE9BQU8sSUFBSTtFQUNiOztFQUVBO0VBQ0NDLFVBQVVBLENBQUNDLEtBQUssRUFBRTtJQUNqQixPQUFPLElBQUk7RUFDYjs7RUFFQTtFQUNDQyxXQUFXQSxDQUFBLEVBQUc7SUFDYixPQUFPLEtBQUs7RUFDZDs7RUFFQTtFQUNDQyxRQUFRQSxDQUNQRixLQUFLLEVBQ0xHLHNCQUFzQixFQUN0QkMsVUFBVSxFQUNWO0lBQ0EsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDR0MsT0FBT0EsQ0FBQ0MsS0FBSyxFQUFFO0lBQ2QsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDR0MsUUFBUUEsQ0FBQ0MsTUFBTSxFQUFFO0lBQ2hCLE9BQU8sSUFBSTtFQUNiOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0dDLGVBQWVBLENBQUNDLFVBQVUsRUFBRUMsS0FBSyxFQUFFO0lBQ2xDO0VBQUE7QUFFSjtBQUVBckMsOEJBQThCLEdBQUdLLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3RyYWNpbmcvc2VudHJ5Tm9uUmVjb3JkaW5nU3Bhbi5qcz8xYTcyIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHByb3BhZ2F0aW9uQ29udGV4dCA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L3Byb3BhZ2F0aW9uQ29udGV4dC5qcycpO1xuY29uc3Qgc3BhblV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvc3BhblV0aWxzLmpzJyk7XG5cbi8qKlxuICogQSBTZW50cnkgU3BhbiB0aGF0IGlzIG5vbi1yZWNvcmRpbmcsIG1lYW5pbmcgaXQgd2lsbCBub3QgYmUgc2VudCB0byBTZW50cnkuXG4gKi9cbmNsYXNzIFNlbnRyeU5vblJlY29yZGluZ1NwYW4gIHtcblxuICAgY29uc3RydWN0b3Ioc3BhbkNvbnRleHQgPSB7fSkge1xuICAgIHRoaXMuX3RyYWNlSWQgPSBzcGFuQ29udGV4dC50cmFjZUlkIHx8IHByb3BhZ2F0aW9uQ29udGV4dC5nZW5lcmF0ZVRyYWNlSWQoKTtcbiAgICB0aGlzLl9zcGFuSWQgPSBzcGFuQ29udGV4dC5zcGFuSWQgfHwgcHJvcGFnYXRpb25Db250ZXh0LmdlbmVyYXRlU3BhbklkKCk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIHNwYW5Db250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBzcGFuSWQ6IHRoaXMuX3NwYW5JZCxcbiAgICAgIHRyYWNlSWQ6IHRoaXMuX3RyYWNlSWQsXG4gICAgICB0cmFjZUZsYWdzOiBzcGFuVXRpbHMuVFJBQ0VfRkxBR19OT05FLFxuICAgIH07XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAgZW5kKF90aW1lc3RhbXApIHt9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBzZXRBdHRyaWJ1dGUoX2tleSwgX3ZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIHNldEF0dHJpYnV0ZXMoX3ZhbHVlcykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBzZXRTdGF0dXMoX3N0YXR1cykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICB1cGRhdGVOYW1lKF9uYW1lKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGlzUmVjb3JkaW5nKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgYWRkRXZlbnQoXG4gICAgX25hbWUsXG4gICAgX2F0dHJpYnV0ZXNPclN0YXJ0VGltZSxcbiAgICBfc3RhcnRUaW1lLFxuICApIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHNob3VsZCBnZW5lcmFsbHkgbm90IGJlIHVzZWQsXG4gICAqIGJ1dCB3ZSBuZWVkIGl0IGZvciBiZWluZyBjb21wbGlhbnQgd2l0aCB0aGUgT1RFTCBTcGFuIGludGVyZmFjZS5cbiAgICpcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gICBhZGRMaW5rKF9saW5rKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBzaG91bGQgZ2VuZXJhbGx5IG5vdCBiZSB1c2VkLFxuICAgKiBidXQgd2UgbmVlZCBpdCBmb3IgYmVpbmcgY29tcGxpYW50IHdpdGggdGhlIE9URUwgU3BhbiBpbnRlcmZhY2UuXG4gICAqXG4gICAqIEBoaWRkZW5cbiAgICogQGludGVybmFsXG4gICAqL1xuICAgYWRkTGlua3MoX2xpbmtzKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBzaG91bGQgZ2VuZXJhbGx5IG5vdCBiZSB1c2VkLFxuICAgKiBidXQgd2UgbmVlZCBpdCBmb3IgYmVpbmcgY29tcGxpYW50IHdpdGggdGhlIE9URUwgU3BhbiBpbnRlcmZhY2UuXG4gICAqXG4gICAqIEBoaWRkZW5cbiAgICogQGludGVybmFsXG4gICAqL1xuICAgcmVjb3JkRXhjZXB0aW9uKF9leGNlcHRpb24sIF90aW1lKSB7XG4gICAgLy8gbm9vcFxuICB9XG59XG5cbmV4cG9ydHMuU2VudHJ5Tm9uUmVjb3JkaW5nU3BhbiA9IFNlbnRyeU5vblJlY29yZGluZ1NwYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZW50cnlOb25SZWNvcmRpbmdTcGFuLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicHJvcGFnYXRpb25Db250ZXh0IiwicmVxdWlyZSIsInNwYW5VdGlscyIsIlNlbnRyeU5vblJlY29yZGluZ1NwYW4iLCJjb25zdHJ1Y3RvciIsInNwYW5Db250ZXh0IiwiX3RyYWNlSWQiLCJ0cmFjZUlkIiwiZ2VuZXJhdGVUcmFjZUlkIiwiX3NwYW5JZCIsInNwYW5JZCIsImdlbmVyYXRlU3BhbklkIiwidHJhY2VGbGFncyIsIlRSQUNFX0ZMQUdfTk9ORSIsImVuZCIsIl90aW1lc3RhbXAiLCJzZXRBdHRyaWJ1dGUiLCJfa2V5IiwiX3ZhbHVlIiwic2V0QXR0cmlidXRlcyIsIl92YWx1ZXMiLCJzZXRTdGF0dXMiLCJfc3RhdHVzIiwidXBkYXRlTmFtZSIsIl9uYW1lIiwiaXNSZWNvcmRpbmciLCJhZGRFdmVudCIsIl9hdHRyaWJ1dGVzT3JTdGFydFRpbWUiLCJfc3RhcnRUaW1lIiwiYWRkTGluayIsIl9saW5rIiwiYWRkTGlua3MiLCJfbGlua3MiLCJyZWNvcmRFeGNlcHRpb24iLCJfZXhjZXB0aW9uIiwiX3RpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst envelope = __webpack_require__(/*! ../envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\");\nconst metricSummary = __webpack_require__(/*! ../metrics/metric-summary.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst propagationContext = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst logSpans = __webpack_require__(/*! ./logSpans.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\");\nconst measurement = __webpack_require__(/*! ./measurement.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\nconst MAX_SPAN_COUNT = 1000;\n\n/**\n * Span contains all data about a span\n */\nclass SentrySpan {\n  /** Epoch timestamp in seconds when the span started. */\n\n  /** Epoch timestamp in seconds when the span ended. */\n\n  /** Internal keeper of the status */\n\n  /** The timed events added to this span. */\n\n  /** if true, treat span as a standalone span (not part of a transaction) */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startSpan()`\n   * or other span methods.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || propagationContext.generateTraceId();\n    this._spanId = spanContext.spanId || propagationContext.generateSpanId();\n    this._startTime = spanContext.startTimestamp || time.timestampInSeconds();\n    this._attributes = {};\n    this.setAttributes({\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes\n    });\n    this._name = spanContext.name;\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n    this._events = [];\n    this._isStandaloneSpan = spanContext.isStandalone;\n\n    // If the span is already ended, ensure we finalize the span immediately\n    if (this._endTime) {\n      this._onSpanEnded();\n    }\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  addLink(_link) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  addLinks(_links) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  recordException(_exception, _time) {\n    // noop\n  }\n\n  /** @inheritdoc */\n  spanContext() {\n    const {\n      _spanId: spanId,\n      _traceId: traceId,\n      _sampled: sampled\n    } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? spanUtils.TRACE_FLAG_SAMPLED : spanUtils.TRACE_FLAG_NONE\n    };\n  }\n\n  /** @inheritdoc */\n  setAttribute(key, value) {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n    return this;\n  }\n\n  /** @inheritdoc */\n  setAttributes(attributes) {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for browser tracing where we want to adjust the start time afterwards.\n   * USE THIS WITH CAUTION!\n   *\n   * @hidden\n   * @internal\n   */\n  updateStartTime(timeInput) {\n    this._startTime = spanUtils.spanTimeInputToSeconds(timeInput);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setStatus(value) {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateName(name) {\n    this._name = name;\n    this.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom');\n    return this;\n  }\n\n  /** @inheritdoc */\n  end(endTimestamp) {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n    this._endTime = spanUtils.spanTimeInputToSeconds(endTimestamp);\n    logSpans.logSpanEnd(this);\n    this._onSpanEnded();\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n  getSpanJSON() {\n    return object.dropUndefinedKeys({\n      data: this._attributes,\n      description: this._name,\n      op: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: spanUtils.getStatusMessage(this._status),\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],\n      _metrics_summary: metricSummary.getMetricSummaryJsonForSpan(this),\n      profile_id: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID],\n      exclusive_time: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME],\n      measurements: measurement.timedEventsToMeasurements(this._events),\n      is_segment: this._isStandaloneSpan && spanUtils.getRootSpan(this) === this || undefined,\n      segment_id: this._isStandaloneSpan ? spanUtils.getRootSpan(this).spanContext().spanId : undefined\n    });\n  }\n\n  /** @inheritdoc */\n  isRecording() {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  addEvent(name, attributesOrStartTime, startTime) {\n    debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Adding an event to span:', name);\n    const time$1 = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || time.timestampInSeconds();\n    const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};\n    const event = {\n      name,\n      time: spanUtils.spanTimeInputToSeconds(time$1),\n      attributes\n    };\n    this._events.push(event);\n    return this;\n  }\n\n  /**\n   * This method should generally not be used,\n   * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.\n   * USE THIS WITH CAUTION!\n   * @internal\n   * @hidden\n   * @experimental\n   */\n  isStandaloneSpan() {\n    return !!this._isStandaloneSpan;\n  }\n\n  /** Emit `spanEnd` when the span is ended. */\n  _onSpanEnded() {\n    const client = currentScopes.getClient();\n    if (client) {\n      client.emit('spanEnd', this);\n    }\n\n    // A segment span is basically the root span of a local span tree.\n    // So for now, this is either what we previously refer to as the root span,\n    // or a standalone span.\n    const isSegmentSpan = this._isStandaloneSpan || this === spanUtils.getRootSpan(this);\n    if (!isSegmentSpan) {\n      return;\n    }\n\n    // if this is a standalone span, we send it immediately\n    if (this._isStandaloneSpan) {\n      if (this._sampled) {\n        sendSpanEnvelope(envelope.createSpanEnvelope([this], client));\n      } else {\n        debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'span');\n        }\n      }\n      return;\n    }\n    const transactionEvent = this._convertSpanToTransaction();\n    if (transactionEvent) {\n      const scope = utils.getCapturedScopesOnSpan(this).scope || currentScopes.getCurrentScope();\n      scope.captureEvent(transactionEvent);\n    }\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n  _convertSpanToTransaction() {\n    // We can only convert finished spans\n    if (!isFullFinishedSpan(spanUtils.spanToJSON(this))) {\n      return undefined;\n    }\n    if (!this._name) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n    const {\n      scope: capturedSpanScope,\n      isolationScope: capturedSpanIsolationScope\n    } = utils.getCapturedScopesOnSpan(this);\n    const scope = capturedSpanScope || currentScopes.getCurrentScope();\n    const client = scope.getClient() || currentScopes.getClient();\n    if (this._sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n      return undefined;\n    }\n\n    // The transaction span itself as well as any potential standalone spans should be filtered out\n    const finishedSpans = spanUtils.getSpanDescendants(this).filter(span => span !== this && !isStandaloneSpan(span));\n    const spans = finishedSpans.map(span => spanUtils.spanToJSON(span)).filter(isFullFinishedSpan);\n    const source = this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    // remove internal root span attributes we don't need to send.\n    /* eslint-disable @typescript-eslint/no-dynamic-delete */\n    delete this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    spans.forEach(span => {\n      span.data && delete span.data[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    });\n    // eslint-enabled-next-line @typescript-eslint/no-dynamic-delete\n\n    const transaction = {\n      contexts: {\n        trace: spanUtils.spanToTransactionTraceContext(this)\n      },\n      spans:\n      // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here\n      // we do not use spans anymore after this point\n      spans.length > MAX_SPAN_COUNT ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT) : spans,\n      start_timestamp: this._startTime,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        ...object.dropUndefinedKeys({\n          dynamicSamplingContext: dynamicSamplingContext.getDynamicSamplingContextFromSpan(this)\n        })\n      },\n      _metrics_summary: metricSummary.getMetricSummaryJsonForSpan(this),\n      ...(source && {\n        transaction_info: {\n          source\n        }\n      })\n    };\n    const measurements = measurement.timedEventsToMeasurements(this._events);\n    const hasMeasurements = measurements && Object.keys(measurements).length;\n    if (hasMeasurements) {\n      debugBuild.DEBUG_BUILD && logger.logger.log('[Measurements] Adding measurements to transaction event', JSON.stringify(measurements, undefined, 2));\n      transaction.measurements = measurements;\n    }\n    return transaction;\n  }\n}\nfunction isSpanTimeInput(value) {\n  return value && typeof value === 'number' || value instanceof Date || Array.isArray(value);\n}\n\n// We want to filter out any incomplete SpanJSON objects\nfunction isFullFinishedSpan(input) {\n  return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;\n}\n\n/** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */\nfunction isStandaloneSpan(span) {\n  return span instanceof SentrySpan && span.isStandaloneSpan();\n}\n\n/**\n * Sends a `SpanEnvelope`.\n *\n * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,\n * the envelope will not be sent either.\n */\nfunction sendSpanEnvelope(envelope) {\n  const client = currentScopes.getClient();\n  if (!client) {\n    return;\n  }\n  const spanItems = envelope[1];\n  if (!spanItems || spanItems.length === 0) {\n    client.recordDroppedEvent('before_send', 'span');\n    return;\n  }\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\nexports.SentrySpan = SentrySpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst SPAN_STATUS_UNSET = 0;\nconst SPAN_STATUS_OK = 1;\nconst SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nfunction getSpanStatusFromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return {\n      code: SPAN_STATUS_OK\n    };\n  }\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'unauthenticated'\n        };\n      case 403:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'permission_denied'\n        };\n      case 404:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'not_found'\n        };\n      case 409:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'already_exists'\n        };\n      case 413:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'failed_precondition'\n        };\n      case 429:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'resource_exhausted'\n        };\n      case 499:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'cancelled'\n        };\n      default:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'invalid_argument'\n        };\n    }\n  }\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'unimplemented'\n        };\n      case 503:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'unavailable'\n        };\n      case 504:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'deadline_exceeded'\n        };\n      default:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'internal_error'\n        };\n    }\n  }\n  return {\n    code: SPAN_STATUS_ERROR,\n    message: 'unknown_error'\n  };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nfunction setHttpStatus(span, httpStatus) {\n  span.setAttribute('http.response.status_code', httpStatus);\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\nexports.SPAN_STATUS_ERROR = SPAN_STATUS_ERROR;\nexports.SPAN_STATUS_OK = SPAN_STATUS_OK;\nexports.SPAN_STATUS_UNSET = SPAN_STATUS_UNSET;\nexports.getSpanStatusFromHttpCode = getSpanStatusFromHttpCode;\nexports.setHttpStatus = setHttpStatus;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9zcGFuc3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsaUJBQWlCLEdBQUcsQ0FBQztBQUMzQixNQUFNQyxjQUFjLEdBQUcsQ0FBQztBQUN4QixNQUFNQyxpQkFBaUIsR0FBRyxDQUFDOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLHlCQUF5QkEsQ0FBQ0MsVUFBVSxFQUFFO0VBQzdDLElBQUlBLFVBQVUsR0FBRyxHQUFHLElBQUlBLFVBQVUsSUFBSSxHQUFHLEVBQUU7SUFDekMsT0FBTztNQUFFQyxJQUFJLEVBQUVKO0lBQWUsQ0FBQztFQUNqQztFQUVBLElBQUlHLFVBQVUsSUFBSSxHQUFHLElBQUlBLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDekMsUUFBUUEsVUFBVTtNQUNoQixLQUFLLEdBQUc7UUFDTixPQUFPO1VBQUVDLElBQUksRUFBRUgsaUJBQWlCO1VBQUVJLE9BQU8sRUFBRTtRQUFrQixDQUFDO01BQ2hFLEtBQUssR0FBRztRQUNOLE9BQU87VUFBRUQsSUFBSSxFQUFFSCxpQkFBaUI7VUFBRUksT0FBTyxFQUFFO1FBQW9CLENBQUM7TUFDbEUsS0FBSyxHQUFHO1FBQ04sT0FBTztVQUFFRCxJQUFJLEVBQUVILGlCQUFpQjtVQUFFSSxPQUFPLEVBQUU7UUFBWSxDQUFDO01BQzFELEtBQUssR0FBRztRQUNOLE9BQU87VUFBRUQsSUFBSSxFQUFFSCxpQkFBaUI7VUFBRUksT0FBTyxFQUFFO1FBQWlCLENBQUM7TUFDL0QsS0FBSyxHQUFHO1FBQ04sT0FBTztVQUFFRCxJQUFJLEVBQUVILGlCQUFpQjtVQUFFSSxPQUFPLEVBQUU7UUFBc0IsQ0FBQztNQUNwRSxLQUFLLEdBQUc7UUFDTixPQUFPO1VBQUVELElBQUksRUFBRUgsaUJBQWlCO1VBQUVJLE9BQU8sRUFBRTtRQUFxQixDQUFDO01BQ25FLEtBQUssR0FBRztRQUNOLE9BQU87VUFBRUQsSUFBSSxFQUFFSCxpQkFBaUI7VUFBRUksT0FBTyxFQUFFO1FBQVksQ0FBQztNQUMxRDtRQUNFLE9BQU87VUFBRUQsSUFBSSxFQUFFSCxpQkFBaUI7VUFBRUksT0FBTyxFQUFFO1FBQW1CLENBQUM7SUFDbkU7RUFDRjtFQUVBLElBQUlGLFVBQVUsSUFBSSxHQUFHLElBQUlBLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDekMsUUFBUUEsVUFBVTtNQUNoQixLQUFLLEdBQUc7UUFDTixPQUFPO1VBQUVDLElBQUksRUFBRUgsaUJBQWlCO1VBQUVJLE9BQU8sRUFBRTtRQUFnQixDQUFDO01BQzlELEtBQUssR0FBRztRQUNOLE9BQU87VUFBRUQsSUFBSSxFQUFFSCxpQkFBaUI7VUFBRUksT0FBTyxFQUFFO1FBQWMsQ0FBQztNQUM1RCxLQUFLLEdBQUc7UUFDTixPQUFPO1VBQUVELElBQUksRUFBRUgsaUJBQWlCO1VBQUVJLE9BQU8sRUFBRTtRQUFvQixDQUFDO01BQ2xFO1FBQ0UsT0FBTztVQUFFRCxJQUFJLEVBQUVILGlCQUFpQjtVQUFFSSxPQUFPLEVBQUU7UUFBaUIsQ0FBQztJQUNqRTtFQUNGO0VBRUEsT0FBTztJQUFFRCxJQUFJLEVBQUVILGlCQUFpQjtJQUFFSSxPQUFPLEVBQUU7RUFBZ0IsQ0FBQztBQUM5RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGFBQWFBLENBQUNDLElBQUksRUFBRUosVUFBVSxFQUFFO0VBQ3ZDSSxJQUFJLENBQUNDLFlBQVksQ0FBQywyQkFBMkIsRUFBRUwsVUFBVSxDQUFDO0VBRTFELE1BQU1NLFVBQVUsR0FBR1AseUJBQXlCLENBQUNDLFVBQVUsQ0FBQztFQUN4RCxJQUFJTSxVQUFVLENBQUNKLE9BQU8sS0FBSyxlQUFlLEVBQUU7SUFDMUNFLElBQUksQ0FBQ0csU0FBUyxDQUFDRCxVQUFVLENBQUM7RUFDNUI7QUFDRjtBQUVBWix5QkFBeUIsR0FBR0ksaUJBQWlCO0FBQzdDSixzQkFBc0IsR0FBR0csY0FBYztBQUN2Q0gseUJBQXlCLEdBQUdFLGlCQUFpQjtBQUM3Q0YsaUNBQWlDLEdBQUdLLHlCQUF5QjtBQUM3REwscUJBQXFCLEdBQUdTLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cmFjaW5nL3NwYW5zdGF0dXMuanM/ODBlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBTUEFOX1NUQVRVU19VTlNFVCA9IDA7XG5jb25zdCBTUEFOX1NUQVRVU19PSyA9IDE7XG5jb25zdCBTUEFOX1NUQVRVU19FUlJPUiA9IDI7XG5cbi8qKlxuICogQ29udmVydHMgYSBIVFRQIHN0YXR1cyBjb2RlIGludG8gYSBzZW50cnkgc3RhdHVzIHdpdGggYSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSBodHRwU3RhdHVzIFRoZSBIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlLlxuICogQHJldHVybnMgVGhlIHNwYW4gc3RhdHVzIG9yIHVua25vd25fZXJyb3IuXG4gKi9cbi8vIGh0dHBzOi8vZGV2ZWxvcC5zZW50cnkuZGV2L3Nkay9ldmVudC1wYXlsb2Fkcy9zcGFuL1xuZnVuY3Rpb24gZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZShodHRwU3RhdHVzKSB7XG4gIGlmIChodHRwU3RhdHVzIDwgNDAwICYmIGh0dHBTdGF0dXMgPj0gMTAwKSB7XG4gICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfT0sgfTtcbiAgfVxuXG4gIGlmIChodHRwU3RhdHVzID49IDQwMCAmJiBodHRwU3RhdHVzIDwgNTAwKSB7XG4gICAgc3dpdGNoIChodHRwU3RhdHVzKSB7XG4gICAgICBjYXNlIDQwMTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICd1bmF1dGhlbnRpY2F0ZWQnIH07XG4gICAgICBjYXNlIDQwMzpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdwZXJtaXNzaW9uX2RlbmllZCcgfTtcbiAgICAgIGNhc2UgNDA0OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ25vdF9mb3VuZCcgfTtcbiAgICAgIGNhc2UgNDA5OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2FscmVhZHlfZXhpc3RzJyB9O1xuICAgICAgY2FzZSA0MTM6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAnZmFpbGVkX3ByZWNvbmRpdGlvbicgfTtcbiAgICAgIGNhc2UgNDI5OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3Jlc291cmNlX2V4aGF1c3RlZCcgfTtcbiAgICAgIGNhc2UgNDk5OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2NhbmNlbGxlZCcgfTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAnaW52YWxpZF9hcmd1bWVudCcgfTtcbiAgICB9XG4gIH1cblxuICBpZiAoaHR0cFN0YXR1cyA+PSA1MDAgJiYgaHR0cFN0YXR1cyA8IDYwMCkge1xuICAgIHN3aXRjaCAoaHR0cFN0YXR1cykge1xuICAgICAgY2FzZSA1MDE6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAndW5pbXBsZW1lbnRlZCcgfTtcbiAgICAgIGNhc2UgNTAzOlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3VuYXZhaWxhYmxlJyB9O1xuICAgICAgY2FzZSA1MDQ6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAnZGVhZGxpbmVfZXhjZWVkZWQnIH07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ludGVybmFsX2Vycm9yJyB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAndW5rbm93bl9lcnJvcicgfTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBIdHRwIHN0YXR1cyBhdHRyaWJ1dGVzIG9uIHRoZSBjdXJyZW50IHNwYW4gYmFzZWQgb24gdGhlIGh0dHAgY29kZS5cbiAqIEFkZGl0aW9uYWxseSwgdGhlIHNwYW4ncyBzdGF0dXMgaXMgdXBkYXRlZCwgZGVwZW5kaW5nIG9uIHRoZSBodHRwIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHNldEh0dHBTdGF0dXMoc3BhbiwgaHR0cFN0YXR1cykge1xuICBzcGFuLnNldEF0dHJpYnV0ZSgnaHR0cC5yZXNwb25zZS5zdGF0dXNfY29kZScsIGh0dHBTdGF0dXMpO1xuXG4gIGNvbnN0IHNwYW5TdGF0dXMgPSBnZXRTcGFuU3RhdHVzRnJvbUh0dHBDb2RlKGh0dHBTdGF0dXMpO1xuICBpZiAoc3BhblN0YXR1cy5tZXNzYWdlICE9PSAndW5rbm93bl9lcnJvcicpIHtcbiAgICBzcGFuLnNldFN0YXR1cyhzcGFuU3RhdHVzKTtcbiAgfVxufVxuXG5leHBvcnRzLlNQQU5fU1RBVFVTX0VSUk9SID0gU1BBTl9TVEFUVVNfRVJST1I7XG5leHBvcnRzLlNQQU5fU1RBVFVTX09LID0gU1BBTl9TVEFUVVNfT0s7XG5leHBvcnRzLlNQQU5fU1RBVFVTX1VOU0VUID0gU1BBTl9TVEFUVVNfVU5TRVQ7XG5leHBvcnRzLmdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUgPSBnZXRTcGFuU3RhdHVzRnJvbUh0dHBDb2RlO1xuZXhwb3J0cy5zZXRIdHRwU3RhdHVzID0gc2V0SHR0cFN0YXR1cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYW5zdGF0dXMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTUEFOX1NUQVRVU19VTlNFVCIsIlNQQU5fU1RBVFVTX09LIiwiU1BBTl9TVEFUVVNfRVJST1IiLCJnZXRTcGFuU3RhdHVzRnJvbUh0dHBDb2RlIiwiaHR0cFN0YXR1cyIsImNvZGUiLCJtZXNzYWdlIiwic2V0SHR0cFN0YXR1cyIsInNwYW4iLCJzZXRBdHRyaWJ1dGUiLCJzcGFuU3RhdHVzIiwic2V0U3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/trace.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst index = __webpack_require__(/*! ../asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst propagationContext = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst tracing = __webpack_require__(/*! ../utils-hoist/tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js\");\nconst handleCallbackErrors = __webpack_require__(/*! ../utils/handleCallbackErrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst spanOnScope = __webpack_require__(/*! ../utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst logSpans = __webpack_require__(/*! ./logSpans.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\");\nconst sampling = __webpack_require__(/*! ./sampling.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst sentrySpan = __webpack_require__(/*! ./sentrySpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js\");\nconst spanstatus = __webpack_require__(/*! ./spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n  const spanArguments = parseSentrySpanArguments(options);\n  const {\n    forceTransaction,\n    parentSpan: customParentSpan\n  } = options;\n  return currentScopes.withScope(options.scope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n    return wrapper(() => {\n      const scope = currentScopes.getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan ? new sentryNonRecordingSpan.SentryNonRecordingSpan() : createChildOrRootSpan({\n        parentSpan,\n        spanArguments,\n        forceTransaction,\n        scope\n      });\n      spanOnScope._setSpanForScope(scope, activeSpan);\n      return handleCallbackErrors.handleCallbackErrors(() => callback(activeSpan), () => {\n        // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n        const {\n          status\n        } = spanUtils.spanToJSON(activeSpan);\n        if (activeSpan.isRecording() && (!status || status === 'ok')) {\n          activeSpan.setStatus({\n            code: spanstatus.SPAN_STATUS_ERROR,\n            message: 'internal_error'\n          });\n        }\n      }, () => activeSpan.end());\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n  const spanArguments = parseSentrySpanArguments(options);\n  const {\n    forceTransaction,\n    parentSpan: customParentSpan\n  } = options;\n  return currentScopes.withScope(options.scope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n    return wrapper(() => {\n      const scope = currentScopes.getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan ? new sentryNonRecordingSpan.SentryNonRecordingSpan() : createChildOrRootSpan({\n        parentSpan,\n        spanArguments,\n        forceTransaction,\n        scope\n      });\n      spanOnScope._setSpanForScope(scope, activeSpan);\n      function finishAndSetSpan() {\n        activeSpan.end();\n      }\n      return handleCallbackErrors.handleCallbackErrors(() => callback(activeSpan, finishAndSetSpan), () => {\n        // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n        const {\n          status\n        } = spanUtils.spanToJSON(activeSpan);\n        if (activeSpan.isRecording() && (!status || status === 'ok')) {\n          activeSpan.setStatus({\n            code: spanstatus.SPAN_STATUS_ERROR,\n            message: 'internal_error'\n          });\n        }\n      });\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n  const spanArguments = parseSentrySpanArguments(options);\n  const {\n    forceTransaction,\n    parentSpan: customParentSpan\n  } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope ? callback => currentScopes.withScope(options.scope, callback) : customParentSpan !== undefined ? callback => withActiveSpan(customParentSpan, callback) : callback => callback();\n  return wrapper(() => {\n    const scope = currentScopes.getCurrentScope();\n    const parentSpan = getParentSpan(scope);\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n    if (shouldSkipSpan) {\n      return new sentryNonRecordingSpan.SentryNonRecordingSpan();\n    }\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nconst continueTrace = (options, callback) => {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n  const {\n    sentryTrace,\n    baggage\n  } = options;\n  return currentScopes.withScope(scope => {\n    const propagationContext = tracing.propagationContextFromHeaders(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n  return currentScopes.withScope(scope => {\n    spanOnScope._setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const acs = getAcs();\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n  return currentScopes.withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      [SUPPRESS_TRACING_KEY]: true\n    });\n    return callback();\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nfunction startNewTrace(callback) {\n  return currentScopes.withScope(scope => {\n    scope.setPropagationContext({\n      traceId: propagationContext.generateTraceId()\n    });\n    debugBuild.DEBUG_BUILD && logger.logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope\n}) {\n  if (!hasTracingEnabled.hasTracingEnabled()) {\n    return new sentryNonRecordingSpan.SentryNonRecordingSpan();\n  }\n  const isolationScope = currentScopes.getIsolationScope();\n  let span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    spanUtils.addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = dynamicSamplingContext.getDynamicSamplingContextFromSpan(parentSpan);\n    const {\n      traceId,\n      spanId: parentSpanId\n    } = parentSpan.spanContext();\n    const parentSampled = spanUtils.spanIsSampled(parentSpan);\n    span = _startRootSpan({\n      traceId,\n      parentSpanId,\n      ...spanArguments\n    }, scope, parentSampled);\n    dynamicSamplingContext.freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext()\n    };\n    span = _startRootSpan({\n      traceId,\n      parentSpanId,\n      ...spanArguments\n    }, scope, parentSampled);\n    if (dsc) {\n      dynamicSamplingContext.freezeDscOnSpan(span, dsc);\n    }\n  }\n  logSpans.logSpanStart(span);\n  utils.setCapturedScopesOnSpan(span, scope, isolationScope);\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options) {\n  const exp = options.experimental || {};\n  const initialCtx = {\n    isStandalone: exp.standalone,\n    ...options\n  };\n  if (options.startTime) {\n    const ctx = {\n      ...initialCtx\n    };\n    ctx.startTimestamp = spanUtils.spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n  return initialCtx;\n}\nfunction getAcs() {\n  const carrier$1 = carrier.getMainCarrier();\n  return index.getAsyncContextStrategy(carrier$1);\n}\nfunction _startRootSpan(spanArguments, scope, parentSampled) {\n  const client = currentScopes.getClient();\n  const options = client && client.getOptions() || {};\n  const {\n    name = '',\n    attributes\n  } = spanArguments;\n  const [sampled, sampleRate] = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? [false] : sampling.sampleSpan(options, {\n    name,\n    parentSampled,\n    attributes,\n    transactionContext: {\n      name,\n      parentSampled\n    }\n  });\n  const rootSpan = new sentrySpan.SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      ...spanArguments.attributes\n    },\n    sampled\n  });\n  if (sampleRate !== undefined) {\n    rootSpan.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, sampleRate);\n  }\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan, scope, spanArguments) {\n  const {\n    spanId,\n    traceId\n  } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanUtils.spanIsSampled(parentSpan);\n  const childSpan = sampled ? new sentrySpan.SentrySpan({\n    ...spanArguments,\n    parentSpanId: spanId,\n    traceId,\n    sampled\n  }) : new sentryNonRecordingSpan.SentryNonRecordingSpan({\n    traceId\n  });\n  spanUtils.addChildSpanToSpan(parentSpan, childSpan);\n  const client = currentScopes.getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n  return childSpan;\n}\nfunction getParentSpan(scope) {\n  const span = spanOnScope._getSpanForScope(scope);\n  if (!span) {\n    return undefined;\n  }\n  const client = currentScopes.getClient();\n  const options = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return spanUtils.getRootSpan(span);\n  }\n  return span;\n}\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined ? callback => {\n    return withActiveSpan(parentSpan, callback);\n  } : callback => callback();\n}\nexports.continueTrace = continueTrace;\nexports.startInactiveSpan = startInactiveSpan;\nexports.startNewTrace = startNewTrace;\nexports.startSpan = startSpan;\nexports.startSpanManual = startSpanManual;\nexports.suppressTracing = suppressTracing;\nexports.withActiveSpan = withActiveSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nfunction setCapturedScopesOnSpan(span, scope, isolationScope) {\n  if (span) {\n    object.addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    object.addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nfunction getCapturedScopesOnSpan(span) {\n  return {\n    scope: span[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: span[ISOLATION_SCOPE_ON_START_SPAN_FIELD]\n  };\n}\nexports.getCapturedScopesOnSpan = getCapturedScopesOnSpan;\nexports.setCapturedScopesOnSpan = setCapturedScopesOnSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUVsRCxNQUFNQyx5QkFBeUIsR0FBRyxjQUFjO0FBQ2hELE1BQU1DLG1DQUFtQyxHQUFHLHVCQUF1Qjs7QUFFbkU7QUFDQSxTQUFTQyx1QkFBdUJBLENBQUNDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxjQUFjLEVBQUU7RUFDNUQsSUFBSUYsSUFBSSxFQUFFO0lBQ1JMLE1BQU0sQ0FBQ1Esd0JBQXdCLENBQUNILElBQUksRUFBRUYsbUNBQW1DLEVBQUVJLGNBQWMsQ0FBQztJQUMxRlAsTUFBTSxDQUFDUSx3QkFBd0IsQ0FBQ0gsSUFBSSxFQUFFSCx5QkFBeUIsRUFBRUksS0FBSyxDQUFDO0VBQ3pFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0csdUJBQXVCQSxDQUFDSixJQUFJLEVBQUU7RUFDckMsT0FBTztJQUNMQyxLQUFLLEVBQUdELElBQUksQ0FBR0gseUJBQXlCLENBQUM7SUFDekNLLGNBQWMsRUFBR0YsSUFBSSxDQUFHRixtQ0FBbUM7RUFDN0QsQ0FBQztBQUNIO0FBRUFMLCtCQUErQixHQUFHVyx1QkFBdUI7QUFDekRYLCtCQUErQixHQUFHTSx1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cmFjaW5nL3V0aWxzLmpzP2NkNDMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgb2JqZWN0ID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3Qvb2JqZWN0LmpzJyk7XG5cbmNvbnN0IFNDT1BFX09OX1NUQVJUX1NQQU5fRklFTEQgPSAnX3NlbnRyeVNjb3BlJztcbmNvbnN0IElTT0xBVElPTl9TQ09QRV9PTl9TVEFSVF9TUEFOX0ZJRUxEID0gJ19zZW50cnlJc29sYXRpb25TY29wZSc7XG5cbi8qKiBTdG9yZSB0aGUgc2NvcGUgJiBpc29sYXRpb24gc2NvcGUgZm9yIGEgc3Bhbiwgd2hpY2ggY2FuIHRoZSBiZSB1c2VkIHdoZW4gaXQgaXMgZmluaXNoZWQuICovXG5mdW5jdGlvbiBzZXRDYXB0dXJlZFNjb3Blc09uU3BhbihzcGFuLCBzY29wZSwgaXNvbGF0aW9uU2NvcGUpIHtcbiAgaWYgKHNwYW4pIHtcbiAgICBvYmplY3QuYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KHNwYW4sIElTT0xBVElPTl9TQ09QRV9PTl9TVEFSVF9TUEFOX0ZJRUxELCBpc29sYXRpb25TY29wZSk7XG4gICAgb2JqZWN0LmFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eShzcGFuLCBTQ09QRV9PTl9TVEFSVF9TUEFOX0ZJRUxELCBzY29wZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBHcmFicyB0aGUgc2NvcGUgYW5kIGlzb2xhdGlvbiBzY29wZSBvZmYgYSBzcGFuIHRoYXQgd2VyZSBhY3RpdmUgd2hlbiB0aGUgc3BhbiB3YXMgc3RhcnRlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2FwdHVyZWRTY29wZXNPblNwYW4oc3Bhbikge1xuICByZXR1cm4ge1xuICAgIHNjb3BlOiAoc3BhbiApW1NDT1BFX09OX1NUQVJUX1NQQU5fRklFTERdLFxuICAgIGlzb2xhdGlvblNjb3BlOiAoc3BhbiApW0lTT0xBVElPTl9TQ09QRV9PTl9TVEFSVF9TUEFOX0ZJRUxEXSxcbiAgfTtcbn1cblxuZXhwb3J0cy5nZXRDYXB0dXJlZFNjb3Blc09uU3BhbiA9IGdldENhcHR1cmVkU2NvcGVzT25TcGFuO1xuZXhwb3J0cy5zZXRDYXB0dXJlZFNjb3Blc09uU3BhbiA9IHNldENhcHR1cmVkU2NvcGVzT25TcGFuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJvYmplY3QiLCJyZXF1aXJlIiwiU0NPUEVfT05fU1RBUlRfU1BBTl9GSUVMRCIsIklTT0xBVElPTl9TQ09QRV9PTl9TVEFSVF9TUEFOX0ZJRUxEIiwic2V0Q2FwdHVyZWRTY29wZXNPblNwYW4iLCJzcGFuIiwic2NvcGUiLCJpc29sYXRpb25TY29wZSIsImFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSIsImdldENhcHR1cmVkU2NvcGVzT25TcGFuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/transports/base.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/transports/base.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst error = __webpack_require__(/*! ../utils-hoist/error.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst promisebuffer = __webpack_require__(/*! ../utils-hoist/promisebuffer.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js\");\nconst ratelimit = __webpack_require__(/*! ../utils-hoist/ratelimit.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js\");\nconst syncpromise = __webpack_require__(/*! ../utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nfunction createTransport(options, makeRequest, buffer = promisebuffer.makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE)) {\n  let rateLimits = {};\n  const flush = timeout => buffer.drain(timeout);\n  function send(envelope$1) {\n    const filteredEnvelopeItems = [];\n\n    // Drop rate limited items from envelope\n    envelope.forEachEnvelopeItem(envelope$1, (item, type) => {\n      const dataCategory = envelope.envelopeItemTypeToDataCategory(type);\n      if (ratelimit.isRateLimited(rateLimits, dataCategory)) {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return syncpromise.resolvedSyncPromise({});\n    }\n    const filteredEnvelope = envelope.createEnvelope(envelope$1[0], filteredEnvelopeItems);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = reason => {\n      envelope.forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelope.envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n    const requestTask = () => makeRequest({\n      body: envelope.serializeEnvelope(filteredEnvelope)\n    }).then(response => {\n      // We don't want to throw on NOK responses, but we want to at least log them\n      if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n        debugBuild.DEBUG_BUILD && logger.logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n      }\n      rateLimits = ratelimit.updateRateLimits(rateLimits, response);\n      return response;\n    }, error => {\n      recordEnvelopeLoss('network_error');\n      throw error;\n    });\n    return buffer.add(requestTask).then(result => result, error$1 => {\n      if (error$1 instanceof error.SentryError) {\n        debugBuild.DEBUG_BUILD && logger.logger.error('Skipped sending event because buffer is full.');\n        recordEnvelopeLoss('queue_overflow');\n        return syncpromise.resolvedSyncPromise({});\n      } else {\n        throw error$1;\n      }\n    });\n  }\n  return {\n    send,\n    flush\n  };\n}\nfunction getEventForEnvelopeItem(item, type) {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n  return Array.isArray(item) ? item[1] : undefined;\n}\nexports.DEFAULT_TRANSPORT_BUFFER_SIZE = DEFAULT_TRANSPORT_BUFFER_SIZE;\nexports.createTransport = createTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/transports/base.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/transports/multiplexed.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/transports/multiplexed.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst api = __webpack_require__(/*! ../api.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/api.js\");\nconst dsn = __webpack_require__(/*! ../utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\n\n/**\n * Gets an event from an envelope.\n *\n * This is only exported for use in the tests\n */\nfunction eventFromEnvelope(env, types) {\n  let event;\n  envelope.forEachEnvelopeItem(env, (item, type) => {\n    if (types.includes(type)) {\n      event = Array.isArray(item) ? item[1] : undefined;\n    }\n    // bail out if we found an event\n    return !!event;\n  });\n  return event;\n}\n\n/**\n * Creates a transport that overrides the release on all events.\n */\nfunction makeOverrideReleaseTransport(createTransport, release) {\n  return options => {\n    const transport = createTransport(options);\n    return {\n      ...transport,\n      send: async envelope => {\n        const event = eventFromEnvelope(envelope, ['event', 'transaction', 'profile', 'replay_event']);\n        if (event) {\n          event.release = release;\n        }\n        return transport.send(envelope);\n      }\n    };\n  };\n}\n\n/** Overrides the DSN in the envelope header  */\nfunction overrideDsn(envelope$1, dsn) {\n  return envelope.createEnvelope(dsn ? {\n    ...envelope$1[0],\n    dsn\n  } : envelope$1[0], envelope$1[1]);\n}\n\n/**\n * Creates a transport that can send events to different DSNs depending on the envelope contents.\n */\nfunction makeMultiplexedTransport(createTransport, matcher) {\n  return options => {\n    const fallbackTransport = createTransport(options);\n    const otherTransports = new Map();\n    function getTransport(dsn$1, release) {\n      // We create a transport for every unique dsn/release combination as there may be code from multiple releases in\n      // use at the same time\n      const key = release ? `${dsn$1}:${release}` : dsn$1;\n      let transport = otherTransports.get(key);\n      if (!transport) {\n        const validatedDsn = dsn.dsnFromString(dsn$1);\n        if (!validatedDsn) {\n          return undefined;\n        }\n        const url = api.getEnvelopeEndpointWithUrlEncodedAuth(validatedDsn, options.tunnel);\n        transport = release ? makeOverrideReleaseTransport(createTransport, release)({\n          ...options,\n          url\n        }) : createTransport({\n          ...options,\n          url\n        });\n        otherTransports.set(key, transport);\n      }\n      return [dsn$1, transport];\n    }\n    async function send(envelope) {\n      function getEvent(types) {\n        const eventTypes = types && types.length ? types : ['event'];\n        return eventFromEnvelope(envelope, eventTypes);\n      }\n      const transports = matcher({\n        envelope,\n        getEvent\n      }).map(result => {\n        if (typeof result === 'string') {\n          return getTransport(result, undefined);\n        } else {\n          return getTransport(result.dsn, result.release);\n        }\n      }).filter(t => !!t);\n\n      // If we have no transports to send to, use the fallback transport\n      // Don't override the DSN in the header for the fallback transport. '' is falsy\n      const transportsWithFallback = transports.length ? transports : [['', fallbackTransport]];\n      const results = await Promise.all(transportsWithFallback.map(([dsn, transport]) => transport.send(overrideDsn(envelope, dsn))));\n      return results[0];\n    }\n    async function flush(timeout) {\n      const allTransports = [...otherTransports.values(), fallbackTransport];\n      const results = await Promise.all(allTransports.map(transport => transport.flush(timeout)));\n      return results.every(r => r);\n    }\n    return {\n      send,\n      flush\n    };\n  };\n}\nexports.eventFromEnvelope = eventFromEnvelope;\nexports.makeMultiplexedTransport = makeMultiplexedTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/transports/multiplexed.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/transports/offline.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/transports/offline.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst ratelimit = __webpack_require__(/*! ../utils-hoist/ratelimit.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js\");\nconst MIN_DELAY = 100; // 100 ms\nconst START_DELAY = 5000; // 5 seconds\nconst MAX_DELAY = 3.6e6; // 1 hour\n\n/**\n * Wraps a transport and stores and retries events when they fail to send.\n *\n * @param createTransport The transport to wrap.\n */\nfunction makeOfflineTransport(createTransport) {\n  function log(...args) {\n    debugBuild.DEBUG_BUILD && logger.logger.info('[Offline]:', ...args);\n  }\n  return options => {\n    const transport = createTransport(options);\n    if (!options.createStore) {\n      throw new Error('No `createStore` function was provided');\n    }\n    const store = options.createStore(options);\n    let retryDelay = START_DELAY;\n    let flushTimer;\n    function shouldQueue(env, error, retryDelay) {\n      // We want to drop client reports because they can be generated when we retry sending events while offline.\n      if (envelope.envelopeContainsItemType(env, ['client_report'])) {\n        return false;\n      }\n      if (options.shouldStore) {\n        return options.shouldStore(env, error, retryDelay);\n      }\n      return true;\n    }\n    function flushIn(delay) {\n      if (flushTimer) {\n        clearTimeout(flushTimer);\n      }\n      flushTimer = setTimeout(async () => {\n        flushTimer = undefined;\n        const found = await store.shift();\n        if (found) {\n          log('Attempting to send previously queued event');\n\n          // We should to update the sent_at timestamp to the current time.\n          found[0].sent_at = new Date().toISOString();\n          void send(found, true).catch(e => {\n            log('Failed to retry sending', e);\n          });\n        }\n      }, delay);\n\n      // We need to unref the timer in node.js, otherwise the node process never exit.\n      if (typeof flushTimer !== 'number' && flushTimer.unref) {\n        flushTimer.unref();\n      }\n    }\n    function flushWithBackOff() {\n      if (flushTimer) {\n        return;\n      }\n      flushIn(retryDelay);\n      retryDelay = Math.min(retryDelay * 2, MAX_DELAY);\n    }\n    async function send(envelope$1, isRetry = false) {\n      // We queue all replay envelopes to avoid multiple replay envelopes being sent at the same time. If one fails, we\n      // need to retry them in order.\n      if (!isRetry && envelope.envelopeContainsItemType(envelope$1, ['replay_event', 'replay_recording'])) {\n        await store.push(envelope$1);\n        flushIn(MIN_DELAY);\n        return {};\n      }\n      try {\n        const result = await transport.send(envelope$1);\n        let delay = MIN_DELAY;\n        if (result) {\n          // If there's a retry-after header, use that as the next delay.\n          if (result.headers && result.headers['retry-after']) {\n            delay = ratelimit.parseRetryAfterHeader(result.headers['retry-after']);\n          } else if (result.headers && result.headers['x-sentry-rate-limits']) {\n            delay = 60000; // 60 seconds\n          } // If we have a server error, return now so we don't flush the queue.\n          else if ((result.statusCode || 0) >= 400) {\n            return result;\n          }\n        }\n        flushIn(delay);\n        retryDelay = START_DELAY;\n        return result;\n      } catch (e) {\n        if (await shouldQueue(envelope$1, e, retryDelay)) {\n          // If this envelope was a retry, we want to add it to the front of the queue so it's retried again first.\n          if (isRetry) {\n            await store.unshift(envelope$1);\n          } else {\n            await store.push(envelope$1);\n          }\n          flushWithBackOff();\n          log('Error sending. Event queued.', e);\n          return {};\n        } else {\n          throw e;\n        }\n      }\n    }\n    if (options.flushAtStartup) {\n      flushWithBackOff();\n    }\n    return {\n      send,\n      flush: timeout => {\n        // If there's no timeout, we should attempt to flush the offline queue.\n        if (timeout === undefined) {\n          retryDelay = START_DELAY;\n          flushIn(MIN_DELAY);\n        }\n        return transport.flush(timeout);\n      }\n    };\n  };\n}\nexports.MIN_DELAY = MIN_DELAY;\nexports.START_DELAY = START_DELAY;\nexports.makeOfflineTransport = makeOfflineTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/transports/offline.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/trpc.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/trpc.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst semanticAttributes = __webpack_require__(/*! ./semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\n__webpack_require__(/*! ./tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\n__webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ./utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\n__webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n__webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\n__webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst normalize = __webpack_require__(/*! ./utils-hoist/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\n__webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst trace = __webpack_require__(/*! ./tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst trpcCaptureContext = {\n  mechanism: {\n    handled: false,\n    data: {\n      function: 'trpcMiddleware'\n    }\n  }\n};\nfunction captureIfError(nextResult) {\n  // TODO: Set span status based on what TRPCError was encountered\n  if (typeof nextResult === 'object' && nextResult !== null && 'ok' in nextResult && !nextResult.ok && 'error' in nextResult) {\n    exports$1.captureException(nextResult.error, trpcCaptureContext);\n  }\n}\n\n/**\n * Sentry tRPC middleware that captures errors and creates spans for tRPC procedures.\n */\nfunction trpcMiddleware(options = {}) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return async function (opts) {\n    const {\n      path,\n      type,\n      next,\n      rawInput,\n      getRawInput\n    } = opts;\n    const client = currentScopes.getClient();\n    const clientOptions = client && client.getOptions();\n    const trpcContext = {\n      procedure_path: path,\n      procedure_type: type\n    };\n    if (options.attachRpcInput !== undefined ? options.attachRpcInput : clientOptions && clientOptions.sendDefaultPii) {\n      if (rawInput !== undefined) {\n        trpcContext.input = normalize.normalize(rawInput);\n      }\n      if (getRawInput !== undefined && typeof getRawInput === 'function') {\n        try {\n          const rawRes = await getRawInput();\n          trpcContext.input = normalize.normalize(rawRes);\n        } catch (err) {\n          // noop\n        }\n      }\n    }\n    return currentScopes.withScope(scope => {\n      scope.setContext('trpc', trpcContext);\n      return trace.startSpanManual({\n        name: `trpc/${path}`,\n        op: 'rpc.server',\n        attributes: {\n          [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n          [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.rpc.trpc'\n        }\n      }, async span => {\n        try {\n          const nextResult = await next();\n          captureIfError(nextResult);\n          span.end();\n          return nextResult;\n        } catch (e) {\n          exports$1.captureException(e, trpcCaptureContext);\n          span.end();\n          throw e;\n        }\n      });\n    });\n  };\n}\nexports.trpcMiddleware = trpcMiddleware;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/trpc.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nfunction applyAggregateErrorsToEvent(exceptionFromErrorImplementation, parser, maxValueLimit = 250, key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !is.isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException = event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = truncateAggregateExceptions(aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, hint.originalException, key, event.exception.values, originalException, 0), maxValueLimit);\n  }\n}\nfunction aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error, key, prevExceptions, exception, exceptionId) {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (is.isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error[key], key, [newException, ...newExceptions], newException, newExceptionId);\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (is.isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, childError, key, [newException, ...newExceptions], newException, newExceptionId);\n      }\n    });\n  }\n  return newExceptions;\n}\nfunction applyExceptionGroupFieldsForParentException(exception, exceptionId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || {\n    type: 'generic',\n    handled: true\n  };\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && {\n      is_exception_group: true\n    }),\n    exception_id: exceptionId\n  };\n}\nfunction applyExceptionGroupFieldsForChildException(exception, source, exceptionId, parentId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || {\n    type: 'generic',\n    handled: true\n  };\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId\n  };\n}\n\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */\nfunction truncateAggregateExceptions(exceptions, maxValueLength) {\n  return exceptions.map(exception => {\n    if (exception.value) {\n      exception.value = string.truncate(exception.value, maxValueLength);\n    }\n    return exception;\n  });\n}\nexports.applyAggregateErrorsToEvent = applyAggregateErrorsToEvent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/anr.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/anr.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst nodeStackTrace = __webpack_require__(/*! ./node-stack-trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\n\n/**\n * A node.js watchdog timer\n * @param pollInterval The interval that we expect to get polled at\n * @param anrThreshold The threshold for when we consider ANR\n * @param callback The callback to call for ANR\n * @returns An object with `poll` and `enabled` functions {@link WatchdogReturn}\n */\nfunction watchdogTimer(createTimer, pollInterval, anrThreshold, callback) {\n  const timer = createTimer();\n  let triggered = false;\n  let enabled = true;\n  setInterval(() => {\n    const diffMs = timer.getTimeMs();\n    if (triggered === false && diffMs > pollInterval + anrThreshold) {\n      triggered = true;\n      if (enabled) {\n        callback();\n      }\n    }\n    if (diffMs < pollInterval + anrThreshold) {\n      triggered = false;\n    }\n  }, 20);\n  return {\n    poll: () => {\n      timer.reset();\n    },\n    enabled: state => {\n      enabled = state;\n    }\n  };\n}\n\n// types copied from inspector.d.ts\n\n/**\n * Converts Debugger.CallFrame to Sentry StackFrame\n */\nfunction callFrameToStackFrame(frame, url, getModuleFromFilename) {\n  const filename = url ? url.replace(/^file:\\/\\//, '') : undefined;\n\n  // CallFrame row/col are 0 based, whereas StackFrame are 1 based\n  const colno = frame.location.columnNumber ? frame.location.columnNumber + 1 : undefined;\n  const lineno = frame.location.lineNumber ? frame.location.lineNumber + 1 : undefined;\n  return object.dropUndefinedKeys({\n    filename,\n    module: getModuleFromFilename(filename),\n    function: frame.functionName || stacktrace.UNKNOWN_FUNCTION,\n    colno,\n    lineno,\n    in_app: filename ? nodeStackTrace.filenameIsInApp(filename) : undefined\n  });\n}\nexports.callFrameToStackFrame = callFrameToStackFrame;\nexports.watchdogTimer = watchdogTimer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYW5yLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsY0FBYyxHQUFHQyxtQkFBTyxDQUFDLGlIQUF1QixDQUFDO0FBQ3ZELE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyw2RkFBYSxDQUFDO0FBQ3JDLE1BQU1FLFVBQVUsR0FBR0YsbUJBQU8sQ0FBQyxxR0FBaUIsQ0FBQzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxhQUFhQSxDQUNwQkMsV0FBVyxFQUNYQyxZQUFZLEVBQ1pDLFlBQVksRUFDWkMsUUFBUSxFQUNSO0VBQ0EsTUFBTUMsS0FBSyxHQUFHSixXQUFXLENBQUMsQ0FBQztFQUMzQixJQUFJSyxTQUFTLEdBQUcsS0FBSztFQUNyQixJQUFJQyxPQUFPLEdBQUcsSUFBSTtFQUVsQkMsV0FBVyxDQUFDLE1BQU07SUFDaEIsTUFBTUMsTUFBTSxHQUFHSixLQUFLLENBQUNLLFNBQVMsQ0FBQyxDQUFDO0lBRWhDLElBQUlKLFNBQVMsS0FBSyxLQUFLLElBQUlHLE1BQU0sR0FBR1AsWUFBWSxHQUFHQyxZQUFZLEVBQUU7TUFDL0RHLFNBQVMsR0FBRyxJQUFJO01BQ2hCLElBQUlDLE9BQU8sRUFBRTtRQUNYSCxRQUFRLENBQUMsQ0FBQztNQUNaO0lBQ0Y7SUFFQSxJQUFJSyxNQUFNLEdBQUdQLFlBQVksR0FBR0MsWUFBWSxFQUFFO01BQ3hDRyxTQUFTLEdBQUcsS0FBSztJQUNuQjtFQUNGLENBQUMsRUFBRSxFQUFFLENBQUM7RUFFTixPQUFPO0lBQ0xLLElBQUksRUFBRUEsQ0FBQSxLQUFNO01BQ1ZOLEtBQUssQ0FBQ08sS0FBSyxDQUFDLENBQUM7SUFDZixDQUFDO0lBQ0RMLE9BQU8sRUFBR00sS0FBSyxJQUFLO01BQ2xCTixPQUFPLEdBQUdNLEtBQUs7SUFDakI7RUFDRixDQUFDO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0MscUJBQXFCQSxDQUM1QkMsS0FBSyxFQUNMQyxHQUFHLEVBQ0hDLHFCQUFxQixFQUNyQjtFQUNBLE1BQU1DLFFBQVEsR0FBR0YsR0FBRyxHQUFHQSxHQUFHLENBQUNHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLEdBQUdDLFNBQVM7O0VBRWhFO0VBQ0EsTUFBTUMsS0FBSyxHQUFHTixLQUFLLENBQUNPLFFBQVEsQ0FBQ0MsWUFBWSxHQUFHUixLQUFLLENBQUNPLFFBQVEsQ0FBQ0MsWUFBWSxHQUFHLENBQUMsR0FBR0gsU0FBUztFQUN2RixNQUFNSSxNQUFNLEdBQUdULEtBQUssQ0FBQ08sUUFBUSxDQUFDRyxVQUFVLEdBQUdWLEtBQUssQ0FBQ08sUUFBUSxDQUFDRyxVQUFVLEdBQUcsQ0FBQyxHQUFHTCxTQUFTO0VBRXBGLE9BQU90QixNQUFNLENBQUM0QixpQkFBaUIsQ0FBQztJQUM5QlIsUUFBUTtJQUNSUyxNQUFNLEVBQUVWLHFCQUFxQixDQUFDQyxRQUFRLENBQUM7SUFDdkNVLFFBQVEsRUFBRWIsS0FBSyxDQUFDYyxZQUFZLElBQUk5QixVQUFVLENBQUMrQixnQkFBZ0I7SUFDM0RULEtBQUs7SUFDTEcsTUFBTTtJQUNOTyxNQUFNLEVBQUViLFFBQVEsR0FBR3RCLGNBQWMsQ0FBQ29DLGVBQWUsQ0FBQ2QsUUFBUSxDQUFDLEdBQUdFO0VBQ2hFLENBQUMsQ0FBQztBQUNKO0FBRUExQiw2QkFBNkIsR0FBR29CLHFCQUFxQjtBQUNyRHBCLHFCQUFxQixHQUFHTSxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYW5yLmpzPzViMTgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgbm9kZVN0YWNrVHJhY2UgPSByZXF1aXJlKCcuL25vZGUtc3RhY2stdHJhY2UuanMnKTtcbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4vb2JqZWN0LmpzJyk7XG5jb25zdCBzdGFja3RyYWNlID0gcmVxdWlyZSgnLi9zdGFja3RyYWNlLmpzJyk7XG5cbi8qKlxuICogQSBub2RlLmpzIHdhdGNoZG9nIHRpbWVyXG4gKiBAcGFyYW0gcG9sbEludGVydmFsIFRoZSBpbnRlcnZhbCB0aGF0IHdlIGV4cGVjdCB0byBnZXQgcG9sbGVkIGF0XG4gKiBAcGFyYW0gYW5yVGhyZXNob2xkIFRoZSB0aHJlc2hvbGQgZm9yIHdoZW4gd2UgY29uc2lkZXIgQU5SXG4gKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGNhbGwgZm9yIEFOUlxuICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggYHBvbGxgIGFuZCBgZW5hYmxlZGAgZnVuY3Rpb25zIHtAbGluayBXYXRjaGRvZ1JldHVybn1cbiAqL1xuZnVuY3Rpb24gd2F0Y2hkb2dUaW1lcihcbiAgY3JlYXRlVGltZXIsXG4gIHBvbGxJbnRlcnZhbCxcbiAgYW5yVGhyZXNob2xkLFxuICBjYWxsYmFjayxcbikge1xuICBjb25zdCB0aW1lciA9IGNyZWF0ZVRpbWVyKCk7XG4gIGxldCB0cmlnZ2VyZWQgPSBmYWxzZTtcbiAgbGV0IGVuYWJsZWQgPSB0cnVlO1xuXG4gIHNldEludGVydmFsKCgpID0+IHtcbiAgICBjb25zdCBkaWZmTXMgPSB0aW1lci5nZXRUaW1lTXMoKTtcblxuICAgIGlmICh0cmlnZ2VyZWQgPT09IGZhbHNlICYmIGRpZmZNcyA+IHBvbGxJbnRlcnZhbCArIGFuclRocmVzaG9sZCkge1xuICAgICAgdHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpZmZNcyA8IHBvbGxJbnRlcnZhbCArIGFuclRocmVzaG9sZCkge1xuICAgICAgdHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgfVxuICB9LCAyMCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwb2xsOiAoKSA9PiB7XG4gICAgICB0aW1lci5yZXNldCgpO1xuICAgIH0sXG4gICAgZW5hYmxlZDogKHN0YXRlKSA9PiB7XG4gICAgICBlbmFibGVkID0gc3RhdGU7XG4gICAgfSxcbiAgfTtcbn1cblxuLy8gdHlwZXMgY29waWVkIGZyb20gaW5zcGVjdG9yLmQudHNcblxuLyoqXG4gKiBDb252ZXJ0cyBEZWJ1Z2dlci5DYWxsRnJhbWUgdG8gU2VudHJ5IFN0YWNrRnJhbWVcbiAqL1xuZnVuY3Rpb24gY2FsbEZyYW1lVG9TdGFja0ZyYW1lKFxuICBmcmFtZSxcbiAgdXJsLFxuICBnZXRNb2R1bGVGcm9tRmlsZW5hbWUsXG4pIHtcbiAgY29uc3QgZmlsZW5hbWUgPSB1cmwgPyB1cmwucmVwbGFjZSgvXmZpbGU6XFwvXFwvLywgJycpIDogdW5kZWZpbmVkO1xuXG4gIC8vIENhbGxGcmFtZSByb3cvY29sIGFyZSAwIGJhc2VkLCB3aGVyZWFzIFN0YWNrRnJhbWUgYXJlIDEgYmFzZWRcbiAgY29uc3QgY29sbm8gPSBmcmFtZS5sb2NhdGlvbi5jb2x1bW5OdW1iZXIgPyBmcmFtZS5sb2NhdGlvbi5jb2x1bW5OdW1iZXIgKyAxIDogdW5kZWZpbmVkO1xuICBjb25zdCBsaW5lbm8gPSBmcmFtZS5sb2NhdGlvbi5saW5lTnVtYmVyID8gZnJhbWUubG9jYXRpb24ubGluZU51bWJlciArIDEgOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIG9iamVjdC5kcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgZmlsZW5hbWUsXG4gICAgbW9kdWxlOiBnZXRNb2R1bGVGcm9tRmlsZW5hbWUoZmlsZW5hbWUpLFxuICAgIGZ1bmN0aW9uOiBmcmFtZS5mdW5jdGlvbk5hbWUgfHwgc3RhY2t0cmFjZS5VTktOT1dOX0ZVTkNUSU9OLFxuICAgIGNvbG5vLFxuICAgIGxpbmVubyxcbiAgICBpbl9hcHA6IGZpbGVuYW1lID8gbm9kZVN0YWNrVHJhY2UuZmlsZW5hbWVJc0luQXBwKGZpbGVuYW1lKSA6IHVuZGVmaW5lZCxcbiAgfSk7XG59XG5cbmV4cG9ydHMuY2FsbEZyYW1lVG9TdGFja0ZyYW1lID0gY2FsbEZyYW1lVG9TdGFja0ZyYW1lO1xuZXhwb3J0cy53YXRjaGRvZ1RpbWVyID0gd2F0Y2hkb2dUaW1lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm5vZGVTdGFja1RyYWNlIiwicmVxdWlyZSIsIm9iamVjdCIsInN0YWNrdHJhY2UiLCJ3YXRjaGRvZ1RpbWVyIiwiY3JlYXRlVGltZXIiLCJwb2xsSW50ZXJ2YWwiLCJhbnJUaHJlc2hvbGQiLCJjYWxsYmFjayIsInRpbWVyIiwidHJpZ2dlcmVkIiwiZW5hYmxlZCIsInNldEludGVydmFsIiwiZGlmZk1zIiwiZ2V0VGltZU1zIiwicG9sbCIsInJlc2V0Iiwic3RhdGUiLCJjYWxsRnJhbWVUb1N0YWNrRnJhbWUiLCJmcmFtZSIsInVybCIsImdldE1vZHVsZUZyb21GaWxlbmFtZSIsImZpbGVuYW1lIiwicmVwbGFjZSIsInVuZGVmaW5lZCIsImNvbG5vIiwibG9jYXRpb24iLCJjb2x1bW5OdW1iZXIiLCJsaW5lbm8iLCJsaW5lTnVtYmVyIiwiZHJvcFVuZGVmaW5lZEtleXMiLCJtb2R1bGUiLCJmdW5jdGlvbiIsImZ1bmN0aW9uTmFtZSIsIlVOS05PV05fRlVOQ1RJT04iLCJpbl9hcHAiLCJmaWxlbmFtZUlzSW5BcHAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/anr.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/array.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/array.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** Flattens a multi-dimensional array\n *\n * @deprecated This function is deprecated and will be removed in the next major version.\n */\nfunction flatten(input) {\n  const result = [];\n  const flattenHelper = input => {\n    input.forEach(el => {\n      if (Array.isArray(el)) {\n        flattenHelper(el);\n      } else {\n        result.push(el);\n      }\n    });\n  };\n  flattenHelper(input);\n  return result;\n}\nexports.flatten = flatten;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxPQUFPQSxDQUFDQyxLQUFLLEVBQUU7RUFDdEIsTUFBTUMsTUFBTSxHQUFHLEVBQUU7RUFFakIsTUFBTUMsYUFBYSxHQUFJRixLQUFLLElBQUs7SUFDL0JBLEtBQUssQ0FBQ0csT0FBTyxDQUFFQyxFQUFFLElBQUs7TUFDcEIsSUFBSUMsS0FBSyxDQUFDQyxPQUFPLENBQUNGLEVBQUUsQ0FBQyxFQUFFO1FBQ3JCRixhQUFhLENBQUNFLEVBQUcsQ0FBQztNQUNwQixDQUFDLE1BQU07UUFDTEgsTUFBTSxDQUFDTSxJQUFJLENBQUNILEVBQUcsQ0FBQztNQUNsQjtJQUNGLENBQUMsQ0FBQztFQUNKLENBQUM7RUFFREYsYUFBYSxDQUFDRixLQUFLLENBQUM7RUFDcEIsT0FBT0MsTUFBTTtBQUNmO0FBRUFKLGVBQWUsR0FBR0UsT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2FycmF5LmpzPzE4N2YiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqIEZsYXR0ZW5zIGEgbXVsdGktZGltZW5zaW9uYWwgYXJyYXlcbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuKGlucHV0KSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gIGNvbnN0IGZsYXR0ZW5IZWxwZXIgPSAoaW5wdXQpID0+IHtcbiAgICBpbnB1dC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgICAgIGZsYXR0ZW5IZWxwZXIoZWwgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGVsICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgZmxhdHRlbkhlbHBlcihpbnB1dCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydHMuZmxhdHRlbiA9IGZsYXR0ZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZsYXR0ZW4iLCJpbnB1dCIsInJlc3VsdCIsImZsYXR0ZW5IZWxwZXIiLCJmb3JFYWNoIiwiZWwiLCJBcnJheSIsImlzQXJyYXkiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/array.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n\n/**\n * @deprecated Use a `\"baggage\"` string directly\n */\nconst BAGGAGE_HEADER_NAME = 'baggage';\nconst SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nconst MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nfunction baggageHeaderToDynamicSamplingContext(\n// Very liberal definition of what any incoming header might look like\nbaggageHeader) {\n  const baggageObject = parseBaggageHeader(baggageHeader);\n  if (!baggageObject) {\n    return undefined;\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nfunction dynamicSamplingContextToSentryBaggageHeader(\n// this also takes undefined for convenience and bundle size in other places\ndynamicSamplingContext) {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce((acc, [dscKey, dscValue]) => {\n    if (dscValue) {\n      acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n    }\n    return acc;\n  }, {});\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Take a baggage header and parse it into an object.\n */\nfunction parseBaggageHeader(baggageHeader) {\n  if (!baggageHeader || !is.isString(baggageHeader) && !Array.isArray(baggageHeader)) {\n    return undefined;\n  }\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    return baggageHeader.reduce((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      Object.entries(currBaggageObject).forEach(([key, value]) => {\n        acc[key] = value;\n      });\n      return acc;\n    }, {});\n  }\n  return baggageHeaderToObject(baggageHeader);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader) {\n  return baggageHeader.split(',').map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim()))).reduce((acc, [key, value]) => {\n    if (key && value) {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object) {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn(`Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`);\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\nexports.BAGGAGE_HEADER_NAME = BAGGAGE_HEADER_NAME;\nexports.MAX_BAGGAGE_STRING_LENGTH = MAX_BAGGAGE_STRING_LENGTH;\nexports.SENTRY_BAGGAGE_KEY_PREFIX = SENTRY_BAGGAGE_KEY_PREFIX;\nexports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = SENTRY_BAGGAGE_KEY_PREFIX_REGEX;\nexports.baggageHeaderToDynamicSamplingContext = baggageHeaderToDynamicSamplingContext;\nexports.dynamicSamplingContextToSentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader;\nexports.parseBaggageHeader = parseBaggageHeader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/breadcrumb-log-level.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/breadcrumb-log-level.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Determine a breadcrumb's log level (only `warning` or `error`) based on an HTTP status code.\n */\nfunction getBreadcrumbLogLevelFromHttpStatusCode(statusCode) {\n  // NOTE: undefined defaults to 'info' in Sentry\n  if (statusCode === undefined) {\n    return undefined;\n  } else if (statusCode >= 400 && statusCode < 500) {\n    return 'warning';\n  } else if (statusCode >= 500) {\n    return 'error';\n  } else {\n    return undefined;\n  }\n}\nexports.getBreadcrumbLogLevelFromHttpStatusCode = getBreadcrumbLogLevelFromHttpStatusCode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnJlYWRjcnVtYi1sb2ctbGV2ZWwuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsdUNBQXVDQSxDQUFDQyxVQUFVLEVBQUU7RUFDM0Q7RUFDQSxJQUFJQSxVQUFVLEtBQUtDLFNBQVMsRUFBRTtJQUM1QixPQUFPQSxTQUFTO0VBQ2xCLENBQUMsTUFBTSxJQUFJRCxVQUFVLElBQUksR0FBRyxJQUFJQSxVQUFVLEdBQUcsR0FBRyxFQUFFO0lBQ2hELE9BQU8sU0FBUztFQUNsQixDQUFDLE1BQU0sSUFBSUEsVUFBVSxJQUFJLEdBQUcsRUFBRTtJQUM1QixPQUFPLE9BQU87RUFDaEIsQ0FBQyxNQUFNO0lBQ0wsT0FBT0MsU0FBUztFQUNsQjtBQUNGO0FBRUFKLCtDQUErQyxHQUFHRSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9icmVhZGNydW1iLWxvZy1sZXZlbC5qcz9mNTNhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGEgYnJlYWRjcnVtYidzIGxvZyBsZXZlbCAob25seSBgd2FybmluZ2Agb3IgYGVycm9yYCkgYmFzZWQgb24gYW4gSFRUUCBzdGF0dXMgY29kZS5cbiAqL1xuZnVuY3Rpb24gZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlKHN0YXR1c0NvZGUpIHtcbiAgLy8gTk9URTogdW5kZWZpbmVkIGRlZmF1bHRzIHRvICdpbmZvJyBpbiBTZW50cnlcbiAgaWYgKHN0YXR1c0NvZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoc3RhdHVzQ29kZSA+PSA0MDAgJiYgc3RhdHVzQ29kZSA8IDUwMCkge1xuICAgIHJldHVybiAnd2FybmluZyc7XG4gIH0gZWxzZSBpZiAoc3RhdHVzQ29kZSA+PSA1MDApIHtcbiAgICByZXR1cm4gJ2Vycm9yJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydHMuZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlID0gZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJlYWRjcnVtYi1sb2ctbGV2ZWwuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRCcmVhZGNydW1iTG9nTGV2ZWxGcm9tSHR0cFN0YXR1c0NvZGUiLCJzdGF0dXNDb2RlIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/breadcrumb-log-level.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/browser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst WINDOW = worldwide.GLOBAL_OBJ;\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction htmlTreeAsString(elem, options = {}) {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n        break;\n      }\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  const elem = el;\n  const out = [];\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)]) : null;\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n    const className = elem.className;\n    if (className && is.isString(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nfunction getLocationHref() {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existence of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n *\n * @deprecated This method is deprecated and will be removed in the next major version.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector);\n  }\n  return null;\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nfunction getComponentName(elem) {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n  let currentElem = elem;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n    currentElem = currentElem.parentNode;\n  }\n  return null;\n}\nexports.getComponentName = getComponentName;\nexports.getDomElement = getDomElement;\nexports.getLocationHref = getLocationHref;\nexports.htmlTreeAsString = htmlTreeAsString;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/browser.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncNullishCoalesce.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncNullishCoalesce.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst _nullishCoalesce = __webpack_require__(/*! ./_nullishCoalesce.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js\");\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the\n * result of an async operation.\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nasync function _asyncNullishCoalesce(lhs, rhsFn) {\n  return _nullishCoalesce._nullishCoalesce(lhs, rhsFn);\n}\n\n// Sucrase version:\n// async function _asyncNullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return await rhsFn();\n//   }\n// }\n\nexports._asyncNullishCoalesce = _asyncNullishCoalesce;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jTnVsbGlzaENvYWxlc2NlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsZ0JBQWdCLEdBQUdDLG1CQUFPLENBQUMsZ0lBQXVCLENBQUM7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlQyxxQkFBcUJBLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxFQUFFO0VBQy9DLE9BQU9KLGdCQUFnQixDQUFDQSxnQkFBZ0IsQ0FBQ0csR0FBRyxFQUFFQyxLQUFLLENBQUM7QUFDdEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQU4sNkJBQTZCLEdBQUdJLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2J1aWxkUG9seWZpbGxzL19hc3luY051bGxpc2hDb2FsZXNjZS5qcz82OTJmIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IF9udWxsaXNoQ29hbGVzY2UgPSByZXF1aXJlKCcuL19udWxsaXNoQ29hbGVzY2UuanMnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvdHJlZS8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmXG4vL1xuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggdmFyaW91cyBjb250cmlidXRvcnMgKHNlZSBBVVRIT1JTKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cblxuLyoqXG4gKiBQb2x5ZmlsbCBmb3IgdGhlIG51bGxpc2ggY29hbGVzY2luZyBvcGVyYXRvciAoYD8/YCksIHdoZW4gdXNlZCBpbiBzaXR1YXRpb25zIHdoZXJlIGF0IGxlYXN0IG9uZSBvZiB0aGUgdmFsdWVzIGlzIHRoZVxuICogcmVzdWx0IG9mIGFuIGFzeW5jIG9wZXJhdGlvbi5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIFJIUyBpcyB3cmFwcGVkIGluIGEgZnVuY3Rpb24gc28gdGhhdCBpZiBpdCdzIGEgY29tcHV0ZWQgdmFsdWUsIHRoYXQgZXZhbHVhdGlvbiB3b24ndCBoYXBwZW4gdW5sZXNzIHRoZVxuICogTEhTIGV2YWx1YXRlcyB0byBhIG51bGxpc2ggdmFsdWUsIHRvIG1pbWljIHRoZSBvcGVyYXRvcidzIHNob3J0LWNpcmN1aXRpbmcgYmVoYXZpb3IuXG4gKlxuICogQWRhcHRlZCBmcm9tIFN1Y3Jhc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlKVxuICpcbiAqIEBwYXJhbSBsaHMgVGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIHRvIHRoZSBsZWZ0IG9mIHRoZSBgPz9gXG4gKiBAcGFyYW0gcmhzRm4gQSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIHRvIHRoZSByaWdodCBvZiB0aGUgYD8/YFxuICogQHJldHVybnMgVGhlIExIUyB2YWx1ZSwgdW5sZXNzIGl0J3MgYG51bGxgIG9yIGB1bmRlZmluZWRgLCBpbiB3aGljaCBjYXNlLCB0aGUgUkhTIHZhbHVlXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIF9hc3luY051bGxpc2hDb2FsZXNjZShsaHMsIHJoc0ZuKSB7XG4gIHJldHVybiBfbnVsbGlzaENvYWxlc2NlLl9udWxsaXNoQ29hbGVzY2UobGhzLCByaHNGbik7XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvbjpcbi8vIGFzeW5jIGZ1bmN0aW9uIF9hc3luY051bGxpc2hDb2FsZXNjZShsaHMsIHJoc0ZuKSB7XG4vLyAgIGlmIChsaHMgIT0gbnVsbCkge1xuLy8gICAgIHJldHVybiBsaHM7XG4vLyAgIH0gZWxzZSB7XG4vLyAgICAgcmV0dXJuIGF3YWl0IHJoc0ZuKCk7XG4vLyAgIH1cbi8vIH1cblxuZXhwb3J0cy5fYXN5bmNOdWxsaXNoQ29hbGVzY2UgPSBfYXN5bmNOdWxsaXNoQ29hbGVzY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXN5bmNOdWxsaXNoQ29hbGVzY2UuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfbnVsbGlzaENvYWxlc2NlIiwicmVxdWlyZSIsIl9hc3luY051bGxpc2hDb2FsZXNjZSIsImxocyIsInJoc0ZuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncNullishCoalesce.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, for situations in which at least one part of the expression is async.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nasync function _asyncOptionalChain(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = await fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = await fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Sucrase version:\n// async function _asyncOptionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = await fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = await fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n\nexports._asyncOptionalChain = _asyncOptionalChain;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jT3B0aW9uYWxDaGFpbi5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWVDLG1CQUFtQkEsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3RDLElBQUlDLGFBQWEsR0FBR0MsU0FBUztFQUM3QixJQUFJSixLQUFLLEdBQUdFLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDbEIsSUFBSUcsQ0FBQyxHQUFHLENBQUM7RUFDVCxPQUFPQSxDQUFDLEdBQUdILEdBQUcsQ0FBQ0ksTUFBTSxFQUFFO0lBQ3JCLE1BQU1DLEVBQUUsR0FBR0wsR0FBRyxDQUFDRyxDQUFDLENBQUM7SUFDakIsTUFBTUcsRUFBRSxHQUFHTixHQUFHLENBQUNHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckJBLENBQUMsSUFBSSxDQUFDO0lBQ047SUFDQSxJQUFJLENBQUNFLEVBQUUsS0FBSyxnQkFBZ0IsSUFBSUEsRUFBRSxLQUFLLGNBQWMsS0FBS1AsS0FBSyxJQUFJLElBQUksRUFBRTtNQUN2RTtNQUNBO0lBQ0Y7SUFDQSxJQUFJTyxFQUFFLEtBQUssUUFBUSxJQUFJQSxFQUFFLEtBQUssZ0JBQWdCLEVBQUU7TUFDOUNKLGFBQWEsR0FBR0gsS0FBSztNQUNyQkEsS0FBSyxHQUFHLE1BQU1RLEVBQUUsQ0FBQ1IsS0FBSyxDQUFDO0lBQ3pCLENBQUMsTUFBTSxJQUFJTyxFQUFFLEtBQUssTUFBTSxJQUFJQSxFQUFFLEtBQUssY0FBYyxFQUFFO01BQ2pEUCxLQUFLLEdBQUcsTUFBTVEsRUFBRSxDQUFDLENBQUMsR0FBR0MsSUFBSSxLQUFNVCxLQUFLLENBQUdVLElBQUksQ0FBQ1AsYUFBYSxFQUFFLEdBQUdNLElBQUksQ0FBQyxDQUFDO01BQ3BFTixhQUFhLEdBQUdDLFNBQVM7SUFDM0I7RUFDRjtFQUNBLE9BQU9KLEtBQUs7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUQsMkJBQTJCLEdBQUdFLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2J1aWxkUG9seWZpbGxzL19hc3luY09wdGlvbmFsQ2hhaW4uanM/YjczMCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgb3B0aW9uYWwgY2hhaW4gb3BlcmF0b3IsIGA/LmAsIGdpdmVuIHByZXZpb3VzIGNvbnZlcnNpb24gb2YgdGhlIGV4cHJlc3Npb24gaW50byBhbiBhcnJheSBvZiB2YWx1ZXMsXG4gKiBkZXNjcmlwdG9ycywgYW5kIGZ1bmN0aW9ucywgZm9yIHNpdHVhdGlvbnMgaW4gd2hpY2ggYXQgbGVhc3Qgb25lIHBhcnQgb2YgdGhlIGV4cHJlc3Npb24gaXMgYXN5bmMuXG4gKlxuICogQWRhcHRlZCBmcm9tIFN1Y3Jhc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlKSBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL2Jsb2IvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5Zi9zcmMvdHJhbnNmb3JtZXJzL09wdGlvbmFsQ2hhaW5pbmdOdWxsaXNoVHJhbnNmb3JtZXIudHMjTDE1XG4gKlxuICogQHBhcmFtIG9wcyBBcnJheSByZXN1bHQgb2YgZXhwcmVzc2lvbiBjb252ZXJzaW9uXG4gKiBAcmV0dXJucyBUaGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb25cbiAqL1xuYXN5bmMgZnVuY3Rpb24gX2FzeW5jT3B0aW9uYWxDaGFpbihvcHMpIHtcbiAgbGV0IGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4gIGxldCB2YWx1ZSA9IG9wc1swXTtcbiAgbGV0IGkgPSAxO1xuICB3aGlsZSAoaSA8IG9wcy5sZW5ndGgpIHtcbiAgICBjb25zdCBvcCA9IG9wc1tpXSA7XG4gICAgY29uc3QgZm4gPSBvcHNbaSArIDFdIDtcbiAgICBpICs9IDI7XG4gICAgLy8gYnkgY2hlY2tpbmcgZm9yIGxvb3NlIGVxdWFsaXR5IHRvIGBudWxsYCwgd2UgY2F0Y2ggYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgaWYgKChvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgIC8vIHJlYWxseSB3ZSdyZSBtZWFuaW5nIHRvIHJldHVybiBgdW5kZWZpbmVkYCBhcyBhbiBhY3R1YWwgdmFsdWUgaGVyZSwgYnV0IGl0IHNhdmVzIGJ5dGVzIG5vdCB0byB3cml0ZSBpdFxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob3AgPT09ICdhY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnKSB7XG4gICAgICBsYXN0QWNjZXNzTEhTID0gdmFsdWU7XG4gICAgICB2YWx1ZSA9IGF3YWl0IGZuKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnY2FsbCcgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSB7XG4gICAgICB2YWx1ZSA9IGF3YWl0IGZuKCguLi5hcmdzKSA9PiAodmFsdWUgKS5jYWxsKGxhc3RBY2Nlc3NMSFMsIC4uLmFyZ3MpKTtcbiAgICAgIGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gU3VjcmFzZSB2ZXJzaW9uOlxuLy8gYXN5bmMgZnVuY3Rpb24gX2FzeW5jT3B0aW9uYWxDaGFpbihvcHMpIHtcbi8vICAgbGV0IGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4vLyAgIGxldCB2YWx1ZSA9IG9wc1swXTtcbi8vICAgbGV0IGkgPSAxO1xuLy8gICB3aGlsZSAoaSA8IG9wcy5sZW5ndGgpIHtcbi8vICAgICBjb25zdCBvcCA9IG9wc1tpXTtcbi8vICAgICBjb25zdCBmbiA9IG9wc1tpICsgMV07XG4vLyAgICAgaSArPSAyO1xuLy8gICAgIGlmICgob3AgPT09ICdvcHRpb25hbEFjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSAmJiB2YWx1ZSA9PSBudWxsKSB7XG4vLyAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuLy8gICAgIH1cbi8vICAgICBpZiAob3AgPT09ICdhY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnKSB7XG4vLyAgICAgICBsYXN0QWNjZXNzTEhTID0gdmFsdWU7XG4vLyAgICAgICB2YWx1ZSA9IGF3YWl0IGZuKHZhbHVlKTtcbi8vICAgICB9IGVsc2UgaWYgKG9wID09PSAnY2FsbCcgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSB7XG4vLyAgICAgICB2YWx1ZSA9IGF3YWl0IGZuKCguLi5hcmdzKSA9PiB2YWx1ZS5jYWxsKGxhc3RBY2Nlc3NMSFMsIC4uLmFyZ3MpKTtcbi8vICAgICAgIGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4vLyAgICAgfVxuLy8gICB9XG4vLyAgIHJldHVybiB2YWx1ZTtcbi8vIH1cblxuZXhwb3J0cy5fYXN5bmNPcHRpb25hbENoYWluID0gX2FzeW5jT3B0aW9uYWxDaGFpbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9hc3luY09wdGlvbmFsQ2hhaW4uanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfYXN5bmNPcHRpb25hbENoYWluIiwib3BzIiwibGFzdEFjY2Vzc0xIUyIsInVuZGVmaW5lZCIsImkiLCJsZW5ndGgiLCJvcCIsImZuIiwiYXJncyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst _asyncOptionalChain = __webpack_require__(/*! ./_asyncOptionalChain.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js\");\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, in cases where the value of the expression is to be deleted.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable\n * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which\n * case `false`.\n */\nasync function _asyncOptionalChainDelete(ops) {\n  const result = await _asyncOptionalChain._asyncOptionalChain(ops);\n  // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,\n  // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in\n  // which case we return whatever the `delete` returned, which will be a boolean.\n  return result == null ? true : result;\n}\n\n// Sucrase version:\n// async function asyncOptionalChainDelete(ops) {\n//   const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);\n//   return result == null ? true : result;\n// }\n\nexports._asyncOptionalChainDelete = _asyncOptionalChainDelete;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLG1CQUFtQixHQUFHQyxtQkFBTyxDQUFDLHNJQUEwQixDQUFDOztBQUUvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWVDLHlCQUF5QkEsQ0FBQ0MsR0FBRyxFQUFFO0VBQzVDLE1BQU1DLE1BQU0sR0FBSSxNQUFNSixtQkFBbUIsQ0FBQ0EsbUJBQW1CLENBQUNHLEdBQUcsQ0FBRTtFQUNuRTtFQUNBO0VBQ0E7RUFDQSxPQUFPQyxNQUFNLElBQUksSUFBSSxHQUFHLElBQUksR0FBSUEsTUFBUTtBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBTixpQ0FBaUMsR0FBR0kseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZS5qcz8zODI4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IF9hc3luY09wdGlvbmFsQ2hhaW4gPSByZXF1aXJlKCcuL19hc3luY09wdGlvbmFsQ2hhaW4uanMnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvdHJlZS8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmXG4vL1xuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggdmFyaW91cyBjb250cmlidXRvcnMgKHNlZSBBVVRIT1JTKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cblxuLyoqXG4gKiBQb2x5ZmlsbCBmb3IgdGhlIG9wdGlvbmFsIGNoYWluIG9wZXJhdG9yLCBgPy5gLCBnaXZlbiBwcmV2aW91cyBjb252ZXJzaW9uIG9mIHRoZSBleHByZXNzaW9uIGludG8gYW4gYXJyYXkgb2YgdmFsdWVzLFxuICogZGVzY3JpcHRvcnMsIGFuZCBmdW5jdGlvbnMsIGluIGNhc2VzIHdoZXJlIHRoZSB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvbiBpcyB0byBiZSBkZWxldGVkLlxuICpcbiAqIEFkYXB0ZWQgZnJvbSBTdWNyYXNlIChodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZSkgU2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZS9ibG9iLzI2NTg4Nzg2ODk2NjkxN2YzYjkyNGNlMzhkZmFkMDFmYmFiMTMyOWYvc3JjL3RyYW5zZm9ybWVycy9PcHRpb25hbENoYWluaW5nTnVsbGlzaFRyYW5zZm9ybWVyLnRzI0wxNVxuICpcbiAqIEBwYXJhbSBvcHMgQXJyYXkgcmVzdWx0IG9mIGV4cHJlc3Npb24gY29udmVyc2lvblxuICogQHJldHVybnMgVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgYGRlbGV0ZWAgb3BlcmF0b3I6IGB0cnVlYCwgdW5sZXNzIHRoZSBkZWxldGlvbiB0YXJnZXQgaXMgYW4gb3duLCBub24tY29uZmlndXJhYmxlXG4gKiBwcm9wZXJ0eSAob25lIHdoaWNoIGNhbid0IGJlIGRlbGV0ZWQgb3IgdHVybmVkIGludG8gYW4gYWNjZXNzb3IsIGFuZCB3aG9zZSBlbnVtZXJhYmlsaXR5IGNhbid0IGJlIGNoYW5nZWQpLCBpbiB3aGljaFxuICogY2FzZSBgZmFsc2VgLlxuICovXG5hc3luYyBmdW5jdGlvbiBfYXN5bmNPcHRpb25hbENoYWluRGVsZXRlKG9wcykge1xuICBjb25zdCByZXN1bHQgPSAoYXdhaXQgX2FzeW5jT3B0aW9uYWxDaGFpbi5fYXN5bmNPcHRpb25hbENoYWluKG9wcykpIDtcbiAgLy8gSWYgYHJlc3VsdGAgaXMgYG51bGxgLCBpdCBtZWFucyB3ZSBkaWRuJ3QgZ2V0IHRvIHRoZSBlbmQgb2YgdGhlIGNoYWluIGFuZCBzbyBub3RoaW5nIHdhcyBkZWxldGVkIChpbiB3aGljaCBjYXNlLFxuICAvLyByZXR1cm4gYHRydWVgIHNpbmNlIHRoYXQncyB3aGF0IGBkZWxldGVgIGRvZXMgd2hlbiBpdCBuby1vcHMpLiBJZiBpdCdzIG5vbi1udWxsLCB3ZSBrbm93IHRoZSBkZWxldGUgaGFwcGVuZWQsIGluXG4gIC8vIHdoaWNoIGNhc2Ugd2UgcmV0dXJuIHdoYXRldmVyIHRoZSBgZGVsZXRlYCByZXR1cm5lZCwgd2hpY2ggd2lsbCBiZSBhIGJvb2xlYW4uXG4gIHJldHVybiByZXN1bHQgPT0gbnVsbCA/IHRydWUgOiAocmVzdWx0ICk7XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvbjpcbi8vIGFzeW5jIGZ1bmN0aW9uIGFzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZShvcHMpIHtcbi8vICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgQVNZTkNfT1BUSU9OQUxfQ0hBSU5fTkFNRShvcHMpO1xuLy8gICByZXR1cm4gcmVzdWx0ID09IG51bGwgPyB0cnVlIDogcmVzdWx0O1xuLy8gfVxuXG5leHBvcnRzLl9hc3luY09wdGlvbmFsQ2hhaW5EZWxldGUgPSBfYXN5bmNPcHRpb25hbENoYWluRGVsZXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9hc3luY09wdGlvbmFsQ2hhaW4iLCJyZXF1aXJlIiwiX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZSIsIm9wcyIsInJlc3VsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * Polyfill for the nullish coalescing operator (`??`).\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nfunction _nullishCoalesce(lhs, rhsFn) {\n  // by checking for loose equality to `null`, we catch both `null` and `undefined`\n  return lhs != null ? lhs : rhsFn();\n}\n\n// Sucrase version:\n// function _nullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return rhsFn();\n//   }\n// }\n\nexports._nullishCoalesce = _nullishCoalesce;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX251bGxpc2hDb2FsZXNjZS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLEVBQUU7RUFDcEM7RUFDQSxPQUFPRCxHQUFHLElBQUksSUFBSSxHQUFHQSxHQUFHLEdBQUdDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFKLHdCQUF3QixHQUFHRSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9idWlsZFBvbHlmaWxscy9fbnVsbGlzaENvYWxlc2NlLmpzPzBlNDkiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvdHJlZS8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmXG4vL1xuLy8gVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggdmFyaW91cyBjb250cmlidXRvcnMgKHNlZSBBVVRIT1JTKVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbi8vIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuLy8gU09GVFdBUkUuXG5cbi8qKlxuICogUG9seWZpbGwgZm9yIHRoZSBudWxsaXNoIGNvYWxlc2Npbmcgb3BlcmF0b3IgKGA/P2ApLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgUkhTIGlzIHdyYXBwZWQgaW4gYSBmdW5jdGlvbiBzbyB0aGF0IGlmIGl0J3MgYSBjb21wdXRlZCB2YWx1ZSwgdGhhdCBldmFsdWF0aW9uIHdvbid0IGhhcHBlbiB1bmxlc3MgdGhlXG4gKiBMSFMgZXZhbHVhdGVzIHRvIGEgbnVsbGlzaCB2YWx1ZSwgdG8gbWltaWMgdGhlIG9wZXJhdG9yJ3Mgc2hvcnQtY2lyY3VpdGluZyBiZWhhdmlvci5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpXG4gKlxuICogQHBhcmFtIGxocyBUaGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gdG8gdGhlIGxlZnQgb2YgdGhlIGA/P2BcbiAqIEBwYXJhbSByaHNGbiBBIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gdG8gdGhlIHJpZ2h0IG9mIHRoZSBgPz9gXG4gKiBAcmV0dXJucyBUaGUgTEhTIHZhbHVlLCB1bmxlc3MgaXQncyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAsIGluIHdoaWNoIGNhc2UsIHRoZSBSSFMgdmFsdWVcbiAqL1xuZnVuY3Rpb24gX251bGxpc2hDb2FsZXNjZShsaHMsIHJoc0ZuKSB7XG4gIC8vIGJ5IGNoZWNraW5nIGZvciBsb29zZSBlcXVhbGl0eSB0byBgbnVsbGAsIHdlIGNhdGNoIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICByZXR1cm4gbGhzICE9IG51bGwgPyBsaHMgOiByaHNGbigpO1xufVxuXG4vLyBTdWNyYXNlIHZlcnNpb246XG4vLyBmdW5jdGlvbiBfbnVsbGlzaENvYWxlc2NlKGxocywgcmhzRm4pIHtcbi8vICAgaWYgKGxocyAhPSBudWxsKSB7XG4vLyAgICAgcmV0dXJuIGxocztcbi8vICAgfSBlbHNlIHtcbi8vICAgICByZXR1cm4gcmhzRm4oKTtcbi8vICAgfVxuLy8gfVxuXG5leHBvcnRzLl9udWxsaXNoQ29hbGVzY2UgPSBfbnVsbGlzaENvYWxlc2NlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X251bGxpc2hDb2FsZXNjZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9udWxsaXNoQ29hbGVzY2UiLCJsaHMiLCJyaHNGbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nfunction _optionalChain(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n\nexports._optionalChain = _optionalChain;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX29wdGlvbmFsQ2hhaW4uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxjQUFjQSxDQUFDQyxHQUFHLEVBQUU7RUFDM0IsSUFBSUMsYUFBYSxHQUFHQyxTQUFTO0VBQzdCLElBQUlKLEtBQUssR0FBR0UsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNsQixJQUFJRyxDQUFDLEdBQUcsQ0FBQztFQUNULE9BQU9BLENBQUMsR0FBR0gsR0FBRyxDQUFDSSxNQUFNLEVBQUU7SUFDckIsTUFBTUMsRUFBRSxHQUFHTCxHQUFHLENBQUNHLENBQUMsQ0FBQztJQUNqQixNQUFNRyxFQUFFLEdBQUdOLEdBQUcsQ0FBQ0csQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQkEsQ0FBQyxJQUFJLENBQUM7SUFDTjtJQUNBLElBQUksQ0FBQ0UsRUFBRSxLQUFLLGdCQUFnQixJQUFJQSxFQUFFLEtBQUssY0FBYyxLQUFLUCxLQUFLLElBQUksSUFBSSxFQUFFO01BQ3ZFO01BQ0E7SUFDRjtJQUNBLElBQUlPLEVBQUUsS0FBSyxRQUFRLElBQUlBLEVBQUUsS0FBSyxnQkFBZ0IsRUFBRTtNQUM5Q0osYUFBYSxHQUFHSCxLQUFLO01BQ3JCQSxLQUFLLEdBQUdRLEVBQUUsQ0FBQ1IsS0FBSyxDQUFDO0lBQ25CLENBQUMsTUFBTSxJQUFJTyxFQUFFLEtBQUssTUFBTSxJQUFJQSxFQUFFLEtBQUssY0FBYyxFQUFFO01BQ2pEUCxLQUFLLEdBQUdRLEVBQUUsQ0FBQyxDQUFDLEdBQUdDLElBQUksS0FBTVQsS0FBSyxDQUFHVSxJQUFJLENBQUNQLGFBQWEsRUFBRSxHQUFHTSxJQUFJLENBQUMsQ0FBQztNQUM5RE4sYUFBYSxHQUFHQyxTQUFTO0lBQzNCO0VBQ0Y7RUFDQSxPQUFPSixLQUFLO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFELHNCQUFzQixHQUFHRSxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX29wdGlvbmFsQ2hhaW4uanM/YmQxNiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgb3B0aW9uYWwgY2hhaW4gb3BlcmF0b3IsIGA/LmAsIGdpdmVuIHByZXZpb3VzIGNvbnZlcnNpb24gb2YgdGhlIGV4cHJlc3Npb24gaW50byBhbiBhcnJheSBvZiB2YWx1ZXMsXG4gKiBkZXNjcmlwdG9ycywgYW5kIGZ1bmN0aW9ucy5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvYmxvYi8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmL3NyYy90cmFuc2Zvcm1lcnMvT3B0aW9uYWxDaGFpbmluZ051bGxpc2hUcmFuc2Zvcm1lci50cyNMMTVcbiAqXG4gKiBAcGFyYW0gb3BzIEFycmF5IHJlc3VsdCBvZiBleHByZXNzaW9uIGNvbnZlcnNpb25cbiAqIEByZXR1cm5zIFRoZSB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvblxuICovXG5mdW5jdGlvbiBfb3B0aW9uYWxDaGFpbihvcHMpIHtcbiAgbGV0IGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4gIGxldCB2YWx1ZSA9IG9wc1swXTtcbiAgbGV0IGkgPSAxO1xuICB3aGlsZSAoaSA8IG9wcy5sZW5ndGgpIHtcbiAgICBjb25zdCBvcCA9IG9wc1tpXSA7XG4gICAgY29uc3QgZm4gPSBvcHNbaSArIDFdIDtcbiAgICBpICs9IDI7XG4gICAgLy8gYnkgY2hlY2tpbmcgZm9yIGxvb3NlIGVxdWFsaXR5IHRvIGBudWxsYCwgd2UgY2F0Y2ggYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgaWYgKChvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpICYmIHZhbHVlID09IG51bGwpIHtcbiAgICAgIC8vIHJlYWxseSB3ZSdyZSBtZWFuaW5nIHRvIHJldHVybiBgdW5kZWZpbmVkYCBhcyBhbiBhY3R1YWwgdmFsdWUgaGVyZSwgYnV0IGl0IHNhdmVzIGJ5dGVzIG5vdCB0byB3cml0ZSBpdFxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAob3AgPT09ICdhY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnKSB7XG4gICAgICBsYXN0QWNjZXNzTEhTID0gdmFsdWU7XG4gICAgICB2YWx1ZSA9IGZuKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG9wID09PSAnY2FsbCcgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSB7XG4gICAgICB2YWx1ZSA9IGZuKCguLi5hcmdzKSA9PiAodmFsdWUgKS5jYWxsKGxhc3RBY2Nlc3NMSFMsIC4uLmFyZ3MpKTtcbiAgICAgIGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gU3VjcmFzZSB2ZXJzaW9uXG4vLyBmdW5jdGlvbiBfb3B0aW9uYWxDaGFpbihvcHMpIHtcbi8vICAgbGV0IGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4vLyAgIGxldCB2YWx1ZSA9IG9wc1swXTtcbi8vICAgbGV0IGkgPSAxO1xuLy8gICB3aGlsZSAoaSA8IG9wcy5sZW5ndGgpIHtcbi8vICAgICBjb25zdCBvcCA9IG9wc1tpXTtcbi8vICAgICBjb25zdCBmbiA9IG9wc1tpICsgMV07XG4vLyAgICAgaSArPSAyO1xuLy8gICAgIGlmICgob3AgPT09ICdvcHRpb25hbEFjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSAmJiB2YWx1ZSA9PSBudWxsKSB7XG4vLyAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuLy8gICAgIH1cbi8vICAgICBpZiAob3AgPT09ICdhY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnKSB7XG4vLyAgICAgICBsYXN0QWNjZXNzTEhTID0gdmFsdWU7XG4vLyAgICAgICB2YWx1ZSA9IGZuKHZhbHVlKTtcbi8vICAgICB9IGVsc2UgaWYgKG9wID09PSAnY2FsbCcgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSB7XG4vLyAgICAgICB2YWx1ZSA9IGZuKCguLi5hcmdzKSA9PiB2YWx1ZS5jYWxsKGxhc3RBY2Nlc3NMSFMsIC4uLmFyZ3MpKTtcbi8vICAgICAgIGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7XG4vLyAgICAgfVxuLy8gICB9XG4vLyAgIHJldHVybiB2YWx1ZTtcbi8vIH1cblxuZXhwb3J0cy5fb3B0aW9uYWxDaGFpbiA9IF9vcHRpb25hbENoYWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X29wdGlvbmFsQ2hhaW4uanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfb3B0aW9uYWxDaGFpbiIsIm9wcyIsImxhc3RBY2Nlc3NMSFMiLCJ1bmRlZmluZWQiLCJpIiwibGVuZ3RoIiwib3AiLCJmbiIsImFyZ3MiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChainDelete.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChainDelete.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst _optionalChain = __webpack_require__(/*! ./_optionalChain.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js\");\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, in cases where the value of the expression is to be deleted.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable\n * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which\n * case `false`.\n */\nfunction _optionalChainDelete(ops) {\n  const result = _optionalChain._optionalChain(ops);\n  // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,\n  // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in\n  // which case we return whatever the `delete` returned, which will be a boolean.\n  return result == null ? true : result;\n}\n\n// Sucrase version:\n// function _optionalChainDelete(ops) {\n//   const result = _optionalChain(ops);\n//   // by checking for loose equality to `null`, we catch both `null` and `undefined`\n//   return result == null ? true : result;\n// }\n\nexports._optionalChainDelete = _optionalChainDelete;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX29wdGlvbmFsQ2hhaW5EZWxldGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxjQUFjLEdBQUdDLG1CQUFPLENBQUMsNEhBQXFCLENBQUM7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Msb0JBQW9CQSxDQUFDQyxHQUFHLEVBQUU7RUFDakMsTUFBTUMsTUFBTSxHQUFHSixjQUFjLENBQUNBLGNBQWMsQ0FBQ0csR0FBRyxDQUFDO0VBQ2pEO0VBQ0E7RUFDQTtFQUNBLE9BQU9DLE1BQU0sSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHQSxNQUFNO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQU4sNEJBQTRCLEdBQUdJLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2J1aWxkUG9seWZpbGxzL19vcHRpb25hbENoYWluRGVsZXRlLmpzPzY0YTAiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgX29wdGlvbmFsQ2hhaW4gPSByZXF1aXJlKCcuL19vcHRpb25hbENoYWluLmpzJyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL3RyZWUvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5ZlxuLy9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IHZhcmlvdXMgY29udHJpYnV0b3JzIChzZWUgQVVUSE9SUylcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG5cbi8qKlxuICogUG9seWZpbGwgZm9yIHRoZSBvcHRpb25hbCBjaGFpbiBvcGVyYXRvciwgYD8uYCwgZ2l2ZW4gcHJldmlvdXMgY29udmVyc2lvbiBvZiB0aGUgZXhwcmVzc2lvbiBpbnRvIGFuIGFycmF5IG9mIHZhbHVlcyxcbiAqIGRlc2NyaXB0b3JzLCBhbmQgZnVuY3Rpb25zLCBpbiBjYXNlcyB3aGVyZSB0aGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gaXMgdG8gYmUgZGVsZXRlZC5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvYmxvYi8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmL3NyYy90cmFuc2Zvcm1lcnMvT3B0aW9uYWxDaGFpbmluZ051bGxpc2hUcmFuc2Zvcm1lci50cyNMMTVcbiAqXG4gKiBAcGFyYW0gb3BzIEFycmF5IHJlc3VsdCBvZiBleHByZXNzaW9uIGNvbnZlcnNpb25cbiAqIEByZXR1cm5zIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBkZWxldGVgIG9wZXJhdG9yOiBgdHJ1ZWAsIHVubGVzcyB0aGUgZGVsZXRpb24gdGFyZ2V0IGlzIGFuIG93biwgbm9uLWNvbmZpZ3VyYWJsZVxuICogcHJvcGVydHkgKG9uZSB3aGljaCBjYW4ndCBiZSBkZWxldGVkIG9yIHR1cm5lZCBpbnRvIGFuIGFjY2Vzc29yLCBhbmQgd2hvc2UgZW51bWVyYWJpbGl0eSBjYW4ndCBiZSBjaGFuZ2VkKSwgaW4gd2hpY2hcbiAqIGNhc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gX29wdGlvbmFsQ2hhaW5EZWxldGUob3BzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IF9vcHRpb25hbENoYWluLl9vcHRpb25hbENoYWluKG9wcykgO1xuICAvLyBJZiBgcmVzdWx0YCBpcyBgbnVsbGAsIGl0IG1lYW5zIHdlIGRpZG4ndCBnZXQgdG8gdGhlIGVuZCBvZiB0aGUgY2hhaW4gYW5kIHNvIG5vdGhpbmcgd2FzIGRlbGV0ZWQgKGluIHdoaWNoIGNhc2UsXG4gIC8vIHJldHVybiBgdHJ1ZWAgc2luY2UgdGhhdCdzIHdoYXQgYGRlbGV0ZWAgZG9lcyB3aGVuIGl0IG5vLW9wcykuIElmIGl0J3Mgbm9uLW51bGwsIHdlIGtub3cgdGhlIGRlbGV0ZSBoYXBwZW5lZCwgaW5cbiAgLy8gd2hpY2ggY2FzZSB3ZSByZXR1cm4gd2hhdGV2ZXIgdGhlIGBkZWxldGVgIHJldHVybmVkLCB3aGljaCB3aWxsIGJlIGEgYm9vbGVhbi5cbiAgcmV0dXJuIHJlc3VsdCA9PSBudWxsID8gdHJ1ZSA6IHJlc3VsdDtcbn1cblxuLy8gU3VjcmFzZSB2ZXJzaW9uOlxuLy8gZnVuY3Rpb24gX29wdGlvbmFsQ2hhaW5EZWxldGUob3BzKSB7XG4vLyAgIGNvbnN0IHJlc3VsdCA9IF9vcHRpb25hbENoYWluKG9wcyk7XG4vLyAgIC8vIGJ5IGNoZWNraW5nIGZvciBsb29zZSBlcXVhbGl0eSB0byBgbnVsbGAsIHdlIGNhdGNoIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuLy8gICByZXR1cm4gcmVzdWx0ID09IG51bGwgPyB0cnVlIDogcmVzdWx0O1xuLy8gfVxuXG5leHBvcnRzLl9vcHRpb25hbENoYWluRGVsZXRlID0gX29wdGlvbmFsQ2hhaW5EZWxldGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fb3B0aW9uYWxDaGFpbkRlbGV0ZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9vcHRpb25hbENoYWluIiwicmVxdWlyZSIsIl9vcHRpb25hbENoYWluRGVsZXRlIiwib3BzIiwicmVzdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChainDelete.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cache.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/cache.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Creates a cache that evicts keys in fifo order\n * @param size {Number}\n *\n * @deprecated This function is deprecated and will be removed in the next major version.\n */\nfunction makeFifoCache(size) {\n  // Maintain a fifo queue of keys, we cannot rely on Object.keys as the browser may not support it.\n  let evictionOrder = [];\n  let cache = {};\n  return {\n    add(key, value) {\n      while (evictionOrder.length >= size) {\n        // shift is O(n) but this is small size and only happens if we are\n        // exceeding the cache size so it should be fine.\n        const evictCandidate = evictionOrder.shift();\n        if (evictCandidate !== undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete cache[evictCandidate];\n        }\n      }\n\n      // in case we have a collision, delete the old key.\n      if (cache[key]) {\n        this.delete(key);\n      }\n      evictionOrder.push(key);\n      cache[key] = value;\n    },\n    clear() {\n      cache = {};\n      evictionOrder = [];\n    },\n    get(key) {\n      return cache[key];\n    },\n    size() {\n      return evictionOrder.length;\n    },\n    // Delete cache key and return true if it existed, false otherwise.\n    delete(key) {\n      if (!cache[key]) {\n        return false;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete cache[key];\n      for (let i = 0; i < evictionOrder.length; i++) {\n        if (evictionOrder[i] === key) {\n          evictionOrder.splice(i, 1);\n          break;\n        }\n      }\n      return true;\n    }\n  };\n}\nexports.makeFifoCache = makeFifoCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvY2FjaGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsYUFBYUEsQ0FDcEJDLElBQUksRUFHTDtFQUNDO0VBQ0EsSUFBSUMsYUFBYSxHQUFHLEVBQUU7RUFDdEIsSUFBSUMsS0FBSyxHQUFHLENBQUMsQ0FBQztFQUVkLE9BQU87SUFDTEMsR0FBR0EsQ0FBQ0MsR0FBRyxFQUFFTixLQUFLLEVBQUU7TUFDZCxPQUFPRyxhQUFhLENBQUNJLE1BQU0sSUFBSUwsSUFBSSxFQUFFO1FBQ25DO1FBQ0E7UUFDQSxNQUFNTSxjQUFjLEdBQUdMLGFBQWEsQ0FBQ00sS0FBSyxDQUFDLENBQUM7UUFFNUMsSUFBSUQsY0FBYyxLQUFLRSxTQUFTLEVBQUU7VUFDaEM7VUFDQSxPQUFPTixLQUFLLENBQUNJLGNBQWMsQ0FBQztRQUM5QjtNQUNGOztNQUVBO01BQ0EsSUFBSUosS0FBSyxDQUFDRSxHQUFHLENBQUMsRUFBRTtRQUNkLElBQUksQ0FBQ0ssTUFBTSxDQUFDTCxHQUFHLENBQUM7TUFDbEI7TUFFQUgsYUFBYSxDQUFDUyxJQUFJLENBQUNOLEdBQUcsQ0FBQztNQUN2QkYsS0FBSyxDQUFDRSxHQUFHLENBQUMsR0FBR04sS0FBSztJQUNwQixDQUFDO0lBQ0RhLEtBQUtBLENBQUEsRUFBRztNQUNOVCxLQUFLLEdBQUcsQ0FBQyxDQUFDO01BQ1ZELGFBQWEsR0FBRyxFQUFFO0lBQ3BCLENBQUM7SUFDRFcsR0FBR0EsQ0FBQ1IsR0FBRyxFQUFFO01BQ1AsT0FBT0YsS0FBSyxDQUFDRSxHQUFHLENBQUM7SUFDbkIsQ0FBQztJQUNESixJQUFJQSxDQUFBLEVBQUc7TUFDTCxPQUFPQyxhQUFhLENBQUNJLE1BQU07SUFDN0IsQ0FBQztJQUNEO0lBQ0FJLE1BQU1BLENBQUNMLEdBQUcsRUFBRTtNQUNWLElBQUksQ0FBQ0YsS0FBSyxDQUFDRSxHQUFHLENBQUMsRUFBRTtRQUNmLE9BQU8sS0FBSztNQUNkOztNQUVBO01BQ0EsT0FBT0YsS0FBSyxDQUFDRSxHQUFHLENBQUM7TUFFakIsS0FBSyxJQUFJUyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdaLGFBQWEsQ0FBQ0ksTUFBTSxFQUFFUSxDQUFDLEVBQUUsRUFBRTtRQUM3QyxJQUFJWixhQUFhLENBQUNZLENBQUMsQ0FBQyxLQUFLVCxHQUFHLEVBQUU7VUFDNUJILGFBQWEsQ0FBQ2EsTUFBTSxDQUFDRCxDQUFDLEVBQUUsQ0FBQyxDQUFDO1VBQzFCO1FBQ0Y7TUFDRjtNQUVBLE9BQU8sSUFBSTtJQUNiO0VBQ0YsQ0FBQztBQUNIO0FBRUFoQixxQkFBcUIsR0FBR0UsYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2NhY2hlLmpzPzE5NjMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2FjaGUgdGhhdCBldmljdHMga2V5cyBpbiBmaWZvIG9yZGVyXG4gKiBAcGFyYW0gc2l6ZSB7TnVtYmVyfVxuICpcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gKi9cbmZ1bmN0aW9uIG1ha2VGaWZvQ2FjaGUoXG4gIHNpemUsXG4pXG5cbiB7XG4gIC8vIE1haW50YWluIGEgZmlmbyBxdWV1ZSBvZiBrZXlzLCB3ZSBjYW5ub3QgcmVseSBvbiBPYmplY3Qua2V5cyBhcyB0aGUgYnJvd3NlciBtYXkgbm90IHN1cHBvcnQgaXQuXG4gIGxldCBldmljdGlvbk9yZGVyID0gW107XG4gIGxldCBjYWNoZSA9IHt9O1xuXG4gIHJldHVybiB7XG4gICAgYWRkKGtleSwgdmFsdWUpIHtcbiAgICAgIHdoaWxlIChldmljdGlvbk9yZGVyLmxlbmd0aCA+PSBzaXplKSB7XG4gICAgICAgIC8vIHNoaWZ0IGlzIE8obikgYnV0IHRoaXMgaXMgc21hbGwgc2l6ZSBhbmQgb25seSBoYXBwZW5zIGlmIHdlIGFyZVxuICAgICAgICAvLyBleGNlZWRpbmcgdGhlIGNhY2hlIHNpemUgc28gaXQgc2hvdWxkIGJlIGZpbmUuXG4gICAgICAgIGNvbnN0IGV2aWN0Q2FuZGlkYXRlID0gZXZpY3Rpb25PcmRlci5zaGlmdCgpO1xuXG4gICAgICAgIGlmIChldmljdENhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICAgIGRlbGV0ZSBjYWNoZVtldmljdENhbmRpZGF0ZV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gaW4gY2FzZSB3ZSBoYXZlIGEgY29sbGlzaW9uLCBkZWxldGUgdGhlIG9sZCBrZXkuXG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuXG4gICAgICBldmljdGlvbk9yZGVyLnB1c2goa2V5KTtcbiAgICAgIGNhY2hlW2tleV0gPSB2YWx1ZTtcbiAgICB9LFxuICAgIGNsZWFyKCkge1xuICAgICAgY2FjaGUgPSB7fTtcbiAgICAgIGV2aWN0aW9uT3JkZXIgPSBbXTtcbiAgICB9LFxuICAgIGdldChrZXkpIHtcbiAgICAgIHJldHVybiBjYWNoZVtrZXldO1xuICAgIH0sXG4gICAgc2l6ZSgpIHtcbiAgICAgIHJldHVybiBldmljdGlvbk9yZGVyLmxlbmd0aDtcbiAgICB9LFxuICAgIC8vIERlbGV0ZSBjYWNoZSBrZXkgYW5kIHJldHVybiB0cnVlIGlmIGl0IGV4aXN0ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICBpZiAoIWNhY2hlW2tleV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG4gICAgICBkZWxldGUgY2FjaGVba2V5XTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmljdGlvbk9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChldmljdGlvbk9yZGVyW2ldID09PSBrZXkpIHtcbiAgICAgICAgICBldmljdGlvbk9yZGVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnRzLm1ha2VGaWZvQ2FjaGUgPSBtYWtlRmlmb0NhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtYWtlRmlmb0NhY2hlIiwic2l6ZSIsImV2aWN0aW9uT3JkZXIiLCJjYWNoZSIsImFkZCIsImtleSIsImxlbmd0aCIsImV2aWN0Q2FuZGlkYXRlIiwic2hpZnQiLCJ1bmRlZmluZWQiLCJkZWxldGUiLCJwdXNoIiwiY2xlYXIiLCJnZXQiLCJpIiwic3BsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cache.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst time = __webpack_require__(/*! ./time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nfunction createClientReportEnvelope(discarded_events, dsn, timestamp) {\n  const clientReportItem = [{\n    type: 'client_report'\n  }, {\n    timestamp: timestamp || time.dateTimestampInSeconds(),\n    discarded_events\n  }];\n  return envelope.createEnvelope(dsn ? {\n    dsn\n  } : {}, [clientReportItem]);\n}\nexports.createClientReportEnvelope = createClientReportEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvY2xpZW50cmVwb3J0LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsUUFBUSxHQUFHQyxtQkFBTyxDQUFDLGlHQUFlLENBQUM7QUFDekMsTUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLHlGQUFXLENBQUM7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSwwQkFBMEJBLENBQ2pDQyxnQkFBZ0IsRUFDaEJDLEdBQUcsRUFDSEMsU0FBUyxFQUNUO0VBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsQ0FDdkI7SUFBRUMsSUFBSSxFQUFFO0VBQWdCLENBQUMsRUFDekI7SUFDRUYsU0FBUyxFQUFFQSxTQUFTLElBQUlKLElBQUksQ0FBQ08sc0JBQXNCLENBQUMsQ0FBQztJQUNyREw7RUFDRixDQUFDLENBQ0Y7RUFDRCxPQUFPSixRQUFRLENBQUNVLGNBQWMsQ0FBQ0wsR0FBRyxHQUFHO0lBQUVBO0VBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUNFLGdCQUFnQixDQUFDLENBQUM7QUFDeEU7QUFFQVQsa0NBQWtDLEdBQUdLLDBCQUEwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2NsaWVudHJlcG9ydC5qcz8zZGY5Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGVudmVsb3BlID0gcmVxdWlyZSgnLi9lbnZlbG9wZS5qcycpO1xuY29uc3QgdGltZSA9IHJlcXVpcmUoJy4vdGltZS5qcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgY2xpZW50IHJlcG9ydCBlbnZlbG9wZVxuICogQHBhcmFtIGRpc2NhcmRlZF9ldmVudHMgQW4gYXJyYXkgb2YgZGlzY2FyZCBldmVudHNcbiAqIEBwYXJhbSBkc24gQSBEU04gdGhhdCBjYW4gYmUgc2V0IG9uIHRoZSBoZWFkZXIuIE9wdGlvbmFsLlxuICovXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRSZXBvcnRFbnZlbG9wZShcbiAgZGlzY2FyZGVkX2V2ZW50cyxcbiAgZHNuLFxuICB0aW1lc3RhbXAsXG4pIHtcbiAgY29uc3QgY2xpZW50UmVwb3J0SXRlbSA9IFtcbiAgICB7IHR5cGU6ICdjbGllbnRfcmVwb3J0JyB9LFxuICAgIHtcbiAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wIHx8IHRpbWUuZGF0ZVRpbWVzdGFtcEluU2Vjb25kcygpLFxuICAgICAgZGlzY2FyZGVkX2V2ZW50cyxcbiAgICB9LFxuICBdO1xuICByZXR1cm4gZW52ZWxvcGUuY3JlYXRlRW52ZWxvcGUoZHNuID8geyBkc24gfSA6IHt9LCBbY2xpZW50UmVwb3J0SXRlbV0pO1xufVxuXG5leHBvcnRzLmNyZWF0ZUNsaWVudFJlcG9ydEVudmVsb3BlID0gY3JlYXRlQ2xpZW50UmVwb3J0RW52ZWxvcGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnRyZXBvcnQuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnZlbG9wZSIsInJlcXVpcmUiLCJ0aW1lIiwiY3JlYXRlQ2xpZW50UmVwb3J0RW52ZWxvcGUiLCJkaXNjYXJkZWRfZXZlbnRzIiwiZHNuIiwidGltZXN0YW1wIiwiY2xpZW50UmVwb3J0SXRlbSIsInR5cGUiLCJkYXRlVGltZXN0YW1wSW5TZWNvbmRzIiwiY3JlYXRlRW52ZWxvcGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cookie.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/cookie.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Parses a cookie string\n */\nfunction parseCookie(str) {\n  const obj = {};\n  let index = 0;\n  while (index < str.length) {\n    const eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break;\n    }\n    let endIdx = str.indexOf(';', index);\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n    const key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      let val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n      try {\n        obj[key] = val.indexOf('%') !== -1 ? decodeURIComponent(val) : val;\n      } catch (e) {\n        obj[key] = val;\n      }\n    }\n    index = endIdx + 1;\n  }\n  return obj;\n}\nexports.parseCookie = parseCookie;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvY29va2llLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsV0FBV0EsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3hCLE1BQU1DLEdBQUcsR0FBRyxDQUFDLENBQUM7RUFDZCxJQUFJQyxLQUFLLEdBQUcsQ0FBQztFQUViLE9BQU9BLEtBQUssR0FBR0YsR0FBRyxDQUFDRyxNQUFNLEVBQUU7SUFDekIsTUFBTUMsS0FBSyxHQUFHSixHQUFHLENBQUNLLE9BQU8sQ0FBQyxHQUFHLEVBQUVILEtBQUssQ0FBQzs7SUFFckM7SUFDQSxJQUFJRSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7TUFDaEI7SUFDRjtJQUVBLElBQUlFLE1BQU0sR0FBR04sR0FBRyxDQUFDSyxPQUFPLENBQUMsR0FBRyxFQUFFSCxLQUFLLENBQUM7SUFFcEMsSUFBSUksTUFBTSxLQUFLLENBQUMsQ0FBQyxFQUFFO01BQ2pCQSxNQUFNLEdBQUdOLEdBQUcsQ0FBQ0csTUFBTTtJQUNyQixDQUFDLE1BQU0sSUFBSUcsTUFBTSxHQUFHRixLQUFLLEVBQUU7TUFDekI7TUFDQUYsS0FBSyxHQUFHRixHQUFHLENBQUNPLFdBQVcsQ0FBQyxHQUFHLEVBQUVILEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO01BQzNDO0lBQ0Y7SUFFQSxNQUFNSSxHQUFHLEdBQUdSLEdBQUcsQ0FBQ1MsS0FBSyxDQUFDUCxLQUFLLEVBQUVFLEtBQUssQ0FBQyxDQUFDTSxJQUFJLENBQUMsQ0FBQzs7SUFFMUM7SUFDQSxJQUFJQyxTQUFTLEtBQUtWLEdBQUcsQ0FBQ08sR0FBRyxDQUFDLEVBQUU7TUFDMUIsSUFBSUksR0FBRyxHQUFHWixHQUFHLENBQUNTLEtBQUssQ0FBQ0wsS0FBSyxHQUFHLENBQUMsRUFBRUUsTUFBTSxDQUFDLENBQUNJLElBQUksQ0FBQyxDQUFDOztNQUU3QztNQUNBLElBQUlFLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUM5QkQsR0FBRyxHQUFHQSxHQUFHLENBQUNILEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDeEI7TUFFQSxJQUFJO1FBQ0ZSLEdBQUcsQ0FBQ08sR0FBRyxDQUFDLEdBQUdJLEdBQUcsQ0FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHUyxrQkFBa0IsQ0FBQ0YsR0FBRyxDQUFDLEdBQUdBLEdBQUc7TUFDcEUsQ0FBQyxDQUFDLE9BQU9HLENBQUMsRUFBRTtRQUNWZCxHQUFHLENBQUNPLEdBQUcsQ0FBQyxHQUFHSSxHQUFHO01BQ2hCO0lBQ0Y7SUFFQVYsS0FBSyxHQUFHSSxNQUFNLEdBQUcsQ0FBQztFQUNwQjtFQUVBLE9BQU9MLEdBQUc7QUFDWjtBQUVBSixtQkFBbUIsR0FBR0UsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2Nvb2tpZS5qcz81NmI2Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhpcyBjb2RlIHdhcyBvcmlnaW5hbGx5IGNvcGllZCBmcm9tIHRoZSAnY29va2llYCBtb2R1bGUgYXQgdjAuNS4wIGFuZCB3YXMgc2ltcGxpZmllZCBmb3Igb3VyIHVzZSBjYXNlLlxuICogaHR0cHM6Ly9naXRodWIuY29tL2pzaHR0cC9jb29raWUvYmxvYi9hMGM4NDE0N2FhYjYyNjZiZGIzOTk2Y2Y0MDYyZTkzOTA3YzBiMGZjL2luZGV4LmpzXG4gKiBJdCBoYWQgdGhlIGZvbGxvd2luZyBsaWNlbnNlOlxuICpcbiAqIChUaGUgTUlUIExpY2Vuc2UpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTQgUm9tYW4gU2h0eWxtYW4gPHNodHlsbWFuQGdtYWlsLmNvbT5cbiAqIENvcHlyaWdodCAoYykgMjAxNSBEb3VnbGFzIENocmlzdG9waGVyIFdpbHNvbiA8ZG91Z0Bzb21ldGhpbmdkb3VnLmNvbT5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiAqIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuICogJ1NvZnR3YXJlJyksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuICogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiAqIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC5cbiAqIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuICogVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEVcbiAqIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qKlxuICogUGFyc2VzIGEgY29va2llIHN0cmluZ1xuICovXG5mdW5jdGlvbiBwYXJzZUNvb2tpZShzdHIpIHtcbiAgY29uc3Qgb2JqID0ge307XG4gIGxldCBpbmRleCA9IDA7XG5cbiAgd2hpbGUgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIGNvbnN0IGVxSWR4ID0gc3RyLmluZGV4T2YoJz0nLCBpbmRleCk7XG5cbiAgICAvLyBubyBtb3JlIGNvb2tpZSBwYWlyc1xuICAgIGlmIChlcUlkeCA9PT0gLTEpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxldCBlbmRJZHggPSBzdHIuaW5kZXhPZignOycsIGluZGV4KTtcblxuICAgIGlmIChlbmRJZHggPT09IC0xKSB7XG4gICAgICBlbmRJZHggPSBzdHIubGVuZ3RoO1xuICAgIH0gZWxzZSBpZiAoZW5kSWR4IDwgZXFJZHgpIHtcbiAgICAgIC8vIGJhY2t0cmFjayBvbiBwcmlvciBzZW1pY29sb25cbiAgICAgIGluZGV4ID0gc3RyLmxhc3RJbmRleE9mKCc7JywgZXFJZHggLSAxKSArIDE7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBzdHIuc2xpY2UoaW5kZXgsIGVxSWR4KS50cmltKCk7XG5cbiAgICAvLyBvbmx5IGFzc2lnbiBvbmNlXG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gb2JqW2tleV0pIHtcbiAgICAgIGxldCB2YWwgPSBzdHIuc2xpY2UoZXFJZHggKyAxLCBlbmRJZHgpLnRyaW0oKTtcblxuICAgICAgLy8gcXVvdGVkIHZhbHVlc1xuICAgICAgaWYgKHZhbC5jaGFyQ29kZUF0KDApID09PSAweDIyKSB7XG4gICAgICAgIHZhbCA9IHZhbC5zbGljZSgxLCAtMSk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsLmluZGV4T2YoJyUnKSAhPT0gLTEgPyBkZWNvZGVVUklDb21wb25lbnQodmFsKSA6IHZhbDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5kZXggPSBlbmRJZHggKyAxO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0cy5wYXJzZUNvb2tpZSA9IHBhcnNlQ29va2llO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29va2llLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGFyc2VDb29raWUiLCJzdHIiLCJvYmoiLCJpbmRleCIsImxlbmd0aCIsImVxSWR4IiwiaW5kZXhPZiIsImVuZElkeCIsImxhc3RJbmRleE9mIiwia2V5Iiwic2xpY2UiLCJ0cmltIiwidW5kZWZpbmVkIiwidmFsIiwiY2hhckNvZGVBdCIsImRlY29kZVVSSUNvbXBvbmVudCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cookie.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nexports.DEBUG_BUILD = DEBUG_BUILD;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFdBQVcsR0FBSSxPQUFPQyxnQkFBZ0IsS0FBSyxXQUFXLElBQUlBLGdCQUFpQjtBQUVqRkgsbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9kZWJ1Zy1idWlsZC5qcz8xZGMyIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydHMuREVCVUdfQlVJTEQgPSBERUJVR19CVUlMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiREVCVUdfQlVJTEQiLCJfX1NFTlRSWV9ERUJVR19fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nlet parsedStackResults;\nlet lastKeysCount;\nlet cachedFilenameDebugIds;\n\n/**\n * Returns a map of filenames to debug identifiers.\n */\nfunction getFilenameToDebugIdMap(stackParser) {\n  const debugIdMap = worldwide.GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return {};\n  }\n  const debugIdKeys = Object.keys(debugIdMap);\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n    return cachedFilenameDebugIds;\n  }\n  lastKeysCount = debugIdKeys.length;\n\n  // Build a map of filename -> debug_id.\n  cachedFilenameDebugIds = debugIdKeys.reduce((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n    const result = parsedStackResults[stackKey];\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame && stackFrame.filename;\n        const debugId = debugIdMap[stackKey];\n        if (filename && debugId) {\n          acc[filename] = debugId;\n          parsedStackResults[stackKey] = [filename, debugId];\n          break;\n        }\n      }\n    }\n    return acc;\n  }, {});\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nfunction getDebugImagesForResources(stackParser, resource_paths) {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n  const images = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path]\n      });\n    }\n  }\n  return images;\n}\nexports.getDebugImagesForResources = getDebugImagesForResources;\nexports.getFilenameToDebugIdMap = getFilenameToDebugIdMap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZGVidWctaWRzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsU0FBUyxHQUFHQyxtQkFBTyxDQUFDLG1HQUFnQixDQUFDO0FBRTNDLElBQUlDLGtCQUFrQjtBQUN0QixJQUFJQyxhQUFhO0FBQ2pCLElBQUlDLHNCQUFzQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsdUJBQXVCQSxDQUFDQyxXQUFXLEVBQUU7RUFDNUMsTUFBTUMsVUFBVSxHQUFHUCxTQUFTLENBQUNRLFVBQVUsQ0FBQ0MsZUFBZTtFQUN2RCxJQUFJLENBQUNGLFVBQVUsRUFBRTtJQUNmLE9BQU8sQ0FBQyxDQUFDO0VBQ1g7RUFFQSxNQUFNRyxXQUFXLEdBQUdkLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDSixVQUFVLENBQUM7O0VBRTNDO0VBQ0E7RUFDQSxJQUFJSCxzQkFBc0IsSUFBSU0sV0FBVyxDQUFDRSxNQUFNLEtBQUtULGFBQWEsRUFBRTtJQUNsRSxPQUFPQyxzQkFBc0I7RUFDL0I7RUFFQUQsYUFBYSxHQUFHTyxXQUFXLENBQUNFLE1BQU07O0VBRWxDO0VBQ0FSLHNCQUFzQixHQUFHTSxXQUFXLENBQUNHLE1BQU0sQ0FBQyxDQUFDQyxHQUFHLEVBQUVDLFFBQVEsS0FBSztJQUM3RCxJQUFJLENBQUNiLGtCQUFrQixFQUFFO01BQ3ZCQSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7SUFDekI7SUFFQSxNQUFNYyxNQUFNLEdBQUdkLGtCQUFrQixDQUFDYSxRQUFRLENBQUM7SUFFM0MsSUFBSUMsTUFBTSxFQUFFO01BQ1ZGLEdBQUcsQ0FBQ0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUdBLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxNQUFNO01BQ0wsTUFBTUMsV0FBVyxHQUFHWCxXQUFXLENBQUNTLFFBQVEsQ0FBQztNQUV6QyxLQUFLLElBQUlHLENBQUMsR0FBR0QsV0FBVyxDQUFDTCxNQUFNLEdBQUcsQ0FBQyxFQUFFTSxDQUFDLElBQUksQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtRQUNoRCxNQUFNQyxVQUFVLEdBQUdGLFdBQVcsQ0FBQ0MsQ0FBQyxDQUFDO1FBQ2pDLE1BQU1FLFFBQVEsR0FBR0QsVUFBVSxJQUFJQSxVQUFVLENBQUNDLFFBQVE7UUFDbEQsTUFBTUMsT0FBTyxHQUFHZCxVQUFVLENBQUNRLFFBQVEsQ0FBQztRQUVwQyxJQUFJSyxRQUFRLElBQUlDLE9BQU8sRUFBRTtVQUN2QlAsR0FBRyxDQUFDTSxRQUFRLENBQUMsR0FBR0MsT0FBTztVQUN2Qm5CLGtCQUFrQixDQUFDYSxRQUFRLENBQUMsR0FBRyxDQUFDSyxRQUFRLEVBQUVDLE9BQU8sQ0FBQztVQUNsRDtRQUNGO01BQ0Y7SUFDRjtJQUVBLE9BQU9QLEdBQUc7RUFDWixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFFTixPQUFPVixzQkFBc0I7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU2tCLDBCQUEwQkEsQ0FDakNoQixXQUFXLEVBQ1hpQixjQUFjLEVBQ2Q7RUFDQSxNQUFNQyxrQkFBa0IsR0FBR25CLHVCQUF1QixDQUFDQyxXQUFXLENBQUM7RUFFL0QsSUFBSSxDQUFDa0Isa0JBQWtCLEVBQUU7SUFDdkIsT0FBTyxFQUFFO0VBQ1g7RUFFQSxNQUFNQyxNQUFNLEdBQUcsRUFBRTtFQUNqQixLQUFLLE1BQU1DLElBQUksSUFBSUgsY0FBYyxFQUFFO0lBQ2pDLElBQUlHLElBQUksSUFBSUYsa0JBQWtCLENBQUNFLElBQUksQ0FBQyxFQUFFO01BQ3BDRCxNQUFNLENBQUNFLElBQUksQ0FBQztRQUNWQyxJQUFJLEVBQUUsV0FBVztRQUNqQkMsU0FBUyxFQUFFSCxJQUFJO1FBQ2ZJLFFBQVEsRUFBRU4sa0JBQWtCLENBQUNFLElBQUk7TUFDbkMsQ0FBQyxDQUFDO0lBQ0o7RUFDRjtFQUVBLE9BQU9ELE1BQU07QUFDZjtBQUVBM0Isa0NBQWtDLEdBQUd3QiwwQkFBMEI7QUFDL0R4QiwrQkFBK0IsR0FBR08sdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZGVidWctaWRzLmpzPzdhYjAiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgd29ybGR3aWRlID0gcmVxdWlyZSgnLi93b3JsZHdpZGUuanMnKTtcblxubGV0IHBhcnNlZFN0YWNrUmVzdWx0cztcbmxldCBsYXN0S2V5c0NvdW50O1xubGV0IGNhY2hlZEZpbGVuYW1lRGVidWdJZHM7XG5cbi8qKlxuICogUmV0dXJucyBhIG1hcCBvZiBmaWxlbmFtZXMgdG8gZGVidWcgaWRlbnRpZmllcnMuXG4gKi9cbmZ1bmN0aW9uIGdldEZpbGVuYW1lVG9EZWJ1Z0lkTWFwKHN0YWNrUGFyc2VyKSB7XG4gIGNvbnN0IGRlYnVnSWRNYXAgPSB3b3JsZHdpZGUuR0xPQkFMX09CSi5fc2VudHJ5RGVidWdJZHM7XG4gIGlmICghZGVidWdJZE1hcCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IGRlYnVnSWRLZXlzID0gT2JqZWN0LmtleXMoZGVidWdJZE1hcCk7XG5cbiAgLy8gSWYgdGhlIGNvdW50IG9mIHJlZ2lzdGVyZWQgZ2xvYmFscyBoYXNuJ3QgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBjYWxsLCB3ZVxuICAvLyBjYW4ganVzdCByZXR1cm4gdGhlIGNhY2hlZCByZXN1bHQuXG4gIGlmIChjYWNoZWRGaWxlbmFtZURlYnVnSWRzICYmIGRlYnVnSWRLZXlzLmxlbmd0aCA9PT0gbGFzdEtleXNDb3VudCkge1xuICAgIHJldHVybiBjYWNoZWRGaWxlbmFtZURlYnVnSWRzO1xuICB9XG5cbiAgbGFzdEtleXNDb3VudCA9IGRlYnVnSWRLZXlzLmxlbmd0aDtcblxuICAvLyBCdWlsZCBhIG1hcCBvZiBmaWxlbmFtZSAtPiBkZWJ1Z19pZC5cbiAgY2FjaGVkRmlsZW5hbWVEZWJ1Z0lkcyA9IGRlYnVnSWRLZXlzLnJlZHVjZSgoYWNjLCBzdGFja0tleSkgPT4ge1xuICAgIGlmICghcGFyc2VkU3RhY2tSZXN1bHRzKSB7XG4gICAgICBwYXJzZWRTdGFja1Jlc3VsdHMgPSB7fTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBwYXJzZWRTdGFja1Jlc3VsdHNbc3RhY2tLZXldO1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgYWNjW3Jlc3VsdFswXV0gPSByZXN1bHRbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBhcnNlZFN0YWNrID0gc3RhY2tQYXJzZXIoc3RhY2tLZXkpO1xuXG4gICAgICBmb3IgKGxldCBpID0gcGFyc2VkU3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3Qgc3RhY2tGcmFtZSA9IHBhcnNlZFN0YWNrW2ldO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHN0YWNrRnJhbWUgJiYgc3RhY2tGcmFtZS5maWxlbmFtZTtcbiAgICAgICAgY29uc3QgZGVidWdJZCA9IGRlYnVnSWRNYXBbc3RhY2tLZXldO1xuXG4gICAgICAgIGlmIChmaWxlbmFtZSAmJiBkZWJ1Z0lkKSB7XG4gICAgICAgICAgYWNjW2ZpbGVuYW1lXSA9IGRlYnVnSWQ7XG4gICAgICAgICAgcGFyc2VkU3RhY2tSZXN1bHRzW3N0YWNrS2V5XSA9IFtmaWxlbmFtZSwgZGVidWdJZF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIGNhY2hlZEZpbGVuYW1lRGVidWdJZHM7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgZGVidWcgaW1hZ2VzIGZvciB0aGUgZ2l2ZW4gcmVzb3VyY2VzLlxuICovXG5mdW5jdGlvbiBnZXREZWJ1Z0ltYWdlc0ZvclJlc291cmNlcyhcbiAgc3RhY2tQYXJzZXIsXG4gIHJlc291cmNlX3BhdGhzLFxuKSB7XG4gIGNvbnN0IGZpbGVuYW1lRGVidWdJZE1hcCA9IGdldEZpbGVuYW1lVG9EZWJ1Z0lkTWFwKHN0YWNrUGFyc2VyKTtcblxuICBpZiAoIWZpbGVuYW1lRGVidWdJZE1hcCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IGltYWdlcyA9IFtdO1xuICBmb3IgKGNvbnN0IHBhdGggb2YgcmVzb3VyY2VfcGF0aHMpIHtcbiAgICBpZiAocGF0aCAmJiBmaWxlbmFtZURlYnVnSWRNYXBbcGF0aF0pIHtcbiAgICAgIGltYWdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3NvdXJjZW1hcCcsXG4gICAgICAgIGNvZGVfZmlsZTogcGF0aCxcbiAgICAgICAgZGVidWdfaWQ6IGZpbGVuYW1lRGVidWdJZE1hcFtwYXRoXSAsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW1hZ2VzO1xufVxuXG5leHBvcnRzLmdldERlYnVnSW1hZ2VzRm9yUmVzb3VyY2VzID0gZ2V0RGVidWdJbWFnZXNGb3JSZXNvdXJjZXM7XG5leHBvcnRzLmdldEZpbGVuYW1lVG9EZWJ1Z0lkTWFwID0gZ2V0RmlsZW5hbWVUb0RlYnVnSWRNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1pZHMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3b3JsZHdpZGUiLCJyZXF1aXJlIiwicGFyc2VkU3RhY2tSZXN1bHRzIiwibGFzdEtleXNDb3VudCIsImNhY2hlZEZpbGVuYW1lRGVidWdJZHMiLCJnZXRGaWxlbmFtZVRvRGVidWdJZE1hcCIsInN0YWNrUGFyc2VyIiwiZGVidWdJZE1hcCIsIkdMT0JBTF9PQkoiLCJfc2VudHJ5RGVidWdJZHMiLCJkZWJ1Z0lkS2V5cyIsImtleXMiLCJsZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJzdGFja0tleSIsInJlc3VsdCIsInBhcnNlZFN0YWNrIiwiaSIsInN0YWNrRnJhbWUiLCJmaWxlbmFtZSIsImRlYnVnSWQiLCJnZXREZWJ1Z0ltYWdlc0ZvclJlc291cmNlcyIsInJlc291cmNlX3BhdGhzIiwiZmlsZW5hbWVEZWJ1Z0lkTWFwIiwiaW1hZ2VzIiwicGF0aCIsInB1c2giLCJ0eXBlIiwiY29kZV9maWxlIiwiZGVidWdfaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ./logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nfunction dsnToString(dsn, withPassword = false) {\n  const {\n    host,\n    path,\n    pass,\n    port,\n    projectId,\n    protocol,\n    publicKey\n  } = dsn;\n  return `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` + `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`;\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nfunction dsnFromString(str) {\n  const match = DSN_REGEX.exec(str);\n  if (!match) {\n    // This should be logged to the console\n    logger.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop();\n  }\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n  return dsnFromComponents({\n    host,\n    pass,\n    path,\n    projectId,\n    port,\n    protocol: protocol,\n    publicKey\n  });\n}\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId\n  };\n}\nfunction validateDsn(dsn) {\n  if (!debugBuild.DEBUG_BUILD) {\n    return true;\n  }\n  const {\n    port,\n    projectId,\n    protocol\n  } = dsn;\n  const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n  if (!projectId.match(/^\\d+$/)) {\n    logger.logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n  if (!isValidProtocol(protocol)) {\n    logger.logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nfunction makeDsn(from) {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\nexports.dsnFromString = dsnFromString;\nexports.dsnToString = dsnToString;\nexports.makeDsn = makeDsn;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/env.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/env.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nfunction isBrowserBundle() {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n/**\n * Get source of SDK.\n */\nfunction getSDKSource() {\n  // This comment is used to identify this line in the CDN bundle build step and replace this with \"return 'cdn';\"\n  /* __SENTRY_SDK_SOURCE__ */\n  return 'npm';\n}\nexports.getSDKSource = getSDKSource;\nexports.isBrowserBundle = isBrowserBundle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZW52LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGVBQWVBLENBQUEsRUFBRztFQUN6QixPQUFPLE9BQU9DLHlCQUF5QixLQUFLLFdBQVcsSUFBSSxDQUFDLENBQUNBLHlCQUF5QjtBQUN4Rjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxZQUFZQSxDQUFBLEVBQUc7RUFDdEI7RUFDQTtFQUE0QixPQUFPLEtBQUs7QUFDMUM7QUFFQUosb0JBQW9CLEdBQUdJLFlBQVk7QUFDbkNKLHVCQUF1QixHQUFHRSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZW52LmpzPzE0NzYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLypcbiAqIFRoaXMgbW9kdWxlIGV4aXN0cyBmb3Igb3B0aW1pemF0aW9ucyBpbiB0aGUgYnVpbGQgcHJvY2VzcyB0aHJvdWdoIHJvbGx1cCBhbmQgdGVyc2VyLiAgV2UgZGVmaW5lIHNvbWUgZ2xvYmFsXG4gKiBjb25zdGFudHMsIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIGR1cmluZyBidWlsZC4gQnkgZ3VhcmRpbmcgY2VydGFpbiBwaWVjZXMgb2YgY29kZSB3aXRoIGZ1bmN0aW9ucyB0aGF0IHJldHVybiB0aGVzZVxuICogY29uc3RhbnRzLCB3ZSBjYW4gY29udHJvbCB3aGV0aGVyIG9yIG5vdCB0aGV5IGFwcGVhciBpbiB0aGUgZmluYWwgYnVuZGxlLiAoQW55IGNvZGUgZ3VhcmRlZCBieSBhIGZhbHNlIGNvbmRpdGlvbiB3aWxsXG4gKiBuZXZlciBydW4sIGFuZCB3aWxsIGhlbmNlIGJlIGRyb3BwZWQgZHVyaW5nIHRyZWVzaGFraW5nLikgVGhlIHR3byBwcmltYXJ5IHVzZXMgZm9yIHRoaXMgYXJlIHN0cmlwcGluZyBvdXQgY2FsbHMgdG9cbiAqIGBsb2dnZXJgIGFuZCBwcmV2ZW50aW5nIG5vZGUtcmVsYXRlZCBjb2RlIGZyb20gYXBwZWFyaW5nIGluIGJyb3dzZXIgYnVuZGxlcy5cbiAqXG4gKiBBdHRlbnRpb246XG4gKiBUaGlzIGZpbGUgc2hvdWxkIG5vdCBiZSB1c2VkIHRvIGRlZmluZSBjb25zdGFudHMvZmxhZ3MgdGhhdCBhcmUgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3IgdHJlZS1zaGFraW5nIGNvbmR1Y3RlZCBieVxuICogdXNlcnMuIFRoZXNlIGZsYWdzIHNob3VsZCBsaXZlIGluIHRoZWlyIHJlc3BlY3RpdmUgcGFja2FnZXMsIGFzIHdlIGlkZW50aWZpZWQgdXNlciB0b29saW5nIChzcGVjaWZpY2FsbHkgd2VicGFjaylcbiAqIGhhdmluZyBpc3N1ZXMgdHJlZS1zaGFraW5nIHRoZXNlIGNvbnN0YW50cyBhY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzLlxuICogQW4gZXhhbXBsZSBmb3IgdGhpcyBpcyB0aGUgX19TRU5UUllfREVCVUdfXyBjb25zdGFudC4gSXQgaXMgZGVjbGFyZWQgaW4gZWFjaCBwYWNrYWdlIGluZGl2aWR1YWxseSBiZWNhdXNlIHdlIHdhbnRcbiAqIHVzZXJzIHRvIGJlIGFibGUgdG8gc2hha2UgYXdheSBleHByZXNzaW9ucyB0aGF0IGl0IGd1YXJkcy5cbiAqL1xuXG4vKipcbiAqIEZpZ3VyZXMgb3V0IGlmIHdlJ3JlIGJ1aWxkaW5nIGEgYnJvd3NlciBidW5kbGUuXG4gKlxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGlzIGlzIGEgYnJvd3NlciBidW5kbGUgYnVpbGQuXG4gKi9cbmZ1bmN0aW9uIGlzQnJvd3NlckJ1bmRsZSgpIHtcbiAgcmV0dXJuIHR5cGVvZiBfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fICE9PSAndW5kZWZpbmVkJyAmJiAhIV9fU0VOVFJZX0JST1dTRVJfQlVORExFX187XG59XG5cbi8qKlxuICogR2V0IHNvdXJjZSBvZiBTREsuXG4gKi9cbmZ1bmN0aW9uIGdldFNES1NvdXJjZSgpIHtcbiAgLy8gVGhpcyBjb21tZW50IGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhpcyBsaW5lIGluIHRoZSBDRE4gYnVuZGxlIGJ1aWxkIHN0ZXAgYW5kIHJlcGxhY2UgdGhpcyB3aXRoIFwicmV0dXJuICdjZG4nO1wiXG4gIC8qIF9fU0VOVFJZX1NES19TT1VSQ0VfXyAqLyByZXR1cm4gJ25wbSc7XG59XG5cbmV4cG9ydHMuZ2V0U0RLU291cmNlID0gZ2V0U0RLU291cmNlO1xuZXhwb3J0cy5pc0Jyb3dzZXJCdW5kbGUgPSBpc0Jyb3dzZXJCdW5kbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnYuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0Jyb3dzZXJCdW5kbGUiLCJfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fIiwiZ2V0U0RLU291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/env.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dsn = __webpack_require__(/*! ./dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst normalize = __webpack_require__(/*! ./normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction createEnvelope(headers, items = []) {\n  return [headers, items];\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction addItemToEnvelope(envelope, newItem) {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]];\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nfunction forEachEnvelopeItem(envelope, callback) {\n  const envelopeItems = envelope[1];\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n    if (result) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nfunction envelopeContainsItemType(envelope, types) {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8 array.\n */\nfunction encodeUTF8(input) {\n  return worldwide.GLOBAL_OBJ.__SENTRY__ && worldwide.GLOBAL_OBJ.__SENTRY__.encodePolyfill ? worldwide.GLOBAL_OBJ.__SENTRY__.encodePolyfill(input) : new TextEncoder().encode(input);\n}\n\n/**\n * Decode a UTF8 array to string.\n */\nfunction decodeUTF8(input) {\n  return worldwide.GLOBAL_OBJ.__SENTRY__ && worldwide.GLOBAL_OBJ.__SENTRY__.decodePolyfill ? worldwide.GLOBAL_OBJ.__SENTRY__.decodePolyfill(input) : new TextDecoder().decode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nfunction serializeEnvelope(envelope) {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts = JSON.stringify(envHeaders);\n  function append(next) {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n    }\n  }\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize.normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\nfunction concatBuffers(buffers) {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nfunction parseEnvelope(env) {\n  let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n  function readBinary(length) {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n  function readJson() {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n    return JSON.parse(decodeUTF8(readBinary(i)));\n  }\n  const envelopeHeader = readJson();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items = [];\n  while (buffer.length) {\n    const itemHeader = readJson();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates envelope item for a single span\n */\nfunction createSpanEnvelopeItem(spanJson) {\n  const spanHeaders = {\n    type: 'span'\n  };\n  return [spanHeaders, spanJson];\n}\n\n/**\n * Creates attachment envelope items\n */\nfunction createAttachmentEnvelopeItem(attachment) {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n  return [object.dropUndefinedKeys({\n    type: 'attachment',\n    length: buffer.length,\n    filename: attachment.filename,\n    content_type: attachment.contentType,\n    attachment_type: attachment.attachmentType\n  }), buffer];\n}\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  profile_chunk: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  statsd: 'metric_bucket',\n  raw_security: 'security'\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nfunction envelopeItemTypeToDataCategory(type) {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nfunction getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const {\n    name,\n    version\n  } = metadataOrEvent.sdk;\n  return {\n    name,\n    version\n  };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nfunction createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn$1) {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && {\n      sdk: sdkInfo\n    }),\n    ...(!!tunnel && dsn$1 && {\n      dsn: dsn.dsnToString(dsn$1)\n    }),\n    ...(dynamicSamplingContext && {\n      trace: object.dropUndefinedKeys({\n        ...dynamicSamplingContext\n      })\n    })\n  };\n}\nexports.addItemToEnvelope = addItemToEnvelope;\nexports.createAttachmentEnvelopeItem = createAttachmentEnvelopeItem;\nexports.createEnvelope = createEnvelope;\nexports.createEventEnvelopeHeaders = createEventEnvelopeHeaders;\nexports.createSpanEnvelopeItem = createSpanEnvelopeItem;\nexports.envelopeContainsItemType = envelopeContainsItemType;\nexports.envelopeItemTypeToDataCategory = envelopeItemTypeToDataCategory;\nexports.forEachEnvelopeItem = forEachEnvelopeItem;\nexports.getSdkMetadataForEnvelopeHeader = getSdkMetadataForEnvelopeHeader;\nexports.parseEnvelope = parseEnvelope;\nexports.serializeEnvelope = serializeEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/error.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** An error emitted by Sentry SDKs and related utilities. */\nclass SentryError extends Error {\n  /** Display name of this error instance. */\n\n  constructor(message, logLevel = 'warn') {\n    super(message);\n    this.message = message;\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\nexports.SentryError = SentryError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQSxNQUFNQyxXQUFXLFNBQVNDLEtBQUssQ0FBQztFQUM5Qjs7RUFFQ0MsV0FBV0EsQ0FDVEMsT0FBTyxFQUNSQyxRQUFRLEdBQUcsTUFBTSxFQUNqQjtJQUNBLEtBQUssQ0FBQ0QsT0FBTyxDQUFDO0lBQUMsSUFBSSxDQUFDQSxPQUFPLEdBQUdBLE9BQU87SUFDckMsSUFBSSxDQUFDRSxJQUFJLEdBQUdDLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNOLFdBQVcsQ0FBQ0csSUFBSTtJQUNqRDtJQUNBO0lBQ0E7SUFDQVQsTUFBTSxDQUFDYSxjQUFjLENBQUMsSUFBSSxFQUFFSCxHQUFHLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDO0lBQ2pELElBQUksQ0FBQ0osUUFBUSxHQUFHQSxRQUFRO0VBQzFCO0FBQ0Y7QUFFQU4sbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9lcnJvci5qcz81NzlkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKiBBbiBlcnJvciBlbWl0dGVkIGJ5IFNlbnRyeSBTREtzIGFuZCByZWxhdGVkIHV0aWxpdGllcy4gKi9cbmNsYXNzIFNlbnRyeUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKiogRGlzcGxheSBuYW1lIG9mIHRoaXMgZXJyb3IgaW5zdGFuY2UuICovXG5cbiAgIGNvbnN0cnVjdG9yKFxuICAgICBtZXNzYWdlLFxuICAgIGxvZ0xldmVsID0gJ3dhcm4nLFxuICApIHtcbiAgICBzdXBlcihtZXNzYWdlKTt0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMubmFtZSA9IG5ldy50YXJnZXQucHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgLy8gVGhpcyBzZXRzIHRoZSBwcm90b3R5cGUgdG8gYmUgYEVycm9yYCwgbm90IGBTZW50cnlFcnJvcmAuIEl0J3MgdW5jbGVhciB3aHkgd2UgZG8gdGhpcywgYnV0IGNvbW1lbnRpbmcgdGhpcyBsaW5lXG4gICAgLy8gb3V0IGNhdXNlcyB2YXJpb3VzIChzZWVtaW5nbHkgdG90YWxseSB1bnJlbGF0ZWQpIHBsYXl3cmlnaHQgdGVzdHMgY29uc2lzdGVudGx5IHRpbWUgb3V0LiBGWUksIHRoaXMgbWFrZXNcbiAgICAvLyBpbnN0YW5jZXMgb2YgYFNlbnRyeUVycm9yYCBmYWlsIGBvYmogaW5zdGFuY2VvZiBTZW50cnlFcnJvcmAgY2hlY2tzLlxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBuZXcudGFyZ2V0LnByb3RvdHlwZSk7XG4gICAgdGhpcy5sb2dMZXZlbCA9IGxvZ0xldmVsO1xuICB9XG59XG5cbmV4cG9ydHMuU2VudHJ5RXJyb3IgPSBTZW50cnlFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2VudHJ5RXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImxvZ0xldmVsIiwibmFtZSIsIm5ldyIsInRhcmdldCIsInByb3RvdHlwZSIsInNldFByb3RvdHlwZU9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst misc = __webpack_require__(/*! ./misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst normalize = __webpack_require__(/*! ./normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * Extracts stack frames from the error.stack string\n */\nfunction parseStackFrames(stackParser, error) {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nfunction exceptionFromError(stackParser, error) {\n  const exception = {\n    type: error.name || error.constructor.name,\n    value: error.message\n  };\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = {\n      frames\n    };\n  }\n  return exception;\n}\n\n/** If a plain object has a property that is an `Error`, return this error. */\nfunction getErrorPropertyFromObject(obj) {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      const value = obj[prop];\n      if (value instanceof Error) {\n        return value;\n      }\n    }\n  }\n  return undefined;\n}\nfunction getMessageForObject(exception) {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  }\n  const keys = object.extractExceptionKeysForMessage(exception);\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (is.isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\n  }\n  const className = getObjectClassName(exception);\n  return `${className && className !== 'Object' ? `'${className}'` : 'Object'} captured as exception with keys: ${keys}`;\n}\nfunction getObjectClassName(obj) {\n  try {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\nfunction getException(client, mechanism, exception, hint) {\n  if (is.isError(exception)) {\n    return [exception, undefined];\n  }\n\n  // Mutate this!\n  mechanism.synthetic = true;\n  if (is.isPlainObject(exception)) {\n    const normalizeDepth = client && client.getOptions().normalizeDepth;\n    const extras = {\n      ['__serialized__']: normalize.normalizeToSize(exception, normalizeDepth)\n    };\n    const errorFromProp = getErrorPropertyFromObject(exception);\n    if (errorFromProp) {\n      return [errorFromProp, extras];\n    }\n    const message = getMessageForObject(exception);\n    const ex = hint && hint.syntheticException || new Error(message);\n    ex.message = message;\n    return [ex, extras];\n  }\n\n  // This handles when someone does: `throw \"something awesome\";`\n  // We use synthesized Error here so we can extract a (rough) stack trace.\n  const ex = hint && hint.syntheticException || new Error(exception);\n  ex.message = `${exception}`;\n  return [ex, undefined];\n}\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nfunction eventFromUnknownInput(client, stackParser, exception, hint) {\n  const providedMechanism = hint && hint.data && hint.data.mechanism;\n  const mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic'\n  };\n  const [ex, extras] = getException(client, mechanism, exception, hint);\n  const event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)]\n    }\n  };\n  if (extras) {\n    event.extra = extras;\n  }\n  misc.addExceptionTypeValue(event, undefined, undefined);\n  misc.addExceptionMechanism(event, mechanism);\n  return {\n    ...event,\n    event_id: hint && hint.event_id\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(stackParser, message, level = 'info', hint, attachStacktrace) {\n  const event = {\n    event_id: hint && hint.event_id,\n    level\n  };\n  if (attachStacktrace && hint && hint.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{\n          value: message,\n          stacktrace: {\n            frames\n          }\n        }]\n      };\n      misc.addExceptionMechanism(event, {\n        synthetic: true\n      });\n    }\n  }\n  if (is.isParameterizedString(message)) {\n    const {\n      __sentry_template_string__,\n      __sentry_template_values__\n    } = message;\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__\n    };\n    return event;\n  }\n  event.message = message;\n  return event;\n}\nexports.eventFromMessage = eventFromMessage;\nexports.eventFromUnknownInput = eventFromUnknownInput;\nexports.exceptionFromError = exceptionFromError;\nexports.parseStackFrames = parseStackFrames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZXZlbnRidWlsZGVyLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsRUFBRSxHQUFHQyxtQkFBTyxDQUFDLHFGQUFTLENBQUM7QUFDN0IsTUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLHlGQUFXLENBQUM7QUFDakMsTUFBTUUsU0FBUyxHQUFHRixtQkFBTyxDQUFDLG1HQUFnQixDQUFDO0FBQzNDLE1BQU1HLE1BQU0sR0FBR0gsbUJBQU8sQ0FBQyw2RkFBYSxDQUFDOztBQUVyQztBQUNBO0FBQ0E7QUFDQSxTQUFTSSxnQkFBZ0JBLENBQUNDLFdBQVcsRUFBRUMsS0FBSyxFQUFFO0VBQzVDLE9BQU9ELFdBQVcsQ0FBQ0MsS0FBSyxDQUFDQyxLQUFLLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxrQkFBa0JBLENBQUNILFdBQVcsRUFBRUMsS0FBSyxFQUFFO0VBQzlDLE1BQU1HLFNBQVMsR0FBRztJQUNoQkMsSUFBSSxFQUFFSixLQUFLLENBQUNLLElBQUksSUFBSUwsS0FBSyxDQUFDTSxXQUFXLENBQUNELElBQUk7SUFDMUNiLEtBQUssRUFBRVEsS0FBSyxDQUFDTztFQUNmLENBQUM7RUFFRCxNQUFNQyxNQUFNLEdBQUdWLGdCQUFnQixDQUFDQyxXQUFXLEVBQUVDLEtBQUssQ0FBQztFQUNuRCxJQUFJUSxNQUFNLENBQUNDLE1BQU0sRUFBRTtJQUNqQk4sU0FBUyxDQUFDTyxVQUFVLEdBQUc7TUFBRUY7SUFBTyxDQUFDO0VBQ25DO0VBRUEsT0FBT0wsU0FBUztBQUNsQjs7QUFFQTtBQUNBLFNBQVNRLDBCQUEwQkEsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3ZDLEtBQUssTUFBTUMsSUFBSSxJQUFJRCxHQUFHLEVBQUU7SUFDdEIsSUFBSXZCLE1BQU0sQ0FBQ3lCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLEdBQUcsRUFBRUMsSUFBSSxDQUFDLEVBQUU7TUFDbkQsTUFBTXJCLEtBQUssR0FBR29CLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDO01BQ3ZCLElBQUlyQixLQUFLLFlBQVl5QixLQUFLLEVBQUU7UUFDMUIsT0FBT3pCLEtBQUs7TUFDZDtJQUNGO0VBQ0Y7RUFFQSxPQUFPMEIsU0FBUztBQUNsQjtBQUVBLFNBQVNDLG1CQUFtQkEsQ0FBQ2hCLFNBQVMsRUFBRTtFQUN0QyxJQUFJLE1BQU0sSUFBSUEsU0FBUyxJQUFJLE9BQU9BLFNBQVMsQ0FBQ0UsSUFBSSxLQUFLLFFBQVEsRUFBRTtJQUM3RCxJQUFJRSxPQUFPLEdBQUksSUFBR0osU0FBUyxDQUFDRSxJQUFLLHlCQUF3QjtJQUV6RCxJQUFJLFNBQVMsSUFBSUYsU0FBUyxJQUFJLE9BQU9BLFNBQVMsQ0FBQ0ksT0FBTyxLQUFLLFFBQVEsRUFBRTtNQUNuRUEsT0FBTyxJQUFLLGtCQUFpQkosU0FBUyxDQUFDSSxPQUFRLEdBQUU7SUFDbkQ7SUFFQSxPQUFPQSxPQUFPO0VBQ2hCLENBQUMsTUFBTSxJQUFJLFNBQVMsSUFBSUosU0FBUyxJQUFJLE9BQU9BLFNBQVMsQ0FBQ0ksT0FBTyxLQUFLLFFBQVEsRUFBRTtJQUMxRSxPQUFPSixTQUFTLENBQUNJLE9BQU87RUFDMUI7RUFFQSxNQUFNYSxJQUFJLEdBQUd2QixNQUFNLENBQUN3Qiw4QkFBOEIsQ0FBQ2xCLFNBQVMsQ0FBQzs7RUFFN0Q7RUFDQTtFQUNBLElBQUlWLEVBQUUsQ0FBQzZCLFlBQVksQ0FBQ25CLFNBQVMsQ0FBQyxFQUFFO0lBQzlCLE9BQVEsNkRBQTREQSxTQUFTLENBQUNJLE9BQVEsSUFBRztFQUMzRjtFQUVBLE1BQU1nQixTQUFTLEdBQUdDLGtCQUFrQixDQUFDckIsU0FBUyxDQUFDO0VBRS9DLE9BQVEsR0FDTm9CLFNBQVMsSUFBSUEsU0FBUyxLQUFLLFFBQVEsR0FBSSxJQUFHQSxTQUFVLEdBQUUsR0FBRyxRQUMxRCxxQ0FBb0NILElBQUssRUFBQztBQUM3QztBQUVBLFNBQVNJLGtCQUFrQkEsQ0FBQ1osR0FBRyxFQUFFO0VBQy9CLElBQUk7SUFDRixNQUFNRSxTQUFTLEdBQUd6QixNQUFNLENBQUNvQyxjQUFjLENBQUNiLEdBQUcsQ0FBQztJQUM1QyxPQUFPRSxTQUFTLEdBQUdBLFNBQVMsQ0FBQ1IsV0FBVyxDQUFDRCxJQUFJLEdBQUdhLFNBQVM7RUFDM0QsQ0FBQyxDQUFDLE9BQU9RLENBQUMsRUFBRTtJQUNWO0VBQUE7QUFFSjtBQUVBLFNBQVNDLFlBQVlBLENBQ25CQyxNQUFNLEVBQ05DLFNBQVMsRUFDVDFCLFNBQVMsRUFDVDJCLElBQUksRUFDSjtFQUNBLElBQUlyQyxFQUFFLENBQUNzQyxPQUFPLENBQUM1QixTQUFTLENBQUMsRUFBRTtJQUN6QixPQUFPLENBQUNBLFNBQVMsRUFBRWUsU0FBUyxDQUFDO0VBQy9COztFQUVBO0VBQ0FXLFNBQVMsQ0FBQ0csU0FBUyxHQUFHLElBQUk7RUFFMUIsSUFBSXZDLEVBQUUsQ0FBQ3dDLGFBQWEsQ0FBQzlCLFNBQVMsQ0FBQyxFQUFFO0lBQy9CLE1BQU0rQixjQUFjLEdBQUdOLE1BQU0sSUFBSUEsTUFBTSxDQUFDTyxVQUFVLENBQUMsQ0FBQyxDQUFDRCxjQUFjO0lBQ25FLE1BQU1FLE1BQU0sR0FBRztNQUFFLENBQUMsZ0JBQWdCLEdBQUd4QyxTQUFTLENBQUN5QyxlQUFlLENBQUNsQyxTQUFTLEVBQUcrQixjQUFjO0lBQUUsQ0FBQztJQUU1RixNQUFNSSxhQUFhLEdBQUczQiwwQkFBMEIsQ0FBQ1IsU0FBUyxDQUFDO0lBQzNELElBQUltQyxhQUFhLEVBQUU7TUFDakIsT0FBTyxDQUFDQSxhQUFhLEVBQUVGLE1BQU0sQ0FBQztJQUNoQztJQUVBLE1BQU03QixPQUFPLEdBQUdZLG1CQUFtQixDQUFDaEIsU0FBUyxDQUFDO0lBQzlDLE1BQU1vQyxFQUFFLEdBQUlULElBQUksSUFBSUEsSUFBSSxDQUFDVSxrQkFBa0IsSUFBSyxJQUFJdkIsS0FBSyxDQUFDVixPQUFPLENBQUM7SUFDbEVnQyxFQUFFLENBQUNoQyxPQUFPLEdBQUdBLE9BQU87SUFFcEIsT0FBTyxDQUFDZ0MsRUFBRSxFQUFFSCxNQUFNLENBQUM7RUFDckI7O0VBRUE7RUFDQTtFQUNBLE1BQU1HLEVBQUUsR0FBSVQsSUFBSSxJQUFJQSxJQUFJLENBQUNVLGtCQUFrQixJQUFLLElBQUl2QixLQUFLLENBQUNkLFNBQVUsQ0FBQztFQUNyRW9DLEVBQUUsQ0FBQ2hDLE9BQU8sR0FBSSxHQUFFSixTQUFVLEVBQUM7RUFFM0IsT0FBTyxDQUFDb0MsRUFBRSxFQUFFckIsU0FBUyxDQUFDO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU3VCLHFCQUFxQkEsQ0FDNUJiLE1BQU0sRUFDTjdCLFdBQVcsRUFDWEksU0FBUyxFQUNUMkIsSUFBSSxFQUNKO0VBQ0EsTUFBTVksaUJBQWlCLEdBQ3JCWixJQUFJLElBQUlBLElBQUksQ0FBQ2EsSUFBSSxJQUFLYixJQUFJLENBQUNhLElBQUksQ0FBR2QsU0FBUztFQUM3QyxNQUFNQSxTQUFTLEdBQUdhLGlCQUFpQixJQUFJO0lBQ3JDRSxPQUFPLEVBQUUsSUFBSTtJQUNieEMsSUFBSSxFQUFFO0VBQ1IsQ0FBQztFQUVELE1BQU0sQ0FBQ21DLEVBQUUsRUFBRUgsTUFBTSxDQUFDLEdBQUdULFlBQVksQ0FBQ0MsTUFBTSxFQUFFQyxTQUFTLEVBQUUxQixTQUFTLEVBQUUyQixJQUFJLENBQUM7RUFFckUsTUFBTWUsS0FBSyxHQUFHO0lBQ1oxQyxTQUFTLEVBQUU7TUFDVDJDLE1BQU0sRUFBRSxDQUFDNUMsa0JBQWtCLENBQUNILFdBQVcsRUFBRXdDLEVBQUUsQ0FBQztJQUM5QztFQUNGLENBQUM7RUFFRCxJQUFJSCxNQUFNLEVBQUU7SUFDVlMsS0FBSyxDQUFDRSxLQUFLLEdBQUdYLE1BQU07RUFDdEI7RUFFQXpDLElBQUksQ0FBQ3FELHFCQUFxQixDQUFDSCxLQUFLLEVBQUUzQixTQUFTLEVBQUVBLFNBQVMsQ0FBQztFQUN2RHZCLElBQUksQ0FBQ3NELHFCQUFxQixDQUFDSixLQUFLLEVBQUVoQixTQUFTLENBQUM7RUFFNUMsT0FBTztJQUNMLEdBQUdnQixLQUFLO0lBQ1JLLFFBQVEsRUFBRXBCLElBQUksSUFBSUEsSUFBSSxDQUFDb0I7RUFDekIsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZ0JBQWdCQSxDQUN2QnBELFdBQVcsRUFDWFEsT0FBTyxFQUNQNkMsS0FBSyxHQUFHLE1BQU0sRUFDZHRCLElBQUksRUFDSnVCLGdCQUFnQixFQUNoQjtFQUNBLE1BQU1SLEtBQUssR0FBRztJQUNaSyxRQUFRLEVBQUVwQixJQUFJLElBQUlBLElBQUksQ0FBQ29CLFFBQVE7SUFDL0JFO0VBQ0YsQ0FBQztFQUVELElBQUlDLGdCQUFnQixJQUFJdkIsSUFBSSxJQUFJQSxJQUFJLENBQUNVLGtCQUFrQixFQUFFO0lBQ3ZELE1BQU1oQyxNQUFNLEdBQUdWLGdCQUFnQixDQUFDQyxXQUFXLEVBQUUrQixJQUFJLENBQUNVLGtCQUFrQixDQUFDO0lBQ3JFLElBQUloQyxNQUFNLENBQUNDLE1BQU0sRUFBRTtNQUNqQm9DLEtBQUssQ0FBQzFDLFNBQVMsR0FBRztRQUNoQjJDLE1BQU0sRUFBRSxDQUNOO1VBQ0V0RCxLQUFLLEVBQUVlLE9BQU87VUFDZEcsVUFBVSxFQUFFO1lBQUVGO1VBQU87UUFDdkIsQ0FBQztNQUVMLENBQUM7TUFDRGIsSUFBSSxDQUFDc0QscUJBQXFCLENBQUNKLEtBQUssRUFBRTtRQUFFYixTQUFTLEVBQUU7TUFBSyxDQUFDLENBQUM7SUFDeEQ7RUFDRjtFQUVBLElBQUl2QyxFQUFFLENBQUM2RCxxQkFBcUIsQ0FBQy9DLE9BQU8sQ0FBQyxFQUFFO0lBQ3JDLE1BQU07TUFBRWdELDBCQUEwQjtNQUFFQztJQUEyQixDQUFDLEdBQUdqRCxPQUFPO0lBRTFFc0MsS0FBSyxDQUFDWSxRQUFRLEdBQUc7TUFDZmxELE9BQU8sRUFBRWdELDBCQUEwQjtNQUNuQ0csTUFBTSxFQUFFRjtJQUNWLENBQUM7SUFDRCxPQUFPWCxLQUFLO0VBQ2Q7RUFFQUEsS0FBSyxDQUFDdEMsT0FBTyxHQUFHQSxPQUFPO0VBQ3ZCLE9BQU9zQyxLQUFLO0FBQ2Q7QUFFQXRELHdCQUF3QixHQUFHNEQsZ0JBQWdCO0FBQzNDNUQsNkJBQTZCLEdBQUdrRCxxQkFBcUI7QUFDckRsRCwwQkFBMEIsR0FBR1csa0JBQWtCO0FBQy9DWCx3QkFBd0IsR0FBR08sZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZXZlbnRidWlsZGVyLmpzPzA1NWMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaXMgPSByZXF1aXJlKCcuL2lzLmpzJyk7XG5jb25zdCBtaXNjID0gcmVxdWlyZSgnLi9taXNjLmpzJyk7XG5jb25zdCBub3JtYWxpemUgPSByZXF1aXJlKCcuL25vcm1hbGl6ZS5qcycpO1xuY29uc3Qgb2JqZWN0ID0gcmVxdWlyZSgnLi9vYmplY3QuanMnKTtcblxuLyoqXG4gKiBFeHRyYWN0cyBzdGFjayBmcmFtZXMgZnJvbSB0aGUgZXJyb3Iuc3RhY2sgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU3RhY2tGcmFtZXMoc3RhY2tQYXJzZXIsIGVycm9yKSB7XG4gIHJldHVybiBzdGFja1BhcnNlcihlcnJvci5zdGFjayB8fCAnJywgMSk7XG59XG5cbi8qKlxuICogRXh0cmFjdHMgc3RhY2sgZnJhbWVzIGZyb20gdGhlIGVycm9yIGFuZCBidWlsZHMgYSBTZW50cnkgRXhjZXB0aW9uXG4gKi9cbmZ1bmN0aW9uIGV4Y2VwdGlvbkZyb21FcnJvcihzdGFja1BhcnNlciwgZXJyb3IpIHtcbiAgY29uc3QgZXhjZXB0aW9uID0ge1xuICAgIHR5cGU6IGVycm9yLm5hbWUgfHwgZXJyb3IuY29uc3RydWN0b3IubmFtZSxcbiAgICB2YWx1ZTogZXJyb3IubWVzc2FnZSxcbiAgfTtcblxuICBjb25zdCBmcmFtZXMgPSBwYXJzZVN0YWNrRnJhbWVzKHN0YWNrUGFyc2VyLCBlcnJvcik7XG4gIGlmIChmcmFtZXMubGVuZ3RoKSB7XG4gICAgZXhjZXB0aW9uLnN0YWNrdHJhY2UgPSB7IGZyYW1lcyB9O1xuICB9XG5cbiAgcmV0dXJuIGV4Y2VwdGlvbjtcbn1cblxuLyoqIElmIGEgcGxhaW4gb2JqZWN0IGhhcyBhIHByb3BlcnR5IHRoYXQgaXMgYW4gYEVycm9yYCwgcmV0dXJuIHRoaXMgZXJyb3IuICovXG5mdW5jdGlvbiBnZXRFcnJvclByb3BlcnR5RnJvbU9iamVjdChvYmopIHtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBvYmpbcHJvcF07XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZ2V0TWVzc2FnZUZvck9iamVjdChleGNlcHRpb24pIHtcbiAgaWYgKCduYW1lJyBpbiBleGNlcHRpb24gJiYgdHlwZW9mIGV4Y2VwdGlvbi5uYW1lID09PSAnc3RyaW5nJykge1xuICAgIGxldCBtZXNzYWdlID0gYCcke2V4Y2VwdGlvbi5uYW1lfScgY2FwdHVyZWQgYXMgZXhjZXB0aW9uYDtcblxuICAgIGlmICgnbWVzc2FnZScgaW4gZXhjZXB0aW9uICYmIHR5cGVvZiBleGNlcHRpb24ubWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1lc3NhZ2UgKz0gYCB3aXRoIG1lc3NhZ2UgJyR7ZXhjZXB0aW9uLm1lc3NhZ2V9J2A7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0gZWxzZSBpZiAoJ21lc3NhZ2UnIGluIGV4Y2VwdGlvbiAmJiB0eXBlb2YgZXhjZXB0aW9uLm1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGV4Y2VwdGlvbi5tZXNzYWdlO1xuICB9XG5cbiAgY29uc3Qga2V5cyA9IG9iamVjdC5leHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UoZXhjZXB0aW9uKTtcblxuICAvLyBTb21lIEVycm9yRXZlbnQgaW5zdGFuY2VzIGRvIG5vdCBoYXZlIGFuIGBlcnJvcmAgcHJvcGVydHksIHdoaWNoIGlzIHdoeSB0aGV5IGFyZSBub3QgaGFuZGxlZCBiZWZvcmVcbiAgLy8gV2Ugc3RpbGwgd2FudCB0byB0cnkgdG8gZ2V0IGEgZGVjZW50IG1lc3NhZ2UgZm9yIHRoZXNlIGNhc2VzXG4gIGlmIChpcy5pc0Vycm9yRXZlbnQoZXhjZXB0aW9uKSkge1xuICAgIHJldHVybiBgRXZlbnQgXFxgRXJyb3JFdmVudFxcYCBjYXB0dXJlZCBhcyBleGNlcHRpb24gd2l0aCBtZXNzYWdlIFxcYCR7ZXhjZXB0aW9uLm1lc3NhZ2V9XFxgYDtcbiAgfVxuXG4gIGNvbnN0IGNsYXNzTmFtZSA9IGdldE9iamVjdENsYXNzTmFtZShleGNlcHRpb24pO1xuXG4gIHJldHVybiBgJHtcbiAgICBjbGFzc05hbWUgJiYgY2xhc3NOYW1lICE9PSAnT2JqZWN0JyA/IGAnJHtjbGFzc05hbWV9J2AgOiAnT2JqZWN0J1xuICB9IGNhcHR1cmVkIGFzIGV4Y2VwdGlvbiB3aXRoIGtleXM6ICR7a2V5c31gO1xufVxuXG5mdW5jdGlvbiBnZXRPYmplY3RDbGFzc05hbWUob2JqKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XG4gICAgcmV0dXJuIHByb3RvdHlwZSA/IHByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lIDogdW5kZWZpbmVkO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gaWdub3JlIGVycm9ycyBoZXJlXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RXhjZXB0aW9uKFxuICBjbGllbnQsXG4gIG1lY2hhbmlzbSxcbiAgZXhjZXB0aW9uLFxuICBoaW50LFxuKSB7XG4gIGlmIChpcy5pc0Vycm9yKGV4Y2VwdGlvbikpIHtcbiAgICByZXR1cm4gW2V4Y2VwdGlvbiwgdW5kZWZpbmVkXTtcbiAgfVxuXG4gIC8vIE11dGF0ZSB0aGlzIVxuICBtZWNoYW5pc20uc3ludGhldGljID0gdHJ1ZTtcblxuICBpZiAoaXMuaXNQbGFpbk9iamVjdChleGNlcHRpb24pKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplRGVwdGggPSBjbGllbnQgJiYgY2xpZW50LmdldE9wdGlvbnMoKS5ub3JtYWxpemVEZXB0aDtcbiAgICBjb25zdCBleHRyYXMgPSB7IFsnX19zZXJpYWxpemVkX18nXTogbm9ybWFsaXplLm5vcm1hbGl6ZVRvU2l6ZShleGNlcHRpb24gLCBub3JtYWxpemVEZXB0aCkgfTtcblxuICAgIGNvbnN0IGVycm9yRnJvbVByb3AgPSBnZXRFcnJvclByb3BlcnR5RnJvbU9iamVjdChleGNlcHRpb24pO1xuICAgIGlmIChlcnJvckZyb21Qcm9wKSB7XG4gICAgICByZXR1cm4gW2Vycm9yRnJvbVByb3AsIGV4dHJhc107XG4gICAgfVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IGdldE1lc3NhZ2VGb3JPYmplY3QoZXhjZXB0aW9uKTtcbiAgICBjb25zdCBleCA9IChoaW50ICYmIGhpbnQuc3ludGhldGljRXhjZXB0aW9uKSB8fCBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgZXgubWVzc2FnZSA9IG1lc3NhZ2U7XG5cbiAgICByZXR1cm4gW2V4LCBleHRyYXNdO1xuICB9XG5cbiAgLy8gVGhpcyBoYW5kbGVzIHdoZW4gc29tZW9uZSBkb2VzOiBgdGhyb3cgXCJzb21ldGhpbmcgYXdlc29tZVwiO2BcbiAgLy8gV2UgdXNlIHN5bnRoZXNpemVkIEVycm9yIGhlcmUgc28gd2UgY2FuIGV4dHJhY3QgYSAocm91Z2gpIHN0YWNrIHRyYWNlLlxuICBjb25zdCBleCA9IChoaW50ICYmIGhpbnQuc3ludGhldGljRXhjZXB0aW9uKSB8fCBuZXcgRXJyb3IoZXhjZXB0aW9uICk7XG4gIGV4Lm1lc3NhZ2UgPSBgJHtleGNlcHRpb259YDtcblxuICByZXR1cm4gW2V4LCB1bmRlZmluZWRdO1xufVxuXG4vKipcbiAqIEJ1aWxkcyBhbmQgRXZlbnQgZnJvbSBhIEV4Y2VwdGlvblxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBldmVudEZyb21Vbmtub3duSW5wdXQoXG4gIGNsaWVudCxcbiAgc3RhY2tQYXJzZXIsXG4gIGV4Y2VwdGlvbixcbiAgaGludCxcbikge1xuICBjb25zdCBwcm92aWRlZE1lY2hhbmlzbSA9XG4gICAgaGludCAmJiBoaW50LmRhdGEgJiYgKGhpbnQuZGF0YSApLm1lY2hhbmlzbTtcbiAgY29uc3QgbWVjaGFuaXNtID0gcHJvdmlkZWRNZWNoYW5pc20gfHwge1xuICAgIGhhbmRsZWQ6IHRydWUsXG4gICAgdHlwZTogJ2dlbmVyaWMnLFxuICB9O1xuXG4gIGNvbnN0IFtleCwgZXh0cmFzXSA9IGdldEV4Y2VwdGlvbihjbGllbnQsIG1lY2hhbmlzbSwgZXhjZXB0aW9uLCBoaW50KTtcblxuICBjb25zdCBldmVudCA9IHtcbiAgICBleGNlcHRpb246IHtcbiAgICAgIHZhbHVlczogW2V4Y2VwdGlvbkZyb21FcnJvcihzdGFja1BhcnNlciwgZXgpXSxcbiAgICB9LFxuICB9O1xuXG4gIGlmIChleHRyYXMpIHtcbiAgICBldmVudC5leHRyYSA9IGV4dHJhcztcbiAgfVxuXG4gIG1pc2MuYWRkRXhjZXB0aW9uVHlwZVZhbHVlKGV2ZW50LCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG4gIG1pc2MuYWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LCBtZWNoYW5pc20pO1xuXG4gIHJldHVybiB7XG4gICAgLi4uZXZlbnQsXG4gICAgZXZlbnRfaWQ6IGhpbnQgJiYgaGludC5ldmVudF9pZCxcbiAgfTtcbn1cblxuLyoqXG4gKiBCdWlsZHMgYW5kIEV2ZW50IGZyb20gYSBNZXNzYWdlXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGV2ZW50RnJvbU1lc3NhZ2UoXG4gIHN0YWNrUGFyc2VyLFxuICBtZXNzYWdlLFxuICBsZXZlbCA9ICdpbmZvJyxcbiAgaGludCxcbiAgYXR0YWNoU3RhY2t0cmFjZSxcbikge1xuICBjb25zdCBldmVudCA9IHtcbiAgICBldmVudF9pZDogaGludCAmJiBoaW50LmV2ZW50X2lkLFxuICAgIGxldmVsLFxuICB9O1xuXG4gIGlmIChhdHRhY2hTdGFja3RyYWNlICYmIGhpbnQgJiYgaGludC5zeW50aGV0aWNFeGNlcHRpb24pIHtcbiAgICBjb25zdCBmcmFtZXMgPSBwYXJzZVN0YWNrRnJhbWVzKHN0YWNrUGFyc2VyLCBoaW50LnN5bnRoZXRpY0V4Y2VwdGlvbik7XG4gICAgaWYgKGZyYW1lcy5sZW5ndGgpIHtcbiAgICAgIGV2ZW50LmV4Y2VwdGlvbiA9IHtcbiAgICAgICAgdmFsdWVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IG1lc3NhZ2UsXG4gICAgICAgICAgICBzdGFja3RyYWNlOiB7IGZyYW1lcyB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9O1xuICAgICAgbWlzYy5hZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIHsgc3ludGhldGljOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpcy5pc1BhcmFtZXRlcml6ZWRTdHJpbmcobWVzc2FnZSkpIHtcbiAgICBjb25zdCB7IF9fc2VudHJ5X3RlbXBsYXRlX3N0cmluZ19fLCBfX3NlbnRyeV90ZW1wbGF0ZV92YWx1ZXNfXyB9ID0gbWVzc2FnZTtcblxuICAgIGV2ZW50LmxvZ2VudHJ5ID0ge1xuICAgICAgbWVzc2FnZTogX19zZW50cnlfdGVtcGxhdGVfc3RyaW5nX18sXG4gICAgICBwYXJhbXM6IF9fc2VudHJ5X3RlbXBsYXRlX3ZhbHVlc19fLFxuICAgIH07XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbiAgZXZlbnQubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHJldHVybiBldmVudDtcbn1cblxuZXhwb3J0cy5ldmVudEZyb21NZXNzYWdlID0gZXZlbnRGcm9tTWVzc2FnZTtcbmV4cG9ydHMuZXZlbnRGcm9tVW5rbm93bklucHV0ID0gZXZlbnRGcm9tVW5rbm93bklucHV0O1xuZXhwb3J0cy5leGNlcHRpb25Gcm9tRXJyb3IgPSBleGNlcHRpb25Gcm9tRXJyb3I7XG5leHBvcnRzLnBhcnNlU3RhY2tGcmFtZXMgPSBwYXJzZVN0YWNrRnJhbWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRidWlsZGVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXMiLCJyZXF1aXJlIiwibWlzYyIsIm5vcm1hbGl6ZSIsIm9iamVjdCIsInBhcnNlU3RhY2tGcmFtZXMiLCJzdGFja1BhcnNlciIsImVycm9yIiwic3RhY2siLCJleGNlcHRpb25Gcm9tRXJyb3IiLCJleGNlcHRpb24iLCJ0eXBlIiwibmFtZSIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImZyYW1lcyIsImxlbmd0aCIsInN0YWNrdHJhY2UiLCJnZXRFcnJvclByb3BlcnR5RnJvbU9iamVjdCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJFcnJvciIsInVuZGVmaW5lZCIsImdldE1lc3NhZ2VGb3JPYmplY3QiLCJrZXlzIiwiZXh0cmFjdEV4Y2VwdGlvbktleXNGb3JNZXNzYWdlIiwiaXNFcnJvckV2ZW50IiwiY2xhc3NOYW1lIiwiZ2V0T2JqZWN0Q2xhc3NOYW1lIiwiZ2V0UHJvdG90eXBlT2YiLCJlIiwiZ2V0RXhjZXB0aW9uIiwiY2xpZW50IiwibWVjaGFuaXNtIiwiaGludCIsImlzRXJyb3IiLCJzeW50aGV0aWMiLCJpc1BsYWluT2JqZWN0Iiwibm9ybWFsaXplRGVwdGgiLCJnZXRPcHRpb25zIiwiZXh0cmFzIiwibm9ybWFsaXplVG9TaXplIiwiZXJyb3JGcm9tUHJvcCIsImV4Iiwic3ludGhldGljRXhjZXB0aW9uIiwiZXZlbnRGcm9tVW5rbm93bklucHV0IiwicHJvdmlkZWRNZWNoYW5pc20iLCJkYXRhIiwiaGFuZGxlZCIsImV2ZW50IiwidmFsdWVzIiwiZXh0cmEiLCJhZGRFeGNlcHRpb25UeXBlVmFsdWUiLCJhZGRFeGNlcHRpb25NZWNoYW5pc20iLCJldmVudF9pZCIsImV2ZW50RnJvbU1lc3NhZ2UiLCJsZXZlbCIsImF0dGFjaFN0YWNrdHJhY2UiLCJpc1BhcmFtZXRlcml6ZWRTdHJpbmciLCJfX3NlbnRyeV90ZW1wbGF0ZV9zdHJpbmdfXyIsIl9fc2VudHJ5X3RlbXBsYXRlX3ZhbHVlc19fIiwibG9nZW50cnkiLCJwYXJhbXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst logger = __webpack_require__(/*! ../logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst object = __webpack_require__(/*! ../object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst worldwide = __webpack_require__(/*! ../worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\");\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addConsoleInstrumentationHandler(handler) {\n  const type = 'console';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, instrumentConsole);\n}\nfunction instrumentConsole() {\n  if (!('console' in worldwide.GLOBAL_OBJ)) {\n    return;\n  }\n  logger.CONSOLE_LEVELS.forEach(function (level) {\n    if (!(level in worldwide.GLOBAL_OBJ.console)) {\n      return;\n    }\n    object.fill(worldwide.GLOBAL_OBJ.console, level, function (originalConsoleMethod) {\n      logger.originalConsoleMethods[level] = originalConsoleMethod;\n      return function (...args) {\n        const handlerData = {\n          args,\n          level\n        };\n        handlers.triggerHandlers('console', handlerData);\n        const log = logger.originalConsoleMethods[level];\n        log && log.apply(worldwide.GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\nexports.addConsoleInstrumentationHandler = addConsoleInstrumentationHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9jb25zb2xlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLDhGQUFjLENBQUM7QUFDdEMsTUFBTUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLDhGQUFjLENBQUM7QUFDdEMsTUFBTUUsU0FBUyxHQUFHRixtQkFBTyxDQUFDLG9HQUFpQixDQUFDO0FBQzVDLE1BQU1HLFFBQVEsR0FBR0gsbUJBQU8sQ0FBQyw0R0FBZSxDQUFDOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTSSxnQ0FBZ0NBLENBQUNDLE9BQU8sRUFBRTtFQUNqRCxNQUFNQyxJQUFJLEdBQUcsU0FBUztFQUN0QkgsUUFBUSxDQUFDSSxVQUFVLENBQUNELElBQUksRUFBRUQsT0FBTyxDQUFDO0VBQ2xDRixRQUFRLENBQUNLLGVBQWUsQ0FBQ0YsSUFBSSxFQUFFRyxpQkFBaUIsQ0FBQztBQUNuRDtBQUVBLFNBQVNBLGlCQUFpQkEsQ0FBQSxFQUFHO0VBQzNCLElBQUksRUFBRSxTQUFTLElBQUlQLFNBQVMsQ0FBQ1EsVUFBVSxDQUFDLEVBQUU7SUFDeEM7RUFDRjtFQUVBWCxNQUFNLENBQUNZLGNBQWMsQ0FBQ0MsT0FBTyxDQUFDLFVBQVVDLEtBQUssRUFBRTtJQUM3QyxJQUFJLEVBQUVBLEtBQUssSUFBSVgsU0FBUyxDQUFDUSxVQUFVLENBQUNJLE9BQU8sQ0FBQyxFQUFFO01BQzVDO0lBQ0Y7SUFFQWIsTUFBTSxDQUFDYyxJQUFJLENBQUNiLFNBQVMsQ0FBQ1EsVUFBVSxDQUFDSSxPQUFPLEVBQUVELEtBQUssRUFBRSxVQUFVRyxxQkFBcUIsRUFBRTtNQUNoRmpCLE1BQU0sQ0FBQ2tCLHNCQUFzQixDQUFDSixLQUFLLENBQUMsR0FBR0cscUJBQXFCO01BRTVELE9BQU8sVUFBVSxHQUFHRSxJQUFJLEVBQUU7UUFDeEIsTUFBTUMsV0FBVyxHQUFHO1VBQUVELElBQUk7VUFBRUw7UUFBTSxDQUFDO1FBQ25DVixRQUFRLENBQUNpQixlQUFlLENBQUMsU0FBUyxFQUFFRCxXQUFXLENBQUM7UUFFaEQsTUFBTUUsR0FBRyxHQUFHdEIsTUFBTSxDQUFDa0Isc0JBQXNCLENBQUNKLEtBQUssQ0FBQztRQUNoRFEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLEtBQUssQ0FBQ3BCLFNBQVMsQ0FBQ1EsVUFBVSxDQUFDSSxPQUFPLEVBQUVJLElBQUksQ0FBQztNQUN0RCxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0o7QUFFQXJCLHdDQUF3QyxHQUFHTyxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9pbnN0cnVtZW50L2NvbnNvbGUuanM/N2Y4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi9sb2dnZXIuanMnKTtcbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4uL29iamVjdC5qcycpO1xuY29uc3Qgd29ybGR3aWRlID0gcmVxdWlyZSgnLi4vd29ybGR3aWRlLmpzJyk7XG5jb25zdCBoYW5kbGVycyA9IHJlcXVpcmUoJy4vaGFuZGxlcnMuanMnKTtcblxuLyoqXG4gKiBBZGQgYW4gaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIgZm9yIHdoZW4gYSBjb25zb2xlLnh4eCBtZXRob2QgaXMgY2FsbGVkLlxuICpcbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyKGhhbmRsZXIpIHtcbiAgY29uc3QgdHlwZSA9ICdjb25zb2xlJztcbiAgaGFuZGxlcnMuYWRkSGFuZGxlcih0eXBlLCBoYW5kbGVyKTtcbiAgaGFuZGxlcnMubWF5YmVJbnN0cnVtZW50KHR5cGUsIGluc3RydW1lbnRDb25zb2xlKTtcbn1cblxuZnVuY3Rpb24gaW5zdHJ1bWVudENvbnNvbGUoKSB7XG4gIGlmICghKCdjb25zb2xlJyBpbiB3b3JsZHdpZGUuR0xPQkFMX09CSikpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsb2dnZXIuQ09OU09MRV9MRVZFTFMuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICBpZiAoIShsZXZlbCBpbiB3b3JsZHdpZGUuR0xPQkFMX09CSi5jb25zb2xlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9iamVjdC5maWxsKHdvcmxkd2lkZS5HTE9CQUxfT0JKLmNvbnNvbGUsIGxldmVsLCBmdW5jdGlvbiAob3JpZ2luYWxDb25zb2xlTWV0aG9kKSB7XG4gICAgICBsb2dnZXIub3JpZ2luYWxDb25zb2xlTWV0aG9kc1tsZXZlbF0gPSBvcmlnaW5hbENvbnNvbGVNZXRob2Q7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBjb25zdCBoYW5kbGVyRGF0YSA9IHsgYXJncywgbGV2ZWwgfTtcbiAgICAgICAgaGFuZGxlcnMudHJpZ2dlckhhbmRsZXJzKCdjb25zb2xlJywgaGFuZGxlckRhdGEpO1xuXG4gICAgICAgIGNvbnN0IGxvZyA9IGxvZ2dlci5vcmlnaW5hbENvbnNvbGVNZXRob2RzW2xldmVsXTtcbiAgICAgICAgbG9nICYmIGxvZy5hcHBseSh3b3JsZHdpZGUuR0xPQkFMX09CSi5jb25zb2xlLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnRzLmFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyID0gYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zb2xlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibG9nZ2VyIiwicmVxdWlyZSIsIm9iamVjdCIsIndvcmxkd2lkZSIsImhhbmRsZXJzIiwiYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJoYW5kbGVyIiwidHlwZSIsImFkZEhhbmRsZXIiLCJtYXliZUluc3RydW1lbnQiLCJpbnN0cnVtZW50Q29uc29sZSIsIkdMT0JBTF9PQkoiLCJDT05TT0xFX0xFVkVMUyIsImZvckVhY2giLCJsZXZlbCIsImNvbnNvbGUiLCJmaWxsIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kcyIsImFyZ3MiLCJoYW5kbGVyRGF0YSIsInRyaWdnZXJIYW5kbGVycyIsImxvZyIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/fetch.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/fetch.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ../is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst object = __webpack_require__(/*! ../object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst supports = __webpack_require__(/*! ../supports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/supports.js\");\nconst time = __webpack_require__(/*! ../time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst worldwide = __webpack_require__(/*! ../worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\");\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addFetchInstrumentationHandler(handler, skipNativeFetchCheck) {\n  const type = 'fetch';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, () => instrumentFetch(undefined, skipNativeFetchCheck));\n}\n\n/**\n * Add an instrumentation handler for long-lived fetch requests, like consuming server-sent events (SSE) via fetch.\n * The handler will resolve the request body and emit the actual `endTimestamp`, so that the\n * span can be updated accordingly.\n *\n * Only used internally\n * @hidden\n */\nfunction addFetchEndInstrumentationHandler(handler) {\n  const type = 'fetch-body-resolved';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, () => instrumentFetch(streamHandler));\n}\nfunction instrumentFetch(onFetchResolved, skipNativeFetchCheck = false) {\n  if (skipNativeFetchCheck && !supports.supportsNativeFetch()) {\n    return;\n  }\n  object.fill(worldwide.GLOBAL_OBJ, 'fetch', function (originalFetch) {\n    return function (...args) {\n      // We capture the error right here and not in the Promise error callback because Safari (and probably other\n      // browsers too) will wipe the stack trace up to this point, only leaving us with this file which is useless.\n\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n      //       it means the error, that was caused by your fetch call did not\n      //       have a stack trace, so the SDK backfilled the stack trace so\n      //       you can see which fetch call failed.\n      const virtualError = new Error();\n      const {\n        method,\n        url\n      } = parseFetchArgs(args);\n      const handlerData = {\n        args,\n        fetchData: {\n          method,\n          url\n        },\n        startTimestamp: time.timestampInSeconds() * 1000,\n        // // Adding the error to be able to fingerprint the failed fetch event in HttpClient instrumentation\n        virtualError\n      };\n\n      // if there is no callback, fetch is instrumented directly\n      if (!onFetchResolved) {\n        handlers.triggerHandlers('fetch', {\n          ...handlerData\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(worldwide.GLOBAL_OBJ, args).then(async response => {\n        if (onFetchResolved) {\n          onFetchResolved(response);\n        } else {\n          handlers.triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: time.timestampInSeconds() * 1000,\n            response\n          });\n        }\n        return response;\n      }, error => {\n        handlers.triggerHandlers('fetch', {\n          ...handlerData,\n          endTimestamp: time.timestampInSeconds() * 1000,\n          error\n        });\n        if (is.isError(error) && error.stack === undefined) {\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the error, that was caused by your fetch call did not\n          //       have a stack trace, so the SDK backfilled the stack trace so\n          //       you can see which fetch call failed.\n          error.stack = virtualError.stack;\n          object.addNonEnumerableProperty(error, 'framesToPop', 1);\n        }\n\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n        //       it means the sentry.javascript SDK caught an error invoking your application code.\n        //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n        throw error;\n      });\n    };\n  });\n}\nasync function resolveResponse(res, onFinishedResolving) {\n  if (res && res.body) {\n    const body = res.body;\n    const responseReader = body.getReader();\n\n    // Define a maximum duration after which we just cancel\n    const maxFetchDurationTimeout = setTimeout(() => {\n      body.cancel().then(null, () => {\n        // noop\n      });\n    }, 90 * 1000 // 90s\n    );\n\n    let readingActive = true;\n    while (readingActive) {\n      let chunkTimeout;\n      try {\n        // abort reading if read op takes more than 5s\n        chunkTimeout = setTimeout(() => {\n          body.cancel().then(null, () => {\n            // noop on error\n          });\n        }, 5000);\n\n        // This .read() call will reject/throw when we abort due to timeouts through `body.cancel()`\n        const {\n          done\n        } = await responseReader.read();\n        clearTimeout(chunkTimeout);\n        if (done) {\n          onFinishedResolving();\n          readingActive = false;\n        }\n      } catch (error) {\n        readingActive = false;\n      } finally {\n        clearTimeout(chunkTimeout);\n      }\n    }\n    clearTimeout(maxFetchDurationTimeout);\n    responseReader.releaseLock();\n    body.cancel().then(null, () => {\n      // noop on error\n    });\n  }\n}\nfunction streamHandler(response) {\n  // clone response for awaiting stream\n  let clonedResponseForResolving;\n  try {\n    clonedResponseForResolving = response.clone();\n  } catch (e) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  resolveResponse(clonedResponseForResolving, () => {\n    handlers.triggerHandlers('fetch-body-resolved', {\n      endTimestamp: time.timestampInSeconds() * 1000,\n      response\n    });\n  });\n}\nfunction hasProp(obj, prop) {\n  return !!obj && typeof obj === 'object' && !!obj[prop];\n}\nfunction getUrlFromResource(resource) {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n  if (!resource) {\n    return '';\n  }\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n  if (resource.toString) {\n    return resource.toString();\n  }\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nfunction parseFetchArgs(fetchArgs) {\n  if (fetchArgs.length === 0) {\n    return {\n      method: 'GET',\n      url: ''\n    };\n  }\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs;\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET'\n    };\n  }\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET'\n  };\n}\nexports.addFetchEndInstrumentationHandler = addFetchEndInstrumentationHandler;\nexports.addFetchInstrumentationHandler = addFetchInstrumentationHandler;\nexports.parseFetchArgs = parseFetchArgs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/fetch.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ../worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\");\nlet _oldOnErrorHandler = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalErrorInstrumentationHandler(handler) {\n  const type = 'error';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, instrumentError);\n}\nfunction instrumentError() {\n  _oldOnErrorHandler = worldwide.GLOBAL_OBJ.onerror;\n\n  // Note: The reason we are doing window.onerror instead of window.addEventListener('error')\n  // is that we are using this handler in the Loader Script, to handle buffered errors consistently\n  worldwide.GLOBAL_OBJ.onerror = function (msg, url, line, column, error) {\n    const handlerData = {\n      column,\n      error,\n      line,\n      msg,\n      url\n    };\n    handlers.triggerHandlers('error', handlerData);\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n    return false;\n  };\n  worldwide.GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\nexports.addGlobalErrorInstrumentationHandler = addGlobalErrorInstrumentationHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9nbG9iYWxFcnJvci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxvR0FBaUIsQ0FBQztBQUM1QyxNQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsNEdBQWUsQ0FBQztBQUV6QyxJQUFJRSxrQkFBa0IsR0FBRyxJQUFJOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxvQ0FBb0NBLENBQUNDLE9BQU8sRUFBRTtFQUNyRCxNQUFNQyxJQUFJLEdBQUcsT0FBTztFQUNwQkosUUFBUSxDQUFDSyxVQUFVLENBQUNELElBQUksRUFBRUQsT0FBTyxDQUFDO0VBQ2xDSCxRQUFRLENBQUNNLGVBQWUsQ0FBQ0YsSUFBSSxFQUFFRyxlQUFlLENBQUM7QUFDakQ7QUFFQSxTQUFTQSxlQUFlQSxDQUFBLEVBQUc7RUFDekJOLGtCQUFrQixHQUFHSCxTQUFTLENBQUNVLFVBQVUsQ0FBQ0MsT0FBTzs7RUFFakQ7RUFDQTtFQUNBWCxTQUFTLENBQUNVLFVBQVUsQ0FBQ0MsT0FBTyxHQUFHLFVBQzdCQyxHQUFHLEVBQ0hDLEdBQUcsRUFDSEMsSUFBSSxFQUNKQyxNQUFNLEVBQ05DLEtBQUssRUFDTDtJQUNBLE1BQU1DLFdBQVcsR0FBRztNQUNsQkYsTUFBTTtNQUNOQyxLQUFLO01BQ0xGLElBQUk7TUFDSkYsR0FBRztNQUNIQztJQUNGLENBQUM7SUFDRFgsUUFBUSxDQUFDZ0IsZUFBZSxDQUFDLE9BQU8sRUFBRUQsV0FBVyxDQUFDO0lBRTlDLElBQUlkLGtCQUFrQixFQUFFO01BQ3RCO01BQ0EsT0FBT0Esa0JBQWtCLENBQUNnQixLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUM7SUFDbEQ7SUFFQSxPQUFPLEtBQUs7RUFDZCxDQUFDO0VBRURwQixTQUFTLENBQUNVLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDVSx1QkFBdUIsR0FBRyxJQUFJO0FBQzdEO0FBRUF2Qiw0Q0FBNEMsR0FBR00sb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9nbG9iYWxFcnJvci5qcz8zNjZmIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4uL3dvcmxkd2lkZS5qcycpO1xuY29uc3QgaGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzLmpzJyk7XG5cbmxldCBfb2xkT25FcnJvckhhbmRsZXIgPSBudWxsO1xuXG4vKipcbiAqIEFkZCBhbiBpbnN0cnVtZW50YXRpb24gaGFuZGxlciBmb3Igd2hlbiBhbiBlcnJvciBpcyBjYXB0dXJlZCBieSB0aGUgZ2xvYmFsIGVycm9yIGhhbmRsZXIuXG4gKlxuICogVXNlIGF0IHlvdXIgb3duIHJpc2ssIHRoaXMgbWlnaHQgYnJlYWsgd2l0aG91dCBjaGFuZ2Vsb2cgbm90aWNlLCBvbmx5IHVzZWQgaW50ZXJuYWxseS5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyKGhhbmRsZXIpIHtcbiAgY29uc3QgdHlwZSA9ICdlcnJvcic7XG4gIGhhbmRsZXJzLmFkZEhhbmRsZXIodHlwZSwgaGFuZGxlcik7XG4gIGhhbmRsZXJzLm1heWJlSW5zdHJ1bWVudCh0eXBlLCBpbnN0cnVtZW50RXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpbnN0cnVtZW50RXJyb3IoKSB7XG4gIF9vbGRPbkVycm9ySGFuZGxlciA9IHdvcmxkd2lkZS5HTE9CQUxfT0JKLm9uZXJyb3I7XG5cbiAgLy8gTm90ZTogVGhlIHJlYXNvbiB3ZSBhcmUgZG9pbmcgd2luZG93Lm9uZXJyb3IgaW5zdGVhZCBvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InKVxuICAvLyBpcyB0aGF0IHdlIGFyZSB1c2luZyB0aGlzIGhhbmRsZXIgaW4gdGhlIExvYWRlciBTY3JpcHQsIHRvIGhhbmRsZSBidWZmZXJlZCBlcnJvcnMgY29uc2lzdGVudGx5XG4gIHdvcmxkd2lkZS5HTE9CQUxfT0JKLm9uZXJyb3IgPSBmdW5jdGlvbiAoXG4gICAgbXNnLFxuICAgIHVybCxcbiAgICBsaW5lLFxuICAgIGNvbHVtbixcbiAgICBlcnJvcixcbiAgKSB7XG4gICAgY29uc3QgaGFuZGxlckRhdGEgPSB7XG4gICAgICBjb2x1bW4sXG4gICAgICBlcnJvcixcbiAgICAgIGxpbmUsXG4gICAgICBtc2csXG4gICAgICB1cmwsXG4gICAgfTtcbiAgICBoYW5kbGVycy50cmlnZ2VySGFuZGxlcnMoJ2Vycm9yJywgaGFuZGxlckRhdGEpO1xuXG4gICAgaWYgKF9vbGRPbkVycm9ySGFuZGxlcikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgcmV0dXJuIF9vbGRPbkVycm9ySGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICB3b3JsZHdpZGUuR0xPQkFMX09CSi5vbmVycm9yLl9fU0VOVFJZX0lOU1RSVU1FTlRFRF9fID0gdHJ1ZTtcbn1cblxuZXhwb3J0cy5hZGRHbG9iYWxFcnJvckluc3RydW1lbnRhdGlvbkhhbmRsZXIgPSBhZGRHbG9iYWxFcnJvckluc3RydW1lbnRhdGlvbkhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxFcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIndvcmxkd2lkZSIsInJlcXVpcmUiLCJoYW5kbGVycyIsIl9vbGRPbkVycm9ySGFuZGxlciIsImFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImhhbmRsZXIiLCJ0eXBlIiwiYWRkSGFuZGxlciIsIm1heWJlSW5zdHJ1bWVudCIsImluc3RydW1lbnRFcnJvciIsIkdMT0JBTF9PQkoiLCJvbmVycm9yIiwibXNnIiwidXJsIiwibGluZSIsImNvbHVtbiIsImVycm9yIiwiaGFuZGxlckRhdGEiLCJ0cmlnZ2VySGFuZGxlcnMiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9fU0VOVFJZX0lOU1RSVU1FTlRFRF9fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ../worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\");\nlet _oldOnUnhandledRejectionHandler = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalUnhandledRejectionInstrumentationHandler(handler) {\n  const type = 'unhandledrejection';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, instrumentUnhandledRejection);\n}\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = worldwide.GLOBAL_OBJ.onunhandledrejection;\n\n  // Note: The reason we are doing window.onunhandledrejection instead of window.addEventListener('unhandledrejection')\n  // is that we are using this handler in the Loader Script, to handle buffered rejections consistently\n  worldwide.GLOBAL_OBJ.onunhandledrejection = function (e) {\n    const handlerData = e;\n    handlers.triggerHandlers('unhandledrejection', handlerData);\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n    return true;\n  };\n  worldwide.GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\nexports.addGlobalUnhandledRejectionInstrumentationHandler = addGlobalUnhandledRejectionInstrumentationHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9nbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxTQUFTLEdBQUdDLG1CQUFPLENBQUMsb0dBQWlCLENBQUM7QUFDNUMsTUFBTUMsUUFBUSxHQUFHRCxtQkFBTyxDQUFDLDRHQUFlLENBQUM7QUFFekMsSUFBSUUsK0JBQStCLEdBQUcsSUFBSTs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsaURBQWlEQSxDQUN4REMsT0FBTyxFQUNQO0VBQ0EsTUFBTUMsSUFBSSxHQUFHLG9CQUFvQjtFQUNqQ0osUUFBUSxDQUFDSyxVQUFVLENBQUNELElBQUksRUFBRUQsT0FBTyxDQUFDO0VBQ2xDSCxRQUFRLENBQUNNLGVBQWUsQ0FBQ0YsSUFBSSxFQUFFRyw0QkFBNEIsQ0FBQztBQUM5RDtBQUVBLFNBQVNBLDRCQUE0QkEsQ0FBQSxFQUFHO0VBQ3RDTiwrQkFBK0IsR0FBR0gsU0FBUyxDQUFDVSxVQUFVLENBQUNDLG9CQUFvQjs7RUFFM0U7RUFDQTtFQUNBWCxTQUFTLENBQUNVLFVBQVUsQ0FBQ0Msb0JBQW9CLEdBQUcsVUFBVUMsQ0FBQyxFQUFFO0lBQ3ZELE1BQU1DLFdBQVcsR0FBR0QsQ0FBQztJQUNyQlYsUUFBUSxDQUFDWSxlQUFlLENBQUMsb0JBQW9CLEVBQUVELFdBQVcsQ0FBQztJQUUzRCxJQUFJViwrQkFBK0IsRUFBRTtNQUNuQztNQUNBLE9BQU9BLCtCQUErQixDQUFDWSxLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUM7SUFDL0Q7SUFFQSxPQUFPLElBQUk7RUFDYixDQUFDO0VBRURoQixTQUFTLENBQUNVLFVBQVUsQ0FBQ0Msb0JBQW9CLENBQUNNLHVCQUF1QixHQUFHLElBQUk7QUFDMUU7QUFFQW5CLHlEQUF5RCxHQUFHTSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9pbnN0cnVtZW50L2dsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5qcz8zMDdkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4uL3dvcmxkd2lkZS5qcycpO1xuY29uc3QgaGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzLmpzJyk7XG5cbmxldCBfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyID0gbnVsbDtcblxuLyoqXG4gKiBBZGQgYW4gaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIgZm9yIHdoZW4gYW4gdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uIGlzIGNhcHR1cmVkLlxuICpcbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIoXG4gIGhhbmRsZXIsXG4pIHtcbiAgY29uc3QgdHlwZSA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xuICBoYW5kbGVycy5hZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICBoYW5kbGVycy5tYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudFVuaGFuZGxlZFJlamVjdGlvbik7XG59XG5cbmZ1bmN0aW9uIGluc3RydW1lbnRVbmhhbmRsZWRSZWplY3Rpb24oKSB7XG4gIF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIgPSB3b3JsZHdpZGUuR0xPQkFMX09CSi5vbnVuaGFuZGxlZHJlamVjdGlvbjtcblxuICAvLyBOb3RlOiBUaGUgcmVhc29uIHdlIGFyZSBkb2luZyB3aW5kb3cub251bmhhbmRsZWRyZWplY3Rpb24gaW5zdGVhZCBvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5oYW5kbGVkcmVqZWN0aW9uJylcbiAgLy8gaXMgdGhhdCB3ZSBhcmUgdXNpbmcgdGhpcyBoYW5kbGVyIGluIHRoZSBMb2FkZXIgU2NyaXB0LCB0byBoYW5kbGUgYnVmZmVyZWQgcmVqZWN0aW9ucyBjb25zaXN0ZW50bHlcbiAgd29ybGR3aWRlLkdMT0JBTF9PQkoub251bmhhbmRsZWRyZWplY3Rpb24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGNvbnN0IGhhbmRsZXJEYXRhID0gZTtcbiAgICBoYW5kbGVycy50cmlnZ2VySGFuZGxlcnMoJ3VuaGFuZGxlZHJlamVjdGlvbicsIGhhbmRsZXJEYXRhKTtcblxuICAgIGlmIChfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICByZXR1cm4gX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIHdvcmxkd2lkZS5HTE9CQUxfT0JKLm9udW5oYW5kbGVkcmVqZWN0aW9uLl9fU0VOVFJZX0lOU1RSVU1FTlRFRF9fID0gdHJ1ZTtcbn1cblxuZXhwb3J0cy5hZGRHbG9iYWxVbmhhbmRsZWRSZWplY3Rpb25JbnN0cnVtZW50YXRpb25IYW5kbGVyID0gYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIndvcmxkd2lkZSIsInJlcXVpcmUiLCJoYW5kbGVycyIsIl9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIiLCJhZGRHbG9iYWxVbmhhbmRsZWRSZWplY3Rpb25JbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiaGFuZGxlciIsInR5cGUiLCJhZGRIYW5kbGVyIiwibWF5YmVJbnN0cnVtZW50IiwiaW5zdHJ1bWVudFVuaGFuZGxlZFJlamVjdGlvbiIsIkdMT0JBTF9PQkoiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsImUiLCJoYW5kbGVyRGF0YSIsInRyaWdnZXJIYW5kbGVycyIsImFwcGx5IiwiYXJndW1lbnRzIiwiX19TRU5UUllfSU5TVFJVTUVOVEVEX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ../logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst stacktrace = __webpack_require__(/*! ../stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\n\n// We keep the handlers globally\nconst handlers = {};\nconst instrumented = {};\n\n/** Add a handler function. */\nfunction addHandler(type, handler) {\n  handlers[type] = handlers[type] || [];\n  handlers[type].push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nfunction resetInstrumentationHandlers() {\n  Object.keys(handlers).forEach(key => {\n    handlers[key] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nfunction maybeInstrument(type, instrumentFn) {\n  if (!instrumented[type]) {\n    instrumented[type] = true;\n    try {\n      instrumentFn();\n    } catch (e) {\n      debugBuild.DEBUG_BUILD && logger.logger.error(`Error while instrumenting ${type}`, e);\n    }\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nfunction triggerHandlers(type, data) {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      debugBuild.DEBUG_BUILD && logger.logger.error(`Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${stacktrace.getFunctionName(handler)}\\nError:`, e);\n    }\n  }\n}\nexports.addHandler = addHandler;\nexports.maybeInstrument = maybeInstrument;\nexports.resetInstrumentationHandlers = resetInstrumentationHandlers;\nexports.triggerHandlers = triggerHandlers;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9oYW5kbGVycy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyx3R0FBbUIsQ0FBQztBQUMvQyxNQUFNQyxNQUFNLEdBQUdELG1CQUFPLENBQUMsOEZBQWMsQ0FBQztBQUN0QyxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsc0dBQWtCLENBQUM7O0FBRTlDO0FBQ0EsTUFBTUcsUUFBUSxHQUFHLENBQUMsQ0FBQztBQUNuQixNQUFNQyxZQUFZLEdBQUcsQ0FBQyxDQUFDOztBQUV2QjtBQUNBLFNBQVNDLFVBQVVBLENBQUNDLElBQUksRUFBRUMsT0FBTyxFQUFFO0VBQ2pDSixRQUFRLENBQUNHLElBQUksQ0FBQyxHQUFHSCxRQUFRLENBQUNHLElBQUksQ0FBQyxJQUFJLEVBQUU7RUFDcENILFFBQVEsQ0FBQ0csSUFBSSxDQUFDLENBQUdFLElBQUksQ0FBQ0QsT0FBTyxDQUFDO0FBQ2pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsNEJBQTRCQSxDQUFBLEVBQUc7RUFDdENkLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDUCxRQUFRLENBQUMsQ0FBQ1EsT0FBTyxDQUFDQyxHQUFHLElBQUk7SUFDbkNULFFBQVEsQ0FBQ1MsR0FBRyxDQUFFLEdBQUdDLFNBQVM7RUFDNUIsQ0FBQyxDQUFDO0FBQ0o7O0FBRUE7QUFDQSxTQUFTQyxlQUFlQSxDQUFDUixJQUFJLEVBQUVTLFlBQVksRUFBRTtFQUMzQyxJQUFJLENBQUNYLFlBQVksQ0FBQ0UsSUFBSSxDQUFDLEVBQUU7SUFDdkJGLFlBQVksQ0FBQ0UsSUFBSSxDQUFDLEdBQUcsSUFBSTtJQUN6QixJQUFJO01BQ0ZTLFlBQVksQ0FBQyxDQUFDO0lBQ2hCLENBQUMsQ0FBQyxPQUFPQyxDQUFDLEVBQUU7TUFDVmpCLFVBQVUsQ0FBQ2tCLFdBQVcsSUFBSWhCLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDaUIsS0FBSyxDQUFFLDZCQUE0QlosSUFBSyxFQUFDLEVBQUVVLENBQUMsQ0FBQztJQUN2RjtFQUNGO0FBQ0Y7O0FBRUE7QUFDQSxTQUFTRyxlQUFlQSxDQUFDYixJQUFJLEVBQUVjLElBQUksRUFBRTtFQUNuQyxNQUFNQyxZQUFZLEdBQUdmLElBQUksSUFBSUgsUUFBUSxDQUFDRyxJQUFJLENBQUM7RUFDM0MsSUFBSSxDQUFDZSxZQUFZLEVBQUU7SUFDakI7RUFDRjtFQUVBLEtBQUssTUFBTWQsT0FBTyxJQUFJYyxZQUFZLEVBQUU7SUFDbEMsSUFBSTtNQUNGZCxPQUFPLENBQUNhLElBQUksQ0FBQztJQUNmLENBQUMsQ0FBQyxPQUFPSixDQUFDLEVBQUU7TUFDVmpCLFVBQVUsQ0FBQ2tCLFdBQVcsSUFDcEJoQixNQUFNLENBQUNBLE1BQU0sQ0FBQ2lCLEtBQUssQ0FDaEIsMERBQXlEWixJQUFLLFdBQVVKLFVBQVUsQ0FBQ29CLGVBQWUsQ0FBQ2YsT0FBTyxDQUFFLFVBQVMsRUFDdEhTLENBQ0YsQ0FBQztJQUNMO0VBQ0Y7QUFDRjtBQUVBbkIsa0JBQWtCLEdBQUdRLFVBQVU7QUFDL0JSLHVCQUF1QixHQUFHaUIsZUFBZTtBQUN6Q2pCLG9DQUFvQyxHQUFHWSw0QkFBNEI7QUFDbkVaLHVCQUF1QixHQUFHc0IsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2luc3RydW1lbnQvaGFuZGxlcnMuanM/MWNkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uL2xvZ2dlci5qcycpO1xuY29uc3Qgc3RhY2t0cmFjZSA9IHJlcXVpcmUoJy4uL3N0YWNrdHJhY2UuanMnKTtcblxuLy8gV2Uga2VlcCB0aGUgaGFuZGxlcnMgZ2xvYmFsbHlcbmNvbnN0IGhhbmRsZXJzID0ge307XG5jb25zdCBpbnN0cnVtZW50ZWQgPSB7fTtcblxuLyoqIEFkZCBhIGhhbmRsZXIgZnVuY3Rpb24uICovXG5mdW5jdGlvbiBhZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpIHtcbiAgaGFuZGxlcnNbdHlwZV0gPSBoYW5kbGVyc1t0eXBlXSB8fCBbXTtcbiAgKGhhbmRsZXJzW3R5cGVdICkucHVzaChoYW5kbGVyKTtcbn1cblxuLyoqXG4gKiBSZXNldCBhbGwgaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXJzLlxuICogVGhpcyBjYW4gYmUgdXNlZCBieSB0ZXN0cyB0byBlbnN1cmUgd2UgaGF2ZSBhIGNsZWFuIHNsYXRlIG9mIGluc3RydW1lbnRhdGlvbiBoYW5kbGVycy5cbiAqL1xuZnVuY3Rpb24gcmVzZXRJbnN0cnVtZW50YXRpb25IYW5kbGVycygpIHtcbiAgT2JqZWN0LmtleXMoaGFuZGxlcnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBoYW5kbGVyc1trZXkgXSA9IHVuZGVmaW5lZDtcbiAgfSk7XG59XG5cbi8qKiBNYXliZSBydW4gYW4gaW5zdHJ1bWVudGF0aW9uIGZ1bmN0aW9uLCB1bmxlc3MgaXQgd2FzIGFscmVhZHkgY2FsbGVkLiAqL1xuZnVuY3Rpb24gbWF5YmVJbnN0cnVtZW50KHR5cGUsIGluc3RydW1lbnRGbikge1xuICBpZiAoIWluc3RydW1lbnRlZFt0eXBlXSkge1xuICAgIGluc3RydW1lbnRlZFt0eXBlXSA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIGluc3RydW1lbnRGbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZ2dlci5lcnJvcihgRXJyb3Igd2hpbGUgaW5zdHJ1bWVudGluZyAke3R5cGV9YCwgZSk7XG4gICAgfVxuICB9XG59XG5cbi8qKiBUcmlnZ2VyIGhhbmRsZXJzIGZvciBhIGdpdmVuIGluc3RydW1lbnRhdGlvbiB0eXBlLiAqL1xuZnVuY3Rpb24gdHJpZ2dlckhhbmRsZXJzKHR5cGUsIGRhdGEpIHtcbiAgY29uc3QgdHlwZUhhbmRsZXJzID0gdHlwZSAmJiBoYW5kbGVyc1t0eXBlXTtcbiAgaWYgKCF0eXBlSGFuZGxlcnMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmb3IgKGNvbnN0IGhhbmRsZXIgb2YgdHlwZUhhbmRsZXJzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGhhbmRsZXIoZGF0YSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgICBsb2dnZXIubG9nZ2VyLmVycm9yKFxuICAgICAgICAgIGBFcnJvciB3aGlsZSB0cmlnZ2VyaW5nIGluc3RydW1lbnRhdGlvbiBoYW5kbGVyLlxcblR5cGU6ICR7dHlwZX1cXG5OYW1lOiAke3N0YWNrdHJhY2UuZ2V0RnVuY3Rpb25OYW1lKGhhbmRsZXIpfVxcbkVycm9yOmAsXG4gICAgICAgICAgZSxcbiAgICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5hZGRIYW5kbGVyID0gYWRkSGFuZGxlcjtcbmV4cG9ydHMubWF5YmVJbnN0cnVtZW50ID0gbWF5YmVJbnN0cnVtZW50O1xuZXhwb3J0cy5yZXNldEluc3RydW1lbnRhdGlvbkhhbmRsZXJzID0gcmVzZXRJbnN0cnVtZW50YXRpb25IYW5kbGVycztcbmV4cG9ydHMudHJpZ2dlckhhbmRsZXJzID0gdHJpZ2dlckhhbmRsZXJzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFuZGxlcnMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWJ1Z0J1aWxkIiwicmVxdWlyZSIsImxvZ2dlciIsInN0YWNrdHJhY2UiLCJoYW5kbGVycyIsImluc3RydW1lbnRlZCIsImFkZEhhbmRsZXIiLCJ0eXBlIiwiaGFuZGxlciIsInB1c2giLCJyZXNldEluc3RydW1lbnRhdGlvbkhhbmRsZXJzIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJ1bmRlZmluZWQiLCJtYXliZUluc3RydW1lbnQiLCJpbnN0cnVtZW50Rm4iLCJlIiwiREVCVUdfQlVJTEQiLCJlcnJvciIsInRyaWdnZXJIYW5kbGVycyIsImRhdGEiLCJ0eXBlSGFuZGxlcnMiLCJnZXRGdW5jdGlvbk5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/is.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isError(wat) {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n    case '[object WebAssembly.Exception]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat, className) {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isErrorEvent(wat) {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMError(wat) {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMException(wat) {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isString(wat) {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isParameterizedString(wat) {\n  return typeof wat === 'object' && wat !== null && '__sentry_template_string__' in wat && '__sentry_template_values__' in wat;\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPrimitive(wat) {\n  return wat === null || isParameterizedString(wat) || typeof wat !== 'object' && typeof wat !== 'function';\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPlainObject(wat) {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isEvent(wat) {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isElement(wat) {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isRegExp(wat) {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nfunction isThenable(wat) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isSyntheticEvent(wat) {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nfunction isInstanceOf(wat, base) {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isVueViewModel(wat) {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && (wat.__isVue || wat._isVue));\n}\nexports.isDOMError = isDOMError;\nexports.isDOMException = isDOMException;\nexports.isElement = isElement;\nexports.isError = isError;\nexports.isErrorEvent = isErrorEvent;\nexports.isEvent = isEvent;\nexports.isInstanceOf = isInstanceOf;\nexports.isParameterizedString = isParameterizedString;\nexports.isPlainObject = isPlainObject;\nexports.isPrimitive = isPrimitive;\nexports.isRegExp = isRegExp;\nexports.isString = isString;\nexports.isSyntheticEvent = isSyntheticEvent;\nexports.isThenable = isThenable;\nexports.isVueViewModel = isVueViewModel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/isBrowser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/isBrowser.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst node = __webpack_require__(/*! ./node.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * Returns true if we are in the browser.\n */\nfunction isBrowser() {\n  // eslint-disable-next-line no-restricted-globals\n  return  false && (0);\n}\n\n// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them\nfunction isElectronNodeRenderer() {\n  const process = worldwide.GLOBAL_OBJ.process;\n  return !!process && process.type === 'renderer';\n}\nexports.isBrowser = isBrowser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaXNCcm93c2VyLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLHlGQUFXLENBQUM7QUFDakMsTUFBTUMsU0FBUyxHQUFHRCxtQkFBTyxDQUFDLG1HQUFnQixDQUFDOztBQUUzQztBQUNBO0FBQ0E7QUFDQSxTQUFTRSxTQUFTQSxDQUFBLEVBQUc7RUFDbkI7RUFDQSxPQUFPLFdBQWtDLENBQTZDLENBQUM7QUFDekY7O0FBRUE7QUFDQSxTQUFTRSxzQkFBc0JBLENBQUEsRUFBRztFQUNoQyxNQUFNQyxPQUFPLEdBQUlKLFNBQVMsQ0FBQ0ssVUFBVSxDQUFHRCxPQUFPO0VBQy9DLE9BQU8sQ0FBQyxDQUFDQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0UsSUFBSSxLQUFLLFVBQVU7QUFDakQ7QUFFQVYsaUJBQWlCLEdBQUdLLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9pc0Jyb3dzZXIuanM/Y2UwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBub2RlID0gcmVxdWlyZSgnLi9ub2RlLmpzJyk7XG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3dvcmxkd2lkZS5qcycpO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB3ZSBhcmUgaW4gdGhlIGJyb3dzZXIuXG4gKi9cbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgKCFub2RlLmlzTm9kZUVudigpIHx8IGlzRWxlY3Ryb25Ob2RlUmVuZGVyZXIoKSk7XG59XG5cbi8vIEVsZWN0cm9uIHJlbmRlcmVycyB3aXRoIG5vZGVJbnRlZ3JhdGlvbiBlbmFibGVkIGFyZSBkZXRlY3RlZCBhcyBOb2RlLmpzIHNvIHdlIHNwZWNpZmljYWxseSB0ZXN0IGZvciB0aGVtXG5mdW5jdGlvbiBpc0VsZWN0cm9uTm9kZVJlbmRlcmVyKCkge1xuICBjb25zdCBwcm9jZXNzID0gKHdvcmxkd2lkZS5HTE9CQUxfT0JKICkucHJvY2VzcztcbiAgcmV0dXJuICEhcHJvY2VzcyAmJiBwcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcic7XG59XG5cbmV4cG9ydHMuaXNCcm93c2VyID0gaXNCcm93c2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNCcm93c2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibm9kZSIsInJlcXVpcmUiLCJ3b3JsZHdpZGUiLCJpc0Jyb3dzZXIiLCJpc05vZGVFbnYiLCJpc0VsZWN0cm9uTm9kZVJlbmRlcmVyIiwicHJvY2VzcyIsIkdMT0JBTF9PQkoiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/isBrowser.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\nconst CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'];\n\n/** This may be mutated by the console instrumentation. */\nconst originalConsoleMethods = {};\n\n/** JSDoc */\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in worldwide.GLOBAL_OBJ)) {\n    return callback();\n  }\n  const console = worldwide.GLOBAL_OBJ.console;\n  const wrappedFuncs = {};\n  const wrappedLevels = Object.keys(originalConsoleMethods);\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level];\n    wrappedFuncs[level] = console[level];\n    console[level] = originalConsoleMethod;\n  });\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level];\n    });\n  }\n}\nfunction makeLogger() {\n  let enabled = false;\n  const logger = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled\n  };\n  if (debugBuild.DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = (...args) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            worldwide.GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n  return logger;\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.\n */\nconst logger = worldwide.getGlobalSingleton('logger', makeLogger);\nexports.CONSOLE_LEVELS = CONSOLE_LEVELS;\nexports.consoleSandbox = consoleSandbox;\nexports.logger = logger;\nexports.originalConsoleMethods = originalConsoleMethods;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHVHQUFrQixDQUFDO0FBQzlDLE1BQU1DLFNBQVMsR0FBR0QsbUJBQU8sQ0FBQyxtR0FBZ0IsQ0FBQzs7QUFFM0M7QUFDQSxNQUFNRSxNQUFNLEdBQUcsZ0JBQWdCO0FBRS9CLE1BQU1DLGNBQWMsR0FBRyxDQUNyQixPQUFPLEVBQ1AsTUFBTSxFQUNOLE1BQU0sRUFDTixPQUFPLEVBQ1AsS0FBSyxFQUNMLFFBQVEsRUFDUixPQUFPLENBQ1I7O0FBRUQ7QUFDQSxNQUFNQyxzQkFBc0IsR0FFekIsQ0FBQyxDQUFDOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGNBQWNBLENBQUNDLFFBQVEsRUFBRTtFQUNoQyxJQUFJLEVBQUUsU0FBUyxJQUFJTCxTQUFTLENBQUNNLFVBQVUsQ0FBQyxFQUFFO0lBQ3hDLE9BQU9ELFFBQVEsQ0FBQyxDQUFDO0VBQ25CO0VBRUEsTUFBTUUsT0FBTyxHQUFHUCxTQUFTLENBQUNNLFVBQVUsQ0FBQ0MsT0FBTztFQUM1QyxNQUFNQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0VBRXZCLE1BQU1DLGFBQWEsR0FBR2YsTUFBTSxDQUFDZ0IsSUFBSSxDQUFDUCxzQkFBc0IsQ0FBQzs7RUFFekQ7RUFDQU0sYUFBYSxDQUFDRSxPQUFPLENBQUNDLEtBQUssSUFBSTtJQUM3QixNQUFNQyxxQkFBcUIsR0FBR1Ysc0JBQXNCLENBQUNTLEtBQUssQ0FBQztJQUMzREosWUFBWSxDQUFDSSxLQUFLLENBQUMsR0FBR0wsT0FBTyxDQUFDSyxLQUFLLENBQUM7SUFDcENMLE9BQU8sQ0FBQ0ssS0FBSyxDQUFDLEdBQUdDLHFCQUFxQjtFQUN4QyxDQUFDLENBQUM7RUFFRixJQUFJO0lBQ0YsT0FBT1IsUUFBUSxDQUFDLENBQUM7RUFDbkIsQ0FBQyxTQUFTO0lBQ1I7SUFDQUksYUFBYSxDQUFDRSxPQUFPLENBQUNDLEtBQUssSUFBSTtNQUM3QkwsT0FBTyxDQUFDSyxLQUFLLENBQUMsR0FBR0osWUFBWSxDQUFDSSxLQUFLLENBQUM7SUFDdEMsQ0FBQyxDQUFDO0VBQ0o7QUFDRjtBQUVBLFNBQVNFLFVBQVVBLENBQUEsRUFBRztFQUNwQixJQUFJQyxPQUFPLEdBQUcsS0FBSztFQUNuQixNQUFNQyxNQUFNLEdBQUc7SUFDYkMsTUFBTSxFQUFFQSxDQUFBLEtBQU07TUFDWkYsT0FBTyxHQUFHLElBQUk7SUFDaEIsQ0FBQztJQUNERyxPQUFPLEVBQUVBLENBQUEsS0FBTTtNQUNiSCxPQUFPLEdBQUcsS0FBSztJQUNqQixDQUFDO0lBQ0RJLFNBQVMsRUFBRUEsQ0FBQSxLQUFNSjtFQUNuQixDQUFDO0VBRUQsSUFBSWpCLFVBQVUsQ0FBQ3NCLFdBQVcsRUFBRTtJQUMxQmxCLGNBQWMsQ0FBQ1MsT0FBTyxDQUFDVSxJQUFJLElBQUk7TUFDN0JMLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHQyxJQUFJLEtBQUs7UUFDMUIsSUFBSVAsT0FBTyxFQUFFO1VBQ1hYLGNBQWMsQ0FBQyxNQUFNO1lBQ25CSixTQUFTLENBQUNNLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDYyxJQUFJLENBQUMsQ0FBRSxHQUFFcEIsTUFBTyxJQUFHb0IsSUFBSyxJQUFHLEVBQUUsR0FBR0MsSUFBSSxDQUFDO1VBQ3BFLENBQUMsQ0FBQztRQUNKO01BQ0YsQ0FBQztJQUNILENBQUMsQ0FBQztFQUNKLENBQUMsTUFBTTtJQUNMcEIsY0FBYyxDQUFDUyxPQUFPLENBQUNVLElBQUksSUFBSTtNQUM3QkwsTUFBTSxDQUFDSyxJQUFJLENBQUMsR0FBRyxNQUFNRSxTQUFTO0lBQ2hDLENBQUMsQ0FBQztFQUNKO0VBRUEsT0FBT1AsTUFBTTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsTUFBTSxHQUFHaEIsU0FBUyxDQUFDd0Isa0JBQWtCLENBQUMsUUFBUSxFQUFFVixVQUFVLENBQUM7QUFFakVsQixzQkFBc0IsR0FBR00sY0FBYztBQUN2Q04sc0JBQXNCLEdBQUdRLGNBQWM7QUFDdkNSLGNBQWMsR0FBR29CLE1BQU07QUFDdkJwQiw4QkFBOEIsR0FBR08sc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbG9nZ2VyLmpzPzI4NDgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4vd29ybGR3aWRlLmpzJyk7XG5cbi8qKiBQcmVmaXggZm9yIGxvZ2dpbmcgc3RyaW5ncyAqL1xuY29uc3QgUFJFRklYID0gJ1NlbnRyeSBMb2dnZXIgJztcblxuY29uc3QgQ09OU09MRV9MRVZFTFMgPSBbXG4gICdkZWJ1ZycsXG4gICdpbmZvJyxcbiAgJ3dhcm4nLFxuICAnZXJyb3InLFxuICAnbG9nJyxcbiAgJ2Fzc2VydCcsXG4gICd0cmFjZScsXG5dIDtcblxuLyoqIFRoaXMgbWF5IGJlIG11dGF0ZWQgYnkgdGhlIGNvbnNvbGUgaW5zdHJ1bWVudGF0aW9uLiAqL1xuY29uc3Qgb3JpZ2luYWxDb25zb2xlTWV0aG9kc1xuXG4gPSB7fTtcblxuLyoqIEpTRG9jICovXG5cbi8qKlxuICogVGVtcG9yYXJpbHkgZGlzYWJsZSBzZW50cnkgY29uc29sZSBpbnN0cnVtZW50YXRpb25zLlxuICpcbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gcnVuIGFnYWluc3QgdGhlIG9yaWdpbmFsIGBjb25zb2xlYCBtZXNzYWdlc1xuICogQHJldHVybnMgVGhlIHJlc3VsdHMgb2YgdGhlIGNhbGxiYWNrXG4gKi9cbmZ1bmN0aW9uIGNvbnNvbGVTYW5kYm94KGNhbGxiYWNrKSB7XG4gIGlmICghKCdjb25zb2xlJyBpbiB3b3JsZHdpZGUuR0xPQkFMX09CSikpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIGNvbnN0IGNvbnNvbGUgPSB3b3JsZHdpZGUuR0xPQkFMX09CSi5jb25zb2xlIDtcbiAgY29uc3Qgd3JhcHBlZEZ1bmNzID0ge307XG5cbiAgY29uc3Qgd3JhcHBlZExldmVscyA9IE9iamVjdC5rZXlzKG9yaWdpbmFsQ29uc29sZU1ldGhvZHMpIDtcblxuICAvLyBSZXN0b3JlIGFsbCB3cmFwcGVkIGNvbnNvbGUgbWV0aG9kc1xuICB3cmFwcGVkTGV2ZWxzLmZvckVhY2gobGV2ZWwgPT4ge1xuICAgIGNvbnN0IG9yaWdpbmFsQ29uc29sZU1ldGhvZCA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZHNbbGV2ZWxdIDtcbiAgICB3cmFwcGVkRnVuY3NbbGV2ZWxdID0gY29uc29sZVtsZXZlbF0gO1xuICAgIGNvbnNvbGVbbGV2ZWxdID0gb3JpZ2luYWxDb25zb2xlTWV0aG9kO1xuICB9KTtcblxuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjaygpO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIFJldmVydCByZXN0b3JhdGlvbiB0byB3cmFwcGVkIHN0YXRlXG4gICAgd3JhcHBlZExldmVscy5mb3JFYWNoKGxldmVsID0+IHtcbiAgICAgIGNvbnNvbGVbbGV2ZWxdID0gd3JhcHBlZEZ1bmNzW2xldmVsXSA7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUxvZ2dlcigpIHtcbiAgbGV0IGVuYWJsZWQgPSBmYWxzZTtcbiAgY29uc3QgbG9nZ2VyID0ge1xuICAgIGVuYWJsZTogKCkgPT4ge1xuICAgICAgZW5hYmxlZCA9IHRydWU7XG4gICAgfSxcbiAgICBkaXNhYmxlOiAoKSA9PiB7XG4gICAgICBlbmFibGVkID0gZmFsc2U7XG4gICAgfSxcbiAgICBpc0VuYWJsZWQ6ICgpID0+IGVuYWJsZWQsXG4gIH07XG5cbiAgaWYgKGRlYnVnQnVpbGQuREVCVUdfQlVJTEQpIHtcbiAgICBDT05TT0xFX0xFVkVMUy5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgbG9nZ2VyW25hbWVdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICBjb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICAgICAgICB3b3JsZHdpZGUuR0xPQkFMX09CSi5jb25zb2xlW25hbWVdKGAke1BSRUZJWH1bJHtuYW1lfV06YCwgLi4uYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgQ09OU09MRV9MRVZFTFMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIGxvZ2dlcltuYW1lXSA9ICgpID0+IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBsb2dnZXIgO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSBsb2dnZXIgc2luZ2xldG9uIHdoaWNoIGVpdGhlciBsb2dzIHRoaW5ncyBvciBuby1vcHMgaWYgbG9nZ2luZyBpcyBub3QgZW5hYmxlZC5cbiAqIFRoZSBsb2dnZXIgaXMgYSBzaW5nbGV0b24gb24gdGhlIGNhcnJpZXIsIHRvIGVuc3VyZSB0aGF0IGEgY29uc2lzdGVudCBsb2dnZXIgaXMgdXNlZCB0aHJvdWdob3V0IHRoZSBTREsuXG4gKi9cbmNvbnN0IGxvZ2dlciA9IHdvcmxkd2lkZS5nZXRHbG9iYWxTaW5nbGV0b24oJ2xvZ2dlcicsIG1ha2VMb2dnZXIpO1xuXG5leHBvcnRzLkNPTlNPTEVfTEVWRUxTID0gQ09OU09MRV9MRVZFTFM7XG5leHBvcnRzLmNvbnNvbGVTYW5kYm94ID0gY29uc29sZVNhbmRib3g7XG5leHBvcnRzLmxvZ2dlciA9IGxvZ2dlcjtcbmV4cG9ydHMub3JpZ2luYWxDb25zb2xlTWV0aG9kcyA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWJ1Z0J1aWxkIiwicmVxdWlyZSIsIndvcmxkd2lkZSIsIlBSRUZJWCIsIkNPTlNPTEVfTEVWRUxTIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kcyIsImNvbnNvbGVTYW5kYm94IiwiY2FsbGJhY2siLCJHTE9CQUxfT0JKIiwiY29uc29sZSIsIndyYXBwZWRGdW5jcyIsIndyYXBwZWRMZXZlbHMiLCJrZXlzIiwiZm9yRWFjaCIsImxldmVsIiwib3JpZ2luYWxDb25zb2xlTWV0aG9kIiwibWFrZUxvZ2dlciIsImVuYWJsZWQiLCJsb2dnZXIiLCJlbmFibGUiLCJkaXNhYmxlIiwiaXNFbmFibGVkIiwiREVCVUdfQlVJTEQiLCJuYW1lIiwiYXJncyIsInVuZGVmaW5lZCIsImdldEdsb2JhbFNpbmdsZXRvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/lru.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/lru.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** A simple Least Recently Used map */\nclass LRUMap {\n  constructor(_maxSize) {\n    this._maxSize = _maxSize;\n    this._cache = new Map();\n  }\n\n  /** Get the current size of the cache */\n  get size() {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  get(key) {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  set(key, value) {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n  remove(key) {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n  clear() {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n  keys() {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n  values() {\n    const values = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\nexports.LRUMap = LRUMap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbHJ1LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0EsTUFBTUMsTUFBTSxDQUFDO0VBRVZDLFdBQVdBLENBQUdDLFFBQVEsRUFBRTtJQUFDLElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxRQUFRO0lBQ2hELElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0VBQ3pCOztFQUVBO0VBQ0MsSUFBSUMsSUFBSUEsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxJQUFJLENBQUNGLE1BQU0sQ0FBQ0UsSUFBSTtFQUN6Qjs7RUFFQTtFQUNDQyxHQUFHQSxDQUFDQyxHQUFHLEVBQUU7SUFDUixNQUFNUixLQUFLLEdBQUcsSUFBSSxDQUFDSSxNQUFNLENBQUNHLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDO0lBQ2xDLElBQUlSLEtBQUssS0FBS1MsU0FBUyxFQUFFO01BQ3ZCLE9BQU9BLFNBQVM7SUFDbEI7SUFDQTtJQUNBLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxNQUFNLENBQUNGLEdBQUcsQ0FBQztJQUN2QixJQUFJLENBQUNKLE1BQU0sQ0FBQ08sR0FBRyxDQUFDSCxHQUFHLEVBQUVSLEtBQUssQ0FBQztJQUMzQixPQUFPQSxLQUFLO0VBQ2Q7O0VBRUE7RUFDQ1csR0FBR0EsQ0FBQ0gsR0FBRyxFQUFFUixLQUFLLEVBQUU7SUFDZixJQUFJLElBQUksQ0FBQ0ksTUFBTSxDQUFDRSxJQUFJLElBQUksSUFBSSxDQUFDSCxRQUFRLEVBQUU7TUFDckM7TUFDQSxJQUFJLENBQUNDLE1BQU0sQ0FBQ00sTUFBTSxDQUFDLElBQUksQ0FBQ04sTUFBTSxDQUFDUSxJQUFJLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDYixLQUFLLENBQUM7SUFDckQ7SUFDQSxJQUFJLENBQUNJLE1BQU0sQ0FBQ08sR0FBRyxDQUFDSCxHQUFHLEVBQUVSLEtBQUssQ0FBQztFQUM3Qjs7RUFFQTtFQUNDYyxNQUFNQSxDQUFDTixHQUFHLEVBQUU7SUFDWCxNQUFNUixLQUFLLEdBQUcsSUFBSSxDQUFDSSxNQUFNLENBQUNHLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDO0lBQ2xDLElBQUlSLEtBQUssRUFBRTtNQUNULElBQUksQ0FBQ0ksTUFBTSxDQUFDTSxNQUFNLENBQUNGLEdBQUcsQ0FBQztJQUN6QjtJQUNBLE9BQU9SLEtBQUs7RUFDZDs7RUFFQTtFQUNDZSxLQUFLQSxDQUFBLEVBQUc7SUFDUCxJQUFJLENBQUNYLE1BQU0sQ0FBQ1csS0FBSyxDQUFDLENBQUM7RUFDckI7O0VBRUE7RUFDQ0gsSUFBSUEsQ0FBQSxFQUFHO0lBQ04sT0FBT0ksS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDYixNQUFNLENBQUNRLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDdkM7O0VBRUE7RUFDQ00sTUFBTUEsQ0FBQSxFQUFHO0lBQ1IsTUFBTUEsTUFBTSxHQUFHLEVBQUU7SUFDakIsSUFBSSxDQUFDZCxNQUFNLENBQUNlLE9BQU8sQ0FBQ25CLEtBQUssSUFBSWtCLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDcEIsS0FBSyxDQUFDLENBQUM7SUFDaEQsT0FBT2tCLE1BQU07RUFDZjtBQUNGO0FBRUFuQixjQUFjLEdBQUdFLE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9scnUuanM/ODM2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKiogQSBzaW1wbGUgTGVhc3QgUmVjZW50bHkgVXNlZCBtYXAgKi9cbmNsYXNzIExSVU1hcCB7XG5cbiAgIGNvbnN0cnVjdG9yKCAgX21heFNpemUpIHt0aGlzLl9tYXhTaXplID0gX21heFNpemU7XG4gICAgdGhpcy5fY2FjaGUgPSBuZXcgTWFwKCk7XG4gIH1cblxuICAvKiogR2V0IHRoZSBjdXJyZW50IHNpemUgb2YgdGhlIGNhY2hlICovXG4gICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGUuc2l6ZTtcbiAgfVxuXG4gIC8qKiBHZXQgYW4gZW50cnkgb3IgdW5kZWZpbmVkIGlmIGl0IHdhcyBub3QgaW4gdGhlIGNhY2hlLiBSZS1pbnNlcnRzIHRvIHVwZGF0ZSB0aGUgcmVjZW50bHkgdXNlZCBvcmRlciAqL1xuICAgZ2V0KGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fY2FjaGUuZ2V0KGtleSk7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBhbmQgcmUtaW5zZXJ0IHRvIHVwZGF0ZSB0aGUgb3JkZXJcbiAgICB0aGlzLl9jYWNoZS5kZWxldGUoa2V5KTtcbiAgICB0aGlzLl9jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqIEluc2VydCBhbiBlbnRyeSBhbmQgZXZpY3QgYW4gb2xkZXIgZW50cnkgaWYgd2UndmUgcmVhY2hlZCBtYXhTaXplICovXG4gICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLl9jYWNoZS5zaXplID49IHRoaXMuX21heFNpemUpIHtcbiAgICAgIC8vIGtleXMoKSByZXR1cm5zIGFuIGl0ZXJhdG9yIGluIGluc2VydGlvbiBvcmRlciBzbyBrZXlzKCkubmV4dCgpIGdpdmVzIHVzIHRoZSBvbGRlc3Qga2V5XG4gICAgICB0aGlzLl9jYWNoZS5kZWxldGUodGhpcy5fY2FjaGUua2V5cygpLm5leHQoKS52YWx1ZSk7XG4gICAgfVxuICAgIHRoaXMuX2NhY2hlLnNldChrZXksIHZhbHVlKTtcbiAgfVxuXG4gIC8qKiBSZW1vdmUgYW4gZW50cnkgYW5kIHJldHVybiB0aGUgZW50cnkgaWYgaXQgd2FzIGluIHRoZSBjYWNoZSAqL1xuICAgcmVtb3ZlKGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fY2FjaGUuZ2V0KGtleSk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLl9jYWNoZS5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqIENsZWFyIGFsbCBlbnRyaWVzICovXG4gICBjbGVhcigpIHtcbiAgICB0aGlzLl9jYWNoZS5jbGVhcigpO1xuICB9XG5cbiAgLyoqIEdldCBhbGwgdGhlIGtleXMgKi9cbiAgIGtleXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5fY2FjaGUua2V5cygpKTtcbiAgfVxuXG4gIC8qKiBHZXQgYWxsIHRoZSB2YWx1ZXMgKi9cbiAgIHZhbHVlcygpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICB0aGlzLl9jYWNoZS5mb3JFYWNoKHZhbHVlID0+IHZhbHVlcy5wdXNoKHZhbHVlKSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxufVxuXG5leHBvcnRzLkxSVU1hcCA9IExSVU1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxydS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxSVU1hcCIsImNvbnN0cnVjdG9yIiwiX21heFNpemUiLCJfY2FjaGUiLCJNYXAiLCJzaXplIiwiZ2V0Iiwia2V5IiwidW5kZWZpbmVkIiwiZGVsZXRlIiwic2V0Iiwia2V5cyIsIm5leHQiLCJyZW1vdmUiLCJjbGVhciIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsImZvckVhY2giLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/lru.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/memo.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/memo.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Helper to decycle json objects\n *\n * @deprecated This function is deprecated and will be removed in the next major version.\n */\n// TODO(v9): Move this function into normalize() directly\nfunction memoBuilder() {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj) {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n  function unmemoize(obj) {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\nexports.memoBuilder = memoBuilder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbWVtby5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDOztBQUU3RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFdBQVdBLENBQUEsRUFBRztFQUNyQixNQUFNQyxVQUFVLEdBQUcsT0FBT0MsT0FBTyxLQUFLLFVBQVU7RUFDaEQsTUFBTUMsS0FBSyxHQUFHRixVQUFVLEdBQUcsSUFBSUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFO0VBQzdDLFNBQVNFLE9BQU9BLENBQUNDLEdBQUcsRUFBRTtJQUNwQixJQUFJSixVQUFVLEVBQUU7TUFDZCxJQUFJRSxLQUFLLENBQUNHLEdBQUcsQ0FBQ0QsR0FBRyxDQUFDLEVBQUU7UUFDbEIsT0FBTyxJQUFJO01BQ2I7TUFDQUYsS0FBSyxDQUFDSSxHQUFHLENBQUNGLEdBQUcsQ0FBQztNQUNkLE9BQU8sS0FBSztJQUNkO0lBQ0E7SUFDQSxLQUFLLElBQUlHLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0wsS0FBSyxDQUFDTSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO01BQ3JDLE1BQU1ULEtBQUssR0FBR0ksS0FBSyxDQUFDSyxDQUFDLENBQUM7TUFDdEIsSUFBSVQsS0FBSyxLQUFLTSxHQUFHLEVBQUU7UUFDakIsT0FBTyxJQUFJO01BQ2I7SUFDRjtJQUNBRixLQUFLLENBQUNPLElBQUksQ0FBQ0wsR0FBRyxDQUFDO0lBQ2YsT0FBTyxLQUFLO0VBQ2Q7RUFFQSxTQUFTTSxTQUFTQSxDQUFDTixHQUFHLEVBQUU7SUFDdEIsSUFBSUosVUFBVSxFQUFFO01BQ2RFLEtBQUssQ0FBQ1MsTUFBTSxDQUFDUCxHQUFHLENBQUM7SUFDbkIsQ0FBQyxNQUFNO01BQ0wsS0FBSyxJQUFJRyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdMLEtBQUssQ0FBQ00sTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJTCxLQUFLLENBQUNLLENBQUMsQ0FBQyxLQUFLSCxHQUFHLEVBQUU7VUFDcEJGLEtBQUssQ0FBQ1UsTUFBTSxDQUFDTCxDQUFDLEVBQUUsQ0FBQyxDQUFDO1VBQ2xCO1FBQ0Y7TUFDRjtJQUNGO0VBQ0Y7RUFDQSxPQUFPLENBQUNKLE9BQU8sRUFBRU8sU0FBUyxDQUFDO0FBQzdCO0FBRUFiLG1CQUFtQixHQUFHRSxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbWVtby5qcz9lY2FlIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuXG4vKipcbiAqIEhlbHBlciB0byBkZWN5Y2xlIGpzb24gb2JqZWN0c1xuICpcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gKi9cbi8vIFRPRE8odjkpOiBNb3ZlIHRoaXMgZnVuY3Rpb24gaW50byBub3JtYWxpemUoKSBkaXJlY3RseVxuZnVuY3Rpb24gbWVtb0J1aWxkZXIoKSB7XG4gIGNvbnN0IGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJztcbiAgY29uc3QgaW5uZXIgPSBoYXNXZWFrU2V0ID8gbmV3IFdlYWtTZXQoKSA6IFtdO1xuICBmdW5jdGlvbiBtZW1vaXplKG9iaikge1xuICAgIGlmIChoYXNXZWFrU2V0KSB7XG4gICAgICBpZiAoaW5uZXIuaGFzKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpbm5lci5hZGQob2JqKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItZm9yLW9mXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBpbm5lcltpXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb2JqKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpbm5lci5wdXNoKG9iaik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5tZW1vaXplKG9iaikge1xuICAgIGlmIChoYXNXZWFrU2V0KSB7XG4gICAgICBpbm5lci5kZWxldGUob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaW5uZXJbaV0gPT09IG9iaikge1xuICAgICAgICAgIGlubmVyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gW21lbW9pemUsIHVubWVtb2l6ZV07XG59XG5cbmV4cG9ydHMubWVtb0J1aWxkZXIgPSBtZW1vQnVpbGRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbW8uanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtZW1vQnVpbGRlciIsImhhc1dlYWtTZXQiLCJXZWFrU2V0IiwiaW5uZXIiLCJtZW1vaXplIiwib2JqIiwiaGFzIiwiYWRkIiwiaSIsImxlbmd0aCIsInB1c2giLCJ1bm1lbW9pemUiLCJkZWxldGUiLCJzcGxpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/memo.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nfunction uuid4() {\n  const gbl = worldwide.GLOBAL_OBJ;\n  const crypto = gbl.crypto || gbl.msCrypto;\n  let getRandomByte = () => Math.random() * 16;\n  try {\n    if (crypto && crypto.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto && crypto.getRandomValues) {\n      getRandomByte = () => {\n        // crypto.getRandomValues might return undefined instead of the typed array\n        // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n        // However, `typedArray` is still filled in-place.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n        const typedArray = new Uint8Array(1);\n        crypto.getRandomValues(typedArray);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return typedArray[0];\n      };\n    }\n  } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return ([1e7] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n  // eslint-disable-next-line no-bitwise\n  (c ^ (getRandomByte() & 15) >> c / 4).toString(16));\n}\nfunction getFirstException(event) {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nfunction getEventDescription(event) {\n  const {\n    message,\n    event_id: eventId\n  } = event;\n  if (message) {\n    return message;\n  }\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nfunction addExceptionTypeValue(event, value, type) {\n  const exception = event.exception = event.exception || {};\n  const values = exception.values = exception.values || [];\n  const firstException = values[0] = values[0] || {};\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nfunction addExceptionMechanism(event, newMechanism) {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n  const defaultMechanism = {\n    type: 'generic',\n    handled: true\n  };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = {\n    ...defaultMechanism,\n    ...currentMechanism,\n    ...newMechanism\n  };\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = {\n      ...(currentMechanism && currentMechanism.data),\n      ...newMechanism.data\n    };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\n\nfunction _parseInt(input) {\n  return parseInt(input || '', 10);\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nfunction parseSemver(input) {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = _parseInt(match[1]);\n  const minor = _parseInt(match[2]);\n  const patch = _parseInt(match[3]);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4]\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nfunction addContextToFrame(lines, frame, linesOfContext = 5) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n  frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(line => string.snipLine(line, 0));\n\n  // We guard here to ensure this is not larger than the existing number of lines\n  const lineIndex = Math.min(maxLines - 1, sourceLine);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  frame.context_line = string.snipLine(lines[lineIndex], frame.colno || 0);\n  frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(line => string.snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nfunction checkOrSetAlreadyCaught(exception) {\n  if (isAlreadyCaptured(exception)) {\n    return true;\n  }\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    object.addNonEnumerableProperty(exception, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n  return false;\n}\nfunction isAlreadyCaptured(exception) {\n  try {\n    return exception.__sentry_captured__;\n  } catch (e) {} // eslint-disable-line no-empty\n}\n\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n *\n * @deprecated This function has been deprecated and will not be replaced.\n */\nfunction arrayify(maybeArray) {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\nexports.addContextToFrame = addContextToFrame;\nexports.addExceptionMechanism = addExceptionMechanism;\nexports.addExceptionTypeValue = addExceptionTypeValue;\nexports.arrayify = arrayify;\nexports.checkOrSetAlreadyCaught = checkOrSetAlreadyCaught;\nexports.getEventDescription = getEventDescription;\nexports.parseSemver = parseSemver;\nexports.uuid4 = uuid4;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\n\n/**\n * Does this filename look like it's part of the app code?\n */\nfunction filenameIsInApp(filename, isNative = false) {\n  const isInternal = isNative || filename &&\n  // It's not internal if it's an absolute linux path\n  !filename.startsWith('/') &&\n  // It's not internal if it's an absolute windows path\n  !filename.match(/^[A-Z]:/) &&\n  // It's not internal if the path is starting with a dot\n  !filename.startsWith('.') &&\n  // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n  !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\nfunction node(getModule) {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return line => {\n    const lineMatch = line.match(FULL_MATCH);\n    if (lineMatch) {\n      let object;\n      let method;\n      let functionName;\n      let typeName;\n      let methodName;\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n      if (functionName === undefined) {\n        methodName = methodName || stacktrace.UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n      let filename = lineMatch[2] && lineMatch[2].startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename && filename.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative)\n      };\n    }\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line\n      };\n    }\n    return undefined;\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nfunction nodeStackLineParser(getModule) {\n  return [90, node(getModule)];\n}\nfunction _parseIntOrUndefined(input) {\n  return parseInt(input || '', 10) || undefined;\n}\nexports.filenameIsInApp = filenameIsInApp;\nexports.node = node;\nexports.nodeStackLineParser = nodeStackLineParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/node.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst env = __webpack_require__(/*! ./env.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/env.js\");\n\n/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nfunction isNodeEnv() {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return !env.isBrowserBundle() && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n * @deprecated This function will be removed in the next major version.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction dynamicRequire(mod, request) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nfunction loadModule(moduleName) {\n  let mod;\n  try {\n    // eslint-disable-next-line deprecation/deprecation\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n  if (!mod) {\n    try {\n      // eslint-disable-next-line deprecation/deprecation\n      const {\n        cwd\n      } = dynamicRequire(module, 'process');\n      // eslint-disable-next-line deprecation/deprecation\n      mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`);\n    } catch (e) {\n      // no-empty\n    }\n  }\n  return mod;\n}\nexports.dynamicRequire = dynamicRequire;\nexports.isNodeEnv = isNodeEnv;\nexports.loadModule = loadModule;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvbm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxHQUFHLEdBQUdDLG1CQUFPLENBQUMsdUZBQVUsQ0FBQzs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFNBQVNBLENBQUEsRUFBRztFQUNuQjtFQUNBO0VBQ0EsT0FDRSxDQUFDRixHQUFHLENBQUNHLGVBQWUsQ0FBQyxDQUFDLElBQ3RCUCxNQUFNLENBQUNRLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUMsT0FBT0MsT0FBTyxLQUFLLFdBQVcsR0FBR0EsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLGtCQUFrQjtBQUV2Rzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGNBQWNBLENBQUNDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO0VBQ3BDO0VBQ0EsT0FBT0QsR0FBRyxDQUFDUixPQUFPLENBQUNTLE9BQU8sQ0FBQztBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFVBQVVBLENBQUNDLFVBQVUsRUFBRTtFQUM5QixJQUFJSCxHQUFHO0VBRVAsSUFBSTtJQUNGO0lBQ0FBLEdBQUcsR0FBR0QsY0FBYyxDQUFDSyxNQUFNLEVBQUVELFVBQVUsQ0FBQztFQUMxQyxDQUFDLENBQUMsT0FBT0UsQ0FBQyxFQUFFO0lBQ1Y7RUFBQTtFQUdGLElBQUksQ0FBQ0wsR0FBRyxFQUFFO0lBQ1IsSUFBSTtNQUNGO01BQ0EsTUFBTTtRQUFFTTtNQUFJLENBQUMsR0FBR1AsY0FBYyxDQUFDSyxNQUFNLEVBQUUsU0FBUyxDQUFDO01BQ2pEO01BQ0FKLEdBQUcsR0FBR0QsY0FBYyxDQUFDSyxNQUFNLEVBQUcsR0FBRUUsR0FBRyxDQUFDLENBQUUsaUJBQWdCSCxVQUFXLEVBQUMsQ0FBQztJQUNyRSxDQUFDLENBQUMsT0FBT0UsQ0FBQyxFQUFFO01BQ1Y7SUFBQTtFQUVKO0VBRUEsT0FBT0wsR0FBRztBQUNaO0FBRUFYLHNCQUFzQixHQUFHVSxjQUFjO0FBQ3ZDVixpQkFBaUIsR0FBR0ksU0FBUztBQUM3Qkosa0JBQWtCLEdBQUdhLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9ub2RlLmpzP2M3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZW52ID0gcmVxdWlyZSgnLi9lbnYuanMnKTtcblxuLyoqXG4gKiBOT1RFOiBJbiBvcmRlciB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMsIGlmIHlvdSBhZGQgYSBmdW5jdGlvbiB0byB0aGlzIG1vZHVsZSBhbmQgaXQgbmVlZHMgdG8gcHJpbnQgc29tZXRoaW5nLFxuICogeW91IG11c3QgZWl0aGVyIGEpIHVzZSBgY29uc29sZS5sb2dgIHJhdGhlciB0aGFuIHRoZSBsb2dnZXIsIG9yIGIpIHB1dCB5b3VyIGZ1bmN0aW9uIGVsc2V3aGVyZS5cbiAqL1xuXG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgd2UncmUgaW4gdGhlIE5vZGUuanMgb3IgQnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byBnaXZlbiBxdWVzdGlvblxuICovXG5mdW5jdGlvbiBpc05vZGVFbnYoKSB7XG4gIC8vIGV4cGxpY2l0bHkgY2hlY2sgZm9yIGJyb3dzZXIgYnVuZGxlcyBhcyB0aG9zZSBjYW4gYmUgb3B0aW1pemVkIHN0YXRpY2FsbHlcbiAgLy8gYnkgdGVyc2VyL3JvbGx1cC5cbiAgcmV0dXJuIChcbiAgICAhZW52LmlzQnJvd3NlckJ1bmRsZSgpICYmXG4gICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyA/IHByb2Nlc3MgOiAwKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nXG4gICk7XG59XG5cbi8qKlxuICogUmVxdWlyZXMgYSBtb2R1bGUgd2hpY2ggaXMgcHJvdGVjdGVkIGFnYWluc3QgYnVuZGxlciBtaW5pZmljYXRpb24uXG4gKlxuICogQHBhcmFtIHJlcXVlc3QgVGhlIG1vZHVsZSBwYXRoIHRvIHJlc29sdmVcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBkeW5hbWljUmVxdWlyZShtb2QsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICByZXR1cm4gbW9kLnJlcXVpcmUocmVxdWVzdCk7XG59XG5cbi8qKlxuICogSGVscGVyIGZvciBkeW5hbWljYWxseSBsb2FkaW5nIG1vZHVsZSB0aGF0IHNob3VsZCB3b3JrIHdpdGggbGlua2VkIGRlcGVuZGVuY2llcy5cbiAqIFRoZSBwcm9ibGVtIGlzIHRoYXQgd2UgX3Nob3VsZF8gYmUgdXNpbmcgYHJlcXVpcmUocmVxdWlyZS5yZXNvbHZlKG1vZHVsZU5hbWUsIHsgcGF0aHM6IFtjd2QoKV0gfSkpYFxuICogSG93ZXZlciBpdCdzIF9ub3QgcG9zc2libGVfIHRvIGRvIHRoYXQgd2l0aCBXZWJwYWNrLCBhcyBpdCBoYXMgdG8ga25vdyBhbGwgdGhlIGRlcGVuZGVuY2llcyBkdXJpbmdcbiAqIGJ1aWxkIHRpbWUuIGByZXF1aXJlLnJlc29sdmVgIGlzIGFsc28gbm90IGF2YWlsYWJsZSBpbiBhbnkgb3RoZXIgd2F5LCBzbyB3ZSBjYW5ub3QgY3JlYXRlLFxuICogYSBmYWtlIGhlbHBlciBsaWtlIHdlIGRvIHdpdGggYGR5bmFtaWNSZXF1aXJlYC5cbiAqXG4gKiBXZSBhbHdheXMgcHJlZmVyIHRvIHVzZSBsb2NhbCBwYWNrYWdlLCB0aHVzIHRoZSB2YWx1ZSBpcyBub3QgcmV0dXJuZWQgZWFybHkgZnJvbSBlYWNoIGB0cnkvY2F0Y2hgIGJsb2NrLlxuICogVGhhdCBpcyB0byBtaW1pYyB0aGUgYmVoYXZpb3Igb2YgYHJlcXVpcmUucmVzb2x2ZWAgZXhhY3RseS5cbiAqXG4gKiBAcGFyYW0gbW9kdWxlTmFtZSBtb2R1bGUgbmFtZSB0byByZXF1aXJlXG4gKiBAcmV0dXJucyBwb3NzaWJseSByZXF1aXJlZCBtb2R1bGVcbiAqL1xuZnVuY3Rpb24gbG9hZE1vZHVsZShtb2R1bGVOYW1lKSB7XG4gIGxldCBtb2Q7XG5cbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBtb2QgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsIG1vZHVsZU5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gbm8tZW1wdHlcbiAgfVxuXG4gIGlmICghbW9kKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgY29uc3QgeyBjd2QgfSA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ3Byb2Nlc3MnKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgbW9kID0gZHluYW1pY1JlcXVpcmUobW9kdWxlLCBgJHtjd2QoKX0vbm9kZV9tb2R1bGVzLyR7bW9kdWxlTmFtZX1gKSA7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gbm8tZW1wdHlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbW9kO1xufVxuXG5leHBvcnRzLmR5bmFtaWNSZXF1aXJlID0gZHluYW1pY1JlcXVpcmU7XG5leHBvcnRzLmlzTm9kZUVudiA9IGlzTm9kZUVudjtcbmV4cG9ydHMubG9hZE1vZHVsZSA9IGxvYWRNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW52IiwicmVxdWlyZSIsImlzTm9kZUVudiIsImlzQnJvd3NlckJ1bmRsZSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsInByb2Nlc3MiLCJkeW5hbWljUmVxdWlyZSIsIm1vZCIsInJlcXVlc3QiLCJsb2FkTW9kdWxlIiwibW9kdWxlTmFtZSIsIm1vZHVsZSIsImUiLCJjd2QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst memo = __webpack_require__(/*! ./memo.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/memo.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normalized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return {\n      ERROR: `**non-serializable** (${err})`\n    };\n  }\n}\n\n/** JSDoc */\nfunction normalizeToSize(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobject,\n// Default Node.js REPL depth\ndepth = 3,\n// 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize = 100 * 1024) {\n  const normalized = normalize(object, depth);\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n  return normalized;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(key, value, depth = +Infinity, maxProperties = +Infinity,\n// eslint-disable-next-line deprecation/deprecation\nmemo$1 = memo.memoBuilder()) {\n  const [memoize, unmemoize] = memo$1;\n\n  // Get the simple cases out of the way first\n  if (value == null ||\n  // this matches null and undefined -> eqeq not eqeqeq\n  ['boolean', 'string'].includes(typeof value) || typeof value === 'number' && Number.isFinite(value)) {\n    return value;\n  }\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if (value['__sentry_skip_normalization__']) {\n    return value;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth = typeof value['__sentry_override_normalization_depth__'] === 'number' ? value['__sentry_override_normalization_depth__'] : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value;\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo$1);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = Array.isArray(value) ? [] : {};\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = object.convertToPlainObject(value);\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo$1);\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(key,\n// this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && value._events) {\n      return '[Domain]';\n    }\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (false) {}\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n    if (is.isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (is.isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n    if (typeof value === 'number' && !Number.isFinite(value)) {\n      return `[${value}]`;\n    }\n    if (typeof value === 'function') {\n      return `[Function: ${stacktrace.getFunctionName(value)}]`;\n    }\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value) {\n  const prototype = Object.getPrototypeOf(value);\n  return prototype ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nfunction normalizeUrlToBase(url, basePath) {\n  const escapedBase = basePath\n  // Backslash to forward\n  .replace(/\\\\/g, '/')\n  // Escape RegExp special characters\n  .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return newUrl.replace(/\\\\/g, '/').replace(/webpack:\\/?/g, '') // Remove intermediate base path\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n  .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///');\n}\nexports.normalize = normalize;\nexports.normalizeToSize = normalizeToSize;\nexports.normalizeUrlToBase = normalizeUrlToBase;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/object.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst browser = __webpack_require__(/*! ./browser.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/browser.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nfunction fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n  const original = source[name];\n  const wrapped = replacementFactory(original);\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n  try {\n    source[name] = wrapped;\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nfunction addNonEnumerableProperty(obj, name, value) {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true\n    });\n  } catch (o_O) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nfunction markFunctionWrapped(wrapped, original) {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch (o_O) {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getOriginalFunction(func) {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n *\n * @deprecated This function is deprecated and will be removed in the next major version of the SDK.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction urlEncode(object) {\n  return Object.entries(object).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nfunction convertToPlainObject(value) {\n  if (is.isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value)\n    };\n  } else if (is.isEvent(value)) {\n    const newObj = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value)\n    };\n    if (typeof CustomEvent !== 'undefined' && is.isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target) {\n  try {\n    return is.isElement(target) ? browser.htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj) {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = obj[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception, maxLength = 40) {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n  const firstKey = keys[0];\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n  if (firstKey.length >= maxLength) {\n    return string.truncate(firstKey, maxLength);\n  }\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return string.truncate(serialized, maxLength);\n  }\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nfunction dropUndefinedKeys(inputValue) {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n  if (isPojo(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal;\n    }\n    const returnValue = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n    for (const key of Object.getOwnPropertyNames(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n    return returnValue;\n  }\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal;\n    }\n    const returnValue = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n    inputValue.forEach(item => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n    return returnValue;\n  }\n  return inputValue;\n}\nfunction isPojo(input) {\n  if (!is.isPlainObject(input)) {\n    return false;\n  }\n  try {\n    const name = Object.getPrototypeOf(input).constructor.name;\n    return !name || name === 'Object';\n  } catch (e2) {\n    return true;\n  }\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nfunction objectify(wat) {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case is.isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new wat.constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\nexports.addNonEnumerableProperty = addNonEnumerableProperty;\nexports.convertToPlainObject = convertToPlainObject;\nexports.dropUndefinedKeys = dropUndefinedKeys;\nexports.extractExceptionKeysForMessage = extractExceptionKeysForMessage;\nexports.fill = fill;\nexports.getOriginalFunction = getOriginalFunction;\nexports.markFunctionWrapped = markFunctionWrapped;\nexports.objectify = objectify;\nexports.urlEncode = urlEncode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/path.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/path.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */\nfunction splitPath(filename) {\n  // Truncate files names greater than 1024 characters to avoid regex dos\n  // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n  const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n  const parts = splitPathRe.exec(truncated);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nfunction resolve(...args) {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(p => !!p), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr) {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nfunction relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nfunction normalizePath(path) {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(path.split('/').filter(p => !!p), !isPathAbsolute).join('/');\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nfunction isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nfunction join(...args) {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nfunction dirname(path) {\n  const result = splitPath(path);\n  const root = result[0] || '';\n  let dir = result[1];\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n  return root + dir;\n}\n\n/** JSDoc */\nfunction basename(path, ext) {\n  let f = splitPath(path)[2] || '';\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\nexports.basename = basename;\nexports.dirname = dirname;\nexports.isAbsolute = isAbsolute;\nexports.join = join;\nexports.normalizePath = normalizePath;\nexports.relative = relative;\nexports.resolve = resolve;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/path.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst error = __webpack_require__(/*! ./error.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js\");\nconst syncpromise = __webpack_require__(/*! ./syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nfunction makePromiseBuffer(limit) {\n  const buffer = [];\n  function isReady() {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task) {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer) {\n    if (!isReady()) {\n      return syncpromise.rejectedSyncPromise(new error.SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task.then(() => remove(task))\n    // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n    // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n    // have promises, so TS has to polyfill when down-compiling.)\n    .then(null, () => remove(task).then(null, () => {\n      // We have to add another catch here because `remove()` starts a new promise chain.\n    }));\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout) {\n    return new syncpromise.SyncPromise((resolve, reject) => {\n      let counter = buffer.length;\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void syncpromise.resolvedSyncPromise(item).then(() => {\n          if (! --counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n  return {\n    $: buffer,\n    add,\n    drain\n  };\n}\nexports.makePromiseBuffer = makePromiseBuffer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst misc = __webpack_require__(/*! ./misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\n\n/**\n * Returns a new minimal propagation context.\n *\n * @deprecated Use `generateTraceId` and `generateSpanId` instead.\n */\nfunction generatePropagationContext() {\n  return {\n    traceId: generateTraceId(),\n    spanId: generateSpanId()\n  };\n}\n\n/**\n * Generate a random, valid trace ID.\n */\nfunction generateTraceId() {\n  return misc.uuid4();\n}\n\n/**\n * Generate a random, valid span ID.\n */\nfunction generateSpanId() {\n  return misc.uuid4().substring(16);\n}\nexports.generatePropagationContext = generatePropagationContext;\nexports.generateSpanId = generateSpanId;\nexports.generateTraceId = generateTraceId;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvcHJvcGFnYXRpb25Db250ZXh0LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLHlGQUFXLENBQUM7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQywwQkFBMEJBLENBQUEsRUFBRztFQUNwQyxPQUFPO0lBQ0xDLE9BQU8sRUFBRUMsZUFBZSxDQUFDLENBQUM7SUFDMUJDLE1BQU0sRUFBRUMsY0FBYyxDQUFDO0VBQ3pCLENBQUM7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRixlQUFlQSxDQUFBLEVBQUc7RUFDekIsT0FBT0osSUFBSSxDQUFDTyxLQUFLLENBQUMsQ0FBQztBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRCxjQUFjQSxDQUFBLEVBQUc7RUFDeEIsT0FBT04sSUFBSSxDQUFDTyxLQUFLLENBQUMsQ0FBQyxDQUFDQyxTQUFTLENBQUMsRUFBRSxDQUFDO0FBQ25DO0FBRUFWLGtDQUFrQyxHQUFHSSwwQkFBMEI7QUFDL0RKLHNCQUFzQixHQUFHUSxjQUFjO0FBQ3ZDUix1QkFBdUIsR0FBR00sZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L3Byb3BhZ2F0aW9uQ29udGV4dC5qcz9hZDg4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG1pc2MgPSByZXF1aXJlKCcuL21pc2MuanMnKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IG1pbmltYWwgcHJvcGFnYXRpb24gY29udGV4dC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGdlbmVyYXRlVHJhY2VJZGAgYW5kIGBnZW5lcmF0ZVNwYW5JZGAgaW5zdGVhZC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQcm9wYWdhdGlvbkNvbnRleHQoKSB7XG4gIHJldHVybiB7XG4gICAgdHJhY2VJZDogZ2VuZXJhdGVUcmFjZUlkKCksXG4gICAgc3BhbklkOiBnZW5lcmF0ZVNwYW5JZCgpLFxuICB9O1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgcmFuZG9tLCB2YWxpZCB0cmFjZSBJRC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVUcmFjZUlkKCkge1xuICByZXR1cm4gbWlzYy51dWlkNCgpO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgcmFuZG9tLCB2YWxpZCBzcGFuIElELlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVNwYW5JZCgpIHtcbiAgcmV0dXJuIG1pc2MudXVpZDQoKS5zdWJzdHJpbmcoMTYpO1xufVxuXG5leHBvcnRzLmdlbmVyYXRlUHJvcGFnYXRpb25Db250ZXh0ID0gZ2VuZXJhdGVQcm9wYWdhdGlvbkNvbnRleHQ7XG5leHBvcnRzLmdlbmVyYXRlU3BhbklkID0gZ2VuZXJhdGVTcGFuSWQ7XG5leHBvcnRzLmdlbmVyYXRlVHJhY2VJZCA9IGdlbmVyYXRlVHJhY2VJZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BhZ2F0aW9uQ29udGV4dC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1pc2MiLCJyZXF1aXJlIiwiZ2VuZXJhdGVQcm9wYWdhdGlvbkNvbnRleHQiLCJ0cmFjZUlkIiwiZ2VuZXJhdGVUcmFjZUlkIiwic3BhbklkIiwiZ2VuZXJhdGVTcGFuSWQiLCJ1dWlkNCIsInN1YnN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nconst DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header, now = Date.now()) {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nfunction disabledUntil(limits, dataCategory) {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, dataCategory, now = Date.now()) {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nfunction updateRateLimits(limits, {\n  statusCode,\n  headers\n}, now = Date.now()) {\n  const updatedRateLimits = {\n    ...limits\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories,,, namespaces] = limit.split(':', 5);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n  return updatedRateLimits;\n}\nexports.DEFAULT_RETRY_AFTER = DEFAULT_RETRY_AFTER;\nexports.disabledUntil = disabledUntil;\nexports.isRateLimited = isRateLimited;\nexports.parseRetryAfterHeader = parseRetryAfterHeader;\nexports.updateRateLimits = updateRateLimits;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvcmF0ZWxpbWl0LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEOztBQUVBLE1BQU1DLG1CQUFtQixHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MscUJBQXFCQSxDQUFDQyxNQUFNLEVBQUVDLEdBQUcsR0FBR0MsSUFBSSxDQUFDRCxHQUFHLENBQUMsQ0FBQyxFQUFFO0VBQ3ZELE1BQU1FLFdBQVcsR0FBR0MsUUFBUSxDQUFFLEdBQUVKLE1BQU8sRUFBQyxFQUFFLEVBQUUsQ0FBQztFQUM3QyxJQUFJLENBQUNLLEtBQUssQ0FBQ0YsV0FBVyxDQUFDLEVBQUU7SUFDdkIsT0FBT0EsV0FBVyxHQUFHLElBQUk7RUFDM0I7RUFFQSxNQUFNRyxVQUFVLEdBQUdKLElBQUksQ0FBQ0ssS0FBSyxDQUFFLEdBQUVQLE1BQU8sRUFBQyxDQUFDO0VBQzFDLElBQUksQ0FBQ0ssS0FBSyxDQUFDQyxVQUFVLENBQUMsRUFBRTtJQUN0QixPQUFPQSxVQUFVLEdBQUdMLEdBQUc7RUFDekI7RUFFQSxPQUFPSCxtQkFBbUI7QUFDNUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTVSxhQUFhQSxDQUFDQyxNQUFNLEVBQUVDLFlBQVksRUFBRTtFQUMzQyxPQUFPRCxNQUFNLENBQUNDLFlBQVksQ0FBQyxJQUFJRCxNQUFNLENBQUNFLEdBQUcsSUFBSSxDQUFDO0FBQ2hEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGFBQWFBLENBQUNILE1BQU0sRUFBRUMsWUFBWSxFQUFFVCxHQUFHLEdBQUdDLElBQUksQ0FBQ0QsR0FBRyxDQUFDLENBQUMsRUFBRTtFQUM3RCxPQUFPTyxhQUFhLENBQUNDLE1BQU0sRUFBRUMsWUFBWSxDQUFDLEdBQUdULEdBQUc7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNZLGdCQUFnQkEsQ0FDdkJKLE1BQU0sRUFDTjtFQUFFSyxVQUFVO0VBQUVDO0FBQVEsQ0FBQyxFQUN2QmQsR0FBRyxHQUFHQyxJQUFJLENBQUNELEdBQUcsQ0FBQyxDQUFDLEVBQ2hCO0VBQ0EsTUFBTWUsaUJBQWlCLEdBQUc7SUFDeEIsR0FBR1A7RUFDTCxDQUFDOztFQUVEO0VBQ0E7RUFDQSxNQUFNUSxlQUFlLEdBQUdGLE9BQU8sSUFBSUEsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0VBQ2xFLE1BQU1HLGdCQUFnQixHQUFHSCxPQUFPLElBQUlBLE9BQU8sQ0FBQyxhQUFhLENBQUM7RUFFMUQsSUFBSUUsZUFBZSxFQUFFO0lBQ25CO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDSSxLQUFLLE1BQU1FLEtBQUssSUFBSUYsZUFBZSxDQUFDRyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7TUFDckQsTUFBTSxDQUFDQyxVQUFVLEVBQUVDLFVBQVUsSUFBTUMsVUFBVSxDQUFDLEdBQUdMLEtBQUssQ0FBQ0UsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7TUFDcEUsTUFBTWxCLFdBQVcsR0FBR0MsUUFBUSxDQUFDa0IsVUFBVSxFQUFFLEVBQUUsQ0FBQztNQUM1QyxNQUFNRyxLQUFLLEdBQUcsQ0FBQyxDQUFDcEIsS0FBSyxDQUFDRixXQUFXLENBQUMsR0FBR0EsV0FBVyxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQztNQUMvRCxJQUFJLENBQUNvQixVQUFVLEVBQUU7UUFDZlAsaUJBQWlCLENBQUNMLEdBQUcsR0FBR1YsR0FBRyxHQUFHd0IsS0FBSztNQUNyQyxDQUFDLE1BQU07UUFDTCxLQUFLLE1BQU1DLFFBQVEsSUFBSUgsVUFBVSxDQUFDRixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7VUFDNUMsSUFBSUssUUFBUSxLQUFLLGVBQWUsRUFBRTtZQUNoQztZQUNBLElBQUksQ0FBQ0YsVUFBVSxJQUFJQSxVQUFVLENBQUNILEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQ00sUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2NBQzNEWCxpQkFBaUIsQ0FBQ1UsUUFBUSxDQUFDLEdBQUd6QixHQUFHLEdBQUd3QixLQUFLO1lBQzNDO1VBQ0YsQ0FBQyxNQUFNO1lBQ0xULGlCQUFpQixDQUFDVSxRQUFRLENBQUMsR0FBR3pCLEdBQUcsR0FBR3dCLEtBQUs7VUFDM0M7UUFDRjtNQUNGO0lBQ0Y7RUFDRixDQUFDLE1BQU0sSUFBSVAsZ0JBQWdCLEVBQUU7SUFDM0JGLGlCQUFpQixDQUFDTCxHQUFHLEdBQUdWLEdBQUcsR0FBR0YscUJBQXFCLENBQUNtQixnQkFBZ0IsRUFBRWpCLEdBQUcsQ0FBQztFQUM1RSxDQUFDLE1BQU0sSUFBSWEsVUFBVSxLQUFLLEdBQUcsRUFBRTtJQUM3QkUsaUJBQWlCLENBQUNMLEdBQUcsR0FBR1YsR0FBRyxHQUFHLEVBQUUsR0FBRyxJQUFJO0VBQ3pDO0VBRUEsT0FBT2UsaUJBQWlCO0FBQzFCO0FBRUFwQiwyQkFBMkIsR0FBR0UsbUJBQW1CO0FBQ2pERixxQkFBcUIsR0FBR1ksYUFBYTtBQUNyQ1oscUJBQXFCLEdBQUdnQixhQUFhO0FBQ3JDaEIsNkJBQTZCLEdBQUdHLHFCQUFxQjtBQUNyREgsd0JBQXdCLEdBQUdpQixnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9yYXRlbGltaXQuanM/YTc4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vLyBJbnRlbnRpb25hbGx5IGtlZXBpbmcgdGhlIGtleSBicm9hZCwgYXMgd2UgZG9uJ3Qga25vdyBmb3Igc3VyZSB3aGF0IHJhdGUgbGltaXQgaGVhZGVycyBnZXQgcmV0dXJuZWQgZnJvbSBiYWNrZW5kXG5cbmNvbnN0IERFRkFVTFRfUkVUUllfQUZURVIgPSA2MCAqIDEwMDA7IC8vIDYwIHNlY29uZHNcblxuLyoqXG4gKiBFeHRyYWN0cyBSZXRyeS1BZnRlciB2YWx1ZSBmcm9tIHRoZSByZXF1ZXN0IGhlYWRlciBvciByZXR1cm5zIGRlZmF1bHQgdmFsdWVcbiAqIEBwYXJhbSBoZWFkZXIgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mICdSZXRyeS1BZnRlcicgaGVhZGVyXG4gKiBAcGFyYW0gbm93IGN1cnJlbnQgdW5peCB0aW1lc3RhbXBcbiAqXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUmV0cnlBZnRlckhlYWRlcihoZWFkZXIsIG5vdyA9IERhdGUubm93KCkpIHtcbiAgY29uc3QgaGVhZGVyRGVsYXkgPSBwYXJzZUludChgJHtoZWFkZXJ9YCwgMTApO1xuICBpZiAoIWlzTmFOKGhlYWRlckRlbGF5KSkge1xuICAgIHJldHVybiBoZWFkZXJEZWxheSAqIDEwMDA7XG4gIH1cblxuICBjb25zdCBoZWFkZXJEYXRlID0gRGF0ZS5wYXJzZShgJHtoZWFkZXJ9YCk7XG4gIGlmICghaXNOYU4oaGVhZGVyRGF0ZSkpIHtcbiAgICByZXR1cm4gaGVhZGVyRGF0ZSAtIG5vdztcbiAgfVxuXG4gIHJldHVybiBERUZBVUxUX1JFVFJZX0FGVEVSO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHRpbWUgdGhhdCB0aGUgZ2l2ZW4gY2F0ZWdvcnkgaXMgZGlzYWJsZWQgdW50aWwgZm9yIHJhdGUgbGltaXRpbmcuXG4gKiBJbiBjYXNlIG5vIGNhdGVnb3J5LXNwZWNpZmljIGxpbWl0IGlzIHNldCBidXQgYSBnZW5lcmFsIHJhdGUgbGltaXQgYWNyb3NzIGFsbCBjYXRlZ29yaWVzIGlzIGFjdGl2ZSxcbiAqIHRoYXQgdGltZSBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcmV0dXJuIHRoZSB0aW1lIGluIG1zIHRoYXQgdGhlIGNhdGVnb3J5IGlzIGRpc2FibGVkIHVudGlsIG9yIDAgaWYgdGhlcmUncyBubyBhY3RpdmUgcmF0ZSBsaW1pdC5cbiAqL1xuZnVuY3Rpb24gZGlzYWJsZWRVbnRpbChsaW1pdHMsIGRhdGFDYXRlZ29yeSkge1xuICByZXR1cm4gbGltaXRzW2RhdGFDYXRlZ29yeV0gfHwgbGltaXRzLmFsbCB8fCAwO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGNhdGVnb3J5IGlzIHJhdGUgbGltaXRlZFxuICovXG5mdW5jdGlvbiBpc1JhdGVMaW1pdGVkKGxpbWl0cywgZGF0YUNhdGVnb3J5LCBub3cgPSBEYXRlLm5vdygpKSB7XG4gIHJldHVybiBkaXNhYmxlZFVudGlsKGxpbWl0cywgZGF0YUNhdGVnb3J5KSA+IG5vdztcbn1cblxuLyoqXG4gKiBVcGRhdGUgcmF0ZWxpbWl0cyBmcm9tIGluY29taW5nIGhlYWRlcnMuXG4gKlxuICogQHJldHVybiB0aGUgdXBkYXRlZCBSYXRlTGltaXRzIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlUmF0ZUxpbWl0cyhcbiAgbGltaXRzLFxuICB7IHN0YXR1c0NvZGUsIGhlYWRlcnMgfSxcbiAgbm93ID0gRGF0ZS5ub3coKSxcbikge1xuICBjb25zdCB1cGRhdGVkUmF0ZUxpbWl0cyA9IHtcbiAgICAuLi5saW1pdHMsXG4gIH07XG5cbiAgLy8gXCJUaGUgbmFtZSBpcyBjYXNlLWluc2Vuc2l0aXZlLlwiXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IZWFkZXJzL2dldFxuICBjb25zdCByYXRlTGltaXRIZWFkZXIgPSBoZWFkZXJzICYmIGhlYWRlcnNbJ3gtc2VudHJ5LXJhdGUtbGltaXRzJ107XG4gIGNvbnN0IHJldHJ5QWZ0ZXJIZWFkZXIgPSBoZWFkZXJzICYmIGhlYWRlcnNbJ3JldHJ5LWFmdGVyJ107XG5cbiAgaWYgKHJhdGVMaW1pdEhlYWRlcikge1xuICAgIC8qKlxuICAgICAqIHJhdGUgbGltaXQgaGVhZGVycyBhcmUgb2YgdGhlIGZvcm1cbiAgICAgKiAgICAgPGhlYWRlcj4sPGhlYWRlcj4sLi5cbiAgICAgKiB3aGVyZSBlYWNoIDxoZWFkZXI+IGlzIG9mIHRoZSBmb3JtXG4gICAgICogICAgIDxyZXRyeV9hZnRlcj46IDxjYXRlZ29yaWVzPjogPHNjb3BlPjogPHJlYXNvbl9jb2RlPjogPG5hbWVzcGFjZXM+XG4gICAgICogd2hlcmVcbiAgICAgKiAgICAgPHJldHJ5X2FmdGVyPiBpcyBhIGRlbGF5IGluIHNlY29uZHNcbiAgICAgKiAgICAgPGNhdGVnb3JpZXM+IGlzIHRoZSBldmVudCB0eXBlKHMpIChlcnJvciwgdHJhbnNhY3Rpb24sIGV0YykgYmVpbmcgcmF0ZSBsaW1pdGVkIGFuZCBpcyBvZiB0aGUgZm9ybVxuICAgICAqICAgICAgICAgPGNhdGVnb3J5Pjs8Y2F0ZWdvcnk+Oy4uLlxuICAgICAqICAgICA8c2NvcGU+IGlzIHdoYXQncyBiZWluZyBsaW1pdGVkIChvcmcsIHByb2plY3QsIG9yIGtleSkgLSBpZ25vcmVkIGJ5IFNES1xuICAgICAqICAgICA8cmVhc29uX2NvZGU+IGlzIGFuIGFyYml0cmFyeSBzdHJpbmcgbGlrZSBcIm9yZ19xdW90YVwiIC0gaWdub3JlZCBieSBTREtcbiAgICAgKiAgICAgPG5hbWVzcGFjZXM+IFNlbWljb2xvbi1zZXBhcmF0ZWQgbGlzdCBvZiBtZXRyaWMgbmFtZXNwYWNlIGlkZW50aWZpZXJzLiBEZWZpbmVzIHdoaWNoIG5hbWVzcGFjZShzKSB3aWxsIGJlIGFmZmVjdGVkLlxuICAgICAqICAgICAgICAgT25seSBwcmVzZW50IGlmIHJhdGUgbGltaXQgYXBwbGllcyB0byB0aGUgbWV0cmljX2J1Y2tldCBkYXRhIGNhdGVnb3J5LlxuICAgICAqL1xuICAgIGZvciAoY29uc3QgbGltaXQgb2YgcmF0ZUxpbWl0SGVhZGVyLnRyaW0oKS5zcGxpdCgnLCcpKSB7XG4gICAgICBjb25zdCBbcmV0cnlBZnRlciwgY2F0ZWdvcmllcywgLCAsIG5hbWVzcGFjZXNdID0gbGltaXQuc3BsaXQoJzonLCA1KSA7XG4gICAgICBjb25zdCBoZWFkZXJEZWxheSA9IHBhcnNlSW50KHJldHJ5QWZ0ZXIsIDEwKTtcbiAgICAgIGNvbnN0IGRlbGF5ID0gKCFpc05hTihoZWFkZXJEZWxheSkgPyBoZWFkZXJEZWxheSA6IDYwKSAqIDEwMDA7IC8vIDYwc2VjIGRlZmF1bHRcbiAgICAgIGlmICghY2F0ZWdvcmllcykge1xuICAgICAgICB1cGRhdGVkUmF0ZUxpbWl0cy5hbGwgPSBub3cgKyBkZWxheTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3QgY2F0ZWdvcnkgb2YgY2F0ZWdvcmllcy5zcGxpdCgnOycpKSB7XG4gICAgICAgICAgaWYgKGNhdGVnb3J5ID09PSAnbWV0cmljX2J1Y2tldCcpIHtcbiAgICAgICAgICAgIC8vIG5hbWVzcGFjZXMgd2lsbCBiZSBwcmVzZW50IHdoZW4gY2F0ZWdvcnkgPT09ICdtZXRyaWNfYnVja2V0J1xuICAgICAgICAgICAgaWYgKCFuYW1lc3BhY2VzIHx8IG5hbWVzcGFjZXMuc3BsaXQoJzsnKS5pbmNsdWRlcygnY3VzdG9tJykpIHtcbiAgICAgICAgICAgICAgdXBkYXRlZFJhdGVMaW1pdHNbY2F0ZWdvcnldID0gbm93ICsgZGVsYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZWRSYXRlTGltaXRzW2NhdGVnb3J5XSA9IG5vdyArIGRlbGF5O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChyZXRyeUFmdGVySGVhZGVyKSB7XG4gICAgdXBkYXRlZFJhdGVMaW1pdHMuYWxsID0gbm93ICsgcGFyc2VSZXRyeUFmdGVySGVhZGVyKHJldHJ5QWZ0ZXJIZWFkZXIsIG5vdyk7XG4gIH0gZWxzZSBpZiAoc3RhdHVzQ29kZSA9PT0gNDI5KSB7XG4gICAgdXBkYXRlZFJhdGVMaW1pdHMuYWxsID0gbm93ICsgNjAgKiAxMDAwO1xuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZWRSYXRlTGltaXRzO1xufVxuXG5leHBvcnRzLkRFRkFVTFRfUkVUUllfQUZURVIgPSBERUZBVUxUX1JFVFJZX0FGVEVSO1xuZXhwb3J0cy5kaXNhYmxlZFVudGlsID0gZGlzYWJsZWRVbnRpbDtcbmV4cG9ydHMuaXNSYXRlTGltaXRlZCA9IGlzUmF0ZUxpbWl0ZWQ7XG5leHBvcnRzLnBhcnNlUmV0cnlBZnRlckhlYWRlciA9IHBhcnNlUmV0cnlBZnRlckhlYWRlcjtcbmV4cG9ydHMudXBkYXRlUmF0ZUxpbWl0cyA9IHVwZGF0ZVJhdGVMaW1pdHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYXRlbGltaXQuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJERUZBVUxUX1JFVFJZX0FGVEVSIiwicGFyc2VSZXRyeUFmdGVySGVhZGVyIiwiaGVhZGVyIiwibm93IiwiRGF0ZSIsImhlYWRlckRlbGF5IiwicGFyc2VJbnQiLCJpc05hTiIsImhlYWRlckRhdGUiLCJwYXJzZSIsImRpc2FibGVkVW50aWwiLCJsaW1pdHMiLCJkYXRhQ2F0ZWdvcnkiLCJhbGwiLCJpc1JhdGVMaW1pdGVkIiwidXBkYXRlUmF0ZUxpbWl0cyIsInN0YXR1c0NvZGUiLCJoZWFkZXJzIiwidXBkYXRlZFJhdGVMaW1pdHMiLCJyYXRlTGltaXRIZWFkZXIiLCJyZXRyeUFmdGVySGVhZGVyIiwibGltaXQiLCJ0cmltIiwic3BsaXQiLCJyZXRyeUFmdGVyIiwiY2F0ZWdvcmllcyIsIm5hbWVzcGFjZXMiLCJkZWxheSIsImNhdGVnb3J5IiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst cookie = __webpack_require__(/*! ./cookie.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cookie.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst normalize = __webpack_require__(/*! ./normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst url = __webpack_require__(/*! ./url.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/url.js\");\nconst getIpAddress = __webpack_require__(/*! ./vendor/getIpAddress.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/getIpAddress.js\");\nconst DEFAULT_INCLUDES = {\n  ip: false,\n  request: true,\n  user: true\n};\nconst DEFAULT_REQUEST_INCLUDES = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\nconst DEFAULT_USER_INCLUDES = ['id', 'username', 'email'];\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\n\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n * @deprecated This method will be removed in v9. It is not in use anymore.\n */\nfunction extractPathForTransaction(req, options = {}) {\n  const method = req.method && req.method.toUpperCase();\n  let path = '';\n  let source = 'url';\n\n  // Check to see if there's a parameterized route we can use (as there is in Express)\n  if (options.customRoute || req.route) {\n    path = options.customRoute || `${req.baseUrl || ''}${req.route && req.route.path}`;\n    source = 'route';\n  }\n\n  // Otherwise, just take the original URL\n  else if (req.originalUrl || req.url) {\n    path = url.stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n  let name = '';\n  if (options.method && method) {\n    name += method;\n  }\n  if (options.method && options.path) {\n    name += ' ';\n  }\n  if (options.path && path) {\n    name += path;\n  }\n  return [name, source];\n}\nfunction extractUserData(user, keys) {\n  const extractedUser = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n  attributes.forEach(key => {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n  return extractedUser;\n}\n\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n *\n * @deprecated Instead manually normalize the request data into a format that fits `addNormalizedRequestDataToEvent`.\n */\nfunction extractRequestData(req, options = {}) {\n  const {\n    include = DEFAULT_REQUEST_INCLUDES\n  } = options;\n  const requestData = {};\n\n  // headers:\n  //   node, express, koa, nextjs: req.headers\n  const headers = req.headers || {};\n  // method:\n  //   node, express, koa, nextjs: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node, nextjs: req.headers.host\n  // Express 4 mistakenly strips off port number from req.host / req.hostname so we can't rely on them\n  // See: https://github.com/expressjs/express/issues/3047#issuecomment-236653223\n  // Also: https://github.com/getsentry/sentry-javascript/issues/1917\n  const host = headers.host || req.hostname || req.host || '<no host>';\n  // protocol:\n  //   node, nextjs: <n/a>\n  //   express, koa: req.protocol\n  const protocol = req.protocol === 'https' || req.socket && req.socket.encrypted ? 'https' : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  const originalUrl = req.originalUrl || req.url || '';\n  // absolute url\n  const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n  include.forEach(key => {\n    switch (key) {\n      case 'headers':\n        {\n          requestData.headers = headers;\n\n          // Remove the Cookie header in case cookie data should not be included in the event\n          if (!include.includes('cookies')) {\n            delete requestData.headers.cookie;\n          }\n\n          // Remove IP headers in case IP data should not be included in the event\n          if (!include.includes('ip')) {\n            getIpAddress.ipHeaderNames.forEach(ipHeaderName => {\n              // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n              delete requestData.headers[ipHeaderName];\n            });\n          }\n          break;\n        }\n      case 'method':\n        {\n          requestData.method = method;\n          break;\n        }\n      case 'url':\n        {\n          requestData.url = absoluteUrl;\n          break;\n        }\n      case 'cookies':\n        {\n          // cookies:\n          //   node, express, koa: req.headers.cookie\n          //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n          requestData.cookies =\n          // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n          // come off in v8\n          req.cookies || headers.cookie && cookie.parseCookie(headers.cookie) || {};\n          break;\n        }\n      case 'query_string':\n        {\n          // query string:\n          //   node: req.url (raw)\n          //   express, koa, nextjs: req.query\n          requestData.query_string = extractQueryParams(req);\n          break;\n        }\n      case 'data':\n        {\n          if (method === 'GET' || method === 'HEAD') {\n            break;\n          }\n          // NOTE: As of v8, request is (unless a user sets this manually) ALWAYS a http request\n          // Which does not have a body by default\n          // However, in our http instrumentation, we patch the request to capture the body and store it on the\n          // request as `.body` anyhow\n          // In v9, we may update requestData to only work with plain http requests\n          // body data:\n          //   express, koa, nextjs: req.body\n          //\n          //   when using node by itself, you have to read the incoming stream(see\n          //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n          //   where they're going to store the final result, so they'll have to capture this data themselves\n          const body = req.body;\n          if (body !== undefined) {\n            const stringBody = is.isString(body) ? body : is.isPlainObject(body) ? JSON.stringify(normalize.normalize(body)) : string.truncate(`${body}`, 1024);\n            if (stringBody) {\n              requestData.data = stringBody;\n            }\n          }\n          break;\n        }\n      default:\n        {\n          if ({}.hasOwnProperty.call(req, key)) {\n            requestData[key] = req[key];\n          }\n        }\n    }\n  });\n  return requestData;\n}\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(event, req,\n// This is non-standard data that is not part of the regular HTTP request\nadditionalData, options) {\n  const include = {\n    ...DEFAULT_INCLUDES,\n    ...(options && options.include)\n  };\n  if (include.request) {\n    const includeRequest = Array.isArray(include.request) ? [...include.request] : [...DEFAULT_REQUEST_INCLUDES];\n    if (include.ip) {\n      includeRequest.push('ip');\n    }\n    const extractedRequestData = extractNormalizedRequestData(req, {\n      include: includeRequest\n    });\n    event.request = {\n      ...event.request,\n      ...extractedRequestData\n    };\n  }\n  if (include.user) {\n    const extractedUser = additionalData.user && is.isPlainObject(additionalData.user) ? extractUserData(additionalData.user, include.user) : {};\n    if (Object.keys(extractedUser).length) {\n      event.user = {\n        ...extractedUser,\n        ...event.user\n      };\n    }\n  }\n  if (include.ip) {\n    const ip = req.headers && getIpAddress.getClientIPAddress(req.headers) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip\n      };\n    }\n  }\n}\n\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @returns The mutated `Event` object\n *\n * @deprecated Use `addNormalizedRequestDataToEvent` instead.\n */\nfunction addRequestDataToEvent(event, req, options) {\n  const include = {\n    ...DEFAULT_INCLUDES,\n    ...(options && options.include)\n  };\n  if (include.request) {\n    const includeRequest = Array.isArray(include.request) ? [...include.request] : [...DEFAULT_REQUEST_INCLUDES];\n    if (include.ip) {\n      includeRequest.push('ip');\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const extractedRequestData = extractRequestData(req, {\n      include: includeRequest\n    });\n    event.request = {\n      ...event.request,\n      ...extractedRequestData\n    };\n  }\n  if (include.user) {\n    const extractedUser = req.user && is.isPlainObject(req.user) ? extractUserData(req.user, include.user) : {};\n    if (Object.keys(extractedUser).length) {\n      event.user = {\n        ...event.user,\n        ...extractedUser\n      };\n    }\n  }\n\n  // client ip:\n  //   node, nextjs: req.socket.remoteAddress\n  //   express, koa: req.ip\n  //   It may also be sent by proxies as specified in X-Forwarded-For or similar headers\n  if (include.ip) {\n    const ip = req.headers && getIpAddress.getClientIPAddress(req.headers) || req.ip || req.socket && req.socket.remoteAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip\n      };\n    }\n  }\n  return event;\n}\nfunction extractQueryParams(req) {\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  let originalUrl = req.originalUrl || req.url || '';\n  if (!originalUrl) {\n    return;\n  }\n\n  // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n  // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n  if (originalUrl.startsWith('/')) {\n    originalUrl = `http://dogs.are.great${originalUrl}`;\n  }\n  try {\n    const queryParams = req.query || new URL(originalUrl).search.slice(1);\n    return queryParams.length ? queryParams : undefined;\n  } catch (e2) {\n    return undefined;\n  }\n}\n\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */\n// TODO(v8): Make this function return undefined when the extraction fails.\nfunction winterCGHeadersToDict(winterCGHeaders) {\n  const headers = {};\n  try {\n    winterCGHeaders.forEach((value, key) => {\n      if (typeof value === 'string') {\n        // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n        headers[key] = value;\n      }\n    });\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Sentry failed extracting headers from a request object. If you see this, please file an issue.');\n  }\n  return headers;\n}\n\n/**\n * Convert common request headers to a simple dictionary.\n */\nfunction headersToDict(reqHeaders) {\n  const headers = Object.create(null);\n  try {\n    Object.entries(reqHeaders).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        headers[key] = value;\n      }\n    });\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Sentry failed extracting headers from a request object. If you see this, please file an issue.');\n  }\n  return headers;\n}\n\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */\nfunction winterCGRequestToRequestData(req) {\n  const headers = winterCGHeadersToDict(req.headers);\n  return {\n    method: req.method,\n    url: req.url,\n    query_string: extractQueryParamsFromUrl(req.url),\n    headers\n    // TODO: Can we extract body data from the request?\n  };\n}\n\n/**\n * Convert a HTTP request object to RequestEventData to be passed as normalizedRequest.\n * Instead of allowing `PolymorphicRequest` to be passed,\n * we want to be more specific and generally require a http.IncomingMessage-like object.\n */\nfunction httpRequestToRequestData(request) {\n  const headers = request.headers || {};\n  const host = headers.host || '<no host>';\n  const protocol = request.socket && request.socket.encrypted ? 'https' : 'http';\n  const originalUrl = request.url || '';\n  const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n\n  // This is non-standard, but may be sometimes set\n  // It may be overwritten later by our own body handling\n  const data = request.body || undefined;\n\n  // This is non-standard, but may be set on e.g. Next.js or Express requests\n  const cookies = request.cookies;\n  return object.dropUndefinedKeys({\n    url: absoluteUrl,\n    method: request.method,\n    query_string: extractQueryParamsFromUrl(originalUrl),\n    headers: headersToDict(headers),\n    cookies,\n    data\n  });\n}\n\n/** Extract the query params from an URL. */\nfunction extractQueryParamsFromUrl(url) {\n  // url is path and query string\n  if (!url) {\n    return;\n  }\n  try {\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname as the base. Since the point here is just to grab the query string, it doesn't matter what we use.\n    const queryParams = new URL(url, 'http://dogs.are.great').search.slice(1);\n    return queryParams.length ? queryParams : undefined;\n  } catch (e3) {\n    return undefined;\n  }\n}\nfunction extractNormalizedRequestData(normalizedRequest, {\n  include\n}) {\n  const includeKeys = include ? Array.isArray(include) ? include : DEFAULT_REQUEST_INCLUDES : [];\n  const requestData = {};\n  const headers = {\n    ...normalizedRequest.headers\n  };\n  if (includeKeys.includes('headers')) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.includes('cookies')) {\n      delete headers.cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.includes('ip')) {\n      getIpAddress.ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete headers[ipHeaderName];\n      });\n    }\n  }\n  if (includeKeys.includes('method')) {\n    requestData.method = normalizedRequest.method;\n  }\n  if (includeKeys.includes('url')) {\n    requestData.url = normalizedRequest.url;\n  }\n  if (includeKeys.includes('cookies')) {\n    const cookies = normalizedRequest.cookies || (headers && headers.cookie ? cookie.parseCookie(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n  if (includeKeys.includes('query_string')) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n  if (includeKeys.includes('data')) {\n    requestData.data = normalizedRequest.data;\n  }\n  return requestData;\n}\nexports.DEFAULT_USER_INCLUDES = DEFAULT_USER_INCLUDES;\nexports.addNormalizedRequestDataToEvent = addNormalizedRequestDataToEvent;\nexports.addRequestDataToEvent = addRequestDataToEvent;\nexports.extractPathForTransaction = extractPathForTransaction;\nexports.extractQueryParamsFromUrl = extractQueryParamsFromUrl;\nexports.extractRequestData = extractRequestData;\nexports.headersToDict = headersToDict;\nexports.httpRequestToRequestData = httpRequestToRequestData;\nexports.winterCGHeadersToDict = winterCGHeadersToDict;\nexports.winterCGRequestToRequestData = winterCGRequestToRequestData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvcmVxdWVzdGRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxNQUFNLEdBQUdDLG1CQUFPLENBQUMsNkZBQWEsQ0FBQztBQUNyQyxNQUFNQyxVQUFVLEdBQUdELG1CQUFPLENBQUMsdUdBQWtCLENBQUM7QUFDOUMsTUFBTUUsRUFBRSxHQUFHRixtQkFBTyxDQUFDLHFGQUFTLENBQUM7QUFDN0IsTUFBTUcsTUFBTSxHQUFHSCxtQkFBTyxDQUFDLDZGQUFhLENBQUM7QUFDckMsTUFBTUksU0FBUyxHQUFHSixtQkFBTyxDQUFDLG1HQUFnQixDQUFDO0FBQzNDLE1BQU1LLE1BQU0sR0FBR0wsbUJBQU8sQ0FBQyw2RkFBYSxDQUFDO0FBQ3JDLE1BQU1NLE1BQU0sR0FBR04sbUJBQU8sQ0FBQyw2RkFBYSxDQUFDO0FBQ3JDLE1BQU1PLEdBQUcsR0FBR1AsbUJBQU8sQ0FBQyx1RkFBVSxDQUFDO0FBQy9CLE1BQU1RLFlBQVksR0FBR1IsbUJBQU8sQ0FBQyx1SEFBMEIsQ0FBQztBQUV4RCxNQUFNUyxnQkFBZ0IsR0FBRztFQUN2QkMsRUFBRSxFQUFFLEtBQUs7RUFDVEMsT0FBTyxFQUFFLElBQUk7RUFDYkMsSUFBSSxFQUFFO0FBQ1IsQ0FBQztBQUNELE1BQU1DLHdCQUF3QixHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUM7QUFDaEcsTUFBTUMscUJBQXFCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQzs7QUFFekQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLHlCQUF5QkEsQ0FDaENDLEdBQUcsRUFDSEMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUNaO0VBQ0EsTUFBTUMsTUFBTSxHQUFHRixHQUFHLENBQUNFLE1BQU0sSUFBSUYsR0FBRyxDQUFDRSxNQUFNLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0VBRXJELElBQUlDLElBQUksR0FBRyxFQUFFO0VBQ2IsSUFBSUMsTUFBTSxHQUFHLEtBQUs7O0VBRWxCO0VBQ0EsSUFBSUosT0FBTyxDQUFDSyxXQUFXLElBQUlOLEdBQUcsQ0FBQ08sS0FBSyxFQUFFO0lBQ3BDSCxJQUFJLEdBQUdILE9BQU8sQ0FBQ0ssV0FBVyxJQUFLLEdBQUVOLEdBQUcsQ0FBQ1EsT0FBTyxJQUFJLEVBQUcsR0FBRVIsR0FBRyxDQUFDTyxLQUFLLElBQUlQLEdBQUcsQ0FBQ08sS0FBSyxDQUFDSCxJQUFLLEVBQUM7SUFDbEZDLE1BQU0sR0FBRyxPQUFPO0VBQ2xCOztFQUVBO0VBQUEsS0FDSyxJQUFJTCxHQUFHLENBQUNTLFdBQVcsSUFBSVQsR0FBRyxDQUFDVCxHQUFHLEVBQUU7SUFDbkNhLElBQUksR0FBR2IsR0FBRyxDQUFDbUIsd0JBQXdCLENBQUNWLEdBQUcsQ0FBQ1MsV0FBVyxJQUFJVCxHQUFHLENBQUNULEdBQUcsSUFBSSxFQUFFLENBQUM7RUFDdkU7RUFFQSxJQUFJb0IsSUFBSSxHQUFHLEVBQUU7RUFDYixJQUFJVixPQUFPLENBQUNDLE1BQU0sSUFBSUEsTUFBTSxFQUFFO0lBQzVCUyxJQUFJLElBQUlULE1BQU07RUFDaEI7RUFDQSxJQUFJRCxPQUFPLENBQUNDLE1BQU0sSUFBSUQsT0FBTyxDQUFDRyxJQUFJLEVBQUU7SUFDbENPLElBQUksSUFBSSxHQUFHO0VBQ2I7RUFDQSxJQUFJVixPQUFPLENBQUNHLElBQUksSUFBSUEsSUFBSSxFQUFFO0lBQ3hCTyxJQUFJLElBQUlQLElBQUk7RUFDZDtFQUVBLE9BQU8sQ0FBQ08sSUFBSSxFQUFFTixNQUFNLENBQUM7QUFDdkI7QUFFQSxTQUFTTyxlQUFlQSxDQUN0QmhCLElBQUksRUFHSmlCLElBQUksRUFDSjtFQUNBLE1BQU1DLGFBQWEsR0FBRyxDQUFDLENBQUM7RUFDeEIsTUFBTUMsVUFBVSxHQUFHQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0osSUFBSSxDQUFDLEdBQUdBLElBQUksR0FBR2YscUJBQXFCO0VBRXJFaUIsVUFBVSxDQUFDRyxPQUFPLENBQUNDLEdBQUcsSUFBSTtJQUN4QixJQUFJdkIsSUFBSSxJQUFJdUIsR0FBRyxJQUFJdkIsSUFBSSxFQUFFO01BQ3ZCa0IsYUFBYSxDQUFDSyxHQUFHLENBQUMsR0FBR3ZCLElBQUksQ0FBQ3VCLEdBQUcsQ0FBQztJQUNoQztFQUNGLENBQUMsQ0FBQztFQUVGLE9BQU9MLGFBQWE7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNNLGtCQUFrQkEsQ0FDekJwQixHQUFHLEVBQ0hDLE9BQU8sR0FFTixDQUFDLENBQUMsRUFDSDtFQUNBLE1BQU07SUFBRW9CLE9BQU8sR0FBR3hCO0VBQXlCLENBQUMsR0FBR0ksT0FBTztFQUN0RCxNQUFNcUIsV0FBVyxHQUFHLENBQUMsQ0FBQzs7RUFFdEI7RUFDQTtFQUNBLE1BQU1DLE9BQU8sR0FBSXZCLEdBQUcsQ0FBQ3VCLE9BQU8sSUFBSSxDQUFDLENBQUU7RUFHbkM7RUFDQTtFQUNBLE1BQU1yQixNQUFNLEdBQUdGLEdBQUcsQ0FBQ0UsTUFBTTtFQUN6QjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLE1BQU1zQixJQUFJLEdBQUdELE9BQU8sQ0FBQ0MsSUFBSSxJQUFJeEIsR0FBRyxDQUFDeUIsUUFBUSxJQUFJekIsR0FBRyxDQUFDd0IsSUFBSSxJQUFJLFdBQVc7RUFDcEU7RUFDQTtFQUNBO0VBQ0EsTUFBTUUsUUFBUSxHQUFHMUIsR0FBRyxDQUFDMEIsUUFBUSxLQUFLLE9BQU8sSUFBSzFCLEdBQUcsQ0FBQzJCLE1BQU0sSUFBSTNCLEdBQUcsQ0FBQzJCLE1BQU0sQ0FBQ0MsU0FBVSxHQUFHLE9BQU8sR0FBRyxNQUFNO0VBQ3BHO0VBQ0E7RUFDQTtFQUNBLE1BQU1uQixXQUFXLEdBQUdULEdBQUcsQ0FBQ1MsV0FBVyxJQUFJVCxHQUFHLENBQUNULEdBQUcsSUFBSSxFQUFFO0VBQ3BEO0VBQ0EsTUFBTXNDLFdBQVcsR0FBR3BCLFdBQVcsQ0FBQ3FCLFVBQVUsQ0FBQ0osUUFBUSxDQUFDLEdBQUdqQixXQUFXLEdBQUksR0FBRWlCLFFBQVMsTUFBS0YsSUFBSyxHQUFFZixXQUFZLEVBQUM7RUFDMUdZLE9BQU8sQ0FBQ0gsT0FBTyxDQUFDQyxHQUFHLElBQUk7SUFDckIsUUFBUUEsR0FBRztNQUNULEtBQUssU0FBUztRQUFFO1VBQ2RHLFdBQVcsQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPOztVQUU3QjtVQUNBLElBQUksQ0FBQ0YsT0FBTyxDQUFDVSxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDaEMsT0FBUVQsV0FBVyxDQUFDQyxPQUFPLENBQUd4QyxNQUFNO1VBQ3RDOztVQUVBO1VBQ0EsSUFBSSxDQUFDc0MsT0FBTyxDQUFDVSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDM0J2QyxZQUFZLENBQUN3QyxhQUFhLENBQUNkLE9BQU8sQ0FBQ2UsWUFBWSxJQUFJO2NBQ2pEO2NBQ0EsT0FBUVgsV0FBVyxDQUFDQyxPQUFPLENBQUdVLFlBQVksQ0FBQztZQUM3QyxDQUFDLENBQUM7VUFDSjtVQUVBO1FBQ0Y7TUFDQSxLQUFLLFFBQVE7UUFBRTtVQUNiWCxXQUFXLENBQUNwQixNQUFNLEdBQUdBLE1BQU07VUFDM0I7UUFDRjtNQUNBLEtBQUssS0FBSztRQUFFO1VBQ1ZvQixXQUFXLENBQUMvQixHQUFHLEdBQUdzQyxXQUFXO1VBQzdCO1FBQ0Y7TUFDQSxLQUFLLFNBQVM7UUFBRTtVQUNkO1VBQ0E7VUFDQTtVQUNBUCxXQUFXLENBQUNZLE9BQU87VUFDakI7VUFDQTtVQUNBbEMsR0FBRyxDQUFDa0MsT0FBTyxJQUFLWCxPQUFPLENBQUN4QyxNQUFNLElBQUlBLE1BQU0sQ0FBQ29ELFdBQVcsQ0FBQ1osT0FBTyxDQUFDeEMsTUFBTSxDQUFFLElBQUksQ0FBQyxDQUFDO1VBQzdFO1FBQ0Y7TUFDQSxLQUFLLGNBQWM7UUFBRTtVQUNuQjtVQUNBO1VBQ0E7VUFDQXVDLFdBQVcsQ0FBQ2MsWUFBWSxHQUFHQyxrQkFBa0IsQ0FBQ3JDLEdBQUcsQ0FBQztVQUNsRDtRQUNGO01BQ0EsS0FBSyxNQUFNO1FBQUU7VUFDWCxJQUFJRSxNQUFNLEtBQUssS0FBSyxJQUFJQSxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQ3pDO1VBQ0Y7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0EsTUFBTW9DLElBQUksR0FBR3RDLEdBQUcsQ0FBQ3NDLElBQUk7VUFDckIsSUFBSUEsSUFBSSxLQUFLQyxTQUFTLEVBQUU7WUFDdEIsTUFBTUMsVUFBVSxHQUFHdEQsRUFBRSxDQUFDdUQsUUFBUSxDQUFDSCxJQUFJLENBQUMsR0FDaENBLElBQUksR0FDSnBELEVBQUUsQ0FBQ3dELGFBQWEsQ0FBQ0osSUFBSSxDQUFDLEdBQ3BCSyxJQUFJLENBQUNDLFNBQVMsQ0FBQ3hELFNBQVMsQ0FBQ0EsU0FBUyxDQUFDa0QsSUFBSSxDQUFDLENBQUMsR0FDekNoRCxNQUFNLENBQUN1RCxRQUFRLENBQUUsR0FBRVAsSUFBSyxFQUFDLEVBQUUsSUFBSSxDQUFDO1lBQ3RDLElBQUlFLFVBQVUsRUFBRTtjQUNkbEIsV0FBVyxDQUFDd0IsSUFBSSxHQUFHTixVQUFVO1lBQy9CO1VBQ0Y7VUFDQTtRQUNGO01BQ0E7UUFBUztVQUNQLElBQUksQ0FBQyxDQUFDLENBQUNPLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDaEQsR0FBRyxFQUFFbUIsR0FBRyxDQUFDLEVBQUU7WUFDcENHLFdBQVcsQ0FBQ0gsR0FBRyxDQUFDLEdBQUluQixHQUFHLENBQUdtQixHQUFHLENBQUM7VUFDaEM7UUFDRjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0VBRUYsT0FBT0csV0FBVztBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMyQiwrQkFBK0JBLENBQ3RDQyxLQUFLLEVBQ0xsRCxHQUFHO0FBQ0g7QUFDQW1ELGNBQWMsRUFDZGxELE9BQU8sRUFDUDtFQUNBLE1BQU1vQixPQUFPLEdBQUc7SUFDZCxHQUFHNUIsZ0JBQWdCO0lBQ25CLElBQUlRLE9BQU8sSUFBSUEsT0FBTyxDQUFDb0IsT0FBTztFQUNoQyxDQUFDO0VBRUQsSUFBSUEsT0FBTyxDQUFDMUIsT0FBTyxFQUFFO0lBQ25CLE1BQU15RCxjQUFjLEdBQUdwQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0ksT0FBTyxDQUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHMEIsT0FBTyxDQUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHRSx3QkFBd0IsQ0FBQztJQUM1RyxJQUFJd0IsT0FBTyxDQUFDM0IsRUFBRSxFQUFFO01BQ2QwRCxjQUFjLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDM0I7SUFFQSxNQUFNQyxvQkFBb0IsR0FBR0MsNEJBQTRCLENBQUN2RCxHQUFHLEVBQUU7TUFBRXFCLE9BQU8sRUFBRStCO0lBQWUsQ0FBQyxDQUFDO0lBRTNGRixLQUFLLENBQUN2RCxPQUFPLEdBQUc7TUFDZCxHQUFHdUQsS0FBSyxDQUFDdkQsT0FBTztNQUNoQixHQUFHMkQ7SUFDTCxDQUFDO0VBQ0g7RUFFQSxJQUFJakMsT0FBTyxDQUFDekIsSUFBSSxFQUFFO0lBQ2hCLE1BQU1rQixhQUFhLEdBQ2pCcUMsY0FBYyxDQUFDdkQsSUFBSSxJQUFJVixFQUFFLENBQUN3RCxhQUFhLENBQUNTLGNBQWMsQ0FBQ3ZELElBQUksQ0FBQyxHQUN4RGdCLGVBQWUsQ0FBQ3VDLGNBQWMsQ0FBQ3ZELElBQUksRUFBRXlCLE9BQU8sQ0FBQ3pCLElBQUksQ0FBQyxHQUNsRCxDQUFDLENBQUM7SUFFUixJQUFJakIsTUFBTSxDQUFDa0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsQ0FBQzBDLE1BQU0sRUFBRTtNQUNyQ04sS0FBSyxDQUFDdEQsSUFBSSxHQUFHO1FBQ1gsR0FBR2tCLGFBQWE7UUFDaEIsR0FBR29DLEtBQUssQ0FBQ3REO01BQ1gsQ0FBQztJQUNIO0VBQ0Y7RUFFQSxJQUFJeUIsT0FBTyxDQUFDM0IsRUFBRSxFQUFFO0lBQ2QsTUFBTUEsRUFBRSxHQUFJTSxHQUFHLENBQUN1QixPQUFPLElBQUkvQixZQUFZLENBQUNpRSxrQkFBa0IsQ0FBQ3pELEdBQUcsQ0FBQ3VCLE9BQU8sQ0FBQyxJQUFLNEIsY0FBYyxDQUFDTyxTQUFTO0lBQ3BHLElBQUloRSxFQUFFLEVBQUU7TUFDTndELEtBQUssQ0FBQ3RELElBQUksR0FBRztRQUNYLEdBQUdzRCxLQUFLLENBQUN0RCxJQUFJO1FBQ2IrRCxVQUFVLEVBQUVqRTtNQUNkLENBQUM7SUFDSDtFQUNGO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNrRSxxQkFBcUJBLENBQzVCVixLQUFLLEVBQ0xsRCxHQUFHLEVBQ0hDLE9BQU8sRUFDUDtFQUNBLE1BQU1vQixPQUFPLEdBQUc7SUFDZCxHQUFHNUIsZ0JBQWdCO0lBQ25CLElBQUlRLE9BQU8sSUFBSUEsT0FBTyxDQUFDb0IsT0FBTztFQUNoQyxDQUFDO0VBRUQsSUFBSUEsT0FBTyxDQUFDMUIsT0FBTyxFQUFFO0lBQ25CLE1BQU15RCxjQUFjLEdBQUdwQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0ksT0FBTyxDQUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHMEIsT0FBTyxDQUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHRSx3QkFBd0IsQ0FBQztJQUM1RyxJQUFJd0IsT0FBTyxDQUFDM0IsRUFBRSxFQUFFO01BQ2QwRCxjQUFjLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDM0I7O0lBRUE7SUFDQSxNQUFNQyxvQkFBb0IsR0FBR2xDLGtCQUFrQixDQUFDcEIsR0FBRyxFQUFFO01BQUVxQixPQUFPLEVBQUUrQjtJQUFlLENBQUMsQ0FBQztJQUVqRkYsS0FBSyxDQUFDdkQsT0FBTyxHQUFHO01BQ2QsR0FBR3VELEtBQUssQ0FBQ3ZELE9BQU87TUFDaEIsR0FBRzJEO0lBQ0wsQ0FBQztFQUNIO0VBRUEsSUFBSWpDLE9BQU8sQ0FBQ3pCLElBQUksRUFBRTtJQUNoQixNQUFNa0IsYUFBYSxHQUFHZCxHQUFHLENBQUNKLElBQUksSUFBSVYsRUFBRSxDQUFDd0QsYUFBYSxDQUFDMUMsR0FBRyxDQUFDSixJQUFJLENBQUMsR0FBR2dCLGVBQWUsQ0FBQ1osR0FBRyxDQUFDSixJQUFJLEVBQUV5QixPQUFPLENBQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFM0csSUFBSWpCLE1BQU0sQ0FBQ2tDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLENBQUMwQyxNQUFNLEVBQUU7TUFDckNOLEtBQUssQ0FBQ3RELElBQUksR0FBRztRQUNYLEdBQUdzRCxLQUFLLENBQUN0RCxJQUFJO1FBQ2IsR0FBR2tCO01BQ0wsQ0FBQztJQUNIO0VBQ0Y7O0VBRUE7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJTyxPQUFPLENBQUMzQixFQUFFLEVBQUU7SUFDZCxNQUFNQSxFQUFFLEdBQUlNLEdBQUcsQ0FBQ3VCLE9BQU8sSUFBSS9CLFlBQVksQ0FBQ2lFLGtCQUFrQixDQUFDekQsR0FBRyxDQUFDdUIsT0FBTyxDQUFDLElBQUt2QixHQUFHLENBQUNOLEVBQUUsSUFBS00sR0FBRyxDQUFDMkIsTUFBTSxJQUFJM0IsR0FBRyxDQUFDMkIsTUFBTSxDQUFDa0MsYUFBYztJQUM5SCxJQUFJbkUsRUFBRSxFQUFFO01BQ053RCxLQUFLLENBQUN0RCxJQUFJLEdBQUc7UUFDWCxHQUFHc0QsS0FBSyxDQUFDdEQsSUFBSTtRQUNiK0QsVUFBVSxFQUFFakU7TUFDZCxDQUFDO0lBQ0g7RUFDRjtFQUVBLE9BQU93RCxLQUFLO0FBQ2Q7QUFFQSxTQUFTYixrQkFBa0JBLENBQUNyQyxHQUFHLEVBQUU7RUFDL0I7RUFDQTtFQUNBO0VBQ0EsSUFBSVMsV0FBVyxHQUFHVCxHQUFHLENBQUNTLFdBQVcsSUFBSVQsR0FBRyxDQUFDVCxHQUFHLElBQUksRUFBRTtFQUVsRCxJQUFJLENBQUNrQixXQUFXLEVBQUU7SUFDaEI7RUFDRjs7RUFFQTtFQUNBO0VBQ0EsSUFBSUEsV0FBVyxDQUFDcUIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0lBQy9CckIsV0FBVyxHQUFJLHdCQUF1QkEsV0FBWSxFQUFDO0VBQ3JEO0VBRUEsSUFBSTtJQUNGLE1BQU1xRCxXQUFXLEdBQUc5RCxHQUFHLENBQUMrRCxLQUFLLElBQUksSUFBSUMsR0FBRyxDQUFDdkQsV0FBVyxDQUFDLENBQUN3RCxNQUFNLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDckUsT0FBT0osV0FBVyxDQUFDTixNQUFNLEdBQUdNLFdBQVcsR0FBR3ZCLFNBQVM7RUFDckQsQ0FBQyxDQUFDLE9BQU80QixFQUFFLEVBQUU7SUFDWCxPQUFPNUIsU0FBUztFQUNsQjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTNkIscUJBQXFCQSxDQUFDQyxlQUFlLEVBQUU7RUFDOUMsTUFBTTlDLE9BQU8sR0FBRyxDQUFDLENBQUM7RUFDbEIsSUFBSTtJQUNGOEMsZUFBZSxDQUFDbkQsT0FBTyxDQUFDLENBQUNwQyxLQUFLLEVBQUVxQyxHQUFHLEtBQUs7TUFDdEMsSUFBSSxPQUFPckMsS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUM3QjtRQUNBeUMsT0FBTyxDQUFDSixHQUFHLENBQUMsR0FBR3JDLEtBQUs7TUFDdEI7SUFDRixDQUFDLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT3dGLENBQUMsRUFBRTtJQUNWckYsVUFBVSxDQUFDc0YsV0FBVyxJQUNwQnBGLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDcUYsSUFBSSxDQUFDLGdHQUFnRyxDQUFDO0VBQ3hIO0VBRUEsT0FBT2pELE9BQU87QUFDaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU2tELGFBQWFBLENBQUNDLFVBQVUsRUFBRTtFQUNqQyxNQUFNbkQsT0FBTyxHQUFHNUMsTUFBTSxDQUFDZ0csTUFBTSxDQUFDLElBQUksQ0FBQztFQUVuQyxJQUFJO0lBQ0ZoRyxNQUFNLENBQUNpRyxPQUFPLENBQUNGLFVBQVUsQ0FBQyxDQUFDeEQsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxFQUFFckMsS0FBSyxDQUFDLEtBQUs7TUFDbkQsSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdCeUMsT0FBTyxDQUFDSixHQUFHLENBQUMsR0FBR3JDLEtBQUs7TUFDdEI7SUFDRixDQUFDLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT3dGLENBQUMsRUFBRTtJQUNWckYsVUFBVSxDQUFDc0YsV0FBVyxJQUNwQnBGLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDcUYsSUFBSSxDQUFDLGdHQUFnRyxDQUFDO0VBQ3hIO0VBRUEsT0FBT2pELE9BQU87QUFDaEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU3NELDRCQUE0QkEsQ0FBQzdFLEdBQUcsRUFBRTtFQUN6QyxNQUFNdUIsT0FBTyxHQUFHNkMscUJBQXFCLENBQUNwRSxHQUFHLENBQUN1QixPQUFPLENBQUM7RUFFbEQsT0FBTztJQUNMckIsTUFBTSxFQUFFRixHQUFHLENBQUNFLE1BQU07SUFDbEJYLEdBQUcsRUFBRVMsR0FBRyxDQUFDVCxHQUFHO0lBQ1o2QyxZQUFZLEVBQUUwQyx5QkFBeUIsQ0FBQzlFLEdBQUcsQ0FBQ1QsR0FBRyxDQUFDO0lBQ2hEZ0M7SUFDQTtFQUNGLENBQUM7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU3dELHdCQUF3QkEsQ0FBQ3BGLE9BQU8sRUFFdkM7RUFDQSxNQUFNNEIsT0FBTyxHQUFHNUIsT0FBTyxDQUFDNEIsT0FBTyxJQUFJLENBQUMsQ0FBQztFQUNyQyxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQ0MsSUFBSSxJQUFJLFdBQVc7RUFDeEMsTUFBTUUsUUFBUSxHQUFHL0IsT0FBTyxDQUFDZ0MsTUFBTSxJQUFLaEMsT0FBTyxDQUFDZ0MsTUFBTSxDQUFHQyxTQUFTLEdBQUcsT0FBTyxHQUFHLE1BQU07RUFDakYsTUFBTW5CLFdBQVcsR0FBR2QsT0FBTyxDQUFDSixHQUFHLElBQUksRUFBRTtFQUNyQyxNQUFNc0MsV0FBVyxHQUFHcEIsV0FBVyxDQUFDcUIsVUFBVSxDQUFDSixRQUFRLENBQUMsR0FBR2pCLFdBQVcsR0FBSSxHQUFFaUIsUUFBUyxNQUFLRixJQUFLLEdBQUVmLFdBQVksRUFBQzs7RUFFMUc7RUFDQTtFQUNBLE1BQU1xQyxJQUFJLEdBQUluRCxPQUFPLENBQUcyQyxJQUFJLElBQUlDLFNBQVM7O0VBRXpDO0VBQ0EsTUFBTUwsT0FBTyxHQUFJdkMsT0FBTyxDQUFHdUMsT0FBTztFQUVsQyxPQUFPN0MsTUFBTSxDQUFDMkYsaUJBQWlCLENBQUM7SUFDOUJ6RixHQUFHLEVBQUVzQyxXQUFXO0lBQ2hCM0IsTUFBTSxFQUFFUCxPQUFPLENBQUNPLE1BQU07SUFDdEJrQyxZQUFZLEVBQUUwQyx5QkFBeUIsQ0FBQ3JFLFdBQVcsQ0FBQztJQUNwRGMsT0FBTyxFQUFFa0QsYUFBYSxDQUFDbEQsT0FBTyxDQUFDO0lBQy9CVyxPQUFPO0lBQ1BZO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7O0FBRUE7QUFDQSxTQUFTZ0MseUJBQXlCQSxDQUFDdkYsR0FBRyxFQUFFO0VBQ3RDO0VBQ0EsSUFBSSxDQUFDQSxHQUFHLEVBQUU7SUFDUjtFQUNGO0VBRUEsSUFBSTtJQUNGO0lBQ0E7SUFDQSxNQUFNdUUsV0FBVyxHQUFHLElBQUlFLEdBQUcsQ0FBQ3pFLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDMEUsTUFBTSxDQUFDQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLE9BQU9KLFdBQVcsQ0FBQ04sTUFBTSxHQUFHTSxXQUFXLEdBQUd2QixTQUFTO0VBQ3JELENBQUMsQ0FBQyxPQUFPMEMsRUFBRSxFQUFFO0lBQ1gsT0FBTzFDLFNBQVM7RUFDbEI7QUFDRjtBQUVBLFNBQVNnQiw0QkFBNEJBLENBQ25DMkIsaUJBQWlCLEVBQ2pCO0VBQUU3RDtBQUFRLENBQUMsRUFDWDtFQUNBLE1BQU04RCxXQUFXLEdBQUc5RCxPQUFPLEdBQUlMLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSSxPQUFPLENBQUMsR0FBR0EsT0FBTyxHQUFHeEIsd0JBQXdCLEdBQUksRUFBRTtFQUVoRyxNQUFNeUIsV0FBVyxHQUFHLENBQUMsQ0FBQztFQUN0QixNQUFNQyxPQUFPLEdBQUc7SUFBRSxHQUFHMkQsaUJBQWlCLENBQUMzRDtFQUFRLENBQUM7RUFFaEQsSUFBSTRELFdBQVcsQ0FBQ3BELFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtJQUNuQ1QsV0FBVyxDQUFDQyxPQUFPLEdBQUdBLE9BQU87O0lBRTdCO0lBQ0EsSUFBSSxDQUFDRixPQUFPLENBQUNVLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtNQUNoQyxPQUFRUixPQUFPLENBQUd4QyxNQUFNO0lBQzFCOztJQUVBO0lBQ0EsSUFBSSxDQUFDc0MsT0FBTyxDQUFDVSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7TUFDM0J2QyxZQUFZLENBQUN3QyxhQUFhLENBQUNkLE9BQU8sQ0FBQ2UsWUFBWSxJQUFJO1FBQ2pEO1FBQ0EsT0FBUVYsT0FBTyxDQUFHVSxZQUFZLENBQUM7TUFDakMsQ0FBQyxDQUFDO0lBQ0o7RUFDRjtFQUVBLElBQUlrRCxXQUFXLENBQUNwRCxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7SUFDbENULFdBQVcsQ0FBQ3BCLE1BQU0sR0FBR2dGLGlCQUFpQixDQUFDaEYsTUFBTTtFQUMvQztFQUVBLElBQUlpRixXQUFXLENBQUNwRCxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7SUFDL0JULFdBQVcsQ0FBQy9CLEdBQUcsR0FBRzJGLGlCQUFpQixDQUFDM0YsR0FBRztFQUN6QztFQUVBLElBQUk0RixXQUFXLENBQUNwRCxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7SUFDbkMsTUFBTUcsT0FBTyxHQUFHZ0QsaUJBQWlCLENBQUNoRCxPQUFPLEtBQUtYLE9BQU8sSUFBSUEsT0FBTyxDQUFDeEMsTUFBTSxHQUFHQSxNQUFNLENBQUNvRCxXQUFXLENBQUNaLE9BQU8sQ0FBQ3hDLE1BQU0sQ0FBQyxHQUFHd0QsU0FBUyxDQUFDO0lBQ3pIakIsV0FBVyxDQUFDWSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxDQUFDLENBQUM7RUFDckM7RUFFQSxJQUFJaUQsV0FBVyxDQUFDcEQsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFO0lBQ3hDVCxXQUFXLENBQUNjLFlBQVksR0FBRzhDLGlCQUFpQixDQUFDOUMsWUFBWTtFQUMzRDtFQUVBLElBQUkrQyxXQUFXLENBQUNwRCxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7SUFDaENULFdBQVcsQ0FBQ3dCLElBQUksR0FBR29DLGlCQUFpQixDQUFDcEMsSUFBSTtFQUMzQztFQUVBLE9BQU94QixXQUFXO0FBQ3BCO0FBRUF6Qyw2QkFBNkIsR0FBR2lCLHFCQUFxQjtBQUNyRGpCLHVDQUF1QyxHQUFHb0UsK0JBQStCO0FBQ3pFcEUsNkJBQTZCLEdBQUcrRSxxQkFBcUI7QUFDckQvRSxpQ0FBaUMsR0FBR2tCLHlCQUF5QjtBQUM3RGxCLGlDQUFpQyxHQUFHaUcseUJBQXlCO0FBQzdEakcsMEJBQTBCLEdBQUd1QyxrQkFBa0I7QUFDL0N2QyxxQkFBcUIsR0FBRzRGLGFBQWE7QUFDckM1RixnQ0FBZ0MsR0FBR2tHLHdCQUF3QjtBQUMzRGxHLDZCQUE2QixHQUFHdUYscUJBQXFCO0FBQ3JEdkYsb0NBQW9DLEdBQUdnRyw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9yZXF1ZXN0ZGF0YS5qcz8xYzFmIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvb2tpZSA9IHJlcXVpcmUoJy4vY29va2llLmpzJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgaXMgPSByZXF1aXJlKCcuL2lzLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuL2xvZ2dlci5qcycpO1xuY29uc3Qgbm9ybWFsaXplID0gcmVxdWlyZSgnLi9ub3JtYWxpemUuanMnKTtcbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4vb2JqZWN0LmpzJyk7XG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKCcuL3N0cmluZy5qcycpO1xuY29uc3QgdXJsID0gcmVxdWlyZSgnLi91cmwuanMnKTtcbmNvbnN0IGdldElwQWRkcmVzcyA9IHJlcXVpcmUoJy4vdmVuZG9yL2dldElwQWRkcmVzcy5qcycpO1xuXG5jb25zdCBERUZBVUxUX0lOQ0xVREVTID0ge1xuICBpcDogZmFsc2UsXG4gIHJlcXVlc3Q6IHRydWUsXG4gIHVzZXI6IHRydWUsXG59O1xuY29uc3QgREVGQVVMVF9SRVFVRVNUX0lOQ0xVREVTID0gWydjb29raWVzJywgJ2RhdGEnLCAnaGVhZGVycycsICdtZXRob2QnLCAncXVlcnlfc3RyaW5nJywgJ3VybCddO1xuY29uc3QgREVGQVVMVF9VU0VSX0lOQ0xVREVTID0gWydpZCcsICd1c2VybmFtZScsICdlbWFpbCddO1xuXG4vKipcbiAqIE9wdGlvbnMgZGVjaWRpbmcgd2hhdCBwYXJ0cyBvZiB0aGUgcmVxdWVzdCB0byB1c2Ugd2hlbiBlbmhhbmNpbmcgYW4gZXZlbnRcbiAqL1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgY29tcGxldGUgYW5kIHBhcmFtZXRlcml6ZWQgcGF0aCBmcm9tIHRoZSByZXF1ZXN0IG9iamVjdCBhbmQgdXNlcyBpdCB0byBjb25zdHJ1Y3QgdHJhbnNhY3Rpb24gbmFtZS5cbiAqIElmIHRoZSBwYXJhbWV0ZXJpemVkIHRyYW5zYWN0aW9uIG5hbWUgY2Fubm90IGJlIGV4dHJhY3RlZCwgd2UgZmFsbCBiYWNrIHRvIHRoZSByYXcgVVJMLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgdGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGFuZCByZXR1cm5zIHRoZSB0cmFuc2FjdGlvbiBuYW1lIHNvdXJjZVxuICpcbiAqIGVnLiBHRVQgL21vdW50cG9pbnQvdXNlci86aWRcbiAqXG4gKiBAcGFyYW0gcmVxIEEgcmVxdWVzdCBvYmplY3RcbiAqIEBwYXJhbSBvcHRpb25zIFdoYXQgdG8gaW5jbHVkZSBpbiB0aGUgdHJhbnNhY3Rpb24gbmFtZSAobWV0aG9kLCBwYXRoLCBvciBhIGN1c3RvbSByb3V0ZSBuYW1lIHRvIGJlXG4gKiAgICAgICAgICAgICAgICB1c2VkIGluc3RlYWQgb2YgdGhlIHJlcXVlc3QncyByb3V0ZSlcbiAqXG4gKiBAcmV0dXJucyBBIHR1cGxlIG9mIHRoZSBmdWxseSBjb25zdHJ1Y3RlZCB0cmFuc2FjdGlvbiBuYW1lIFswXSBhbmQgaXRzIHNvdXJjZSBbMV0gKGNhbiBiZSBlaXRoZXIgJ3JvdXRlJyBvciAndXJsJylcbiAqIEBkZXByZWNhdGVkIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2OS4gSXQgaXMgbm90IGluIHVzZSBhbnltb3JlLlxuICovXG5mdW5jdGlvbiBleHRyYWN0UGF0aEZvclRyYW5zYWN0aW9uKFxuICByZXEsXG4gIG9wdGlvbnMgPSB7fSxcbikge1xuICBjb25zdCBtZXRob2QgPSByZXEubWV0aG9kICYmIHJlcS5tZXRob2QudG9VcHBlckNhc2UoKTtcblxuICBsZXQgcGF0aCA9ICcnO1xuICBsZXQgc291cmNlID0gJ3VybCc7XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZXJlJ3MgYSBwYXJhbWV0ZXJpemVkIHJvdXRlIHdlIGNhbiB1c2UgKGFzIHRoZXJlIGlzIGluIEV4cHJlc3MpXG4gIGlmIChvcHRpb25zLmN1c3RvbVJvdXRlIHx8IHJlcS5yb3V0ZSkge1xuICAgIHBhdGggPSBvcHRpb25zLmN1c3RvbVJvdXRlIHx8IGAke3JlcS5iYXNlVXJsIHx8ICcnfSR7cmVxLnJvdXRlICYmIHJlcS5yb3V0ZS5wYXRofWA7XG4gICAgc291cmNlID0gJ3JvdXRlJztcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSwganVzdCB0YWtlIHRoZSBvcmlnaW5hbCBVUkxcbiAgZWxzZSBpZiAocmVxLm9yaWdpbmFsVXJsIHx8IHJlcS51cmwpIHtcbiAgICBwYXRoID0gdXJsLnN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudChyZXEub3JpZ2luYWxVcmwgfHwgcmVxLnVybCB8fCAnJyk7XG4gIH1cblxuICBsZXQgbmFtZSA9ICcnO1xuICBpZiAob3B0aW9ucy5tZXRob2QgJiYgbWV0aG9kKSB7XG4gICAgbmFtZSArPSBtZXRob2Q7XG4gIH1cbiAgaWYgKG9wdGlvbnMubWV0aG9kICYmIG9wdGlvbnMucGF0aCkge1xuICAgIG5hbWUgKz0gJyAnO1xuICB9XG4gIGlmIChvcHRpb25zLnBhdGggJiYgcGF0aCkge1xuICAgIG5hbWUgKz0gcGF0aDtcbiAgfVxuXG4gIHJldHVybiBbbmFtZSwgc291cmNlXTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdFVzZXJEYXRhKFxuICB1c2VyXG5cbixcbiAga2V5cyxcbikge1xuICBjb25zdCBleHRyYWN0ZWRVc2VyID0ge307XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSBBcnJheS5pc0FycmF5KGtleXMpID8ga2V5cyA6IERFRkFVTFRfVVNFUl9JTkNMVURFUztcblxuICBhdHRyaWJ1dGVzLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAodXNlciAmJiBrZXkgaW4gdXNlcikge1xuICAgICAgZXh0cmFjdGVkVXNlcltrZXldID0gdXNlcltrZXldO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGV4dHJhY3RlZFVzZXI7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGRhdGEgZnJvbSB0aGUgcmVxdWVzdCBvYmplY3QsIGFjY291bnRpbmcgZm9yIGZyYW1ld29yayBkaWZmZXJlbmNlcy5cbiAqXG4gKiBAcGFyYW0gcmVxIFRoZSByZXF1ZXN0IG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgZGF0YVxuICogQHBhcmFtIG9wdGlvbnMuaW5jbHVkZSBBbiBvcHRpb25hbCBhcnJheSBvZiBrZXlzIHRvIGluY2x1ZGUgaW4gdGhlIG5vcm1hbGl6ZWQgZGF0YS4gRGVmYXVsdHMgdG9cbiAqIERFRkFVTFRfUkVRVUVTVF9JTkNMVURFUyBpZiBub3QgcHJvdmlkZWQuXG4gKiBAcGFyYW0gb3B0aW9ucy5kZXBzIEluamVjdGVkLCBwbGF0Zm9ybS1zcGVjaWZpYyBkZXBlbmRlbmNpZXNcbiAqIEByZXR1cm5zIEFuIG9iamVjdCBjb250YWluaW5nIG5vcm1hbGl6ZWQgcmVxdWVzdCBkYXRhXG4gKlxuICogQGRlcHJlY2F0ZWQgSW5zdGVhZCBtYW51YWxseSBub3JtYWxpemUgdGhlIHJlcXVlc3QgZGF0YSBpbnRvIGEgZm9ybWF0IHRoYXQgZml0cyBgYWRkTm9ybWFsaXplZFJlcXVlc3REYXRhVG9FdmVudGAuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RSZXF1ZXN0RGF0YShcbiAgcmVxLFxuICBvcHRpb25zXG5cbiA9IHt9LFxuKSB7XG4gIGNvbnN0IHsgaW5jbHVkZSA9IERFRkFVTFRfUkVRVUVTVF9JTkNMVURFUyB9ID0gb3B0aW9ucztcbiAgY29uc3QgcmVxdWVzdERhdGEgPSB7fTtcblxuICAvLyBoZWFkZXJzOlxuICAvLyAgIG5vZGUsIGV4cHJlc3MsIGtvYSwgbmV4dGpzOiByZXEuaGVhZGVyc1xuICBjb25zdCBoZWFkZXJzID0gKHJlcS5oZWFkZXJzIHx8IHt9KVxuXG47XG4gIC8vIG1ldGhvZDpcbiAgLy8gICBub2RlLCBleHByZXNzLCBrb2EsIG5leHRqczogcmVxLm1ldGhvZFxuICBjb25zdCBtZXRob2QgPSByZXEubWV0aG9kO1xuICAvLyBob3N0OlxuICAvLyAgIGV4cHJlc3M6IHJlcS5ob3N0bmFtZSBpbiA+IDQgYW5kIHJlcS5ob3N0IGluIDwgNFxuICAvLyAgIGtvYTogcmVxLmhvc3RcbiAgLy8gICBub2RlLCBuZXh0anM6IHJlcS5oZWFkZXJzLmhvc3RcbiAgLy8gRXhwcmVzcyA0IG1pc3Rha2VubHkgc3RyaXBzIG9mZiBwb3J0IG51bWJlciBmcm9tIHJlcS5ob3N0IC8gcmVxLmhvc3RuYW1lIHNvIHdlIGNhbid0IHJlbHkgb24gdGhlbVxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9leHByZXNzanMvZXhwcmVzcy9pc3N1ZXMvMzA0NyNpc3N1ZWNvbW1lbnQtMjM2NjUzMjIzXG4gIC8vIEFsc286IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzE5MTdcbiAgY29uc3QgaG9zdCA9IGhlYWRlcnMuaG9zdCB8fCByZXEuaG9zdG5hbWUgfHwgcmVxLmhvc3QgfHwgJzxubyBob3N0Pic7XG4gIC8vIHByb3RvY29sOlxuICAvLyAgIG5vZGUsIG5leHRqczogPG4vYT5cbiAgLy8gICBleHByZXNzLCBrb2E6IHJlcS5wcm90b2NvbFxuICBjb25zdCBwcm90b2NvbCA9IHJlcS5wcm90b2NvbCA9PT0gJ2h0dHBzJyB8fCAocmVxLnNvY2tldCAmJiByZXEuc29ja2V0LmVuY3J5cHRlZCkgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICAvLyB1cmwgKGluY2x1ZGluZyBwYXRoIGFuZCBxdWVyeSBzdHJpbmcpOlxuICAvLyAgIG5vZGUsIGV4cHJlc3M6IHJlcS5vcmlnaW5hbFVybFxuICAvLyAgIGtvYSwgbmV4dGpzOiByZXEudXJsXG4gIGNvbnN0IG9yaWdpbmFsVXJsID0gcmVxLm9yaWdpbmFsVXJsIHx8IHJlcS51cmwgfHwgJyc7XG4gIC8vIGFic29sdXRlIHVybFxuICBjb25zdCBhYnNvbHV0ZVVybCA9IG9yaWdpbmFsVXJsLnN0YXJ0c1dpdGgocHJvdG9jb2wpID8gb3JpZ2luYWxVcmwgOiBgJHtwcm90b2NvbH06Ly8ke2hvc3R9JHtvcmlnaW5hbFVybH1gO1xuICBpbmNsdWRlLmZvckVhY2goa2V5ID0+IHtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSAnaGVhZGVycyc6IHtcbiAgICAgICAgcmVxdWVzdERhdGEuaGVhZGVycyA9IGhlYWRlcnM7XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBDb29raWUgaGVhZGVyIGluIGNhc2UgY29va2llIGRhdGEgc2hvdWxkIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgZXZlbnRcbiAgICAgICAgaWYgKCFpbmNsdWRlLmluY2x1ZGVzKCdjb29raWVzJykpIHtcbiAgICAgICAgICBkZWxldGUgKHJlcXVlc3REYXRhLmhlYWRlcnMgKS5jb29raWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgSVAgaGVhZGVycyBpbiBjYXNlIElQIGRhdGEgc2hvdWxkIG5vdCBiZSBpbmNsdWRlZCBpbiB0aGUgZXZlbnRcbiAgICAgICAgaWYgKCFpbmNsdWRlLmluY2x1ZGVzKCdpcCcpKSB7XG4gICAgICAgICAgZ2V0SXBBZGRyZXNzLmlwSGVhZGVyTmFtZXMuZm9yRWFjaChpcEhlYWRlck5hbWUgPT4ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgICAgICAgZGVsZXRlIChyZXF1ZXN0RGF0YS5oZWFkZXJzIClbaXBIZWFkZXJOYW1lXTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnbWV0aG9kJzoge1xuICAgICAgICByZXF1ZXN0RGF0YS5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAndXJsJzoge1xuICAgICAgICByZXF1ZXN0RGF0YS51cmwgPSBhYnNvbHV0ZVVybDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdjb29raWVzJzoge1xuICAgICAgICAvLyBjb29raWVzOlxuICAgICAgICAvLyAgIG5vZGUsIGV4cHJlc3MsIGtvYTogcmVxLmhlYWRlcnMuY29va2llXG4gICAgICAgIC8vICAgdmVyY2VsLCBzYWlscy5qcywgZXhwcmVzcyAody8gY29va2llIG1pZGRsZXdhcmUpLCBuZXh0anM6IHJlcS5jb29raWVzXG4gICAgICAgIHJlcXVlc3REYXRhLmNvb2tpZXMgPVxuICAgICAgICAgIC8vIFRPRE8gKHY4IC8gIzUyNTcpOiBXZSdyZSBvbmx5IHNlbmRpbmcgdGhlIGVtcHR5IG9iamVjdCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHNvIHRoZSBsYXN0IGJpdCBjYW5cbiAgICAgICAgICAvLyBjb21lIG9mZiBpbiB2OFxuICAgICAgICAgIHJlcS5jb29raWVzIHx8IChoZWFkZXJzLmNvb2tpZSAmJiBjb29raWUucGFyc2VDb29raWUoaGVhZGVycy5jb29raWUpKSB8fCB7fTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdxdWVyeV9zdHJpbmcnOiB7XG4gICAgICAgIC8vIHF1ZXJ5IHN0cmluZzpcbiAgICAgICAgLy8gICBub2RlOiByZXEudXJsIChyYXcpXG4gICAgICAgIC8vICAgZXhwcmVzcywga29hLCBuZXh0anM6IHJlcS5xdWVyeVxuICAgICAgICByZXF1ZXN0RGF0YS5xdWVyeV9zdHJpbmcgPSBleHRyYWN0UXVlcnlQYXJhbXMocmVxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdkYXRhJzoge1xuICAgICAgICBpZiAobWV0aG9kID09PSAnR0VUJyB8fCBtZXRob2QgPT09ICdIRUFEJykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5PVEU6IEFzIG9mIHY4LCByZXF1ZXN0IGlzICh1bmxlc3MgYSB1c2VyIHNldHMgdGhpcyBtYW51YWxseSkgQUxXQVlTIGEgaHR0cCByZXF1ZXN0XG4gICAgICAgIC8vIFdoaWNoIGRvZXMgbm90IGhhdmUgYSBib2R5IGJ5IGRlZmF1bHRcbiAgICAgICAgLy8gSG93ZXZlciwgaW4gb3VyIGh0dHAgaW5zdHJ1bWVudGF0aW9uLCB3ZSBwYXRjaCB0aGUgcmVxdWVzdCB0byBjYXB0dXJlIHRoZSBib2R5IGFuZCBzdG9yZSBpdCBvbiB0aGVcbiAgICAgICAgLy8gcmVxdWVzdCBhcyBgLmJvZHlgIGFueWhvd1xuICAgICAgICAvLyBJbiB2OSwgd2UgbWF5IHVwZGF0ZSByZXF1ZXN0RGF0YSB0byBvbmx5IHdvcmsgd2l0aCBwbGFpbiBodHRwIHJlcXVlc3RzXG4gICAgICAgIC8vIGJvZHkgZGF0YTpcbiAgICAgICAgLy8gICBleHByZXNzLCBrb2EsIG5leHRqczogcmVxLmJvZHlcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICB3aGVuIHVzaW5nIG5vZGUgYnkgaXRzZWxmLCB5b3UgaGF2ZSB0byByZWFkIHRoZSBpbmNvbWluZyBzdHJlYW0oc2VlXG4gICAgICAgIC8vICAgaHR0cHM6Ly9ub2RlanMuZGV2L2xlYXJuL2dldC1odHRwLXJlcXVlc3QtYm9keS1kYXRhLXVzaW5nLW5vZGVqcyk7IGlmIGEgdXNlciBpcyBkb2luZyB0aGF0LCB3ZSBjYW4ndCBrbm93XG4gICAgICAgIC8vICAgd2hlcmUgdGhleSdyZSBnb2luZyB0byBzdG9yZSB0aGUgZmluYWwgcmVzdWx0LCBzbyB0aGV5J2xsIGhhdmUgdG8gY2FwdHVyZSB0aGlzIGRhdGEgdGhlbXNlbHZlc1xuICAgICAgICBjb25zdCBib2R5ID0gcmVxLmJvZHk7XG4gICAgICAgIGlmIChib2R5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zdCBzdHJpbmdCb2R5ID0gaXMuaXNTdHJpbmcoYm9keSlcbiAgICAgICAgICAgID8gYm9keVxuICAgICAgICAgICAgOiBpcy5pc1BsYWluT2JqZWN0KGJvZHkpXG4gICAgICAgICAgICAgID8gSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplLm5vcm1hbGl6ZShib2R5KSlcbiAgICAgICAgICAgICAgOiBzdHJpbmcudHJ1bmNhdGUoYCR7Ym9keX1gLCAxMDI0KTtcbiAgICAgICAgICBpZiAoc3RyaW5nQm9keSkge1xuICAgICAgICAgICAgcmVxdWVzdERhdGEuZGF0YSA9IHN0cmluZ0JvZHk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChyZXEsIGtleSkpIHtcbiAgICAgICAgICByZXF1ZXN0RGF0YVtrZXldID0gKHJlcSApW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXF1ZXN0RGF0YTtcbn1cblxuLyoqXG4gKiBBZGQgYWxyZWFkeSBub3JtYWxpemVkIHJlcXVlc3QgZGF0YSB0byBhbiBldmVudC5cbiAqIFRoaXMgbXV0YXRlcyB0aGUgcGFzc2VkIGluIGV2ZW50LlxuICovXG5mdW5jdGlvbiBhZGROb3JtYWxpemVkUmVxdWVzdERhdGFUb0V2ZW50KFxuICBldmVudCxcbiAgcmVxLFxuICAvLyBUaGlzIGlzIG5vbi1zdGFuZGFyZCBkYXRhIHRoYXQgaXMgbm90IHBhcnQgb2YgdGhlIHJlZ3VsYXIgSFRUUCByZXF1ZXN0XG4gIGFkZGl0aW9uYWxEYXRhLFxuICBvcHRpb25zLFxuKSB7XG4gIGNvbnN0IGluY2x1ZGUgPSB7XG4gICAgLi4uREVGQVVMVF9JTkNMVURFUyxcbiAgICAuLi4ob3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGUpLFxuICB9O1xuXG4gIGlmIChpbmNsdWRlLnJlcXVlc3QpIHtcbiAgICBjb25zdCBpbmNsdWRlUmVxdWVzdCA9IEFycmF5LmlzQXJyYXkoaW5jbHVkZS5yZXF1ZXN0KSA/IFsuLi5pbmNsdWRlLnJlcXVlc3RdIDogWy4uLkRFRkFVTFRfUkVRVUVTVF9JTkNMVURFU107XG4gICAgaWYgKGluY2x1ZGUuaXApIHtcbiAgICAgIGluY2x1ZGVSZXF1ZXN0LnB1c2goJ2lwJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZXh0cmFjdGVkUmVxdWVzdERhdGEgPSBleHRyYWN0Tm9ybWFsaXplZFJlcXVlc3REYXRhKHJlcSwgeyBpbmNsdWRlOiBpbmNsdWRlUmVxdWVzdCB9KTtcblxuICAgIGV2ZW50LnJlcXVlc3QgPSB7XG4gICAgICAuLi5ldmVudC5yZXF1ZXN0LFxuICAgICAgLi4uZXh0cmFjdGVkUmVxdWVzdERhdGEsXG4gICAgfTtcbiAgfVxuXG4gIGlmIChpbmNsdWRlLnVzZXIpIHtcbiAgICBjb25zdCBleHRyYWN0ZWRVc2VyID1cbiAgICAgIGFkZGl0aW9uYWxEYXRhLnVzZXIgJiYgaXMuaXNQbGFpbk9iamVjdChhZGRpdGlvbmFsRGF0YS51c2VyKVxuICAgICAgICA/IGV4dHJhY3RVc2VyRGF0YShhZGRpdGlvbmFsRGF0YS51c2VyLCBpbmNsdWRlLnVzZXIpXG4gICAgICAgIDoge307XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoZXh0cmFjdGVkVXNlcikubGVuZ3RoKSB7XG4gICAgICBldmVudC51c2VyID0ge1xuICAgICAgICAuLi5leHRyYWN0ZWRVc2VyLFxuICAgICAgICAuLi5ldmVudC51c2VyLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBpZiAoaW5jbHVkZS5pcCkge1xuICAgIGNvbnN0IGlwID0gKHJlcS5oZWFkZXJzICYmIGdldElwQWRkcmVzcy5nZXRDbGllbnRJUEFkZHJlc3MocmVxLmhlYWRlcnMpKSB8fCBhZGRpdGlvbmFsRGF0YS5pcEFkZHJlc3M7XG4gICAgaWYgKGlwKSB7XG4gICAgICBldmVudC51c2VyID0ge1xuICAgICAgICAuLi5ldmVudC51c2VyLFxuICAgICAgICBpcF9hZGRyZXNzOiBpcCxcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWRkIGRhdGEgZnJvbSB0aGUgZ2l2ZW4gcmVxdWVzdCB0byB0aGUgZ2l2ZW4gZXZlbnRcbiAqXG4gKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IHRvIHdoaWNoIHRoZSByZXF1ZXN0IGRhdGEgd2lsbCBiZSBhZGRlZFxuICogQHBhcmFtIHJlcSBSZXF1ZXN0IG9iamVjdFxuICogQHBhcmFtIG9wdGlvbnMuaW5jbHVkZSBGbGFncyB0byBjb250cm9sIHdoYXQgZGF0YSBpcyBpbmNsdWRlZFxuICogQHBhcmFtIG9wdGlvbnMuZGVwcyBJbmplY3RlZCBwbGF0Zm9ybS1zcGVjaWZpYyBkZXBlbmRlbmNpZXNcbiAqIEByZXR1cm5zIFRoZSBtdXRhdGVkIGBFdmVudGAgb2JqZWN0XG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBhZGROb3JtYWxpemVkUmVxdWVzdERhdGFUb0V2ZW50YCBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiBhZGRSZXF1ZXN0RGF0YVRvRXZlbnQoXG4gIGV2ZW50LFxuICByZXEsXG4gIG9wdGlvbnMsXG4pIHtcbiAgY29uc3QgaW5jbHVkZSA9IHtcbiAgICAuLi5ERUZBVUxUX0lOQ0xVREVTLFxuICAgIC4uLihvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZSksXG4gIH07XG5cbiAgaWYgKGluY2x1ZGUucmVxdWVzdCkge1xuICAgIGNvbnN0IGluY2x1ZGVSZXF1ZXN0ID0gQXJyYXkuaXNBcnJheShpbmNsdWRlLnJlcXVlc3QpID8gWy4uLmluY2x1ZGUucmVxdWVzdF0gOiBbLi4uREVGQVVMVF9SRVFVRVNUX0lOQ0xVREVTXTtcbiAgICBpZiAoaW5jbHVkZS5pcCkge1xuICAgICAgaW5jbHVkZVJlcXVlc3QucHVzaCgnaXAnKTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICBjb25zdCBleHRyYWN0ZWRSZXF1ZXN0RGF0YSA9IGV4dHJhY3RSZXF1ZXN0RGF0YShyZXEsIHsgaW5jbHVkZTogaW5jbHVkZVJlcXVlc3QgfSk7XG5cbiAgICBldmVudC5yZXF1ZXN0ID0ge1xuICAgICAgLi4uZXZlbnQucmVxdWVzdCxcbiAgICAgIC4uLmV4dHJhY3RlZFJlcXVlc3REYXRhLFxuICAgIH07XG4gIH1cblxuICBpZiAoaW5jbHVkZS51c2VyKSB7XG4gICAgY29uc3QgZXh0cmFjdGVkVXNlciA9IHJlcS51c2VyICYmIGlzLmlzUGxhaW5PYmplY3QocmVxLnVzZXIpID8gZXh0cmFjdFVzZXJEYXRhKHJlcS51c2VyLCBpbmNsdWRlLnVzZXIpIDoge307XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoZXh0cmFjdGVkVXNlcikubGVuZ3RoKSB7XG4gICAgICBldmVudC51c2VyID0ge1xuICAgICAgICAuLi5ldmVudC51c2VyLFxuICAgICAgICAuLi5leHRyYWN0ZWRVc2VyLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyBjbGllbnQgaXA6XG4gIC8vICAgbm9kZSwgbmV4dGpzOiByZXEuc29ja2V0LnJlbW90ZUFkZHJlc3NcbiAgLy8gICBleHByZXNzLCBrb2E6IHJlcS5pcFxuICAvLyAgIEl0IG1heSBhbHNvIGJlIHNlbnQgYnkgcHJveGllcyBhcyBzcGVjaWZpZWQgaW4gWC1Gb3J3YXJkZWQtRm9yIG9yIHNpbWlsYXIgaGVhZGVyc1xuICBpZiAoaW5jbHVkZS5pcCkge1xuICAgIGNvbnN0IGlwID0gKHJlcS5oZWFkZXJzICYmIGdldElwQWRkcmVzcy5nZXRDbGllbnRJUEFkZHJlc3MocmVxLmhlYWRlcnMpKSB8fCByZXEuaXAgfHwgKHJlcS5zb2NrZXQgJiYgcmVxLnNvY2tldC5yZW1vdGVBZGRyZXNzKTtcbiAgICBpZiAoaXApIHtcbiAgICAgIGV2ZW50LnVzZXIgPSB7XG4gICAgICAgIC4uLmV2ZW50LnVzZXIsXG4gICAgICAgIGlwX2FkZHJlc3M6IGlwLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnQ7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RRdWVyeVBhcmFtcyhyZXEpIHtcbiAgLy8gdXJsIChpbmNsdWRpbmcgcGF0aCBhbmQgcXVlcnkgc3RyaW5nKTpcbiAgLy8gICBub2RlLCBleHByZXNzOiByZXEub3JpZ2luYWxVcmxcbiAgLy8gICBrb2EsIG5leHRqczogcmVxLnVybFxuICBsZXQgb3JpZ2luYWxVcmwgPSByZXEub3JpZ2luYWxVcmwgfHwgcmVxLnVybCB8fCAnJztcblxuICBpZiAoIW9yaWdpbmFsVXJsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlIGBVUkxgIGNvbnN0cnVjdG9yIGNhbid0IGhhbmRsZSBpbnRlcm5hbCBVUkxzIG9mIHRoZSBmb3JtIGAvc29tZS9wYXRoL2hlcmVgLCBzbyBzdGljayBhIGR1bW15IHByb3RvY29sIGFuZFxuICAvLyBob3N0bmFtZSBvbiB0aGUgYmVnaW5uaW5nLiBTaW5jZSB0aGUgcG9pbnQgaGVyZSBpcyBqdXN0IHRvIGdyYWIgdGhlIHF1ZXJ5IHN0cmluZywgaXQgZG9lc24ndCBtYXR0ZXIgd2hhdCB3ZSB1c2UuXG4gIGlmIChvcmlnaW5hbFVybC5zdGFydHNXaXRoKCcvJykpIHtcbiAgICBvcmlnaW5hbFVybCA9IGBodHRwOi8vZG9ncy5hcmUuZ3JlYXQke29yaWdpbmFsVXJsfWA7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gcmVxLnF1ZXJ5IHx8IG5ldyBVUkwob3JpZ2luYWxVcmwpLnNlYXJjaC5zbGljZSgxKTtcbiAgICByZXR1cm4gcXVlcnlQYXJhbXMubGVuZ3RoID8gcXVlcnlQYXJhbXMgOiB1bmRlZmluZWQ7XG4gIH0gY2F0Y2ggKGUyKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybXMgYSBgSGVhZGVyc2Agb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgYFdlYiBGZXRjaCBBUElgIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGVhZGVycykgaW50byBhIHNpbXBsZSBrZXktdmFsdWUgZGljdC5cbiAqIFRoZSBoZWFkZXIga2V5cyB3aWxsIGJlIGxvd2VyIGNhc2U6IGUuZy4gQSBcIkNvbnRlbnQtVHlwZVwiIGhlYWRlciB3aWxsIGJlIHN0b3JlZCBhcyBcImNvbnRlbnQtdHlwZVwiLlxuICovXG4vLyBUT0RPKHY4KTogTWFrZSB0aGlzIGZ1bmN0aW9uIHJldHVybiB1bmRlZmluZWQgd2hlbiB0aGUgZXh0cmFjdGlvbiBmYWlscy5cbmZ1bmN0aW9uIHdpbnRlckNHSGVhZGVyc1RvRGljdCh3aW50ZXJDR0hlYWRlcnMpIHtcbiAgY29uc3QgaGVhZGVycyA9IHt9O1xuICB0cnkge1xuICAgIHdpbnRlckNHSGVhZGVycy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBXZSBjaGVjayB0aGF0IHZhbHVlIGlzIGEgc3RyaW5nIGV2ZW4gdGhvdWdoIGl0IG1pZ2h0IGJlIHJlZHVuZGFudCB0byBtYWtlIHN1cmUgcHJvdG90eXBlIHBvbGx1dGlvbiBpcyBub3QgcG9zc2libGUuXG4gICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgbG9nZ2VyLmxvZ2dlci53YXJuKCdTZW50cnkgZmFpbGVkIGV4dHJhY3RpbmcgaGVhZGVycyBmcm9tIGEgcmVxdWVzdCBvYmplY3QuIElmIHlvdSBzZWUgdGhpcywgcGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cblxuICByZXR1cm4gaGVhZGVycztcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGNvbW1vbiByZXF1ZXN0IGhlYWRlcnMgdG8gYSBzaW1wbGUgZGljdGlvbmFyeS5cbiAqL1xuZnVuY3Rpb24gaGVhZGVyc1RvRGljdChyZXFIZWFkZXJzKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHRyeSB7XG4gICAgT2JqZWN0LmVudHJpZXMocmVxSGVhZGVycykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgIGxvZ2dlci5sb2dnZXIud2FybignU2VudHJ5IGZhaWxlZCBleHRyYWN0aW5nIGhlYWRlcnMgZnJvbSBhIHJlcXVlc3Qgb2JqZWN0LiBJZiB5b3Ugc2VlIHRoaXMsIHBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICB9XG5cbiAgcmV0dXJuIGhlYWRlcnM7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBgUmVxdWVzdGAgb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgYFdlYiBGZXRjaCBBUElgIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSGVhZGVycykgaW50byB0aGUgZm9ybWF0IHRoYXQgdGhlIGBSZXF1ZXN0RGF0YWAgaW50ZWdyYXRpb24gdW5kZXJzdGFuZHMuXG4gKi9cbmZ1bmN0aW9uIHdpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGEocmVxKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSB3aW50ZXJDR0hlYWRlcnNUb0RpY3QocmVxLmhlYWRlcnMpO1xuXG4gIHJldHVybiB7XG4gICAgbWV0aG9kOiByZXEubWV0aG9kLFxuICAgIHVybDogcmVxLnVybCxcbiAgICBxdWVyeV9zdHJpbmc6IGV4dHJhY3RRdWVyeVBhcmFtc0Zyb21VcmwocmVxLnVybCksXG4gICAgaGVhZGVycyxcbiAgICAvLyBUT0RPOiBDYW4gd2UgZXh0cmFjdCBib2R5IGRhdGEgZnJvbSB0aGUgcmVxdWVzdD9cbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgSFRUUCByZXF1ZXN0IG9iamVjdCB0byBSZXF1ZXN0RXZlbnREYXRhIHRvIGJlIHBhc3NlZCBhcyBub3JtYWxpemVkUmVxdWVzdC5cbiAqIEluc3RlYWQgb2YgYWxsb3dpbmcgYFBvbHltb3JwaGljUmVxdWVzdGAgdG8gYmUgcGFzc2VkLFxuICogd2Ugd2FudCB0byBiZSBtb3JlIHNwZWNpZmljIGFuZCBnZW5lcmFsbHkgcmVxdWlyZSBhIGh0dHAuSW5jb21pbmdNZXNzYWdlLWxpa2Ugb2JqZWN0LlxuICovXG5mdW5jdGlvbiBodHRwUmVxdWVzdFRvUmVxdWVzdERhdGEocmVxdWVzdFxuXG4pIHtcbiAgY29uc3QgaGVhZGVycyA9IHJlcXVlc3QuaGVhZGVycyB8fCB7fTtcbiAgY29uc3QgaG9zdCA9IGhlYWRlcnMuaG9zdCB8fCAnPG5vIGhvc3Q+JztcbiAgY29uc3QgcHJvdG9jb2wgPSByZXF1ZXN0LnNvY2tldCAmJiAocmVxdWVzdC5zb2NrZXQgKS5lbmNyeXB0ZWQgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICBjb25zdCBvcmlnaW5hbFVybCA9IHJlcXVlc3QudXJsIHx8ICcnO1xuICBjb25zdCBhYnNvbHV0ZVVybCA9IG9yaWdpbmFsVXJsLnN0YXJ0c1dpdGgocHJvdG9jb2wpID8gb3JpZ2luYWxVcmwgOiBgJHtwcm90b2NvbH06Ly8ke2hvc3R9JHtvcmlnaW5hbFVybH1gO1xuXG4gIC8vIFRoaXMgaXMgbm9uLXN0YW5kYXJkLCBidXQgbWF5IGJlIHNvbWV0aW1lcyBzZXRcbiAgLy8gSXQgbWF5IGJlIG92ZXJ3cml0dGVuIGxhdGVyIGJ5IG91ciBvd24gYm9keSBoYW5kbGluZ1xuICBjb25zdCBkYXRhID0gKHJlcXVlc3QgKS5ib2R5IHx8IHVuZGVmaW5lZDtcblxuICAvLyBUaGlzIGlzIG5vbi1zdGFuZGFyZCwgYnV0IG1heSBiZSBzZXQgb24gZS5nLiBOZXh0LmpzIG9yIEV4cHJlc3MgcmVxdWVzdHNcbiAgY29uc3QgY29va2llcyA9IChyZXF1ZXN0ICkuY29va2llcztcblxuICByZXR1cm4gb2JqZWN0LmRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICB1cmw6IGFic29sdXRlVXJsLFxuICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgcXVlcnlfc3RyaW5nOiBleHRyYWN0UXVlcnlQYXJhbXNGcm9tVXJsKG9yaWdpbmFsVXJsKSxcbiAgICBoZWFkZXJzOiBoZWFkZXJzVG9EaWN0KGhlYWRlcnMpLFxuICAgIGNvb2tpZXMsXG4gICAgZGF0YSxcbiAgfSk7XG59XG5cbi8qKiBFeHRyYWN0IHRoZSBxdWVyeSBwYXJhbXMgZnJvbSBhbiBVUkwuICovXG5mdW5jdGlvbiBleHRyYWN0UXVlcnlQYXJhbXNGcm9tVXJsKHVybCkge1xuICAvLyB1cmwgaXMgcGF0aCBhbmQgcXVlcnkgc3RyaW5nXG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBUaGUgYFVSTGAgY29uc3RydWN0b3IgY2FuJ3QgaGFuZGxlIGludGVybmFsIFVSTHMgb2YgdGhlIGZvcm0gYC9zb21lL3BhdGgvaGVyZWAsIHNvIHN0aWNrIGEgZHVtbXkgcHJvdG9jb2wgYW5kXG4gICAgLy8gaG9zdG5hbWUgYXMgdGhlIGJhc2UuIFNpbmNlIHRoZSBwb2ludCBoZXJlIGlzIGp1c3QgdG8gZ3JhYiB0aGUgcXVlcnkgc3RyaW5nLCBpdCBkb2Vzbid0IG1hdHRlciB3aGF0IHdlIHVzZS5cbiAgICBjb25zdCBxdWVyeVBhcmFtcyA9IG5ldyBVUkwodXJsLCAnaHR0cDovL2RvZ3MuYXJlLmdyZWF0Jykuc2VhcmNoLnNsaWNlKDEpO1xuICAgIHJldHVybiBxdWVyeVBhcmFtcy5sZW5ndGggPyBxdWVyeVBhcmFtcyA6IHVuZGVmaW5lZDtcbiAgfSBjYXRjaCAoZTMpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3ROb3JtYWxpemVkUmVxdWVzdERhdGEoXG4gIG5vcm1hbGl6ZWRSZXF1ZXN0LFxuICB7IGluY2x1ZGUgfSxcbikge1xuICBjb25zdCBpbmNsdWRlS2V5cyA9IGluY2x1ZGUgPyAoQXJyYXkuaXNBcnJheShpbmNsdWRlKSA/IGluY2x1ZGUgOiBERUZBVUxUX1JFUVVFU1RfSU5DTFVERVMpIDogW107XG5cbiAgY29uc3QgcmVxdWVzdERhdGEgPSB7fTtcbiAgY29uc3QgaGVhZGVycyA9IHsgLi4ubm9ybWFsaXplZFJlcXVlc3QuaGVhZGVycyB9O1xuXG4gIGlmIChpbmNsdWRlS2V5cy5pbmNsdWRlcygnaGVhZGVycycpKSB7XG4gICAgcmVxdWVzdERhdGEuaGVhZGVycyA9IGhlYWRlcnM7XG5cbiAgICAvLyBSZW1vdmUgdGhlIENvb2tpZSBoZWFkZXIgaW4gY2FzZSBjb29raWUgZGF0YSBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHRoZSBldmVudFxuICAgIGlmICghaW5jbHVkZS5pbmNsdWRlcygnY29va2llcycpKSB7XG4gICAgICBkZWxldGUgKGhlYWRlcnMgKS5jb29raWU7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIElQIGhlYWRlcnMgaW4gY2FzZSBJUCBkYXRhIHNob3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIGV2ZW50XG4gICAgaWYgKCFpbmNsdWRlLmluY2x1ZGVzKCdpcCcpKSB7XG4gICAgICBnZXRJcEFkZHJlc3MuaXBIZWFkZXJOYW1lcy5mb3JFYWNoKGlwSGVhZGVyTmFtZSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgZGVsZXRlIChoZWFkZXJzIClbaXBIZWFkZXJOYW1lXTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpbmNsdWRlS2V5cy5pbmNsdWRlcygnbWV0aG9kJykpIHtcbiAgICByZXF1ZXN0RGF0YS5tZXRob2QgPSBub3JtYWxpemVkUmVxdWVzdC5tZXRob2Q7XG4gIH1cblxuICBpZiAoaW5jbHVkZUtleXMuaW5jbHVkZXMoJ3VybCcpKSB7XG4gICAgcmVxdWVzdERhdGEudXJsID0gbm9ybWFsaXplZFJlcXVlc3QudXJsO1xuICB9XG5cbiAgaWYgKGluY2x1ZGVLZXlzLmluY2x1ZGVzKCdjb29raWVzJykpIHtcbiAgICBjb25zdCBjb29raWVzID0gbm9ybWFsaXplZFJlcXVlc3QuY29va2llcyB8fCAoaGVhZGVycyAmJiBoZWFkZXJzLmNvb2tpZSA/IGNvb2tpZS5wYXJzZUNvb2tpZShoZWFkZXJzLmNvb2tpZSkgOiB1bmRlZmluZWQpO1xuICAgIHJlcXVlc3REYXRhLmNvb2tpZXMgPSBjb29raWVzIHx8IHt9O1xuICB9XG5cbiAgaWYgKGluY2x1ZGVLZXlzLmluY2x1ZGVzKCdxdWVyeV9zdHJpbmcnKSkge1xuICAgIHJlcXVlc3REYXRhLnF1ZXJ5X3N0cmluZyA9IG5vcm1hbGl6ZWRSZXF1ZXN0LnF1ZXJ5X3N0cmluZztcbiAgfVxuXG4gIGlmIChpbmNsdWRlS2V5cy5pbmNsdWRlcygnZGF0YScpKSB7XG4gICAgcmVxdWVzdERhdGEuZGF0YSA9IG5vcm1hbGl6ZWRSZXF1ZXN0LmRhdGE7XG4gIH1cblxuICByZXR1cm4gcmVxdWVzdERhdGE7XG59XG5cbmV4cG9ydHMuREVGQVVMVF9VU0VSX0lOQ0xVREVTID0gREVGQVVMVF9VU0VSX0lOQ0xVREVTO1xuZXhwb3J0cy5hZGROb3JtYWxpemVkUmVxdWVzdERhdGFUb0V2ZW50ID0gYWRkTm9ybWFsaXplZFJlcXVlc3REYXRhVG9FdmVudDtcbmV4cG9ydHMuYWRkUmVxdWVzdERhdGFUb0V2ZW50ID0gYWRkUmVxdWVzdERhdGFUb0V2ZW50O1xuZXhwb3J0cy5leHRyYWN0UGF0aEZvclRyYW5zYWN0aW9uID0gZXh0cmFjdFBhdGhGb3JUcmFuc2FjdGlvbjtcbmV4cG9ydHMuZXh0cmFjdFF1ZXJ5UGFyYW1zRnJvbVVybCA9IGV4dHJhY3RRdWVyeVBhcmFtc0Zyb21Vcmw7XG5leHBvcnRzLmV4dHJhY3RSZXF1ZXN0RGF0YSA9IGV4dHJhY3RSZXF1ZXN0RGF0YTtcbmV4cG9ydHMuaGVhZGVyc1RvRGljdCA9IGhlYWRlcnNUb0RpY3Q7XG5leHBvcnRzLmh0dHBSZXF1ZXN0VG9SZXF1ZXN0RGF0YSA9IGh0dHBSZXF1ZXN0VG9SZXF1ZXN0RGF0YTtcbmV4cG9ydHMud2ludGVyQ0dIZWFkZXJzVG9EaWN0ID0gd2ludGVyQ0dIZWFkZXJzVG9EaWN0O1xuZXhwb3J0cy53aW50ZXJDR1JlcXVlc3RUb1JlcXVlc3REYXRhID0gd2ludGVyQ0dSZXF1ZXN0VG9SZXF1ZXN0RGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3RkYXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29va2llIiwicmVxdWlyZSIsImRlYnVnQnVpbGQiLCJpcyIsImxvZ2dlciIsIm5vcm1hbGl6ZSIsIm9iamVjdCIsInN0cmluZyIsInVybCIsImdldElwQWRkcmVzcyIsIkRFRkFVTFRfSU5DTFVERVMiLCJpcCIsInJlcXVlc3QiLCJ1c2VyIiwiREVGQVVMVF9SRVFVRVNUX0lOQ0xVREVTIiwiREVGQVVMVF9VU0VSX0lOQ0xVREVTIiwiZXh0cmFjdFBhdGhGb3JUcmFuc2FjdGlvbiIsInJlcSIsIm9wdGlvbnMiLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInBhdGgiLCJzb3VyY2UiLCJjdXN0b21Sb3V0ZSIsInJvdXRlIiwiYmFzZVVybCIsIm9yaWdpbmFsVXJsIiwic3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50IiwibmFtZSIsImV4dHJhY3RVc2VyRGF0YSIsImtleXMiLCJleHRyYWN0ZWRVc2VyIiwiYXR0cmlidXRlcyIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJrZXkiLCJleHRyYWN0UmVxdWVzdERhdGEiLCJpbmNsdWRlIiwicmVxdWVzdERhdGEiLCJoZWFkZXJzIiwiaG9zdCIsImhvc3RuYW1lIiwicHJvdG9jb2wiLCJzb2NrZXQiLCJlbmNyeXB0ZWQiLCJhYnNvbHV0ZVVybCIsInN0YXJ0c1dpdGgiLCJpbmNsdWRlcyIsImlwSGVhZGVyTmFtZXMiLCJpcEhlYWRlck5hbWUiLCJjb29raWVzIiwicGFyc2VDb29raWUiLCJxdWVyeV9zdHJpbmciLCJleHRyYWN0UXVlcnlQYXJhbXMiLCJib2R5IiwidW5kZWZpbmVkIiwic3RyaW5nQm9keSIsImlzU3RyaW5nIiwiaXNQbGFpbk9iamVjdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0cnVuY2F0ZSIsImRhdGEiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhZGROb3JtYWxpemVkUmVxdWVzdERhdGFUb0V2ZW50IiwiZXZlbnQiLCJhZGRpdGlvbmFsRGF0YSIsImluY2x1ZGVSZXF1ZXN0IiwicHVzaCIsImV4dHJhY3RlZFJlcXVlc3REYXRhIiwiZXh0cmFjdE5vcm1hbGl6ZWRSZXF1ZXN0RGF0YSIsImxlbmd0aCIsImdldENsaWVudElQQWRkcmVzcyIsImlwQWRkcmVzcyIsImlwX2FkZHJlc3MiLCJhZGRSZXF1ZXN0RGF0YVRvRXZlbnQiLCJyZW1vdGVBZGRyZXNzIiwicXVlcnlQYXJhbXMiLCJxdWVyeSIsIlVSTCIsInNlYXJjaCIsInNsaWNlIiwiZTIiLCJ3aW50ZXJDR0hlYWRlcnNUb0RpY3QiLCJ3aW50ZXJDR0hlYWRlcnMiLCJlIiwiREVCVUdfQlVJTEQiLCJ3YXJuIiwiaGVhZGVyc1RvRGljdCIsInJlcUhlYWRlcnMiLCJjcmVhdGUiLCJlbnRyaWVzIiwid2ludGVyQ0dSZXF1ZXN0VG9SZXF1ZXN0RGF0YSIsImV4dHJhY3RRdWVyeVBhcmFtc0Zyb21VcmwiLCJodHRwUmVxdWVzdFRvUmVxdWVzdERhdGEiLCJkcm9wVW5kZWZpbmVkS2V5cyIsImUzIiwibm9ybWFsaXplZFJlcXVlc3QiLCJpbmNsdWRlS2V5cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/severity.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/severity.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * @deprecated This variable has been deprecated and will be removed in the next major version.\n */\nconst validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nfunction severityLevelFromString(level) {\n  return level === 'warn' ? 'warning' : ['fatal', 'error', 'warning', 'log', 'info', 'debug'].includes(level) ? level : 'log';\n}\nexports.severityLevelFromString = severityLevelFromString;\nexports.validSeverityLevels = validSeverityLevels;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvc2V2ZXJpdHkuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQzs7QUFFakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsdUJBQXVCQSxDQUFDQyxLQUFLLEVBQUU7RUFDdEMsT0FDRUEsS0FBSyxLQUFLLE1BQU0sR0FBRyxTQUFTLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDQyxRQUFRLENBQUNELEtBQUssQ0FBQyxHQUFHQSxLQUFLLEdBQUcsS0FBSztBQUV4SDtBQUVBSiwrQkFBK0IsR0FBR0csdUJBQXVCO0FBQ3pESCwyQkFBMkIsR0FBR0UsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvc2V2ZXJpdHkuanM/MWMyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFRoaXMgdmFyaWFibGUgaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gKi9cbmNvbnN0IHZhbGlkU2V2ZXJpdHlMZXZlbHMgPSBbJ2ZhdGFsJywgJ2Vycm9yJywgJ3dhcm5pbmcnLCAnbG9nJywgJ2luZm8nLCAnZGVidWcnXTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZy1iYXNlZCBsZXZlbCBpbnRvIGEgYFNldmVyaXR5TGV2ZWxgLCBub3JtYWxpemluZyBpdCBhbG9uZyB0aGUgd2F5LlxuICpcbiAqIEBwYXJhbSBsZXZlbCBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgZGVzaXJlZCBgU2V2ZXJpdHlMZXZlbGAuXG4gKiBAcmV0dXJucyBUaGUgYFNldmVyaXR5TGV2ZWxgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIHN0cmluZywgb3IgJ2xvZycgaWYgdGhlIHN0cmluZyBpc24ndCBhIHZhbGlkIGxldmVsLlxuICovXG5mdW5jdGlvbiBzZXZlcml0eUxldmVsRnJvbVN0cmluZyhsZXZlbCkge1xuICByZXR1cm4gKFxuICAgIGxldmVsID09PSAnd2FybicgPyAnd2FybmluZycgOiBbJ2ZhdGFsJywgJ2Vycm9yJywgJ3dhcm5pbmcnLCAnbG9nJywgJ2luZm8nLCAnZGVidWcnXS5pbmNsdWRlcyhsZXZlbCkgPyBsZXZlbCA6ICdsb2cnXG4gICkgO1xufVxuXG5leHBvcnRzLnNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nID0gc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmc7XG5leHBvcnRzLnZhbGlkU2V2ZXJpdHlMZXZlbHMgPSB2YWxpZFNldmVyaXR5TGV2ZWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2V2ZXJpdHkuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2YWxpZFNldmVyaXR5TGV2ZWxzIiwic2V2ZXJpdHlMZXZlbEZyb21TdHJpbmciLCJsZXZlbCIsImluY2x1ZGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/severity.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst STACKTRACE_FRAME_LIMIT = 50;\nconst UNKNOWN_FUNCTION = '?';\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nfunction createStackParser(...parsers) {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n  return (stack, skipFirstLines = 0, framesToPop = 0) => {\n    const frames = [];\n    const lines = stack.split('\\n');\n    for (let i = skipFirstLines; i < lines.length; i++) {\n      const line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n      if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n        break;\n      }\n    }\n    return stripSentryFramesAndReverse(frames.slice(framesToPop));\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nfunction stackParserFromStackParserOptions(stackParser) {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nfunction stripSentryFramesAndReverse(stack) {\n  if (!stack.length) {\n    return [];\n  }\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the hub itself, making it:\n    //\n    //   Sentry.captureException()\n    //   getCurrentHub().captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n    }\n  }\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || getLastStackFrame(localStack).filename,\n    function: frame.function || UNKNOWN_FUNCTION\n  }));\n}\nfunction getLastStackFrame(arr) {\n  return arr[arr.length - 1] || {};\n}\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nfunction getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Get's stack frames from an event without needing to check for undefined properties.\n */\nfunction getFramesFromEvent(event) {\n  const exception = event.exception;\n  if (exception) {\n    const frames = [];\n    try {\n      // @ts-expect-error Object could be undefined\n      exception.values.forEach(value => {\n        // @ts-expect-error Value could be undefined\n        if (value.stacktrace.frames) {\n          // @ts-expect-error Value could be undefined\n          frames.push(...value.stacktrace.frames);\n        }\n      });\n      return frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\nexports.UNKNOWN_FUNCTION = UNKNOWN_FUNCTION;\nexports.createStackParser = createStackParser;\nexports.getFramesFromEvent = getFramesFromEvent;\nexports.getFunctionName = getFunctionName;\nexports.stackParserFromStackParserOptions = stackParserFromStackParserOptions;\nexports.stripSentryFramesAndReverse = stripSentryFramesAndReverse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvc3RhY2t0cmFjZS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLHNCQUFzQixHQUFHLEVBQUU7QUFDakMsTUFBTUMsZ0JBQWdCLEdBQUcsR0FBRztBQUM1QjtBQUNBLE1BQU1DLG9CQUFvQixHQUFHLGlCQUFpQjtBQUM5QyxNQUFNQyxrQkFBa0IsR0FBRyxpQ0FBaUM7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsaUJBQWlCQSxDQUFDLEdBQUdDLE9BQU8sRUFBRTtFQUNyQyxNQUFNQyxhQUFhLEdBQUdELE9BQU8sQ0FBQ0UsSUFBSSxDQUFDLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxLQUFLRCxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUdDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxHQUFHLENBQUNDLENBQUMsSUFBSUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBRXhFLE9BQU8sQ0FBQ0MsS0FBSyxFQUFFQyxjQUFjLEdBQUcsQ0FBQyxFQUFFQyxXQUFXLEdBQUcsQ0FBQyxLQUFLO0lBQ3JELE1BQU1DLE1BQU0sR0FBRyxFQUFFO0lBQ2pCLE1BQU1DLEtBQUssR0FBR0osS0FBSyxDQUFDSyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBRS9CLEtBQUssSUFBSUMsQ0FBQyxHQUFHTCxjQUFjLEVBQUVLLENBQUMsR0FBR0YsS0FBSyxDQUFDRyxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO01BQ2xELE1BQU1FLElBQUksR0FBR0osS0FBSyxDQUFDRSxDQUFDLENBQUM7TUFDckI7TUFDQTtNQUNBO01BQ0E7TUFDQSxJQUFJRSxJQUFJLENBQUNELE1BQU0sR0FBRyxJQUFJLEVBQUU7UUFDdEI7TUFDRjs7TUFFQTtNQUNBO01BQ0EsTUFBTUUsV0FBVyxHQUFHbkIsb0JBQW9CLENBQUNvQixJQUFJLENBQUNGLElBQUksQ0FBQyxHQUFHQSxJQUFJLENBQUNHLE9BQU8sQ0FBQ3JCLG9CQUFvQixFQUFFLElBQUksQ0FBQyxHQUFHa0IsSUFBSTs7TUFFckc7TUFDQTtNQUNBLElBQUlDLFdBQVcsQ0FBQ0csS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFFO1FBQ25DO01BQ0Y7TUFFQSxLQUFLLE1BQU1DLE1BQU0sSUFBSW5CLGFBQWEsRUFBRTtRQUNsQyxNQUFNb0IsS0FBSyxHQUFHRCxNQUFNLENBQUNKLFdBQVcsQ0FBQztRQUVqQyxJQUFJSyxLQUFLLEVBQUU7VUFDVFgsTUFBTSxDQUFDWSxJQUFJLENBQUNELEtBQUssQ0FBQztVQUNsQjtRQUNGO01BQ0Y7TUFFQSxJQUFJWCxNQUFNLENBQUNJLE1BQU0sSUFBSW5CLHNCQUFzQixHQUFHYyxXQUFXLEVBQUU7UUFDekQ7TUFDRjtJQUNGO0lBRUEsT0FBT2MsMkJBQTJCLENBQUNiLE1BQU0sQ0FBQ2MsS0FBSyxDQUFDZixXQUFXLENBQUMsQ0FBQztFQUMvRCxDQUFDO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU2dCLGlDQUFpQ0EsQ0FBQ0MsV0FBVyxFQUFFO0VBQ3RELElBQUlDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixXQUFXLENBQUMsRUFBRTtJQUM5QixPQUFPM0IsaUJBQWlCLENBQUMsR0FBRzJCLFdBQVcsQ0FBQztFQUMxQztFQUNBLE9BQU9BLFdBQVc7QUFDcEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0gsMkJBQTJCQSxDQUFDaEIsS0FBSyxFQUFFO0VBQzFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDTyxNQUFNLEVBQUU7SUFDakIsT0FBTyxFQUFFO0VBQ1g7RUFFQSxNQUFNZSxVQUFVLEdBQUdGLEtBQUssQ0FBQ0csSUFBSSxDQUFDdkIsS0FBSyxDQUFDOztFQUVwQztFQUNBLElBQUksZUFBZSxDQUFDVSxJQUFJLENBQUNjLGlCQUFpQixDQUFDRixVQUFVLENBQUMsQ0FBQ0csUUFBUSxJQUFJLEVBQUUsQ0FBQyxFQUFFO0lBQ3RFSCxVQUFVLENBQUNJLEdBQUcsQ0FBQyxDQUFDO0VBQ2xCOztFQUVBO0VBQ0FKLFVBQVUsQ0FBQ0ssT0FBTyxDQUFDLENBQUM7O0VBRXBCO0VBQ0EsSUFBSXBDLGtCQUFrQixDQUFDbUIsSUFBSSxDQUFDYyxpQkFBaUIsQ0FBQ0YsVUFBVSxDQUFDLENBQUNHLFFBQVEsSUFBSSxFQUFFLENBQUMsRUFBRTtJQUN6RUgsVUFBVSxDQUFDSSxHQUFHLENBQUMsQ0FBQzs7SUFFaEI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBLElBQUluQyxrQkFBa0IsQ0FBQ21CLElBQUksQ0FBQ2MsaUJBQWlCLENBQUNGLFVBQVUsQ0FBQyxDQUFDRyxRQUFRLElBQUksRUFBRSxDQUFDLEVBQUU7TUFDekVILFVBQVUsQ0FBQ0ksR0FBRyxDQUFDLENBQUM7SUFDbEI7RUFDRjtFQUVBLE9BQU9KLFVBQVUsQ0FBQ0wsS0FBSyxDQUFDLENBQUMsRUFBRTdCLHNCQUFzQixDQUFDLENBQUNVLEdBQUcsQ0FBQ2dCLEtBQUssS0FBSztJQUMvRCxHQUFHQSxLQUFLO0lBQ1JjLFFBQVEsRUFBRWQsS0FBSyxDQUFDYyxRQUFRLElBQUlKLGlCQUFpQixDQUFDRixVQUFVLENBQUMsQ0FBQ00sUUFBUTtJQUNsRUgsUUFBUSxFQUFFWCxLQUFLLENBQUNXLFFBQVEsSUFBSXBDO0VBQzlCLENBQUMsQ0FBQyxDQUFDO0FBQ0w7QUFFQSxTQUFTbUMsaUJBQWlCQSxDQUFDSyxHQUFHLEVBQUU7RUFDOUIsT0FBT0EsR0FBRyxDQUFDQSxHQUFHLENBQUN0QixNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDO0FBRUEsTUFBTXVCLG1CQUFtQixHQUFHLGFBQWE7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGVBQWVBLENBQUNDLEVBQUUsRUFBRTtFQUMzQixJQUFJO0lBQ0YsSUFBSSxDQUFDQSxFQUFFLElBQUksT0FBT0EsRUFBRSxLQUFLLFVBQVUsRUFBRTtNQUNuQyxPQUFPRixtQkFBbUI7SUFDNUI7SUFDQSxPQUFPRSxFQUFFLENBQUNDLElBQUksSUFBSUgsbUJBQW1CO0VBQ3ZDLENBQUMsQ0FBQyxPQUFPSSxDQUFDLEVBQUU7SUFDVjtJQUNBO0lBQ0EsT0FBT0osbUJBQW1CO0VBQzVCO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0ssa0JBQWtCQSxDQUFDQyxLQUFLLEVBQUU7RUFDakMsTUFBTUMsU0FBUyxHQUFHRCxLQUFLLENBQUNDLFNBQVM7RUFFakMsSUFBSUEsU0FBUyxFQUFFO0lBQ2IsTUFBTWxDLE1BQU0sR0FBRyxFQUFFO0lBQ2pCLElBQUk7TUFDRjtNQUNBa0MsU0FBUyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ3BELEtBQUssSUFBSTtRQUNoQztRQUNBLElBQUlBLEtBQUssQ0FBQ3FELFVBQVUsQ0FBQ3JDLE1BQU0sRUFBRTtVQUMzQjtVQUNBQSxNQUFNLENBQUNZLElBQUksQ0FBQyxHQUFHNUIsS0FBSyxDQUFDcUQsVUFBVSxDQUFDckMsTUFBTSxDQUFDO1FBQ3pDO01BQ0YsQ0FBQyxDQUFDO01BQ0YsT0FBT0EsTUFBTTtJQUNmLENBQUMsQ0FBQyxPQUFPc0MsR0FBRyxFQUFFO01BQ1osT0FBT0MsU0FBUztJQUNsQjtFQUNGO0VBQ0EsT0FBT0EsU0FBUztBQUNsQjtBQUVBeEQsd0JBQXdCLEdBQUdHLGdCQUFnQjtBQUMzQ0gseUJBQXlCLEdBQUdNLGlCQUFpQjtBQUM3Q04sMEJBQTBCLEdBQUdpRCxrQkFBa0I7QUFDL0NqRCx1QkFBdUIsR0FBRzZDLGVBQWU7QUFDekM3Qyx5Q0FBeUMsR0FBR2dDLGlDQUFpQztBQUM3RWhDLG1DQUFtQyxHQUFHOEIsMkJBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvc3RhY2t0cmFjZS5qcz82ODgxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IFNUQUNLVFJBQ0VfRlJBTUVfTElNSVQgPSA1MDtcbmNvbnN0IFVOS05PV05fRlVOQ1RJT04gPSAnPyc7XG4vLyBVc2VkIHRvIHNhbml0aXplIHdlYnBhY2sgKGVycm9yOiAqKSB3cmFwcGVkIHN0YWNrIGVycm9yc1xuY29uc3QgV0VCUEFDS19FUlJPUl9SRUdFWFAgPSAvXFwoZXJyb3I6ICguKilcXCkvO1xuY29uc3QgU1RSSVBfRlJBTUVfUkVHRVhQID0gL2NhcHR1cmVNZXNzYWdlfGNhcHR1cmVFeGNlcHRpb24vO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBwYXJzZXIgd2l0aCB0aGUgc3VwcGxpZWQgbGluZSBwYXJzZXJzXG4gKlxuICogU3RhY2tGcmFtZXMgYXJlIHJldHVybmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyIGZvciBTZW50cnkgRXhjZXB0aW9uXG4gKiBmcmFtZXMgYW5kIHdpdGggU2VudHJ5IFNESyBpbnRlcm5hbCBmcmFtZXMgcmVtb3ZlZCBmcm9tIHRoZSB0b3AgYW5kIGJvdHRvbVxuICpcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3RhY2tQYXJzZXIoLi4ucGFyc2Vycykge1xuICBjb25zdCBzb3J0ZWRQYXJzZXJzID0gcGFyc2Vycy5zb3J0KChhLCBiKSA9PiBhWzBdIC0gYlswXSkubWFwKHAgPT4gcFsxXSk7XG5cbiAgcmV0dXJuIChzdGFjaywgc2tpcEZpcnN0TGluZXMgPSAwLCBmcmFtZXNUb1BvcCA9IDApID0+IHtcbiAgICBjb25zdCBmcmFtZXMgPSBbXTtcbiAgICBjb25zdCBsaW5lcyA9IHN0YWNrLnNwbGl0KCdcXG4nKTtcblxuICAgIGZvciAobGV0IGkgPSBza2lwRmlyc3RMaW5lczsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBsaW5lID0gbGluZXNbaV0gO1xuICAgICAgLy8gSWdub3JlIGxpbmVzIG92ZXIgMWtiIGFzIHRoZXkgYXJlIHVubGlrZWx5IHRvIGJlIHN0YWNrIGZyYW1lcy5cbiAgICAgIC8vIE1hbnkgb2YgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgdXNlIGJhY2t0cmFja2luZyB3aGljaCByZXN1bHRzIGluIHJ1biB0aW1lIHRoYXQgaW5jcmVhc2VzIGV4cG9uZW50aWFsbHkgd2l0aFxuICAgICAgLy8gaW5wdXQgc2l6ZS4gSHVnZSBzdHJpbmdzIGNhbiByZXN1bHQgaW4gaGFuZ3MvRGVuaWFsIG9mIFNlcnZpY2U6XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy8yMjg2XG4gICAgICBpZiAobGluZS5sZW5ndGggPiAxMDI0KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy81NDU5XG4gICAgICAvLyBSZW1vdmUgd2VicGFjayAoZXJyb3I6ICopIHdyYXBwZXJzXG4gICAgICBjb25zdCBjbGVhbmVkTGluZSA9IFdFQlBBQ0tfRVJST1JfUkVHRVhQLnRlc3QobGluZSkgPyBsaW5lLnJlcGxhY2UoV0VCUEFDS19FUlJPUl9SRUdFWFAsICckMScpIDogbGluZTtcblxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvNzgxM1xuICAgICAgLy8gU2tpcCBFcnJvcjogbGluZXNcbiAgICAgIGlmIChjbGVhbmVkTGluZS5tYXRjaCgvXFxTKkVycm9yOiAvKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBwYXJzZXIgb2Ygc29ydGVkUGFyc2Vycykge1xuICAgICAgICBjb25zdCBmcmFtZSA9IHBhcnNlcihjbGVhbmVkTGluZSk7XG5cbiAgICAgICAgaWYgKGZyYW1lKSB7XG4gICAgICAgICAgZnJhbWVzLnB1c2goZnJhbWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmcmFtZXMubGVuZ3RoID49IFNUQUNLVFJBQ0VfRlJBTUVfTElNSVQgKyBmcmFtZXNUb1BvcCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaXBTZW50cnlGcmFtZXNBbmRSZXZlcnNlKGZyYW1lcy5zbGljZShmcmFtZXNUb1BvcCkpO1xuICB9O1xufVxuXG4vKipcbiAqIEdldHMgYSBzdGFjayBwYXJzZXIgaW1wbGVtZW50YXRpb24gZnJvbSBPcHRpb25zLnN0YWNrUGFyc2VyXG4gKiBAc2VlIE9wdGlvbnNcbiAqXG4gKiBJZiBvcHRpb25zIGNvbnRhaW5zIGFuIGFycmF5IG9mIGxpbmUgcGFyc2VycywgaXQgaXMgY29udmVydGVkIGludG8gYSBwYXJzZXJcbiAqL1xuZnVuY3Rpb24gc3RhY2tQYXJzZXJGcm9tU3RhY2tQYXJzZXJPcHRpb25zKHN0YWNrUGFyc2VyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0YWNrUGFyc2VyKSkge1xuICAgIHJldHVybiBjcmVhdGVTdGFja1BhcnNlciguLi5zdGFja1BhcnNlcik7XG4gIH1cbiAgcmV0dXJuIHN0YWNrUGFyc2VyO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgU2VudHJ5IGZyYW1lcyBmcm9tIHRoZSB0b3AgYW5kIGJvdHRvbSBvZiB0aGUgc3RhY2sgaWYgcHJlc2VudCBhbmQgZW5mb3JjZXMgYSBsaW1pdCBvZiBtYXggbnVtYmVyIG9mIGZyYW1lcy5cbiAqIEFzc3VtZXMgc3RhY2sgaW5wdXQgaXMgb3JkZXJlZCBmcm9tIHRvcCB0byBib3R0b20gYW5kIHJldHVybnMgdGhlIHJldmVyc2UgcmVwcmVzZW50YXRpb24gc28gY2FsbCBzaXRlIG9mIHRoZVxuICogZnVuY3Rpb24gdGhhdCBjYXVzZWQgdGhlIGNyYXNoIGlzIHRoZSBsYXN0IGZyYW1lIGluIHRoZSBhcnJheS5cbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gc3RyaXBTZW50cnlGcmFtZXNBbmRSZXZlcnNlKHN0YWNrKSB7XG4gIGlmICghc3RhY2subGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgbG9jYWxTdGFjayA9IEFycmF5LmZyb20oc3RhY2spO1xuXG4gIC8vIElmIHN0YWNrIHN0YXJ0cyB3aXRoIG9uZSBvZiBvdXIgQVBJIGNhbGxzLCByZW1vdmUgaXQgKHN0YXJ0cywgbWVhbmluZyBpdCdzIHRoZSB0b3Agb2YgdGhlIHN0YWNrIC0gYWthIGxhc3QgY2FsbClcbiAgaWYgKC9zZW50cnlXcmFwcGVkLy50ZXN0KGdldExhc3RTdGFja0ZyYW1lKGxvY2FsU3RhY2spLmZ1bmN0aW9uIHx8ICcnKSkge1xuICAgIGxvY2FsU3RhY2sucG9wKCk7XG4gIH1cblxuICAvLyBSZXZlcnNpbmcgaW4gdGhlIG1pZGRsZSBvZiB0aGUgcHJvY2VkdXJlIGFsbG93cyB1cyB0byBqdXN0IHBvcCB0aGUgdmFsdWVzIG9mZiB0aGUgc3RhY2tcbiAgbG9jYWxTdGFjay5yZXZlcnNlKCk7XG5cbiAgLy8gSWYgc3RhY2sgZW5kcyB3aXRoIG9uZSBvZiBvdXIgaW50ZXJuYWwgQVBJIGNhbGxzLCByZW1vdmUgaXQgKGVuZHMsIG1lYW5pbmcgaXQncyB0aGUgYm90dG9tIG9mIHRoZSBzdGFjayAtIGFrYSB0b3AtbW9zdCBjYWxsKVxuICBpZiAoU1RSSVBfRlJBTUVfUkVHRVhQLnRlc3QoZ2V0TGFzdFN0YWNrRnJhbWUobG9jYWxTdGFjaykuZnVuY3Rpb24gfHwgJycpKSB7XG4gICAgbG9jYWxTdGFjay5wb3AoKTtcblxuICAgIC8vIFdoZW4gdXNpbmcgc3ludGhldGljIGV2ZW50cywgd2Ugd2lsbCBoYXZlIGEgMiBsZXZlbHMgZGVlcCBzdGFjaywgYXMgYG5ldyBFcnJvcignU2VudHJ5IHN5bnRoZXRpY0V4Y2VwdGlvbicpYFxuICAgIC8vIGlzIHByb2R1Y2VkIHdpdGhpbiB0aGUgaHViIGl0c2VsZiwgbWFraW5nIGl0OlxuICAgIC8vXG4gICAgLy8gICBTZW50cnkuY2FwdHVyZUV4Y2VwdGlvbigpXG4gICAgLy8gICBnZXRDdXJyZW50SHViKCkuY2FwdHVyZUV4Y2VwdGlvbigpXG4gICAgLy9cbiAgICAvLyBpbnN0ZWFkIG9mIGp1c3QgdGhlIHRvcCBgU2VudHJ5YCBjYWxsIGl0c2VsZi5cbiAgICAvLyBUaGlzIGZvcmNlcyB1cyB0byBwb3NzaWJseSBzdHJpcCBhbiBhZGRpdGlvbmFsIGZyYW1lIGluIHRoZSBleGFjdCBzYW1lIHdhcyBhcyBhYm92ZS5cbiAgICBpZiAoU1RSSVBfRlJBTUVfUkVHRVhQLnRlc3QoZ2V0TGFzdFN0YWNrRnJhbWUobG9jYWxTdGFjaykuZnVuY3Rpb24gfHwgJycpKSB7XG4gICAgICBsb2NhbFN0YWNrLnBvcCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhbFN0YWNrLnNsaWNlKDAsIFNUQUNLVFJBQ0VfRlJBTUVfTElNSVQpLm1hcChmcmFtZSA9PiAoe1xuICAgIC4uLmZyYW1lLFxuICAgIGZpbGVuYW1lOiBmcmFtZS5maWxlbmFtZSB8fCBnZXRMYXN0U3RhY2tGcmFtZShsb2NhbFN0YWNrKS5maWxlbmFtZSxcbiAgICBmdW5jdGlvbjogZnJhbWUuZnVuY3Rpb24gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgfSkpO1xufVxuXG5mdW5jdGlvbiBnZXRMYXN0U3RhY2tGcmFtZShhcnIpIHtcbiAgcmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV0gfHwge307XG59XG5cbmNvbnN0IGRlZmF1bHRGdW5jdGlvbk5hbWUgPSAnPGFub255bW91cz4nO1xuXG4vKipcbiAqIFNhZmVseSBleHRyYWN0IGZ1bmN0aW9uIG5hbWUgZnJvbSBpdHNlbGZcbiAqL1xuZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGZuKSB7XG4gIHRyeSB7XG4gICAgaWYgKCFmbiB8fCB0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0RnVuY3Rpb25OYW1lO1xuICAgIH1cbiAgICByZXR1cm4gZm4ubmFtZSB8fCBkZWZhdWx0RnVuY3Rpb25OYW1lO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSnVzdCBhY2Nlc3NpbmcgY3VzdG9tIHByb3BzIGluIHNvbWUgU2VsZW5pdW0gZW52aXJvbm1lbnRzXG4gICAgLy8gY2FuIGNhdXNlIGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGV4Y2VwdGlvbiAoc2VlIHJhdmVuLWpzIzQ5NSkuXG4gICAgcmV0dXJuIGRlZmF1bHRGdW5jdGlvbk5hbWU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQncyBzdGFjayBmcmFtZXMgZnJvbSBhbiBldmVudCB3aXRob3V0IG5lZWRpbmcgdG8gY2hlY2sgZm9yIHVuZGVmaW5lZCBwcm9wZXJ0aWVzLlxuICovXG5mdW5jdGlvbiBnZXRGcmFtZXNGcm9tRXZlbnQoZXZlbnQpIHtcbiAgY29uc3QgZXhjZXB0aW9uID0gZXZlbnQuZXhjZXB0aW9uO1xuXG4gIGlmIChleGNlcHRpb24pIHtcbiAgICBjb25zdCBmcmFtZXMgPSBbXTtcbiAgICB0cnkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBPYmplY3QgY291bGQgYmUgdW5kZWZpbmVkXG4gICAgICBleGNlcHRpb24udmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFZhbHVlIGNvdWxkIGJlIHVuZGVmaW5lZFxuICAgICAgICBpZiAodmFsdWUuc3RhY2t0cmFjZS5mcmFtZXMpIHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFZhbHVlIGNvdWxkIGJlIHVuZGVmaW5lZFxuICAgICAgICAgIGZyYW1lcy5wdXNoKC4uLnZhbHVlLnN0YWNrdHJhY2UuZnJhbWVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnJhbWVzO1xuICAgIH0gY2F0Y2ggKF9vTykge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0cy5VTktOT1dOX0ZVTkNUSU9OID0gVU5LTk9XTl9GVU5DVElPTjtcbmV4cG9ydHMuY3JlYXRlU3RhY2tQYXJzZXIgPSBjcmVhdGVTdGFja1BhcnNlcjtcbmV4cG9ydHMuZ2V0RnJhbWVzRnJvbUV2ZW50ID0gZ2V0RnJhbWVzRnJvbUV2ZW50O1xuZXhwb3J0cy5nZXRGdW5jdGlvbk5hbWUgPSBnZXRGdW5jdGlvbk5hbWU7XG5leHBvcnRzLnN0YWNrUGFyc2VyRnJvbVN0YWNrUGFyc2VyT3B0aW9ucyA9IHN0YWNrUGFyc2VyRnJvbVN0YWNrUGFyc2VyT3B0aW9ucztcbmV4cG9ydHMuc3RyaXBTZW50cnlGcmFtZXNBbmRSZXZlcnNlID0gc3RyaXBTZW50cnlGcmFtZXNBbmRSZXZlcnNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhY2t0cmFjZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNUQUNLVFJBQ0VfRlJBTUVfTElNSVQiLCJVTktOT1dOX0ZVTkNUSU9OIiwiV0VCUEFDS19FUlJPUl9SRUdFWFAiLCJTVFJJUF9GUkFNRV9SRUdFWFAiLCJjcmVhdGVTdGFja1BhcnNlciIsInBhcnNlcnMiLCJzb3J0ZWRQYXJzZXJzIiwic29ydCIsImEiLCJiIiwibWFwIiwicCIsInN0YWNrIiwic2tpcEZpcnN0TGluZXMiLCJmcmFtZXNUb1BvcCIsImZyYW1lcyIsImxpbmVzIiwic3BsaXQiLCJpIiwibGVuZ3RoIiwibGluZSIsImNsZWFuZWRMaW5lIiwidGVzdCIsInJlcGxhY2UiLCJtYXRjaCIsInBhcnNlciIsImZyYW1lIiwicHVzaCIsInN0cmlwU2VudHJ5RnJhbWVzQW5kUmV2ZXJzZSIsInNsaWNlIiwic3RhY2tQYXJzZXJGcm9tU3RhY2tQYXJzZXJPcHRpb25zIiwic3RhY2tQYXJzZXIiLCJBcnJheSIsImlzQXJyYXkiLCJsb2NhbFN0YWNrIiwiZnJvbSIsImdldExhc3RTdGFja0ZyYW1lIiwiZnVuY3Rpb24iLCJwb3AiLCJyZXZlcnNlIiwiZmlsZW5hbWUiLCJhcnIiLCJkZWZhdWx0RnVuY3Rpb25OYW1lIiwiZ2V0RnVuY3Rpb25OYW1lIiwiZm4iLCJuYW1lIiwiZSIsImdldEZyYW1lc0Zyb21FdmVudCIsImV2ZW50IiwiZXhjZXB0aW9uIiwidmFsdWVzIiwiZm9yRWFjaCIsInN0YWNrdHJhY2UiLCJfb08iLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/string.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nfunction truncate(str, max = 0) {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nfunction snipLine(line, colno) {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nfunction safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (is.isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nfunction isMatchingPattern(value, pattern, requireExactStringMatch = false) {\n  if (!is.isString(value)) {\n    return false;\n  }\n  if (is.isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (is.isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nfunction stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\nexports.isMatchingPattern = isMatchingPattern;\nexports.safeJoin = safeJoin;\nexports.snipLine = snipLine;\nexports.stringMatchesSomePattern = stringMatchesSomePattern;\nexports.truncate = truncate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/supports.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/supports.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ./logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst WINDOW = worldwide.GLOBAL_OBJ;\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsFetch() {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * isNative checks if the given function is a native implementation\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFunction(func) {\n  return func && /^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nfunction supportsNativeFetch() {\n  if (typeof EdgeRuntime === 'string') {\n    return true;\n  }\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFunction(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof doc.createElement === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFunction(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReportingObserver() {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nexports.isNativeFunction = isNativeFunction;\nexports.supportsDOMError = supportsDOMError;\nexports.supportsDOMException = supportsDOMException;\nexports.supportsErrorEvent = supportsErrorEvent;\nexports.supportsFetch = supportsFetch;\nexports.supportsNativeFetch = supportsNativeFetch;\nexports.supportsReferrerPolicy = supportsReferrerPolicy;\nexports.supportsReportingObserver = supportsReportingObserver;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/supports.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** SyncPromise internal states */\nvar States;\n(function (States) {\n  /** Pending */\n  const PENDING = 0;\n  States[States[\"PENDING\"] = PENDING] = \"PENDING\";\n  /** Resolved / OK */\n  const RESOLVED = 1;\n  States[States[\"RESOLVED\"] = RESOLVED] = \"RESOLVED\";\n  /** Rejected / Error */\n  const REJECTED = 2;\n  States[States[\"REJECTED\"] = REJECTED] = \"REJECTED\";\n})(States || (States = {}));\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nfunction resolvedSyncPromise(value) {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nfunction rejectedSyncPromise(reason) {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise {\n  constructor(executor) {\n    SyncPromise.prototype.__init.call(this);\n    SyncPromise.prototype.__init2.call(this);\n    SyncPromise.prototype.__init3.call(this);\n    SyncPromise.prototype.__init4.call(this);\n    this._state = States.PENDING;\n    this._handlers = [];\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  then(onfulfilled, onrejected) {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([false, result => {\n        if (!onfulfilled) {\n          // TODO: ¯\\_(ツ)_/¯\n          // TODO: FIXME\n          resolve(result);\n        } else {\n          try {\n            resolve(onfulfilled(result));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }, reason => {\n        if (!onrejected) {\n          reject(reason);\n        } else {\n          try {\n            resolve(onrejected(reason));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  catch(onrejected) {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  finally(onfinally) {\n    return new SyncPromise((resolve, reject) => {\n      let val;\n      let isRejected;\n      return this.then(value => {\n        isRejected = false;\n        val = value;\n        if (onfinally) {\n          onfinally();\n        }\n      }, reason => {\n        isRejected = true;\n        val = reason;\n        if (onfinally) {\n          onfinally();\n        }\n      }).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n        resolve(val);\n      });\n    });\n  }\n\n  /** JSDoc */\n  __init() {\n    this._resolve = value => {\n      this._setResult(States.RESOLVED, value);\n    };\n  }\n\n  /** JSDoc */\n  __init2() {\n    this._reject = reason => {\n      this._setResult(States.REJECTED, reason);\n    };\n  }\n\n  /** JSDoc */\n  __init3() {\n    this._setResult = (state, value) => {\n      if (this._state !== States.PENDING) {\n        return;\n      }\n      if (is.isThenable(value)) {\n        void value.then(this._resolve, this._reject);\n        return;\n      }\n      this._state = state;\n      this._value = value;\n      this._executeHandlers();\n    };\n  }\n\n  /** JSDoc */\n  __init4() {\n    this._executeHandlers = () => {\n      if (this._state === States.PENDING) {\n        return;\n      }\n      const cachedHandlers = this._handlers.slice();\n      this._handlers = [];\n      cachedHandlers.forEach(handler => {\n        if (handler[0]) {\n          return;\n        }\n        if (this._state === States.RESOLVED) {\n          handler[1](this._value);\n        }\n        if (this._state === States.REJECTED) {\n          handler[2](this._value);\n        }\n        handler[0] = true;\n      });\n    };\n  }\n}\nexports.SyncPromise = SyncPromise;\nexports.rejectedSyncPromise = rejectedSyncPromise;\nexports.resolvedSyncPromise = resolvedSyncPromise;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/time.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n *\n * TODO(v8): Return type should be rounded.\n */\nfunction dateTimestampInSeconds() {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc() {\n  const {\n    performance\n  } = worldwide.GLOBAL_OBJ;\n  if (!performance || !performance.now) {\n    return dateTimestampInSeconds;\n  }\n\n  // Some browser and environments don't have a timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  const approxStartingTimeOrigin = Date.now() - performance.now();\n  const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nconst timestampInSeconds = createUnixTimestampInSecondsFunc();\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n *\n * @deprecated This variable will be removed in the next major version.\n */\nexports._browserPerformanceTimeOriginMode = void 0;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nconst browserPerformanceTimeOrigin = (() => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const {\n    performance\n  } = worldwide.GLOBAL_OBJ;\n  if (!performance || !performance.now) {\n    // eslint-disable-next-line deprecation/deprecation\n    exports._browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin ? Math.abs(performance.timeOrigin + performanceNow - dateNow) : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      // eslint-disable-next-line deprecation/deprecation\n      exports._browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      exports._browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  // eslint-disable-next-line deprecation/deprecation\n  exports._browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\nexports.browserPerformanceTimeOrigin = browserPerformanceTimeOrigin;\nexports.dateTimestampInSeconds = dateTimestampInSeconds;\nexports.timestampInSeconds = timestampInSeconds;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst baggage = __webpack_require__(/*! ./baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\");\nconst propagationContext = __webpack_require__(/*! ./propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nconst TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' +\n// whitespace\n'([0-9a-f]{32})?' +\n// trace_id\n'-?([0-9a-f]{16})?' +\n// span_id\n'-?([01])?' +\n// sampled\n'[ \\\\t]*$') // whitespace\n;\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nfunction extractTraceparentData(traceparent) {\n  if (!traceparent) {\n    return undefined;\n  }\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n  let parentSampled;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2]\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nfunction propagationContextFromHeaders(sentryTrace, baggage$1) {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggage.baggageHeaderToDynamicSamplingContext(baggage$1);\n  if (!traceparentData || !traceparentData.traceId) {\n    return {\n      traceId: propagationContext.generateTraceId(),\n      spanId: propagationContext.generateSpanId()\n    };\n  }\n  const {\n    traceId,\n    parentSpanId,\n    parentSampled\n  } = traceparentData;\n  const virtualSpanId = propagationContext.generateSpanId();\n  return {\n    traceId,\n    parentSpanId,\n    spanId: virtualSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {} // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nfunction generateSentryTraceHeader(traceId = propagationContext.generateTraceId(), spanId = propagationContext.generateSpanId(), sampled) {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\nexports.TRACEPARENT_REGEXP = TRACEPARENT_REGEXP;\nexports.extractTraceparentData = extractTraceparentData;\nexports.generateSentryTraceHeader = generateSentryTraceHeader;\nexports.propagationContextFromHeaders = propagationContextFromHeaders;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdHJhY2luZy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQywrRkFBYyxDQUFDO0FBQ3ZDLE1BQU1DLGtCQUFrQixHQUFHRCxtQkFBTyxDQUFDLHFIQUF5QixDQUFDOztBQUU3RDtBQUNBLE1BQU1FLGtCQUFrQixHQUFHLElBQUlDLE1BQU0sQ0FDbkMsVUFBVTtBQUFHO0FBQ1gsaUJBQWlCO0FBQUc7QUFDcEIsbUJBQW1CO0FBQUc7QUFDdEIsV0FBVztBQUFHO0FBQ2QsVUFDSixDQUFDLENBRGU7QUFDZjs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLHNCQUFzQkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQzNDLElBQUksQ0FBQ0EsV0FBVyxFQUFFO0lBQ2hCLE9BQU9DLFNBQVM7RUFDbEI7RUFFQSxNQUFNQyxPQUFPLEdBQUdGLFdBQVcsQ0FBQ0csS0FBSyxDQUFDTixrQkFBa0IsQ0FBQztFQUNyRCxJQUFJLENBQUNLLE9BQU8sRUFBRTtJQUNaLE9BQU9ELFNBQVM7RUFDbEI7RUFFQSxJQUFJRyxhQUFhO0VBQ2pCLElBQUlGLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7SUFDdEJFLGFBQWEsR0FBRyxJQUFJO0VBQ3RCLENBQUMsTUFBTSxJQUFJRixPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO0lBQzdCRSxhQUFhLEdBQUcsS0FBSztFQUN2QjtFQUVBLE9BQU87SUFDTEMsT0FBTyxFQUFFSCxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25CRSxhQUFhO0lBQ2JFLFlBQVksRUFBRUosT0FBTyxDQUFDLENBQUM7RUFDekIsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ssNkJBQTZCQSxDQUNwQ0MsV0FBVyxFQUNYQyxTQUFTLEVBQ1Q7RUFDQSxNQUFNQyxlQUFlLEdBQUdYLHNCQUFzQixDQUFDUyxXQUFXLENBQUM7RUFDM0QsTUFBTUcsc0JBQXNCLEdBQUdqQixPQUFPLENBQUNrQixxQ0FBcUMsQ0FBQ0gsU0FBUyxDQUFDO0VBRXZGLElBQUksQ0FBQ0MsZUFBZSxJQUFJLENBQUNBLGVBQWUsQ0FBQ0wsT0FBTyxFQUFFO0lBQ2hELE9BQU87TUFBRUEsT0FBTyxFQUFFVCxrQkFBa0IsQ0FBQ2lCLGVBQWUsQ0FBQyxDQUFDO01BQUVDLE1BQU0sRUFBRWxCLGtCQUFrQixDQUFDbUIsY0FBYyxDQUFDO0lBQUUsQ0FBQztFQUN2RztFQUVBLE1BQU07SUFBRVYsT0FBTztJQUFFQyxZQUFZO0lBQUVGO0VBQWMsQ0FBQyxHQUFHTSxlQUFlO0VBRWhFLE1BQU1NLGFBQWEsR0FBR3BCLGtCQUFrQixDQUFDbUIsY0FBYyxDQUFDLENBQUM7RUFFekQsT0FBTztJQUNMVixPQUFPO0lBQ1BDLFlBQVk7SUFDWlEsTUFBTSxFQUFFRSxhQUFhO0lBQ3JCQyxPQUFPLEVBQUViLGFBQWE7SUFDdEJjLEdBQUcsRUFBRVAsc0JBQXNCLElBQUksQ0FBQyxDQUFDLENBQUU7RUFDckMsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNRLHlCQUF5QkEsQ0FDaENkLE9BQU8sR0FBR1Qsa0JBQWtCLENBQUNpQixlQUFlLENBQUMsQ0FBQyxFQUM5Q0MsTUFBTSxHQUFHbEIsa0JBQWtCLENBQUNtQixjQUFjLENBQUMsQ0FBQyxFQUM1Q0UsT0FBTyxFQUNQO0VBQ0EsSUFBSUcsYUFBYSxHQUFHLEVBQUU7RUFDdEIsSUFBSUgsT0FBTyxLQUFLaEIsU0FBUyxFQUFFO0lBQ3pCbUIsYUFBYSxHQUFHSCxPQUFPLEdBQUcsSUFBSSxHQUFHLElBQUk7RUFDdkM7RUFDQSxPQUFRLEdBQUVaLE9BQVEsSUFBR1MsTUFBTyxHQUFFTSxhQUFjLEVBQUM7QUFDL0M7QUFFQTVCLDBCQUEwQixHQUFHSyxrQkFBa0I7QUFDL0NMLDhCQUE4QixHQUFHTyxzQkFBc0I7QUFDdkRQLGlDQUFpQyxHQUFHMkIseUJBQXlCO0FBQzdEM0IscUNBQXFDLEdBQUdlLDZCQUE2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L3RyYWNpbmcuanM/YWE3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBiYWdnYWdlID0gcmVxdWlyZSgnLi9iYWdnYWdlLmpzJyk7XG5jb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSByZXF1aXJlKCcuL3Byb3BhZ2F0aW9uQ29udGV4dC5qcycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHNlbnRyeS1pbnRlcm5hbC9zZGsvbm8tcmVnZXhwLWNvbnN0cnVjdG9yIC0tIFJlZ0V4cCBpcyB1c2VkIGZvciByZWFkYWJpbGl0eSBoZXJlXG5jb25zdCBUUkFDRVBBUkVOVF9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXlsgXFxcXHRdKicgKyAvLyB3aGl0ZXNwYWNlXG4gICAgJyhbMC05YS1mXXszMn0pPycgKyAvLyB0cmFjZV9pZFxuICAgICctPyhbMC05YS1mXXsxNn0pPycgKyAvLyBzcGFuX2lkXG4gICAgJy0/KFswMV0pPycgKyAvLyBzYW1wbGVkXG4gICAgJ1sgXFxcXHRdKiQnLCAvLyB3aGl0ZXNwYWNlXG4pO1xuXG4vKipcbiAqIEV4dHJhY3QgdHJhbnNhY3Rpb24gY29udGV4dCBkYXRhIGZyb20gYSBgc2VudHJ5LXRyYWNlYCBoZWFkZXIuXG4gKlxuICogQHBhcmFtIHRyYWNlcGFyZW50IFRyYWNlcGFyZW50IHN0cmluZ1xuICpcbiAqIEByZXR1cm5zIE9iamVjdCBjb250YWluaW5nIGRhdGEgZnJvbSB0aGUgaGVhZGVyLCBvciB1bmRlZmluZWQgaWYgdHJhY2VwYXJlbnQgc3RyaW5nIGlzIG1hbGZvcm1lZFxuICovXG5mdW5jdGlvbiBleHRyYWN0VHJhY2VwYXJlbnREYXRhKHRyYWNlcGFyZW50KSB7XG4gIGlmICghdHJhY2VwYXJlbnQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3QgbWF0Y2hlcyA9IHRyYWNlcGFyZW50Lm1hdGNoKFRSQUNFUEFSRU5UX1JFR0VYUCk7XG4gIGlmICghbWF0Y2hlcykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBsZXQgcGFyZW50U2FtcGxlZDtcbiAgaWYgKG1hdGNoZXNbM10gPT09ICcxJykge1xuICAgIHBhcmVudFNhbXBsZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKG1hdGNoZXNbM10gPT09ICcwJykge1xuICAgIHBhcmVudFNhbXBsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHJhY2VJZDogbWF0Y2hlc1sxXSxcbiAgICBwYXJlbnRTYW1wbGVkLFxuICAgIHBhcmVudFNwYW5JZDogbWF0Y2hlc1syXSxcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwcm9wYWdhdGlvbiBjb250ZXh0IGZyb20gaW5jb21pbmcgaGVhZGVycyBvclxuICogY3JlYXRlcyBhIG1pbmltYWwgbmV3IG9uZSBpZiB0aGUgaGVhZGVycyBhcmUgdW5kZWZpbmVkLlxuICovXG5mdW5jdGlvbiBwcm9wYWdhdGlvbkNvbnRleHRGcm9tSGVhZGVycyhcbiAgc2VudHJ5VHJhY2UsXG4gIGJhZ2dhZ2UkMSxcbikge1xuICBjb25zdCB0cmFjZXBhcmVudERhdGEgPSBleHRyYWN0VHJhY2VwYXJlbnREYXRhKHNlbnRyeVRyYWNlKTtcbiAgY29uc3QgZHluYW1pY1NhbXBsaW5nQ29udGV4dCA9IGJhZ2dhZ2UuYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dChiYWdnYWdlJDEpO1xuXG4gIGlmICghdHJhY2VwYXJlbnREYXRhIHx8ICF0cmFjZXBhcmVudERhdGEudHJhY2VJZCkge1xuICAgIHJldHVybiB7IHRyYWNlSWQ6IHByb3BhZ2F0aW9uQ29udGV4dC5nZW5lcmF0ZVRyYWNlSWQoKSwgc3BhbklkOiBwcm9wYWdhdGlvbkNvbnRleHQuZ2VuZXJhdGVTcGFuSWQoKSB9O1xuICB9XG5cbiAgY29uc3QgeyB0cmFjZUlkLCBwYXJlbnRTcGFuSWQsIHBhcmVudFNhbXBsZWQgfSA9IHRyYWNlcGFyZW50RGF0YTtcblxuICBjb25zdCB2aXJ0dWFsU3BhbklkID0gcHJvcGFnYXRpb25Db250ZXh0LmdlbmVyYXRlU3BhbklkKCk7XG5cbiAgcmV0dXJuIHtcbiAgICB0cmFjZUlkLFxuICAgIHBhcmVudFNwYW5JZCxcbiAgICBzcGFuSWQ6IHZpcnR1YWxTcGFuSWQsXG4gICAgc2FtcGxlZDogcGFyZW50U2FtcGxlZCxcbiAgICBkc2M6IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgfHwge30sIC8vIElmIHdlIGhhdmUgdHJhY2VwYXJlbnQgZGF0YSBidXQgbm8gRFNDIGl0IG1lYW5zIHdlIGFyZSBub3QgaGVhZCBvZiB0cmFjZSBhbmQgd2UgbXVzdCBmcmVlemUgaXRcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgc2VudHJ5LXRyYWNlIGhlYWRlciBmcm9tIHNwYW4gY29udGV4dCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIoXG4gIHRyYWNlSWQgPSBwcm9wYWdhdGlvbkNvbnRleHQuZ2VuZXJhdGVUcmFjZUlkKCksXG4gIHNwYW5JZCA9IHByb3BhZ2F0aW9uQ29udGV4dC5nZW5lcmF0ZVNwYW5JZCgpLFxuICBzYW1wbGVkLFxuKSB7XG4gIGxldCBzYW1wbGVkU3RyaW5nID0gJyc7XG4gIGlmIChzYW1wbGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICBzYW1wbGVkU3RyaW5nID0gc2FtcGxlZCA/ICctMScgOiAnLTAnO1xuICB9XG4gIHJldHVybiBgJHt0cmFjZUlkfS0ke3NwYW5JZH0ke3NhbXBsZWRTdHJpbmd9YDtcbn1cblxuZXhwb3J0cy5UUkFDRVBBUkVOVF9SRUdFWFAgPSBUUkFDRVBBUkVOVF9SRUdFWFA7XG5leHBvcnRzLmV4dHJhY3RUcmFjZXBhcmVudERhdGEgPSBleHRyYWN0VHJhY2VwYXJlbnREYXRhO1xuZXhwb3J0cy5nZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyID0gZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlcjtcbmV4cG9ydHMucHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnMgPSBwcm9wYWdhdGlvbkNvbnRleHRGcm9tSGVhZGVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNpbmcuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJiYWdnYWdlIiwicmVxdWlyZSIsInByb3BhZ2F0aW9uQ29udGV4dCIsIlRSQUNFUEFSRU5UX1JFR0VYUCIsIlJlZ0V4cCIsImV4dHJhY3RUcmFjZXBhcmVudERhdGEiLCJ0cmFjZXBhcmVudCIsInVuZGVmaW5lZCIsIm1hdGNoZXMiLCJtYXRjaCIsInBhcmVudFNhbXBsZWQiLCJ0cmFjZUlkIiwicGFyZW50U3BhbklkIiwicHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnMiLCJzZW50cnlUcmFjZSIsImJhZ2dhZ2UkMSIsInRyYWNlcGFyZW50RGF0YSIsImR5bmFtaWNTYW1wbGluZ0NvbnRleHQiLCJiYWdnYWdlSGVhZGVyVG9EeW5hbWljU2FtcGxpbmdDb250ZXh0IiwiZ2VuZXJhdGVUcmFjZUlkIiwic3BhbklkIiwiZ2VuZXJhdGVTcGFuSWQiLCJ2aXJ0dWFsU3BhbklkIiwic2FtcGxlZCIsImRzYyIsImdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIiLCJzYW1wbGVkU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/url.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/url.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nfunction parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nfunction stripUrlQueryAndFragment(urlPath) {\n  return urlPath.split(/[?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n *\n * @deprecated This function will be removed in the next major version.\n */\n// TODO(v9): Hoist this function into the places where we use it. (as it stands only react router v6 instrumentation)\nfunction getNumberOfUrlSegments(url) {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlString(url) {\n  const {\n    protocol,\n    host,\n    path\n  } = url;\n  const filteredHost = host && host\n  // Always filter out authority\n  .replace(/^.*@/, '[filtered]:[filtered]@')\n  // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n  // TODO: Use new URL global if it exists\n  .replace(/(:80)$/, '').replace(/(:443)$/, '') || '';\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\nexports.getNumberOfUrlSegments = getNumberOfUrlSegments;\nexports.getSanitizedUrlString = getSanitizedUrlString;\nexports.parseUrl = parseUrl;\nexports.stripUrlQueryAndFragment = stripUrlQueryAndFragment;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdXJsLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsUUFBUUEsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3JCLElBQUksQ0FBQ0EsR0FBRyxFQUFFO0lBQ1IsT0FBTyxDQUFDLENBQUM7RUFDWDtFQUVBLE1BQU1DLEtBQUssR0FBR0QsR0FBRyxDQUFDQyxLQUFLLENBQUMsOERBQThELENBQUM7RUFFdkYsSUFBSSxDQUFDQSxLQUFLLEVBQUU7SUFDVixPQUFPLENBQUMsQ0FBQztFQUNYOztFQUVBO0VBQ0EsTUFBTUMsS0FBSyxHQUFHRCxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTtFQUM1QixNQUFNRSxRQUFRLEdBQUdGLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFO0VBQy9CLE9BQU87SUFDTEcsSUFBSSxFQUFFSCxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2RJLElBQUksRUFBRUosS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNkSyxRQUFRLEVBQUVMLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbEJNLE1BQU0sRUFBRUwsS0FBSztJQUNiTSxJQUFJLEVBQUVMLFFBQVE7SUFDZE0sUUFBUSxFQUFFUixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUdDLEtBQUssR0FBR0MsUUFBUSxDQUFFO0VBQ3pDLENBQUM7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTTyx3QkFBd0JBLENBQUNDLE9BQU8sRUFBRTtFQUN6QyxPQUFRQSxPQUFPLENBQUNDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUcsQ0FBQyxDQUFDO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLHNCQUFzQkEsQ0FBQ2IsR0FBRyxFQUFFO0VBQ25DO0VBQ0EsT0FBT0EsR0FBRyxDQUFDWSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUNFLE1BQU0sQ0FBQ0MsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLE1BQU0sR0FBRyxDQUFDLElBQUlELENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQ0MsTUFBTTtBQUN6RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLHFCQUFxQkEsQ0FBQ2pCLEdBQUcsRUFBRTtFQUNsQyxNQUFNO0lBQUVNLFFBQVE7SUFBRUYsSUFBSTtJQUFFQztFQUFLLENBQUMsR0FBR0wsR0FBRztFQUVwQyxNQUFNa0IsWUFBWSxHQUNmZCxJQUFJLElBQ0hBO0VBQ0U7RUFBQSxDQUNDZSxPQUFPLENBQUMsTUFBTSxFQUFFLHdCQUF3QjtFQUN6QztFQUNBO0VBQUEsQ0FDQ0EsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FDckJBLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLElBQzNCLEVBQUU7RUFFSixPQUFRLEdBQUViLFFBQVEsR0FBSSxHQUFFQSxRQUFTLEtBQUksR0FBRyxFQUFHLEdBQUVZLFlBQWEsR0FBRWIsSUFBSyxFQUFDO0FBQ3BFO0FBRUFSLDhCQUE4QixHQUFHZ0Isc0JBQXNCO0FBQ3ZEaEIsNkJBQTZCLEdBQUdvQixxQkFBcUI7QUFDckRwQixnQkFBZ0IsR0FBR0UsUUFBUTtBQUMzQkYsZ0NBQWdDLEdBQUdhLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L3VybC5qcz8yYTJjIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogUGFyc2VzIHN0cmluZyBmb3JtIG9mIFVSTCBpbnRvIGFuIG9iamVjdFxuICogLy8gYm9ycm93ZWQgZnJvbSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNhcHBlbmRpeC1CXG4gKiAvLyBpbnRlbnRpb25hbGx5IHVzaW5nIHJlZ2V4IGFuZCBub3QgPGEvPiBocmVmIHBhcnNpbmcgdHJpY2sgYmVjYXVzZSBSZWFjdCBOYXRpdmUgYW5kIG90aGVyXG4gKiAvLyBlbnZpcm9ubWVudHMgd2hlcmUgRE9NIG1pZ2h0IG5vdCBiZSBhdmFpbGFibGVcbiAqIEByZXR1cm5zIHBhcnNlZCBVUkwgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHBhcnNlVXJsKHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKC9eKChbXjovPyNdKyk6KT8oXFwvXFwvKFteLz8jXSopKT8oW14/I10qKShcXD8oW14jXSopKT8oIyguKikpPyQvKTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgLy8gY29lcmNlIHRvIHVuZGVmaW5lZCB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5nIHNvIHdlIGRvbid0IGdldCAndW5kZWZpbmVkJ1xuICBjb25zdCBxdWVyeSA9IG1hdGNoWzZdIHx8ICcnO1xuICBjb25zdCBmcmFnbWVudCA9IG1hdGNoWzhdIHx8ICcnO1xuICByZXR1cm4ge1xuICAgIGhvc3Q6IG1hdGNoWzRdLFxuICAgIHBhdGg6IG1hdGNoWzVdLFxuICAgIHByb3RvY29sOiBtYXRjaFsyXSxcbiAgICBzZWFyY2g6IHF1ZXJ5LFxuICAgIGhhc2g6IGZyYWdtZW50LFxuICAgIHJlbGF0aXZlOiBtYXRjaFs1XSArIHF1ZXJ5ICsgZnJhZ21lbnQsIC8vIGV2ZXJ5dGhpbmcgbWludXMgb3JpZ2luXG4gIH07XG59XG5cbi8qKlxuICogU3RyaXAgdGhlIHF1ZXJ5IHN0cmluZyBhbmQgZnJhZ21lbnQgb2ZmIG9mIGEgZ2l2ZW4gVVJMIG9yIHBhdGggKGlmIHByZXNlbnQpXG4gKlxuICogQHBhcmFtIHVybFBhdGggRnVsbCBVUkwgb3IgcGF0aCwgaW5jbHVkaW5nIHBvc3NpYmxlIHF1ZXJ5IHN0cmluZyBhbmQvb3IgZnJhZ21lbnRcbiAqIEByZXR1cm5zIFVSTCBvciBwYXRoIHdpdGhvdXQgcXVlcnkgc3RyaW5nIG9yIGZyYWdtZW50XG4gKi9cbmZ1bmN0aW9uIHN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudCh1cmxQYXRoKSB7XG4gIHJldHVybiAodXJsUGF0aC5zcGxpdCgvWz8jXS8sIDEpIClbMF07XG59XG5cbi8qKlxuICogUmV0dXJucyBudW1iZXIgb2YgVVJMIHNlZ21lbnRzIG9mIGEgcGFzc2VkIHN0cmluZyBVUkwuXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAqL1xuLy8gVE9ETyh2OSk6IEhvaXN0IHRoaXMgZnVuY3Rpb24gaW50byB0aGUgcGxhY2VzIHdoZXJlIHdlIHVzZSBpdC4gKGFzIGl0IHN0YW5kcyBvbmx5IHJlYWN0IHJvdXRlciB2NiBpbnN0cnVtZW50YXRpb24pXG5mdW5jdGlvbiBnZXROdW1iZXJPZlVybFNlZ21lbnRzKHVybCkge1xuICAvLyBzcGxpdCBhdCAnLycgb3IgYXQgJ1xcLycgdG8gc3BsaXQgcmVnZXggdXJscyBjb3JyZWN0bHlcbiAgcmV0dXJuIHVybC5zcGxpdCgvXFxcXD9cXC8vKS5maWx0ZXIocyA9PiBzLmxlbmd0aCA+IDAgJiYgcyAhPT0gJywnKS5sZW5ndGg7XG59XG5cbi8qKlxuICogVGFrZXMgYSBVUkwgb2JqZWN0IGFuZCByZXR1cm5zIGEgc2FuaXRpemVkIHN0cmluZyB3aGljaCBpcyBzYWZlIHRvIHVzZSBhcyBzcGFuIG5hbWVcbiAqIHNlZTogaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL2RhdGEtaGFuZGxpbmcvI3N0cnVjdHVyaW5nLWRhdGFcbiAqL1xuZnVuY3Rpb24gZ2V0U2FuaXRpemVkVXJsU3RyaW5nKHVybCkge1xuICBjb25zdCB7IHByb3RvY29sLCBob3N0LCBwYXRoIH0gPSB1cmw7XG5cbiAgY29uc3QgZmlsdGVyZWRIb3N0ID1cbiAgICAoaG9zdCAmJlxuICAgICAgaG9zdFxuICAgICAgICAvLyBBbHdheXMgZmlsdGVyIG91dCBhdXRob3JpdHlcbiAgICAgICAgLnJlcGxhY2UoL14uKkAvLCAnW2ZpbHRlcmVkXTpbZmlsdGVyZWRdQCcpXG4gICAgICAgIC8vIERvbid0IHNob3cgc3RhbmRhcmQgOjgwIChodHRwKSBhbmQgOjQ0MyAoaHR0cHMpIHBvcnRzIHRvIHJlZHVjZSB0aGUgbm9pc2VcbiAgICAgICAgLy8gVE9ETzogVXNlIG5ldyBVUkwgZ2xvYmFsIGlmIGl0IGV4aXN0c1xuICAgICAgICAucmVwbGFjZSgvKDo4MCkkLywgJycpXG4gICAgICAgIC5yZXBsYWNlKC8oOjQ0MykkLywgJycpKSB8fFxuICAgICcnO1xuXG4gIHJldHVybiBgJHtwcm90b2NvbCA/IGAke3Byb3RvY29sfTovL2AgOiAnJ30ke2ZpbHRlcmVkSG9zdH0ke3BhdGh9YDtcbn1cblxuZXhwb3J0cy5nZXROdW1iZXJPZlVybFNlZ21lbnRzID0gZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cztcbmV4cG9ydHMuZ2V0U2FuaXRpemVkVXJsU3RyaW5nID0gZ2V0U2FuaXRpemVkVXJsU3RyaW5nO1xuZXhwb3J0cy5wYXJzZVVybCA9IHBhcnNlVXJsO1xuZXhwb3J0cy5zdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQgPSBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZVVybCIsInVybCIsIm1hdGNoIiwicXVlcnkiLCJmcmFnbWVudCIsImhvc3QiLCJwYXRoIiwicHJvdG9jb2wiLCJzZWFyY2giLCJoYXNoIiwicmVsYXRpdmUiLCJzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQiLCJ1cmxQYXRoIiwic3BsaXQiLCJnZXROdW1iZXJPZlVybFNlZ21lbnRzIiwiZmlsdGVyIiwicyIsImxlbmd0aCIsImdldFNhbml0aXplZFVybFN0cmluZyIsImZpbHRlcmVkSG9zdCIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/url.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/escapeStringForRegex.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/escapeStringForRegex.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:\n//   a) reduce the size by skipping the runtime type - checking\n//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 14+).\n//\n// MIT License\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n// the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nfunction escapeStringForRegex(regexString) {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\nexports.escapeStringForRegex = escapeStringForRegex;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVuZG9yL2VzY2FwZVN0cmluZ0ZvclJlZ2V4LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLG9CQUFvQkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQ3pDO0VBQ0E7RUFDQSxPQUFPQSxXQUFXLENBQUNDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQ0EsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7QUFDbEY7QUFFQUosNEJBQTRCLEdBQUdFLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L3ZlbmRvci9lc2NhcGVTdHJpbmdGb3JSZWdleC5qcz82YzYwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZXNjYXBlLXN0cmluZy1yZWdleHAgYnV0IHdpdGggbW9kaWZpY2F0aW9ucyB0bzpcbi8vICAgYSkgcmVkdWNlIHRoZSBzaXplIGJ5IHNraXBwaW5nIHRoZSBydW50aW1lIHR5cGUgLSBjaGVja2luZ1xuLy8gICBiKSBlbnN1cmUgaXQgZ2V0cyBkb3duIC0gY29tcGlsZWQgZm9yIG9sZCB2ZXJzaW9ucyBvZiBOb2RlKHRoZSBwdWJsaXNoZWQgcGFja2FnZSBvbmx5IHN1cHBvcnRzIE5vZGUgMTQrKS5cbi8vXG4vLyBNSVQgTGljZW5zZVxuLy9cbi8vIENvcHlyaWdodCAoYykgU2luZHJlIFNvcmh1cyA8c2luZHJlc29yaHVzQGdtYWlsLmNvbT4gKGh0dHBzOi8vc2luZHJlc29yaHVzLmNvbSlcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWRcbi8vIGRvY3VtZW50YXRpb24gZmlsZXModGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb25cbi8vIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQgLyBvciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZFxuLy8gdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mXG4vLyB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPXG4vLyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG4vLyBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTXG4vLyBJTiBUSEUgU09GVFdBUkUuXG5cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcsIGVzY2FwZSBjaGFyYWN0ZXJzIHdoaWNoIGhhdmUgbWVhbmluZyBpbiB0aGUgcmVnZXggZ3JhbW1hciwgc3VjaCB0aGF0IHRoZSByZXN1bHQgaXMgc2FmZSB0byBmZWVkIHRvXG4gKiBgbmV3IFJlZ0V4cCgpYC5cbiAqXG4gKiBAcGFyYW0gcmVnZXhTdHJpbmcgVGhlIHN0cmluZyB0byBlc2NhcGVcbiAqIEByZXR1cm5zIEFuIHZlcnNpb24gb2YgdGhlIHN0cmluZyB3aXRoIGFsbCBzcGVjaWFsIHJlZ2V4IGNoYXJhY3RlcnMgZXNjYXBlZFxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmdGb3JSZWdleChyZWdleFN0cmluZykge1xuICAvLyBlc2NhcGUgdGhlIGh5cGhlbiBzZXBhcmF0ZWx5IHNvIHdlIGNhbiBhbHNvIHJlcGxhY2UgaXQgd2l0aCBhIHVuaWNvZGUgbGl0ZXJhbCBoeXBoZW4sIHRvIGF2b2lkIHRoZSBwcm9ibGVtc1xuICAvLyBkaXNjdXNzZWQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9lc2NhcGUtc3RyaW5nLXJlZ2V4cC9pc3N1ZXMvMjAuXG4gIHJldHVybiByZWdleFN0cmluZy5yZXBsYWNlKC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZywgJ1xcXFwkJicpLnJlcGxhY2UoLy0vZywgJ1xcXFx4MmQnKTtcbn1cblxuZXhwb3J0cy5lc2NhcGVTdHJpbmdGb3JSZWdleCA9IGVzY2FwZVN0cmluZ0ZvclJlZ2V4O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXNjYXBlU3RyaW5nRm9yUmVnZXguanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlc2NhcGVTdHJpbmdGb3JSZWdleCIsInJlZ2V4U3RyaW5nIiwicmVwbGFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/escapeStringForRegex.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/getIpAddress.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/getIpAddress.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Vendored / modified from @sergiodxa/remix-utils\n\n// https://github.com/sergiodxa/remix-utils/blob/02af80e12829a53696bfa8f3c2363975cf59f55e/src/server/get-client-ip-address.ts\n// MIT License\n\n// Copyright (c) 2021 Sergio Xalambrí\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// The headers to check, in priority order\nconst ipHeaderNames = ['X-Client-IP', 'X-Forwarded-For', 'Fly-Client-IP', 'CF-Connecting-IP', 'Fastly-Client-Ip', 'True-Client-Ip', 'X-Real-IP', 'X-Cluster-Client-IP', 'X-Forwarded', 'Forwarded-For', 'Forwarded', 'X-Vercel-Forwarded-For'];\n\n/**\n * Get the IP address of the client sending a request.\n *\n * It receives a Request headers object and use it to get the\n * IP address from one of the following headers in order.\n *\n * If the IP address is valid, it will be returned. Otherwise, null will be\n * returned.\n *\n * If the header values contains more than one IP address, the first valid one\n * will be returned.\n */\nfunction getClientIPAddress(headers) {\n  // This will end up being Array<string | string[] | undefined | null> because of the various possible values a header\n  // can take\n  const headerValues = ipHeaderNames.map(headerName => {\n    const rawValue = headers[headerName];\n    const value = Array.isArray(rawValue) ? rawValue.join(';') : rawValue;\n    if (headerName === 'Forwarded') {\n      return parseForwardedHeader(value);\n    }\n    return value && value.split(',').map(v => v.trim());\n  });\n\n  // Flatten the array and filter out any falsy entries\n  const flattenedHeaderValues = headerValues.reduce((acc, val) => {\n    if (!val) {\n      return acc;\n    }\n    return acc.concat(val);\n  }, []);\n\n  // Find the first value which is a valid IP address, if any\n  const ipAddress = flattenedHeaderValues.find(ip => ip !== null && isIP(ip));\n  return ipAddress || null;\n}\nfunction parseForwardedHeader(value) {\n  if (!value) {\n    return null;\n  }\n  for (const part of value.split(';')) {\n    if (part.startsWith('for=')) {\n      return part.slice(4);\n    }\n  }\n  return null;\n}\n\n//\n/**\n * Custom method instead of importing this from `net` package, as this only exists in node\n * Accepts:\n * 127.0.0.1\n * 192.168.1.1\n * 192.168.1.255\n * 255.255.255.255\n * 10.1.1.1\n * 0.0.0.0\n * 2b01:cb19:8350:ed00:d0dd:fa5b:de31:8be5\n *\n * Rejects:\n * 1.1.1.01\n * 30.168.1.255.1\n * 127.1\n * 192.168.1.256\n * -1.2.3.4\n * 1.1.1.1.\n * 3...3\n * 192.168.1.099\n */\nfunction isIP(str) {\n  const regex = /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/;\n  return regex.test(str);\n}\nexports.getClientIPAddress = getClientIPAddress;\nexports.ipHeaderNames = ipHeaderNames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/getIpAddress.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/supportsHistory.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/supportsHistory.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ../worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n// Based on https://github.com/angular/angular.js/pull/13945/files\n// The MIT License\n\nconst WINDOW = worldwide.GLOBAL_OBJ;\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsHistory() {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  // TODO(v9): Remove this custom check, it is pretty old and likely not needed anymore\n  const chromeVar = WINDOW.chrome;\n  const isChromePackagedApp = chromeVar && chromeVar.app && chromeVar.app.runtime;\n  const hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;\n  return !isChromePackagedApp && hasHistoryApi;\n}\nexports.supportsHistory = supportsHistory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVuZG9yL3N1cHBvcnRzSGlzdG9yeS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxvR0FBaUIsQ0FBQzs7QUFFNUM7QUFDQTs7QUFHQSxNQUFNQyxNQUFNLEdBQUdGLFNBQVMsQ0FBQ0csVUFBVTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZUFBZUEsQ0FBQSxFQUFHO0VBQ3pCO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsTUFBTUMsU0FBUyxHQUFJSCxNQUFNLENBQUdJLE1BQU07RUFDbEMsTUFBTUMsbUJBQW1CLEdBQUdGLFNBQVMsSUFBSUEsU0FBUyxDQUFDRyxHQUFHLElBQUlILFNBQVMsQ0FBQ0csR0FBRyxDQUFDQyxPQUFPO0VBQy9FLE1BQU1DLGFBQWEsR0FBRyxTQUFTLElBQUlSLE1BQU0sSUFBSSxDQUFDLENBQUNBLE1BQU0sQ0FBQ1MsT0FBTyxDQUFDQyxTQUFTLElBQUksQ0FBQyxDQUFDVixNQUFNLENBQUNTLE9BQU8sQ0FBQ0UsWUFBWTtFQUV4RyxPQUFPLENBQUNOLG1CQUFtQixJQUFJRyxhQUFhO0FBQzlDO0FBRUFaLHVCQUF1QixHQUFHTSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVuZG9yL3N1cHBvcnRzSGlzdG9yeS5qcz9jN2IyIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4uL3dvcmxkd2lkZS5qcycpO1xuXG4vLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTM5NDUvZmlsZXNcbi8vIFRoZSBNSVQgTGljZW5zZVxuXG5cbmNvbnN0IFdJTkRPVyA9IHdvcmxkd2lkZS5HTE9CQUxfT0JKIDtcblxuLyoqXG4gKiBUZWxscyB3aGV0aGVyIGN1cnJlbnQgZW52aXJvbm1lbnQgc3VwcG9ydHMgSGlzdG9yeSBBUElcbiAqIHtAbGluayBzdXBwb3J0c0hpc3Rvcnl9LlxuICpcbiAqIEByZXR1cm5zIEFuc3dlciB0byB0aGUgZ2l2ZW4gcXVlc3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgLy8gTk9URTogaW4gQ2hyb21lIEFwcCBlbnZpcm9ubWVudCwgdG91Y2hpbmcgaGlzdG9yeS5wdXNoU3RhdGUsICpldmVuIGluc2lkZVxuICAvLyAgICAgICBhIHRyeS9jYXRjaCBibG9jayosIHdpbGwgY2F1c2UgQ2hyb21lIHRvIG91dHB1dCBhbiBlcnJvciB0byBjb25zb2xlLmVycm9yXG4gIC8vIGJvcnJvd2VkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8xMzk0NS9maWxlc1xuICAvLyBUT0RPKHY5KTogUmVtb3ZlIHRoaXMgY3VzdG9tIGNoZWNrLCBpdCBpcyBwcmV0dHkgb2xkIGFuZCBsaWtlbHkgbm90IG5lZWRlZCBhbnltb3JlXG4gIGNvbnN0IGNocm9tZVZhciA9IChXSU5ET1cgKS5jaHJvbWU7XG4gIGNvbnN0IGlzQ2hyb21lUGFja2FnZWRBcHAgPSBjaHJvbWVWYXIgJiYgY2hyb21lVmFyLmFwcCAmJiBjaHJvbWVWYXIuYXBwLnJ1bnRpbWU7XG4gIGNvbnN0IGhhc0hpc3RvcnlBcGkgPSAnaGlzdG9yeScgaW4gV0lORE9XICYmICEhV0lORE9XLmhpc3RvcnkucHVzaFN0YXRlICYmICEhV0lORE9XLmhpc3RvcnkucmVwbGFjZVN0YXRlO1xuXG4gIHJldHVybiAhaXNDaHJvbWVQYWNrYWdlZEFwcCAmJiBoYXNIaXN0b3J5QXBpO1xufVxuXG5leHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1cHBvcnRzSGlzdG9yeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIndvcmxkd2lkZSIsInJlcXVpcmUiLCJXSU5ET1ciLCJHTE9CQUxfT0JKIiwic3VwcG9ydHNIaXN0b3J5IiwiY2hyb21lVmFyIiwiY2hyb21lIiwiaXNDaHJvbWVQYWNrYWdlZEFwcCIsImFwcCIsInJ1bnRpbWUiLCJoYXNIaXN0b3J5QXBpIiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInJlcGxhY2VTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/supportsHistory.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vercelWaitUntil.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/vercelWaitUntil.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * Function that delays closing of a Vercel lambda until the provided promise is resolved.\n *\n * Vendored from https://www.npmjs.com/package/@vercel/functions\n */\nfunction vercelWaitUntil(task) {\n  const vercelRequestContextGlobal =\n  // @ts-expect-error This is not typed\n  worldwide.GLOBAL_OBJ[Symbol.for('@vercel/request-context')];\n  const ctx = vercelRequestContextGlobal && vercelRequestContextGlobal.get && vercelRequestContextGlobal.get() ? vercelRequestContextGlobal.get() : {};\n  if (ctx && ctx.waitUntil) {\n    ctx.waitUntil(task);\n  }\n}\nexports.vercelWaitUntil = vercelWaitUntil;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVyY2VsV2FpdFVudGlsLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsU0FBUyxHQUFHQyxtQkFBTyxDQUFDLG1HQUFnQixDQUFDOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZUFBZUEsQ0FBQ0MsSUFBSSxFQUFFO0VBQzdCLE1BQU1DLDBCQUEwQjtFQUM5QjtFQUNBSixTQUFTLENBQUNLLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztFQUU3RCxNQUFNQyxHQUFHLEdBQ1BKLDBCQUEwQixJQUFJQSwwQkFBMEIsQ0FBQ0ssR0FBRyxJQUFJTCwwQkFBMEIsQ0FBQ0ssR0FBRyxDQUFDLENBQUMsR0FDNUZMLDBCQUEwQixDQUFDSyxHQUFHLENBQUMsQ0FBQyxHQUNoQyxDQUFDLENBQUM7RUFFUixJQUFJRCxHQUFHLElBQUlBLEdBQUcsQ0FBQ0UsU0FBUyxFQUFFO0lBQ3hCRixHQUFHLENBQUNFLFNBQVMsQ0FBQ1AsSUFBSSxDQUFDO0VBQ3JCO0FBQ0Y7QUFFQUwsdUJBQXVCLEdBQUdJLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC92ZXJjZWxXYWl0VW50aWwuanM/ZTk5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3dvcmxkd2lkZS5qcycpO1xuXG4vKipcbiAqIEZ1bmN0aW9uIHRoYXQgZGVsYXlzIGNsb3Npbmcgb2YgYSBWZXJjZWwgbGFtYmRhIHVudGlsIHRoZSBwcm92aWRlZCBwcm9taXNlIGlzIHJlc29sdmVkLlxuICpcbiAqIFZlbmRvcmVkIGZyb20gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQHZlcmNlbC9mdW5jdGlvbnNcbiAqL1xuZnVuY3Rpb24gdmVyY2VsV2FpdFVudGlsKHRhc2spIHtcbiAgY29uc3QgdmVyY2VsUmVxdWVzdENvbnRleHRHbG9iYWwgPVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVGhpcyBpcyBub3QgdHlwZWRcbiAgICB3b3JsZHdpZGUuR0xPQkFMX09CSltTeW1ib2wuZm9yKCdAdmVyY2VsL3JlcXVlc3QtY29udGV4dCcpXTtcblxuICBjb25zdCBjdHggPVxuICAgIHZlcmNlbFJlcXVlc3RDb250ZXh0R2xvYmFsICYmIHZlcmNlbFJlcXVlc3RDb250ZXh0R2xvYmFsLmdldCAmJiB2ZXJjZWxSZXF1ZXN0Q29udGV4dEdsb2JhbC5nZXQoKVxuICAgICAgPyB2ZXJjZWxSZXF1ZXN0Q29udGV4dEdsb2JhbC5nZXQoKVxuICAgICAgOiB7fTtcblxuICBpZiAoY3R4ICYmIGN0eC53YWl0VW50aWwpIHtcbiAgICBjdHgud2FpdFVudGlsKHRhc2spO1xuICB9XG59XG5cbmV4cG9ydHMudmVyY2VsV2FpdFVudGlsID0gdmVyY2VsV2FpdFVudGlsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyY2VsV2FpdFVudGlsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwid29ybGR3aWRlIiwicmVxdWlyZSIsInZlcmNlbFdhaXRVbnRpbCIsInRhc2siLCJ2ZXJjZWxSZXF1ZXN0Q29udGV4dEdsb2JhbCIsIkdMT0JBTF9PQkoiLCJTeW1ib2wiLCJmb3IiLCJjdHgiLCJnZXQiLCJ3YWl0VW50aWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vercelWaitUntil.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/version.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// This is a magic string replaced by rollup\n\nconst SDK_VERSION = \"8.50.0\";\nexports.SDK_VERSION = SDK_VERSION;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDOztBQUU3RDs7QUFFQSxNQUFNQyxXQUFXLEdBQUcsUUFBUTtBQUU1QkYsbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC92ZXJzaW9uLmpzPzYwYjYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLy8gVGhpcyBpcyBhIG1hZ2ljIHN0cmluZyByZXBsYWNlZCBieSByb2xsdXBcblxuY29uc3QgU0RLX1ZFUlNJT04gPSBcIjguNTAuMFwiIDtcblxuZXhwb3J0cy5TREtfVkVSU0lPTiA9IFNES19WRVJTSU9OO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNES19WRVJTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst version = __webpack_require__(/*! ./version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n\n/** Get's the global object for the current JavaScript runtime */\nconst GLOBAL_OBJ = globalThis;\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__[]` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nfunction getGlobalSingleton(name, creator, obj) {\n  const gbl = obj || GLOBAL_OBJ;\n  const __SENTRY__ = gbl.__SENTRY__ = gbl.__SENTRY__ || {};\n  const versionedCarrier = __SENTRY__[version.SDK_VERSION] = __SENTRY__[version.SDK_VERSION] || {};\n  return versionedCarrier[name] || (versionedCarrier[name] = creator());\n}\nexports.GLOBAL_OBJ = GLOBAL_OBJ;\nexports.getGlobalSingleton = getGlobalSingleton;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvd29ybGR3aWRlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLCtGQUFjLENBQUM7O0FBRXZDO0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxVQUFVOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Msa0JBQWtCQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsR0FBRyxFQUFFO0VBQzlDLE1BQU1DLEdBQUcsR0FBSUQsR0FBRyxJQUFJTCxVQUFXO0VBQy9CLE1BQU1PLFVBQVUsR0FBSUQsR0FBRyxDQUFDQyxVQUFVLEdBQUdELEdBQUcsQ0FBQ0MsVUFBVSxJQUFJLENBQUMsQ0FBRTtFQUMxRCxNQUFNQyxnQkFBZ0IsR0FBSUQsVUFBVSxDQUFDVCxPQUFPLENBQUNXLFdBQVcsQ0FBQyxHQUFHRixVQUFVLENBQUNULE9BQU8sQ0FBQ1csV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFFO0VBQ2xHLE9BQU9ELGdCQUFnQixDQUFDTCxJQUFJLENBQUMsS0FBS0ssZ0JBQWdCLENBQUNMLElBQUksQ0FBQyxHQUFHQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3ZFO0FBRUFSLGtCQUFrQixHQUFHSSxVQUFVO0FBQy9CSiwwQkFBMEIsR0FBR00sa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvd29ybGR3aWRlLmpzPzg5ZmEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgdmVyc2lvbiA9IHJlcXVpcmUoJy4vdmVyc2lvbi5qcycpO1xuXG4vKiogR2V0J3MgdGhlIGdsb2JhbCBvYmplY3QgZm9yIHRoZSBjdXJyZW50IEphdmFTY3JpcHQgcnVudGltZSAqL1xuY29uc3QgR0xPQkFMX09CSiA9IGdsb2JhbFRoaXMgO1xuXG4vKipcbiAqIFJldHVybnMgYSBnbG9iYWwgc2luZ2xldG9uIGNvbnRhaW5lZCBpbiB0aGUgZ2xvYmFsIGBfX1NFTlRSWV9fW11gIG9iamVjdC5cbiAqXG4gKiBJZiB0aGUgc2luZ2xldG9uIGRvZXNuJ3QgYWxyZWFkeSBleGlzdCBpbiBgX19TRU5UUllfX2AsIGl0IHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGUgZ2l2ZW4gZmFjdG9yeVxuICogZnVuY3Rpb24gYW5kIGFkZGVkIHRvIHRoZSBgX19TRU5UUllfX2Agb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBuYW1lIG5hbWUgb2YgdGhlIGdsb2JhbCBzaW5nbGV0b24gb24gX19TRU5UUllfX1xuICogQHBhcmFtIGNyZWF0b3IgY3JlYXRvciBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgc2luZ2xldG9uIGlmIGl0IGRvZXNuJ3QgYWxyZWFkeSBleGlzdCBvbiBgX19TRU5UUllfX2BcbiAqIEBwYXJhbSBvYmogKE9wdGlvbmFsKSBUaGUgZ2xvYmFsIG9iamVjdCBvbiB3aGljaCB0byBsb29rIGZvciBgX19TRU5UUllfX2AsIGlmIG5vdCBgR0xPQkFMX09CSmAncyByZXR1cm4gdmFsdWVcbiAqIEByZXR1cm5zIHRoZSBzaW5nbGV0b25cbiAqL1xuZnVuY3Rpb24gZ2V0R2xvYmFsU2luZ2xldG9uKG5hbWUsIGNyZWF0b3IsIG9iaikge1xuICBjb25zdCBnYmwgPSAob2JqIHx8IEdMT0JBTF9PQkopIDtcbiAgY29uc3QgX19TRU5UUllfXyA9IChnYmwuX19TRU5UUllfXyA9IGdibC5fX1NFTlRSWV9fIHx8IHt9KTtcbiAgY29uc3QgdmVyc2lvbmVkQ2FycmllciA9IChfX1NFTlRSWV9fW3ZlcnNpb24uU0RLX1ZFUlNJT05dID0gX19TRU5UUllfX1t2ZXJzaW9uLlNES19WRVJTSU9OXSB8fCB7fSk7XG4gIHJldHVybiB2ZXJzaW9uZWRDYXJyaWVyW25hbWVdIHx8ICh2ZXJzaW9uZWRDYXJyaWVyW25hbWVdID0gY3JlYXRvcigpKTtcbn1cblxuZXhwb3J0cy5HTE9CQUxfT0JKID0gR0xPQkFMX09CSjtcbmV4cG9ydHMuZ2V0R2xvYmFsU2luZ2xldG9uID0gZ2V0R2xvYmFsU2luZ2xldG9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29ybGR3aWRlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmVyc2lvbiIsInJlcXVpcmUiLCJHTE9CQUxfT0JKIiwiZ2xvYmFsVGhpcyIsImdldEdsb2JhbFNpbmdsZXRvbiIsIm5hbWUiLCJjcmVhdG9yIiwib2JqIiwiZ2JsIiwiX19TRU5UUllfXyIsInZlcnNpb25lZENhcnJpZXIiLCJTREtfVkVSU0lPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dynamicSamplingContext = __webpack_require__(/*! ../tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst merge = __webpack_require__(/*! ./merge.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js\");\nconst spanUtils = __webpack_require__(/*! ./spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nfunction applyScopeDataToEvent(event, data) {\n  const {\n    fingerprint,\n    span,\n    breadcrumbs,\n    sdkProcessingMetadata\n  } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n\n/** Merge data of two scopes together. */\nfunction mergeScopeData(data, mergeData) {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    sdkProcessingMetadata,\n    breadcrumbs,\n    fingerprint,\n    eventProcessors,\n    attachments,\n    propagationContext,\n    transactionName,\n    span\n  } = mergeData;\n  mergeAndOverwriteScopeData(data, 'extra', extra);\n  mergeAndOverwriteScopeData(data, 'tags', tags);\n  mergeAndOverwriteScopeData(data, 'user', user);\n  mergeAndOverwriteScopeData(data, 'contexts', contexts);\n  data.sdkProcessingMetadata = merge.merge(data.sdkProcessingMetadata, sdkProcessingMetadata, 2);\n  if (level) {\n    data.level = level;\n  }\n  if (transactionName) {\n    data.transactionName = transactionName;\n  }\n  if (span) {\n    data.span = span;\n  }\n  if (breadcrumbs.length) {\n    data.breadcrumbs = [...data.breadcrumbs, ...breadcrumbs];\n  }\n  if (fingerprint.length) {\n    data.fingerprint = [...data.fingerprint, ...fingerprint];\n  }\n  if (eventProcessors.length) {\n    data.eventProcessors = [...data.eventProcessors, ...eventProcessors];\n  }\n  if (attachments.length) {\n    data.attachments = [...data.attachments, ...attachments];\n  }\n  data.propagationContext = {\n    ...data.propagationContext,\n    ...propagationContext\n  };\n}\n\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */\nfunction mergeAndOverwriteScopeData(data, prop, mergeVal) {\n  data[prop] = merge.merge(data[prop], mergeVal, 1);\n}\nfunction applyDataToEvent(event, data) {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    transactionName\n  } = data;\n  const cleanedExtra = object.dropUndefinedKeys(extra);\n  if (cleanedExtra && Object.keys(cleanedExtra).length) {\n    event.extra = {\n      ...cleanedExtra,\n      ...event.extra\n    };\n  }\n  const cleanedTags = object.dropUndefinedKeys(tags);\n  if (cleanedTags && Object.keys(cleanedTags).length) {\n    event.tags = {\n      ...cleanedTags,\n      ...event.tags\n    };\n  }\n  const cleanedUser = object.dropUndefinedKeys(user);\n  if (cleanedUser && Object.keys(cleanedUser).length) {\n    event.user = {\n      ...cleanedUser,\n      ...event.user\n    };\n  }\n  const cleanedContexts = object.dropUndefinedKeys(contexts);\n  if (cleanedContexts && Object.keys(cleanedContexts).length) {\n    event.contexts = {\n      ...cleanedContexts,\n      ...event.contexts\n    };\n  }\n  if (level) {\n    event.level = level;\n  }\n\n  // transaction events get their `transaction` from the root span name\n  if (transactionName && event.type !== 'transaction') {\n    event.transaction = transactionName;\n  }\n}\nfunction applyBreadcrumbsToEvent(event, breadcrumbs) {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\nfunction applySdkMetadataToEvent(event, sdkProcessingMetadata) {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata\n  };\n}\nfunction applySpanToEvent(event, span) {\n  event.contexts = {\n    trace: spanUtils.spanToTraceContext(span),\n    ...event.contexts\n  };\n  event.sdkProcessingMetadata = {\n    dynamicSamplingContext: dynamicSamplingContext.getDynamicSamplingContextFromSpan(span),\n    ...event.sdkProcessingMetadata\n  };\n  const rootSpan = spanUtils.getRootSpan(span);\n  const transactionName = spanUtils.spanToJSON(rootSpan).description;\n  if (transactionName && !event.transaction && event.type === 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event, fingerprint) {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (event.fingerprint && !event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\nexports.applyScopeDataToEvent = applyScopeDataToEvent;\nexports.mergeAndOverwriteScopeData = mergeAndOverwriteScopeData;\nexports.mergeScopeData = mergeScopeData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ../utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nfunction handleCallbackErrors(fn, onError,\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nonFinally = () => {}) {\n  let maybePromiseResult;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection(value, onError, onFinally) {\n  if (is.isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(res => {\n      onFinally();\n      return res;\n    }, e => {\n      onError(e);\n      onFinally();\n      throw e;\n    });\n  }\n  onFinally();\n  return value;\n}\nexports.handleCallbackErrors = handleCallbackErrors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaGFuZGxlQ2FsbGJhY2tFcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxFQUFFLEdBQUdDLG1CQUFPLENBQUMsa0dBQXNCLENBQUM7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxvQkFBb0JBLENBRzNCQyxFQUFFLEVBQ0ZDLE9BQU87QUFDUDtBQUNBQyxTQUFTLEdBQUdBLENBQUEsS0FBTSxDQUFDLENBQUMsRUFDcEI7RUFDQSxJQUFJQyxrQkFBa0I7RUFDdEIsSUFBSTtJQUNGQSxrQkFBa0IsR0FBR0gsRUFBRSxDQUFDLENBQUM7RUFDM0IsQ0FBQyxDQUFDLE9BQU9JLENBQUMsRUFBRTtJQUNWSCxPQUFPLENBQUNHLENBQUMsQ0FBQztJQUNWRixTQUFTLENBQUMsQ0FBQztJQUNYLE1BQU1FLENBQUM7RUFDVDtFQUVBLE9BQU9DLDJCQUEyQixDQUFDRixrQkFBa0IsRUFBRUYsT0FBTyxFQUFFQyxTQUFTLENBQUM7QUFDNUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0csMkJBQTJCQSxDQUNsQ1QsS0FBSyxFQUNMSyxPQUFPLEVBQ1BDLFNBQVMsRUFDVDtFQUNBLElBQUlMLEVBQUUsQ0FBQ1MsVUFBVSxDQUFDVixLQUFLLENBQUMsRUFBRTtJQUN4QjtJQUNBLE9BQU9BLEtBQUssQ0FBQ1csSUFBSSxDQUNmQyxHQUFHLElBQUk7TUFDTE4sU0FBUyxDQUFDLENBQUM7TUFDWCxPQUFPTSxHQUFHO0lBQ1osQ0FBQyxFQUNESixDQUFDLElBQUk7TUFDSEgsT0FBTyxDQUFDRyxDQUFDLENBQUM7TUFDVkYsU0FBUyxDQUFDLENBQUM7TUFDWCxNQUFNRSxDQUFDO0lBQ1QsQ0FDRixDQUFDO0VBQ0g7RUFFQUYsU0FBUyxDQUFDLENBQUM7RUFDWCxPQUFPTixLQUFLO0FBQ2Q7QUFFQUQsNEJBQTRCLEdBQUdJLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL2hhbmRsZUNhbGxiYWNrRXJyb3JzLmpzPzU4NGEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaXMgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9pcy5qcycpO1xuXG4vKipcbiAqIFdyYXAgYSBjYWxsYmFjayBmdW5jdGlvbiB3aXRoIGVycm9yIGhhbmRsaW5nLlxuICogSWYgYW4gZXJyb3IgaXMgdGhyb3duLCBpdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgYG9uRXJyb3JgIGNhbGxiYWNrIGFuZCByZS10aHJvd24uXG4gKlxuICogSWYgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gaXMgYSBwcm9taXNlLCBpdCB3aWxsIGJlIGhhbmRsZWQgd2l0aCBgbWF5YmVIYW5kbGVQcm9taXNlUmVqZWN0aW9uYC5cbiAqXG4gKiBJZiBhbiBgb25GaW5hbGx5YCBjYWxsYmFjayBpcyBwcm92aWRlZCwgdGhpcyB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBjYWxsYmFjayBoYXMgZmluaXNoZWRcbiAqIC0gc28gaWYgaXQgcmV0dXJucyBhIHByb21pc2UsIG9uY2UgdGhlIHByb21pc2UgcmVzb2x2ZWQvcmVqZWN0ZWQsXG4gKiBlbHNlIG9uY2UgdGhlIGNhbGxiYWNrIGhhcyBmaW5pc2hlZCBleGVjdXRpbmcuXG4gKiBUaGUgYG9uRmluYWxseWAgY2FsbGJhY2sgd2lsbCBfYWx3YXlzXyBiZSBjYWxsZWQsIG5vIG1hdHRlciBpZiBhbiBlcnJvciB3YXMgdGhyb3duIG9yIG5vdC5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlQ2FsbGJhY2tFcnJvcnNcblxuKFxuICBmbixcbiAgb25FcnJvcixcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICBvbkZpbmFsbHkgPSAoKSA9PiB7fSxcbikge1xuICBsZXQgbWF5YmVQcm9taXNlUmVzdWx0O1xuICB0cnkge1xuICAgIG1heWJlUHJvbWlzZVJlc3VsdCA9IGZuKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvbkVycm9yKGUpO1xuICAgIG9uRmluYWxseSgpO1xuICAgIHRocm93IGU7XG4gIH1cblxuICByZXR1cm4gbWF5YmVIYW5kbGVQcm9taXNlUmVqZWN0aW9uKG1heWJlUHJvbWlzZVJlc3VsdCwgb25FcnJvciwgb25GaW5hbGx5KTtcbn1cblxuLyoqXG4gKiBNYXliZSBoYW5kbGUgYSBwcm9taXNlIHJlamVjdGlvbi5cbiAqIFRoaXMgZXhwZWN0cyB0byBiZSBnaXZlbiBhIHZhbHVlIHRoYXQgX21heV8gYmUgYSBwcm9taXNlLCBvciBhbnkgb3RoZXIgdmFsdWUuXG4gKiBJZiBpdCBpcyBhIHByb21pc2UsIGFuZCBpdCByZWplY3RzLCBpdCB3aWxsIGNhbGwgdGhlIGBvbkVycm9yYCBjYWxsYmFjay5cbiAqIE90aGVyIHRoYW4gdGhpcywgaXQgd2lsbCBnZW5lcmFsbHkgcmV0dXJuIHRoZSBnaXZlbiB2YWx1ZSBhcy1pcy5cbiAqL1xuZnVuY3Rpb24gbWF5YmVIYW5kbGVQcm9taXNlUmVqZWN0aW9uKFxuICB2YWx1ZSxcbiAgb25FcnJvcixcbiAgb25GaW5hbGx5LFxuKSB7XG4gIGlmIChpcy5pc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSB0aGUgaXNUaGVuYWJsZSBjaGVjayByZXR1cm5zIHRoZSBcIndyb25nXCIgdHlwZSBoZXJlXG4gICAgcmV0dXJuIHZhbHVlLnRoZW4oXG4gICAgICByZXMgPT4ge1xuICAgICAgICBvbkZpbmFsbHkoKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0sXG4gICAgICBlID0+IHtcbiAgICAgICAgb25FcnJvcihlKTtcbiAgICAgICAgb25GaW5hbGx5KCk7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBvbkZpbmFsbHkoKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnRzLmhhbmRsZUNhbGxiYWNrRXJyb3JzID0gaGFuZGxlQ2FsbGJhY2tFcnJvcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYW5kbGVDYWxsYmFja0Vycm9ycy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzIiwicmVxdWlyZSIsImhhbmRsZUNhbGxiYWNrRXJyb3JzIiwiZm4iLCJvbkVycm9yIiwib25GaW5hbGx5IiwibWF5YmVQcm9taXNlUmVzdWx0IiwiZSIsIm1heWJlSGFuZGxlUHJvbWlzZVJlamVjdGlvbiIsImlzVGhlbmFibGUiLCJ0aGVuIiwicmVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\n\n// Treeshakable guard to remove all code related to tracing\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nfunction hasTracingEnabled(maybeOptions) {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n  const client = currentScopes.getClient();\n  const options = maybeOptions || client && client.getOptions();\n  // eslint-disable-next-line deprecation/deprecation\n  return !!options && (options.enableTracing || 'tracesSampleRate' in options || 'tracesSampler' in options);\n}\nexports.hasTracingEnabled = hasTracingEnabled;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaGFzVHJhY2luZ0VuYWJsZWQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsZ0dBQXFCLENBQUM7O0FBRXBEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxpQkFBaUJBLENBQ3hCQyxZQUFZLEVBQ1o7RUFDQSxJQUFJLE9BQU9DLGtCQUFrQixLQUFLLFNBQVMsSUFBSSxDQUFDQSxrQkFBa0IsRUFBRTtJQUNsRSxPQUFPLEtBQUs7RUFDZDtFQUVBLE1BQU1DLE1BQU0sR0FBR0wsYUFBYSxDQUFDTSxTQUFTLENBQUMsQ0FBQztFQUN4QyxNQUFNQyxPQUFPLEdBQUdKLFlBQVksSUFBS0UsTUFBTSxJQUFJQSxNQUFNLENBQUNHLFVBQVUsQ0FBQyxDQUFFO0VBQy9EO0VBQ0EsT0FBTyxDQUFDLENBQUNELE9BQU8sS0FBS0EsT0FBTyxDQUFDRSxhQUFhLElBQUksa0JBQWtCLElBQUlGLE9BQU8sSUFBSSxlQUFlLElBQUlBLE9BQU8sQ0FBQztBQUM1RztBQUVBVCx5QkFBeUIsR0FBR0ksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaGFzVHJhY2luZ0VuYWJsZWQuanM/ZWFkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi4vY3VycmVudFNjb3Blcy5qcycpO1xuXG4vLyBUcmVlc2hha2FibGUgZ3VhcmQgdG8gcmVtb3ZlIGFsbCBjb2RlIHJlbGF0ZWQgdG8gdHJhY2luZ1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdHJhY2luZyBpcyBjdXJyZW50bHkgZW5hYmxlZC5cbiAqXG4gKiBUcmFjaW5nIGlzIGVuYWJsZWQgd2hlbiBhdCBsZWFzdCBvbmUgb2YgYHRyYWNlc1NhbXBsZVJhdGVgIGFuZCBgdHJhY2VzU2FtcGxlcmAgaXMgZGVmaW5lZCBpbiB0aGUgU0RLIGNvbmZpZy5cbiAqL1xuZnVuY3Rpb24gaGFzVHJhY2luZ0VuYWJsZWQoXG4gIG1heWJlT3B0aW9ucyxcbikge1xuICBpZiAodHlwZW9mIF9fU0VOVFJZX1RSQUNJTkdfXyA9PT0gJ2Jvb2xlYW4nICYmICFfX1NFTlRSWV9UUkFDSU5HX18pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuICBjb25zdCBvcHRpb25zID0gbWF5YmVPcHRpb25zIHx8IChjbGllbnQgJiYgY2xpZW50LmdldE9wdGlvbnMoKSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICByZXR1cm4gISFvcHRpb25zICYmIChvcHRpb25zLmVuYWJsZVRyYWNpbmcgfHwgJ3RyYWNlc1NhbXBsZVJhdGUnIGluIG9wdGlvbnMgfHwgJ3RyYWNlc1NhbXBsZXInIGluIG9wdGlvbnMpO1xufVxuXG5leHBvcnRzLmhhc1RyYWNpbmdFbmFibGVkID0gaGFzVHJhY2luZ0VuYWJsZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNUcmFjaW5nRW5hYmxlZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImN1cnJlbnRTY29wZXMiLCJyZXF1aXJlIiwiaGFzVHJhY2luZ0VuYWJsZWQiLCJtYXliZU9wdGlvbnMiLCJfX1NFTlRSWV9UUkFDSU5HX18iLCJjbGllbnQiLCJnZXRDbGllbnQiLCJvcHRpb25zIiwiZ2V0T3B0aW9ucyIsImVuYWJsZVRyYWNpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Checks whether given url points to Sentry server\n *\n * @param url url to verify\n */\nfunction isSentryRequestUrl(url, client) {\n  const dsn = client && client.getDsn();\n  const tunnel = client && client.getOptions().tunnel;\n  return checkDsn(url, dsn) || checkTunnel(url, tunnel);\n}\nfunction checkTunnel(url, tunnel) {\n  if (!tunnel) {\n    return false;\n  }\n  return removeTrailingSlash(url) === removeTrailingSlash(tunnel);\n}\nfunction checkDsn(url, dsn) {\n  return dsn ? url.includes(dsn.host) : false;\n}\nfunction removeTrailingSlash(str) {\n  return str[str.length - 1] === '/' ? str.slice(0, -1) : str;\n}\nexports.isSentryRequestUrl = isSentryRequestUrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaXNTZW50cnlSZXF1ZXN0VXJsLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxrQkFBa0JBLENBQUNDLEdBQUcsRUFBRUMsTUFBTSxFQUFFO0VBQ3ZDLE1BQU1DLEdBQUcsR0FBR0QsTUFBTSxJQUFJQSxNQUFNLENBQUNFLE1BQU0sQ0FBQyxDQUFDO0VBQ3JDLE1BQU1DLE1BQU0sR0FBR0gsTUFBTSxJQUFJQSxNQUFNLENBQUNJLFVBQVUsQ0FBQyxDQUFDLENBQUNELE1BQU07RUFDbkQsT0FBT0UsUUFBUSxDQUFDTixHQUFHLEVBQUVFLEdBQUcsQ0FBQyxJQUFJSyxXQUFXLENBQUNQLEdBQUcsRUFBRUksTUFBTSxDQUFDO0FBQ3ZEO0FBRUEsU0FBU0csV0FBV0EsQ0FBQ1AsR0FBRyxFQUFFSSxNQUFNLEVBQUU7RUFDaEMsSUFBSSxDQUFDQSxNQUFNLEVBQUU7SUFDWCxPQUFPLEtBQUs7RUFDZDtFQUVBLE9BQU9JLG1CQUFtQixDQUFDUixHQUFHLENBQUMsS0FBS1EsbUJBQW1CLENBQUNKLE1BQU0sQ0FBQztBQUNqRTtBQUVBLFNBQVNFLFFBQVFBLENBQUNOLEdBQUcsRUFBRUUsR0FBRyxFQUFFO0VBQzFCLE9BQU9BLEdBQUcsR0FBR0YsR0FBRyxDQUFDUyxRQUFRLENBQUNQLEdBQUcsQ0FBQ1EsSUFBSSxDQUFDLEdBQUcsS0FBSztBQUM3QztBQUVBLFNBQVNGLG1CQUFtQkEsQ0FBQ0csR0FBRyxFQUFFO0VBQ2hDLE9BQU9BLEdBQUcsQ0FBQ0EsR0FBRyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHRCxHQUFHLENBQUNFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBR0YsR0FBRztBQUM3RDtBQUVBZCwwQkFBMEIsR0FBR0Usa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaXNTZW50cnlSZXF1ZXN0VXJsLmpzPzQyNWEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBnaXZlbiB1cmwgcG9pbnRzIHRvIFNlbnRyeSBzZXJ2ZXJcbiAqXG4gKiBAcGFyYW0gdXJsIHVybCB0byB2ZXJpZnlcbiAqL1xuZnVuY3Rpb24gaXNTZW50cnlSZXF1ZXN0VXJsKHVybCwgY2xpZW50KSB7XG4gIGNvbnN0IGRzbiA9IGNsaWVudCAmJiBjbGllbnQuZ2V0RHNuKCk7XG4gIGNvbnN0IHR1bm5lbCA9IGNsaWVudCAmJiBjbGllbnQuZ2V0T3B0aW9ucygpLnR1bm5lbDtcbiAgcmV0dXJuIGNoZWNrRHNuKHVybCwgZHNuKSB8fCBjaGVja1R1bm5lbCh1cmwsIHR1bm5lbCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrVHVubmVsKHVybCwgdHVubmVsKSB7XG4gIGlmICghdHVubmVsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHJlbW92ZVRyYWlsaW5nU2xhc2godXJsKSA9PT0gcmVtb3ZlVHJhaWxpbmdTbGFzaCh0dW5uZWwpO1xufVxuXG5mdW5jdGlvbiBjaGVja0Rzbih1cmwsIGRzbikge1xuICByZXR1cm4gZHNuID8gdXJsLmluY2x1ZGVzKGRzbi5ob3N0KSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFpbGluZ1NsYXNoKHN0cikge1xuICByZXR1cm4gc3RyW3N0ci5sZW5ndGggLSAxXSA9PT0gJy8nID8gc3RyLnNsaWNlKDAsIC0xKSA6IHN0cjtcbn1cblxuZXhwb3J0cy5pc1NlbnRyeVJlcXVlc3RVcmwgPSBpc1NlbnRyeVJlcXVlc3RVcmw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NlbnRyeVJlcXVlc3RVcmwuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc1NlbnRyeVJlcXVlc3RVcmwiLCJ1cmwiLCJjbGllbnQiLCJkc24iLCJnZXREc24iLCJ0dW5uZWwiLCJnZXRPcHRpb25zIiwiY2hlY2tEc24iLCJjaGVja1R1bm5lbCIsInJlbW92ZVRyYWlsaW5nU2xhc2giLCJpbmNsdWRlcyIsImhvc3QiLCJzdHIiLCJsZW5ndGgiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/merge.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Shallow merge two objects.\n * Does not mutate the passed in objects.\n * Undefined/empty values in the merge object will overwrite existing values.\n *\n * By default, this merges 2 levels deep.\n */\nfunction merge(initialObj, mergeObj, levels = 2) {\n  // If the merge value is not an object, or we have no merge levels left,\n  // we just set the value to the merge value\n  if (!mergeObj || typeof mergeObj !== 'object' || levels <= 0) {\n    return mergeObj;\n  }\n\n  // If the merge object is an empty object, and the initial object is not undefined, we return the initial object\n  if (initialObj && mergeObj && Object.keys(mergeObj).length === 0) {\n    return initialObj;\n  }\n\n  // Clone object\n  const output = {\n    ...initialObj\n  };\n\n  // Merge values into output, resursively\n  for (const key in mergeObj) {\n    if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {\n      output[key] = merge(output[key], mergeObj[key], levels - 1);\n    }\n  }\n  return output;\n}\nexports.merge = merge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbWVyZ2UuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxLQUFLQSxDQUFDQyxVQUFVLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxHQUFHLENBQUMsRUFBRTtFQUMvQztFQUNBO0VBQ0EsSUFBSSxDQUFDRCxRQUFRLElBQUksT0FBT0EsUUFBUSxLQUFLLFFBQVEsSUFBSUMsTUFBTSxJQUFJLENBQUMsRUFBRTtJQUM1RCxPQUFPRCxRQUFRO0VBQ2pCOztFQUVBO0VBQ0EsSUFBSUQsVUFBVSxJQUFJQyxRQUFRLElBQUlOLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDRixRQUFRLENBQUMsQ0FBQ0csTUFBTSxLQUFLLENBQUMsRUFBRTtJQUNoRSxPQUFPSixVQUFVO0VBQ25COztFQUVBO0VBQ0EsTUFBTUssTUFBTSxHQUFHO0lBQUUsR0FBR0w7RUFBVyxDQUFDOztFQUVoQztFQUNBLEtBQUssTUFBTU0sR0FBRyxJQUFJTCxRQUFRLEVBQUU7SUFDMUIsSUFBSU4sTUFBTSxDQUFDWSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUixRQUFRLEVBQUVLLEdBQUcsQ0FBQyxFQUFFO01BQ3ZERCxNQUFNLENBQUNDLEdBQUcsQ0FBQyxHQUFHUCxLQUFLLENBQUNNLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLEVBQUVMLFFBQVEsQ0FBQ0ssR0FBRyxDQUFDLEVBQUVKLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDN0Q7RUFDRjtFQUVBLE9BQU9HLE1BQU07QUFDZjtBQUVBUixhQUFhLEdBQUdFLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9tZXJnZS5qcz9jYTk4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogU2hhbGxvdyBtZXJnZSB0d28gb2JqZWN0cy5cbiAqIERvZXMgbm90IG11dGF0ZSB0aGUgcGFzc2VkIGluIG9iamVjdHMuXG4gKiBVbmRlZmluZWQvZW1wdHkgdmFsdWVzIGluIHRoZSBtZXJnZSBvYmplY3Qgd2lsbCBvdmVyd3JpdGUgZXhpc3RpbmcgdmFsdWVzLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoaXMgbWVyZ2VzIDIgbGV2ZWxzIGRlZXAuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKGluaXRpYWxPYmosIG1lcmdlT2JqLCBsZXZlbHMgPSAyKSB7XG4gIC8vIElmIHRoZSBtZXJnZSB2YWx1ZSBpcyBub3QgYW4gb2JqZWN0LCBvciB3ZSBoYXZlIG5vIG1lcmdlIGxldmVscyBsZWZ0LFxuICAvLyB3ZSBqdXN0IHNldCB0aGUgdmFsdWUgdG8gdGhlIG1lcmdlIHZhbHVlXG4gIGlmICghbWVyZ2VPYmogfHwgdHlwZW9mIG1lcmdlT2JqICE9PSAnb2JqZWN0JyB8fCBsZXZlbHMgPD0gMCkge1xuICAgIHJldHVybiBtZXJnZU9iajtcbiAgfVxuXG4gIC8vIElmIHRoZSBtZXJnZSBvYmplY3QgaXMgYW4gZW1wdHkgb2JqZWN0LCBhbmQgdGhlIGluaXRpYWwgb2JqZWN0IGlzIG5vdCB1bmRlZmluZWQsIHdlIHJldHVybiB0aGUgaW5pdGlhbCBvYmplY3RcbiAgaWYgKGluaXRpYWxPYmogJiYgbWVyZ2VPYmogJiYgT2JqZWN0LmtleXMobWVyZ2VPYmopLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBpbml0aWFsT2JqO1xuICB9XG5cbiAgLy8gQ2xvbmUgb2JqZWN0XG4gIGNvbnN0IG91dHB1dCA9IHsgLi4uaW5pdGlhbE9iaiB9O1xuXG4gIC8vIE1lcmdlIHZhbHVlcyBpbnRvIG91dHB1dCwgcmVzdXJzaXZlbHlcbiAgZm9yIChjb25zdCBrZXkgaW4gbWVyZ2VPYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lcmdlT2JqLCBrZXkpKSB7XG4gICAgICBvdXRwdXRba2V5XSA9IG1lcmdlKG91dHB1dFtrZXldLCBtZXJnZU9ialtrZXldLCBsZXZlbHMgLSAxKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1lcmdlIiwiaW5pdGlhbE9iaiIsIm1lcmdlT2JqIiwibGV2ZWxzIiwia2V5cyIsImxlbmd0aCIsIm91dHB1dCIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/meta.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/meta.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst traceData = __webpack_require__(/*! ./traceData.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\");\n\n/**\n * Returns a string of meta tags that represent the current trace data.\n *\n * You can use this to propagate a trace from your server-side rendered Html to the browser.\n * This function returns up to two meta tags, `sentry-trace` and `baggage`, depending on the\n * current trace data state.\n *\n * @example\n * Usage example:\n *\n * ```js\n * function renderHtml() {\n *   return `\n *     <head>\n *       ${getTraceMetaTags()}\n *     </head>\n *   `;\n * }\n * ```\n *\n */\nfunction getTraceMetaTags() {\n  return Object.entries(traceData.getTraceData()).map(([key, value]) => `<meta name=\"${key}\" content=\"${value}\"/>`).join('\\n');\n}\nexports.getTraceMetaTags = getTraceMetaTags;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbWV0YS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyw2RkFBZ0IsQ0FBQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZ0JBQWdCQSxDQUFBLEVBQUc7RUFDMUIsT0FBT04sTUFBTSxDQUFDTyxPQUFPLENBQUNILFNBQVMsQ0FBQ0ksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUM1Q0MsR0FBRyxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxFQUFFUCxLQUFLLENBQUMsS0FBTSxlQUFjTyxHQUFJLGNBQWFQLEtBQU0sS0FBSSxDQUFDLENBQ2pFUSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2Y7QUFFQVQsd0JBQXdCLEdBQUdJLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL21ldGEuanM/ZDg4YiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB0cmFjZURhdGEgPSByZXF1aXJlKCcuL3RyYWNlRGF0YS5qcycpO1xuXG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgb2YgbWV0YSB0YWdzIHRoYXQgcmVwcmVzZW50IHRoZSBjdXJyZW50IHRyYWNlIGRhdGEuXG4gKlxuICogWW91IGNhbiB1c2UgdGhpcyB0byBwcm9wYWdhdGUgYSB0cmFjZSBmcm9tIHlvdXIgc2VydmVyLXNpZGUgcmVuZGVyZWQgSHRtbCB0byB0aGUgYnJvd3Nlci5cbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB1cCB0byB0d28gbWV0YSB0YWdzLCBgc2VudHJ5LXRyYWNlYCBhbmQgYGJhZ2dhZ2VgLCBkZXBlbmRpbmcgb24gdGhlXG4gKiBjdXJyZW50IHRyYWNlIGRhdGEgc3RhdGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIFVzYWdlIGV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGZ1bmN0aW9uIHJlbmRlckh0bWwoKSB7XG4gKiAgIHJldHVybiBgXG4gKiAgICAgPGhlYWQ+XG4gKiAgICAgICAke2dldFRyYWNlTWV0YVRhZ3MoKX1cbiAqICAgICA8L2hlYWQ+XG4gKiAgIGA7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKi9cbmZ1bmN0aW9uIGdldFRyYWNlTWV0YVRhZ3MoKSB7XG4gIHJldHVybiBPYmplY3QuZW50cmllcyh0cmFjZURhdGEuZ2V0VHJhY2VEYXRhKCkpXG4gICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgPG1ldGEgbmFtZT1cIiR7a2V5fVwiIGNvbnRlbnQ9XCIke3ZhbHVlfVwiLz5gKVxuICAgIC5qb2luKCdcXG4nKTtcbn1cblxuZXhwb3J0cy5nZXRUcmFjZU1ldGFUYWdzID0gZ2V0VHJhY2VNZXRhVGFncztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGEuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0cmFjZURhdGEiLCJyZXF1aXJlIiwiZ2V0VHJhY2VNZXRhVGFncyIsImVudHJpZXMiLCJnZXRUcmFjZURhdGEiLCJtYXAiLCJrZXkiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/meta.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/parameterize.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/parameterize.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Tagged template function which returns parameterized representation of the message\n * For example: parameterize`This is a log statement with ${x} and ${y} params`, would return:\n * \"__sentry_template_string__\": 'This is a log statement with %s and %s params',\n * \"__sentry_template_values__\": ['first', 'second']\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n * @returns String with template information in __sentry_template_string__ and __sentry_template_values__ properties\n */\nfunction parameterize(strings, ...values) {\n  const formatted = new String(String.raw(strings, ...values));\n  formatted.__sentry_template_string__ = strings.join('\\x00').replace(/%/g, '%%').replace(/\\0/g, '%s');\n  formatted.__sentry_template_values__ = values;\n  return formatted;\n}\nexports.parameterize = parameterize;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcGFyYW1ldGVyaXplLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFlBQVlBLENBQUNDLE9BQU8sRUFBRSxHQUFHQyxNQUFNLEVBQUU7RUFDeEMsTUFBTUMsU0FBUyxHQUFHLElBQUlDLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDQyxHQUFHLENBQUNKLE9BQU8sRUFBRSxHQUFHQyxNQUFNLENBQUMsQ0FBQztFQUM1REMsU0FBUyxDQUFDRywwQkFBMEIsR0FBR0wsT0FBTyxDQUFDTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUNBLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO0VBQ3BHTCxTQUFTLENBQUNNLDBCQUEwQixHQUFHUCxNQUFNO0VBQzdDLE9BQU9DLFNBQVM7QUFDbEI7QUFFQUwsb0JBQW9CLEdBQUdFLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9wYXJhbWV0ZXJpemUuanM/NTYzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFRhZ2dlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIHBhcmFtZXRlcml6ZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1lc3NhZ2VcbiAqIEZvciBleGFtcGxlOiBwYXJhbWV0ZXJpemVgVGhpcyBpcyBhIGxvZyBzdGF0ZW1lbnQgd2l0aCAke3h9IGFuZCAke3l9IHBhcmFtc2AsIHdvdWxkIHJldHVybjpcbiAqIFwiX19zZW50cnlfdGVtcGxhdGVfc3RyaW5nX19cIjogJ1RoaXMgaXMgYSBsb2cgc3RhdGVtZW50IHdpdGggJXMgYW5kICVzIHBhcmFtcycsXG4gKiBcIl9fc2VudHJ5X3RlbXBsYXRlX3ZhbHVlc19fXCI6IFsnZmlyc3QnLCAnc2Vjb25kJ11cbiAqIEBwYXJhbSBzdHJpbmdzIEFuIGFycmF5IG9mIHN0cmluZyB2YWx1ZXMgc3BsaXR0ZWQgYmV0d2VlbiBleHByZXNzaW9uc1xuICogQHBhcmFtIHZhbHVlcyBFeHByZXNzaW9ucyBleHRyYWN0ZWQgZnJvbSB0ZW1wbGF0ZSBzdHJpbmdcbiAqIEByZXR1cm5zIFN0cmluZyB3aXRoIHRlbXBsYXRlIGluZm9ybWF0aW9uIGluIF9fc2VudHJ5X3RlbXBsYXRlX3N0cmluZ19fIGFuZCBfX3NlbnRyeV90ZW1wbGF0ZV92YWx1ZXNfXyBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIHBhcmFtZXRlcml6ZShzdHJpbmdzLCAuLi52YWx1ZXMpIHtcbiAgY29uc3QgZm9ybWF0dGVkID0gbmV3IFN0cmluZyhTdHJpbmcucmF3KHN0cmluZ3MsIC4uLnZhbHVlcykpIDtcbiAgZm9ybWF0dGVkLl9fc2VudHJ5X3RlbXBsYXRlX3N0cmluZ19fID0gc3RyaW5ncy5qb2luKCdcXHgwMCcpLnJlcGxhY2UoLyUvZywgJyUlJykucmVwbGFjZSgvXFwwL2csICclcycpO1xuICBmb3JtYXR0ZWQuX19zZW50cnlfdGVtcGxhdGVfdmFsdWVzX18gPSB2YWx1ZXM7XG4gIHJldHVybiBmb3JtYXR0ZWQ7XG59XG5cbmV4cG9ydHMucGFyYW1ldGVyaXplID0gcGFyYW1ldGVyaXplO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyYW1ldGVyaXplLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGFyYW1ldGVyaXplIiwic3RyaW5ncyIsInZhbHVlcyIsImZvcm1hdHRlZCIsIlN0cmluZyIsInJhdyIsIl9fc2VudHJ5X3RlbXBsYXRlX3N0cmluZ19fIiwiam9pbiIsInJlcGxhY2UiLCJfX3NlbnRyeV90ZW1wbGF0ZV92YWx1ZXNfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/parameterize.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n\n/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nfunction parseSampleRate(sampleRate) {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(sampleRate)} of type ${JSON.stringify(typeof sampleRate)}.`);\n    return undefined;\n  }\n  return rate;\n}\nexports.parseSampleRate = parseSampleRate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcGFyc2VTYW1wbGVSYXRlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLDRGQUFtQixDQUFDO0FBQy9DLE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQzs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxlQUFlQSxDQUFDQyxVQUFVLEVBQUU7RUFDbkMsSUFBSSxPQUFPQSxVQUFVLEtBQUssU0FBUyxFQUFFO0lBQ25DLE9BQU9DLE1BQU0sQ0FBQ0QsVUFBVSxDQUFDO0VBQzNCO0VBRUEsTUFBTUUsSUFBSSxHQUFHLE9BQU9GLFVBQVUsS0FBSyxRQUFRLEdBQUdHLFVBQVUsQ0FBQ0gsVUFBVSxDQUFDLEdBQUdBLFVBQVU7RUFDakYsSUFBSSxPQUFPRSxJQUFJLEtBQUssUUFBUSxJQUFJRSxLQUFLLENBQUNGLElBQUksQ0FBQyxJQUFJQSxJQUFJLEdBQUcsQ0FBQyxJQUFJQSxJQUFJLEdBQUcsQ0FBQyxFQUFFO0lBQ25FTixVQUFVLENBQUNTLFdBQVcsSUFDcEJQLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDUSxJQUFJLENBQ2YsMEdBQXlHQyxJQUFJLENBQUNDLFNBQVMsQ0FDdEhSLFVBQ0YsQ0FBRSxZQUFXTyxJQUFJLENBQUNDLFNBQVMsQ0FBQyxPQUFPUixVQUFVLENBQUUsR0FDakQsQ0FBQztJQUNILE9BQU9TLFNBQVM7RUFDbEI7RUFFQSxPQUFPUCxJQUFJO0FBQ2I7QUFFQVIsdUJBQXVCLEdBQUdLLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9wYXJzZVNhbXBsZVJhdGUuanM/Mzg1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuXG4vKipcbiAqIFBhcnNlIGEgc2FtcGxlIHJhdGUgZnJvbSBhIGdpdmVuIHZhbHVlLlxuICogVGhpcyB3aWxsIGVpdGhlciByZXR1cm4gYSBib29sZWFuIG9yIG51bWJlciBzYW1wbGUgcmF0ZSwgaWYgdGhlIHNhbXBsZSByYXRlIGlzIHZhbGlkIChiZXR3ZWVuIDAgYW5kIDEpLlxuICogSWYgYSBzdHJpbmcgaXMgcGFzc2VkLCB3ZSB0cnkgdG8gY29udmVydCBpdCB0byBhIG51bWJlci5cbiAqXG4gKiBBbnkgaW52YWxpZCBzYW1wbGUgcmF0ZSB3aWxsIHJldHVybiBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VTYW1wbGVSYXRlKHNhbXBsZVJhdGUpIHtcbiAgaWYgKHR5cGVvZiBzYW1wbGVSYXRlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gTnVtYmVyKHNhbXBsZVJhdGUpO1xuICB9XG5cbiAgY29uc3QgcmF0ZSA9IHR5cGVvZiBzYW1wbGVSYXRlID09PSAnc3RyaW5nJyA/IHBhcnNlRmxvYXQoc2FtcGxlUmF0ZSkgOiBzYW1wbGVSYXRlO1xuICBpZiAodHlwZW9mIHJhdGUgIT09ICdudW1iZXInIHx8IGlzTmFOKHJhdGUpIHx8IHJhdGUgPCAwIHx8IHJhdGUgPiAxKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJlxuICAgICAgbG9nZ2VyLmxvZ2dlci53YXJuKFxuICAgICAgICBgW1RyYWNpbmddIEdpdmVuIHNhbXBsZSByYXRlIGlzIGludmFsaWQuIFNhbXBsZSByYXRlIG11c3QgYmUgYSBib29sZWFuIG9yIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMS4gR290ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgc2FtcGxlUmF0ZSxcbiAgICAgICAgKX0gb2YgdHlwZSAke0pTT04uc3RyaW5naWZ5KHR5cGVvZiBzYW1wbGVSYXRlKX0uYCxcbiAgICAgICk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiByYXRlO1xufVxuXG5leHBvcnRzLnBhcnNlU2FtcGxlUmF0ZSA9IHBhcnNlU2FtcGxlUmF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlU2FtcGxlUmF0ZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlYnVnQnVpbGQiLCJyZXF1aXJlIiwibG9nZ2VyIiwicGFyc2VTYW1wbGVSYXRlIiwic2FtcGxlUmF0ZSIsIk51bWJlciIsInJhdGUiLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJERUJVR19CVUlMRCIsIndhcm4iLCJKU09OIiwic3RyaW5naWZ5IiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst constants = __webpack_require__(/*! ../constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst eventProcessors = __webpack_require__(/*! ../eventProcessors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js\");\nconst scope = __webpack_require__(/*! ../scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst debugIds = __webpack_require__(/*! ../utils-hoist/debug-ids.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js\");\nconst misc = __webpack_require__(/*! ../utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst normalize = __webpack_require__(/*! ../utils-hoist/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst string = __webpack_require__(/*! ../utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst applyScopeDataToEvent = __webpack_require__(/*! ./applyScopeDataToEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js\");\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nfunction prepareEvent(options, event, hint, scope, client, isolationScope) {\n  const {\n    normalizeDepth = 3,\n    normalizeMaxBreadth = 1000\n  } = options;\n  const prepared = {\n    ...event,\n    event_id: event.event_id || hint.event_id || misc.uuid4(),\n    timestamp: event.timestamp || time.dateTimestampInSeconds()\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n  if (client) {\n    client.emit('applyFrameMetadata', event);\n  }\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  const finalScope = getFinalScope(scope, hint.captureContext);\n  if (hint.mechanism) {\n    misc.addExceptionMechanism(prepared, hint.mechanism);\n  }\n  const clientEventProcessors = client ? client.getEventProcessors() : [];\n\n  // This should be the last thing called, since we want that\n  // {@link Scope.addEventProcessor} gets the finished prepared event.\n  // Merge scope data together\n  const data = currentScopes.getGlobalScope().getScopeData();\n  if (isolationScope) {\n    const isolationData = isolationScope.getScopeData();\n    applyScopeDataToEvent.mergeScopeData(data, isolationData);\n  }\n  if (finalScope) {\n    const finalScopeData = finalScope.getScopeData();\n    applyScopeDataToEvent.mergeScopeData(data, finalScopeData);\n  }\n  const attachments = [...(hint.attachments || []), ...data.attachments];\n  if (attachments.length) {\n    hint.attachments = attachments;\n  }\n  applyScopeDataToEvent.applyScopeDataToEvent(prepared, data);\n  const eventProcessors$1 = [...clientEventProcessors,\n  // Run scope event processors _after_ all other processors\n  ...data.eventProcessors];\n  const result = eventProcessors.notifyEventProcessors(eventProcessors$1, prepared, hint);\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n * Enhances event using the client configuration.\n * It takes care of all \"static\" values like environment, release and `dist`,\n * as well as truncating overly long values.\n *\n * Only exported for tests.\n *\n * @param event event instance to be enhanced\n */\nfunction applyClientOptions(event, options) {\n  const {\n    environment,\n    release,\n    dist,\n    maxValueLength = 250\n  } = options;\n\n  // empty strings do not make sense for environment, release, and dist\n  // so we handle them the same as if they were not provided\n  event.environment = event.environment || environment || constants.DEFAULT_ENVIRONMENT;\n  if (!event.release && release) {\n    event.release = release;\n  }\n  if (!event.dist && dist) {\n    event.dist = dist;\n  }\n  if (event.message) {\n    event.message = string.truncate(event.message, maxValueLength);\n  }\n  const exception = event.exception && event.exception.values && event.exception.values[0];\n  if (exception && exception.value) {\n    exception.value = string.truncate(exception.value, maxValueLength);\n  }\n  const request = event.request;\n  if (request && request.url) {\n    request.url = string.truncate(request.url, maxValueLength);\n  }\n}\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nfunction applyDebugIds(event, stackParser) {\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = debugIds.getFilenameToDebugIdMap(stackParser);\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace.frames.forEach(frame => {\n        if (filenameDebugIdMap && frame.filename) {\n          frame.debug_id = filenameDebugIdMap[frame.filename];\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nfunction applyDebugMeta(event) {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap = {};\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace.frames.forEach(frame => {\n        if (frame.debug_id) {\n          if (frame.abs_path) {\n            filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n          } else if (frame.filename) {\n            filenameDebugIdMap[frame.filename] = frame.debug_id;\n          }\n          delete frame.debug_id;\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.entries(filenameDebugIdMap).forEach(([filename, debug_id]) => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event, integrationNames) {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event, depth, maxBreadth) {\n  if (!event) {\n    return null;\n  }\n  const normalized = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize.normalize(b.data, depth, maxBreadth)\n        })\n      }))\n    }),\n    ...(event.user && {\n      user: normalize.normalize(event.user, depth, maxBreadth)\n    }),\n    ...(event.contexts && {\n      contexts: normalize.normalize(event.contexts, depth, maxBreadth)\n    }),\n    ...(event.extra && {\n      extra: normalize.normalize(event.extra, depth, maxBreadth)\n    })\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts && event.contexts.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize.normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      return {\n        ...span,\n        ...(span.data && {\n          data: normalize.normalize(span.data, depth, maxBreadth)\n        })\n      };\n    });\n  }\n\n  // event.contexts.flags (FeatureFlagContext) stores context for our feature\n  // flag integrations. It has a greater nesting depth than our other typed\n  // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want\n  // to skip this in case of conflicting, user-provided context.\n  if (event.contexts && event.contexts.flags && normalized.contexts) {\n    normalized.contexts.flags = normalize.normalize(event.contexts.flags, 3, maxBreadth);\n  }\n  return normalized;\n}\nfunction getFinalScope(scope$1, captureContext) {\n  if (!captureContext) {\n    return scope$1;\n  }\n  const finalScope = scope$1 ? scope$1.clone() : new scope.Scope();\n  finalScope.update(captureContext);\n  return finalScope;\n}\n\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */\nfunction parseEventHintOrCaptureContext(hint) {\n  if (!hint) {\n    return undefined;\n  }\n\n  // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n  if (hintIsScopeOrFunction(hint)) {\n    return {\n      captureContext: hint\n    };\n  }\n  if (hintIsScopeContext(hint)) {\n    return {\n      captureContext: hint\n    };\n  }\n  return hint;\n}\nfunction hintIsScopeOrFunction(hint) {\n  return hint instanceof scope.Scope || typeof hint === 'function';\n}\nconst captureContextKeys = ['user', 'level', 'extra', 'contexts', 'tags', 'fingerprint', 'requestSession', 'propagationContext'];\nfunction hintIsScopeContext(hint) {\n  return Object.keys(hint).some(key => captureContextKeys.includes(key));\n}\nexports.applyClientOptions = applyClientOptions;\nexports.applyDebugIds = applyDebugIds;\nexports.applyDebugMeta = applyDebugMeta;\nexports.parseEventHintOrCaptureContext = parseEventHintOrCaptureContext;\nexports.prepareEvent = prepareEvent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst version = __webpack_require__(/*! ../utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */\nfunction applySdkMetadata(options, name, names = [name], source = 'npm') {\n  const metadata = options._metadata || {};\n  if (!metadata.sdk) {\n    metadata.sdk = {\n      name: `sentry.javascript.${name}`,\n      packages: names.map(name => ({\n        name: `${source}:@sentry/${name}`,\n        version: version.SDK_VERSION\n      })),\n      version: version.SDK_VERSION\n    };\n  }\n  options._metadata = metadata;\n}\nexports.applySdkMetadata = applySdkMetadata;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc2RrTWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxPQUFPLEdBQUdDLG1CQUFPLENBQUMsNEdBQTJCLENBQUM7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZ0JBQWdCQSxDQUFDQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsS0FBSyxHQUFHLENBQUNELElBQUksQ0FBQyxFQUFFRSxNQUFNLEdBQUcsS0FBSyxFQUFFO0VBQ3ZFLE1BQU1DLFFBQVEsR0FBR0osT0FBTyxDQUFDSyxTQUFTLElBQUksQ0FBQyxDQUFDO0VBRXhDLElBQUksQ0FBQ0QsUUFBUSxDQUFDRSxHQUFHLEVBQUU7SUFDakJGLFFBQVEsQ0FBQ0UsR0FBRyxHQUFHO01BQ2JMLElBQUksRUFBRyxxQkFBb0JBLElBQUssRUFBQztNQUNqQ00sUUFBUSxFQUFFTCxLQUFLLENBQUNNLEdBQUcsQ0FBQ1AsSUFBSSxLQUFLO1FBQzNCQSxJQUFJLEVBQUcsR0FBRUUsTUFBTyxZQUFXRixJQUFLLEVBQUM7UUFDakNKLE9BQU8sRUFBRUEsT0FBTyxDQUFDWTtNQUNuQixDQUFDLENBQUMsQ0FBQztNQUNIWixPQUFPLEVBQUVBLE9BQU8sQ0FBQ1k7SUFDbkIsQ0FBQztFQUNIO0VBRUFULE9BQU8sQ0FBQ0ssU0FBUyxHQUFHRCxRQUFRO0FBQzlCO0FBRUFULHdCQUF3QixHQUFHSSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9zZGtNZXRhZGF0YS5qcz82OTMwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHZlcnNpb24gPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC92ZXJzaW9uLmpzJyk7XG5cbi8qKlxuICogQSBidWlsZGVyIGZvciB0aGUgU0RLIG1ldGFkYXRhIGluIHRoZSBvcHRpb25zIGZvciB0aGUgU0RLIGluaXRpYWxpemF0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gaXMgaWRlbnRpY2FsIHRvIGBidWlsZE1ldGFkYXRhYCBpbiBSZW1peCBhbmQgTmV4dEpTIGFuZCBTdmVsdGVLaXQuXG4gKiBXZSBkb24ndCBleHRyYWN0IGl0IGZvciBidW5kbGUgc2l6ZSByZWFzb25zLlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L3B1bGwvNzQwNFxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L3B1bGwvNDE5NlxuICpcbiAqIElmIHlvdSBtYWtlIGNoYW5nZXMgdG8gdGhpcyBmdW5jdGlvbiBjb25zaWRlciB1cGRhdGluZyB0aGUgb3RoZXJzIGFzIHdlbGwuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgU0RLIG9wdGlvbnMgb2JqZWN0IHRoYXQgZ2V0cyBtdXRhdGVkXG4gKiBAcGFyYW0gbmFtZXMgbGlzdCBvZiBwYWNrYWdlIG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U2RrTWV0YWRhdGEob3B0aW9ucywgbmFtZSwgbmFtZXMgPSBbbmFtZV0sIHNvdXJjZSA9ICducG0nKSB7XG4gIGNvbnN0IG1ldGFkYXRhID0gb3B0aW9ucy5fbWV0YWRhdGEgfHwge307XG5cbiAgaWYgKCFtZXRhZGF0YS5zZGspIHtcbiAgICBtZXRhZGF0YS5zZGsgPSB7XG4gICAgICBuYW1lOiBgc2VudHJ5LmphdmFzY3JpcHQuJHtuYW1lfWAsXG4gICAgICBwYWNrYWdlczogbmFtZXMubWFwKG5hbWUgPT4gKHtcbiAgICAgICAgbmFtZTogYCR7c291cmNlfTpAc2VudHJ5LyR7bmFtZX1gLFxuICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uLlNES19WRVJTSU9OLFxuICAgICAgfSkpLFxuICAgICAgdmVyc2lvbjogdmVyc2lvbi5TREtfVkVSU0lPTixcbiAgICB9O1xuICB9XG5cbiAgb3B0aW9ucy5fbWV0YWRhdGEgPSBtZXRhZGF0YTtcbn1cblxuZXhwb3J0cy5hcHBseVNka01ldGFkYXRhID0gYXBwbHlTZGtNZXRhZGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNka01ldGFkYXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmVyc2lvbiIsInJlcXVpcmUiLCJhcHBseVNka01ldGFkYXRhIiwib3B0aW9ucyIsIm5hbWUiLCJuYW1lcyIsInNvdXJjZSIsIm1ldGFkYXRhIiwiX21ldGFkYXRhIiwic2RrIiwicGFja2FnZXMiLCJtYXAiLCJTREtfVkVSU0lPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst SCOPE_SPAN_FIELD = '_sentrySpan';\n\n/**\n * Set the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nfunction _setSpanForScope(scope, span) {\n  if (span) {\n    object.addNonEnumerableProperty(scope, SCOPE_SPAN_FIELD, span);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete scope[SCOPE_SPAN_FIELD];\n  }\n}\n\n/**\n * Get the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nfunction _getSpanForScope(scope) {\n  return scope[SCOPE_SPAN_FIELD];\n}\nexports._getSpanForScope = _getSpanForScope;\nexports._setSpanForScope = _setSpanForScope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc3Bhbk9uU2NvcGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxNQUFNLEdBQUdDLG1CQUFPLENBQUMsMEdBQTBCLENBQUM7QUFFbEQsTUFBTUMsZ0JBQWdCLEdBQUcsYUFBYTs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxnQkFBZ0JBLENBQUNDLEtBQUssRUFBRUMsSUFBSSxFQUFFO0VBQ3JDLElBQUlBLElBQUksRUFBRTtJQUNSTCxNQUFNLENBQUNNLHdCQUF3QixDQUFDRixLQUFLLEVBQUdGLGdCQUFnQixFQUFFRyxJQUFJLENBQUM7RUFDakUsQ0FBQyxNQUFNO0lBQ0w7SUFDQSxPQUFRRCxLQUFLLENBQUdGLGdCQUFnQixDQUFDO0VBQ25DO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTSyxnQkFBZ0JBLENBQUNILEtBQUssRUFBRTtFQUMvQixPQUFPQSxLQUFLLENBQUNGLGdCQUFnQixDQUFDO0FBQ2hDO0FBRUFKLHdCQUF3QixHQUFHUyxnQkFBZ0I7QUFDM0NULHdCQUF3QixHQUFHSyxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9zcGFuT25TY29wZS5qcz8yYTMwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L29iamVjdC5qcycpO1xuXG5jb25zdCBTQ09QRV9TUEFOX0ZJRUxEID0gJ19zZW50cnlTcGFuJztcblxuLyoqXG4gKiBTZXQgdGhlIGFjdGl2ZSBzcGFuIGZvciBhIGdpdmVuIHNjb3BlLlxuICogTk9URTogVGhpcyBzaG91bGQgTk9UIGJlIHVzZWQgZGlyZWN0bHksIGJ1dCBpcyBvbmx5IHVzZWQgaW50ZXJuYWxseSBieSB0aGUgdHJhY2UgbWV0aG9kcy5cbiAqL1xuZnVuY3Rpb24gX3NldFNwYW5Gb3JTY29wZShzY29wZSwgc3Bhbikge1xuICBpZiAoc3Bhbikge1xuICAgIG9iamVjdC5hZGROb25FbnVtZXJhYmxlUHJvcGVydHkoc2NvcGUgLCBTQ09QRV9TUEFOX0ZJRUxELCBzcGFuKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG4gICAgZGVsZXRlIChzY29wZSApW1NDT1BFX1NQQU5fRklFTERdO1xuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBhY3RpdmUgc3BhbiBmb3IgYSBnaXZlbiBzY29wZS5cbiAqIE5PVEU6IFRoaXMgc2hvdWxkIE5PVCBiZSB1c2VkIGRpcmVjdGx5LCBidXQgaXMgb25seSB1c2VkIGludGVybmFsbHkgYnkgdGhlIHRyYWNlIG1ldGhvZHMuXG4gKi9cbmZ1bmN0aW9uIF9nZXRTcGFuRm9yU2NvcGUoc2NvcGUpIHtcbiAgcmV0dXJuIHNjb3BlW1NDT1BFX1NQQU5fRklFTERdO1xufVxuXG5leHBvcnRzLl9nZXRTcGFuRm9yU2NvcGUgPSBfZ2V0U3BhbkZvclNjb3BlO1xuZXhwb3J0cy5fc2V0U3BhbkZvclNjb3BlID0gX3NldFNwYW5Gb3JTY29wZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYW5PblNjb3BlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwib2JqZWN0IiwicmVxdWlyZSIsIlNDT1BFX1NQQU5fRklFTEQiLCJfc2V0U3BhbkZvclNjb3BlIiwic2NvcGUiLCJzcGFuIiwiYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiX2dldFNwYW5Gb3JTY29wZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/spanUtils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst index = __webpack_require__(/*! ../asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst metricSummary = __webpack_require__(/*! ../metrics/metric-summary.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst spanstatus = __webpack_require__(/*! ../tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst propagationContext = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst tracing = __webpack_require__(/*! ../utils-hoist/tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js\");\nconst spanOnScope = __webpack_require__(/*! ./spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\n\n// These are aligned with OpenTelemetry trace flags\nconst TRACE_FLAG_NONE = 0x0;\nconst TRACE_FLAG_SAMPLED = 0x1;\n\n// todo(v9): Remove this once we've stopped dropping spans via `beforeSendSpan`\nlet hasShownSpanDropWarning = false;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n * By default, this will only include trace_id, span_id & parent_span_id.\n * If `includeAllData` is true, it will also include data, op, status & origin.\n */\nfunction spanToTransactionTraceContext(span) {\n  const {\n    spanId: span_id,\n    traceId: trace_id\n  } = span.spanContext();\n  const {\n    data,\n    op,\n    parent_span_id,\n    status,\n    origin\n  } = spanToJSON(span);\n  return object.dropUndefinedKeys({\n    parent_span_id,\n    span_id,\n    trace_id,\n    data,\n    op,\n    status,\n    origin\n  });\n}\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n */\nfunction spanToTraceContext(span) {\n  const {\n    spanId,\n    traceId: trace_id,\n    isRemote\n  } = span.spanContext();\n\n  // If the span is remote, we use a random/virtual span as span_id to the trace context,\n  // and the remote span as parent_span_id\n  const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n  const span_id = isRemote ? propagationContext.generateSpanId() : spanId;\n  return object.dropUndefinedKeys({\n    parent_span_id,\n    span_id,\n    trace_id\n  });\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nfunction spanToTraceHeader(span) {\n  const {\n    traceId,\n    spanId\n  } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return tracing.generateSentryTraceHeader(traceId, spanId, sampled);\n}\n\n/**\n * Convert a span time input into a timestamp in seconds.\n */\nfunction spanTimeInputToSeconds(input) {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n  return time.timestampInSeconds();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n */\n// Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n// And `spanToJSON` needs the Span class from `span.ts` to check here.\nfunction spanToJSON(span) {\n  if (spanIsSentrySpan(span)) {\n    return span.getSpanJSON();\n  }\n  try {\n    const {\n      spanId: span_id,\n      traceId: trace_id\n    } = span.spanContext();\n\n    // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n    if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n      const {\n        attributes,\n        startTime,\n        name,\n        endTime,\n        parentSpanId,\n        status\n      } = span;\n      return object.dropUndefinedKeys({\n        span_id,\n        trace_id,\n        data: attributes,\n        description: name,\n        parent_span_id: parentSpanId,\n        start_timestamp: spanTimeInputToSeconds(startTime),\n        // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n        timestamp: spanTimeInputToSeconds(endTime) || undefined,\n        status: getStatusMessage(status),\n        op: attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n        origin: attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],\n        _metrics_summary: metricSummary.getMetricSummaryJsonForSpan(span)\n      });\n    }\n\n    // Finally, at least we have `spanContext()`....\n    return {\n      span_id,\n      trace_id\n    };\n  } catch (e) {\n    return {};\n  }\n}\nfunction spanIsOpenTelemetrySdkTraceBaseSpan(span) {\n  const castSpan = span;\n  return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n}\n\n/** Exported only for tests. */\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSentrySpan(span) {\n  return typeof span.getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nfunction spanIsSampled(span) {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const {\n    traceFlags\n  } = span.spanContext();\n  return traceFlags === TRACE_FLAG_SAMPLED;\n}\n\n/** Get the status message to use for a JSON representation of a span. */\nfunction getStatusMessage(status) {\n  if (!status || status.code === spanstatus.SPAN_STATUS_UNSET) {\n    return undefined;\n  }\n  if (status.code === spanstatus.SPAN_STATUS_OK) {\n    return 'ok';\n  }\n  return status.message || 'unknown_error';\n}\nconst CHILD_SPANS_FIELD = '_sentryChildSpans';\nconst ROOT_SPAN_FIELD = '_sentryRootSpan';\n\n/**\n * Adds an opaque child span reference to a span.\n */\nfunction addChildSpanToSpan(span, childSpan) {\n  // We store the root span reference on the child span\n  // We need this for `getRootSpan()` to work\n  const rootSpan = span[ROOT_SPAN_FIELD] || span;\n  object.addNonEnumerableProperty(childSpan, ROOT_SPAN_FIELD, rootSpan);\n\n  // We store a list of child spans on the parent span\n  // We need this for `getSpanDescendants()` to work\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].add(childSpan);\n  } else {\n    object.addNonEnumerableProperty(span, CHILD_SPANS_FIELD, new Set([childSpan]));\n  }\n}\n\n/** This is only used internally by Idle Spans. */\nfunction removeChildSpanFromSpan(span, childSpan) {\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].delete(childSpan);\n  }\n}\n\n/**\n * Returns an array of the given span and all of its descendants.\n */\nfunction getSpanDescendants(span) {\n  const resultSet = new Set();\n  function addSpanChildren(span) {\n    // This exit condition is required to not infinitely loop in case of a circular dependency.\n    if (resultSet.has(span)) {\n      return;\n      // We want to ignore unsampled spans (e.g. non recording spans)\n    } else if (spanIsSampled(span)) {\n      resultSet.add(span);\n      const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n      for (const childSpan of childSpans) {\n        addSpanChildren(childSpan);\n      }\n    }\n  }\n  addSpanChildren(span);\n  return Array.from(resultSet);\n}\n\n/**\n * Returns the root span of a given span.\n */\nfunction getRootSpan(span) {\n  return span[ROOT_SPAN_FIELD] || span;\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  if (acs.getActiveSpan) {\n    return acs.getActiveSpan();\n  }\n  return spanOnScope._getSpanForScope(currentScopes.getCurrentScope());\n}\n\n/**\n * Updates the metric summary on the currently active span\n */\nfunction updateMetricSummaryOnActiveSpan(metricType, sanitizedName, value, unit, tags, bucketKey) {\n  const span = getActiveSpan();\n  if (span) {\n    metricSummary.updateMetricSummaryOnSpan(span, metricType, sanitizedName, value, unit, tags, bucketKey);\n  }\n}\n\n/**\n * Logs a warning once if `beforeSendSpan` is used to drop spans.\n *\n * todo(v9): Remove this once we've stopped dropping spans via `beforeSendSpan`.\n */\nfunction showSpanDropWarning() {\n  if (!hasShownSpanDropWarning) {\n    logger.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Deprecation warning: Returning null from `beforeSendSpan` will be disallowed from SDK version 9.0.0 onwards. The callback will only support mutating spans. To drop certain spans, configure the respective integrations directly.');\n    });\n    hasShownSpanDropWarning = true;\n  }\n}\n\n/**\n * Updates the name of the given span and ensures that the span name is not\n * overwritten by the Sentry SDK.\n *\n * Use this function instead of `span.updateName()` if you want to make sure that\n * your name is kept. For some spans, for example root `http.server` spans the\n * Sentry SDK would otherwise overwrite the span name with a high-quality name\n * it infers when the span ends.\n *\n * Use this function in server code or when your span is started on the server\n * and on the client (browser). If you only update a span name on the client,\n * you can also use `span.updateName()` the SDK does not overwrite the name.\n *\n * @param span - The span to update the name of.\n * @param name - The name to set on the span.\n */\nfunction updateSpanName(span, name) {\n  span.updateName(name);\n  span.setAttributes({\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name\n  });\n}\nexports.TRACE_FLAG_NONE = TRACE_FLAG_NONE;\nexports.TRACE_FLAG_SAMPLED = TRACE_FLAG_SAMPLED;\nexports.addChildSpanToSpan = addChildSpanToSpan;\nexports.getActiveSpan = getActiveSpan;\nexports.getRootSpan = getRootSpan;\nexports.getSpanDescendants = getSpanDescendants;\nexports.getStatusMessage = getStatusMessage;\nexports.removeChildSpanFromSpan = removeChildSpanFromSpan;\nexports.showSpanDropWarning = showSpanDropWarning;\nexports.spanIsSampled = spanIsSampled;\nexports.spanTimeInputToSeconds = spanTimeInputToSeconds;\nexports.spanToJSON = spanToJSON;\nexports.spanToTraceContext = spanToTraceContext;\nexports.spanToTraceHeader = spanToTraceHeader;\nexports.spanToTransactionTraceContext = spanToTransactionTraceContext;\nexports.updateMetricSummaryOnActiveSpan = updateMetricSummaryOnActiveSpan;\nexports.updateSpanName = updateSpanName;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/traceData.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst index = __webpack_require__(/*! ../asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\n__webpack_require__(/*! ../tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\n__webpack_require__(/*! ../utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ../utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n__webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\n__webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanUtils = __webpack_require__(/*! ./spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst tracing = __webpack_require__(/*! ../utils-hoist/tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ../tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst baggage = __webpack_require__(/*! ../utils-hoist/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\");\n\n/**\n * Extracts trace propagation data from the current span or from the client's scope (via transaction or propagation\n * context) and serializes it to `sentry-trace` and `baggage` values to strings. These values can be used to propagate\n * a trace via our tracing Http headers or Html `<meta>` tags.\n *\n * This function also applies some validation to the generated sentry-trace and baggage values to ensure that\n * only valid strings are returned.\n *\n * @returns an object with the tracing data values. The object keys are the name of the tracing key to be used as header\n * or meta tag name.\n */\nfunction getTraceData(options = {}) {\n  const client = currentScopes.getClient();\n  if (!exports$1.isEnabled() || !client) {\n    return {};\n  }\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  if (acs.getTraceData) {\n    return acs.getTraceData(options);\n  }\n  const scope = currentScopes.getCurrentScope();\n  const span = options.span || spanUtils.getActiveSpan();\n  const sentryTrace = span ? spanUtils.spanToTraceHeader(span) : scopeToTraceHeader(scope);\n  const dsc = span ? dynamicSamplingContext.getDynamicSamplingContextFromSpan(span) : dynamicSamplingContext.getDynamicSamplingContextFromScope(client, scope);\n  const baggage$1 = baggage.dynamicSamplingContextToSentryBaggageHeader(dsc);\n  const isValidSentryTraceHeader = tracing.TRACEPARENT_REGEXP.test(sentryTrace);\n  if (!isValidSentryTraceHeader) {\n    logger.logger.warn('Invalid sentry-trace data. Cannot generate trace data');\n    return {};\n  }\n  return {\n    'sentry-trace': sentryTrace,\n    baggage: baggage$1\n  };\n}\n\n/**\n * Get a sentry-trace header value for the given scope.\n */\nfunction scopeToTraceHeader(scope) {\n  // TODO(v9): Use generateSpanId() instead of spanId\n  // eslint-disable-next-line deprecation/deprecation\n  const {\n    traceId,\n    sampled,\n    spanId\n  } = scope.getPropagationContext();\n  return tracing.generateSentryTraceHeader(traceId, spanId, sampled);\n}\nexports.getTraceData = getTraceData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdHJhY2VEYXRhLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLDBHQUEwQixDQUFDO0FBQ2pELE1BQU1DLE9BQU8sR0FBR0QsbUJBQU8sQ0FBQyxvRkFBZSxDQUFDO0FBQ3hDLE1BQU1FLGFBQWEsR0FBR0YsbUJBQU8sQ0FBQyxnR0FBcUIsQ0FBQztBQUNwRCxNQUFNRyxTQUFTLEdBQUdILG1CQUFPLENBQUMsb0ZBQWUsQ0FBQztBQUMxQ0EsbUJBQU8sQ0FBQyxrR0FBc0IsQ0FBQztBQUMvQkEsbUJBQU8sQ0FBQyw0R0FBMkIsQ0FBQztBQUNwQ0EsbUJBQU8sQ0FBQyxvSEFBK0IsQ0FBQztBQUN4QyxNQUFNSSxNQUFNLEdBQUdKLG1CQUFPLENBQUMsMEdBQTBCLENBQUM7QUFDbERBLG1CQUFPLENBQUMsNEZBQW1CLENBQUM7QUFDNUJBLG1CQUFPLENBQUMsc0dBQXdCLENBQUM7QUFDakMsTUFBTUssU0FBUyxHQUFHTCxtQkFBTyxDQUFDLDZGQUFnQixDQUFDO0FBQzNDLE1BQU1NLE9BQU8sR0FBR04sbUJBQU8sQ0FBQyw0R0FBMkIsQ0FBQztBQUNwRCxNQUFNTyxzQkFBc0IsR0FBR1AsbUJBQU8sQ0FBQyxrSUFBc0MsQ0FBQztBQUM5RSxNQUFNUSxPQUFPLEdBQUdSLG1CQUFPLENBQUMsNEdBQTJCLENBQUM7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTUyxZQUFZQSxDQUFDQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDbEMsTUFBTUMsTUFBTSxHQUFHVCxhQUFhLENBQUNVLFNBQVMsQ0FBQyxDQUFDO0VBQ3hDLElBQUksQ0FBQ1QsU0FBUyxDQUFDVSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUNGLE1BQU0sRUFBRTtJQUNyQyxPQUFPLENBQUMsQ0FBQztFQUNYO0VBRUEsTUFBTUcsU0FBUyxHQUFHYixPQUFPLENBQUNjLGNBQWMsQ0FBQyxDQUFDO0VBQzFDLE1BQU1DLEdBQUcsR0FBR2pCLEtBQUssQ0FBQ2tCLHVCQUF1QixDQUFDSCxTQUFTLENBQUM7RUFDcEQsSUFBSUUsR0FBRyxDQUFDUCxZQUFZLEVBQUU7SUFDcEIsT0FBT08sR0FBRyxDQUFDUCxZQUFZLENBQUNDLE9BQU8sQ0FBQztFQUNsQztFQUVBLE1BQU1RLEtBQUssR0FBR2hCLGFBQWEsQ0FBQ2lCLGVBQWUsQ0FBQyxDQUFDO0VBQzdDLE1BQU1DLElBQUksR0FBR1YsT0FBTyxDQUFDVSxJQUFJLElBQUlmLFNBQVMsQ0FBQ2dCLGFBQWEsQ0FBQyxDQUFDO0VBQ3RELE1BQU1DLFdBQVcsR0FBR0YsSUFBSSxHQUFHZixTQUFTLENBQUNrQixpQkFBaUIsQ0FBQ0gsSUFBSSxDQUFDLEdBQUdJLGtCQUFrQixDQUFDTixLQUFLLENBQUM7RUFDeEYsTUFBTU8sR0FBRyxHQUFHTCxJQUFJLEdBQUdiLHNCQUFzQixDQUFDbUIsaUNBQWlDLENBQUNOLElBQUksQ0FBQyxHQUFHYixzQkFBc0IsQ0FBQ29CLGtDQUFrQyxDQUFDaEIsTUFBTSxFQUFFTyxLQUFLLENBQUM7RUFDNUosTUFBTVUsU0FBUyxHQUFHcEIsT0FBTyxDQUFDcUIsMkNBQTJDLENBQUNKLEdBQUcsQ0FBQztFQUUxRSxNQUFNSyx3QkFBd0IsR0FBR3hCLE9BQU8sQ0FBQ3lCLGtCQUFrQixDQUFDQyxJQUFJLENBQUNWLFdBQVcsQ0FBQztFQUM3RSxJQUFJLENBQUNRLHdCQUF3QixFQUFFO0lBQzdCMUIsTUFBTSxDQUFDQSxNQUFNLENBQUM2QixJQUFJLENBQUMsdURBQXVELENBQUM7SUFDM0UsT0FBTyxDQUFDLENBQUM7RUFDWDtFQUVBLE9BQU87SUFDTCxjQUFjLEVBQUVYLFdBQVc7SUFDM0JkLE9BQU8sRUFBRW9CO0VBQ1gsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNKLGtCQUFrQkEsQ0FBQ04sS0FBSyxFQUFFO0VBQ2pDO0VBQ0E7RUFDQSxNQUFNO0lBQUVnQixPQUFPO0lBQUVDLE9BQU87SUFBRUM7RUFBTyxDQUFDLEdBQUdsQixLQUFLLENBQUNtQixxQkFBcUIsQ0FBQyxDQUFDO0VBQ2xFLE9BQU8vQixPQUFPLENBQUNnQyx5QkFBeUIsQ0FBQ0osT0FBTyxFQUFFRSxNQUFNLEVBQUVELE9BQU8sQ0FBQztBQUNwRTtBQUVBdEMsb0JBQW9CLEdBQUdZLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy90cmFjZURhdGEuanM/N2E4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4uL2FzeW5jQ29udGV4dC9pbmRleC5qcycpO1xuY29uc3QgY2FycmllciA9IHJlcXVpcmUoJy4uL2NhcnJpZXIuanMnKTtcbmNvbnN0IGN1cnJlbnRTY29wZXMgPSByZXF1aXJlKCcuLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBleHBvcnRzJDEgPSByZXF1aXJlKCcuLi9leHBvcnRzLmpzJyk7XG5yZXF1aXJlKCcuLi90cmFjaW5nL2Vycm9ycy5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvdmVyc2lvbi5qcycpO1xucmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xucmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L3RpbWUuanMnKTtcbmNvbnN0IHNwYW5VdGlscyA9IHJlcXVpcmUoJy4vc3BhblV0aWxzLmpzJyk7XG5jb25zdCB0cmFjaW5nID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvdHJhY2luZy5qcycpO1xuY29uc3QgZHluYW1pY1NhbXBsaW5nQ29udGV4dCA9IHJlcXVpcmUoJy4uL3RyYWNpbmcvZHluYW1pY1NhbXBsaW5nQ29udGV4dC5qcycpO1xuY29uc3QgYmFnZ2FnZSA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2JhZ2dhZ2UuanMnKTtcblxuLyoqXG4gKiBFeHRyYWN0cyB0cmFjZSBwcm9wYWdhdGlvbiBkYXRhIGZyb20gdGhlIGN1cnJlbnQgc3BhbiBvciBmcm9tIHRoZSBjbGllbnQncyBzY29wZSAodmlhIHRyYW5zYWN0aW9uIG9yIHByb3BhZ2F0aW9uXG4gKiBjb250ZXh0KSBhbmQgc2VyaWFsaXplcyBpdCB0byBgc2VudHJ5LXRyYWNlYCBhbmQgYGJhZ2dhZ2VgIHZhbHVlcyB0byBzdHJpbmdzLiBUaGVzZSB2YWx1ZXMgY2FuIGJlIHVzZWQgdG8gcHJvcGFnYXRlXG4gKiBhIHRyYWNlIHZpYSBvdXIgdHJhY2luZyBIdHRwIGhlYWRlcnMgb3IgSHRtbCBgPG1ldGE+YCB0YWdzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYWxzbyBhcHBsaWVzIHNvbWUgdmFsaWRhdGlvbiB0byB0aGUgZ2VuZXJhdGVkIHNlbnRyeS10cmFjZSBhbmQgYmFnZ2FnZSB2YWx1ZXMgdG8gZW5zdXJlIHRoYXRcbiAqIG9ubHkgdmFsaWQgc3RyaW5ncyBhcmUgcmV0dXJuZWQuXG4gKlxuICogQHJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHRyYWNpbmcgZGF0YSB2YWx1ZXMuIFRoZSBvYmplY3Qga2V5cyBhcmUgdGhlIG5hbWUgb2YgdGhlIHRyYWNpbmcga2V5IHRvIGJlIHVzZWQgYXMgaGVhZGVyXG4gKiBvciBtZXRhIHRhZyBuYW1lLlxuICovXG5mdW5jdGlvbiBnZXRUcmFjZURhdGEob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGNsaWVudCA9IGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCk7XG4gIGlmICghZXhwb3J0cyQxLmlzRW5hYmxlZCgpIHx8ICFjbGllbnQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCBjYXJyaWVyJDEgPSBjYXJyaWVyLmdldE1haW5DYXJyaWVyKCk7XG4gIGNvbnN0IGFjcyA9IGluZGV4LmdldEFzeW5jQ29udGV4dFN0cmF0ZWd5KGNhcnJpZXIkMSk7XG4gIGlmIChhY3MuZ2V0VHJhY2VEYXRhKSB7XG4gICAgcmV0dXJuIGFjcy5nZXRUcmFjZURhdGEob3B0aW9ucyk7XG4gIH1cblxuICBjb25zdCBzY29wZSA9IGN1cnJlbnRTY29wZXMuZ2V0Q3VycmVudFNjb3BlKCk7XG4gIGNvbnN0IHNwYW4gPSBvcHRpb25zLnNwYW4gfHwgc3BhblV0aWxzLmdldEFjdGl2ZVNwYW4oKTtcbiAgY29uc3Qgc2VudHJ5VHJhY2UgPSBzcGFuID8gc3BhblV0aWxzLnNwYW5Ub1RyYWNlSGVhZGVyKHNwYW4pIDogc2NvcGVUb1RyYWNlSGVhZGVyKHNjb3BlKTtcbiAgY29uc3QgZHNjID0gc3BhbiA/IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuKHNwYW4pIDogZHluYW1pY1NhbXBsaW5nQ29udGV4dC5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNjb3BlKGNsaWVudCwgc2NvcGUpO1xuICBjb25zdCBiYWdnYWdlJDEgPSBiYWdnYWdlLmR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIoZHNjKTtcblxuICBjb25zdCBpc1ZhbGlkU2VudHJ5VHJhY2VIZWFkZXIgPSB0cmFjaW5nLlRSQUNFUEFSRU5UX1JFR0VYUC50ZXN0KHNlbnRyeVRyYWNlKTtcbiAgaWYgKCFpc1ZhbGlkU2VudHJ5VHJhY2VIZWFkZXIpIHtcbiAgICBsb2dnZXIubG9nZ2VyLndhcm4oJ0ludmFsaWQgc2VudHJ5LXRyYWNlIGRhdGEuIENhbm5vdCBnZW5lcmF0ZSB0cmFjZSBkYXRhJyk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAnc2VudHJ5LXRyYWNlJzogc2VudHJ5VHJhY2UsXG4gICAgYmFnZ2FnZTogYmFnZ2FnZSQxLFxuICB9O1xufVxuXG4vKipcbiAqIEdldCBhIHNlbnRyeS10cmFjZSBoZWFkZXIgdmFsdWUgZm9yIHRoZSBnaXZlbiBzY29wZS5cbiAqL1xuZnVuY3Rpb24gc2NvcGVUb1RyYWNlSGVhZGVyKHNjb3BlKSB7XG4gIC8vIFRPRE8odjkpOiBVc2UgZ2VuZXJhdGVTcGFuSWQoKSBpbnN0ZWFkIG9mIHNwYW5JZFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgY29uc3QgeyB0cmFjZUlkLCBzYW1wbGVkLCBzcGFuSWQgfSA9IHNjb3BlLmdldFByb3BhZ2F0aW9uQ29udGV4dCgpO1xuICByZXR1cm4gdHJhY2luZy5nZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyKHRyYWNlSWQsIHNwYW5JZCwgc2FtcGxlZCk7XG59XG5cbmV4cG9ydHMuZ2V0VHJhY2VEYXRhID0gZ2V0VHJhY2VEYXRhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2VEYXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW5kZXgiLCJyZXF1aXJlIiwiY2FycmllciIsImN1cnJlbnRTY29wZXMiLCJleHBvcnRzJDEiLCJsb2dnZXIiLCJzcGFuVXRpbHMiLCJ0cmFjaW5nIiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dCIsImJhZ2dhZ2UiLCJnZXRUcmFjZURhdGEiLCJvcHRpb25zIiwiY2xpZW50IiwiZ2V0Q2xpZW50IiwiaXNFbmFibGVkIiwiY2FycmllciQxIiwiZ2V0TWFpbkNhcnJpZXIiLCJhY3MiLCJnZXRBc3luY0NvbnRleHRTdHJhdGVneSIsInNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwic3BhbiIsImdldEFjdGl2ZVNwYW4iLCJzZW50cnlUcmFjZSIsInNwYW5Ub1RyYWNlSGVhZGVyIiwic2NvcGVUb1RyYWNlSGVhZGVyIiwiZHNjIiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuIiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TY29wZSIsImJhZ2dhZ2UkMSIsImR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIiLCJpc1ZhbGlkU2VudHJ5VHJhY2VIZWFkZXIiLCJUUkFDRVBBUkVOVF9SRUdFWFAiLCJ0ZXN0Iiwid2FybiIsInRyYWNlSWQiLCJzYW1wbGVkIiwic3BhbklkIiwiZ2V0UHJvcGFnYXRpb25Db250ZXh0IiwiZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n */\nfunction captureRequestError(error, request, errorContext) {\n  core.withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: core.headersToDict(request.headers),\n        method: request.method\n      }\n    });\n    scope.setContext('nextjs', {\n      request_path: request.path,\n      router_kind: errorContext.routerKind,\n      router_path: errorContext.routePath,\n      route_type: errorContext.routeType\n    });\n    scope.setTransactionName(errorContext.routePath);\n    core.captureException(error, {\n      mechanism: {\n        handled: false\n      }\n    });\n  });\n}\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n *\n * @deprecated Use `captureRequestError` instead.\n */\n// TODO(v9): Remove this export\nconst experimental_captureRequestError = captureRequestError;\nexports.captureRequestError = captureRequestError;\nexports.experimental_captureRequestError = experimental_captureRequestError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vY2FwdHVyZVJlcXVlc3RFcnJvci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxTQUFTQyxtQkFBbUJBLENBQUNDLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxZQUFZLEVBQUU7RUFDekRMLElBQUksQ0FBQ00sU0FBUyxDQUFDQyxLQUFLLElBQUk7SUFDdEJBLEtBQUssQ0FBQ0Msd0JBQXdCLENBQUM7TUFDN0JDLGlCQUFpQixFQUFFO1FBQ2pCQyxPQUFPLEVBQUVWLElBQUksQ0FBQ1csYUFBYSxDQUFDUCxPQUFPLENBQUNNLE9BQU8sQ0FBQztRQUM1Q0UsTUFBTSxFQUFFUixPQUFPLENBQUNRO01BQ2xCO0lBQ0YsQ0FBQyxDQUFDO0lBRUZMLEtBQUssQ0FBQ00sVUFBVSxDQUFDLFFBQVEsRUFBRTtNQUN6QkMsWUFBWSxFQUFFVixPQUFPLENBQUNXLElBQUk7TUFDMUJDLFdBQVcsRUFBRVgsWUFBWSxDQUFDWSxVQUFVO01BQ3BDQyxXQUFXLEVBQUViLFlBQVksQ0FBQ2MsU0FBUztNQUNuQ0MsVUFBVSxFQUFFZixZQUFZLENBQUNnQjtJQUMzQixDQUFDLENBQUM7SUFFRmQsS0FBSyxDQUFDZSxrQkFBa0IsQ0FBQ2pCLFlBQVksQ0FBQ2MsU0FBUyxDQUFDO0lBRWhEbkIsSUFBSSxDQUFDdUIsZ0JBQWdCLENBQUNwQixLQUFLLEVBQUU7TUFDM0JxQixTQUFTLEVBQUU7UUFDVEMsT0FBTyxFQUFFO01BQ1g7SUFDRixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxnQ0FBZ0MsR0FBR3hCLG1CQUFtQjtBQUU1REosMkJBQTJCLEdBQUdJLG1CQUFtQjtBQUNqREosd0NBQXdDLEdBQUc0QixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9jYXB0dXJlUmVxdWVzdEVycm9yLmpzPzdlMmEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIFJlcG9ydHMgZXJyb3JzIHBhc3NlZCB0byB0aGUgdGhlIE5leHQuanMgYG9uUmVxdWVzdEVycm9yYCBpbnN0cnVtZW50YXRpb24gaG9vay5cbiAqL1xuZnVuY3Rpb24gY2FwdHVyZVJlcXVlc3RFcnJvcihlcnJvciwgcmVxdWVzdCwgZXJyb3JDb250ZXh0KSB7XG4gIGNvcmUud2l0aFNjb3BlKHNjb3BlID0+IHtcbiAgICBzY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoe1xuICAgICAgbm9ybWFsaXplZFJlcXVlc3Q6IHtcbiAgICAgICAgaGVhZGVyczogY29yZS5oZWFkZXJzVG9EaWN0KHJlcXVlc3QuaGVhZGVycyksXG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICB9ICxcbiAgICB9KTtcblxuICAgIHNjb3BlLnNldENvbnRleHQoJ25leHRqcycsIHtcbiAgICAgIHJlcXVlc3RfcGF0aDogcmVxdWVzdC5wYXRoLFxuICAgICAgcm91dGVyX2tpbmQ6IGVycm9yQ29udGV4dC5yb3V0ZXJLaW5kLFxuICAgICAgcm91dGVyX3BhdGg6IGVycm9yQ29udGV4dC5yb3V0ZVBhdGgsXG4gICAgICByb3V0ZV90eXBlOiBlcnJvckNvbnRleHQucm91dGVUeXBlLFxuICAgIH0pO1xuXG4gICAgc2NvcGUuc2V0VHJhbnNhY3Rpb25OYW1lKGVycm9yQ29udGV4dC5yb3V0ZVBhdGgpO1xuXG4gICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXBvcnRzIGVycm9ycyBwYXNzZWQgdG8gdGhlIHRoZSBOZXh0LmpzIGBvblJlcXVlc3RFcnJvcmAgaW5zdHJ1bWVudGF0aW9uIGhvb2suXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBjYXB0dXJlUmVxdWVzdEVycm9yYCBpbnN0ZWFkLlxuICovXG4vLyBUT0RPKHY5KTogUmVtb3ZlIHRoaXMgZXhwb3J0XG5jb25zdCBleHBlcmltZW50YWxfY2FwdHVyZVJlcXVlc3RFcnJvciA9IGNhcHR1cmVSZXF1ZXN0RXJyb3I7XG5cbmV4cG9ydHMuY2FwdHVyZVJlcXVlc3RFcnJvciA9IGNhcHR1cmVSZXF1ZXN0RXJyb3I7XG5leHBvcnRzLmV4cGVyaW1lbnRhbF9jYXB0dXJlUmVxdWVzdEVycm9yID0gZXhwZXJpbWVudGFsX2NhcHR1cmVSZXF1ZXN0RXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXB0dXJlUmVxdWVzdEVycm9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29yZSIsInJlcXVpcmUiLCJjYXB0dXJlUmVxdWVzdEVycm9yIiwiZXJyb3IiLCJyZXF1ZXN0IiwiZXJyb3JDb250ZXh0Iiwid2l0aFNjb3BlIiwic2NvcGUiLCJzZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEiLCJub3JtYWxpemVkUmVxdWVzdCIsImhlYWRlcnMiLCJoZWFkZXJzVG9EaWN0IiwibWV0aG9kIiwic2V0Q29udGV4dCIsInJlcXVlc3RfcGF0aCIsInBhdGgiLCJyb3V0ZXJfa2luZCIsInJvdXRlcktpbmQiLCJyb3V0ZXJfcGF0aCIsInJvdXRlUGF0aCIsInJvdXRlX3R5cGUiLCJyb3V0ZVR5cGUiLCJzZXRUcmFuc2FjdGlvbk5hbWUiLCJjYXB0dXJlRXhjZXB0aW9uIiwibWVjaGFuaXNtIiwiaGFuZGxlZCIsImV4cGVyaW1lbnRhbF9jYXB0dXJlUmVxdWVzdEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nexports.DEBUG_BUILD = DEBUG_BUILD;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFdBQVcsR0FBSSxPQUFPQyxnQkFBZ0IsS0FBSyxXQUFXLElBQUlBLGdCQUFpQjtBQUVqRkgsbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9kZWJ1Zy1idWlsZC5qcz9kN2Q0Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydHMuREVCVUdfQlVJTEQgPSBERUJVR19CVUlMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiREVCVUdfQlVJTEQiLCJfX1NFTlRSWV9ERUJVR19fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst stackTraceParser = __webpack_require__(/*! stacktrace-parser */ \"(instrument)/./node_modules/stacktrace-parser/dist/stack-trace-parser.cjs.js\");\nconst globalWithInjectedValues = core.GLOBAL_OBJ;\nasync function resolveStackFrame(frame, error) {\n  try {\n    if (!(_optionalChain([frame, 'access', _ => _.file, 'optionalAccess', _2 => _2.startsWith, 'call', _3 => _3('webpack-internal:')]) || _optionalChain([frame, 'access', _4 => _4.file, 'optionalAccess', _5 => _5.startsWith, 'call', _6 => _6('file:')]))) {\n      return null;\n    }\n    const params = new URLSearchParams();\n    params.append('isServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isEdgeServer', String(false)); // doesn't matter since it is overwritten by isAppDirectory\n    params.append('isAppDirectory', String(true)); // will force server to do more thorough checking\n    params.append('errorMessage', error.toString());\n    Object.keys(frame).forEach(key => {\n      params.append(key, _nullishCoalesce(frame[key], () => '').toString());\n    });\n    let basePath = _nullishCoalesce(_nullishCoalesce(process.env._sentryBasePath, () => globalWithInjectedValues._sentryBasePath), () => '');\n\n    // Prefix the basepath with a slash if it doesn't have one\n    if (basePath !== '' && !basePath.match(/^\\//)) {\n      basePath = `/${basePath}`;\n    }\n    const controller = new AbortController();\n    const timer = setTimeout(() => controller.abort(), 3000);\n    const res = await core.suppressTracing(() => fetch(`${\n    // eslint-disable-next-line no-restricted-globals\n     true ? 'http://localhost:3000' : 0 // TODO: handle the case where users define a different port\n    }${basePath}/__nextjs_original-stack-frame?${params.toString()}`, {\n      signal: controller.signal\n    }).finally(() => {\n      clearTimeout(timer);\n    }));\n    if (!res.ok || res.status === 204) {\n      return null;\n    }\n    const body = await res.json();\n    return {\n      originalCodeFrame: body.originalCodeFrame,\n      originalStackFrame: body.originalStackFrame\n    };\n  } catch (e) {\n    return null;\n  }\n}\nfunction parseOriginalCodeFrame(codeFrame) {\n  const preProcessedLines = codeFrame\n  // Remove ASCII control characters that are used for syntax highlighting\n  .replace(\n  // eslint-disable-next-line no-control-regex\n  /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,\n  // https://stackoverflow.com/a/29497680\n  '').split('\\n')\n  // Remove line that is supposed to indicate where the error happened\n  .filter(line => !line.match(/^\\s*\\|/))\n  // Find the error line\n  .map(line => ({\n    line,\n    isErrorLine: !!line.match(/^>/)\n  }))\n  // Remove the leading part that is just for prettier output\n  .map(lineObj => ({\n    ...lineObj,\n    line: lineObj.line.replace(/^.*\\|/, '')\n  }));\n  const preContextLines = [];\n  let contextLine = undefined;\n  const postContextLines = [];\n  let reachedContextLine = false;\n  for (const preProcessedLine of preProcessedLines) {\n    if (preProcessedLine.isErrorLine) {\n      contextLine = preProcessedLine.line;\n      reachedContextLine = true;\n    } else if (reachedContextLine) {\n      postContextLines.push(preProcessedLine.line);\n    } else {\n      preContextLines.push(preProcessedLine.line);\n    }\n  }\n  return {\n    contextLine,\n    preContextLines,\n    postContextLines\n  };\n}\n\n/**\n * Event processor that will symbolicate errors by using the webpack/nextjs dev server that is used to show stack traces\n * in the dev overlay.\n */\nasync function devErrorSymbolicationEventProcessor(event, hint) {\n  // Filter out spans for requests resolving source maps for stack frames in dev mode\n  if (event.type === 'transaction') {\n    event.spans = _optionalChain([event, 'access', _7 => _7.spans, 'optionalAccess', _8 => _8.filter, 'call', _9 => _9(span => {\n      const httpUrlAttribute = _optionalChain([span, 'access', _10 => _10.data, 'optionalAccess', _11 => _11['http.url']]);\n      if (typeof httpUrlAttribute === 'string') {\n        return !httpUrlAttribute.includes('__nextjs_original-stack-frame');\n      }\n      return true;\n    })]);\n  }\n\n  // Due to changes across Next.js versions, there are a million things that can go wrong here so we just try-catch the  // entire event processor.Symbolicated stack traces are just a nice to have.\n  try {\n    if (hint.originalException && hint.originalException instanceof Error && hint.originalException.stack) {\n      const frames = stackTraceParser.parse(hint.originalException.stack);\n      const resolvedFrames = await Promise.all(frames.map(frame => resolveStackFrame(frame, hint.originalException)));\n      if (_optionalChain([event, 'access', _12 => _12.exception, 'optionalAccess', _13 => _13.values, 'optionalAccess', _14 => _14[0], 'optionalAccess', _15 => _15.stacktrace, 'optionalAccess', _16 => _16.frames])) {\n        event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames.map((frame, i, frames) => {\n          const resolvedFrame = resolvedFrames[frames.length - 1 - i];\n          if (!resolvedFrame || !resolvedFrame.originalStackFrame || !resolvedFrame.originalCodeFrame) {\n            return {\n              ...frame,\n              platform: _optionalChain([frame, 'access', _17 => _17.filename, 'optionalAccess', _18 => _18.startsWith, 'call', _19 => _19('node:internal')]) ? 'nodejs' : undefined,\n              // simple hack that will prevent a source mapping error from showing up\n              in_app: false\n            };\n          }\n          const {\n            contextLine,\n            preContextLines,\n            postContextLines\n          } = parseOriginalCodeFrame(resolvedFrame.originalCodeFrame);\n          return {\n            ...frame,\n            pre_context: preContextLines,\n            context_line: contextLine,\n            post_context: postContextLines,\n            function: resolvedFrame.originalStackFrame.methodName,\n            filename: resolvedFrame.originalStackFrame.file || undefined,\n            lineno: resolvedFrame.originalStackFrame.lineNumber || undefined,\n            colno: resolvedFrame.originalStackFrame.column || undefined\n          };\n        });\n      }\n    }\n  } catch (e) {\n    return event;\n  }\n  return event;\n}\nexports.devErrorSymbolicationEventProcessor = devErrorSymbolicationEventProcessor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nfunction getVercelEnv(isClient) {\n  const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\nexports.getVercelEnv = getVercelEnv;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZ2V0VmVyY2VsRW52LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxZQUFZQSxDQUFDQyxRQUFRLEVBQUU7RUFDOUIsTUFBTUMsWUFBWSxHQUFHRCxRQUFRLEdBQUdFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxzQkFBc0IsR0FBR0YsT0FBTyxDQUFDQyxHQUFHLENBQUNFLFVBQVU7RUFDM0YsT0FBT0osWUFBWSxHQUFJLFVBQVNBLFlBQWEsRUFBQyxHQUFHSyxTQUFTO0FBQzVEO0FBRUFULG9CQUFvQixHQUFHRSxZQUFZIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZ2V0VmVyY2VsRW52LmpzPzU5NGEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGVudmlyb25tZW50IHNldHRpbmcgdmFsdWUgZGV0ZXJtaW5lZCBieSBWZXJjZWwncyBgVkVSQ0VMX0VOVmAgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gKlxuICogQHBhcmFtIGlzQ2xpZW50IEZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciB0byB1c2UgdGhlIGBORVhUX1BVQkxJQ19gIHByZWZpeGVkIHZlcnNpb24gb2YgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlLlxuICovXG5mdW5jdGlvbiBnZXRWZXJjZWxFbnYoaXNDbGllbnQpIHtcbiAgY29uc3QgdmVyY2VsRW52VmFyID0gaXNDbGllbnQgPyBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19WRVJDRUxfRU5WIDogcHJvY2Vzcy5lbnYuVkVSQ0VMX0VOVjtcbiAgcmV0dXJuIHZlcmNlbEVudlZhciA/IGB2ZXJjZWwtJHt2ZXJjZWxFbnZWYXJ9YCA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0cy5nZXRWZXJjZWxFbnYgPSBnZXRWZXJjZWxFbnY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRWZXJjZWxFbnYuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRWZXJjZWxFbnYiLCJpc0NsaWVudCIsInZlcmNlbEVudlZhciIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19WRVJDRUxfRU5WIiwiVkVSQ0VMX0VOViIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Determines whether input is a Next.js not-found error.\n * https://beta.nextjs.org/docs/api-reference/notfound#notfound\n */\nfunction isNotFoundNavigationError(subject) {\n  return core.isError(subject) && ['NEXT_NOT_FOUND', 'NEXT_HTTP_ERROR_FALLBACK;404'].includes(subject.digest);\n}\n\n/**\n * Determines whether input is a Next.js redirect error.\n * https://beta.nextjs.org/docs/api-reference/redirect#redirect\n */\nfunction isRedirectNavigationError(subject) {\n  return core.isError(subject) && typeof subject.digest === 'string' && subject.digest.startsWith('NEXT_REDIRECT;') // a redirect digest looks like \"NEXT_REDIRECT;[redirect path]\"\n  ;\n}\n\nexports.isNotFoundNavigationError = isNotFoundNavigationError;\nexports.isRedirectNavigationError = isRedirectNavigationError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGlGQUFjLENBQUM7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MseUJBQXlCQSxDQUFDQyxPQUFPLEVBQUU7RUFDMUMsT0FDRUgsSUFBSSxDQUFDSSxPQUFPLENBQUNELE9BQU8sQ0FBQyxJQUNyQixDQUFDLGdCQUFnQixFQUFFLDhCQUE4QixDQUFDLENBQUNFLFFBQVEsQ0FDeERGLE9BQU8sQ0FBR0csTUFDYixDQUFDO0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyx5QkFBeUJBLENBQUNKLE9BQU8sRUFBRTtFQUMxQyxPQUNFSCxJQUFJLENBQUNJLE9BQU8sQ0FBQ0QsT0FBTyxDQUFDLElBQ3JCLE9BQVFBLE9BQU8sQ0FBR0csTUFBTSxLQUFLLFFBQVEsSUFDcENILE9BQU8sQ0FBR0csTUFBTSxDQUFDRSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztFQUFBO0FBRW5EOztBQUVBVixpQ0FBaUMsR0FBR0kseUJBQXlCO0FBQzdESixpQ0FBaUMsR0FBR1MseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzPzk2YzYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBpbnB1dCBpcyBhIE5leHQuanMgbm90LWZvdW5kIGVycm9yLlxuICogaHR0cHM6Ly9iZXRhLm5leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25vdGZvdW5kI25vdGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3Ioc3ViamVjdCkge1xuICByZXR1cm4gKFxuICAgIGNvcmUuaXNFcnJvcihzdWJqZWN0KSAmJlxuICAgIFsnTkVYVF9OT1RfRk9VTkQnLCAnTkVYVF9IVFRQX0VSUk9SX0ZBTExCQUNLOzQwNCddLmluY2x1ZGVzKFxuICAgICAgKHN1YmplY3QgKS5kaWdlc3QgLFxuICAgIClcbiAgKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgaW5wdXQgaXMgYSBOZXh0LmpzIHJlZGlyZWN0IGVycm9yLlxuICogaHR0cHM6Ly9iZXRhLm5leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL3JlZGlyZWN0I3JlZGlyZWN0XG4gKi9cbmZ1bmN0aW9uIGlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3Ioc3ViamVjdCkge1xuICByZXR1cm4gKFxuICAgIGNvcmUuaXNFcnJvcihzdWJqZWN0KSAmJlxuICAgIHR5cGVvZiAoc3ViamVjdCApLmRpZ2VzdCA9PT0gJ3N0cmluZycgJiZcbiAgICAoc3ViamVjdCApLmRpZ2VzdC5zdGFydHNXaXRoKCdORVhUX1JFRElSRUNUOycpIC8vIGEgcmVkaXJlY3QgZGlnZXN0IGxvb2tzIGxpa2UgXCJORVhUX1JFRElSRUNUO1tyZWRpcmVjdCBwYXRoXVwiXG4gICk7XG59XG5cbmV4cG9ydHMuaXNOb3RGb3VuZE5hdmlnYXRpb25FcnJvciA9IGlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3I7XG5leHBvcnRzLmlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3IgPSBpc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29yZSIsInJlcXVpcmUiLCJpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yIiwic3ViamVjdCIsImlzRXJyb3IiLCJpbmNsdWRlcyIsImRpZ2VzdCIsImlzUmVkaXJlY3ROYXZpZ2F0aW9uRXJyb3IiLCJzdGFydHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nasync function captureUnderscoreErrorException(contextOrProps) {\n  const {\n    req,\n    res,\n    err\n  } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = res && res.statusCode || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n  core.withScope(scope => {\n    if (req) {\n      const normalizedRequest = core.httpRequestToRequestData(req);\n      scope.setSDKProcessingMetadata({\n        normalizedRequest\n      });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    core.captureException(err || `_error.js called with falsy error (${err})`, {\n      mechanism: {\n        type: 'instrument',\n        handled: false,\n        data: {\n          function: '_error.getInitialProps'\n        }\n      }\n    });\n  });\n  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n}\nexports.captureUnderscoreErrorException = captureUnderscoreErrorException;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi9fZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxJQUFJLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsaUhBQXlCLENBQUM7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlRSwrQkFBK0JBLENBQUNDLGNBQWMsRUFBRTtFQUM3RCxNQUFNO0lBQUVDLEdBQUc7SUFBRUMsR0FBRztJQUFFQztFQUFJLENBQUMsR0FBR0gsY0FBYzs7RUFFeEM7RUFDQSxNQUFNSSxVQUFVLEdBQUlGLEdBQUcsSUFBSUEsR0FBRyxDQUFDRSxVQUFVLElBQUtKLGNBQWMsQ0FBQ0ksVUFBVTtFQUN2RSxJQUFJQSxVQUFVLElBQUlBLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDbEMsT0FBT0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUMxQjs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksQ0FBQ04sY0FBYyxDQUFDTyxRQUFRLEVBQUU7SUFDNUIsT0FBT0YsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUMxQjtFQUVBVixJQUFJLENBQUNZLFNBQVMsQ0FBQ0MsS0FBSyxJQUFJO0lBQ3RCLElBQUlSLEdBQUcsRUFBRTtNQUNQLE1BQU1TLGlCQUFpQixHQUFHZCxJQUFJLENBQUNlLHdCQUF3QixDQUFDVixHQUFHLENBQUM7TUFDNURRLEtBQUssQ0FBQ0csd0JBQXdCLENBQUM7UUFBRUY7TUFBa0IsQ0FBQyxDQUFDO0lBQ3ZEOztJQUVBO0lBQ0E7SUFDQWQsSUFBSSxDQUFDaUIsZ0JBQWdCLENBQUNWLEdBQUcsSUFBSyxzQ0FBcUNBLEdBQUksR0FBRSxFQUFFO01BQ3pFVyxTQUFTLEVBQUU7UUFDVEMsSUFBSSxFQUFFLFlBQVk7UUFDbEJDLE9BQU8sRUFBRSxLQUFLO1FBQ2RDLElBQUksRUFBRTtVQUNKQyxRQUFRLEVBQUU7UUFDWjtNQUNGO0lBQ0YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZ0QixJQUFJLENBQUN1QixlQUFlLENBQUNyQixXQUFXLENBQUNzQixzQkFBc0IsQ0FBQyxDQUFDLENBQUM7QUFDNUQ7QUFFQTFCLHVDQUF1QyxHQUFHSywrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL19lcnJvci5qcz8wY2VkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IHJlc3BvbnNlRW5kID0gcmVxdWlyZSgnLi4vdXRpbHMvcmVzcG9uc2VFbmQuanMnKTtcblxuLyoqXG4gKiBDYXB0dXJlIHRoZSBleGNlcHRpb24gcGFzc2VkIGJ5IG5leHRqcyB0byB0aGUgYF9lcnJvcmAgcGFnZSwgYWRkaW5nIGNvbnRleHQgZGF0YSBhcyBhcHByb3ByaWF0ZS5cbiAqXG4gKiBAcGFyYW0gY29udGV4dE9yUHJvcHMgVGhlIGRhdGEgcGFzc2VkIHRvIGVpdGhlciBgZ2V0SW5pdGlhbFByb3BzYCBvciBgcmVuZGVyYCBieSBuZXh0anNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY2FwdHVyZVVuZGVyc2NvcmVFcnJvckV4Y2VwdGlvbihjb250ZXh0T3JQcm9wcykge1xuICBjb25zdCB7IHJlcSwgcmVzLCBlcnIgfSA9IGNvbnRleHRPclByb3BzO1xuXG4gIC8vIDQwNHMgKGFuZCBvdGhlciA0MDAteSBmcmllbmRzKSBjYW4gdHJpZ2dlciBgX2Vycm9yYCwgYnV0IHdlIGRvbid0IHdhbnQgdG8gc2VuZCB0aGVtIHRvIFNlbnRyeVxuICBjb25zdCBzdGF0dXNDb2RlID0gKHJlcyAmJiByZXMuc3RhdHVzQ29kZSkgfHwgY29udGV4dE9yUHJvcHMuc3RhdHVzQ29kZTtcbiAgaWYgKHN0YXR1c0NvZGUgJiYgc3RhdHVzQ29kZSA8IDUwMCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIC8vIEluIHByZXZpb3VzIHZlcnNpb25zIG9mIHRoZSBzdWdnZXN0ZWQgYF9lcnJvci5qc2AgcGFnZSBpbiB3aGljaCB0aGlzIGZ1bmN0aW9uIGlzIG1lYW50IHRvIGJlIHVzZWQsIHRoZXJlIHdhcyBhXG4gIC8vIHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9pc3N1ZXMvODU5MiB3aGljaCBpbnZvbHZlZCBhbiBleHRyYSBjYWxsIHRvIHRoaXMgZnVuY3Rpb24sIGluIHRoZVxuICAvLyBjdXN0b20gZXJyb3IgY29tcG9uZW50J3MgYHJlbmRlcmAgbWV0aG9kLCBqdXN0IGluIGNhc2UgaXQgaGFkbid0IGJlZW4gY2FsbGVkIGJ5IGBnZXRJbml0aWFsUHJvcHNgLiBOb3cgdGhhdCB0aGF0XG4gIC8vIGlzc3VlIGhhcyBiZWVuIGZpeGVkLCB0aGUgc2Vjb25kIGNhbGwgaXMgdW5uZWNlc3NhcnksIGJ1dCBzaW5jZSBpdCBsaXZlcyBpbiB1c2VyIGNvZGUgcmF0aGVyIHRoYW4gb3VyIGNvZGUsIHVzZXJzXG4gIC8vIGhhdmUgdG8gYmUgdGhlIG9uZXMgdG8gZ2V0IHJpZCBvZiBpdCwgYW5kIGd1YXJhbmV0ZWVkbHksIG5vdCBhbGwgb2YgdGhlbSB3aWxsLiBTbywgcmF0aGVyIHRoYW4gY2FwdHVyZSB0aGUgZXJyb3JcbiAgLy8gdHdpY2UsIHdlIGp1c3QgYmFpbCBpZiB3ZSBzZW5zZSB3ZSdyZSBpbiB0aGF0IG5vdy1leHRyYW5lb3VzIHNlY29uZCBjYWxsLiAoV2UgY2FuIHRlbGwgd2hpY2ggZnVuY3Rpb24gd2UncmUgaW5cbiAgLy8gYmVjYXVzZSBOZXh0anMgcGFzc2VzIGBwYXRobmFtZWAgdG8gYGdldEluaXRpYWxQcm9wc2AgYnV0IG5vdCB0byBgcmVuZGVyYC4pXG4gIGlmICghY29udGV4dE9yUHJvcHMucGF0aG5hbWUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBjb3JlLndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgaWYgKHJlcSkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFJlcXVlc3QgPSBjb3JlLmh0dHBSZXF1ZXN0VG9SZXF1ZXN0RGF0YShyZXEpO1xuICAgICAgc2NvcGUuc2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhKHsgbm9ybWFsaXplZFJlcXVlc3QgfSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcmQtcGFydHkgbGlicmFyaWVzIChvciB1c2VycyB0aGVtc2VsdmVzKSB0aHJvdyBzb21ldGhpbmcgZmFsc3ksIHdlIHdhbnQgdG8gY2FwdHVyZSBpdCBhcyBhIG1lc3NhZ2UgKHdoaWNoXG4gICAgLy8gaXMgd2hhdCBwYXNzaW5nIGEgc3RyaW5nIHRvIGBjYXB0dXJlRXhjZXB0aW9uYCB3aWxsIHdpbmQgdXAgZG9pbmcpXG4gICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVyciB8fCBgX2Vycm9yLmpzIGNhbGxlZCB3aXRoIGZhbHN5IGVycm9yICgke2Vycn0pYCwge1xuICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgIHR5cGU6ICdpbnN0cnVtZW50JyxcbiAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBmdW5jdGlvbjogJ19lcnJvci5nZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgY29yZS52ZXJjZWxXYWl0VW50aWwocmVzcG9uc2VFbmQuZmx1c2hTYWZlbHlXaXRoVGltZW91dCgpKTtcbn1cblxuZXhwb3J0cy5jYXB0dXJlVW5kZXJzY29yZUVycm9yRXhjZXB0aW9uID0gY2FwdHVyZVVuZGVyc2NvcmVFcnJvckV4Y2VwdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9lcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvcmUiLCJyZXF1aXJlIiwicmVzcG9uc2VFbmQiLCJjYXB0dXJlVW5kZXJzY29yZUVycm9yRXhjZXB0aW9uIiwiY29udGV4dE9yUHJvcHMiLCJyZXEiLCJyZXMiLCJlcnIiLCJzdGF0dXNDb2RlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwYXRobmFtZSIsIndpdGhTY29wZSIsInNjb3BlIiwibm9ybWFsaXplZFJlcXVlc3QiLCJodHRwUmVxdWVzdFRvUmVxdWVzdERhdGEiLCJzZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEiLCJjYXB0dXJlRXhjZXB0aW9uIiwibWVjaGFuaXNtIiwidHlwZSIsImhhbmRsZWQiLCJkYXRhIiwiZnVuY3Rpb24iLCJ2ZXJjZWxXYWl0VW50aWwiLCJmbHVzaFNhZmVseVdpdGhUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ../utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wrap the given API route handler with error nad performance monitoring.\n *\n * @param apiHandler The handler exported from the user's API page route file, which may or may not already be\n * wrapped with `withSentry`\n * @param parameterizedRoute The page's parameterized route.\n * @returns The wrapped handler which will always return a Promise.\n */\nfunction wrapApiHandlerWithSentry(apiHandler, parameterizedRoute) {\n  return new Proxy(apiHandler, {\n    apply: (wrappingTarget, thisArg, args) => {\n      tracingUtils.dropNextjsRootContext();\n      return tracingUtils.escapeNextjsTracing(() => {\n        const [req, res] = args;\n        if (!req) {\n          core.logger.debug(`Wrapped API handler on route \"${parameterizedRoute}\" was not passed a request object. Will not instrument.`);\n          return wrappingTarget.apply(thisArg, args);\n        } else if (!res) {\n          core.logger.debug(`Wrapped API handler on route \"${parameterizedRoute}\" was not passed a response object. Will not instrument.`);\n          return wrappingTarget.apply(thisArg, args);\n        }\n\n        // Prevent double wrapping of the same request.\n        if (req.__withSentry_applied__) {\n          return wrappingTarget.apply(thisArg, args);\n        }\n        req.__withSentry_applied__ = true;\n        return core.withIsolationScope(isolationScope => {\n          // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n          // Else, we manually continueTrace from the incoming headers\n          const continueTraceIfNoActiveSpan = core.getActiveSpan() ? (_opts, callback) => callback() : core.continueTrace;\n          return continueTraceIfNoActiveSpan({\n            sentryTrace: req.headers && core.isString(req.headers['sentry-trace']) ? req.headers['sentry-trace'] : undefined,\n            baggage: _optionalChain([req, 'access', _ => _.headers, 'optionalAccess', _2 => _2.baggage])\n          }, () => {\n            const reqMethod = `${(req.method || 'GET').toUpperCase()} `;\n            const normalizedRequest = core.httpRequestToRequestData(req);\n            isolationScope.setSDKProcessingMetadata({\n              normalizedRequest\n            });\n            isolationScope.setTransactionName(`${reqMethod}${parameterizedRoute}`);\n            return core.startSpanManual({\n              name: `${reqMethod}${parameterizedRoute}`,\n              op: 'http.server',\n              forceTransaction: true,\n              attributes: {\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n                [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.nextjs'\n              }\n            }, async span => {\n              // eslint-disable-next-line @typescript-eslint/unbound-method\n              res.end = new Proxy(res.end, {\n                apply(target, thisArg, argArray) {\n                  core.setHttpStatus(span, res.statusCode);\n                  span.end();\n                  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n                  return target.apply(thisArg, argArray);\n                }\n              });\n              try {\n                return await wrappingTarget.apply(thisArg, args);\n              } catch (e) {\n                // In case we have a primitive, wrap it in the equivalent wrapper class (string -> String, etc.) so that we can\n                // store a seen flag on it. (Because of the one-way-on-Vercel-one-way-off-of-Vercel approach we've been forced\n                // to take, it can happen that the same thrown object gets caught in two different ways, and flagging it is a\n                // way to prevent it from actually being reported twice.)\n                const objectifiedErr = core.objectify(e);\n                core.captureException(objectifiedErr, {\n                  mechanism: {\n                    type: 'instrument',\n                    handled: false,\n                    data: {\n                      wrapped_handler: wrappingTarget.name,\n                      function: 'withSentry'\n                    }\n                  }\n                });\n                core.setHttpStatus(span, 500);\n                span.end();\n\n                // we need to await the flush here to ensure that the error is captured\n                // as the runtime freezes as soon as the error is thrown below\n                await responseEnd.flushSafelyWithTimeout();\n\n                // We rethrow here so that nextjs can do with the error whatever it would normally do. (Sometimes \"whatever it\n                // would normally do\" is to allow the error to bubble up to the global handlers - another reason we need to mark\n                // the error as already having been captured.)\n                throw objectifiedErr;\n              }\n            });\n          });\n        });\n      });\n    }\n  });\n}\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Wraps a function with Sentry crons instrumentation by automatically sending check-ins for the given Vercel crons config.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapApiHandlerWithSentryVercelCrons(handler, vercelCronsConfig) {\n  return new Proxy(handler, {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    apply: (originalFunction, thisArg, args) => {\n      if (!args || !args[0]) {\n        return originalFunction.apply(thisArg, args);\n      }\n      const [req] = args;\n      let maybePromiseResult;\n      const cronsKey = 'nextUrl' in req ? req.nextUrl.pathname : req.url;\n      const userAgentHeader = 'nextUrl' in req ? req.headers.get('user-agent') : req.headers['user-agent'];\n      if (!vercelCronsConfig ||\n      // do nothing if vercel crons config is missing\n      !_optionalChain([userAgentHeader, 'optionalAccess', _ => _.includes, 'call', _2 => _2('vercel-cron')]) // do nothing if endpoint is not called from vercel crons\n      ) {\n        return originalFunction.apply(thisArg, args);\n      }\n      const vercelCron = vercelCronsConfig.find(vercelCron => vercelCron.path === cronsKey);\n      if (!vercelCron || !vercelCron.path || !vercelCron.schedule) {\n        return originalFunction.apply(thisArg, args);\n      }\n      const monitorSlug = vercelCron.path;\n      const checkInId = core.captureCheckIn({\n        monitorSlug,\n        status: 'in_progress'\n      }, {\n        maxRuntime: 60 * 12,\n        // (minutes) so 12 hours - just a very high arbitrary number since we don't know the actual duration of the users cron job\n        schedule: {\n          type: 'crontab',\n          value: vercelCron.schedule\n        }\n      });\n      const startTime = Date.now() / 1000;\n      const handleErrorCase = () => {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'error',\n          duration: Date.now() / 1000 - startTime\n        });\n      };\n      try {\n        maybePromiseResult = originalFunction.apply(thisArg, args);\n      } catch (e) {\n        handleErrorCase();\n        throw e;\n      }\n      if (typeof maybePromiseResult === 'object' && maybePromiseResult !== null && 'then' in maybePromiseResult) {\n        Promise.resolve(maybePromiseResult).then(() => {\n          core.captureCheckIn({\n            checkInId,\n            monitorSlug,\n            status: 'ok',\n            duration: Date.now() / 1000 - startTime\n          });\n        }, () => {\n          handleErrorCase();\n        });\n\n        // It is very important that we return the original promise here, because Next.js attaches various properties\n        // to that promise and will throw if they are not on the returned value.\n        return maybePromiseResult;\n      } else {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'ok',\n          duration: Date.now() / 1000 - startTime\n        });\n        return maybePromiseResult;\n      }\n    }\n  });\n}\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom app (\"_app.js\").\n *\n * @param origAppGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapAppGetInitialPropsWithSentry(origAppGetInitialProps) {\n  return new Proxy(origAppGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const [context] = args;\n      const {\n        req,\n        res\n      } = context.ctx;\n      const errorWrappedAppGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedAppGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_app',\n          requestedRouteName: context.ctx.pathname,\n          dataFetchingMethodName: 'getInitialProps'\n        });\n        const {\n          data: appGetInitialProps,\n          sentryTrace,\n          baggage\n        } = await tracedGetInitialProps.apply(thisArg, args);\n        if (typeof appGetInitialProps === 'object' && appGetInitialProps !== null) {\n          // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call\n          // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per\n          // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.\n          // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.\n          if (!appGetInitialProps.pageProps) {\n            appGetInitialProps.pageProps = {};\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            appGetInitialProps.pageProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            appGetInitialProps.pageProps._sentryBaggage = baggage;\n          }\n        }\n        return appGetInitialProps;\n      } else {\n        return errorWrappedAppGetInitialProps.apply(thisArg, args);\n      }\n    }\n  });\n}\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQyx5R0FBcUIsQ0FBQztBQUM5QyxNQUFNQyxZQUFZLEdBQUdELG1CQUFPLENBQUMsbUhBQTBCLENBQUM7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxnQ0FBZ0NBLENBQUNDLHNCQUFzQixFQUFFO0VBQ2hFLE9BQU8sSUFBSUMsS0FBSyxDQUFDRCxzQkFBc0IsRUFBRTtJQUN2Q0UsS0FBSyxFQUFFLE1BQUFBLENBQU9DLGNBQWMsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEtBQUs7TUFDOUMsSUFBSVQsT0FBTyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3JCLE9BQU9PLGNBQWMsQ0FBQ0QsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztNQUM1QztNQUVBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLEdBQUdELElBQUk7TUFDdEIsTUFBTTtRQUFFRSxHQUFHO1FBQUVDO01BQUksQ0FBQyxHQUFHRixPQUFPLENBQUNHLEdBQUc7TUFFaEMsTUFBTUMsOEJBQThCLEdBQUdaLFlBQVksQ0FBQ2Esd0JBQXdCLENBQUNSLGNBQWMsQ0FBQzs7TUFFNUY7TUFDQTtNQUNBO01BQ0E7TUFDQSxJQUFJSSxHQUFHLElBQUlDLEdBQUcsRUFBRTtRQUNkLE1BQU1JLHFCQUFxQixHQUFHZCxZQUFZLENBQUNlLCtCQUErQixDQUFDSCw4QkFBOEIsRUFBRUgsR0FBRyxFQUFFQyxHQUFHLEVBQUU7VUFDbkhNLG9CQUFvQixFQUFFLE9BQU87VUFDN0JDLGtCQUFrQixFQUFFVCxPQUFPLENBQUNHLEdBQUcsQ0FBQ08sUUFBUTtVQUN4Q0Msc0JBQXNCLEVBQUU7UUFDMUIsQ0FBQyxDQUFDO1FBRUYsTUFBTTtVQUNKQyxJQUFJLEVBQUVDLGtCQUFrQjtVQUN4QkMsV0FBVztVQUNYQztRQUNGLENBQUMsR0FFTixNQUFNVCxxQkFBcUIsQ0FBQ1YsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztRQUUzQyxJQUFJLE9BQU9jLGtCQUFrQixLQUFLLFFBQVEsSUFBSUEsa0JBQWtCLEtBQUssSUFBSSxFQUFFO1VBQ3pFO1VBQ0E7VUFDQTtVQUNBO1VBQ0EsSUFBSSxDQUFFQSxrQkFBa0IsQ0FBR0csU0FBUyxFQUFFO1lBQ25DSCxrQkFBa0IsQ0FBR0csU0FBUyxHQUFHLENBQUMsQ0FBQztVQUN0Qzs7VUFFQTtVQUNBLElBQUlGLFdBQVcsRUFBRTtZQUNkRCxrQkFBa0IsQ0FBR0csU0FBUyxDQUFDQyxnQkFBZ0IsR0FBR0gsV0FBVztVQUNoRTs7VUFFQTtVQUNBLElBQUlDLE9BQU8sRUFBRTtZQUNWRixrQkFBa0IsQ0FBR0csU0FBUyxDQUFDRSxjQUFjLEdBQUdILE9BQU87VUFDMUQ7UUFDRjtRQUVBLE9BQU9GLGtCQUFrQjtNQUMzQixDQUFDLE1BQU07UUFDTCxPQUFPVCw4QkFBOEIsQ0FBQ1IsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztNQUM1RDtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQVgsd0NBQXdDLEdBQUdLLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanM/MWM4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb24gaW5cbiAqIGEgY3VzdG9tIGFwcCAoXCJfYXBwLmpzXCIpLlxuICpcbiAqIEBwYXJhbSBvcmlnQXBwR2V0SW5pdGlhbFByb3BzIFRoZSB1c2VyJ3MgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb25cbiAqIEBwYXJhbSBwYXJhbWV0ZXJpemVkUm91dGUgVGhlIHBhZ2UncyBwYXJhbWV0ZXJpemVkIHJvdXRlXG4gKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gd3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkob3JpZ0FwcEdldEluaXRpYWxQcm9wcykge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdBcHBHZXRJbml0aWFsUHJvcHMsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZC5pc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dC5jdHg7XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEFwcEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuXG4gICAgICAvLyBHZW5lcmFsbHkgd2UgY2FuIGFzc3VtZSB0aGF0IGByZXFgIGFuZCBgcmVzYCBhcmUgYWx3YXlzIGRlZmluZWQgb24gdGhlIHNlcnZlcjpcbiAgICAgIC8vIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvZGF0YS1mZXRjaGluZy9nZXQtaW5pdGlhbC1wcm9wcyNjb250ZXh0LW9iamVjdFxuICAgICAgLy8gVGhpcyBkb2VzIG5vdCBzZWVtIHRvIGJlIHRoZSBjYXNlIGluIGRldiBtb2RlLiBCZWNhdXNlIHdlIGhhdmUgbm8gY2xlYW4gd2F5IG9mIGFzc29jaWF0aW5nIHRoZSB0aGUgZGF0YSBmZXRjaGVyXG4gICAgICAvLyBzcGFuIHdpdGggZWFjaCBvdGhlciB3aGVuIHRoZXJlIGFyZSBubyByZXEgb3IgcmVzIG9iamVjdHMsIHdlIHNpbXBseSBkbyBub3QgdHJhY2UgdGhlbSBhdCBhbGwgaGVyZS5cbiAgICAgIGlmIChyZXEgJiYgcmVzKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEFwcEdldEluaXRpYWxQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgICBkYXRhRmV0Y2hlclJvdXRlTmFtZTogJy9fYXBwJyxcbiAgICAgICAgICByZXF1ZXN0ZWRSb3V0ZU5hbWU6IGNvbnRleHQuY3R4LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGF0YTogYXBwR2V0SW5pdGlhbFByb3BzLFxuICAgICAgICAgIHNlbnRyeVRyYWNlLFxuICAgICAgICAgIGJhZ2dhZ2UsXG4gICAgICAgIH1cblxuID0gYXdhaXQgdHJhY2VkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYXBwR2V0SW5pdGlhbFByb3BzID09PSAnb2JqZWN0JyAmJiBhcHBHZXRJbml0aWFsUHJvcHMgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBQZXIgZGVmaW5pdGlvbiwgYHBhZ2VQcm9wc2AgaXMgbm90IG9wdGlvbmFsLCBob3dldmVyIGFuIGluY3JlYXNlZCBhbW91bnQgb2YgdXNlcnMgZG9lc24ndCBzZWVtIHRvIGNhbGxcbiAgICAgICAgICAvLyBgQXBwLmdldEluaXRpYWxQcm9wcyhhcHBDb250ZXh0KWAgaW4gdGhlaXIgY3VzdG9tIGBfYXBwYCBwYWdlcyB3aGljaCBpcyByZXF1aXJlZCBhcyBwZXJcbiAgICAgICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hZHZhbmNlZC1mZWF0dXJlcy9jdXN0b20tYXBwIC0gcmVzdWx0aW5nIGluIG1pc3NpbmcgYHBhZ2VQcm9wc2AuXG4gICAgICAgICAgLy8gRm9yIHRoaXMgcmVhc29uLCB3ZSBqdXN0IGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBgcGFnZVByb3BzYCBkb2Vzbid0IGV4aXN0IGV4cGxpY2l0bHkuXG4gICAgICAgICAgaWYgKCEoYXBwR2V0SW5pdGlhbFByb3BzICkucGFnZVByb3BzKSB7XG4gICAgICAgICAgICAoYXBwR2V0SW5pdGlhbFByb3BzICkucGFnZVByb3BzID0ge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICAgIGlmIChzZW50cnlUcmFjZSkge1xuICAgICAgICAgICAgKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcy5fc2VudHJ5VHJhY2VEYXRhID0gc2VudHJ5VHJhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICAgIGlmIChiYWdnYWdlKSB7XG4gICAgICAgICAgICAoYXBwR2V0SW5pdGlhbFByb3BzICkucGFnZVByb3BzLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXBwR2V0SW5pdGlhbFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEFwcEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0J1aWxkIiwicmVxdWlyZSIsIndyYXBwZXJVdGlscyIsIndyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5Iiwib3JpZ0FwcEdldEluaXRpYWxQcm9wcyIsIlByb3h5IiwiYXBwbHkiLCJ3cmFwcGluZ1RhcmdldCIsInRoaXNBcmciLCJhcmdzIiwiY29udGV4dCIsInJlcSIsInJlcyIsImN0eCIsImVycm9yV3JhcHBlZEFwcEdldEluaXRpYWxQcm9wcyIsIndpdGhFcnJvckluc3RydW1lbnRhdGlvbiIsInRyYWNlZEdldEluaXRpYWxQcm9wcyIsIndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIiLCJkYXRhRmV0Y2hlclJvdXRlTmFtZSIsInJlcXVlc3RlZFJvdXRlTmFtZSIsInBhdGhuYW1lIiwiZGF0YUZldGNoaW5nTWV0aG9kTmFtZSIsImRhdGEiLCJhcHBHZXRJbml0aWFsUHJvcHMiLCJzZW50cnlUcmFjZSIsImJhZ2dhZ2UiLCJwYWdlUHJvcHMiLCJfc2VudHJ5VHJhY2VEYXRhIiwiX3NlbnRyeUJhZ2dhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom document (\"_document.js\").\n *\n * @param origDocumentGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapDocumentGetInitialPropsWithSentry(origDocumentGetInitialProps) {\n  return new Proxy(origDocumentGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const [context] = args;\n      const {\n        req,\n        res\n      } = context;\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_document',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps'\n        });\n        const {\n          data\n        } = await tracedGetInitialProps.apply(thisArg, args);\n        return data;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    }\n  });\n}\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLHlHQUFxQixDQUFDO0FBQzlDLE1BQU1DLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyxtSEFBMEIsQ0FBQzs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLHFDQUFxQ0EsQ0FDNUNDLDJCQUEyQixFQUMzQjtFQUNBLE9BQU8sSUFBSUMsS0FBSyxDQUFDRCwyQkFBMkIsRUFBRTtJQUM1Q0UsS0FBSyxFQUFFLE1BQUFBLENBQU9DLGNBQWMsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEtBQUs7TUFDOUMsSUFBSVQsT0FBTyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3JCLE9BQU9PLGNBQWMsQ0FBQ0QsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztNQUM1QztNQUVBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLEdBQUdELElBQUk7TUFDdEIsTUFBTTtRQUFFRSxHQUFHO1FBQUVDO01BQUksQ0FBQyxHQUFHRixPQUFPO01BRTVCLE1BQU1HLDJCQUEyQixHQUFHWCxZQUFZLENBQUNZLHdCQUF3QixDQUFDUCxjQUFjLENBQUM7TUFDekY7TUFDQTtNQUNBO01BQ0E7TUFDQSxJQUFJSSxHQUFHLElBQUlDLEdBQUcsRUFBRTtRQUNkLE1BQU1HLHFCQUFxQixHQUFHYixZQUFZLENBQUNjLCtCQUErQixDQUFDSCwyQkFBMkIsRUFBRUYsR0FBRyxFQUFFQyxHQUFHLEVBQUU7VUFDaEhLLG9CQUFvQixFQUFFLFlBQVk7VUFDbENDLGtCQUFrQixFQUFFUixPQUFPLENBQUNTLFFBQVE7VUFDcENDLHNCQUFzQixFQUFFO1FBQzFCLENBQUMsQ0FBQztRQUVGLE1BQU07VUFBRUM7UUFBSyxDQUFDLEdBQUcsTUFBTU4scUJBQXFCLENBQUNULEtBQUssQ0FBQ0UsT0FBTyxFQUFFQyxJQUFJLENBQUM7UUFDakUsT0FBT1ksSUFBSTtNQUNiLENBQUMsTUFBTTtRQUNMLE9BQU9SLDJCQUEyQixDQUFDUCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFDO01BQ3pEO0lBQ0Y7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVBWCw2Q0FBNkMsR0FBR0sscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzP2U4OGIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uIGluXG4gKiBhIGN1c3RvbSBkb2N1bWVudCAoXCJfZG9jdW1lbnQuanNcIikuXG4gKlxuICogQHBhcmFtIG9yaWdEb2N1bWVudEdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdEb2N1bWVudEdldEluaXRpYWxQcm9wcyxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdEb2N1bWVudEdldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIC8vIEdlbmVyYWxseSB3ZSBjYW4gYXNzdW1lIHRoYXQgYHJlcWAgYW5kIGByZXNgIGFyZSBhbHdheXMgZGVmaW5lZCBvbiB0aGUgc2VydmVyOlxuICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9kYXRhLWZldGNoaW5nL2dldC1pbml0aWFsLXByb3BzI2NvbnRleHQtb2JqZWN0XG4gICAgICAvLyBUaGlzIGRvZXMgbm90IHNlZW0gdG8gYmUgdGhlIGNhc2UgaW4gZGV2IG1vZGUuIEJlY2F1c2Ugd2UgaGF2ZSBubyBjbGVhbiB3YXkgb2YgYXNzb2NpYXRpbmcgdGhlIHRoZSBkYXRhIGZldGNoZXJcbiAgICAgIC8vIHNwYW4gd2l0aCBlYWNoIG90aGVyIHdoZW4gdGhlcmUgYXJlIG5vIHJlcSBvciByZXMgb2JqZWN0cywgd2Ugc2ltcGx5IGRvIG5vdCB0cmFjZSB0aGVtIGF0IGFsbCBoZXJlLlxuICAgICAgaWYgKHJlcSAmJiByZXMpIHtcbiAgICAgICAgY29uc3QgdHJhY2VkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiAnL19kb2N1bWVudCcsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRyYWNlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQnVpbGQiLCJyZXF1aXJlIiwid3JhcHBlclV0aWxzIiwid3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSIsIm9yaWdEb2N1bWVudEdldEluaXRpYWxQcm9wcyIsIlByb3h5IiwiYXBwbHkiLCJ3cmFwcGluZ1RhcmdldCIsInRoaXNBcmciLCJhcmdzIiwiY29udGV4dCIsInJlcSIsInJlcyIsImVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyIsIndpdGhFcnJvckluc3RydW1lbnRhdGlvbiIsInRyYWNlZEdldEluaXRpYWxQcm9wcyIsIndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIiLCJkYXRhRmV0Y2hlclJvdXRlTmFtZSIsInJlcXVlc3RlZFJvdXRlTmFtZSIsInBhdGhuYW1lIiwiZGF0YUZldGNoaW5nTWV0aG9kTmFtZSIsImRhdGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom error page (\"_error.js\").\n *\n * @param origErrorGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapErrorGetInitialPropsWithSentry(origErrorGetInitialProps) {\n  return new Proxy(origErrorGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const [context] = args;\n      const {\n        req,\n        res\n      } = context;\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_error',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps'\n        });\n        const {\n          data: errorGetInitialProps,\n          baggage,\n          sentryTrace\n        } = await tracedGetInitialProps.apply(thisArg, args);\n        if (typeof errorGetInitialProps === 'object' && errorGetInitialProps !== null) {\n          if (sentryTrace) {\n            // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n            errorGetInitialProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            errorGetInitialProps._sentryBaggage = baggage;\n          }\n        }\n        return errorGetInitialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    }\n  });\n}\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLHlHQUFxQixDQUFDO0FBQzlDLE1BQU1DLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyxtSEFBMEIsQ0FBQzs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLGtDQUFrQ0EsQ0FDekNDLHdCQUF3QixFQUN4QjtFQUNBLE9BQU8sSUFBSUMsS0FBSyxDQUFDRCx3QkFBd0IsRUFBRTtJQUN6Q0UsS0FBSyxFQUFFLE1BQUFBLENBQU9DLGNBQWMsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEtBQUs7TUFDOUMsSUFBSVQsT0FBTyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3JCLE9BQU9PLGNBQWMsQ0FBQ0QsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztNQUM1QztNQUVBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLEdBQUdELElBQUk7TUFDdEIsTUFBTTtRQUFFRSxHQUFHO1FBQUVDO01BQUksQ0FBQyxHQUFHRixPQUFPO01BRTVCLE1BQU1HLDJCQUEyQixHQUFHWCxZQUFZLENBQUNZLHdCQUF3QixDQUFDUCxjQUFjLENBQUM7TUFDekY7TUFDQTtNQUNBO01BQ0E7TUFDQSxJQUFJSSxHQUFHLElBQUlDLEdBQUcsRUFBRTtRQUNkLE1BQU1HLHFCQUFxQixHQUFHYixZQUFZLENBQUNjLCtCQUErQixDQUFDSCwyQkFBMkIsRUFBRUYsR0FBRyxFQUFFQyxHQUFHLEVBQUU7VUFDaEhLLG9CQUFvQixFQUFFLFNBQVM7VUFDL0JDLGtCQUFrQixFQUFFUixPQUFPLENBQUNTLFFBQVE7VUFDcENDLHNCQUFzQixFQUFFO1FBQzFCLENBQUMsQ0FBQztRQUVGLE1BQU07VUFDSkMsSUFBSSxFQUFFQyxvQkFBb0I7VUFDMUJDLE9BQU87VUFDUEM7UUFDRixDQUFDLEdBRU4sTUFBTVQscUJBQXFCLENBQUNULEtBQUssQ0FBQ0UsT0FBTyxFQUFFQyxJQUFJLENBQUM7UUFFM0MsSUFBSSxPQUFPYSxvQkFBb0IsS0FBSyxRQUFRLElBQUlBLG9CQUFvQixLQUFLLElBQUksRUFBRTtVQUM3RSxJQUFJRSxXQUFXLEVBQUU7WUFDZjtZQUNDRixvQkFBb0IsQ0FBR0csZ0JBQWdCLEdBQUdELFdBQVc7VUFDeEQ7O1VBRUE7VUFDQSxJQUFJRCxPQUFPLEVBQUU7WUFDVkQsb0JBQW9CLENBQUdJLGNBQWMsR0FBR0gsT0FBTztVQUNsRDtRQUNGO1FBRUEsT0FBT0Qsb0JBQW9CO01BQzdCLENBQUMsTUFBTTtRQUNMLE9BQU9ULDJCQUEyQixDQUFDUCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFDO01BQ3pEO0lBQ0Y7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVBWCwwQ0FBMEMsR0FBR0ssa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzPzViMTAiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uIGluXG4gKiBhIGN1c3RvbSBlcnJvciBwYWdlIChcIl9lcnJvci5qc1wiKS5cbiAqXG4gKiBAcGFyYW0gb3JpZ0Vycm9yR2V0SW5pdGlhbFByb3BzIFRoZSB1c2VyJ3MgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb25cbiAqIEBwYXJhbSBwYXJhbWV0ZXJpemVkUm91dGUgVGhlIHBhZ2UncyBwYXJhbWV0ZXJpemVkIHJvdXRlXG4gKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gd3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeShcbiAgb3JpZ0Vycm9yR2V0SW5pdGlhbFByb3BzLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0Vycm9yR2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6ICcvX2Vycm9yJyxcbiAgICAgICAgICByZXF1ZXN0ZWRSb3V0ZU5hbWU6IGNvbnRleHQucGF0aG5hbWUsXG4gICAgICAgICAgZGF0YUZldGNoaW5nTWV0aG9kTmFtZTogJ2dldEluaXRpYWxQcm9wcycsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBkYXRhOiBlcnJvckdldEluaXRpYWxQcm9wcyxcbiAgICAgICAgICBiYWdnYWdlLFxuICAgICAgICAgIHNlbnRyeVRyYWNlLFxuICAgICAgICB9XG5cbiA9IGF3YWl0IHRyYWNlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcblxuICAgICAgICBpZiAodHlwZW9mIGVycm9yR2V0SW5pdGlhbFByb3BzID09PSAnb2JqZWN0JyAmJiBlcnJvckdldEluaXRpYWxQcm9wcyAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChzZW50cnlUcmFjZSkge1xuICAgICAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICAgICAgKGVycm9yR2V0SW5pdGlhbFByb3BzICkuX3NlbnRyeVRyYWNlRGF0YSA9IHNlbnRyeVRyYWNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoYmFnZ2FnZSkge1xuICAgICAgICAgICAgKGVycm9yR2V0SW5pdGlhbFByb3BzICkuX3NlbnRyeUJhZ2dhZ2UgPSBiYWdnYWdlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlcnJvckdldEluaXRpYWxQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCdWlsZCIsInJlcXVpcmUiLCJ3cmFwcGVyVXRpbHMiLCJ3cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5Iiwib3JpZ0Vycm9yR2V0SW5pdGlhbFByb3BzIiwiUHJveHkiLCJhcHBseSIsIndyYXBwaW5nVGFyZ2V0IiwidGhpc0FyZyIsImFyZ3MiLCJjb250ZXh0IiwicmVxIiwicmVzIiwiZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzIiwid2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uIiwidHJhY2VkR2V0SW5pdGlhbFByb3BzIiwid2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlciIsImRhdGFGZXRjaGVyUm91dGVOYW1lIiwicmVxdWVzdGVkUm91dGVOYW1lIiwicGF0aG5hbWUiLCJkYXRhRmV0Y2hpbmdNZXRob2ROYW1lIiwiZGF0YSIsImVycm9yR2V0SW5pdGlhbFByb3BzIiwiYmFnZ2FnZSIsInNlbnRyeVRyYWNlIiwiX3NlbnRyeVRyYWNlRGF0YSIsIl9zZW50cnlCYWdnYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _asyncNullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetInitialPropsWithSentry(origGetInitialProps) {\n  return new Proxy(origGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const [context] = args;\n      const {\n        req,\n        res\n      } = context;\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: context.pathname,\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps'\n        });\n        const {\n          data: initialProps,\n          baggage,\n          sentryTrace\n        } = await _asyncNullishCoalesce(await tracedGetInitialProps.apply(thisArg, args), async () => ({})); // Next.js allows undefined to be returned from a getInitialPropsFunction.\n\n        if (typeof initialProps === 'object' && initialProps !== null) {\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            initialProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            initialProps._sentryBaggage = baggage;\n          }\n        }\n        return initialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    }\n  });\n}\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLElBQUk7RUFDRkE7QUFDRixDQUFDLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUUzQkMsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxPQUFPLEdBQUdMLG1CQUFPLENBQUMseUdBQXFCLENBQUM7QUFDOUMsTUFBTU0sWUFBWSxHQUFHTixtQkFBTyxDQUFDLG1IQUEwQixDQUFDOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNPLDZCQUE2QkEsQ0FBQ0MsbUJBQW1CLEVBQUU7RUFDMUQsT0FBTyxJQUFJQyxLQUFLLENBQUNELG1CQUFtQixFQUFFO0lBQ3BDRSxLQUFLLEVBQUUsTUFBQUEsQ0FBT0MsY0FBYyxFQUFFQyxPQUFPLEVBQUVDLElBQUksS0FBSztNQUM5QyxJQUFJUixPQUFPLENBQUNBLE9BQU8sQ0FBQyxDQUFDLEVBQUU7UUFDckIsT0FBT00sY0FBYyxDQUFDRCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFDO01BQzVDO01BRUEsTUFBTSxDQUFDQyxPQUFPLENBQUMsR0FBR0QsSUFBSTtNQUN0QixNQUFNO1FBQUVFLEdBQUc7UUFBRUM7TUFBSSxDQUFDLEdBQUdGLE9BQU87TUFFNUIsTUFBTUcsMkJBQTJCLEdBQUdYLFlBQVksQ0FBQ1ksd0JBQXdCLENBQUNQLGNBQWMsQ0FBQztNQUN6RjtNQUNBO01BQ0E7TUFDQTtNQUNBLElBQUlJLEdBQUcsSUFBSUMsR0FBRyxFQUFFO1FBQ2QsTUFBTUcscUJBQXFCLEdBQUdiLFlBQVksQ0FBQ2MsK0JBQStCLENBQUNILDJCQUEyQixFQUFFRixHQUFHLEVBQUVDLEdBQUcsRUFBRTtVQUNoSEssb0JBQW9CLEVBQUVQLE9BQU8sQ0FBQ1EsUUFBUTtVQUN0Q0Msa0JBQWtCLEVBQUVULE9BQU8sQ0FBQ1EsUUFBUTtVQUNwQ0Usc0JBQXNCLEVBQUU7UUFDMUIsQ0FBQyxDQUFDO1FBRUYsTUFBTTtVQUNKQyxJQUFJLEVBQUVDLFlBQVk7VUFDbEJDLE9BQU87VUFDUEM7UUFDRixDQUFDLEdBRU4sTUFBTTdCLHFCQUFxQixDQUFFLE1BQU1vQixxQkFBcUIsQ0FBQ1QsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQyxFQUFHLGFBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O1FBRS9GLElBQUksT0FBT2EsWUFBWSxLQUFLLFFBQVEsSUFBSUEsWUFBWSxLQUFLLElBQUksRUFBRTtVQUM3RDtVQUNBLElBQUlFLFdBQVcsRUFBRTtZQUNkRixZQUFZLENBQUdHLGdCQUFnQixHQUFHRCxXQUFXO1VBQ2hEOztVQUVBO1VBQ0EsSUFBSUQsT0FBTyxFQUFFO1lBQ1ZELFlBQVksQ0FBR0ksY0FBYyxHQUFHSCxPQUFPO1VBQzFDO1FBQ0Y7UUFFQSxPQUFPRCxZQUFZO01BQ3JCLENBQUMsTUFBTTtRQUNMLE9BQU9ULDJCQUEyQixDQUFDUCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFDO01BQ3pEO0lBQ0Y7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVBVixxQ0FBcUMsR0FBR0ksNkJBQTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcz83Mzg2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9hc3luY051bGxpc2hDb2FsZXNjZVxufSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldEluaXRpYWxQcm9wc2AgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gb3JpZ0dldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KG9yaWdHZXRJbml0aWFsUHJvcHMpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6IGNvbnRleHQucGF0aG5hbWUsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGF0YTogaW5pdGlhbFByb3BzLFxuICAgICAgICAgIGJhZ2dhZ2UsXG4gICAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICAgIH1cblxuID0gYXdhaXQgX2FzeW5jTnVsbGlzaENvYWxlc2NlKChhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncykpLCBhc3luYyAoKSA9PiAoIHt9KSk7IC8vIE5leHQuanMgYWxsb3dzIHVuZGVmaW5lZCB0byBiZSByZXR1cm5lZCBmcm9tIGEgZ2V0SW5pdGlhbFByb3BzRnVuY3Rpb24uXG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbml0aWFsUHJvcHMgPT09ICdvYmplY3QnICYmIGluaXRpYWxQcm9wcyAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIChpbml0aWFsUHJvcHMgKS5fc2VudHJ5VHJhY2VEYXRhID0gc2VudHJ5VHJhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICAgIGlmIChiYWdnYWdlKSB7XG4gICAgICAgICAgICAoaW5pdGlhbFByb3BzICkuX3NlbnRyeUJhZ2dhZ2UgPSBiYWdnYWdlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfYXN5bmNOdWxsaXNoQ29hbGVzY2UiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0J1aWxkIiwid3JhcHBlclV0aWxzIiwid3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkiLCJvcmlnR2V0SW5pdGlhbFByb3BzIiwiUHJveHkiLCJhcHBseSIsIndyYXBwaW5nVGFyZ2V0IiwidGhpc0FyZyIsImFyZ3MiLCJjb250ZXh0IiwicmVxIiwicmVzIiwiZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzIiwid2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uIiwidHJhY2VkR2V0SW5pdGlhbFByb3BzIiwid2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlciIsImRhdGFGZXRjaGVyUm91dGVOYW1lIiwicGF0aG5hbWUiLCJyZXF1ZXN0ZWRSb3V0ZU5hbWUiLCJkYXRhRmV0Y2hpbmdNZXRob2ROYW1lIiwiZGF0YSIsImluaXRpYWxQcm9wcyIsImJhZ2dhZ2UiLCJzZW50cnlUcmFjZSIsIl9zZW50cnlUcmFjZURhdGEiLCJfc2VudHJ5QmFnZ2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetServerSidePropsWithSentry(origGetServerSideProps, parameterizedRoute) {\n  return new Proxy(origGetServerSideProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const [context] = args;\n      const {\n        req,\n        res\n      } = context;\n      const errorWrappedGetServerSideProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      const tracedGetServerSideProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {\n        dataFetcherRouteName: parameterizedRoute,\n        requestedRouteName: parameterizedRoute,\n        dataFetchingMethodName: 'getServerSideProps'\n      });\n      const {\n        data: serverSideProps,\n        baggage,\n        sentryTrace\n      } = await tracedGetServerSideProps.apply(thisArg, args);\n      if (typeof serverSideProps === 'object' && serverSideProps !== null && 'props' in serverSideProps) {\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (sentryTrace) {\n          serverSideProps.props._sentryTraceData = sentryTrace;\n        }\n\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (baggage) {\n          serverSideProps.props._sentryBaggage = baggage;\n        }\n      }\n      return serverSideProps;\n    }\n  });\n}\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQyx5R0FBcUIsQ0FBQztBQUM5QyxNQUFNQyxZQUFZLEdBQUdELG1CQUFPLENBQUMsbUhBQTBCLENBQUM7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsZ0NBQWdDQSxDQUN2Q0Msc0JBQXNCLEVBQ3RCQyxrQkFBa0IsRUFDbEI7RUFDQSxPQUFPLElBQUlDLEtBQUssQ0FBQ0Ysc0JBQXNCLEVBQUU7SUFDdkNHLEtBQUssRUFBRSxNQUFBQSxDQUFPQyxjQUFjLEVBQUVDLE9BQU8sRUFBRUMsSUFBSSxLQUFLO01BQzlDLElBQUlWLE9BQU8sQ0FBQ0EsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUNyQixPQUFPUSxjQUFjLENBQUNELEtBQUssQ0FBQ0UsT0FBTyxFQUFFQyxJQUFJLENBQUM7TUFDNUM7TUFFQSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxHQUFHRCxJQUFJO01BQ3RCLE1BQU07UUFBRUUsR0FBRztRQUFFQztNQUFJLENBQUMsR0FBR0YsT0FBTztNQUU1QixNQUFNRyw4QkFBOEIsR0FBR1osWUFBWSxDQUFDYSx3QkFBd0IsQ0FBQ1AsY0FBYyxDQUFDO01BQzVGLE1BQU1RLHdCQUF3QixHQUFHZCxZQUFZLENBQUNlLCtCQUErQixDQUFDSCw4QkFBOEIsRUFBRUYsR0FBRyxFQUFFQyxHQUFHLEVBQUU7UUFDdEhLLG9CQUFvQixFQUFFYixrQkFBa0I7UUFDeENjLGtCQUFrQixFQUFFZCxrQkFBa0I7UUFDdENlLHNCQUFzQixFQUFFO01BQzFCLENBQUMsQ0FBQztNQUVGLE1BQU07UUFDSkMsSUFBSSxFQUFFQyxlQUFlO1FBQ3JCQyxPQUFPO1FBQ1BDO01BQ0YsQ0FBQyxHQUVKLE1BQU9SLHdCQUF3QixDQUFDVCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFHO01BRW5ELElBQUksT0FBT1ksZUFBZSxLQUFLLFFBQVEsSUFBSUEsZUFBZSxLQUFLLElBQUksSUFBSSxPQUFPLElBQUlBLGVBQWUsRUFBRTtRQUNqRztRQUNBLElBQUlFLFdBQVcsRUFBRTtVQUNkRixlQUFlLENBQUNHLEtBQUssQ0FBR0MsZ0JBQWdCLEdBQUdGLFdBQVc7UUFDekQ7O1FBRUE7UUFDQSxJQUFJRCxPQUFPLEVBQUU7VUFDVkQsZUFBZSxDQUFDRyxLQUFLLENBQUdFLGNBQWMsR0FBR0osT0FBTztRQUNuRDtNQUNGO01BRUEsT0FBT0QsZUFBZTtJQUN4QjtFQUNGLENBQUMsQ0FBQztBQUNKO0FBRUF4Qix3Q0FBd0MsR0FBR0ssZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcz85NTQ1Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0U2VydmVyU2lkZVByb3BzYCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSBvcmlnR2V0U2VydmVyU2lkZVByb3BzIFRoZSB1c2VyJ3MgYGdldFNlcnZlclNpZGVQcm9wc2AgZnVuY3Rpb25cbiAqIEBwYXJhbSBwYXJhbWV0ZXJpemVkUm91dGUgVGhlIHBhZ2UncyBwYXJhbWV0ZXJpemVkIHJvdXRlXG4gKiBAcmV0dXJucyBBIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gd3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdHZXRTZXJ2ZXJTaWRlUHJvcHMsXG4gIHBhcmFtZXRlcml6ZWRSb3V0ZSxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdHZXRTZXJ2ZXJTaWRlUHJvcHMsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZC5pc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0U2VydmVyU2lkZVByb3BzID0gd3JhcHBlclV0aWxzLndpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICBjb25zdCB0cmFjZWRHZXRTZXJ2ZXJTaWRlUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRHZXRTZXJ2ZXJTaWRlUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiBwYXJhbWV0ZXJpemVkUm91dGUsXG4gICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogcGFyYW1ldGVyaXplZFJvdXRlLFxuICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0U2VydmVyU2lkZVByb3BzJyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB7XG4gICAgICAgIGRhdGE6IHNlcnZlclNpZGVQcm9wcyxcbiAgICAgICAgYmFnZ2FnZSxcbiAgICAgICAgc2VudHJ5VHJhY2UsXG4gICAgICB9XG5cbiA9IGF3YWl0ICh0cmFjZWRHZXRTZXJ2ZXJTaWRlUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncykgKTtcblxuICAgICAgaWYgKHR5cGVvZiBzZXJ2ZXJTaWRlUHJvcHMgPT09ICdvYmplY3QnICYmIHNlcnZlclNpZGVQcm9wcyAhPT0gbnVsbCAmJiAncHJvcHMnIGluIHNlcnZlclNpZGVQcm9wcykge1xuICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgIGlmIChzZW50cnlUcmFjZSkge1xuICAgICAgICAgIChzZXJ2ZXJTaWRlUHJvcHMucHJvcHMgKS5fc2VudHJ5VHJhY2VEYXRhID0gc2VudHJ5VHJhY2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgIGlmIChiYWdnYWdlKSB7XG4gICAgICAgICAgKHNlcnZlclNpZGVQcm9wcy5wcm9wcyApLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VydmVyU2lkZVByb3BzO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQnVpbGQiLCJyZXF1aXJlIiwid3JhcHBlclV0aWxzIiwid3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkiLCJvcmlnR2V0U2VydmVyU2lkZVByb3BzIiwicGFyYW1ldGVyaXplZFJvdXRlIiwiUHJveHkiLCJhcHBseSIsIndyYXBwaW5nVGFyZ2V0IiwidGhpc0FyZyIsImFyZ3MiLCJjb250ZXh0IiwicmVxIiwicmVzIiwiZXJyb3JXcmFwcGVkR2V0U2VydmVyU2lkZVByb3BzIiwid2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uIiwidHJhY2VkR2V0U2VydmVyU2lkZVByb3BzIiwid2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlciIsImRhdGFGZXRjaGVyUm91dGVOYW1lIiwicmVxdWVzdGVkUm91dGVOYW1lIiwiZGF0YUZldGNoaW5nTWV0aG9kTmFtZSIsImRhdGEiLCJzZXJ2ZXJTaWRlUHJvcHMiLCJiYWdnYWdlIiwic2VudHJ5VHJhY2UiLCJwcm9wcyIsIl9zZW50cnlUcmFjZURhdGEiLCJfc2VudHJ5QmFnZ2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getStaticProps` function\n *\n * @param origGetStaticProps The user's `getStaticProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetStaticPropsWithSentry(origGetStaticPropsa, _parameterizedRoute) {\n  return new Proxy(origGetStaticPropsa, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const errorWrappedGetStaticProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      return wrapperUtils.callDataFetcherTraced(errorWrappedGetStaticProps, args);\n    }\n  });\n}\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLHlHQUFxQixDQUFDO0FBQzlDLE1BQU1DLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyxtSEFBMEIsQ0FBQzs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSw0QkFBNEJBLENBQ25DQyxtQkFBbUIsRUFDbkJDLG1CQUFtQixFQUNuQjtFQUNBLE9BQU8sSUFBSUMsS0FBSyxDQUFDRixtQkFBbUIsRUFBRTtJQUNwQ0csS0FBSyxFQUFFLE1BQUFBLENBQU9DLGNBQWMsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEtBQUs7TUFDOUMsSUFBSVYsT0FBTyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3JCLE9BQU9RLGNBQWMsQ0FBQ0QsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztNQUM1QztNQUVBLE1BQU1DLDBCQUEwQixHQUFHVCxZQUFZLENBQUNVLHdCQUF3QixDQUFDSixjQUFjLENBQUM7TUFDeEYsT0FBT04sWUFBWSxDQUFDVyxxQkFBcUIsQ0FBQ0YsMEJBQTBCLEVBQUVELElBQUksQ0FBQztJQUM3RTtFQUNGLENBQUMsQ0FBQztBQUNKO0FBRUFaLG9DQUFvQyxHQUFHSyw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkuanM/MTVlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldFN0YXRpY1Byb3BzYCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSBvcmlnR2V0U3RhdGljUHJvcHMgVGhlIHVzZXIncyBgZ2V0U3RhdGljUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdHZXRTdGF0aWNQcm9wc2EsXG4gIF9wYXJhbWV0ZXJpemVkUm91dGUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0U3RhdGljUHJvcHNhLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0U3RhdGljUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIHJldHVybiB3cmFwcGVyVXRpbHMuY2FsbERhdGFGZXRjaGVyVHJhY2VkKGVycm9yV3JhcHBlZEdldFN0YXRpY1Byb3BzLCBhcmdzKTtcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5ID0gd3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0J1aWxkIiwicmVxdWlyZSIsIndyYXBwZXJVdGlscyIsIndyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnkiLCJvcmlnR2V0U3RhdGljUHJvcHNhIiwiX3BhcmFtZXRlcml6ZWRSb3V0ZSIsIlByb3h5IiwiYXBwbHkiLCJ3cmFwcGluZ1RhcmdldCIsInRoaXNBcmciLCJhcmdzIiwiZXJyb3JXcmFwcGVkR2V0U3RhdGljUHJvcHMiLCJ3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24iLCJjYWxsRGF0YUZldGNoZXJUcmFjZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nfunction isReactClassComponent(target) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return typeof target === 'function' && _optionalChain([target, 'optionalAccess', _ => _.prototype, 'optionalAccess', _2 => _2.isReactComponent]);\n}\n\n/**\n * Wraps a page component with Sentry error instrumentation.\n */\nfunction wrapPageComponentWithSentry(pageComponent) {\n  if (isReactClassComponent(pageComponent)) {\n    return class SentryWrappedPageComponent extends pageComponent {\n      render(...args) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = typeof this.props === 'object' && this.props !== null && '_sentryTraceData' in this.props && typeof this.props._sentryTraceData === 'string' ? this.props._sentryTraceData : undefined;\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: _optionalChain([traceparentData, 'optionalAccess', _3 => _3.parentSpanId]),\n              trace_id: _optionalChain([traceparentData, 'optionalAccess', _4 => _4.traceId])\n            });\n          }\n          try {\n            return super.render(...args);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false\n              }\n            });\n            throw e;\n          }\n        });\n      }\n    };\n  } else if (typeof pageComponent === 'function') {\n    return new Proxy(pageComponent, {\n      apply(target, thisArg, argArray) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = _optionalChain([argArray, 'optionalAccess', _5 => _5[0], 'optionalAccess', _6 => _6._sentryTraceData]);\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: _optionalChain([traceparentData, 'optionalAccess', _7 => _7.parentSpanId]),\n              trace_id: _optionalChain([traceparentData, 'optionalAccess', _8 => _8.traceId])\n            });\n          }\n          try {\n            return target.apply(thisArg, argArray);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false\n              }\n            });\n            throw e;\n          }\n        });\n      }\n    });\n  } else {\n    return pageComponent;\n  }\n}\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * If this attribute is attached to a transaction, the Next.js SDK will drop that transaction.\n */\nconst TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = 'sentry.drop_transaction';\nconst TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = 'sentry.sentry_trace_backfill';\nconst TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = 'sentry.route_backfill';\nexports.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL;\nexports.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL;\nexports.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsd0NBQXdDLEdBQUcseUJBQXlCO0FBRTFFLE1BQU1DLHNDQUFzQyxHQUFHLDhCQUE4QjtBQUU3RSxNQUFNQyxzQ0FBc0MsR0FBRyx1QkFBdUI7QUFFdEVKLDhDQUE4QyxHQUFHSSxzQ0FBc0M7QUFDdkZKLDhDQUE4QyxHQUFHRyxzQ0FBc0M7QUFDdkZILGdEQUFnRCxHQUFHRSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9zcGFuLWF0dHJpYnV0ZXMtd2l0aC1sb2dpYy1hdHRhY2hlZC5qcz9mOGE1Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogSWYgdGhpcyBhdHRyaWJ1dGUgaXMgYXR0YWNoZWQgdG8gYSB0cmFuc2FjdGlvbiwgdGhlIE5leHQuanMgU0RLIHdpbGwgZHJvcCB0aGF0IHRyYW5zYWN0aW9uLlxuICovXG5jb25zdCBUUkFOU0FDVElPTl9BVFRSX1NIT1VMRF9EUk9QX1RSQU5TQUNUSU9OID0gJ3NlbnRyeS5kcm9wX3RyYW5zYWN0aW9uJztcblxuY29uc3QgVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfVFJBQ0VfQkFDS0ZJTEwgPSAnc2VudHJ5LnNlbnRyeV90cmFjZV9iYWNrZmlsbCc7XG5cbmNvbnN0IFRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1JPVVRFX0JBQ0tGSUxMID0gJ3NlbnRyeS5yb3V0ZV9iYWNrZmlsbCc7XG5cbmV4cG9ydHMuVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfUk9VVEVfQkFDS0ZJTEwgPSBUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTDtcbmV4cG9ydHMuVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfVFJBQ0VfQkFDS0ZJTEwgPSBUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9UUkFDRV9CQUNLRklMTDtcbmV4cG9ydHMuVFJBTlNBQ1RJT05fQVRUUl9TSE9VTERfRFJPUF9UUkFOU0FDVElPTiA9IFRSQU5TQUNUSU9OX0FUVFJfU0hPVUxEX0RST1BfVFJBTlNBQ1RJT047XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGFuLWF0dHJpYnV0ZXMtd2l0aC1sb2dpYy1hdHRhY2hlZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlRSQU5TQUNUSU9OX0FUVFJfU0hPVUxEX0RST1BfVFJBTlNBQ1RJT04iLCJUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9UUkFDRV9CQUNLRklMTCIsIlRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1JPVVRFX0JBQ0tGSUxMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst constants = __webpack_require__(/*! next/constants */ \"(instrument)/./node_modules/next/constants.js\");\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nfunction isBuild() {\n  return process.env.NEXT_PHASE === constants.PHASE_PRODUCTION_BUILD;\n}\nexports.isBuild = isBuild;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvaXNCdWlsZC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxxRUFBZ0IsQ0FBQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsT0FBT0EsQ0FBQSxFQUFHO0VBQ2pCLE9BQU9DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxVQUFVLEtBQUtMLFNBQVMsQ0FBQ00sc0JBQXNCO0FBQ3BFO0FBRUFSLGVBQWUsR0FBR0ksT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL2lzQnVpbGQuanM/MGQzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCduZXh0L2NvbnN0YW50cycpO1xuXG4vKipcbiAqIERlY2lkZSBpZiB0aGUgY3VycmVudGx5IHJ1bm5pbmcgcHJvY2VzcyBpcyBwYXJ0IG9mIHRoZSBidWlsZCBwaGFzZSBvciBoYXBwZW5pbmcgYXQgcnVudGltZS5cbiAqL1xuZnVuY3Rpb24gaXNCdWlsZCgpIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52Lk5FWFRfUEhBU0UgPT09IGNvbnN0YW50cy5QSEFTRV9QUk9EVUNUSU9OX0JVSUxEO1xufVxuXG5leHBvcnRzLmlzQnVpbGQgPSBpc0J1aWxkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNCdWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbnN0YW50cyIsInJlcXVpcmUiLCJpc0J1aWxkIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUEhBU0UiLCJQSEFTRV9QUk9EVUNUSU9OX0JVSUxEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nasync function flushSafelyWithTimeout() {\n  try {\n    debugBuild.DEBUG_BUILD && core.logger.log('Flushing events...');\n    await core.flush(2000);\n    debugBuild.DEBUG_BUILD && core.logger.log('Done flushing events');\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.logger.log('Error while flushing events:\\n', e);\n  }\n}\nexports.flushSafelyWithTimeout = flushSafelyWithTimeout;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvcmVzcG9uc2VFbmQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxJQUFJLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNQyxVQUFVLEdBQUdELG1CQUFPLENBQUMscUdBQW1CLENBQUM7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBLGVBQWVFLHNCQUFzQkEsQ0FBQSxFQUFHO0VBQ3RDLElBQUk7SUFDRkQsVUFBVSxDQUFDRSxXQUFXLElBQUlKLElBQUksQ0FBQ0ssTUFBTSxDQUFDQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7SUFDL0QsTUFBTU4sSUFBSSxDQUFDTyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3RCTCxVQUFVLENBQUNFLFdBQVcsSUFBSUosSUFBSSxDQUFDSyxNQUFNLENBQUNDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQztFQUNuRSxDQUFDLENBQUMsT0FBT0UsQ0FBQyxFQUFFO0lBQ1ZOLFVBQVUsQ0FBQ0UsV0FBVyxJQUFJSixJQUFJLENBQUNLLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLGdDQUFnQyxFQUFFRSxDQUFDLENBQUM7RUFDaEY7QUFDRjtBQUVBViw4QkFBOEIsR0FBR0ssc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvcmVzcG9uc2VFbmQuanM/YWE2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcblxuLyoqXG4gKiBGbHVzaGVzIHBlbmRpbmcgU2VudHJ5IGV2ZW50cyB3aXRoIGEgMiBzZWNvbmQgdGltZW91dCBhbmQgaW4gYSB3YXkgdGhhdCBjYW5ub3QgY3JlYXRlIHVuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbnMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZsdXNoU2FmZWx5V2l0aFRpbWVvdXQoKSB7XG4gIHRyeSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci5sb2coJ0ZsdXNoaW5nIGV2ZW50cy4uLicpO1xuICAgIGF3YWl0IGNvcmUuZmx1c2goMjAwMCk7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci5sb2coJ0RvbmUgZmx1c2hpbmcgZXZlbnRzJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLmxvZygnRXJyb3Igd2hpbGUgZmx1c2hpbmcgZXZlbnRzOlxcbicsIGUpO1xuICB9XG59XG5cbmV4cG9ydHMuZmx1c2hTYWZlbHlXaXRoVGltZW91dCA9IGZsdXNoU2FmZWx5V2l0aFRpbWVvdXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZUVuZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvcmUiLCJyZXF1aXJlIiwiZGVidWdCdWlsZCIsImZsdXNoU2FmZWx5V2l0aFRpbWVvdXQiLCJERUJVR19CVUlMRCIsImxvZ2dlciIsImxvZyIsImZsdXNoIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst commonPropagationContextMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param propagationContext The propagation context that should be shared between all the resources if no propagation context was registered yet.\n * @returns the shared propagation context.\n */\nfunction commonObjectToPropagationContext(commonObject, propagationContext) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoPropagationContext = commonPropagationContextMap.get(commonObject);\n    if (memoPropagationContext) {\n      return memoPropagationContext;\n    } else {\n      commonPropagationContextMap.set(commonObject, propagationContext);\n      return propagationContext;\n    }\n  } else {\n    return propagationContext;\n  }\n}\nconst commonIsolationScopeMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param isolationScope The isolationScope that should be shared between all the resources if no isolation scope was created yet.\n * @returns the shared isolation scope.\n */\nfunction commonObjectToIsolationScope(commonObject) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoIsolationScope = commonIsolationScopeMap.get(commonObject);\n    if (memoIsolationScope) {\n      return memoIsolationScope;\n    } else {\n      const newIsolationScope = new core.Scope();\n      commonIsolationScopeMap.set(commonObject, newIsolationScope);\n      return newIsolationScope;\n    }\n  } else {\n    return new core.Scope();\n  }\n}\nlet nextjsEscapedAsyncStorage;\n\n/**\n * Will mark the execution context of the callback as \"escaped\" from Next.js internal tracing by unsetting the active\n * span and propagation context. When an execution passes through this function multiple times, it is a noop after the\n * first time.\n */\nfunction escapeNextjsTracing(cb) {\n  const MaybeGlobalAsyncLocalStorage = core.GLOBAL_OBJ.AsyncLocalStorage;\n  if (!MaybeGlobalAsyncLocalStorage) {\n    debugBuild.DEBUG_BUILD && core.logger.warn(\"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\");\n    return cb();\n  }\n  if (!nextjsEscapedAsyncStorage) {\n    nextjsEscapedAsyncStorage = new MaybeGlobalAsyncLocalStorage();\n  }\n  if (nextjsEscapedAsyncStorage.getStore()) {\n    return cb();\n  } else {\n    return core.startNewTrace(() => {\n      return nextjsEscapedAsyncStorage.run(true, () => {\n        return cb();\n      });\n    });\n  }\n}\n\n/**\n * Ideally this function never lands in the develop branch.\n *\n * Drops the entire span tree this function was called in, if it was a span tree created by Next.js.\n */\nfunction dropNextjsRootContext() {\n  const nextJsOwnedSpan = core.getActiveSpan();\n  if (nextJsOwnedSpan) {\n    const rootSpan = core.getRootSpan(nextJsOwnedSpan);\n    const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n    if (_optionalChain([rootSpanAttributes, 'optionalAccess', _ => _['next.span_type']])) {\n      _optionalChain([core.getRootSpan, 'call', _2 => _2(nextJsOwnedSpan), 'optionalAccess', _3 => _3.setAttribute, 'call', _4 => _4(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION, true)]);\n    }\n  }\n}\nexports.commonObjectToIsolationScope = commonObjectToIsolationScope;\nexports.commonObjectToPropagationContext = commonObjectToPropagationContext;\nexports.dropNextjsRootContext = dropNextjsRootContext;\nexports.escapeNextjsTracing = escapeNextjsTracing;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\n\n/**\n * Wraps a function that potentially throws. If it does, the error is passed to `captureException` and rethrown.\n *\n * Note: This function turns the wrapped function into an asynchronous one.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorInstrumentation(origFunction) {\n  return async function (...origFunctionArguments) {\n    try {\n      return await origFunction.apply(this, origFunctionArguments);\n    } catch (e) {\n      // TODO: Extract error logic from `withSentry` in here or create a new wrapper with said logic or something like that.\n      core.captureException(e, {\n        mechanism: {\n          handled: false\n        }\n      });\n      throw e;\n    }\n  };\n}\n\n/**\n * Calls a server-side data fetching function (that takes a `req` and `res` object in its context) with tracing\n * instrumentation. A transaction will be created for the incoming request (if it doesn't already exist) in addition to\n * a span for the wrapped data fetching function.\n *\n * All of the above happens in an isolated domain, meaning all thrown errors will be associated with the correct span.\n *\n * @param origDataFetcher The data fetching method to call.\n * @param origFunctionArguments The arguments to call the data fetching method with.\n * @param req The data fetching function's request object.\n * @param res The data fetching function's response object.\n * @param options Options providing details for the created transaction and span.\n * @returns what the data fetching method call returned.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withTracedServerSideDataFetcher(origDataFetcher, req, res, options) {\n  return async function (...args) {\n    const normalizedRequest = core.httpRequestToRequestData(req);\n    core.getCurrentScope().setTransactionName(`${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`);\n    core.getIsolationScope().setSDKProcessingMetadata({\n      normalizedRequest\n    });\n    const span = core.getActiveSpan();\n\n    // Only set the route backfill if the span is not for /_error\n    if (span && options.requestedRouteName !== '/_error') {\n      const root = core.getRootSpan(span);\n      root.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL, options.requestedRouteName);\n    }\n    const {\n      'sentry-trace': sentryTrace,\n      baggage\n    } = core.getTraceData();\n    return {\n      sentryTrace: sentryTrace,\n      baggage: baggage,\n      data: await origDataFetcher.apply(this, args)\n    };\n  };\n}\n\n/**\n * Call a data fetcher and trace it. Only traces the function if there is an active transaction on the scope.\n *\n * We only do the following until we move transaction creation into this function: When called, the wrapped function\n * will also update the name of the active transaction with a parameterized route provided via the `options` argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function callDataFetcherTraced(origFunction, origFunctionArgs) {\n  try {\n    return await origFunction(...origFunctionArgs);\n  } catch (e) {\n    core.captureException(e, {\n      mechanism: {\n        handled: false\n      }\n    });\n    throw e;\n  }\n}\nexports.callDataFetcherTraced = callDataFetcherTraced;\nexports.withErrorInstrumentation = withErrorInstrumentation;\nexports.withTracedServerSideDataFetcher = withTracedServerSideDataFetcher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Wraps a Next.js Server Action implementation with Sentry Error and Performance instrumentation.\n */\nfunction withServerActionInstrumentation(...args) {\n  if (typeof args[1] === 'function') {\n    const [serverActionName, callback] = args;\n    return withServerActionInstrumentationImplementation(serverActionName, {}, callback);\n  } else {\n    const [serverActionName, options, callback] = args;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return withServerActionInstrumentationImplementation(serverActionName, options, callback);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function withServerActionInstrumentationImplementation(serverActionName, options, callback) {\n  return core.withIsolationScope(async isolationScope => {\n    const sendDefaultPii = _optionalChain([core.getClient, 'call', _ => _(), 'optionalAccess', _2 => _2.getOptions, 'call', _3 => _3(), 'access', _4 => _4.sendDefaultPii]);\n    let sentryTraceHeader;\n    let baggageHeader;\n    const fullHeadersObject = {};\n    try {\n      const awaitedHeaders = await options.headers;\n      sentryTraceHeader = _nullishCoalesce(_optionalChain([awaitedHeaders, 'optionalAccess', _5 => _5.get, 'call', _6 => _6('sentry-trace')]), () => undefined);\n      baggageHeader = _optionalChain([awaitedHeaders, 'optionalAccess', _7 => _7.get, 'call', _8 => _8('baggage')]);\n      _optionalChain([awaitedHeaders, 'optionalAccess', _9 => _9.forEach, 'call', _10 => _10((value, key) => {\n        fullHeadersObject[key] = value;\n      })]);\n    } catch (e) {\n      debugBuild.DEBUG_BUILD && core.logger.warn(\"Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request.\");\n    }\n    isolationScope.setTransactionName(`serverAction/${serverActionName}`);\n    isolationScope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: fullHeadersObject\n      }\n    });\n\n    // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n    // Else, we manually continueTrace from the incoming headers\n    const continueTraceIfNoActiveSpan = core.getActiveSpan() ? (_opts, callback) => callback() : core.continueTrace;\n    return continueTraceIfNoActiveSpan({\n      sentryTrace: sentryTraceHeader,\n      baggage: baggageHeader\n    }, async () => {\n      try {\n        return await core.startSpan({\n          op: 'function.server_action',\n          name: `serverAction/${serverActionName}`,\n          forceTransaction: true,\n          attributes: {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route'\n          }\n        }, async span => {\n          const result = await core.handleCallbackErrors(callback, error => {\n            if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n              // We don't want to report \"not-found\"s\n              span.setStatus({\n                code: core.SPAN_STATUS_ERROR,\n                message: 'not_found'\n              });\n            } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n              // Don't do anything for redirects\n            } else {\n              span.setStatus({\n                code: core.SPAN_STATUS_ERROR,\n                message: 'internal_error'\n              });\n              core.captureException(error, {\n                mechanism: {\n                  handled: false\n                }\n              });\n            }\n          });\n          if (options.recordResponse !== undefined ? options.recordResponse : sendDefaultPii) {\n            core.getIsolationScope().setExtra('server_action_result', result);\n          }\n          if (options.formData) {\n            options.formData.forEach((value, key) => {\n              core.getIsolationScope().setExtra(`server_action_form_data.${key}`, typeof value === 'string' ? value : '[non-string value]');\n            });\n          }\n          return result;\n        });\n      } finally {\n        core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n      }\n    });\n  });\n}\nexports.withServerActionInstrumentation = withServerActionInstrumentation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapGenerationFunctionWithSentry(generationFunction, context) {\n  const {\n    requestAsyncStorage,\n    componentRoute,\n    componentType,\n    generationFunctionIdentifier\n  } = context;\n  return new Proxy(generationFunction, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = _optionalChain([core.getActiveSpan, 'call', _ => _(), 'optionalAccess', _2 => _2.spanContext, 'call', _3 => _3(), 'access', _4 => _4.traceId]);\n      let headers = undefined;\n      // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API\n      try {\n        headers = _optionalChain([requestAsyncStorage, 'optionalAccess', _5 => _5.getStore, 'call', _6 => _6(), 'optionalAccess', _7 => _7.headers]);\n      } catch (e) {\n        /** empty */\n      }\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(headers);\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const {\n          scope\n        } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, _nullishCoalesce(scope, () => new core.Scope()), isolationScope);\n      }\n      let data = undefined;\n      if (_optionalChain([core.getClient, 'call', _8 => _8(), 'optionalAccess', _9 => _9.getOptions, 'call', _10 => _10(), 'access', _11 => _11.sendDefaultPii])) {\n        const props = args[0];\n        const params = props && typeof props === 'object' && 'params' in props ? props.params : undefined;\n        const searchParams = props && typeof props === 'object' && 'searchParams' in props ? props.searchParams : undefined;\n        data = {\n          params,\n          searchParams\n        };\n      }\n      const headersDict = headers ? core.winterCGHeadersToDict(headers) : undefined;\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: {\n              headers: headersDict\n            }\n          });\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = _optionalChain([headersDict, 'optionalAccess', _12 => _12['sentry-trace']]);\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n          const propagationContext = tracingUtils.commonObjectToPropagationContext(headers, _optionalChain([headersDict, 'optionalAccess', _13 => _13['sentry-trace']]) ? core.propagationContextFromHeaders(headersDict['sentry-trace'], headersDict['baggage']) : {\n            traceId: requestTraceId || core.generateTraceId(),\n            spanId: core.generateSpanId()\n          });\n          scope.setPropagationContext(propagationContext);\n          scope.setExtra('route_data', data);\n          return core.startSpanManual({\n            op: 'function.nextjs',\n            name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,\n            attributes: {\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs'\n            }\n          }, span => {\n            return core.handleCallbackErrors(() => originalFunction.apply(thisArg, args), err => {\n              // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n              // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n              if (nextNavigationErrorUtils.isNotFoundNavigationError(err)) {\n                // We don't want to report \"not-found\"s\n                span.setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'not_found'\n                });\n                core.getRootSpan(span).setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'not_found'\n                });\n              } else if (nextNavigationErrorUtils.isRedirectNavigationError(err)) {\n                // We don't want to report redirects\n                span.setStatus({\n                  code: core.SPAN_STATUS_OK\n                });\n              } else {\n                span.setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'internal_error'\n                });\n                core.getRootSpan(span).setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'internal_error'\n                });\n                core.captureException(err, {\n                  mechanism: {\n                    handled: false\n                  }\n                });\n              }\n            }, () => {\n              span.end();\n            });\n          });\n        });\n      });\n    }\n  });\n}\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Wraps Next.js middleware with Sentry error and performance instrumentation.\n *\n * @param middleware The middleware handler.\n * @returns a wrapped middleware handler.\n */\nfunction wrapMiddlewareWithSentry(middleware) {\n  return new Proxy(middleware, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n      return core.withIsolationScope(isolationScope => {\n        const req = args[0];\n        const currentScope = core.getCurrentScope();\n        let spanName;\n        let spanSource;\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: core.winterCGRequestToRequestData(req)\n          });\n          spanName = `middleware ${req.method} ${new URL(req.url).pathname}`;\n          spanSource = 'url';\n        } else {\n          spanName = 'middleware';\n          spanSource = 'component';\n        }\n        currentScope.setTransactionName(spanName);\n        const activeSpan = core.getActiveSpan();\n        if (activeSpan) {\n          // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n          // rely on that for parameterization.\n          spanName = 'middleware';\n          spanSource = 'component';\n          const rootSpan = core.getRootSpan(activeSpan);\n          if (rootSpan) {\n            core.setCapturedScopesOnSpan(rootSpan, currentScope, isolationScope);\n          }\n        }\n        return core.startSpan({\n          name: spanName,\n          op: 'http.server.middleware',\n          attributes: {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: spanSource,\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrapMiddlewareWithSentry'\n          }\n        }, () => {\n          return core.handleCallbackErrors(() => wrappingTarget.apply(thisArg, args), error => {\n            core.captureException(error, {\n              mechanism: {\n                type: 'instrument',\n                handled: false\n              }\n            });\n          }, () => {\n            core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n          });\n        });\n      });\n    }\n  });\n}\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFDcEMsTUFBTUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLGdIQUF3QixDQUFDOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSx3QkFBd0JBLENBQy9CQyxVQUFVLEVBQ1Y7RUFDQSxPQUFPLElBQUlDLEtBQUssQ0FBQ0QsVUFBVSxFQUFFO0lBQzNCRSxLQUFLLEVBQUUsTUFBQUEsQ0FBT0MsY0FBYyxFQUFFQyxPQUFPLEVBQUVDLElBQUksS0FBSztNQUM5QztNQUNBLE9BQU9ULElBQUksQ0FBQ1Usa0JBQWtCLENBQUNDLGNBQWMsSUFBSTtRQUMvQyxNQUFNQyxHQUFHLEdBQUdILElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbkIsTUFBTUksWUFBWSxHQUFHYixJQUFJLENBQUNjLGVBQWUsQ0FBQyxDQUFDO1FBRTNDLElBQUlDLFFBQVE7UUFDWixJQUFJQyxVQUFVO1FBRWQsSUFBSUosR0FBRyxZQUFZSyxPQUFPLEVBQUU7VUFDMUJOLGNBQWMsQ0FBQ08sd0JBQXdCLENBQUM7WUFDdENDLGlCQUFpQixFQUFFbkIsSUFBSSxDQUFDb0IsNEJBQTRCLENBQUNSLEdBQUc7VUFDMUQsQ0FBQyxDQUFDO1VBQ0ZHLFFBQVEsR0FBSSxjQUFhSCxHQUFHLENBQUNTLE1BQU8sSUFBRyxJQUFJQyxHQUFHLENBQUNWLEdBQUcsQ0FBQ1csR0FBRyxDQUFDLENBQUNDLFFBQVMsRUFBQztVQUNsRVIsVUFBVSxHQUFHLEtBQUs7UUFDcEIsQ0FBQyxNQUFNO1VBQ0xELFFBQVEsR0FBRyxZQUFZO1VBQ3ZCQyxVQUFVLEdBQUcsV0FBVztRQUMxQjtRQUVBSCxZQUFZLENBQUNZLGtCQUFrQixDQUFDVixRQUFRLENBQUM7UUFFekMsTUFBTVcsVUFBVSxHQUFHMUIsSUFBSSxDQUFDMkIsYUFBYSxDQUFDLENBQUM7UUFFdkMsSUFBSUQsVUFBVSxFQUFFO1VBQ2Q7VUFDQTtVQUNBWCxRQUFRLEdBQUcsWUFBWTtVQUN2QkMsVUFBVSxHQUFHLFdBQVc7VUFFeEIsTUFBTVksUUFBUSxHQUFHNUIsSUFBSSxDQUFDNkIsV0FBVyxDQUFDSCxVQUFVLENBQUM7VUFDN0MsSUFBSUUsUUFBUSxFQUFFO1lBQ1o1QixJQUFJLENBQUM4Qix1QkFBdUIsQ0FBQ0YsUUFBUSxFQUFFZixZQUFZLEVBQUVGLGNBQWMsQ0FBQztVQUN0RTtRQUNGO1FBRUEsT0FBT1gsSUFBSSxDQUFDK0IsU0FBUyxDQUNuQjtVQUNFQyxJQUFJLEVBQUVqQixRQUFRO1VBQ2RrQixFQUFFLEVBQUUsd0JBQXdCO1VBQzVCQyxVQUFVLEVBQUU7WUFDVixDQUFDbEMsSUFBSSxDQUFDbUMsZ0NBQWdDLEdBQUduQixVQUFVO1lBQ25ELENBQUNoQixJQUFJLENBQUNvQyxnQ0FBZ0MsR0FBRztVQUMzQztRQUNGLENBQUMsRUFDRCxNQUFNO1VBQ0osT0FBT3BDLElBQUksQ0FBQ3FDLG9CQUFvQixDQUM5QixNQUFNOUIsY0FBYyxDQUFDRCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFDLEVBQ3pDNkIsS0FBSyxJQUFJO1lBQ1B0QyxJQUFJLENBQUN1QyxnQkFBZ0IsQ0FBQ0QsS0FBSyxFQUFFO2NBQzNCRSxTQUFTLEVBQUU7Z0JBQ1RDLElBQUksRUFBRSxZQUFZO2dCQUNsQkMsT0FBTyxFQUFFO2NBQ1g7WUFDRixDQUFDLENBQUM7VUFDSixDQUFDLEVBQ0QsTUFBTTtZQUNKMUMsSUFBSSxDQUFDMkMsZUFBZSxDQUFDekMsV0FBVyxDQUFDMEMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1VBQzVELENBQ0YsQ0FBQztRQUNILENBQ0YsQ0FBQztNQUNILENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQTlDLGdDQUFnQyxHQUFHSyx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi93cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanM/Y2FlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCByZXNwb25zZUVuZCA9IHJlcXVpcmUoJy4vdXRpbHMvcmVzcG9uc2VFbmQuanMnKTtcblxuLyoqXG4gKiBXcmFwcyBOZXh0LmpzIG1pZGRsZXdhcmUgd2l0aCBTZW50cnkgZXJyb3IgYW5kIHBlcmZvcm1hbmNlIGluc3RydW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0gbWlkZGxld2FyZSBUaGUgbWlkZGxld2FyZSBoYW5kbGVyLlxuICogQHJldHVybnMgYSB3cmFwcGVkIG1pZGRsZXdhcmUgaGFuZGxlci5cbiAqL1xuZnVuY3Rpb24gd3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5KFxuICBtaWRkbGV3YXJlLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkobWlkZGxld2FyZSwge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIC8vIFRPRE86IFdlIHN0aWxsIHNob3VsZCBhZGQgY2VudHJhbCBpc29sYXRpb24gc2NvcGUgY3JlYXRpb24gZm9yIHdoZW4gb3VyIGJ1aWxkLXRpbWUgaW5zdHJ1bWVudGF0aW9uIGRvZXMgbm90IHdvcmsgYW55bW9yZSB3aXRoIHR1cmJvcGFjay5cbiAgICAgIHJldHVybiBjb3JlLndpdGhJc29sYXRpb25TY29wZShpc29sYXRpb25TY29wZSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcSA9IGFyZ3NbMF07XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTY29wZSA9IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG5cbiAgICAgICAgbGV0IHNwYW5OYW1lO1xuICAgICAgICBsZXQgc3BhblNvdXJjZTtcblxuICAgICAgICBpZiAocmVxIGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgICAgIGlzb2xhdGlvblNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7XG4gICAgICAgICAgICBub3JtYWxpemVkUmVxdWVzdDogY29yZS53aW50ZXJDR1JlcXVlc3RUb1JlcXVlc3REYXRhKHJlcSksXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3Bhbk5hbWUgPSBgbWlkZGxld2FyZSAke3JlcS5tZXRob2R9ICR7bmV3IFVSTChyZXEudXJsKS5wYXRobmFtZX1gO1xuICAgICAgICAgIHNwYW5Tb3VyY2UgPSAndXJsJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcGFuTmFtZSA9ICdtaWRkbGV3YXJlJztcbiAgICAgICAgICBzcGFuU291cmNlID0gJ2NvbXBvbmVudCc7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50U2NvcGUuc2V0VHJhbnNhY3Rpb25OYW1lKHNwYW5OYW1lKTtcblxuICAgICAgICBjb25zdCBhY3RpdmVTcGFuID0gY29yZS5nZXRBY3RpdmVTcGFuKCk7XG5cbiAgICAgICAgaWYgKGFjdGl2ZVNwYW4pIHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhbiBhY3RpdmUgc3BhbiwgaXQgbGlrZWx5IG1lYW5zIHRoYXQgdGhlIGF1dG9tYXRpYyBOZXh0LmpzIE9URUwgaW5zdHJ1bWVudGF0aW9uIHdvcmtlZCBhbmQgd2UgY2FuXG4gICAgICAgICAgLy8gcmVseSBvbiB0aGF0IGZvciBwYXJhbWV0ZXJpemF0aW9uLlxuICAgICAgICAgIHNwYW5OYW1lID0gJ21pZGRsZXdhcmUnO1xuICAgICAgICAgIHNwYW5Tb3VyY2UgPSAnY29tcG9uZW50JztcblxuICAgICAgICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihhY3RpdmVTcGFuKTtcbiAgICAgICAgICBpZiAocm9vdFNwYW4pIHtcbiAgICAgICAgICAgIGNvcmUuc2V0Q2FwdHVyZWRTY29wZXNPblNwYW4ocm9vdFNwYW4sIGN1cnJlbnRTY29wZSwgaXNvbGF0aW9uU2NvcGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb3JlLnN0YXJ0U3BhbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBzcGFuTmFtZSxcbiAgICAgICAgICAgIG9wOiAnaHR0cC5zZXJ2ZXIubWlkZGxld2FyZScsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTogc3BhblNvdXJjZSxcbiAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiAnYXV0by5mdW5jdGlvbi5uZXh0anMud3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29yZS5oYW5kbGVDYWxsYmFja0Vycm9ycyhcbiAgICAgICAgICAgICAgKCkgPT4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyksXG4gICAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5zdHJ1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvcmUudmVyY2VsV2FpdFVudGlsKHJlc3BvbnNlRW5kLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQoKSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwTWlkZGxld2FyZVdpdGhTZW50cnkgPSB3cmFwTWlkZGxld2FyZVdpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwTWlkZGxld2FyZVdpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb3JlIiwicmVxdWlyZSIsInJlc3BvbnNlRW5kIiwid3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5IiwibWlkZGxld2FyZSIsIlByb3h5IiwiYXBwbHkiLCJ3cmFwcGluZ1RhcmdldCIsInRoaXNBcmciLCJhcmdzIiwid2l0aElzb2xhdGlvblNjb3BlIiwiaXNvbGF0aW9uU2NvcGUiLCJyZXEiLCJjdXJyZW50U2NvcGUiLCJnZXRDdXJyZW50U2NvcGUiLCJzcGFuTmFtZSIsInNwYW5Tb3VyY2UiLCJSZXF1ZXN0Iiwic2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhIiwibm9ybWFsaXplZFJlcXVlc3QiLCJ3aW50ZXJDR1JlcXVlc3RUb1JlcXVlc3REYXRhIiwibWV0aG9kIiwiVVJMIiwidXJsIiwicGF0aG5hbWUiLCJzZXRUcmFuc2FjdGlvbk5hbWUiLCJhY3RpdmVTcGFuIiwiZ2V0QWN0aXZlU3BhbiIsInJvb3RTcGFuIiwiZ2V0Um9vdFNwYW4iLCJzZXRDYXB0dXJlZFNjb3Blc09uU3BhbiIsInN0YXJ0U3BhbiIsIm5hbWUiLCJvcCIsImF0dHJpYnV0ZXMiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOIiwiaGFuZGxlQ2FsbGJhY2tFcnJvcnMiLCJlcnJvciIsImNhcHR1cmVFeGNlcHRpb24iLCJtZWNoYW5pc20iLCJ0eXBlIiwiaGFuZGxlZCIsInZlcmNlbFdhaXRVbnRpbCIsImZsdXNoU2FmZWx5V2l0aFRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wraps a Next.js App Router Route handler with Sentry error and performance instrumentation.\n *\n * NOTICE: This wrapper is for App Router API routes. If you are looking to wrap Pages Router API routes use `wrapApiHandlerWithSentry` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapRouteHandlerWithSentry(routeHandler, context) {\n  const {\n    method,\n    parameterizedRoute,\n    headers\n  } = context;\n  return new Proxy(routeHandler, {\n    apply: async (originalFunction, thisArg, args) => {\n      const activeSpan = core.getActiveSpan();\n      const rootSpan = activeSpan ? core.getRootSpan(activeSpan) : undefined;\n      let edgeRuntimeIsolationScopeOverride;\n      if (rootSpan && \"nodejs\" === 'edge') {}\n      return core.withIsolationScope( false ? 0 : core.getIsolationScope(), () => {\n        return core.withScope(async scope => {\n          scope.setTransactionName(`${method} ${parameterizedRoute}`);\n          if (false) {}\n          const response = await core.handleCallbackErrors(() => originalFunction.apply(thisArg, args), error => {\n            // Next.js throws errors when calling `redirect()`. We don't wanna report these.\n            if (nextNavigationErrorUtils.isRedirectNavigationError(error)) ;else if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n              if (activeSpan) {\n                core.setHttpStatus(activeSpan, 404);\n              }\n              if (rootSpan) {\n                core.setHttpStatus(rootSpan, 404);\n              }\n            } else {\n              core.captureException(error, {\n                mechanism: {\n                  handled: false\n                }\n              });\n            }\n          });\n          try {\n            if (response.status) {\n              if (activeSpan) {\n                core.setHttpStatus(activeSpan, response.status);\n              }\n              if (rootSpan) {\n                core.setHttpStatus(rootSpan, response.status);\n              }\n            }\n          } catch (e) {\n            // best effort - response may be undefined?\n          }\n          return response;\n        });\n      });\n    }\n  });\n}\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapServerComponentWithSentry(appDirComponent, context) {\n  const {\n    componentRoute,\n    componentType\n  } = context;\n  // Even though users may define server components as async functions, for the client bundles\n  // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n  // hook. 🤯\n  return new Proxy(appDirComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = _optionalChain([core.getActiveSpan, 'call', _ => _(), 'optionalAccess', _2 => _2.spanContext, 'call', _3 => _3(), 'access', _4 => _4.traceId]);\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(context.headers);\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const {\n          scope\n        } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, _nullishCoalesce(scope, () => new core.Scope()), isolationScope);\n      }\n      const headersDict = context.headers ? core.winterCGHeadersToDict(context.headers) : undefined;\n      isolationScope.setSDKProcessingMetadata({\n        normalizedRequest: {\n          headers: headersDict\n        }\n      });\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType} Server Component (${componentRoute})`);\n          if (false) {}\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = _optionalChain([headersDict, 'optionalAccess', _6 => _6['sentry-trace']]);\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n          return core.startSpanManual({\n            op: 'function.nextjs',\n            name: `${componentType} Server Component (${componentRoute})`,\n            attributes: {\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs'\n            }\n          }, span => {\n            return core.handleCallbackErrors(() => originalFunction.apply(thisArg, args), error => {\n              // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n              // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n              if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                // We don't want to report \"not-found\"s\n                span.setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'not_found'\n                });\n              } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n                // We don't want to report redirects\n                span.setStatus({\n                  code: core.SPAN_STATUS_OK\n                });\n              } else {\n                span.setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'internal_error'\n                });\n                core.captureException(error, {\n                  mechanism: {\n                    handled: false\n                  }\n                });\n              }\n            }, () => {\n              span.end();\n              core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n            });\n          });\n        });\n      });\n    }\n  });\n}\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n;\nglobalThis[\"_sentryRewritesTunnelPath\"] = undefined;\nglobalThis[\"SENTRY_RELEASE\"] = undefined;\nglobalThis[\"_sentryBasePath\"] = undefined;\nglobalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/src/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\");\nconst supportedVersions = ['>=2.0.0'];\n\n/**\n * Custom instrumentation for nestjs event-emitter\n *\n * This hooks into the `OnEvent` decorator, which is applied on event handlers.\n */\nclass SentryNestEventInstrumentation extends instrumentation.InstrumentationBase {\n  static __initStatic() {\n    this.COMPONENT = '@nestjs/event-emitter';\n  }\n  static __initStatic2() {\n    this.COMMON_ATTRIBUTES = {\n      component: SentryNestEventInstrumentation.COMPONENT\n    };\n  }\n  constructor(config = {}) {\n    super('sentry-nestjs-event', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n  init() {\n    const moduleDef = new instrumentation.InstrumentationNodeModuleDefinition(SentryNestEventInstrumentation.COMPONENT, supportedVersions);\n    moduleDef.files.push(this._getOnEventFileInstrumentation(supportedVersions));\n    return moduleDef;\n  }\n\n  /**\n   * Wraps the @OnEvent decorator.\n   */\n  _getOnEventFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile('@nestjs/event-emitter/dist/decorators/on-event.decorator.js', versions, moduleExports => {\n      if (core$1.isWrapped(moduleExports.OnEvent)) {\n        this._unwrap(moduleExports, 'OnEvent');\n      }\n      this._wrap(moduleExports, 'OnEvent', this._createWrapOnEvent());\n      return moduleExports;\n    }, moduleExports => {\n      this._unwrap(moduleExports, 'OnEvent');\n    });\n  }\n\n  /**\n   * Creates a wrapper function for the @OnEvent decorator.\n   */\n  _createWrapOnEvent() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapOnEvent(original) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return function wrappedOnEvent(event, options) {\n        const eventName = Array.isArray(event) ? event.join(',') : typeof event === 'string' || typeof event === 'symbol' ? event.toString() : '<unknown_event>';\n\n        // Get the original decorator result\n        const decoratorResult = original(event, options);\n\n        // Return a new decorator function that wraps the handler\n        return function (target, propertyKey, descriptor) {\n          if (!descriptor.value || typeof descriptor.value !== 'function' || target.__SENTRY_INTERNAL__) {\n            return decoratorResult(target, propertyKey, descriptor);\n          }\n\n          // Get the original handler\n          const originalHandler = descriptor.value;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          const handlerName = originalHandler.name || propertyKey;\n\n          // Instrument the handler\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          descriptor.value = async function (...args) {\n            return core.startSpan(helpers.getEventSpanOptions(eventName), async () => {\n              try {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                const result = await originalHandler.apply(this, args);\n                return result;\n              } catch (error) {\n                // exceptions from event handlers are not caught by global error filter\n                core.captureException(error);\n                throw error;\n              }\n            });\n          };\n\n          // Preserve the original function name\n          Object.defineProperty(descriptor.value, 'name', {\n            value: handlerName,\n            configurable: true\n          });\n\n          // Apply the original decorator\n          return decoratorResult(target, propertyKey, descriptor);\n        };\n      };\n    };\n  }\n}\nSentryNestEventInstrumentation.__initStatic();\nSentryNestEventInstrumentation.__initStatic2();\nexports.SentryNestEventInstrumentation = SentryNestEventInstrumentation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n;\nglobalThis[\"_sentryRewritesTunnelPath\"] = undefined;\nglobalThis[\"SENTRY_RELEASE\"] = undefined;\nglobalThis[\"_sentryBasePath\"] = undefined;\nglobalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/src/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst helpers = __webpack_require__(/*! ./helpers.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\");\nconst supportedVersions = ['>=8.0.0 <11'];\n\n/**\n * Custom instrumentation for nestjs.\n *\n * This hooks into\n * 1. @Injectable decorator, which is applied on class middleware, interceptors and guards.\n * 2. @Catch decorator, which is applied on exception filters.\n */\nclass SentryNestInstrumentation extends instrumentation.InstrumentationBase {\n  static __initStatic() {\n    this.COMPONENT = '@nestjs/common';\n  }\n  static __initStatic2() {\n    this.COMMON_ATTRIBUTES = {\n      component: SentryNestInstrumentation.COMPONENT\n    };\n  }\n  constructor(config = {}) {\n    super('sentry-nestjs', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n  init() {\n    const moduleDef = new instrumentation.InstrumentationNodeModuleDefinition(SentryNestInstrumentation.COMPONENT, supportedVersions);\n    moduleDef.files.push(this._getInjectableFileInstrumentation(supportedVersions), this._getCatchFileInstrumentation(supportedVersions));\n    return moduleDef;\n  }\n\n  /**\n   * Wraps the @Injectable decorator.\n   */\n  _getInjectableFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile('@nestjs/common/decorators/core/injectable.decorator.js', versions, moduleExports => {\n      if (core$1.isWrapped(moduleExports.Injectable)) {\n        this._unwrap(moduleExports, 'Injectable');\n      }\n      this._wrap(moduleExports, 'Injectable', this._createWrapInjectable());\n      return moduleExports;\n    }, moduleExports => {\n      this._unwrap(moduleExports, 'Injectable');\n    });\n  }\n\n  /**\n   * Wraps the @Catch decorator.\n   */\n  _getCatchFileInstrumentation(versions) {\n    return new instrumentation.InstrumentationNodeModuleFile('@nestjs/common/decorators/core/catch.decorator.js', versions, moduleExports => {\n      if (core$1.isWrapped(moduleExports.Catch)) {\n        this._unwrap(moduleExports, 'Catch');\n      }\n      this._wrap(moduleExports, 'Catch', this._createWrapCatch());\n      return moduleExports;\n    }, moduleExports => {\n      this._unwrap(moduleExports, 'Catch');\n    });\n  }\n\n  /**\n   * Creates a wrapper function for the @Injectable decorator.\n   */\n  _createWrapInjectable() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapInjectable(original) {\n      return function wrappedInjectable(options) {\n        return function (target) {\n          // patch middleware\n          if (typeof target.prototype.use === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n            target.prototype.use = new Proxy(target.prototype.use, {\n              apply: (originalUse, thisArgUse, argsUse) => {\n                const [req, res, next, ...args] = argsUse;\n\n                // Check that we can reasonably assume that the target is a middleware.\n                // Without these guards, instrumentation will fail if a function named 'use' on a service, which is\n                // decorated with @Injectable, is called.\n                if (!req || !res || !next || typeof next !== 'function') {\n                  return originalUse.apply(thisArgUse, argsUse);\n                }\n                const prevSpan = core.getActiveSpan();\n                return core.startSpanManual(helpers.getMiddlewareSpanOptions(target), span => {\n                  // proxy next to end span on call\n                  const nextProxy = helpers.getNextProxy(next, span, prevSpan);\n                  return originalUse.apply(thisArgUse, [req, res, nextProxy, args]);\n                });\n              }\n            });\n          }\n\n          // patch guards\n          if (typeof target.prototype.canActivate === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n            target.prototype.canActivate = new Proxy(target.prototype.canActivate, {\n              apply: (originalCanActivate, thisArgCanActivate, argsCanActivate) => {\n                const context = argsCanActivate[0];\n                if (!context) {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                }\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCanActivate.apply(thisArgCanActivate, argsCanActivate);\n                });\n              }\n            });\n          }\n\n          // patch pipes\n          if (typeof target.prototype.transform === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n            target.prototype.transform = new Proxy(target.prototype.transform, {\n              apply: (originalTransform, thisArgTransform, argsTransform) => {\n                const value = argsTransform[0];\n                const metadata = argsTransform[1];\n                if (!value || !metadata) {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                }\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalTransform.apply(thisArgTransform, argsTransform);\n                });\n              }\n            });\n          }\n\n          // patch interceptors\n          if (typeof target.prototype.intercept === 'function' && !target.__SENTRY_INTERNAL__) {\n            if (helpers.isPatched(target)) {\n              return original(options)(target);\n            }\n            target.prototype.intercept = new Proxy(target.prototype.intercept, {\n              apply: (originalIntercept, thisArgIntercept, argsIntercept) => {\n                const context = argsIntercept[0];\n                const next = argsIntercept[1];\n                const parentSpan = core.getActiveSpan();\n                let afterSpan;\n\n                // Check that we can reasonably assume that the target is an interceptor.\n                if (!context || !next || typeof next.handle !== 'function') {\n                  return originalIntercept.apply(thisArgIntercept, argsIntercept);\n                }\n                return core.startSpanManual(helpers.getMiddlewareSpanOptions(target), beforeSpan => {\n                  // eslint-disable-next-line @typescript-eslint/unbound-method\n                  next.handle = new Proxy(next.handle, {\n                    apply: (originalHandle, thisArgHandle, argsHandle) => {\n                      beforeSpan.end();\n                      if (parentSpan) {\n                        return core.withActiveSpan(parentSpan, () => {\n                          const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n                          if (!context._sentryInterceptorInstrumented) {\n                            core.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                            afterSpan = core.startInactiveSpan(helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'));\n                          }\n                          return handleReturnObservable;\n                        });\n                      } else {\n                        const handleReturnObservable = Reflect.apply(originalHandle, thisArgHandle, argsHandle);\n                        if (!context._sentryInterceptorInstrumented) {\n                          core.addNonEnumerableProperty(context, '_sentryInterceptorInstrumented', true);\n                          afterSpan = core.startInactiveSpan(helpers.getMiddlewareSpanOptions(target, 'Interceptors - After Route'));\n                        }\n                        return handleReturnObservable;\n                      }\n                    }\n                  });\n                  let returnedObservableInterceptMaybePromise;\n                  try {\n                    returnedObservableInterceptMaybePromise = originalIntercept.apply(thisArgIntercept, argsIntercept);\n                  } catch (e) {\n                    _optionalChain([beforeSpan, 'optionalAccess', _ => _.end, 'call', _2 => _2()]);\n                    _optionalChain([afterSpan, 'optionalAccess', _3 => _3.end, 'call', _4 => _4()]);\n                    throw e;\n                  }\n                  if (!afterSpan) {\n                    return returnedObservableInterceptMaybePromise;\n                  }\n\n                  // handle async interceptor\n                  if (core.isThenable(returnedObservableInterceptMaybePromise)) {\n                    return returnedObservableInterceptMaybePromise.then(observable => {\n                      helpers.instrumentObservable(observable, _nullishCoalesce(afterSpan, () => parentSpan));\n                      return observable;\n                    }, e => {\n                      _optionalChain([beforeSpan, 'optionalAccess', _5 => _5.end, 'call', _6 => _6()]);\n                      _optionalChain([afterSpan, 'optionalAccess', _7 => _7.end, 'call', _8 => _8()]);\n                      throw e;\n                    });\n                  }\n\n                  // handle sync interceptor\n                  if (typeof returnedObservableInterceptMaybePromise.subscribe === 'function') {\n                    helpers.instrumentObservable(returnedObservableInterceptMaybePromise, _nullishCoalesce(afterSpan, () => parentSpan));\n                  }\n                  return returnedObservableInterceptMaybePromise;\n                });\n              }\n            });\n          }\n          return original(options)(target);\n        };\n      };\n    };\n  }\n\n  /**\n   * Creates a wrapper function for the @Catch decorator. Used to instrument exception filters.\n   */\n  _createWrapCatch() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function wrapCatch(original) {\n      return function wrappedCatch(...exceptions) {\n        return function (target) {\n          if (typeof target.prototype.catch === 'function' && !target.__SENTRY_INTERNAL__) {\n            // patch only once\n            if (helpers.isPatched(target)) {\n              return original(...exceptions)(target);\n            }\n            target.prototype.catch = new Proxy(target.prototype.catch, {\n              apply: (originalCatch, thisArgCatch, argsCatch) => {\n                const exception = argsCatch[0];\n                const host = argsCatch[1];\n                if (!exception || !host) {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                }\n                return core.startSpan(helpers.getMiddlewareSpanOptions(target), () => {\n                  return originalCatch.apply(thisArgCatch, argsCatch);\n                });\n              }\n            });\n          }\n          return original(...exceptions)(target);\n        };\n      };\n    };\n  }\n}\nSentryNestInstrumentation.__initStatic();\nSentryNestInstrumentation.__initStatic2();\nexports.SentryNestInstrumentation = SentryNestInstrumentation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n;\nglobalThis[\"_sentryRewritesTunnelPath\"] = undefined;\nglobalThis[\"SENTRY_RELEASE\"] = undefined;\nglobalThis[\"_sentryBasePath\"] = undefined;\nglobalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n// List of patched methods\n// From: https://sdk.vercel.ai/docs/ai-sdk-core/telemetry#collected-data\nconst INSTRUMENTED_METHODS = ['generateText', 'streamText', 'generateObject', 'streamObject', 'embed', 'embedMany'];\nexports.sentryVercelAiPatched = false;\n\n/**\n * This detects is added by the Sentry Vercel AI Integration to detect if the integration should\n * be enabled.\n *\n * It also patches the `ai` module to enable Vercel AI telemetry automatically for all methods.\n */\nclass SentryVercelAiInstrumentation extends instrumentation.InstrumentationBase {\n  constructor(config = {}) {\n    super('@sentry/instrumentation-vercel-ai', core.SDK_VERSION, config);\n  }\n\n  /**\n   * Initializes the instrumentation by defining the modules to be patched.\n   */\n  init() {\n    const module = new instrumentation.InstrumentationNodeModuleDefinition('ai', ['>=3.0.0 <5'], this._patch.bind(this));\n    return module;\n  }\n\n  /**\n   * Patches module exports to enable Vercel AI telemetry.\n   */\n  _patch(moduleExports) {\n    exports.sentryVercelAiPatched = true;\n    function generatePatch(name) {\n      return (...args) => {\n        const existingExperimentalTelemetry = args[0].experimental_telemetry || {};\n        const isEnabled = existingExperimentalTelemetry.isEnabled;\n\n        // if `isEnabled` is not explicitly set to `true` or `false`, enable telemetry\n        // but disable capturing inputs and outputs by default\n        if (isEnabled === undefined) {\n          args[0].experimental_telemetry = {\n            isEnabled: true,\n            recordInputs: false,\n            recordOutputs: false,\n            ...existingExperimentalTelemetry\n          };\n        }\n\n        // @ts-expect-error we know that the method exists\n        return moduleExports[name].apply(this, args);\n      };\n    }\n    const patchedModuleExports = INSTRUMENTED_METHODS.reduce((acc, curr) => {\n      acc[curr] = generatePatch(curr);\n      return acc;\n    }, {});\n    return {\n      ...moduleExports,\n      ...patchedModuleExports\n    };\n  }\n}\nexports.SentryVercelAiInstrumentation = SentryVercelAiInstrumentation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdmVyY2VsYWkvaW5zdHJ1bWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQ0EsVUFBVSxDQUFDLDJCQUEyQixDQUFDLEdBQUdDLFNBQVM7QUFBQ0QsVUFBVSxDQUFDLGdCQUFnQixDQUFDLEdBQUdDLFNBQVM7QUFBQ0QsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEdBQUdDLFNBQVM7QUFBQ0QsVUFBVSxDQUFDLDZCQUE2QixDQUFDLEdBQUcsT0FBTztBQUFDRSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRXpQLE1BQU1DLGVBQWUsR0FBR0MsbUJBQU8sQ0FBQyxxSEFBZ0MsQ0FBQztBQUNqRSxNQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsaUZBQWMsQ0FBQzs7QUFFcEM7QUFDQTtBQUNBLE1BQU1FLG9CQUFvQixHQUFHLENBQzNCLGNBQWMsRUFDZCxZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLGNBQWMsRUFDZCxPQUFPLEVBQ1AsV0FBVyxDQUNaO0FBRURMLDZCQUE2QixHQUFHLEtBQUs7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1PLDZCQUE2QixTQUFTTCxlQUFlLENBQUNNLG1CQUFtQixDQUFDO0VBQzdFQyxXQUFXQSxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDeEIsS0FBSyxDQUFDLG1DQUFtQyxFQUFFTixJQUFJLENBQUNPLFdBQVcsRUFBRUQsTUFBTSxDQUFDO0VBQ3RFOztFQUVBO0FBQ0Y7QUFDQTtFQUNHRSxJQUFJQSxDQUFBLEVBQUc7SUFDTixNQUFNQyxNQUFNLEdBQUcsSUFBSVgsZUFBZSxDQUFDWSxtQ0FBbUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BILE9BQU9ILE1BQU07RUFDZjs7RUFFQTtBQUNGO0FBQ0E7RUFDR0UsTUFBTUEsQ0FBQ0UsYUFBYSxFQUFFO0lBQ3JCakIsNkJBQTZCLEdBQUcsSUFBSTtJQUVwQyxTQUFTa0IsYUFBYUEsQ0FBQ0MsSUFBSSxFQUFFO01BQzNCLE9BQU8sQ0FBQyxHQUFHQyxJQUFJLEtBQUs7UUFDbEIsTUFBTUMsNkJBQTZCLEdBQUdELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQ0Usc0JBQXNCLElBQUksQ0FBQyxDQUFDO1FBQzFFLE1BQU1DLFNBQVMsR0FBR0YsNkJBQTZCLENBQUNFLFNBQVM7O1FBRXpEO1FBQ0E7UUFDQSxJQUFJQSxTQUFTLEtBQUsxQixTQUFTLEVBQUU7VUFDM0J1QixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUNFLHNCQUFzQixHQUFHO1lBQy9CQyxTQUFTLEVBQUUsSUFBSTtZQUNmQyxZQUFZLEVBQUUsS0FBSztZQUNuQkMsYUFBYSxFQUFFLEtBQUs7WUFDcEIsR0FBR0o7VUFDTCxDQUFDO1FBQ0g7O1FBRUE7UUFDQSxPQUFPSixhQUFhLENBQUNFLElBQUksQ0FBQyxDQUFDTyxLQUFLLENBQUMsSUFBSSxFQUFFTixJQUFJLENBQUM7TUFDOUMsQ0FBQztJQUNIO0lBRUEsTUFBTU8sb0JBQW9CLEdBQUd0QixvQkFBb0IsQ0FBQ3VCLE1BQU0sQ0FBQyxDQUFDQyxHQUFHLEVBQUVDLElBQUksS0FBSztNQUN0RUQsR0FBRyxDQUFDQyxJQUFJLENBQUMsR0FBR1osYUFBYSxDQUFDWSxJQUFJLENBQUM7TUFDL0IsT0FBT0QsR0FBRztJQUNaLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FBQztJQUVQLE9BQU87TUFBRSxHQUFHWixhQUFhO01BQUUsR0FBR1U7SUFBcUIsQ0FBQztFQUN0RDtBQUNGO0FBRUEzQixxQ0FBcUMsR0FBR08sNkJBQTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdmVyY2VsYWkvaW5zdHJ1bWVudGF0aW9uLmpzPzY2YWMiXSwic291cmNlc0NvbnRlbnQiOlsiO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZXNUdW5uZWxQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJTRU5UUllfUkVMRUFTRVwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeUJhc2VQYXRoXCJdID0gdW5kZWZpbmVkO2dsb2JhbFRoaXNbXCJfc2VudHJ5UmV3cml0ZUZyYW1lc0Rpc3REaXJcIl0gPSBcIi5uZXh0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8vIExpc3Qgb2YgcGF0Y2hlZCBtZXRob2RzXG4vLyBGcm9tOiBodHRwczovL3Nkay52ZXJjZWwuYWkvZG9jcy9haS1zZGstY29yZS90ZWxlbWV0cnkjY29sbGVjdGVkLWRhdGFcbmNvbnN0IElOU1RSVU1FTlRFRF9NRVRIT0RTID0gW1xuICAnZ2VuZXJhdGVUZXh0JyxcbiAgJ3N0cmVhbVRleHQnLFxuICAnZ2VuZXJhdGVPYmplY3QnLFxuICAnc3RyZWFtT2JqZWN0JyxcbiAgJ2VtYmVkJyxcbiAgJ2VtYmVkTWFueScsXG5dIDtcblxuZXhwb3J0cy5zZW50cnlWZXJjZWxBaVBhdGNoZWQgPSBmYWxzZTtcblxuLyoqXG4gKiBUaGlzIGRldGVjdHMgaXMgYWRkZWQgYnkgdGhlIFNlbnRyeSBWZXJjZWwgQUkgSW50ZWdyYXRpb24gdG8gZGV0ZWN0IGlmIHRoZSBpbnRlZ3JhdGlvbiBzaG91bGRcbiAqIGJlIGVuYWJsZWQuXG4gKlxuICogSXQgYWxzbyBwYXRjaGVzIHRoZSBgYWlgIG1vZHVsZSB0byBlbmFibGUgVmVyY2VsIEFJIHRlbGVtZXRyeSBhdXRvbWF0aWNhbGx5IGZvciBhbGwgbWV0aG9kcy5cbiAqL1xuY2xhc3MgU2VudHJ5VmVyY2VsQWlJbnN0cnVtZW50YXRpb24gZXh0ZW5kcyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uQmFzZSB7XG4gICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKCdAc2VudHJ5L2luc3RydW1lbnRhdGlvbi12ZXJjZWwtYWknLCBjb3JlLlNES19WRVJTSU9OLCBjb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnN0cnVtZW50YXRpb24gYnkgZGVmaW5pbmcgdGhlIG1vZHVsZXMgdG8gYmUgcGF0Y2hlZC5cbiAgICovXG4gICBpbml0KCkge1xuICAgIGNvbnN0IG1vZHVsZSA9IG5ldyBpbnN0cnVtZW50YXRpb24uSW5zdHJ1bWVudGF0aW9uTm9kZU1vZHVsZURlZmluaXRpb24oJ2FpJywgWyc+PTMuMC4wIDw1J10sIHRoaXMuX3BhdGNoLmJpbmQodGhpcykpO1xuICAgIHJldHVybiBtb2R1bGU7XG4gIH1cblxuICAvKipcbiAgICogUGF0Y2hlcyBtb2R1bGUgZXhwb3J0cyB0byBlbmFibGUgVmVyY2VsIEFJIHRlbGVtZXRyeS5cbiAgICovXG4gICBfcGF0Y2gobW9kdWxlRXhwb3J0cykge1xuICAgIGV4cG9ydHMuc2VudHJ5VmVyY2VsQWlQYXRjaGVkID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlUGF0Y2gobmFtZSkge1xuICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRXhwZXJpbWVudGFsVGVsZW1ldHJ5ID0gYXJnc1swXS5leHBlcmltZW50YWxfdGVsZW1ldHJ5IHx8IHt9O1xuICAgICAgICBjb25zdCBpc0VuYWJsZWQgPSBleGlzdGluZ0V4cGVyaW1lbnRhbFRlbGVtZXRyeS5pc0VuYWJsZWQ7XG5cbiAgICAgICAgLy8gaWYgYGlzRW5hYmxlZGAgaXMgbm90IGV4cGxpY2l0bHkgc2V0IHRvIGB0cnVlYCBvciBgZmFsc2VgLCBlbmFibGUgdGVsZW1ldHJ5XG4gICAgICAgIC8vIGJ1dCBkaXNhYmxlIGNhcHR1cmluZyBpbnB1dHMgYW5kIG91dHB1dHMgYnkgZGVmYXVsdFxuICAgICAgICBpZiAoaXNFbmFibGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhcmdzWzBdLmV4cGVyaW1lbnRhbF90ZWxlbWV0cnkgPSB7XG4gICAgICAgICAgICBpc0VuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICByZWNvcmRJbnB1dHM6IGZhbHNlLFxuICAgICAgICAgICAgcmVjb3JkT3V0cHV0czogZmFsc2UsXG4gICAgICAgICAgICAuLi5leGlzdGluZ0V4cGVyaW1lbnRhbFRlbGVtZXRyeSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB3ZSBrbm93IHRoYXQgdGhlIG1ldGhvZCBleGlzdHNcbiAgICAgICAgcmV0dXJuIG1vZHVsZUV4cG9ydHNbbmFtZV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IHBhdGNoZWRNb2R1bGVFeHBvcnRzID0gSU5TVFJVTUVOVEVEX01FVEhPRFMucmVkdWNlKChhY2MsIGN1cnIpID0+IHtcbiAgICAgIGFjY1tjdXJyXSA9IGdlbmVyYXRlUGF0Y2goY3Vycik7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9ICk7XG5cbiAgICByZXR1cm4geyAuLi5tb2R1bGVFeHBvcnRzLCAuLi5wYXRjaGVkTW9kdWxlRXhwb3J0cyB9O1xuICB9XG59XG5cbmV4cG9ydHMuU2VudHJ5VmVyY2VsQWlJbnN0cnVtZW50YXRpb24gPSBTZW50cnlWZXJjZWxBaUluc3RydW1lbnRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnRhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJnbG9iYWxUaGlzIiwidW5kZWZpbmVkIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnN0cnVtZW50YXRpb24iLCJyZXF1aXJlIiwiY29yZSIsIklOU1RSVU1FTlRFRF9NRVRIT0RTIiwic2VudHJ5VmVyY2VsQWlQYXRjaGVkIiwiU2VudHJ5VmVyY2VsQWlJbnN0cnVtZW50YXRpb24iLCJJbnN0cnVtZW50YXRpb25CYXNlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJTREtfVkVSU0lPTiIsImluaXQiLCJtb2R1bGUiLCJJbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRGVmaW5pdGlvbiIsIl9wYXRjaCIsImJpbmQiLCJtb2R1bGVFeHBvcnRzIiwiZ2VuZXJhdGVQYXRjaCIsIm5hbWUiLCJhcmdzIiwiZXhpc3RpbmdFeHBlcmltZW50YWxUZWxlbWV0cnkiLCJleHBlcmltZW50YWxfdGVsZW1ldHJ5IiwiaXNFbmFibGVkIiwicmVjb3JkSW5wdXRzIiwicmVjb3JkT3V0cHV0cyIsImFwcGx5IiwicGF0Y2hlZE1vZHVsZUV4cG9ydHMiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpack.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/config/webpack.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(instrument)/./node_modules/@sentry/node/build/cjs/index.js\");\nconst chalk = __webpack_require__(/*! chalk */ \"(instrument)/./node_modules/chalk/source/index.js\");\nconst resolve = __webpack_require__(/*! resolve */ \"(instrument)/./node_modules/resolve/index.js\");\nconst webpackPluginOptions = __webpack_require__(/*! ./webpackPluginOptions.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpackPluginOptions.js\");\n\n/* eslint-disable complexity */\n\n// Next.js runs webpack 3 times, once for the client, the server, and for edge. Because we don't want to print certain\n// warnings 3 times, we keep track of them here.\nlet showedMissingGlobalErrorWarningMsg = false;\n\n/**\n * Construct the function which will be used as the nextjs config's `webpack` value.\n *\n * Sets:\n *   - `devtool`, to ensure high-quality sourcemaps are generated\n *   - `entry`, to include user's sentry config files (where `Sentry.init` is called) in the build\n *   - `plugins`, to add SentryWebpackPlugin\n *\n * @param userNextConfig The user's existing nextjs config, as passed to `withSentryConfig`\n * @param userSentryOptions The user's SentryWebpackPlugin config, as passed to `withSentryConfig`\n * @returns The function to set as the nextjs config's `webpack` value\n */\nfunction constructWebpackConfigFunction(userNextConfig = {}, userSentryOptions = {}) {\n  // Will be called by nextjs and passed its default webpack configuration and context data about the build (whether\n  // we're building server or client, whether we're in dev, what version of webpack we're using, etc). Note that\n  // `incomingConfig` and `buildContext` are referred to as `config` and `options` in the nextjs docs.\n  return function newWebpackFunction(incomingConfig, buildContext) {\n    const {\n      isServer,\n      dev: isDev,\n      dir: projectDir\n    } = buildContext;\n    const runtime = isServer ? buildContext.nextRuntime === 'edge' ? 'edge' : 'server' : 'client';\n    if (runtime !== 'client') {\n      warnAboutDeprecatedConfigFiles(projectDir, runtime);\n    }\n    let rawNewConfig = {\n      ...incomingConfig\n    };\n\n    // if user has custom webpack config (which always takes the form of a function), run it so we have actual values to\n    // work with\n    if ('webpack' in userNextConfig && typeof userNextConfig.webpack === 'function') {\n      rawNewConfig = userNextConfig.webpack(rawNewConfig, buildContext);\n    }\n\n    // This mutates `rawNewConfig` in place, but also returns it in order to switch its type to one in which\n    // `newConfig.module.rules` is required, so we don't have to keep asserting its existence\n    const newConfig = setUpModuleRules(rawNewConfig);\n\n    // Add a loader which will inject code that sets global values\n    addValueInjectionLoader(newConfig, userNextConfig, userSentryOptions, buildContext);\n    addOtelWarningIgnoreRule(newConfig);\n    let pagesDirPath;\n    const maybePagesDirPath = path.join(projectDir, 'pages');\n    const maybeSrcPagesDirPath = path.join(projectDir, 'src', 'pages');\n    if (fs.existsSync(maybePagesDirPath) && fs.lstatSync(maybePagesDirPath).isDirectory()) {\n      pagesDirPath = maybePagesDirPath;\n    } else if (fs.existsSync(maybeSrcPagesDirPath) && fs.lstatSync(maybeSrcPagesDirPath).isDirectory()) {\n      pagesDirPath = maybeSrcPagesDirPath;\n    }\n    let appDirPath;\n    const maybeAppDirPath = path.join(projectDir, 'app');\n    const maybeSrcAppDirPath = path.join(projectDir, 'src', 'app');\n    if (fs.existsSync(maybeAppDirPath) && fs.lstatSync(maybeAppDirPath).isDirectory()) {\n      appDirPath = maybeAppDirPath;\n    } else if (fs.existsSync(maybeSrcAppDirPath) && fs.lstatSync(maybeSrcAppDirPath).isDirectory()) {\n      appDirPath = maybeSrcAppDirPath;\n    }\n    const apiRoutesPath = pagesDirPath ? path.join(pagesDirPath, 'api') : undefined;\n    const middlewareLocationFolder = pagesDirPath ? path.join(pagesDirPath, '..') : appDirPath ? path.join(appDirPath, '..') : projectDir;\n\n    // Default page extensions per https://github.com/vercel/next.js/blob/f1dbc9260d48c7995f6c52f8fbcc65f08e627992/packages/next/server/config-shared.ts#L161\n    const pageExtensions = userNextConfig.pageExtensions || ['tsx', 'ts', 'jsx', 'js'];\n    const dotPrefixedPageExtensions = pageExtensions.map(ext => `.${ext}`);\n    const pageExtensionRegex = pageExtensions.map(core.escapeStringForRegex).join('|');\n    const staticWrappingLoaderOptions = {\n      appDir: appDirPath,\n      pagesDir: pagesDirPath,\n      pageExtensionRegex,\n      excludeServerRoutes: userSentryOptions.excludeServerRoutes,\n      nextjsRequestAsyncStorageModulePath: getRequestAsyncStorageModuleLocation(projectDir, _optionalChain([rawNewConfig, 'access', _ => _.resolve, 'optionalAccess', _2 => _2.modules]))\n    };\n    const normalizeLoaderResourcePath = resourcePath => {\n      // `resourcePath` may be an absolute path or a path relative to the context of the webpack config\n      let absoluteResourcePath;\n      if (path.isAbsolute(resourcePath)) {\n        absoluteResourcePath = resourcePath;\n      } else {\n        absoluteResourcePath = path.join(projectDir, resourcePath);\n      }\n      return path.normalize(absoluteResourcePath);\n    };\n    const isPageResource = resourcePath => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return pagesDirPath !== undefined && normalizedAbsoluteResourcePath.startsWith(pagesDirPath + path.sep) && !normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) && dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext));\n    };\n    const isApiRouteResource = resourcePath => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return normalizedAbsoluteResourcePath.startsWith(apiRoutesPath + path.sep) && dotPrefixedPageExtensions.some(ext => normalizedAbsoluteResourcePath.endsWith(ext));\n    };\n    const possibleMiddlewareLocations = pageExtensions.map(middlewareFileEnding => {\n      return path.join(middlewareLocationFolder, `middleware.${middlewareFileEnding}`);\n    });\n    const isMiddlewareResource = resourcePath => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return possibleMiddlewareLocations.includes(normalizedAbsoluteResourcePath);\n    };\n    const isServerComponentResource = resourcePath => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n\n      // \".js, .jsx, or .tsx file extensions can be used for Pages\"\n      // https://beta.nextjs.org/docs/routing/pages-and-layouts#pages:~:text=.js%2C%20.jsx%2C%20or%20.tsx%20file%20extensions%20can%20be%20used%20for%20Pages.\n      return appDirPath !== undefined && normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) && !!normalizedAbsoluteResourcePath.match(\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      new RegExp(`[\\\\\\\\/](page|layout|loading|head|not-found)\\\\.(${pageExtensionRegex})$`));\n    };\n    const isRouteHandlerResource = resourcePath => {\n      const normalizedAbsoluteResourcePath = normalizeLoaderResourcePath(resourcePath);\n      return appDirPath !== undefined && normalizedAbsoluteResourcePath.startsWith(appDirPath + path.sep) && !!normalizedAbsoluteResourcePath.match(\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      new RegExp(`[\\\\\\\\/]route\\\\.(${pageExtensionRegex})$`));\n    };\n    if (isServer && userSentryOptions.autoInstrumentServerFunctions !== false) {\n      // It is very important that we insert our loaders at the beginning of the array because we expect any sort of transformations/transpilations (e.g. TS -> JS) to already have happened.\n\n      // Wrap pages\n      newConfig.module.rules.unshift({\n        test: isPageResource,\n        use: [{\n          loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n          options: {\n            ...staticWrappingLoaderOptions,\n            wrappingTargetKind: 'page'\n          }\n        }]\n      });\n      let vercelCronsConfig = undefined;\n      try {\n        if (process.env.VERCEL && userSentryOptions.automaticVercelMonitors) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          vercelCronsConfig = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'vercel.json'), 'utf8')).crons;\n          if (vercelCronsConfig) {\n            core.logger.info(`${chalk.cyan('info')} - Creating Sentry cron monitors for your Vercel Cron Jobs. You can disable this feature by setting the ${chalk.bold.cyan('automaticVercelMonitors')} option to false in you Next.js config.`);\n          }\n        }\n      } catch (e) {\n        if (e.code === 'ENOENT') ;else {\n          // log but noop\n          core.logger.error(`${chalk.red('error')} - Sentry failed to read vercel.json for automatic cron job monitoring instrumentation`, e);\n        }\n      }\n\n      // Wrap api routes\n      newConfig.module.rules.unshift({\n        test: isApiRouteResource,\n        use: [{\n          loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n          options: {\n            ...staticWrappingLoaderOptions,\n            vercelCronsConfig,\n            wrappingTargetKind: 'api-route'\n          }\n        }]\n      });\n\n      // Wrap middleware\n      if (_nullishCoalesce(userSentryOptions.autoInstrumentMiddleware, () => true)) {\n        newConfig.module.rules.unshift({\n          test: isMiddlewareResource,\n          use: [{\n            loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n            options: {\n              ...staticWrappingLoaderOptions,\n              wrappingTargetKind: 'middleware'\n            }\n          }]\n        });\n      }\n    }\n    if (isServer && userSentryOptions.autoInstrumentAppDirectory !== false) {\n      // Wrap server components\n      newConfig.module.rules.unshift({\n        test: isServerComponentResource,\n        use: [{\n          loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n          options: {\n            ...staticWrappingLoaderOptions,\n            wrappingTargetKind: 'server-component'\n          }\n        }]\n      });\n\n      // Wrap route handlers\n      newConfig.module.rules.unshift({\n        test: isRouteHandlerResource,\n        use: [{\n          loader: path.resolve(__dirname, 'loaders', 'wrappingLoader.js'),\n          options: {\n            ...staticWrappingLoaderOptions,\n            wrappingTargetKind: 'route-handler'\n          }\n        }]\n      });\n    }\n    if (appDirPath) {\n      const hasGlobalErrorFile = pageExtensions.map(extension => `global-error.${extension}`).some(\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      globalErrorFile => fs.existsSync(path.join(appDirPath, globalErrorFile)));\n      if (!hasGlobalErrorFile && !showedMissingGlobalErrorWarningMsg && !process.env.SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING) {\n        // eslint-disable-next-line no-console\n        console.log(`${chalk.yellow('warn')}  - It seems like you don't have a global error handler set up. It is recommended that you add a ${chalk.cyan('global-error.js')} file with Sentry instrumentation so that React rendering errors are reported to Sentry. Read more: https://docs.sentry.io/platforms/javascript/guides/nextjs/manual-setup/#react-render-errors-in-app-router (you can suppress this warning by setting SENTRY_SUPPRESS_GLOBAL_ERROR_HANDLER_FILE_WARNING=1 as environment variable)`);\n        showedMissingGlobalErrorWarningMsg = true;\n      }\n    }\n    if (!isServer) {\n      // Tell webpack to inject the client config files (containing the client-side `Sentry.init()` call) into the appropriate output\n      // bundles. Store a separate reference to the original `entry` value to avoid an infinite loop. (If we don't do\n      // this, we'll have a statement of the form `x.y = () => f(x.y)`, where one of the things `f` does is call `x.y`.\n      // Since we're setting `x.y` to be a callback (which, by definition, won't run until some time later), by the time\n      // the function runs (causing `f` to run, causing `x.y` to run), `x.y` will point to the callback itself, rather\n      // than its original value. So calling it will call the callback which will call `f` which will call `x.y` which\n      // will call the callback which will call `f` which will call `x.y`... and on and on. Theoretically this could also\n      // be fixed by using `bind`, but this is way simpler.)\n      const origEntryProperty = newConfig.entry;\n      newConfig.entry = async () => addSentryToClientEntryProperty(origEntryProperty, buildContext);\n    }\n\n    // We don't want to do any webpack plugin stuff OR any source maps stuff in dev mode.\n    // Symbolication for dev-mode errors is done elsewhere.\n    if (!isDev) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const {\n        sentryWebpackPlugin\n      } = _nullishCoalesce(core.loadModule('@sentry/webpack-plugin'), () => ({}));\n      if (sentryWebpackPlugin) {\n        if (!_optionalChain([userSentryOptions, 'access', _3 => _3.sourcemaps, 'optionalAccess', _4 => _4.disable])) {\n          // TODO(v9): Remove this warning and print warning in case source map deletion is auto configured\n          if (!isServer && !_optionalChain([userSentryOptions, 'access', _5 => _5.sourcemaps, 'optionalAccess', _6 => _6.deleteSourcemapsAfterUpload])) {\n            // eslint-disable-next-line no-console\n            console.warn(\"[@sentry/nextjs] The Sentry SDK has enabled source map generation for your Next.js app. If you don't want to serve Source Maps to your users, either set the `sourcemaps.deleteSourcemapsAfterUpload` option to true, or manually delete the source maps after the build. In future Sentry SDK versions `sourcemaps.deleteSourcemapsAfterUpload` will default to `true`. If you do not want to generate and upload sourcemaps, set the `sourcemaps.disable` option in `withSentryConfig()`.\");\n          }\n\n          // `hidden-source-map` produces the same sourcemaps as `source-map`, but doesn't include the `sourceMappingURL`\n          // comment at the bottom. For folks who aren't publicly hosting their sourcemaps, this is helpful because then\n          // the browser won't look for them and throw errors into the console when it can't find them. Because this is a\n          // front-end-only problem, and because `sentry-cli` handles sourcemaps more reliably with the comment than\n          // without, the option to use `hidden-source-map` only applies to the client-side build.\n          if (isServer || userNextConfig.productionBrowserSourceMaps) {\n            newConfig.devtool = 'source-map';\n          } else {\n            newConfig.devtool = 'hidden-source-map';\n          }\n        }\n        newConfig.plugins = newConfig.plugins || [];\n        const sentryWebpackPluginInstance = sentryWebpackPlugin(webpackPluginOptions.getWebpackPluginOptions(buildContext, userSentryOptions));\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        sentryWebpackPluginInstance._name = 'sentry-webpack-plugin'; // For tests and debugging. Serves no other purpose.\n        newConfig.plugins.push(sentryWebpackPluginInstance);\n      }\n    }\n    if (userSentryOptions.disableLogger) {\n      newConfig.plugins = newConfig.plugins || [];\n      newConfig.plugins.push(new buildContext.webpack.DefinePlugin({\n        __SENTRY_DEBUG__: false\n      }));\n    }\n    return newConfig;\n  };\n}\n\n/**\n * Modify the webpack `entry` property so that the code in `sentry.client.config.js` is\n * included in the the necessary bundles.\n *\n * @param currentEntryProperty The value of the property before Sentry code has been injected\n * @param buildContext Object passed by nextjs containing metadata about the build\n * @returns The value which the new `entry` property (which will be a function) will return (TODO: this should return\n * the function, rather than the function's return value)\n */\nasync function addSentryToClientEntryProperty(currentEntryProperty, buildContext) {\n  // The `entry` entry in a webpack config can be a string, array of strings, object, or function. By default, nextjs\n  // sets it to an async function which returns the promise of an object of string arrays. Because we don't know whether\n  // someone else has come along before us and changed that, we need to check a few things along the way. The one thing\n  // we know is that it won't have gotten *simpler* in form, so we only need to worry about the object and function\n  // options. See https://webpack.js.org/configuration/entry-context/#entry.\n\n  const {\n    dir: projectDir,\n    dev: isDevMode\n  } = buildContext;\n  const newEntryProperty = typeof currentEntryProperty === 'function' ? await currentEntryProperty() : {\n    ...currentEntryProperty\n  };\n  const clientSentryConfigFileName = getClientSentryConfigFile(projectDir);\n\n  // we need to turn the filename into a path so webpack can find it\n  const filesToInject = clientSentryConfigFileName ? [`./${clientSentryConfigFileName}`] : [];\n\n  // inject into all entry points which might contain user's code\n  for (const entryPointName in newEntryProperty) {\n    if (entryPointName === 'pages/_app' ||\n    // entrypoint for `/app` pages\n    entryPointName === 'main-app') {\n      addFilesToWebpackEntryPoint(newEntryProperty, entryPointName, filesToInject, isDevMode);\n    }\n  }\n  return newEntryProperty;\n}\n\n/**\n * Searches for old `sentry.(server|edge).config.ts` files and Next.js instrumentation hooks and warns if there are \"old\"\n * config files and no signs of them inside the instrumentation hook.\n *\n * @param projectDir The root directory of the project, where config files would be located\n * @param platform Either \"server\" or \"edge\", so that we know which file to look for\n */\nfunction warnAboutDeprecatedConfigFiles(projectDir, platform) {\n  const hasInstrumentationHookWithIndicationsOfSentry = [['src', 'instrumentation.ts'], ['src', 'instrumentation.js'], ['instrumentation.ts'], ['instrumentation.js']].some(potentialInstrumentationHookPathSegments => {\n    try {\n      const instrumentationHookContent = fs.readFileSync(path.resolve(projectDir, ...potentialInstrumentationHookPathSegments), {\n        encoding: 'utf-8'\n      });\n      return instrumentationHookContent.includes('@sentry/') || instrumentationHookContent.match(/sentry\\.(server|edge)\\.config(\\.(ts|js))?/);\n    } catch (e) {\n      return false;\n    }\n  });\n  if (hasInstrumentationHookWithIndicationsOfSentry) {\n    return;\n  }\n  for (const filename of [`sentry.${platform}.config.ts`, `sentry.${platform}.config.js`]) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      // eslint-disable-next-line no-console\n      console.warn(`[@sentry/nextjs] It appears you've configured a \\`${filename}\\` file. Please ensure to put this file's content into the \\`register()\\` function of a Next.js instrumentation hook instead. To ensure correct functionality of the SDK, \\`Sentry.init\\` must be called inside \\`instrumentation.ts\\`. Learn more about setting up an instrumentation hook in Next.js: https://nextjs.org/docs/app/building-your-application/optimizing/instrumentation. You can safely delete the \\`${filename}\\` file afterward.`);\n    }\n  }\n}\n\n/**\n * Searches for a `sentry.client.config.ts|js` file and returns its file name if it finds one. (ts being prioritized)\n *\n * @param projectDir The root directory of the project, where config files would be located\n */\nfunction getClientSentryConfigFile(projectDir) {\n  const possibilities = ['sentry.client.config.ts', 'sentry.client.config.js'];\n  for (const filename of possibilities) {\n    if (fs.existsSync(path.resolve(projectDir, filename))) {\n      return filename;\n    }\n  }\n}\n\n/**\n * Add files to a specific element of the given `entry` webpack config property.\n *\n * @param entryProperty The existing `entry` config object\n * @param entryPointName The key where the file should be injected\n * @param filesToInsert An array of paths to the injected files\n */\nfunction addFilesToWebpackEntryPoint(entryProperty, entryPointName, filesToInsert, isDevMode) {\n  // BIG FAT NOTE: Order of insertion seems to matter here. If we insert the new files before the `currentEntrypoint`s,\n  // the Next.js dev server breaks. Because we generally still want the SDK to be initialized as early as possible we\n  // still keep it at the start of the entrypoints if we are not in dev mode.\n\n  // can be a string, array of strings, or object whose `import` property is one of those two\n  const currentEntryPoint = entryProperty[entryPointName];\n  let newEntryPoint = currentEntryPoint;\n  if (typeof currentEntryPoint === 'string' || Array.isArray(currentEntryPoint)) {\n    newEntryPoint = Array.isArray(currentEntryPoint) ? currentEntryPoint : [currentEntryPoint];\n    if (newEntryPoint.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newEntryPoint.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newEntryPoint.unshift(...filesToInsert);\n    }\n  }\n  // descriptor object (webpack 5+)\n  else if (typeof currentEntryPoint === 'object' && 'import' in currentEntryPoint) {\n    const currentImportValue = currentEntryPoint.import;\n    const newImportValue = Array.isArray(currentImportValue) ? currentImportValue : [currentImportValue];\n    if (newImportValue.some(entry => filesToInsert.includes(entry))) {\n      return;\n    }\n    if (isDevMode) {\n      // Inserting at beginning breaks dev mode so we insert at the end\n      newImportValue.push(...filesToInsert);\n    } else {\n      // In other modes we insert at the beginning so that the SDK initializes as early as possible\n      newImportValue.unshift(...filesToInsert);\n    }\n    newEntryPoint = {\n      ...currentEntryPoint,\n      import: newImportValue\n    };\n  }\n  // malformed entry point (use `console.error` rather than `logger.error` because it will always be printed, regardless\n  // of SDK settings)\n  else {\n    // eslint-disable-next-line no-console\n    console.error('Sentry Logger [Error]:', `Could not inject SDK initialization code into entry point ${entryPointName}, as its current value is not in a recognized format.\\n`, 'Expected: string | Array<string> | { [key:string]: any, import: string | Array<string> }\\n', `Got: ${currentEntryPoint}`);\n  }\n  if (newEntryPoint) {\n    entryProperty[entryPointName] = newEntryPoint;\n  }\n}\n\n/**\n * Ensure that `newConfig.module.rules` exists. Modifies the given config in place but also returns it in order to\n * change its type.\n *\n * @param newConfig A webpack config object which may or may not contain `module` and `module.rules`\n * @returns The same object, with an empty `module.rules` array added if necessary\n */\nfunction setUpModuleRules(newConfig) {\n  newConfig.module = {\n    ...newConfig.module,\n    rules: [...(_optionalChain([newConfig, 'access', _7 => _7.module, 'optionalAccess', _8 => _8.rules]) || [])]\n  };\n  // Surprising that we have to assert the type here, since we've demonstrably guaranteed the existence of\n  // `newConfig.module.rules` just above, but ¯\\_(ツ)_/¯\n  return newConfig;\n}\n\n/**\n * Adds loaders to inject values on the global object based on user configuration.\n */\n// TODO(v9): Remove this loader and replace it with a nextConfig.env (https://web.archive.org/web/20240917153554/https://nextjs.org/docs/app/api-reference/next-config-js/env) or define based (https://github.com/vercel/next.js/discussions/71476) approach.\n// In order to remove this loader though we need to make sure the minimum supported Next.js version includes this PR (https://github.com/vercel/next.js/pull/61194), otherwise the nextConfig.env based approach will not work, as our SDK code is not processed by Next.js.\nfunction addValueInjectionLoader(newConfig, userNextConfig, userSentryOptions, buildContext) {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n  const isomorphicValues = {\n    // `rewritesTunnel` set by the user in Next.js config\n    _sentryRewritesTunnelPath: userSentryOptions.tunnelRoute !== undefined && userNextConfig.output !== 'export' ? `${_nullishCoalesce(userNextConfig.basePath, () => '')}${userSentryOptions.tunnelRoute}` : undefined,\n    // The webpack plugin's release injection breaks the `app` directory so we inject the release manually here instead.\n    // Having a release defined in dev-mode spams releases in Sentry so we only set one in non-dev mode\n    SENTRY_RELEASE: buildContext.dev ? undefined : {\n      id: _nullishCoalesce(_optionalChain([userSentryOptions, 'access', _9 => _9.release, 'optionalAccess', _10 => _10.name]), () => node.getSentryRelease(buildContext.buildId))\n    },\n    _sentryBasePath: buildContext.dev ? userNextConfig.basePath : undefined\n  };\n  const serverValues = {\n    ...isomorphicValues,\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: _optionalChain([userNextConfig, 'access', _11 => _11.distDir, 'optionalAccess', _12 => _12.replace, 'call', _13 => _13(/\\\\/g, '\\\\\\\\')]) || '.next'\n  };\n  const clientValues = {\n    ...isomorphicValues,\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '') : ''\n  };\n  if (buildContext.isServer) {\n    newConfig.module.rules.push({\n      // TODO: Find a more bulletproof way of matching. For now this is fine and doesn't hurt anyone. It merely sets some globals.\n      test: /(src[\\\\/])?instrumentation.(js|ts)/,\n      use: [{\n        loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n        options: {\n          values: serverValues\n        }\n      }]\n    });\n  } else {\n    newConfig.module.rules.push({\n      test: /sentry\\.client\\.config\\.(jsx?|tsx?)/,\n      use: [{\n        loader: path.resolve(__dirname, 'loaders/valueInjectionLoader.js'),\n        options: {\n          values: clientValues\n        }\n      }]\n    });\n  }\n}\nfunction resolveNextPackageDirFromDirectory(basedir) {\n  try {\n    return path.dirname(resolve.sync('next/package.json', {\n      basedir\n    }));\n  } catch (e2) {\n    // Should not happen in theory\n    return undefined;\n  }\n}\nconst POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS = [\n// Original location of RequestAsyncStorage\n// https://github.com/vercel/next.js/blob/46151dd68b417e7850146d00354f89930d10b43b/packages/next/src/client/components/request-async-storage.ts\n'next/dist/client/components/request-async-storage.js',\n// Introduced in Next.js 13.4.20\n// https://github.com/vercel/next.js/blob/e1bc270830f2fc2df3542d4ef4c61b916c802df3/packages/next/src/client/components/request-async-storage.external.ts\n'next/dist/client/components/request-async-storage.external.js',\n// Introduced in Next.js 15.0.0-canary.180\n// https://github.com/vercel/next.js/blob/541167b9b0fed6af9f36472e632863ffec41f18c/packages/next/src/server/app-render/work-unit-async-storage.external.ts\n'next/dist/server/app-render/work-unit-async-storage.external.js',\n// Introduced in Next.js 15.0.0-canary.182\n// https://github.com/vercel/next.js/blob/f35159e5e80138ca7373f57b47edcaae3bcf1728/packages/next/src/client/components/work-unit-async-storage.external.ts\n'next/dist/client/components/work-unit-async-storage.external.js'];\nfunction getRequestAsyncStorageModuleLocation(webpackContextDir, webpackResolvableModuleLocations) {\n  if (webpackResolvableModuleLocations === undefined) {\n    return undefined;\n  }\n  const absoluteWebpackResolvableModuleLocations = webpackResolvableModuleLocations.map(loc => path.resolve(webpackContextDir, loc));\n  for (const webpackResolvableLocation of absoluteWebpackResolvableModuleLocations) {\n    const nextPackageDir = resolveNextPackageDirFromDirectory(webpackResolvableLocation);\n    if (nextPackageDir) {\n      const asyncLocalStorageLocation = POTENTIAL_REQUEST_ASYNC_STORAGE_LOCATIONS.find(loc => fs.existsSync(path.join(nextPackageDir, '..', loc)));\n      if (asyncLocalStorageLocation) {\n        return asyncLocalStorageLocation;\n      }\n    }\n  }\n  return undefined;\n}\nfunction addOtelWarningIgnoreRule(newConfig) {\n  const ignoreRules = [\n  // Inspired by @matmannion: https://github.com/getsentry/sentry-javascript/issues/12077#issuecomment-2180307072\n  (warning, compilation) => {\n    // This is wrapped in try-catch because we are vendoring types for this hook and we can't be 100% sure that we are accessing API that is there\n    try {\n      if (!warning.module) {\n        return false;\n      }\n      const isDependencyThatMayRaiseCriticalDependencyMessage = /@opentelemetry\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener)) || /@prisma\\/instrumentation/.test(warning.module.readableIdentifier(compilation.requestShortener));\n      const isCriticalDependencyMessage = /Critical dependency/.test(warning.message);\n      return isDependencyThatMayRaiseCriticalDependencyMessage && isCriticalDependencyMessage;\n    } catch (e3) {\n      return false;\n    }\n  },\n  // We provide these objects in addition to the hook above to provide redundancy in case the hook fails.\n  {\n    module: /@opentelemetry\\/instrumentation/,\n    message: /Critical dependency/\n  }, {\n    module: /@prisma\\/instrumentation/,\n    message: /Critical dependency/\n  }];\n  if (newConfig.ignoreWarnings === undefined) {\n    newConfig.ignoreWarnings = ignoreRules;\n  } else if (Array.isArray(newConfig.ignoreWarnings)) {\n    newConfig.ignoreWarnings.push(...ignoreRules);\n  }\n}\nexports.constructWebpackConfigFunction = constructWebpackConfigFunction;\nexports.getClientSentryConfigFile = getClientSentryConfigFile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpack.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpackPluginOptions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/config/webpackPluginOptions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst path = __webpack_require__(/*! path */ \"path\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(instrument)/./node_modules/@sentry/node/build/cjs/index.js\");\n\n/**\n * Combine default and user-provided SentryWebpackPlugin options, accounting for whether we're building server files or\n * client files.\n */\nfunction getWebpackPluginOptions(buildContext, sentryBuildOptions) {\n  const {\n    buildId,\n    isServer,\n    config: userNextConfig,\n    dir,\n    nextRuntime\n  } = buildContext;\n  const prefixInsert = !isServer ? 'Client' : nextRuntime === 'edge' ? 'Edge' : 'Node.js';\n\n  // We need to convert paths to posix because Glob patterns use `\\` to escape\n  // glob characters. This clashes with Windows path separators.\n  // See: https://www.npmjs.com/package/glob\n  const projectDir = dir.replace(/\\\\/g, '/');\n  // `.next` is the default directory\n  const distDir = _nullishCoalesce(_optionalChain([userNextConfig, 'access', _ => _.distDir, 'optionalAccess', _2 => _2.replace, 'call', _3 => _3(/\\\\/g, '/')]), () => '.next');\n  const distDirAbsPath = path.posix.join(projectDir, distDir);\n  let sourcemapUploadAssets = [];\n  const sourcemapUploadIgnore = [];\n  if (isServer) {\n    sourcemapUploadAssets.push(path.posix.join(distDirAbsPath, 'server', '**'),\n    // This is normally where Next.js outputs things\n    path.posix.join(distDirAbsPath, 'serverless', '**') // This was the output location for serverless Next.js\n    );\n  } else {\n    if (sentryBuildOptions.widenClientFileUpload) {\n      sourcemapUploadAssets.push(path.posix.join(distDirAbsPath, 'static', 'chunks', '**'));\n    } else {\n      sourcemapUploadAssets.push(path.posix.join(distDirAbsPath, 'static', 'chunks', 'pages', '**'), path.posix.join(distDirAbsPath, 'static', 'chunks', 'app', '**'));\n    }\n\n    // TODO: We should think about uploading these when `widenClientFileUpload` is `true`. They may be useful in some situations.\n    sourcemapUploadIgnore.push(path.posix.join(distDirAbsPath, 'static', 'chunks', 'framework-*'), path.posix.join(distDirAbsPath, 'static', 'chunks', 'framework.*'), path.posix.join(distDirAbsPath, 'static', 'chunks', 'main-*'), path.posix.join(distDirAbsPath, 'static', 'chunks', 'polyfills-*'), path.posix.join(distDirAbsPath, 'static', 'chunks', 'webpack-*'));\n  }\n  if (_optionalChain([sentryBuildOptions, 'access', _4 => _4.sourcemaps, 'optionalAccess', _5 => _5.disable])) {\n    sourcemapUploadAssets = [];\n  }\n  return {\n    authToken: sentryBuildOptions.authToken,\n    headers: sentryBuildOptions.headers,\n    org: sentryBuildOptions.org,\n    project: sentryBuildOptions.project,\n    telemetry: sentryBuildOptions.telemetry,\n    debug: sentryBuildOptions.debug,\n    reactComponentAnnotation: {\n      ...sentryBuildOptions.reactComponentAnnotation,\n      ..._optionalChain([sentryBuildOptions, 'access', _6 => _6.unstable_sentryWebpackPluginOptions, 'optionalAccess', _7 => _7.reactComponentAnnotation])\n    },\n    silent: sentryBuildOptions.silent,\n    url: sentryBuildOptions.sentryUrl,\n    sourcemaps: {\n      rewriteSources(source) {\n        if (source.startsWith('webpack://_N_E/')) {\n          return source.replace('webpack://_N_E/', '');\n        } else if (source.startsWith('webpack://')) {\n          return source.replace('webpack://', '');\n        } else {\n          return source;\n        }\n      },\n      assets: _nullishCoalesce(_optionalChain([sentryBuildOptions, 'access', _8 => _8.sourcemaps, 'optionalAccess', _9 => _9.assets]), () => sourcemapUploadAssets),\n      ignore: _nullishCoalesce(_optionalChain([sentryBuildOptions, 'access', _10 => _10.sourcemaps, 'optionalAccess', _11 => _11.ignore]), () => sourcemapUploadIgnore),\n      filesToDeleteAfterUpload: _optionalChain([sentryBuildOptions, 'access', _12 => _12.sourcemaps, 'optionalAccess', _13 => _13.deleteSourcemapsAfterUpload]) ? [\n      // We only care to delete client bundle source maps because they would be the ones being served.\n      // Removing the server source maps crashes Vercel builds for (thus far) unknown reasons:\n      // https://github.com/getsentry/sentry-javascript/issues/13099\n      path.posix.join(distDirAbsPath, 'static', '**', '*.js.map'), path.posix.join(distDirAbsPath, 'static', '**', '*.mjs.map'), path.posix.join(distDirAbsPath, 'static', '**', '*.cjs.map')] : undefined,\n      ..._optionalChain([sentryBuildOptions, 'access', _14 => _14.unstable_sentryWebpackPluginOptions, 'optionalAccess', _15 => _15.sourcemaps])\n    },\n    release: {\n      inject: false,\n      // The webpack plugin's release injection breaks the `app` directory - we inject the release manually with the value injection loader instead.\n      name: _nullishCoalesce(_optionalChain([sentryBuildOptions, 'access', _16 => _16.release, 'optionalAccess', _17 => _17.name]), () => node.getSentryRelease(buildId)),\n      create: _optionalChain([sentryBuildOptions, 'access', _18 => _18.release, 'optionalAccess', _19 => _19.create]),\n      finalize: _optionalChain([sentryBuildOptions, 'access', _20 => _20.release, 'optionalAccess', _21 => _21.finalize]),\n      dist: _optionalChain([sentryBuildOptions, 'access', _22 => _22.release, 'optionalAccess', _23 => _23.dist]),\n      vcsRemote: _optionalChain([sentryBuildOptions, 'access', _24 => _24.release, 'optionalAccess', _25 => _25.vcsRemote]),\n      setCommits: _optionalChain([sentryBuildOptions, 'access', _26 => _26.release, 'optionalAccess', _27 => _27.setCommits]),\n      deploy: _optionalChain([sentryBuildOptions, 'access', _28 => _28.release, 'optionalAccess', _29 => _29.deploy]),\n      ..._optionalChain([sentryBuildOptions, 'access', _30 => _30.unstable_sentryWebpackPluginOptions, 'optionalAccess', _31 => _31.release])\n    },\n    bundleSizeOptimizations: {\n      ...sentryBuildOptions.bundleSizeOptimizations\n    },\n    _metaOptions: {\n      loggerPrefixOverride: `[@sentry/nextjs - ${prefixInsert}]`,\n      telemetry: {\n        metaFramework: 'nextjs'\n      }\n    },\n    ...sentryBuildOptions.unstable_sentryWebpackPluginOptions\n  };\n}\nexports.getWebpackPluginOptions = getWebpackPluginOptions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpackPluginOptions.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst resolve = __webpack_require__(/*! resolve */ \"(instrument)/./node_modules/resolve/index.js\");\nconst webpack = __webpack_require__(/*! ./webpack.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/webpack.js\");\n\n/* eslint-disable complexity */\n\nlet showedExportModeTunnelWarning = false;\n\n/**\n * Modifies the passed in Next.js configuration with automatic build-time instrumentation and source map upload.\n *\n * @param nextConfig A Next.js configuration object, as usually exported in `next.config.js` or `next.config.mjs`.\n * @param sentryBuildOptions Additional options to configure instrumentation and\n * @returns The modified config to be exported\n */\n// TODO(v9): Always return an async function here to allow us to do async things like grabbing a deterministic build ID.\nfunction withSentryConfig(nextConfig, sentryBuildOptions = {}) {\n  const castNextConfig = nextConfig || {};\n  if (typeof castNextConfig === 'function') {\n    return function (...webpackConfigFunctionArgs) {\n      const maybePromiseNextConfig = castNextConfig.apply(this, webpackConfigFunctionArgs);\n      if (core.isThenable(maybePromiseNextConfig)) {\n        return maybePromiseNextConfig.then(promiseResultNextConfig => {\n          return getFinalConfigObject(promiseResultNextConfig, sentryBuildOptions);\n        });\n      }\n      return getFinalConfigObject(maybePromiseNextConfig, sentryBuildOptions);\n    };\n  } else {\n    return getFinalConfigObject(castNextConfig, sentryBuildOptions);\n  }\n}\n\n// Modify the materialized object form of the user's next config by deleting the `sentry` property and wrapping the\n// `webpack` property\nfunction getFinalConfigObject(incomingUserNextConfigObject, userSentryOptions) {\n  // TODO(v9): Remove this check for the Sentry property\n  if ('sentry' in incomingUserNextConfigObject) {\n    // eslint-disable-next-line no-console\n    console.warn('[@sentry/nextjs] Setting a `sentry` property on the Next.js config object as a means of configuration is no longer supported. Please use the `sentryBuildOptions` argument of of the `withSentryConfig()` function instead.');\n\n    // Next 12.2.3+ warns about non-canonical properties on `userNextConfig`.\n    delete incomingUserNextConfigObject.sentry;\n  }\n  if (_optionalChain([userSentryOptions, 'optionalAccess', _ => _.tunnelRoute])) {\n    if (incomingUserNextConfigObject.output === 'export') {\n      if (!showedExportModeTunnelWarning) {\n        showedExportModeTunnelWarning = true;\n        // eslint-disable-next-line no-console\n        console.warn('[@sentry/nextjs] The Sentry Next.js SDK `tunnelRoute` option will not work in combination with Next.js static exports. The `tunnelRoute` option uses serverside features that cannot be accessed in export mode. If you still want to tunnel Sentry events, set up your own tunnel: https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option');\n      }\n    } else {\n      setUpTunnelRewriteRules(incomingUserNextConfigObject, userSentryOptions.tunnelRoute);\n    }\n  }\n  setUpBuildTimeVariables(incomingUserNextConfigObject, userSentryOptions);\n  const nextJsVersion = getNextjsVersion();\n\n  // Add the `clientTraceMetadata` experimental option based on Next.js version. The option got introduced in Next.js version 15.0.0 (actually 14.3.0-canary.64).\n  // Adding the option on lower versions will cause Next.js to print nasty warnings we wouldn't confront our users with.\n  if (nextJsVersion) {\n    const {\n      major,\n      minor\n    } = core.parseSemver(nextJsVersion);\n    if (major !== undefined && minor !== undefined && (major >= 15 || major === 14 && minor >= 3)) {\n      incomingUserNextConfigObject.experimental = incomingUserNextConfigObject.experimental || {};\n      incomingUserNextConfigObject.experimental.clientTraceMetadata = ['baggage', 'sentry-trace', ...(_optionalChain([incomingUserNextConfigObject, 'access', _2 => _2.experimental, 'optionalAccess', _3 => _3.clientTraceMetadata]) || [])];\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(\"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, please add `experimental.clientTraceMetadata: ['sentry-trace', 'baggage']` to your Next.js config to enable pageload tracing for App Router.\");\n  }\n\n  // From Next.js version (15.0.0-canary.124) onwards, Next.js does no longer require the `experimental.instrumentationHook` option and will\n  // print a warning when it is set, so we need to conditionally provide it for lower versions.\n  if (nextJsVersion) {\n    const {\n      major,\n      minor,\n      patch,\n      prerelease\n    } = core.parseSemver(nextJsVersion);\n    const isFullySupportedRelease = major !== undefined && minor !== undefined && patch !== undefined && major >= 15 && (minor === 0 && patch === 0 && prerelease === undefined || minor > 0 || patch > 0);\n    const isSupportedV15Rc = major !== undefined && minor !== undefined && patch !== undefined && prerelease !== undefined && major === 15 && minor === 0 && patch === 0 && prerelease.startsWith('rc.') && parseInt(prerelease.split('.')[1] || '', 10) > 0;\n    const isSupportedCanary = minor !== undefined && patch !== undefined && prerelease !== undefined && major === 15 && minor === 0 && patch === 0 && prerelease.startsWith('canary.') && parseInt(prerelease.split('.')[1] || '', 10) >= 124;\n    if (!isFullySupportedRelease && !isSupportedV15Rc && !isSupportedCanary) {\n      if (_optionalChain([incomingUserNextConfigObject, 'access', _4 => _4.experimental, 'optionalAccess', _5 => _5.instrumentationHook]) === false) {\n        // eslint-disable-next-line no-console\n        console.warn('[@sentry/nextjs] You turned off the `experimental.instrumentationHook` option. Note that Sentry will not be initialized if you did not set it up inside `instrumentation.(js|ts)`.');\n      }\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental\n      };\n    }\n  } else {\n    // If we cannot detect a Next.js version for whatever reason, the sensible default is to set the `experimental.instrumentationHook`, even though it may create a warning.\n    if (incomingUserNextConfigObject.experimental && 'instrumentationHook' in incomingUserNextConfigObject.experimental) {\n      if (incomingUserNextConfigObject.experimental.instrumentationHook === false) {\n        // eslint-disable-next-line no-console\n        console.warn('[@sentry/nextjs] You set `experimental.instrumentationHook` to `false`. If you are using Next.js version 15 or greater, you can remove that option. If you are using Next.js version 14 or lower, you need to set `experimental.instrumentationHook` in your `next.config.(js|mjs)` to `true` for the SDK to be properly initialized in combination with `instrumentation.(js|ts)`.');\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.log(\"[@sentry/nextjs] The Sentry SDK was not able to determine your Next.js version. If you are using Next.js version 15 or greater, Next.js will probably show you a warning about the `experimental.instrumentationHook` being set. To silence Next.js' warning, explicitly set the `experimental.instrumentationHook` option in your `next.config.(js|mjs|ts)` to `undefined`. If you are on Next.js version 14 or lower, you can silence this particular warning by explicitly setting the `experimental.instrumentationHook` option in your `next.config.(js|mjs)` to `true`.\");\n      incomingUserNextConfigObject.experimental = {\n        instrumentationHook: true,\n        ...incomingUserNextConfigObject.experimental\n      };\n    }\n  }\n  if (false) {}\n  return {\n    ...incomingUserNextConfigObject,\n    webpack: webpack.constructWebpackConfigFunction(incomingUserNextConfigObject, userSentryOptions)\n  };\n}\n\n/**\n * Injects rewrite rules into the Next.js config provided by the user to tunnel\n * requests from the `tunnelPath` to Sentry.\n *\n * See https://nextjs.org/docs/api-reference/next.config.js/rewrites.\n */\nfunction setUpTunnelRewriteRules(userNextConfig, tunnelPath) {\n  const originalRewrites = userNextConfig.rewrites;\n\n  // This function doesn't take any arguments at the time of writing but we future-proof\n  // here in case Next.js ever decides to pass some\n  userNextConfig.rewrites = async (...args) => {\n    const tunnelRouteRewrite = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [{\n        type: 'query',\n        key: 'o',\n        // short for orgId - we keep it short so matching is harder for ad-blockers\n        value: '(?<orgid>\\\\d*)'\n      }, {\n        type: 'query',\n        key: 'p',\n        // short for projectId - we keep it short so matching is harder for ad-blockers\n        value: '(?<projectid>\\\\d*)'\n      }],\n      destination: 'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0'\n    };\n    const tunnelRouteRewriteWithRegion = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]?r=[region]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [{\n        type: 'query',\n        key: 'o',\n        // short for orgId - we keep it short so matching is harder for ad-blockers\n        value: '(?<orgid>\\\\d*)'\n      }, {\n        type: 'query',\n        key: 'p',\n        // short for projectId - we keep it short so matching is harder for ad-blockers\n        value: '(?<projectid>\\\\d*)'\n      }, {\n        type: 'query',\n        key: 'r',\n        // short for region - we keep it short so matching is harder for ad-blockers\n        value: '(?<region>[a-z]{2})'\n      }],\n      destination: 'https://o:orgid.ingest.:region.sentry.io/api/:projectid/envelope/?hsts=0'\n    };\n\n    // Order of these is important, they get applied first to last.\n    const newRewrites = [tunnelRouteRewriteWithRegion, tunnelRouteRewrite];\n    if (typeof originalRewrites !== 'function') {\n      return newRewrites;\n    }\n\n    // @ts-expect-error Expected 0 arguments but got 1 - this is from the future-proofing mentioned above, so we don't care about it\n    const originalRewritesResult = await originalRewrites(...args);\n    if (Array.isArray(originalRewritesResult)) {\n      return [...newRewrites, ...originalRewritesResult];\n    } else {\n      return {\n        ...originalRewritesResult,\n        beforeFiles: [...newRewrites, ...(originalRewritesResult.beforeFiles || [])]\n      };\n    }\n  };\n}\n\n// TODO(v9): Inject the release into all the bundles. This is breaking because grabbing the build ID if the user provides\n// it in `generateBuildId` (https://nextjs.org/docs/app/api-reference/next-config-js/generateBuildId) is async but we do\n// not turn the next config function in the type it was passed.\nfunction setUpBuildTimeVariables(userNextConfig, userSentryOptions) {\n  const assetPrefix = userNextConfig.assetPrefix || userNextConfig.basePath || '';\n  const basePath = _nullishCoalesce(userNextConfig.basePath, () => '');\n  const rewritesTunnelPath = userSentryOptions.tunnelRoute !== undefined && userNextConfig.output !== 'export' ? `${basePath}${userSentryOptions.tunnelRoute}` : undefined;\n  const buildTimeVariables = {\n    // Make sure that if we have a windows path, the backslashes are interpreted as such (rather than as escape\n    // characters)\n    _sentryRewriteFramesDistDir: _optionalChain([userNextConfig, 'access', _6 => _6.distDir, 'optionalAccess', _7 => _7.replace, 'call', _8 => _8(/\\\\/g, '\\\\\\\\')]) || '.next',\n    // Get the path part of `assetPrefix`, minus any trailing slash. (We use a placeholder for the origin if\n    // `assetPrefix` doesn't include one. Since we only care about the path, it doesn't matter what it is.)\n    _sentryRewriteFramesAssetPrefixPath: assetPrefix ? new URL(assetPrefix, 'http://dogs.are.great').pathname.replace(/\\/$/, '') : ''\n  };\n  if (rewritesTunnelPath) {\n    buildTimeVariables._sentryRewritesTunnelPath = rewritesTunnelPath;\n  }\n  if (basePath) {\n    buildTimeVariables._sentryBasePath = basePath;\n  }\n  if (typeof userNextConfig.env === 'object') {\n    userNextConfig.env = {\n      ...buildTimeVariables,\n      ...userNextConfig.env\n    };\n  } else if (userNextConfig.env === undefined) {\n    userNextConfig.env = buildTimeVariables;\n  }\n}\nfunction getNextjsVersion() {\n  const nextjsPackageJsonPath = resolveNextjsPackageJson();\n  if (nextjsPackageJsonPath) {\n    try {\n      const nextjsPackageJson = JSON.parse(fs.readFileSync(nextjsPackageJsonPath, {\n        encoding: 'utf-8'\n      }));\n      return nextjsPackageJson.version;\n    } catch (e) {\n      // noop\n    }\n  }\n  return undefined;\n}\nfunction resolveNextjsPackageJson() {\n  try {\n    return resolve.sync('next/package.json', {\n      basedir: process.cwd()\n    });\n  } catch (e2) {\n    return undefined;\n  }\n}\nexports.withSentryConfig = withSentryConfig;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvd2l0aFNlbnRyeUNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLElBQUk7RUFDRkEsZ0JBQWdCO0VBQ2hCQztBQUNGLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBRTNCQyw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLElBQUksR0FBR0wsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBQ3BDLE1BQU1NLEVBQUUsR0FBR04sbUJBQU8sQ0FBQyxjQUFJLENBQUM7QUFDeEIsTUFBTU8sT0FBTyxHQUFHUCxtQkFBTyxDQUFDLDZEQUFTLENBQUM7QUFDbEMsTUFBTVEsT0FBTyxHQUFHUixtQkFBTyxDQUFDLDRGQUFjLENBQUM7O0FBRXZDOztBQUVBLElBQUlTLDZCQUE2QixHQUFHLEtBQUs7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxnQkFBZ0JBLENBQUNDLFVBQVUsRUFBRUMsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDN0QsTUFBTUMsY0FBYyxHQUFJRixVQUFVLElBQU0sQ0FBQyxDQUFDO0VBQzFDLElBQUksT0FBT0UsY0FBYyxLQUFLLFVBQVUsRUFBRTtJQUN4QyxPQUFPLFVBQVcsR0FBR0MseUJBQXlCLEVBQUU7TUFDOUMsTUFBTUMsc0JBQXNCLEdBQUdGLGNBQWMsQ0FBQ0csS0FBSyxDQUNqRCxJQUFJLEVBQ0pGLHlCQUNGLENBQUM7TUFFRCxJQUFJVCxJQUFJLENBQUNZLFVBQVUsQ0FBQ0Ysc0JBQXNCLENBQUMsRUFBRTtRQUMzQyxPQUFPQSxzQkFBc0IsQ0FBQ0csSUFBSSxDQUFDQyx1QkFBdUIsSUFBSTtVQUM1RCxPQUFPQyxvQkFBb0IsQ0FBQ0QsdUJBQXVCLEVBQUVQLGtCQUFrQixDQUFDO1FBQzFFLENBQUMsQ0FBQztNQUNKO01BRUEsT0FBT1Esb0JBQW9CLENBQUNMLHNCQUFzQixFQUFFSCxrQkFBa0IsQ0FBQztJQUN6RSxDQUFDO0VBQ0gsQ0FBQyxNQUFNO0lBQ0wsT0FBT1Esb0JBQW9CLENBQUNQLGNBQWMsRUFBRUQsa0JBQWtCLENBQUM7RUFDakU7QUFDRjs7QUFFQTtBQUNBO0FBQ0EsU0FBU1Esb0JBQW9CQSxDQUMzQkMsNEJBQTRCLEVBQzVCQyxpQkFBaUIsRUFDakI7RUFDQTtFQUNBLElBQUksUUFBUSxJQUFJRCw0QkFBNEIsRUFBRTtJQUM1QztJQUNBRSxPQUFPLENBQUNDLElBQUksQ0FDViw2TkFDRixDQUFDOztJQUVEO0lBQ0EsT0FBT0gsNEJBQTRCLENBQUNJLE1BQU07RUFDNUM7RUFFQSxJQUFJMUIsY0FBYyxDQUFDLENBQUN1QixpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRUksQ0FBQyxJQUFJQSxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDLEVBQUU7SUFDN0UsSUFBSU4sNEJBQTRCLENBQUNPLE1BQU0sS0FBSyxRQUFRLEVBQUU7TUFDcEQsSUFBSSxDQUFDbkIsNkJBQTZCLEVBQUU7UUFDbENBLDZCQUE2QixHQUFHLElBQUk7UUFDcEM7UUFDQWMsT0FBTyxDQUFDQyxJQUFJLENBQ1YsMFdBQ0YsQ0FBQztNQUNIO0lBQ0YsQ0FBQyxNQUFNO01BQ0xLLHVCQUF1QixDQUFDUiw0QkFBNEIsRUFBRUMsaUJBQWlCLENBQUNLLFdBQVcsQ0FBQztJQUN0RjtFQUNGO0VBRUFHLHVCQUF1QixDQUFDVCw0QkFBNEIsRUFBRUMsaUJBQWlCLENBQUM7RUFFeEUsTUFBTVMsYUFBYSxHQUFHQyxnQkFBZ0IsQ0FBQyxDQUFDOztFQUV4QztFQUNBO0VBQ0EsSUFBSUQsYUFBYSxFQUFFO0lBQ2pCLE1BQU07TUFBRUUsS0FBSztNQUFFQztJQUFNLENBQUMsR0FBRzdCLElBQUksQ0FBQzhCLFdBQVcsQ0FBQ0osYUFBYSxDQUFDO0lBQ3hELElBQUlFLEtBQUssS0FBS0csU0FBUyxJQUFJRixLQUFLLEtBQUtFLFNBQVMsS0FBS0gsS0FBSyxJQUFJLEVBQUUsSUFBS0EsS0FBSyxLQUFLLEVBQUUsSUFBSUMsS0FBSyxJQUFJLENBQUUsQ0FBQyxFQUFFO01BQy9GYiw0QkFBNEIsQ0FBQ2dCLFlBQVksR0FBR2hCLDRCQUE0QixDQUFDZ0IsWUFBWSxJQUFJLENBQUMsQ0FBQztNQUMzRmhCLDRCQUE0QixDQUFDZ0IsWUFBWSxDQUFDQyxtQkFBbUIsR0FBRyxDQUM5RCxTQUFTLEVBQ1QsY0FBYyxFQUNkLElBQUl2QyxjQUFjLENBQUMsQ0FBQ3NCLDRCQUE0QixFQUFFLFFBQVEsRUFBRWtCLEVBQUUsSUFBSUEsRUFBRSxDQUFDRixZQUFZLEVBQUUsZ0JBQWdCLEVBQUVHLEVBQUUsSUFBSUEsRUFBRSxDQUFDRixtQkFBbUIsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQzNJO0lBQ0g7RUFDRixDQUFDLE1BQU07SUFDTDtJQUNBZixPQUFPLENBQUNrQixHQUFHLENBQ1QsOFFBQ0YsQ0FBQztFQUNIOztFQUVBO0VBQ0E7RUFDQSxJQUFJVixhQUFhLEVBQUU7SUFDakIsTUFBTTtNQUFFRSxLQUFLO01BQUVDLEtBQUs7TUFBRVEsS0FBSztNQUFFQztJQUFXLENBQUMsR0FBR3RDLElBQUksQ0FBQzhCLFdBQVcsQ0FBQ0osYUFBYSxDQUFDO0lBQzNFLE1BQU1hLHVCQUF1QixHQUMzQlgsS0FBSyxLQUFLRyxTQUFTLElBQ25CRixLQUFLLEtBQUtFLFNBQVMsSUFDbkJNLEtBQUssS0FBS04sU0FBUyxJQUNuQkgsS0FBSyxJQUFJLEVBQUUsS0FDVEMsS0FBSyxLQUFLLENBQUMsSUFBSVEsS0FBSyxLQUFLLENBQUMsSUFBSUMsVUFBVSxLQUFLUCxTQUFTLElBQUtGLEtBQUssR0FBRyxDQUFDLElBQUlRLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDdEYsTUFBTUcsZ0JBQWdCLEdBQ3BCWixLQUFLLEtBQUtHLFNBQVMsSUFDbkJGLEtBQUssS0FBS0UsU0FBUyxJQUNuQk0sS0FBSyxLQUFLTixTQUFTLElBQ25CTyxVQUFVLEtBQUtQLFNBQVMsSUFDeEJILEtBQUssS0FBSyxFQUFFLElBQ1pDLEtBQUssS0FBSyxDQUFDLElBQ1hRLEtBQUssS0FBSyxDQUFDLElBQ1hDLFVBQVUsQ0FBQ0csVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUM1QkMsUUFBUSxDQUFDSixVQUFVLENBQUNLLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUNsRCxNQUFNQyxpQkFBaUIsR0FDckJmLEtBQUssS0FBS0UsU0FBUyxJQUNuQk0sS0FBSyxLQUFLTixTQUFTLElBQ25CTyxVQUFVLEtBQUtQLFNBQVMsSUFDeEJILEtBQUssS0FBSyxFQUFFLElBQ1pDLEtBQUssS0FBSyxDQUFDLElBQ1hRLEtBQUssS0FBSyxDQUFDLElBQ1hDLFVBQVUsQ0FBQ0csVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUNoQ0MsUUFBUSxDQUFDSixVQUFVLENBQUNLLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksR0FBRztJQUVyRCxJQUFJLENBQUNKLHVCQUF1QixJQUFJLENBQUNDLGdCQUFnQixJQUFJLENBQUNJLGlCQUFpQixFQUFFO01BQ3ZFLElBQUlsRCxjQUFjLENBQUMsQ0FBQ3NCLDRCQUE0QixFQUFFLFFBQVEsRUFBRTZCLEVBQUUsSUFBSUEsRUFBRSxDQUFDYixZQUFZLEVBQUUsZ0JBQWdCLEVBQUVjLEVBQUUsSUFBSUEsRUFBRSxDQUFDQyxtQkFBbUIsQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO1FBQzdJO1FBQ0E3QixPQUFPLENBQUNDLElBQUksQ0FDVixvTEFDRixDQUFDO01BQ0g7TUFDQUgsNEJBQTRCLENBQUNnQixZQUFZLEdBQUc7UUFDMUNlLG1CQUFtQixFQUFFLElBQUk7UUFDekIsR0FBRy9CLDRCQUE0QixDQUFDZ0I7TUFDbEMsQ0FBQztJQUNIO0VBQ0YsQ0FBQyxNQUFNO0lBQ0w7SUFDQSxJQUNFaEIsNEJBQTRCLENBQUNnQixZQUFZLElBQ3pDLHFCQUFxQixJQUFJaEIsNEJBQTRCLENBQUNnQixZQUFZLEVBQ2xFO01BQ0EsSUFBSWhCLDRCQUE0QixDQUFDZ0IsWUFBWSxDQUFDZSxtQkFBbUIsS0FBSyxLQUFLLEVBQUU7UUFDM0U7UUFDQTdCLE9BQU8sQ0FBQ0MsSUFBSSxDQUNWLHFYQUNGLENBQUM7TUFDSDtJQUNGLENBQUMsTUFBTTtNQUNMO01BQ0FELE9BQU8sQ0FBQ2tCLEdBQUcsQ0FDVCwraUJBQ0YsQ0FBQztNQUNEcEIsNEJBQTRCLENBQUNnQixZQUFZLEdBQUc7UUFDMUNlLG1CQUFtQixFQUFFLElBQUk7UUFDekIsR0FBRy9CLDRCQUE0QixDQUFDZ0I7TUFDbEMsQ0FBQztJQUNIO0VBQ0Y7RUFFQSxJQUFJZ0IsS0FBdUUsRUFBRSxFQVM1RTtFQUVELE9BQU87SUFDTCxHQUFHaEMsNEJBQTRCO0lBQy9CYixPQUFPLEVBQUVBLE9BQU8sQ0FBQ2lELDhCQUE4QixDQUFDcEMsNEJBQTRCLEVBQUVDLGlCQUFpQjtFQUNqRyxDQUFDO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU08sdUJBQXVCQSxDQUFDNkIsY0FBYyxFQUFFQyxVQUFVLEVBQUU7RUFDM0QsTUFBTUMsZ0JBQWdCLEdBQUdGLGNBQWMsQ0FBQ0csUUFBUTs7RUFFaEQ7RUFDQTtFQUNBSCxjQUFjLENBQUNHLFFBQVEsR0FBRyxPQUFPLEdBQUdDLElBQUksS0FBSztJQUMzQyxNQUFNQyxrQkFBa0IsR0FBRztNQUN6QjtNQUNBO01BQ0FDLE1BQU0sRUFBRyxHQUFFTCxVQUFXLE1BQUs7TUFDM0JNLEdBQUcsRUFBRSxDQUNIO1FBQ0VDLElBQUksRUFBRSxPQUFPO1FBQ2JDLEdBQUcsRUFBRSxHQUFHO1FBQUU7UUFDVi9ELEtBQUssRUFBRTtNQUNULENBQUMsRUFDRDtRQUNFOEQsSUFBSSxFQUFFLE9BQU87UUFDYkMsR0FBRyxFQUFFLEdBQUc7UUFBRTtRQUNWL0QsS0FBSyxFQUFFO01BQ1QsQ0FBQyxDQUNGO01BQ0RnRSxXQUFXLEVBQUU7SUFDZixDQUFDO0lBRUQsTUFBTUMsNEJBQTRCLEdBQUc7TUFDbkM7TUFDQTtNQUNBTCxNQUFNLEVBQUcsR0FBRUwsVUFBVyxNQUFLO01BQzNCTSxHQUFHLEVBQUUsQ0FDSDtRQUNFQyxJQUFJLEVBQUUsT0FBTztRQUNiQyxHQUFHLEVBQUUsR0FBRztRQUFFO1FBQ1YvRCxLQUFLLEVBQUU7TUFDVCxDQUFDLEVBQ0Q7UUFDRThELElBQUksRUFBRSxPQUFPO1FBQ2JDLEdBQUcsRUFBRSxHQUFHO1FBQUU7UUFDVi9ELEtBQUssRUFBRTtNQUNULENBQUMsRUFDRDtRQUNFOEQsSUFBSSxFQUFFLE9BQU87UUFDYkMsR0FBRyxFQUFFLEdBQUc7UUFBRTtRQUNWL0QsS0FBSyxFQUFFO01BQ1QsQ0FBQyxDQUNGO01BQ0RnRSxXQUFXLEVBQUU7SUFDZixDQUFDOztJQUVEO0lBQ0EsTUFBTUUsV0FBVyxHQUFHLENBQUNELDRCQUE0QixFQUFFTixrQkFBa0IsQ0FBQztJQUV0RSxJQUFJLE9BQU9ILGdCQUFnQixLQUFLLFVBQVUsRUFBRTtNQUMxQyxPQUFPVSxXQUFXO0lBQ3BCOztJQUVBO0lBQ0EsTUFBTUMsc0JBQXNCLEdBQUcsTUFBTVgsZ0JBQWdCLENBQUMsR0FBR0UsSUFBSSxDQUFDO0lBRTlELElBQUlVLEtBQUssQ0FBQ0MsT0FBTyxDQUFDRixzQkFBc0IsQ0FBQyxFQUFFO01BQ3pDLE9BQU8sQ0FBQyxHQUFHRCxXQUFXLEVBQUUsR0FBR0Msc0JBQXNCLENBQUM7SUFDcEQsQ0FBQyxNQUFNO01BQ0wsT0FBTztRQUNMLEdBQUdBLHNCQUFzQjtRQUN6QkcsV0FBVyxFQUFFLENBQUMsR0FBR0osV0FBVyxFQUFFLElBQUlDLHNCQUFzQixDQUFDRyxXQUFXLElBQUksRUFBRSxDQUFDO01BQzdFLENBQUM7SUFDSDtFQUNGLENBQUM7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTNUMsdUJBQXVCQSxDQUFDNEIsY0FBYyxFQUFFcEMsaUJBQWlCLEVBQUU7RUFDbEUsTUFBTXFELFdBQVcsR0FBR2pCLGNBQWMsQ0FBQ2lCLFdBQVcsSUFBSWpCLGNBQWMsQ0FBQ2tCLFFBQVEsSUFBSSxFQUFFO0VBQy9FLE1BQU1BLFFBQVEsR0FBRzlFLGdCQUFnQixDQUFDNEQsY0FBYyxDQUFDa0IsUUFBUSxFQUFFLE1BQVEsRUFBRyxDQUFDO0VBQ3ZFLE1BQU1DLGtCQUFrQixHQUN0QnZELGlCQUFpQixDQUFDSyxXQUFXLEtBQUtTLFNBQVMsSUFBSXNCLGNBQWMsQ0FBQzlCLE1BQU0sS0FBSyxRQUFRLEdBQzVFLEdBQUVnRCxRQUFTLEdBQUV0RCxpQkFBaUIsQ0FBQ0ssV0FBWSxFQUFDLEdBQzdDUyxTQUFTO0VBRWYsTUFBTTBDLGtCQUFrQixHQUFHO0lBQ3pCO0lBQ0E7SUFDQUMsMkJBQTJCLEVBQUVoRixjQUFjLENBQUMsQ0FBQzJELGNBQWMsRUFBRSxRQUFRLEVBQUVzQixFQUFFLElBQUlBLEVBQUUsQ0FBQ0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFQyxFQUFFLElBQUlBLEVBQUUsQ0FBQ0MsT0FBTyxFQUFFLE1BQU0sRUFBRUMsRUFBRSxJQUFJQSxFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPO0lBQ3pLO0lBQ0E7SUFDQUMsbUNBQW1DLEVBQUVWLFdBQVcsR0FDNUMsSUFBSVcsR0FBRyxDQUFDWCxXQUFXLEVBQUUsdUJBQXVCLENBQUMsQ0FBQ1ksUUFBUSxDQUFDSixPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxHQUN6RTtFQUNOLENBQUM7RUFFRCxJQUFJTixrQkFBa0IsRUFBRTtJQUN0QkMsa0JBQWtCLENBQUNVLHlCQUF5QixHQUFHWCxrQkFBa0I7RUFDbkU7RUFFQSxJQUFJRCxRQUFRLEVBQUU7SUFDWkUsa0JBQWtCLENBQUNXLGVBQWUsR0FBR2IsUUFBUTtFQUMvQztFQUVBLElBQUksT0FBT2xCLGNBQWMsQ0FBQ0osR0FBRyxLQUFLLFFBQVEsRUFBRTtJQUMxQ0ksY0FBYyxDQUFDSixHQUFHLEdBQUc7TUFBRSxHQUFHd0Isa0JBQWtCO01BQUUsR0FBR3BCLGNBQWMsQ0FBQ0o7SUFBSSxDQUFDO0VBQ3ZFLENBQUMsTUFBTSxJQUFJSSxjQUFjLENBQUNKLEdBQUcsS0FBS2xCLFNBQVMsRUFBRTtJQUMzQ3NCLGNBQWMsQ0FBQ0osR0FBRyxHQUFHd0Isa0JBQWtCO0VBQ3pDO0FBQ0Y7QUFFQSxTQUFTOUMsZ0JBQWdCQSxDQUFBLEVBQUc7RUFDMUIsTUFBTTBELHFCQUFxQixHQUFHQyx3QkFBd0IsQ0FBQyxDQUFDO0VBQ3hELElBQUlELHFCQUFxQixFQUFFO0lBQ3pCLElBQUk7TUFDRixNQUFNRSxpQkFBaUIsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQ2xDeEYsRUFBRSxDQUFDeUYsWUFBWSxDQUFDTCxxQkFBcUIsRUFBRTtRQUFFTSxRQUFRLEVBQUU7TUFBUSxDQUFDLENBQzlELENBQUM7TUFDRCxPQUFPSixpQkFBaUIsQ0FBQ0ssT0FBTztJQUNsQyxDQUFDLENBQUMsT0FBT0MsQ0FBQyxFQUFFO01BQ1Y7SUFBQTtFQUVKO0VBRUEsT0FBTzlELFNBQVM7QUFDbEI7QUFFQSxTQUFTdUQsd0JBQXdCQSxDQUFBLEVBQUc7RUFDbEMsSUFBSTtJQUNGLE9BQU9wRixPQUFPLENBQUM0RixJQUFJLENBQUMsbUJBQW1CLEVBQUU7TUFBRUMsT0FBTyxFQUFFL0MsT0FBTyxDQUFDZ0QsR0FBRyxDQUFDO0lBQUUsQ0FBQyxDQUFDO0VBQ3RFLENBQUMsQ0FBQyxPQUFPQyxFQUFFLEVBQUU7SUFDWCxPQUFPbEUsU0FBUztFQUNsQjtBQUNGO0FBRUFqQyx3QkFBd0IsR0FBR08sZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb25maWcvd2l0aFNlbnRyeUNvbmZpZy5qcz85ODE1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9udWxsaXNoQ29hbGVzY2UsXG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHJlc29sdmUgPSByZXF1aXJlKCdyZXNvbHZlJyk7XG5jb25zdCB3ZWJwYWNrID0gcmVxdWlyZSgnLi93ZWJwYWNrLmpzJyk7XG5cbi8qIGVzbGludC1kaXNhYmxlIGNvbXBsZXhpdHkgKi9cblxubGV0IHNob3dlZEV4cG9ydE1vZGVUdW5uZWxXYXJuaW5nID0gZmFsc2U7XG5cbi8qKlxuICogTW9kaWZpZXMgdGhlIHBhc3NlZCBpbiBOZXh0LmpzIGNvbmZpZ3VyYXRpb24gd2l0aCBhdXRvbWF0aWMgYnVpbGQtdGltZSBpbnN0cnVtZW50YXRpb24gYW5kIHNvdXJjZSBtYXAgdXBsb2FkLlxuICpcbiAqIEBwYXJhbSBuZXh0Q29uZmlnIEEgTmV4dC5qcyBjb25maWd1cmF0aW9uIG9iamVjdCwgYXMgdXN1YWxseSBleHBvcnRlZCBpbiBgbmV4dC5jb25maWcuanNgIG9yIGBuZXh0LmNvbmZpZy5tanNgLlxuICogQHBhcmFtIHNlbnRyeUJ1aWxkT3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnMgdG8gY29uZmlndXJlIGluc3RydW1lbnRhdGlvbiBhbmRcbiAqIEByZXR1cm5zIFRoZSBtb2RpZmllZCBjb25maWcgdG8gYmUgZXhwb3J0ZWRcbiAqL1xuLy8gVE9ETyh2OSk6IEFsd2F5cyByZXR1cm4gYW4gYXN5bmMgZnVuY3Rpb24gaGVyZSB0byBhbGxvdyB1cyB0byBkbyBhc3luYyB0aGluZ3MgbGlrZSBncmFiYmluZyBhIGRldGVybWluaXN0aWMgYnVpbGQgSUQuXG5mdW5jdGlvbiB3aXRoU2VudHJ5Q29uZmlnKG5leHRDb25maWcsIHNlbnRyeUJ1aWxkT3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGNhc3ROZXh0Q29uZmlnID0gKG5leHRDb25maWcgKSB8fCB7fTtcbiAgaWYgKHR5cGVvZiBjYXN0TmV4dENvbmZpZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoIC4uLndlYnBhY2tDb25maWdGdW5jdGlvbkFyZ3MpIHtcbiAgICAgIGNvbnN0IG1heWJlUHJvbWlzZU5leHRDb25maWcgPSBjYXN0TmV4dENvbmZpZy5hcHBseShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgd2VicGFja0NvbmZpZ0Z1bmN0aW9uQXJncyxcbiAgICAgICk7XG5cbiAgICAgIGlmIChjb3JlLmlzVGhlbmFibGUobWF5YmVQcm9taXNlTmV4dENvbmZpZykpIHtcbiAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZU5leHRDb25maWcudGhlbihwcm9taXNlUmVzdWx0TmV4dENvbmZpZyA9PiB7XG4gICAgICAgICAgcmV0dXJuIGdldEZpbmFsQ29uZmlnT2JqZWN0KHByb21pc2VSZXN1bHROZXh0Q29uZmlnLCBzZW50cnlCdWlsZE9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldEZpbmFsQ29uZmlnT2JqZWN0KG1heWJlUHJvbWlzZU5leHRDb25maWcsIHNlbnRyeUJ1aWxkT3B0aW9ucyk7XG4gICAgfSA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEZpbmFsQ29uZmlnT2JqZWN0KGNhc3ROZXh0Q29uZmlnLCBzZW50cnlCdWlsZE9wdGlvbnMpIDtcbiAgfVxufVxuXG4vLyBNb2RpZnkgdGhlIG1hdGVyaWFsaXplZCBvYmplY3QgZm9ybSBvZiB0aGUgdXNlcidzIG5leHQgY29uZmlnIGJ5IGRlbGV0aW5nIHRoZSBgc2VudHJ5YCBwcm9wZXJ0eSBhbmQgd3JhcHBpbmcgdGhlXG4vLyBgd2VicGFja2AgcHJvcGVydHlcbmZ1bmN0aW9uIGdldEZpbmFsQ29uZmlnT2JqZWN0KFxuICBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LFxuICB1c2VyU2VudHJ5T3B0aW9ucyxcbikge1xuICAvLyBUT0RPKHY5KTogUmVtb3ZlIHRoaXMgY2hlY2sgZm9yIHRoZSBTZW50cnkgcHJvcGVydHlcbiAgaWYgKCdzZW50cnknIGluIGluY29taW5nVXNlck5leHRDb25maWdPYmplY3QpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdbQHNlbnRyeS9uZXh0anNdIFNldHRpbmcgYSBgc2VudHJ5YCBwcm9wZXJ0eSBvbiB0aGUgTmV4dC5qcyBjb25maWcgb2JqZWN0IGFzIGEgbWVhbnMgb2YgY29uZmlndXJhdGlvbiBpcyBubyBsb25nZXIgc3VwcG9ydGVkLiBQbGVhc2UgdXNlIHRoZSBgc2VudHJ5QnVpbGRPcHRpb25zYCBhcmd1bWVudCBvZiBvZiB0aGUgYHdpdGhTZW50cnlDb25maWcoKWAgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICk7XG5cbiAgICAvLyBOZXh0IDEyLjIuMysgd2FybnMgYWJvdXQgbm9uLWNhbm9uaWNhbCBwcm9wZXJ0aWVzIG9uIGB1c2VyTmV4dENvbmZpZ2AuXG4gICAgZGVsZXRlIGluY29taW5nVXNlck5leHRDb25maWdPYmplY3Quc2VudHJ5O1xuICB9XG5cbiAgaWYgKF9vcHRpb25hbENoYWluKFt1c2VyU2VudHJ5T3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLnR1bm5lbFJvdXRlXSkpIHtcbiAgICBpZiAoaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5vdXRwdXQgPT09ICdleHBvcnQnKSB7XG4gICAgICBpZiAoIXNob3dlZEV4cG9ydE1vZGVUdW5uZWxXYXJuaW5nKSB7XG4gICAgICAgIHNob3dlZEV4cG9ydE1vZGVUdW5uZWxXYXJuaW5nID0gdHJ1ZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdbQHNlbnRyeS9uZXh0anNdIFRoZSBTZW50cnkgTmV4dC5qcyBTREsgYHR1bm5lbFJvdXRlYCBvcHRpb24gd2lsbCBub3Qgd29yayBpbiBjb21iaW5hdGlvbiB3aXRoIE5leHQuanMgc3RhdGljIGV4cG9ydHMuIFRoZSBgdHVubmVsUm91dGVgIG9wdGlvbiB1c2VzIHNlcnZlcnNpZGUgZmVhdHVyZXMgdGhhdCBjYW5ub3QgYmUgYWNjZXNzZWQgaW4gZXhwb3J0IG1vZGUuIElmIHlvdSBzdGlsbCB3YW50IHRvIHR1bm5lbCBTZW50cnkgZXZlbnRzLCBzZXQgdXAgeW91ciBvd24gdHVubmVsOiBodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L3Ryb3VibGVzaG9vdGluZy8jdXNpbmctdGhlLXR1bm5lbC1vcHRpb24nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRVcFR1bm5lbFJld3JpdGVSdWxlcyhpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LCB1c2VyU2VudHJ5T3B0aW9ucy50dW5uZWxSb3V0ZSk7XG4gICAgfVxuICB9XG5cbiAgc2V0VXBCdWlsZFRpbWVWYXJpYWJsZXMoaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdCwgdXNlclNlbnRyeU9wdGlvbnMpO1xuXG4gIGNvbnN0IG5leHRKc1ZlcnNpb24gPSBnZXROZXh0anNWZXJzaW9uKCk7XG5cbiAgLy8gQWRkIHRoZSBgY2xpZW50VHJhY2VNZXRhZGF0YWAgZXhwZXJpbWVudGFsIG9wdGlvbiBiYXNlZCBvbiBOZXh0LmpzIHZlcnNpb24uIFRoZSBvcHRpb24gZ290IGludHJvZHVjZWQgaW4gTmV4dC5qcyB2ZXJzaW9uIDE1LjAuMCAoYWN0dWFsbHkgMTQuMy4wLWNhbmFyeS42NCkuXG4gIC8vIEFkZGluZyB0aGUgb3B0aW9uIG9uIGxvd2VyIHZlcnNpb25zIHdpbGwgY2F1c2UgTmV4dC5qcyB0byBwcmludCBuYXN0eSB3YXJuaW5ncyB3ZSB3b3VsZG4ndCBjb25mcm9udCBvdXIgdXNlcnMgd2l0aC5cbiAgaWYgKG5leHRKc1ZlcnNpb24pIHtcbiAgICBjb25zdCB7IG1ham9yLCBtaW5vciB9ID0gY29yZS5wYXJzZVNlbXZlcihuZXh0SnNWZXJzaW9uKTtcbiAgICBpZiAobWFqb3IgIT09IHVuZGVmaW5lZCAmJiBtaW5vciAhPT0gdW5kZWZpbmVkICYmIChtYWpvciA+PSAxNSB8fCAobWFqb3IgPT09IDE0ICYmIG1pbm9yID49IDMpKSkge1xuICAgICAgaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWwgPSBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LmV4cGVyaW1lbnRhbCB8fCB7fTtcbiAgICAgIGluY29taW5nVXNlck5leHRDb25maWdPYmplY3QuZXhwZXJpbWVudGFsLmNsaWVudFRyYWNlTWV0YWRhdGEgPSBbXG4gICAgICAgICdiYWdnYWdlJyxcbiAgICAgICAgJ3NlbnRyeS10cmFjZScsXG4gICAgICAgIC4uLihfb3B0aW9uYWxDaGFpbihbaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdCwgJ2FjY2VzcycsIF8yID0+IF8yLmV4cGVyaW1lbnRhbCwgJ29wdGlvbmFsQWNjZXNzJywgXzMgPT4gXzMuY2xpZW50VHJhY2VNZXRhZGF0YV0pIHx8IFtdKSxcbiAgICAgIF07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coXG4gICAgICBcIltAc2VudHJ5L25leHRqc10gVGhlIFNlbnRyeSBTREsgd2FzIG5vdCBhYmxlIHRvIGRldGVybWluZSB5b3VyIE5leHQuanMgdmVyc2lvbi4gSWYgeW91IGFyZSB1c2luZyBOZXh0LmpzIHZlcnNpb24gMTUgb3IgZ3JlYXRlciwgcGxlYXNlIGFkZCBgZXhwZXJpbWVudGFsLmNsaWVudFRyYWNlTWV0YWRhdGE6IFsnc2VudHJ5LXRyYWNlJywgJ2JhZ2dhZ2UnXWAgdG8geW91ciBOZXh0LmpzIGNvbmZpZyB0byBlbmFibGUgcGFnZWxvYWQgdHJhY2luZyBmb3IgQXBwIFJvdXRlci5cIixcbiAgICApO1xuICB9XG5cbiAgLy8gRnJvbSBOZXh0LmpzIHZlcnNpb24gKDE1LjAuMC1jYW5hcnkuMTI0KSBvbndhcmRzLCBOZXh0LmpzIGRvZXMgbm8gbG9uZ2VyIHJlcXVpcmUgdGhlIGBleHBlcmltZW50YWwuaW5zdHJ1bWVudGF0aW9uSG9va2Agb3B0aW9uIGFuZCB3aWxsXG4gIC8vIHByaW50IGEgd2FybmluZyB3aGVuIGl0IGlzIHNldCwgc28gd2UgbmVlZCB0byBjb25kaXRpb25hbGx5IHByb3ZpZGUgaXQgZm9yIGxvd2VyIHZlcnNpb25zLlxuICBpZiAobmV4dEpzVmVyc2lvbikge1xuICAgIGNvbnN0IHsgbWFqb3IsIG1pbm9yLCBwYXRjaCwgcHJlcmVsZWFzZSB9ID0gY29yZS5wYXJzZVNlbXZlcihuZXh0SnNWZXJzaW9uKTtcbiAgICBjb25zdCBpc0Z1bGx5U3VwcG9ydGVkUmVsZWFzZSA9XG4gICAgICBtYWpvciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBtaW5vciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBwYXRjaCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBtYWpvciA+PSAxNSAmJlxuICAgICAgKChtaW5vciA9PT0gMCAmJiBwYXRjaCA9PT0gMCAmJiBwcmVyZWxlYXNlID09PSB1bmRlZmluZWQpIHx8IG1pbm9yID4gMCB8fCBwYXRjaCA+IDApO1xuICAgIGNvbnN0IGlzU3VwcG9ydGVkVjE1UmMgPVxuICAgICAgbWFqb3IgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgbWlub3IgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgcGF0Y2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgcHJlcmVsZWFzZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBtYWpvciA9PT0gMTUgJiZcbiAgICAgIG1pbm9yID09PSAwICYmXG4gICAgICBwYXRjaCA9PT0gMCAmJlxuICAgICAgcHJlcmVsZWFzZS5zdGFydHNXaXRoKCdyYy4nKSAmJlxuICAgICAgcGFyc2VJbnQocHJlcmVsZWFzZS5zcGxpdCgnLicpWzFdIHx8ICcnLCAxMCkgPiAwO1xuICAgIGNvbnN0IGlzU3VwcG9ydGVkQ2FuYXJ5ID1cbiAgICAgIG1pbm9yICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHBhdGNoICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHByZXJlbGVhc2UgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgbWFqb3IgPT09IDE1ICYmXG4gICAgICBtaW5vciA9PT0gMCAmJlxuICAgICAgcGF0Y2ggPT09IDAgJiZcbiAgICAgIHByZXJlbGVhc2Uuc3RhcnRzV2l0aCgnY2FuYXJ5LicpICYmXG4gICAgICBwYXJzZUludChwcmVyZWxlYXNlLnNwbGl0KCcuJylbMV0gfHwgJycsIDEwKSA+PSAxMjQ7XG5cbiAgICBpZiAoIWlzRnVsbHlTdXBwb3J0ZWRSZWxlYXNlICYmICFpc1N1cHBvcnRlZFYxNVJjICYmICFpc1N1cHBvcnRlZENhbmFyeSkge1xuICAgICAgaWYgKF9vcHRpb25hbENoYWluKFtpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LCAnYWNjZXNzJywgXzQgPT4gXzQuZXhwZXJpbWVudGFsLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNSA9PiBfNS5pbnN0cnVtZW50YXRpb25Ib29rXSkgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnW0BzZW50cnkvbmV4dGpzXSBZb3UgdHVybmVkIG9mZiB0aGUgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCBvcHRpb24uIE5vdGUgdGhhdCBTZW50cnkgd2lsbCBub3QgYmUgaW5pdGlhbGl6ZWQgaWYgeW91IGRpZCBub3Qgc2V0IGl0IHVwIGluc2lkZSBgaW5zdHJ1bWVudGF0aW9uLihqc3x0cylgLicsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LmV4cGVyaW1lbnRhbCA9IHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uSG9vazogdHJ1ZSxcbiAgICAgICAgLi4uaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWwsXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB3ZSBjYW5ub3QgZGV0ZWN0IGEgTmV4dC5qcyB2ZXJzaW9uIGZvciB3aGF0ZXZlciByZWFzb24sIHRoZSBzZW5zaWJsZSBkZWZhdWx0IGlzIHRvIHNldCB0aGUgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCwgZXZlbiB0aG91Z2ggaXQgbWF5IGNyZWF0ZSBhIHdhcm5pbmcuXG4gICAgaWYgKFxuICAgICAgaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWwgJiZcbiAgICAgICdpbnN0cnVtZW50YXRpb25Ib29rJyBpbiBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LmV4cGVyaW1lbnRhbFxuICAgICkge1xuICAgICAgaWYgKGluY29taW5nVXNlck5leHRDb25maWdPYmplY3QuZXhwZXJpbWVudGFsLmluc3RydW1lbnRhdGlvbkhvb2sgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnW0BzZW50cnkvbmV4dGpzXSBZb3Ugc2V0IGBleHBlcmltZW50YWwuaW5zdHJ1bWVudGF0aW9uSG9va2AgdG8gYGZhbHNlYC4gSWYgeW91IGFyZSB1c2luZyBOZXh0LmpzIHZlcnNpb24gMTUgb3IgZ3JlYXRlciwgeW91IGNhbiByZW1vdmUgdGhhdCBvcHRpb24uIElmIHlvdSBhcmUgdXNpbmcgTmV4dC5qcyB2ZXJzaW9uIDE0IG9yIGxvd2VyLCB5b3UgbmVlZCB0byBzZXQgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCBpbiB5b3VyIGBuZXh0LmNvbmZpZy4oanN8bWpzKWAgdG8gYHRydWVgIGZvciB0aGUgU0RLIHRvIGJlIHByb3Blcmx5IGluaXRpYWxpemVkIGluIGNvbWJpbmF0aW9uIHdpdGggYGluc3RydW1lbnRhdGlvbi4oanN8dHMpYC4nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIFwiW0BzZW50cnkvbmV4dGpzXSBUaGUgU2VudHJ5IFNESyB3YXMgbm90IGFibGUgdG8gZGV0ZXJtaW5lIHlvdXIgTmV4dC5qcyB2ZXJzaW9uLiBJZiB5b3UgYXJlIHVzaW5nIE5leHQuanMgdmVyc2lvbiAxNSBvciBncmVhdGVyLCBOZXh0LmpzIHdpbGwgcHJvYmFibHkgc2hvdyB5b3UgYSB3YXJuaW5nIGFib3V0IHRoZSBgZXhwZXJpbWVudGFsLmluc3RydW1lbnRhdGlvbkhvb2tgIGJlaW5nIHNldC4gVG8gc2lsZW5jZSBOZXh0LmpzJyB3YXJuaW5nLCBleHBsaWNpdGx5IHNldCB0aGUgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCBvcHRpb24gaW4geW91ciBgbmV4dC5jb25maWcuKGpzfG1qc3x0cylgIHRvIGB1bmRlZmluZWRgLiBJZiB5b3UgYXJlIG9uIE5leHQuanMgdmVyc2lvbiAxNCBvciBsb3dlciwgeW91IGNhbiBzaWxlbmNlIHRoaXMgcGFydGljdWxhciB3YXJuaW5nIGJ5IGV4cGxpY2l0bHkgc2V0dGluZyB0aGUgYGV4cGVyaW1lbnRhbC5pbnN0cnVtZW50YXRpb25Ib29rYCBvcHRpb24gaW4geW91ciBgbmV4dC5jb25maWcuKGpzfG1qcylgIHRvIGB0cnVlYC5cIixcbiAgICAgICk7XG4gICAgICBpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0LmV4cGVyaW1lbnRhbCA9IHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uSG9vazogdHJ1ZSxcbiAgICAgICAgLi4uaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdC5leHBlcmltZW50YWwsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5UVVJCT1BBQ0sgJiYgIXByb2Nlc3MuZW52LlNFTlRSWV9TVVBQUkVTU19UVVJCT1BBQ0tfV0FSTklORykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgYFtAc2VudHJ5L25leHRqc10gV0FSTklORzogWW91IGFyZSB1c2luZyB0aGUgU2VudHJ5IFNESyB3aXRoIFxcYG5leHQgJHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyAnZGV2JyA6ICdidWlsZCdcbiAgICAgIH0gLS10dXJib1xcYC4gVGhlIFNlbnRyeSBTREsgZG9lc24ndCB5ZXQgZnVsbHkgc3VwcG9ydCBUdXJib3BhY2suIFRoZSBTREsgd2lsbCBub3QgYmUgbG9hZGVkIGluIHRoZSBicm93c2VyLCBhbmQgc2VydmVyc2lkZSBpbnN0cnVtZW50YXRpb24gd2lsbCBiZSBpbmFjY3VyYXRlIG9yIGluY29tcGxldGUuICR7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gJ1Byb2R1Y3Rpb24gYnVpbGRzIHdpdGhvdXQgYC0tdHVyYm9gIHdpbGwgc3RpbGwgZnVsbHkgd29yay4gJyA6ICcnXG4gICAgICB9SWYgeW91IGFyZSBqdXN0IHRyeWluZyBvdXQgU2VudHJ5IG9yIGF0dGVtcHRpbmcgdG8gY29uZmlndXJlIHRoZSBTREssIHdlIHJlY29tbWVuZCB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGUgXFxgLS10dXJib1xcYCBmbGFnIHdoaWxlIHlvdSBhcmUgZGV2ZWxvcGluZyBsb2NhbGx5LiBGb2xsb3cgdGhpcyBpc3N1ZSBmb3IgcHJvZ3Jlc3Mgb24gU2VudHJ5ICsgVHVyYm9wYWNrOiBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0L2lzc3Vlcy84MTA1LiAoWW91IGNhbiBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgYnkgc2V0dGluZyBTRU5UUllfU1VQUFJFU1NfVFVSQk9QQUNLX1dBUk5JTkc9MSBhcyBlbnZpcm9ubWVudCB2YXJpYWJsZSlgLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLmluY29taW5nVXNlck5leHRDb25maWdPYmplY3QsXG4gICAgd2VicGFjazogd2VicGFjay5jb25zdHJ1Y3RXZWJwYWNrQ29uZmlnRnVuY3Rpb24oaW5jb21pbmdVc2VyTmV4dENvbmZpZ09iamVjdCwgdXNlclNlbnRyeU9wdGlvbnMpLFxuICB9O1xufVxuXG4vKipcbiAqIEluamVjdHMgcmV3cml0ZSBydWxlcyBpbnRvIHRoZSBOZXh0LmpzIGNvbmZpZyBwcm92aWRlZCBieSB0aGUgdXNlciB0byB0dW5uZWxcbiAqIHJlcXVlc3RzIGZyb20gdGhlIGB0dW5uZWxQYXRoYCB0byBTZW50cnkuXG4gKlxuICogU2VlIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC5jb25maWcuanMvcmV3cml0ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFVwVHVubmVsUmV3cml0ZVJ1bGVzKHVzZXJOZXh0Q29uZmlnLCB0dW5uZWxQYXRoKSB7XG4gIGNvbnN0IG9yaWdpbmFsUmV3cml0ZXMgPSB1c2VyTmV4dENvbmZpZy5yZXdyaXRlcztcblxuICAvLyBUaGlzIGZ1bmN0aW9uIGRvZXNuJ3QgdGFrZSBhbnkgYXJndW1lbnRzIGF0IHRoZSB0aW1lIG9mIHdyaXRpbmcgYnV0IHdlIGZ1dHVyZS1wcm9vZlxuICAvLyBoZXJlIGluIGNhc2UgTmV4dC5qcyBldmVyIGRlY2lkZXMgdG8gcGFzcyBzb21lXG4gIHVzZXJOZXh0Q29uZmlnLnJld3JpdGVzID0gYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCB0dW5uZWxSb3V0ZVJld3JpdGUgPSB7XG4gICAgICAvLyBNYXRjaGVkIHJld3JpdGUgcm91dGVzIHdpbGwgbG9vayBsaWtlIHRoZSBmb2xsb3dpbmc6IGBbdHVubmVsUGF0aF0/bz1bb3JnaWRdJnA9W3Byb2plY3RpZF1gXG4gICAgICAvLyBOZXh0anMgd2lsbCBhdXRvbWF0aWNhbGx5IGNvbnZlcnQgYHNvdXJjZWAgaW50byBhIHJlZ2V4IGZvciB1c1xuICAgICAgc291cmNlOiBgJHt0dW5uZWxQYXRofSgvPylgLFxuICAgICAgaGFzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAncXVlcnknLFxuICAgICAgICAgIGtleTogJ28nLCAvLyBzaG9ydCBmb3Igb3JnSWQgLSB3ZSBrZWVwIGl0IHNob3J0IHNvIG1hdGNoaW5nIGlzIGhhcmRlciBmb3IgYWQtYmxvY2tlcnNcbiAgICAgICAgICB2YWx1ZTogJyg/PG9yZ2lkPlxcXFxkKiknLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3F1ZXJ5JyxcbiAgICAgICAgICBrZXk6ICdwJywgLy8gc2hvcnQgZm9yIHByb2plY3RJZCAtIHdlIGtlZXAgaXQgc2hvcnQgc28gbWF0Y2hpbmcgaXMgaGFyZGVyIGZvciBhZC1ibG9ja2Vyc1xuICAgICAgICAgIHZhbHVlOiAnKD88cHJvamVjdGlkPlxcXFxkKiknLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGRlc3RpbmF0aW9uOiAnaHR0cHM6Ly9vOm9yZ2lkLmluZ2VzdC5zZW50cnkuaW8vYXBpLzpwcm9qZWN0aWQvZW52ZWxvcGUvP2hzdHM9MCcsXG4gICAgfTtcblxuICAgIGNvbnN0IHR1bm5lbFJvdXRlUmV3cml0ZVdpdGhSZWdpb24gPSB7XG4gICAgICAvLyBNYXRjaGVkIHJld3JpdGUgcm91dGVzIHdpbGwgbG9vayBsaWtlIHRoZSBmb2xsb3dpbmc6IGBbdHVubmVsUGF0aF0/bz1bb3JnaWRdJnA9W3Byb2plY3RpZF0/cj1bcmVnaW9uXWBcbiAgICAgIC8vIE5leHRqcyB3aWxsIGF1dG9tYXRpY2FsbHkgY29udmVydCBgc291cmNlYCBpbnRvIGEgcmVnZXggZm9yIHVzXG4gICAgICBzb3VyY2U6IGAke3R1bm5lbFBhdGh9KC8/KWAsXG4gICAgICBoYXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdxdWVyeScsXG4gICAgICAgICAga2V5OiAnbycsIC8vIHNob3J0IGZvciBvcmdJZCAtIHdlIGtlZXAgaXQgc2hvcnQgc28gbWF0Y2hpbmcgaXMgaGFyZGVyIGZvciBhZC1ibG9ja2Vyc1xuICAgICAgICAgIHZhbHVlOiAnKD88b3JnaWQ+XFxcXGQqKScsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAncXVlcnknLFxuICAgICAgICAgIGtleTogJ3AnLCAvLyBzaG9ydCBmb3IgcHJvamVjdElkIC0gd2Uga2VlcCBpdCBzaG9ydCBzbyBtYXRjaGluZyBpcyBoYXJkZXIgZm9yIGFkLWJsb2NrZXJzXG4gICAgICAgICAgdmFsdWU6ICcoPzxwcm9qZWN0aWQ+XFxcXGQqKScsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAncXVlcnknLFxuICAgICAgICAgIGtleTogJ3InLCAvLyBzaG9ydCBmb3IgcmVnaW9uIC0gd2Uga2VlcCBpdCBzaG9ydCBzbyBtYXRjaGluZyBpcyBoYXJkZXIgZm9yIGFkLWJsb2NrZXJzXG4gICAgICAgICAgdmFsdWU6ICcoPzxyZWdpb24+W2Etel17Mn0pJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBkZXN0aW5hdGlvbjogJ2h0dHBzOi8vbzpvcmdpZC5pbmdlc3QuOnJlZ2lvbi5zZW50cnkuaW8vYXBpLzpwcm9qZWN0aWQvZW52ZWxvcGUvP2hzdHM9MCcsXG4gICAgfTtcblxuICAgIC8vIE9yZGVyIG9mIHRoZXNlIGlzIGltcG9ydGFudCwgdGhleSBnZXQgYXBwbGllZCBmaXJzdCB0byBsYXN0LlxuICAgIGNvbnN0IG5ld1Jld3JpdGVzID0gW3R1bm5lbFJvdXRlUmV3cml0ZVdpdGhSZWdpb24sIHR1bm5lbFJvdXRlUmV3cml0ZV07XG5cbiAgICBpZiAodHlwZW9mIG9yaWdpbmFsUmV3cml0ZXMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBuZXdSZXdyaXRlcztcbiAgICB9XG5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEV4cGVjdGVkIDAgYXJndW1lbnRzIGJ1dCBnb3QgMSAtIHRoaXMgaXMgZnJvbSB0aGUgZnV0dXJlLXByb29maW5nIG1lbnRpb25lZCBhYm92ZSwgc28gd2UgZG9uJ3QgY2FyZSBhYm91dCBpdFxuICAgIGNvbnN0IG9yaWdpbmFsUmV3cml0ZXNSZXN1bHQgPSBhd2FpdCBvcmlnaW5hbFJld3JpdGVzKC4uLmFyZ3MpO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3JpZ2luYWxSZXdyaXRlc1Jlc3VsdCkpIHtcbiAgICAgIHJldHVybiBbLi4ubmV3UmV3cml0ZXMsIC4uLm9yaWdpbmFsUmV3cml0ZXNSZXN1bHRdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5vcmlnaW5hbFJld3JpdGVzUmVzdWx0LFxuICAgICAgICBiZWZvcmVGaWxlczogWy4uLm5ld1Jld3JpdGVzLCAuLi4ob3JpZ2luYWxSZXdyaXRlc1Jlc3VsdC5iZWZvcmVGaWxlcyB8fCBbXSldLFxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbi8vIFRPRE8odjkpOiBJbmplY3QgdGhlIHJlbGVhc2UgaW50byBhbGwgdGhlIGJ1bmRsZXMuIFRoaXMgaXMgYnJlYWtpbmcgYmVjYXVzZSBncmFiYmluZyB0aGUgYnVpbGQgSUQgaWYgdGhlIHVzZXIgcHJvdmlkZXNcbi8vIGl0IGluIGBnZW5lcmF0ZUJ1aWxkSWRgIChodHRwczovL25leHRqcy5vcmcvZG9jcy9hcHAvYXBpLXJlZmVyZW5jZS9uZXh0LWNvbmZpZy1qcy9nZW5lcmF0ZUJ1aWxkSWQpIGlzIGFzeW5jIGJ1dCB3ZSBkb1xuLy8gbm90IHR1cm4gdGhlIG5leHQgY29uZmlnIGZ1bmN0aW9uIGluIHRoZSB0eXBlIGl0IHdhcyBwYXNzZWQuXG5mdW5jdGlvbiBzZXRVcEJ1aWxkVGltZVZhcmlhYmxlcyh1c2VyTmV4dENvbmZpZywgdXNlclNlbnRyeU9wdGlvbnMpIHtcbiAgY29uc3QgYXNzZXRQcmVmaXggPSB1c2VyTmV4dENvbmZpZy5hc3NldFByZWZpeCB8fCB1c2VyTmV4dENvbmZpZy5iYXNlUGF0aCB8fCAnJztcbiAgY29uc3QgYmFzZVBhdGggPSBfbnVsbGlzaENvYWxlc2NlKHVzZXJOZXh0Q29uZmlnLmJhc2VQYXRoLCAoKSA9PiAoICcnKSk7XG4gIGNvbnN0IHJld3JpdGVzVHVubmVsUGF0aCA9XG4gICAgdXNlclNlbnRyeU9wdGlvbnMudHVubmVsUm91dGUgIT09IHVuZGVmaW5lZCAmJiB1c2VyTmV4dENvbmZpZy5vdXRwdXQgIT09ICdleHBvcnQnXG4gICAgICA/IGAke2Jhc2VQYXRofSR7dXNlclNlbnRyeU9wdGlvbnMudHVubmVsUm91dGV9YFxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgYnVpbGRUaW1lVmFyaWFibGVzID0ge1xuICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGlmIHdlIGhhdmUgYSB3aW5kb3dzIHBhdGgsIHRoZSBiYWNrc2xhc2hlcyBhcmUgaW50ZXJwcmV0ZWQgYXMgc3VjaCAocmF0aGVyIHRoYW4gYXMgZXNjYXBlXG4gICAgLy8gY2hhcmFjdGVycylcbiAgICBfc2VudHJ5UmV3cml0ZUZyYW1lc0Rpc3REaXI6IF9vcHRpb25hbENoYWluKFt1c2VyTmV4dENvbmZpZywgJ2FjY2VzcycsIF82ID0+IF82LmRpc3REaXIsICdvcHRpb25hbEFjY2VzcycsIF83ID0+IF83LnJlcGxhY2UsICdjYWxsJywgXzggPT4gXzgoL1xcXFwvZywgJ1xcXFxcXFxcJyldKSB8fCAnLm5leHQnLFxuICAgIC8vIEdldCB0aGUgcGF0aCBwYXJ0IG9mIGBhc3NldFByZWZpeGAsIG1pbnVzIGFueSB0cmFpbGluZyBzbGFzaC4gKFdlIHVzZSBhIHBsYWNlaG9sZGVyIGZvciB0aGUgb3JpZ2luIGlmXG4gICAgLy8gYGFzc2V0UHJlZml4YCBkb2Vzbid0IGluY2x1ZGUgb25lLiBTaW5jZSB3ZSBvbmx5IGNhcmUgYWJvdXQgdGhlIHBhdGgsIGl0IGRvZXNuJ3QgbWF0dGVyIHdoYXQgaXQgaXMuKVxuICAgIF9zZW50cnlSZXdyaXRlRnJhbWVzQXNzZXRQcmVmaXhQYXRoOiBhc3NldFByZWZpeFxuICAgICAgPyBuZXcgVVJMKGFzc2V0UHJlZml4LCAnaHR0cDovL2RvZ3MuYXJlLmdyZWF0JykucGF0aG5hbWUucmVwbGFjZSgvXFwvJC8sICcnKVxuICAgICAgOiAnJyxcbiAgfTtcblxuICBpZiAocmV3cml0ZXNUdW5uZWxQYXRoKSB7XG4gICAgYnVpbGRUaW1lVmFyaWFibGVzLl9zZW50cnlSZXdyaXRlc1R1bm5lbFBhdGggPSByZXdyaXRlc1R1bm5lbFBhdGg7XG4gIH1cblxuICBpZiAoYmFzZVBhdGgpIHtcbiAgICBidWlsZFRpbWVWYXJpYWJsZXMuX3NlbnRyeUJhc2VQYXRoID0gYmFzZVBhdGg7XG4gIH1cblxuICBpZiAodHlwZW9mIHVzZXJOZXh0Q29uZmlnLmVudiA9PT0gJ29iamVjdCcpIHtcbiAgICB1c2VyTmV4dENvbmZpZy5lbnYgPSB7IC4uLmJ1aWxkVGltZVZhcmlhYmxlcywgLi4udXNlck5leHRDb25maWcuZW52IH07XG4gIH0gZWxzZSBpZiAodXNlck5leHRDb25maWcuZW52ID09PSB1bmRlZmluZWQpIHtcbiAgICB1c2VyTmV4dENvbmZpZy5lbnYgPSBidWlsZFRpbWVWYXJpYWJsZXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TmV4dGpzVmVyc2lvbigpIHtcbiAgY29uc3QgbmV4dGpzUGFja2FnZUpzb25QYXRoID0gcmVzb2x2ZU5leHRqc1BhY2thZ2VKc29uKCk7XG4gIGlmIChuZXh0anNQYWNrYWdlSnNvblBhdGgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbmV4dGpzUGFja2FnZUpzb24gPSBKU09OLnBhcnNlKFxuICAgICAgICBmcy5yZWFkRmlsZVN5bmMobmV4dGpzUGFja2FnZUpzb25QYXRoLCB7IGVuY29kaW5nOiAndXRmLTgnIH0pLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBuZXh0anNQYWNrYWdlSnNvbi52ZXJzaW9uO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTmV4dGpzUGFja2FnZUpzb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHJlc29sdmUuc3luYygnbmV4dC9wYWNrYWdlLmpzb24nLCB7IGJhc2VkaXI6IHByb2Nlc3MuY3dkKCkgfSk7XG4gIH0gY2F0Y2ggKGUyKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnRzLndpdGhTZW50cnlDb25maWcgPSB3aXRoU2VudHJ5Q29uZmlnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2l0aFNlbnRyeUNvbmZpZy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfbnVsbGlzaENvYWxlc2NlIiwiX29wdGlvbmFsQ2hhaW4iLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb3JlIiwiZnMiLCJyZXNvbHZlIiwid2VicGFjayIsInNob3dlZEV4cG9ydE1vZGVUdW5uZWxXYXJuaW5nIiwid2l0aFNlbnRyeUNvbmZpZyIsIm5leHRDb25maWciLCJzZW50cnlCdWlsZE9wdGlvbnMiLCJjYXN0TmV4dENvbmZpZyIsIndlYnBhY2tDb25maWdGdW5jdGlvbkFyZ3MiLCJtYXliZVByb21pc2VOZXh0Q29uZmlnIiwiYXBwbHkiLCJpc1RoZW5hYmxlIiwidGhlbiIsInByb21pc2VSZXN1bHROZXh0Q29uZmlnIiwiZ2V0RmluYWxDb25maWdPYmplY3QiLCJpbmNvbWluZ1VzZXJOZXh0Q29uZmlnT2JqZWN0IiwidXNlclNlbnRyeU9wdGlvbnMiLCJjb25zb2xlIiwid2FybiIsInNlbnRyeSIsIl8iLCJ0dW5uZWxSb3V0ZSIsIm91dHB1dCIsInNldFVwVHVubmVsUmV3cml0ZVJ1bGVzIiwic2V0VXBCdWlsZFRpbWVWYXJpYWJsZXMiLCJuZXh0SnNWZXJzaW9uIiwiZ2V0TmV4dGpzVmVyc2lvbiIsIm1ham9yIiwibWlub3IiLCJwYXJzZVNlbXZlciIsInVuZGVmaW5lZCIsImV4cGVyaW1lbnRhbCIsImNsaWVudFRyYWNlTWV0YWRhdGEiLCJfMiIsIl8zIiwibG9nIiwicGF0Y2giLCJwcmVyZWxlYXNlIiwiaXNGdWxseVN1cHBvcnRlZFJlbGVhc2UiLCJpc1N1cHBvcnRlZFYxNVJjIiwic3RhcnRzV2l0aCIsInBhcnNlSW50Iiwic3BsaXQiLCJpc1N1cHBvcnRlZENhbmFyeSIsIl80IiwiXzUiLCJpbnN0cnVtZW50YXRpb25Ib29rIiwicHJvY2VzcyIsImVudiIsIlRVUkJPUEFDSyIsIlNFTlRSWV9TVVBQUkVTU19UVVJCT1BBQ0tfV0FSTklORyIsImNvbnN0cnVjdFdlYnBhY2tDb25maWdGdW5jdGlvbiIsInVzZXJOZXh0Q29uZmlnIiwidHVubmVsUGF0aCIsIm9yaWdpbmFsUmV3cml0ZXMiLCJyZXdyaXRlcyIsImFyZ3MiLCJ0dW5uZWxSb3V0ZVJld3JpdGUiLCJzb3VyY2UiLCJoYXMiLCJ0eXBlIiwia2V5IiwiZGVzdGluYXRpb24iLCJ0dW5uZWxSb3V0ZVJld3JpdGVXaXRoUmVnaW9uIiwibmV3UmV3cml0ZXMiLCJvcmlnaW5hbFJld3JpdGVzUmVzdWx0IiwiQXJyYXkiLCJpc0FycmF5IiwiYmVmb3JlRmlsZXMiLCJhc3NldFByZWZpeCIsImJhc2VQYXRoIiwicmV3cml0ZXNUdW5uZWxQYXRoIiwiYnVpbGRUaW1lVmFyaWFibGVzIiwiX3NlbnRyeVJld3JpdGVGcmFtZXNEaXN0RGlyIiwiXzYiLCJkaXN0RGlyIiwiXzciLCJyZXBsYWNlIiwiXzgiLCJfc2VudHJ5UmV3cml0ZUZyYW1lc0Fzc2V0UHJlZml4UGF0aCIsIlVSTCIsInBhdGhuYW1lIiwiX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aCIsIl9zZW50cnlCYXNlUGF0aCIsIm5leHRqc1BhY2thZ2VKc29uUGF0aCIsInJlc29sdmVOZXh0anNQYWNrYWdlSnNvbiIsIm5leHRqc1BhY2thZ2VKc29uIiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwiZW5jb2RpbmciLCJ2ZXJzaW9uIiwiZSIsInN5bmMiLCJiYXNlZGlyIiwiY3dkIiwiZTIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/index.server.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/index.server.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst withSentryConfig = __webpack_require__(/*! ./config/withSentryConfig.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/config/withSentryConfig.js\");\nconst index = __webpack_require__(/*! ./server/index.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/index.js\");\nconst _error = __webpack_require__(/*! ./common/pages-router-instrumentation/_error.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapApiHandlerWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ./common/wrapServerComponentWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ./common/wrapRouteHandlerWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ./common/wrapMiddlewareWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ./common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ./common/wrapGenerationFunctionWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ./common/withServerActionInstrumentation.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ./common/captureRequestError.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(instrument)/./node_modules/@sentry/node/build/cjs/index.js\");\nexports.withSentryConfig = withSentryConfig.withSentryConfig;\nexports.ErrorBoundary = index.ErrorBoundary;\nexports.createReduxEnhancer = index.createReduxEnhancer;\nexports.init = index.init;\nexports.showReportDialog = index.showReportDialog;\nexports.withErrorBoundary = index.withErrorBoundary;\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nexports.experimental_captureRequestError = captureRequestError.experimental_captureRequestError;\nObject.prototype.hasOwnProperty.call(node, '__proto__') && !Object.prototype.hasOwnProperty.call(exports, '__proto__') && Object.defineProperty(exports, '__proto__', {\n  enumerable: true,\n  value: node['__proto__']\n});\nObject.keys(node).forEach(k => {\n  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = node[k];\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/index.server.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst path = __webpack_require__(/*! path */ \"path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst distDirRewriteFramesIntegration = core.defineIntegration(({\n  distDirName\n}) => {\n  // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so\n  // we can read in the project directory from the currently running process\n  const distDirAbsPath = path.resolve(distDirName).replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(core.escapeStringForRegex(distDirAbsPath));\n  const rewriteFramesInstance = core.rewriteFramesIntegration({\n    iteratee: frame => {\n      frame.filename = _optionalChain([frame, 'access', _ => _.filename, 'optionalAccess', _2 => _2.replace, 'call', _3 => _3(SOURCEMAP_FILENAME_REGEX, 'app:///_next')]);\n      return frame;\n    }\n  });\n  return {\n    ...rewriteFramesInstance,\n    name: 'DistDirRewriteFrames'\n  };\n});\nexports.distDirRewriteFramesIntegration = distDirRewriteFramesIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9zZXJ2ZXIvZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLElBQUk7RUFDRkE7QUFDRixDQUFDLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUUzQkMsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxJQUFJLEdBQUdMLG1CQUFPLENBQUMsa0JBQU0sQ0FBQztBQUM1QixNQUFNTSxJQUFJLEdBQUdOLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUVwQyxNQUFNTywrQkFBK0IsR0FBR0QsSUFBSSxDQUFDRSxpQkFBaUIsQ0FBQyxDQUFDO0VBQUVDO0FBQVksQ0FBQyxLQUFLO0VBQ2xGO0VBQ0E7RUFDQSxNQUFNQyxjQUFjLEdBQUdMLElBQUksQ0FBQ00sT0FBTyxDQUFDRixXQUFXLENBQUMsQ0FBQ0csT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDOztFQUUxRTtFQUNBLE1BQU1DLHdCQUF3QixHQUFHLElBQUlDLE1BQU0sQ0FBQ1IsSUFBSSxDQUFDUyxvQkFBb0IsQ0FBQ0wsY0FBYyxDQUFDLENBQUM7RUFFdEYsTUFBTU0scUJBQXFCLEdBQUdWLElBQUksQ0FBQ1csd0JBQXdCLENBQUM7SUFDMURDLFFBQVEsRUFBRUMsS0FBSyxJQUFJO01BQ2pCQSxLQUFLLENBQUNDLFFBQVEsR0FBR3JCLGNBQWMsQ0FBQyxDQUFDb0IsS0FBSyxFQUFFLFFBQVEsRUFBRUUsQ0FBQyxJQUFJQSxDQUFDLENBQUNELFFBQVEsRUFBRSxnQkFBZ0IsRUFBRUUsRUFBRSxJQUFJQSxFQUFFLENBQUNWLE9BQU8sRUFBRSxNQUFNLEVBQUVXLEVBQUUsSUFBSUEsRUFBRSxDQUFDVix3QkFBd0IsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO01BQ25LLE9BQU9NLEtBQUs7SUFDZDtFQUNGLENBQUMsQ0FBQztFQUVGLE9BQU87SUFDTCxHQUFHSCxxQkFBcUI7SUFDeEJRLElBQUksRUFBRTtFQUNSLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRnJCLHVDQUF1QyxHQUFHSSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL3NlcnZlci9kaXN0RGlyUmV3cml0ZUZyYW1lc0ludGVncmF0aW9uLmpzP2ZmM2IiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKHsgZGlzdERpck5hbWUgfSkgPT4ge1xuICAvLyBuZXh0anMgYWx3YXlzIHB1dHMgdGhlIGJ1aWxkIGRpcmVjdG9yeSBhdCB0aGUgcHJvamVjdCByb290IGxldmVsLCB3aGljaCBpcyBhbHNvIHdoZXJlIHlvdSBydW4gYG5leHQgc3RhcnRgIGZyb20sIHNvXG4gIC8vIHdlIGNhbiByZWFkIGluIHRoZSBwcm9qZWN0IGRpcmVjdG9yeSBmcm9tIHRoZSBjdXJyZW50bHkgcnVubmluZyBwcm9jZXNzXG4gIGNvbnN0IGRpc3REaXJBYnNQYXRoID0gcGF0aC5yZXNvbHZlKGRpc3REaXJOYW1lKS5yZXBsYWNlKC8oXFwvfFxcXFwpJC8sICcnKTsgLy8gV2Ugc3RyaXAgdHJhaWxpbmcgc2xhc2hlcyBiZWNhdXNlIFwiYXBwOi8vL19uZXh0XCIgYWxzbyBkb2Vzbid0IGhhdmUgb25lXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBzZW50cnktaW50ZXJuYWwvc2RrL25vLXJlZ2V4cC1jb25zdHJ1Y3RvciAtLSB1c2VyIGlucHV0IGlzIGVzY2FwZWRcbiAgY29uc3QgU09VUkNFTUFQX0ZJTEVOQU1FX1JFR0VYID0gbmV3IFJlZ0V4cChjb3JlLmVzY2FwZVN0cmluZ0ZvclJlZ2V4KGRpc3REaXJBYnNQYXRoKSk7XG5cbiAgY29uc3QgcmV3cml0ZUZyYW1lc0luc3RhbmNlID0gY29yZS5yZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24oe1xuICAgIGl0ZXJhdGVlOiBmcmFtZSA9PiB7XG4gICAgICBmcmFtZS5maWxlbmFtZSA9IF9vcHRpb25hbENoYWluKFtmcmFtZSwgJ2FjY2VzcycsIF8gPT4gXy5maWxlbmFtZSwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIucmVwbGFjZSwgJ2NhbGwnLCBfMyA9PiBfMyhTT1VSQ0VNQVBfRklMRU5BTUVfUkVHRVgsICdhcHA6Ly8vX25leHQnKV0pO1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgLi4ucmV3cml0ZUZyYW1lc0luc3RhbmNlLFxuICAgIG5hbWU6ICdEaXN0RGlyUmV3cml0ZUZyYW1lcycsXG4gIH07XG59KTtcblxuZXhwb3J0cy5kaXN0RGlyUmV3cml0ZUZyYW1lc0ludGVncmF0aW9uID0gZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24uanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXRoIiwiY29yZSIsImRpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiIsImRpc3REaXJOYW1lIiwiZGlzdERpckFic1BhdGgiLCJyZXNvbHZlIiwicmVwbGFjZSIsIlNPVVJDRU1BUF9GSUxFTkFNRV9SRUdFWCIsIlJlZ0V4cCIsImVzY2FwZVN0cmluZ0ZvclJlZ2V4IiwicmV3cml0ZUZyYW1lc0luc3RhbmNlIiwicmV3cml0ZUZyYW1lc0ludGVncmF0aW9uIiwiaXRlcmF0ZWUiLCJmcmFtZSIsImZpbGVuYW1lIiwiXyIsIl8yIiwiXzMiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/server/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst node = __webpack_require__(/*! @sentry/node */ \"(instrument)/./node_modules/@sentry/node/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../common/debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst devErrorSymbolicationEventProcessor = __webpack_require__(/*! ../common/devErrorSymbolicationEventProcessor.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/devErrorSymbolicationEventProcessor.js\");\nconst getVercelEnv = __webpack_require__(/*! ../common/getVercelEnv.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/getVercelEnv.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../common/span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst isBuild = __webpack_require__(/*! ../common/utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst distDirRewriteFramesIntegration = __webpack_require__(/*! ./distDirRewriteFramesIntegration.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/distDirRewriteFramesIntegration.js\");\nconst _error = __webpack_require__(/*! ../common/pages-router-instrumentation/_error.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ../common/wrapServerComponentWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ../common/wrapRouteHandlerWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ../common/wrapMiddlewareWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ../common/wrapGenerationFunctionWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ../common/withServerActionInstrumentation.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ../common/captureRequestError.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentry.js\");\nconst globalWithInjectedValues = core.GLOBAL_OBJ;\n\n/**\n * A passthrough error boundary for the server that doesn't depend on any react. Error boundaries don't catch SSR errors\n * so they should simply be a passthrough.\n */\nconst ErrorBoundary = props => {\n  if (!props.children) {\n    return null;\n  }\n  if (typeof props.children === 'function') {\n    return props.children();\n  }\n\n  // since Next.js >= 10 requires React ^16.6.0 we are allowed to return children like this here\n  return props.children;\n};\n\n/**\n * A passthrough redux enhancer for the server that doesn't depend on anything from the `@sentry/react` package.\n */\nfunction createReduxEnhancer() {\n  return createStore => createStore;\n}\n\n/**\n * A passthrough error boundary wrapper for the server that doesn't depend on any react. Error boundaries don't catch\n * SSR errors so they should simply be a passthrough.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary(WrappedComponent) {\n  return WrappedComponent;\n}\n\n/**\n * Just a passthrough since we're on the server and showing the report dialog on the server doesn't make any sense.\n */\nfunction showReportDialog() {\n  return;\n}\n\n/** Inits the Sentry NextJS SDK on node. */\nfunction init(options) {\n  if (isBuild.isBuild()) {\n    return;\n  }\n  const customDefaultIntegrations = node.getDefaultIntegrations(options).filter(integration => integration.name !== 'Http').concat(\n  // We are using the HTTP integration without instrumenting incoming HTTP requests because Next.js does that by itself.\n  node.httpIntegration({\n    disableIncomingRequestSpans: true\n  }));\n\n  // Turn off Next.js' own fetch instrumentation\n  // https://github.com/lforst/nextjs-fork/blob/1994fd186defda77ad971c36dc3163db263c993f/packages/next/src/server/lib/patch-fetch.ts#L245\n  process.env.NEXT_OTEL_FETCH_DISABLED = '1';\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = \".next\" || 0;\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration.distDirRewriteFramesIntegration({\n      distDirName\n    }));\n  }\n  const opts = {\n    environment: process.env.SENTRY_ENVIRONMENT || getVercelEnv.getVercelEnv(false) || \"development\",\n    defaultIntegrations: customDefaultIntegrations,\n    ...options,\n    // Right now we only capture frontend sessions for Next.js\n    autoSessionTracking: false\n  };\n  if (debugBuild.DEBUG_BUILD && opts.debug) {\n    core.logger.enable();\n  }\n  debugBuild.DEBUG_BUILD && core.logger.log('Initializing SDK...');\n  if (sdkAlreadyInitialized()) {\n    debugBuild.DEBUG_BUILD && core.logger.log('SDK already initialized');\n    return;\n  }\n  core.applySdkMetadata(opts, 'nextjs', ['nextjs', 'node']);\n  const client = node.init(opts);\n  _optionalChain([client, 'optionalAccess', _ => _.on, 'call', _2 => _2('beforeSampling', ({\n    spanAttributes\n  }, samplingDecision) => {\n    // There are situations where the Next.js Node.js server forwards requests for the Edge Runtime server (e.g. in\n    // middleware) and this causes spans for Sentry ingest requests to be created. These are not exempt from our tracing\n    // because we didn't get the chance to do `suppressTracing`, since this happens outside of userland.\n    // We need to drop these spans.\n    if (\n    // eslint-disable-next-line deprecation/deprecation\n    typeof spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET] === 'string' &&\n    // eslint-disable-next-line deprecation/deprecation\n    spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET].includes('sentry_key') &&\n    // eslint-disable-next-line deprecation/deprecation\n    spanAttributes[semanticConventions.SEMATTRS_HTTP_TARGET].includes('sentry_client') || typeof spanAttributes[semanticConventions.ATTR_URL_QUERY] === 'string' && spanAttributes[semanticConventions.ATTR_URL_QUERY].includes('sentry_key') && spanAttributes[semanticConventions.ATTR_URL_QUERY].includes('sentry_client')) {\n      samplingDecision.decision = false;\n    }\n  })]);\n  _optionalChain([client, 'optionalAccess', _3 => _3.on, 'call', _4 => _4('spanStart', span => {\n    const spanAttributes = core.spanToJSON(span).data;\n\n    // What we do in this glorious piece of code, is hoist any information about parameterized routes from spans emitted\n    // by Next.js via the `next.route` attribute, up to the transaction by setting the http.route attribute.\n    if (typeof _optionalChain([spanAttributes, 'optionalAccess', _5 => _5['next.route']]) === 'string') {\n      const rootSpan = core.getRootSpan(span);\n      const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n\n      // Only hoist the http.route attribute if the transaction doesn't already have it\n      if (\n      // eslint-disable-next-line deprecation/deprecation\n      (_optionalChain([rootSpanAttributes, 'optionalAccess', _6 => _6[semanticConventions.ATTR_HTTP_REQUEST_METHOD]]) || _optionalChain([rootSpanAttributes, 'optionalAccess', _7 => _7[semanticConventions.SEMATTRS_HTTP_METHOD]])) && !_optionalChain([rootSpanAttributes, 'optionalAccess', _8 => _8[semanticConventions.ATTR_HTTP_ROUTE]])) {\n        const route = spanAttributes['next.route'].replace(/\\/route$/, '');\n        rootSpan.updateName(route);\n        rootSpan.setAttribute(semanticConventions.ATTR_HTTP_ROUTE, route);\n      }\n    }\n\n    // We want to skip span data inference for any spans generated by Next.js. Reason being that Next.js emits spans\n    // with patterns (e.g. http.server spans) that will produce confusing data.\n    if (_optionalChain([spanAttributes, 'optionalAccess', _9 => _9['next.span_type']]) !== undefined) {\n      span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // We want to fork the isolation scope for incoming requests\n    if (_optionalChain([spanAttributes, 'optionalAccess', _10 => _10['next.span_type']]) === 'BaseServer.handleRequest' && span === core.getRootSpan(span)) {\n      const scopes = core.getCapturedScopesOnSpan(span);\n      const isolationScope = (scopes.isolationScope || core.getIsolationScope()).clone();\n      const scope = scopes.scope || core.getCurrentScope();\n      const currentScopesPointer = opentelemetry.getScopesFromContext(api.context.active());\n      if (currentScopesPointer) {\n        currentScopesPointer.isolationScope = isolationScope;\n      }\n      core.setCapturedScopesOnSpan(span, scope, isolationScope);\n    }\n  })]);\n  core.getGlobalScope().addEventProcessor(Object.assign(event => {\n    if (event.type === 'transaction') {\n      // Filter out transactions for static assets\n      // This regex matches the default path to the static assets (`_next/static`) and could potentially filter out too many transactions.\n      // We match `/_next/static/` anywhere in the transaction name because its location may change with the basePath setting.\n      if (_optionalChain([event, 'access', _11 => _11.transaction, 'optionalAccess', _12 => _12.match, 'call', _13 => _13(/^GET (\\/.*)?\\/_next\\/static\\//)])) {\n        return null;\n      }\n\n      // Filter out transactions for requests to the tunnel route\n      if (globalWithInjectedValues._sentryRewritesTunnelPath && event.transaction === `POST ${globalWithInjectedValues._sentryRewritesTunnelPath}` || process.env._sentryRewritesTunnelPath && event.transaction === `POST ${process.env._sentryRewritesTunnelPath}`) {\n        return null;\n      }\n\n      // Filter out requests to resolve source maps for stack frames in dev mode\n      if (_optionalChain([event, 'access', _14 => _14.transaction, 'optionalAccess', _15 => _15.match, 'call', _16 => _16(/\\/__nextjs_original-stack-frame/)])) {\n        return null;\n      }\n\n      // Filter out /404 transactions which seem to be created excessively\n      if (\n      // Pages router\n      event.transaction === '/404' ||\n      // App router (could be \"GET /404\", \"POST /404\", ...)\n      _optionalChain([event, 'access', _17 => _17.transaction, 'optionalAccess', _18 => _18.match, 'call', _19 => _19(/^(GET|HEAD|POST|PUT|DELETE|CONNECT|OPTIONS|TRACE|PATCH) \\/(404|_not-found)$/)])) {\n        return null;\n      }\n\n      // Filter transactions that we explicitly want to drop.\n      if (_optionalChain([event, 'access', _20 => _20.contexts, 'optionalAccess', _21 => _21.trace, 'optionalAccess', _22 => _22.data, 'optionalAccess', _23 => _23[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION]])) {\n        return null;\n      }\n\n      // Next.js 13 sometimes names the root transactions like this containing useless tracing.\n      if (event.transaction === 'NextServer.getRequestHandler') {\n        return null;\n      }\n\n      // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n      if (typeof _optionalChain([event, 'access', _24 => _24.contexts, 'optionalAccess', _25 => _25.trace, 'optionalAccess', _26 => _26.data, 'optionalAccess', _27 => _27[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]]) === 'string') {\n        const traceparentData = core.extractTraceparentData(event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]);\n        if (_optionalChain([traceparentData, 'optionalAccess', _28 => _28.parentSampled]) === false) {\n          return null;\n        }\n      }\n      return event;\n    } else {\n      return event;\n    }\n  }, {\n    id: 'NextLowQualityTransactionsFilter'\n  }));\n  core.getGlobalScope().addEventProcessor(Object.assign((event, hint) => {\n    if (event.type !== undefined) {\n      return event;\n    }\n    const originalException = hint.originalException;\n    const isPostponeError = typeof originalException === 'object' && originalException !== null && '$$typeof' in originalException && originalException.$$typeof === Symbol.for('react.postpone');\n    if (isPostponeError) {\n      // Postpone errors are used for partial-pre-rendering (PPR)\n      return null;\n    }\n\n    // We don't want to capture suspense errors as they are simply used by React/Next.js for control flow\n    const exceptionMessage = _optionalChain([event, 'access', _29 => _29.exception, 'optionalAccess', _30 => _30.values, 'optionalAccess', _31 => _31[0], 'optionalAccess', _32 => _32.value]);\n    if (_optionalChain([exceptionMessage, 'optionalAccess', _33 => _33.includes, 'call', _34 => _34('Suspense Exception: This is not a real error!')]) || _optionalChain([exceptionMessage, 'optionalAccess', _35 => _35.includes, 'call', _36 => _36('Suspense Exception: This is not a real error, and should not leak')])) {\n      return null;\n    }\n    return event;\n  }, {\n    id: 'DropReactControlFlowErrors'\n  }));\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  _optionalChain([client, 'optionalAccess', _37 => _37.on, 'call', _38 => _38('preprocessEvent', event => {\n    // Enhance route handler transactions\n    if (event.type === 'transaction' && _optionalChain([event, 'access', _39 => _39.contexts, 'optionalAccess', _40 => _40.trace, 'optionalAccess', _41 => _41.data, 'optionalAccess', _42 => _42['next.span_type']]) === 'BaseServer.handleRequest') {\n      event.contexts.trace.data = event.contexts.trace.data || {};\n      event.contexts.trace.data[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] = 'http.server';\n      event.contexts.trace.op = 'http.server';\n      if (event.transaction) {\n        event.transaction = core.stripUrlQueryAndFragment(event.transaction);\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      const method = event.contexts.trace.data[semanticConventions.SEMATTRS_HTTP_METHOD];\n      // eslint-disable-next-line deprecation/deprecation\n      const target = _optionalChain([event, 'access', _43 => _43.contexts, 'optionalAccess', _44 => _44.trace, 'optionalAccess', _45 => _45.data, 'optionalAccess', _46 => _46[semanticConventions.SEMATTRS_HTTP_TARGET]]);\n      const route = event.contexts.trace.data[semanticConventions.ATTR_HTTP_ROUTE];\n      if (typeof method === 'string' && typeof route === 'string') {\n        event.transaction = `${method} ${route.replace(/\\/route$/, '')}`;\n        event.contexts.trace.data[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'route';\n      }\n\n      // backfill transaction name for pages that would otherwise contain unparameterized routes\n      if (event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL] && event.transaction !== 'GET /_app') {\n        event.transaction = `${method} ${event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL]}`;\n      }\n\n      // Next.js overrides transaction names for page loads that throw an error\n      // but we want to keep the original target name\n      if (event.transaction === 'GET /_error' && target) {\n        event.transaction = `${method ? `${method} ` : ''}${target}`;\n      }\n    }\n\n    // Next.js 13 is not correctly picking up tracing data for trace propagation so we use a back-fill strategy\n    if (event.type === 'transaction' && typeof _optionalChain([event, 'access', _47 => _47.contexts, 'optionalAccess', _48 => _48.trace, 'optionalAccess', _49 => _49.data, 'optionalAccess', _50 => _50[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]]) === 'string') {\n      const traceparentData = core.extractTraceparentData(event.contexts.trace.data[spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL]);\n      if (_optionalChain([traceparentData, 'optionalAccess', _51 => _51.traceId])) {\n        event.contexts.trace.trace_id = traceparentData.traceId;\n      }\n      if (_optionalChain([traceparentData, 'optionalAccess', _52 => _52.parentSpanId])) {\n        event.contexts.trace.parent_span_id = traceparentData.parentSpanId;\n      }\n    }\n  })]);\n  if (true) {\n    core.getGlobalScope().addEventProcessor(devErrorSymbolicationEventProcessor.devErrorSymbolicationEventProcessor);\n  }\n  debugBuild.DEBUG_BUILD && core.logger.log('SDK successfully initialized');\n  return client;\n}\nfunction sdkAlreadyInitialized() {\n  return !!core.getClient();\n}\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nexports.experimental_captureRequestError = captureRequestError.experimental_captureRequestError;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.ErrorBoundary = ErrorBoundary;\nexports.createReduxEnhancer = createReduxEnhancer;\nexports.init = init;\nexports.showReportDialog = showReportDialog;\nexports.withErrorBoundary = withErrorBoundary;\nObject.prototype.hasOwnProperty.call(node, '__proto__') && !Object.prototype.hasOwnProperty.call(exports, '__proto__') && Object.defineProperty(exports, '__proto__', {\n  enumerable: true,\n  value: node['__proto__']\n});\nObject.keys(node).forEach(k => {\n  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = node[k];\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/server/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/cron/common.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/cron/common.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst replacements = [['january', '1'], ['february', '2'], ['march', '3'], ['april', '4'], ['may', '5'], ['june', '6'], ['july', '7'], ['august', '8'], ['september', '9'], ['october', '10'], ['november', '11'], ['december', '12'], ['jan', '1'], ['feb', '2'], ['mar', '3'], ['apr', '4'], ['may', '5'], ['jun', '6'], ['jul', '7'], ['aug', '8'], ['sep', '9'], ['oct', '10'], ['nov', '11'], ['dec', '12'], ['sunday', '0'], ['monday', '1'], ['tuesday', '2'], ['wednesday', '3'], ['thursday', '4'], ['friday', '5'], ['saturday', '6'], ['sun', '0'], ['mon', '1'], ['tue', '2'], ['wed', '3'], ['thu', '4'], ['fri', '5'], ['sat', '6']];\n\n/**\n * Replaces names in cron expressions\n */\nfunction replaceCronNames(cronExpression) {\n  return replacements.reduce(\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n  (acc, [name, replacement]) => acc.replace(new RegExp(name, 'gi'), replacement), cronExpression);\n}\nexports.replaceCronNames = replaceCronNames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxZQUFZLEdBQUcsQ0FDbkIsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLEVBQ2hCLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUNqQixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFDZCxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFDZCxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsRUFDWixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFDYixDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFDYixDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsRUFDZixDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsRUFDbEIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQ2pCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUNsQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFDbEIsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQ1osQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQ1osQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQ1osQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQ1osQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQ1osQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQ1osQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQ1osQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQ1osQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEVBQ1osQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQ2IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQ2IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQ2IsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQ2YsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQ2YsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLEVBQ2hCLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxFQUNsQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsRUFDakIsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQ2YsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLEVBQ2pCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUNaLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUNaLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUNaLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUNaLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUNaLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUNaLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUNiOztBQUVEO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsY0FBYyxFQUFFO0VBQ3hDLE9BQU9GLFlBQVksQ0FBQ0csTUFBTTtFQUN4QjtFQUNBLENBQUNDLEdBQUcsRUFBRSxDQUFDQyxJQUFJLEVBQUVDLFdBQVcsQ0FBQyxLQUFLRixHQUFHLENBQUNHLE9BQU8sQ0FBQyxJQUFJQyxNQUFNLENBQUNILElBQUksRUFBRSxJQUFJLENBQUMsRUFBRUMsV0FBVyxDQUFDLEVBQzlFSixjQUNGLENBQUM7QUFDSDtBQUVBSix3QkFBd0IsR0FBR0csZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9jb21tb24uanM/MWYwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCByZXBsYWNlbWVudHMgPSBbXG4gIFsnamFudWFyeScsICcxJ10sXG4gIFsnZmVicnVhcnknLCAnMiddLFxuICBbJ21hcmNoJywgJzMnXSxcbiAgWydhcHJpbCcsICc0J10sXG4gIFsnbWF5JywgJzUnXSxcbiAgWydqdW5lJywgJzYnXSxcbiAgWydqdWx5JywgJzcnXSxcbiAgWydhdWd1c3QnLCAnOCddLFxuICBbJ3NlcHRlbWJlcicsICc5J10sXG4gIFsnb2N0b2JlcicsICcxMCddLFxuICBbJ25vdmVtYmVyJywgJzExJ10sXG4gIFsnZGVjZW1iZXInLCAnMTInXSxcbiAgWydqYW4nLCAnMSddLFxuICBbJ2ZlYicsICcyJ10sXG4gIFsnbWFyJywgJzMnXSxcbiAgWydhcHInLCAnNCddLFxuICBbJ21heScsICc1J10sXG4gIFsnanVuJywgJzYnXSxcbiAgWydqdWwnLCAnNyddLFxuICBbJ2F1ZycsICc4J10sXG4gIFsnc2VwJywgJzknXSxcbiAgWydvY3QnLCAnMTAnXSxcbiAgWydub3YnLCAnMTEnXSxcbiAgWydkZWMnLCAnMTInXSxcbiAgWydzdW5kYXknLCAnMCddLFxuICBbJ21vbmRheScsICcxJ10sXG4gIFsndHVlc2RheScsICcyJ10sXG4gIFsnd2VkbmVzZGF5JywgJzMnXSxcbiAgWyd0aHVyc2RheScsICc0J10sXG4gIFsnZnJpZGF5JywgJzUnXSxcbiAgWydzYXR1cmRheScsICc2J10sXG4gIFsnc3VuJywgJzAnXSxcbiAgWydtb24nLCAnMSddLFxuICBbJ3R1ZScsICcyJ10sXG4gIFsnd2VkJywgJzMnXSxcbiAgWyd0aHUnLCAnNCddLFxuICBbJ2ZyaScsICc1J10sXG4gIFsnc2F0JywgJzYnXSxcbl07XG5cbi8qKlxuICogUmVwbGFjZXMgbmFtZXMgaW4gY3JvbiBleHByZXNzaW9uc1xuICovXG5mdW5jdGlvbiByZXBsYWNlQ3Jvbk5hbWVzKGNyb25FeHByZXNzaW9uKSB7XG4gIHJldHVybiByZXBsYWNlbWVudHMucmVkdWNlKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAc2VudHJ5LWludGVybmFsL3Nkay9uby1yZWdleHAtY29uc3RydWN0b3JcbiAgICAoYWNjLCBbbmFtZSwgcmVwbGFjZW1lbnRdKSA9PiBhY2MucmVwbGFjZShuZXcgUmVnRXhwKG5hbWUsICdnaScpLCByZXBsYWNlbWVudCksXG4gICAgY3JvbkV4cHJlc3Npb24sXG4gICk7XG59XG5cbmV4cG9ydHMucmVwbGFjZUNyb25OYW1lcyA9IHJlcGxhY2VDcm9uTmFtZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJyZXBsYWNlbWVudHMiLCJyZXBsYWNlQ3Jvbk5hbWVzIiwiY3JvbkV4cHJlc3Npb24iLCJyZWR1Y2UiLCJhY2MiLCJuYW1lIiwicmVwbGFjZW1lbnQiLCJyZXBsYWNlIiwiUmVnRXhwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/cron/common.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/cron/cron.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/cron/cron.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/cron/common.js\");\nconst ERROR_TEXT = 'Automatic instrumentation of CronJob only supports crontab string';\n\n/**\n * Instruments the `cron` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { CronJob } from 'cron';\n *\n * const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n *\n * // use the constructor\n * const job = new CronJobWithCheckIn('* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n *\n * // or from\n * const job = CronJobWithCheckIn.from({ cronTime: '* * * * *', onTick: () => {\n *   console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentCron(lib, monitorSlug) {\n  let jobScheduled = false;\n  return new Proxy(lib, {\n    construct(target, args) {\n      const [cronTime, onTick, onComplete, start, timeZone, ...rest] = args;\n      if (typeof cronTime !== 'string') {\n        throw new Error(ERROR_TEXT);\n      }\n      if (jobScheduled) {\n        throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n      }\n      jobScheduled = true;\n      const cronString = common.replaceCronNames(cronTime);\n      async function monitoredTick(context, onComplete) {\n        return core.withMonitor(monitorSlug, async () => {\n          try {\n            await onTick(context, onComplete);\n          } catch (e) {\n            core.captureException(e);\n            throw e;\n          }\n        }, {\n          schedule: {\n            type: 'crontab',\n            value: cronString\n          },\n          timezone: timeZone || undefined\n        });\n      }\n      return new target(cronTime, monitoredTick, onComplete, start, timeZone, ...rest);\n    },\n    get(target, prop) {\n      if (prop === 'from') {\n        return param => {\n          const {\n            cronTime,\n            onTick,\n            timeZone\n          } = param;\n          if (typeof cronTime !== 'string') {\n            throw new Error(ERROR_TEXT);\n          }\n          if (jobScheduled) {\n            throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n          }\n          jobScheduled = true;\n          const cronString = common.replaceCronNames(cronTime);\n          param.onTick = async (context, onComplete) => {\n            return core.withMonitor(monitorSlug, async () => {\n              try {\n                await onTick(context, onComplete);\n              } catch (e) {\n                core.captureException(e);\n                throw e;\n              }\n            }, {\n              schedule: {\n                type: 'crontab',\n                value: cronString\n              },\n              timezone: timeZone || undefined\n            });\n          };\n          return target.from(param);\n        };\n      } else {\n        return target[prop];\n      }\n    }\n  });\n}\nexports.instrumentCron = instrumentCron;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/cron/cron.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/cron/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/cron/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst cron$1 = __webpack_require__(/*! ./cron.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/cron/cron.js\");\nconst nodeCron = __webpack_require__(/*! ./node-cron.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/cron/node-cron.js\");\nconst nodeSchedule = __webpack_require__(/*! ./node-schedule.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/cron/node-schedule.js\");\n\n/** Methods to instrument cron libraries for Sentry check-ins */\nconst cron = {\n  instrumentCron: cron$1.instrumentCron,\n  instrumentNodeCron: nodeCron.instrumentNodeCron,\n  instrumentNodeSchedule: nodeSchedule.instrumentNodeSchedule\n};\nexports.cron = cron;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxrRkFBVyxDQUFDO0FBQ25DLE1BQU1DLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyw0RkFBZ0IsQ0FBQztBQUMxQyxNQUFNRSxZQUFZLEdBQUdGLG1CQUFPLENBQUMsb0dBQW9CLENBQUM7O0FBRWxEO0FBQ0EsTUFBTUcsSUFBSSxHQUFHO0VBQ1hDLGNBQWMsRUFBRUwsTUFBTSxDQUFDSyxjQUFjO0VBQ3JDQyxrQkFBa0IsRUFBRUosUUFBUSxDQUFDSSxrQkFBa0I7RUFDL0NDLHNCQUFzQixFQUFFSixZQUFZLENBQUNJO0FBQ3ZDLENBQUM7QUFFRFQsWUFBWSxHQUFHTSxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9pbmRleC5qcz85YzZhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNyb24kMSA9IHJlcXVpcmUoJy4vY3Jvbi5qcycpO1xuY29uc3Qgbm9kZUNyb24gPSByZXF1aXJlKCcuL25vZGUtY3Jvbi5qcycpO1xuY29uc3Qgbm9kZVNjaGVkdWxlID0gcmVxdWlyZSgnLi9ub2RlLXNjaGVkdWxlLmpzJyk7XG5cbi8qKiBNZXRob2RzIHRvIGluc3RydW1lbnQgY3JvbiBsaWJyYXJpZXMgZm9yIFNlbnRyeSBjaGVjay1pbnMgKi9cbmNvbnN0IGNyb24gPSB7XG4gIGluc3RydW1lbnRDcm9uOiBjcm9uJDEuaW5zdHJ1bWVudENyb24sXG4gIGluc3RydW1lbnROb2RlQ3Jvbjogbm9kZUNyb24uaW5zdHJ1bWVudE5vZGVDcm9uLFxuICBpbnN0cnVtZW50Tm9kZVNjaGVkdWxlOiBub2RlU2NoZWR1bGUuaW5zdHJ1bWVudE5vZGVTY2hlZHVsZSxcbn07XG5cbmV4cG9ydHMuY3JvbiA9IGNyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyb24kMSIsInJlcXVpcmUiLCJub2RlQ3JvbiIsIm5vZGVTY2hlZHVsZSIsImNyb24iLCJpbnN0cnVtZW50Q3JvbiIsImluc3RydW1lbnROb2RlQ3JvbiIsImluc3RydW1lbnROb2RlU2NoZWR1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/cron/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/cron/node-cron.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/cron/node-cron.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import * as cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nfunction instrumentNodeCron(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray) {\n            const [expression, callback, options] = argArray;\n            if (!_optionalChain([options, 'optionalAccess', _ => _.name])) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n            async function monitoredCallback() {\n              return core.withMonitor(options.name, async () => {\n                // We have to manually catch here and capture the exception because node-cron swallows errors\n                // https://github.com/node-cron/node-cron/issues/399\n                try {\n                  return await callback();\n                } catch (e) {\n                  core.captureException(e);\n                  throw e;\n                }\n              }, {\n                schedule: {\n                  type: 'crontab',\n                  value: common.replaceCronNames(expression)\n                },\n                timezone: _optionalChain([options, 'optionalAccess', _2 => _2.timezone])\n              });\n            }\n            return target.apply(thisArg, [expression, monitoredCallback, options]);\n          }\n        });\n      } else {\n        return target[prop];\n      }\n    }\n  });\n}\nexports.instrumentNodeCron = instrumentNodeCron;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9ub2RlLWNyb24uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJO0VBQ0ZBO0FBQ0YsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFFM0JDLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHTCxtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFDcEMsTUFBTU0sTUFBTSxHQUFHTixtQkFBTyxDQUFDLHNGQUFhLENBQUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNPLGtCQUFrQkEsQ0FBQ0MsR0FBRyxFQUFFO0VBQy9CLE9BQU8sSUFBSUMsS0FBSyxDQUFDRCxHQUFHLEVBQUU7SUFDcEJFLEdBQUdBLENBQUNDLE1BQU0sRUFBRUMsSUFBSSxFQUFFO01BQ2hCLElBQUlBLElBQUksS0FBSyxVQUFVLElBQUlELE1BQU0sQ0FBQ0UsUUFBUSxFQUFFO1FBQzFDO1FBQ0EsT0FBTyxJQUFJSixLQUFLLENBQUNFLE1BQU0sQ0FBQ0UsUUFBUSxFQUFFO1VBQ2hDQyxLQUFLQSxDQUFDSCxNQUFNLEVBQUVJLE9BQU8sRUFBRUMsUUFBUSxFQUFFO1lBQy9CLE1BQU0sQ0FBQ0MsVUFBVSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sQ0FBQyxHQUFHSCxRQUFRO1lBRWhELElBQUksQ0FBQ2pCLGNBQWMsQ0FBQyxDQUFDb0IsT0FBTyxFQUFFLGdCQUFnQixFQUFFQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsRUFBRTtjQUM3RCxNQUFNLElBQUlDLEtBQUssQ0FBQyxzRkFBc0YsQ0FBQztZQUN6RztZQUVBLGVBQWVDLGlCQUFpQkEsQ0FBQSxFQUFHO2NBQ2pDLE9BQU9sQixJQUFJLENBQUNtQixXQUFXLENBQ3JCTCxPQUFPLENBQUNFLElBQUksRUFDWixZQUFZO2dCQUNWO2dCQUNBO2dCQUNBLElBQUk7a0JBQ0YsT0FBTyxNQUFNSCxRQUFRLENBQUMsQ0FBQztnQkFDekIsQ0FBQyxDQUFDLE9BQU9PLENBQUMsRUFBRTtrQkFDVnBCLElBQUksQ0FBQ3FCLGdCQUFnQixDQUFDRCxDQUFDLENBQUM7a0JBQ3hCLE1BQU1BLENBQUM7Z0JBQ1Q7Y0FDRixDQUFDLEVBQ0Q7Z0JBQ0VaLFFBQVEsRUFBRTtrQkFBRWMsSUFBSSxFQUFFLFNBQVM7a0JBQUV2QixLQUFLLEVBQUVFLE1BQU0sQ0FBQ3NCLGdCQUFnQixDQUFDWCxVQUFVO2dCQUFFLENBQUM7Z0JBQ3pFWSxRQUFRLEVBQUU5QixjQUFjLENBQUMsQ0FBQ29CLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRVcsRUFBRSxJQUFJQSxFQUFFLENBQUNELFFBQVEsQ0FBQztjQUN6RSxDQUNGLENBQUM7WUFDSDtZQUVBLE9BQU9sQixNQUFNLENBQUNHLEtBQUssQ0FBQ0MsT0FBTyxFQUFFLENBQUNFLFVBQVUsRUFBRU0saUJBQWlCLEVBQUVKLE9BQU8sQ0FBQyxDQUFDO1VBQ3hFO1FBQ0YsQ0FBQyxDQUFDO01BQ0osQ0FBQyxNQUFNO1FBQ0wsT0FBT1IsTUFBTSxDQUFDQyxJQUFJLENBQUM7TUFDckI7SUFDRjtFQUNGLENBQUMsQ0FBQztBQUNKO0FBRUFULDBCQUEwQixHQUFHSSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9jcm9uL25vZGUtY3Jvbi5qcz8zODlhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgdGhlIGBub2RlLWNyb25gIGxpYnJhcnkgd2l0aCBjaGVjay1pbiBtb25pdG9yaW5nLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSBcIkBzZW50cnkvbm9kZVwiO1xuICogaW1wb3J0ICogYXMgY3JvbiBmcm9tIFwibm9kZS1jcm9uXCI7XG4gKlxuICogY29uc3QgY3JvbldpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudE5vZGVDcm9uKGNyb24pO1xuICpcbiAqIGNyb25XaXRoQ2hlY2tJbi5zY2hlZHVsZShcbiAqICAgXCIqICogKiAqICpcIixcbiAqICAgKCkgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKFwicnVubmluZyBhIHRhc2sgZXZlcnkgbWludXRlXCIpO1xuICogICB9LFxuICogICB7IG5hbWU6IFwibXktY3Jvbi1qb2JcIiB9LFxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Tm9kZUNyb24obGliKSB7XG4gIHJldHVybiBuZXcgUHJveHkobGliLCB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKHByb3AgPT09ICdzY2hlZHVsZScgJiYgdGFyZ2V0LnNjaGVkdWxlKSB7XG4gICAgICAgIC8vIFdoZW4gJ2dldCcgaXMgY2FsbGVkIGZvciBzY2hlZHVsZSwgcmV0dXJuIGEgcHJveGllZCB2ZXJzaW9uIG9mIHRoZSBzY2hlZHVsZSBmdW5jdGlvblxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldC5zY2hlZHVsZSwge1xuICAgICAgICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IFtleHByZXNzaW9uLCBjYWxsYmFjaywgb3B0aW9uc10gPSBhcmdBcnJheTtcblxuICAgICAgICAgICAgaWYgKCFfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLm5hbWVdKSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgXCJuYW1lXCIgZm9yIHNjaGVkdWxlZCBqb2IuIEEgbmFtZSBpcyByZXF1aXJlZCBmb3IgU2VudHJ5IGNoZWNrLWluIG1vbml0b3JpbmcuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFzeW5jIGZ1bmN0aW9uIG1vbml0b3JlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgICByZXR1cm4gY29yZS53aXRoTW9uaXRvcihcbiAgICAgICAgICAgICAgICBvcHRpb25zLm5hbWUsXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBtYW51YWxseSBjYXRjaCBoZXJlIGFuZCBjYXB0dXJlIHRoZSBleGNlcHRpb24gYmVjYXVzZSBub2RlLWNyb24gc3dhbGxvd3MgZXJyb3JzXG4gICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZS1jcm9uL25vZGUtY3Jvbi9pc3N1ZXMvMzk5XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGUpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoZXhwcmVzc2lvbikgfSxcbiAgICAgICAgICAgICAgICAgIHRpbWV6b25lOiBfb3B0aW9uYWxDaGFpbihbb3B0aW9ucywgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIudGltZXpvbmVdKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIFtleHByZXNzaW9uLCBtb25pdG9yZWRDYWxsYmFjaywgb3B0aW9uc10pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50Tm9kZUNyb24gPSBpbnN0cnVtZW50Tm9kZUNyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLWNyb24uanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb3JlIiwiY29tbW9uIiwiaW5zdHJ1bWVudE5vZGVDcm9uIiwibGliIiwiUHJveHkiLCJnZXQiLCJ0YXJnZXQiLCJwcm9wIiwic2NoZWR1bGUiLCJhcHBseSIsInRoaXNBcmciLCJhcmdBcnJheSIsImV4cHJlc3Npb24iLCJjYWxsYmFjayIsIm9wdGlvbnMiLCJfIiwibmFtZSIsIkVycm9yIiwibW9uaXRvcmVkQ2FsbGJhY2siLCJ3aXRoTW9uaXRvciIsImUiLCJjYXB0dXJlRXhjZXB0aW9uIiwidHlwZSIsInJlcGxhY2VDcm9uTmFtZXMiLCJ0aW1lem9uZSIsIl8yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/cron/node-cron.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/cron/node-schedule.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/cron/node-schedule.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/cron/common.js\");\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentNodeSchedule(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray) {\n            const [nameOrExpression, expressionOrCallback, callback] = argArray;\n            if (typeof nameOrExpression !== 'string' || typeof expressionOrCallback !== 'string' || typeof callback !== 'function') {\n              throw new Error(\"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\");\n            }\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n            async function monitoredCallback() {\n              return core.withMonitor(monitorSlug, async () => {\n                await _optionalChain([callback, 'optionalCall', _ => _()]);\n              }, {\n                schedule: {\n                  type: 'crontab',\n                  value: common.replaceCronNames(expression)\n                }\n              });\n            }\n            return target.apply(thisArg, [monitorSlug, expression, monitoredCallback]);\n          }\n        });\n      }\n      return target[prop];\n    }\n  });\n}\nexports.instrumentNodeSchedule = instrumentNodeSchedule;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvY3Jvbi9ub2RlLXNjaGVkdWxlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSTtFQUNGQTtBQUNGLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBRTNCQyw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLElBQUksR0FBR0wsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBQ3BDLE1BQU1NLE1BQU0sR0FBR04sbUJBQU8sQ0FBQyxzRkFBYSxDQUFDOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU08sc0JBQXNCQSxDQUFDQyxHQUFHLEVBQUU7RUFDbkMsT0FBTyxJQUFJQyxLQUFLLENBQUNELEdBQUcsRUFBRTtJQUNwQkUsR0FBR0EsQ0FBQ0MsTUFBTSxFQUFFQyxJQUFJLEVBQUU7TUFDaEIsSUFBSUEsSUFBSSxLQUFLLGFBQWEsRUFBRTtRQUMxQjtRQUNBLE9BQU8sSUFBSUgsS0FBSyxDQUFDRSxNQUFNLENBQUNFLFdBQVcsRUFBRTtVQUNuQ0MsS0FBS0EsQ0FBQ0gsTUFBTSxFQUFFSSxPQUFPLEVBQUVDLFFBQVEsRUFBRTtZQUMvQixNQUFNLENBQUNDLGdCQUFnQixFQUFFQyxvQkFBb0IsRUFBRUMsUUFBUSxDQUFDLEdBQUdILFFBQVE7WUFFbkUsSUFDRSxPQUFPQyxnQkFBZ0IsS0FBSyxRQUFRLElBQ3BDLE9BQU9DLG9CQUFvQixLQUFLLFFBQVEsSUFDeEMsT0FBT0MsUUFBUSxLQUFLLFVBQVUsRUFDOUI7Y0FDQSxNQUFNLElBQUlDLEtBQUssQ0FDYixvS0FDRixDQUFDO1lBQ0g7WUFFQSxNQUFNQyxXQUFXLEdBQUdKLGdCQUFnQjtZQUNwQyxNQUFNSyxVQUFVLEdBQUdKLG9CQUFvQjtZQUV2QyxlQUFlSyxpQkFBaUJBLENBQUEsRUFBRztjQUNqQyxPQUFPbEIsSUFBSSxDQUFDbUIsV0FBVyxDQUNyQkgsV0FBVyxFQUNYLFlBQVk7Z0JBQ1YsTUFBTXRCLGNBQWMsQ0FBQyxDQUFDb0IsUUFBUSxFQUFFLGNBQWMsRUFBRU0sQ0FBQyxJQUFJQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Y0FDNUQsQ0FBQyxFQUNEO2dCQUNFQyxRQUFRLEVBQUU7a0JBQUVDLElBQUksRUFBRSxTQUFTO2tCQUFFdkIsS0FBSyxFQUFFRSxNQUFNLENBQUNzQixnQkFBZ0IsQ0FBQ04sVUFBVTtnQkFBRTtjQUMxRSxDQUNGLENBQUM7WUFDSDtZQUVBLE9BQU9YLE1BQU0sQ0FBQ0csS0FBSyxDQUFDQyxPQUFPLEVBQUUsQ0FBQ00sV0FBVyxFQUFFQyxVQUFVLEVBQUVDLGlCQUFpQixDQUFDLENBQUM7VUFDNUU7UUFDRixDQUFDLENBQUM7TUFDSjtNQUVBLE9BQU9aLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDO0lBQ3JCO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQVQsOEJBQThCLEdBQUdJLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2Nyb24vbm9kZS1zY2hlZHVsZS5qcz9mNDUwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbi8qKlxuICogSW5zdHJ1bWVudHMgdGhlIGBub2RlLXNjaGVkdWxlYCBsaWJyYXJ5IHRvIHNlbmQgYSBjaGVjay1pbiBldmVudCB0byBTZW50cnkgZm9yIGVhY2ggam9iIGV4ZWN1dGlvbi5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKiBpbXBvcnQgKiBhcyBzY2hlZHVsZSBmcm9tICdub2RlLXNjaGVkdWxlJztcbiAqXG4gKiBjb25zdCBzY2hlZHVsZVdpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudE5vZGVTY2hlZHVsZShzY2hlZHVsZSk7XG4gKlxuICogY29uc3Qgam9iID0gc2NoZWR1bGVXaXRoQ2hlY2tJbi5zY2hlZHVsZUpvYignbXktY3Jvbi1qb2InLCAnKiAqICogKiAqJywgKCkgPT4ge1xuICogIGNvbnNvbGUubG9nKCdZb3Ugd2lsbCBzZWUgdGhpcyBtZXNzYWdlIGV2ZXJ5IG1pbnV0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE5vZGVTY2hlZHVsZShsaWIpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShsaWIsIHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ3NjaGVkdWxlSm9iJykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LnNjaGVkdWxlSm9iLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdBcnJheSkge1xuICAgICAgICAgICAgY29uc3QgW25hbWVPckV4cHJlc3Npb24sIGV4cHJlc3Npb25PckNhbGxiYWNrLCBjYWxsYmFja10gPSBhcmdBcnJheTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0eXBlb2YgbmFtZU9yRXhwcmVzc2lvbiAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgdHlwZW9mIGV4cHJlc3Npb25PckNhbGxiYWNrICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJBdXRvbWF0aWMgaW5zdHJ1bWVudGF0aW9uIG9mICdub2RlLXNjaGVkdWxlJyByZXF1aXJlcyB0aGUgZmlyc3QgcGFyYW1ldGVyIG9mICdzY2hlZHVsZUpvYicgdG8gYmUgYSBqb2IgbmFtZSBzdHJpbmcgYW5kIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIGJlIGEgY3JvbnRhYiBzdHJpbmdcIixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbW9uaXRvclNsdWcgPSBuYW1lT3JFeHByZXNzaW9uO1xuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb25PckNhbGxiYWNrO1xuXG4gICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBtb25pdG9yZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgX29wdGlvbmFsQ2hhaW4oW2NhbGxiYWNrLCAnb3B0aW9uYWxDYWxsJywgXyA9PiBfKCldKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHNjaGVkdWxlOiB7IHR5cGU6ICdjcm9udGFiJywgdmFsdWU6IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGV4cHJlc3Npb24pIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBbbW9uaXRvclNsdWcsIGV4cHJlc3Npb24sIG1vbml0b3JlZENhbGxiYWNrXSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE5vZGVTY2hlZHVsZSA9IGluc3RydW1lbnROb2RlU2NoZWR1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXNjaGVkdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9vcHRpb25hbENoYWluIiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29yZSIsImNvbW1vbiIsImluc3RydW1lbnROb2RlU2NoZWR1bGUiLCJsaWIiLCJQcm94eSIsImdldCIsInRhcmdldCIsInByb3AiLCJzY2hlZHVsZUpvYiIsImFwcGx5IiwidGhpc0FyZyIsImFyZ0FycmF5IiwibmFtZU9yRXhwcmVzc2lvbiIsImV4cHJlc3Npb25PckNhbGxiYWNrIiwiY2FsbGJhY2siLCJFcnJvciIsIm1vbml0b3JTbHVnIiwiZXhwcmVzc2lvbiIsIm1vbml0b3JlZENhbGxiYWNrIiwid2l0aE1vbml0b3IiLCJfIiwic2NoZWR1bGUiLCJ0eXBlIiwicmVwbGFjZUNyb25OYW1lcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/cron/node-schedule.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/debug-build.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nexports.DEBUG_BUILD = DEBUG_BUILD;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFdBQVcsR0FBSSxPQUFPQyxnQkFBZ0IsS0FBSyxXQUFXLElBQUlBLGdCQUFpQjtBQUVqRkgsbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcz9lMDgzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhpcyBzZXJ2ZXMgYXMgYSBidWlsZCB0aW1lIGZsYWcgdGhhdCB3aWxsIGJlIHRydWUgYnkgZGVmYXVsdCwgYnV0IGZhbHNlIGluIG5vbi1kZWJ1ZyBidWlsZHMgb3IgaWYgdXNlcnMgcmVwbGFjZSBgX19TRU5UUllfREVCVUdfX2AgaW4gdGhlaXIgZ2VuZXJhdGVkIGNvZGUuXG4gKlxuICogQVRURU5USU9OOiBUaGlzIGNvbnN0YW50IG11c3QgbmV2ZXIgY3Jvc3MgcGFja2FnZSBib3VuZGFyaWVzIChpLmUuIGJlIGV4cG9ydGVkKSB0byBndWFyYW50ZWUgdGhhdCBpdCBjYW4gYmUgdXNlZCBmb3IgdHJlZSBzaGFraW5nLlxuICovXG5jb25zdCBERUJVR19CVUlMRCA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbmV4cG9ydHMuREVCVUdfQlVJTEQgPSBERUJVR19CVUlMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLWJ1aWxkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiREVCVUdfQlVJTEQiLCJfX1NFTlRSWV9ERUJVR19fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst index = __webpack_require__(/*! ./integrations/http/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst nodeFetch = __webpack_require__(/*! ./integrations/node-fetch.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst fs = __webpack_require__(/*! ./integrations/fs.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/fs.js\");\nconst console = __webpack_require__(/*! ./integrations/console.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ./integrations/context.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ./integrations/contextlines.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/local-variables/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ./integrations/modules.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst onuncaughtexception = __webpack_require__(/*! ./integrations/onuncaughtexception.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ./integrations/onunhandledrejection.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/anr/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/anr/index.js\");\nconst express = __webpack_require__(/*! ./integrations/tracing/express.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./integrations/tracing/fastify.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst graphql = __webpack_require__(/*! ./integrations/tracing/graphql.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst kafka = __webpack_require__(/*! ./integrations/tracing/kafka.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst lrumemoizer = __webpack_require__(/*! ./integrations/tracing/lrumemoizer.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./integrations/tracing/mongo.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./integrations/tracing/mongoose.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./integrations/tracing/mysql.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./integrations/tracing/mysql2.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst redis = __webpack_require__(/*! ./integrations/tracing/redis.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst nest = __webpack_require__(/*! ./integrations/tracing/nest/nest.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./integrations/tracing/postgres.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst prisma = __webpack_require__(/*! ./integrations/tracing/prisma.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/tracing/hapi/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst koa = __webpack_require__(/*! ./integrations/tracing/koa.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst connect = __webpack_require__(/*! ./integrations/tracing/connect.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst spotlight = __webpack_require__(/*! ./integrations/spotlight.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst knex = __webpack_require__(/*! ./integrations/tracing/knex.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\");\nconst tedious = __webpack_require__(/*! ./integrations/tracing/tedious.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst genericPool = __webpack_require__(/*! ./integrations/tracing/genericPool.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst dataloader = __webpack_require__(/*! ./integrations/tracing/dataloader.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\");\nconst amqplib = __webpack_require__(/*! ./integrations/tracing/amqplib.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst childProcess = __webpack_require__(/*! ./integrations/childProcess.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/childProcess.js\");\nconst contextManager = __webpack_require__(/*! ./otel/contextManager.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst instrument = __webpack_require__(/*! ./otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst index$4 = __webpack_require__(/*! ./sdk/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/sdk/index.js\");\nconst initOtel = __webpack_require__(/*! ./sdk/initOtel.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nconst index$5 = __webpack_require__(/*! ./integrations/tracing/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst api = __webpack_require__(/*! ./sdk/api.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst module$1 = __webpack_require__(/*! ./utils/module.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/module.js\");\nconst http = __webpack_require__(/*! ./transports/http.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst client = __webpack_require__(/*! ./sdk/client.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst index$6 = __webpack_require__(/*! ./cron/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/cron/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nexports.httpIntegration = index.httpIntegration;\nexports.nativeNodeFetchIntegration = nodeFetch.nativeNodeFetchIntegration;\nexports.fsIntegration = fs.fsIntegration;\nexports.consoleIntegration = console.consoleIntegration;\nexports.nodeContextIntegration = context.nodeContextIntegration;\nexports.contextLinesIntegration = contextlines.contextLinesIntegration;\nexports.localVariablesIntegration = index$1.localVariablesIntegration;\nexports.modulesIntegration = modules.modulesIntegration;\nexports.onUncaughtExceptionIntegration = onuncaughtexception.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = onunhandledrejection.onUnhandledRejectionIntegration;\nexports.anrIntegration = index$2.anrIntegration;\nexports.disableAnrDetectionForCallback = index$2.disableAnrDetectionForCallback;\nexports.expressErrorHandler = express.expressErrorHandler;\nexports.expressIntegration = express.expressIntegration;\nexports.setupExpressErrorHandler = express.setupExpressErrorHandler;\nexports.fastifyIntegration = fastify.fastifyIntegration;\nexports.setupFastifyErrorHandler = fastify.setupFastifyErrorHandler;\nexports.graphqlIntegration = graphql.graphqlIntegration;\nexports.kafkaIntegration = kafka.kafkaIntegration;\nexports.lruMemoizerIntegration = lrumemoizer.lruMemoizerIntegration;\nexports.mongoIntegration = mongo.mongoIntegration;\nexports.mongooseIntegration = mongoose.mongooseIntegration;\nexports.mysqlIntegration = mysql.mysqlIntegration;\nexports.mysql2Integration = mysql2.mysql2Integration;\nexports.redisIntegration = redis.redisIntegration;\nexports.nestIntegration = nest.nestIntegration;\nexports.setupNestErrorHandler = nest.setupNestErrorHandler;\nexports.postgresIntegration = postgres.postgresIntegration;\nexports.prismaIntegration = prisma.prismaIntegration;\nexports.hapiIntegration = index$3.hapiIntegration;\nexports.setupHapiErrorHandler = index$3.setupHapiErrorHandler;\nexports.koaIntegration = koa.koaIntegration;\nexports.setupKoaErrorHandler = koa.setupKoaErrorHandler;\nexports.connectIntegration = connect.connectIntegration;\nexports.setupConnectErrorHandler = connect.setupConnectErrorHandler;\nexports.spotlightIntegration = spotlight.spotlightIntegration;\nexports.knexIntegration = knex.knexIntegration;\nexports.tediousIntegration = tedious.tediousIntegration;\nexports.genericPoolIntegration = genericPool.genericPoolIntegration;\nexports.dataloaderIntegration = dataloader.dataloaderIntegration;\nexports.amqplibIntegration = amqplib.amqplibIntegration;\nexports.childProcessIntegration = childProcess.childProcessIntegration;\nexports.processThreadBreadcrumbIntegration = childProcess.processThreadBreadcrumbIntegration;\nexports.SentryContextManager = contextManager.SentryContextManager;\nexports.generateInstrumentOnce = instrument.generateInstrumentOnce;\nexports.getDefaultIntegrations = index$4.getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = index$4.getDefaultIntegrationsWithoutPerformance;\nexports.init = index$4.init;\nexports.initWithoutDefaultIntegrations = index$4.initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = index$4.validateOpenTelemetrySetup;\nexports.initOpenTelemetry = initOtel.initOpenTelemetry;\nexports.preloadOpenTelemetry = initOtel.preloadOpenTelemetry;\nexports.getAutoPerformanceIntegrations = index$5.getAutoPerformanceIntegrations;\nexports.defaultStackParser = api.defaultStackParser;\nexports.getSentryRelease = api.getSentryRelease;\nexports.createGetModuleFromFilename = module$1.createGetModuleFromFilename;\nexports.makeNodeTransport = http.makeNodeTransport;\nexports.NodeClient = client.NodeClient;\nexports.cron = index$6.cron;\nexports.DEFAULT_USER_INCLUDES = core.DEFAULT_USER_INCLUDES;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.addRequestDataToEvent = core.addRequestDataToEvent;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.continueTrace = core.continueTrace;\nexports.createTransport = core.createTransport;\nexports.debugIntegration = core.debugIntegration;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.extractRequestData = core.extractRequestData;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentHub = core.getCurrentHub;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.metrics = core.metricsDefault;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.sessionTimingIntegration = core.sessionTimingIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.updateSpanName = core.updateSpanName;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\nexports.addOpenTelemetryInstrumentation = opentelemetry.addOpenTelemetryInstrumentation;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/anr/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/anr/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain,\n  _optionalChainDelete\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/debug.js\");\nconst {\n  isPromise\n} = util.types;\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = '';\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\nfunction log(message, ...args) {\n  core.logger.log(`[ANR] ${message}`, ...args);\n}\nfunction globalWithScopeFetchFn() {\n  return core.GLOBAL_OBJ;\n}\n\n/** Fetches merged scope data */\nfunction getScopeData() {\n  const scope = core.getGlobalScope().getScopeData();\n  core.mergeScopeData(scope, core.getIsolationScope().getScopeData());\n  core.mergeScopeData(scope, core.getCurrentScope().getScopeData());\n\n  // We remove attachments because they likely won't serialize well as json\n  scope.attachments = [];\n  // We can't serialize event processor functions\n  scope.eventProcessors = [];\n  return scope;\n}\n\n/**\n * Gets contexts by calling all event processors. This shouldn't be called until all integrations are setup\n */\nasync function getContexts(client) {\n  let event = {\n    message: 'ANR'\n  };\n  const eventHint = {};\n  for (const processor of client.getEventProcessors()) {\n    if (event === null) break;\n    event = await processor(event, eventHint);\n  }\n  return _optionalChain([event, 'optionalAccess', _2 => _2.contexts]) || {};\n}\nconst INTEGRATION_NAME = 'Anr';\nconst _anrIntegration = (options = {}) => {\n  if (nodeVersion.NODE_VERSION.major < 16 || nodeVersion.NODE_VERSION.major === 16 && nodeVersion.NODE_VERSION.minor < 17) {\n    throw new Error('ANR detection requires Node 16.17.0 or later');\n  }\n  let worker;\n  let client;\n\n  // Hookup the scope fetch function to the global object so that it can be called from the worker thread via the\n  // debugger when it pauses\n  const gbl = globalWithScopeFetchFn();\n  gbl.__SENTRY_GET_SCOPES__ = getScopeData;\n  return {\n    name: INTEGRATION_NAME,\n    startWorker: () => {\n      if (worker) {\n        return;\n      }\n      if (client) {\n        worker = _startWorker(client, options);\n      }\n    },\n    stopWorker: () => {\n      if (worker) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        worker.then(stop => {\n          stop();\n          worker = undefined;\n        });\n      }\n    },\n    async setup(initClient) {\n      client = initClient;\n      if (options.captureStackTrace && (await debug.isDebuggerEnabled())) {\n        core.logger.warn('ANR captureStackTrace has been disabled because the debugger was already enabled');\n        options.captureStackTrace = false;\n      }\n\n      // setImmediate is used to ensure that all other integrations have had their setup called first.\n      // This allows us to call into all integrations to fetch the full context\n      setImmediate(() => this.startWorker());\n    }\n  };\n};\nconst anrIntegration = core.defineIntegration(_anrIntegration);\n\n/**\n * Starts the ANR worker thread\n *\n * @returns A function to stop the worker\n */\nasync function _startWorker(client, integrationOptions) {\n  const dsn = client.getDsn();\n  if (!dsn) {\n    return () => {\n      //\n    };\n  }\n  const contexts = await getContexts(client);\n\n  // These will not be accurate if sent later from the worker thread\n  _optionalChainDelete([contexts, 'access', _3 => _3.app, 'optionalAccess', _4 => delete _4.app_memory]);\n  _optionalChainDelete([contexts, 'access', _5 => _5.device, 'optionalAccess', _6 => delete _6.free_memory]);\n  const initOptions = client.getOptions();\n  const sdkMetadata = client.getSdkMetadata() || {};\n  if (sdkMetadata.sdk) {\n    sdkMetadata.sdk.integrations = initOptions.integrations.map(i => i.name);\n  }\n  const options = {\n    debug: core.logger.isEnabled(),\n    dsn,\n    tunnel: initOptions.tunnel,\n    environment: initOptions.environment || 'production',\n    release: initOptions.release,\n    dist: initOptions.dist,\n    sdkMetadata,\n    appRootPath: integrationOptions.appRootPath,\n    pollInterval: integrationOptions.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: integrationOptions.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!integrationOptions.captureStackTrace,\n    maxAnrEvents: integrationOptions.maxAnrEvents || 1,\n    staticTags: integrationOptions.staticTags || {},\n    contexts\n  };\n  if (options.captureStackTrace) {\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n  const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n    workerData: options,\n    // We don't want any Node args to be passed to the worker\n    execArgv: [],\n    env: {\n      ...process.env,\n      NODE_OPTIONS: undefined\n    }\n  });\n  process.on('exit', () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n  });\n  const timer = setInterval(() => {\n    try {\n      const currentSession = core.getCurrentScope().getSession();\n      // We need to copy the session object and remove the toJSON method so it can be sent to the worker\n      // serialized without making it a SerializedSession\n      const session = currentSession ? {\n        ...currentSession,\n        toJSON: undefined\n      } : undefined;\n      // message the worker to tell it the main event loop is still running\n      worker.postMessage({\n        session,\n        debugImages: core.getFilenameToDebugIdMap(initOptions.stackParser)\n      });\n    } catch (_) {\n      //\n    }\n  }, options.pollInterval);\n  // Timer should not block exit\n  timer.unref();\n  worker.on('message', msg => {\n    if (msg === 'session-ended') {\n      log('ANR event sent from ANR worker. Clearing session in this thread.');\n      core.getCurrentScope().setSession(undefined);\n    }\n  });\n  worker.once('error', err => {\n    clearInterval(timer);\n    log('ANR worker error', err);\n  });\n  worker.once('exit', code => {\n    clearInterval(timer);\n    log('ANR worker exit', code);\n  });\n\n  // Ensure this thread can't block app exit\n  worker.unref();\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n    clearInterval(timer);\n  };\n}\n\n/**\n * Disables ANR detection for the duration of the callback\n */\nfunction disableAnrDetectionForCallback(callback) {\n  const integration = _optionalChain([core.getClient, 'call', _7 => _7(), 'optionalAccess', _8 => _8.getIntegrationByName, 'call', _9 => _9(INTEGRATION_NAME)]);\n  if (!integration) {\n    return callback();\n  }\n  integration.stopWorker();\n  const result = callback();\n  if (isPromise(result)) {\n    return result.finally(() => integration.startWorker());\n  }\n  integration.startWorker();\n  return result;\n}\nexports.anrIntegration = anrIntegration;\nexports.base64WorkerScript = base64WorkerScript;\nexports.disableAnrDetectionForCallback = disableAnrDetectionForCallback;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/anr/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/childProcess.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/childProcess.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n// TODO(v9): Update this name and mention in migration docs.\nconst INTEGRATION_NAME = 'ProcessAndThreadBreadcrumbs';\n\n/**\n * Capture breadcrumbs for child processes and worker threads.\n */\nconst childProcessIntegration = core.defineIntegration((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(_client) {\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('child_process').subscribe(event => {\n        if (event && typeof event === 'object' && 'process' in event) {\n          captureChildProcessEvents(event.process, options);\n        }\n      });\n\n      // eslint-disable-next-line deprecation/deprecation\n      diagnosticsChannel.channel('worker_threads').subscribe(event => {\n        if (event && typeof event === 'object' && 'worker' in event) {\n          captureWorkerThreadEvents(event.worker);\n        }\n      });\n    }\n  };\n});\n\n/**\n * Capture breadcrumbs for child processes and worker threads.\n *\n * @deprecated Use `childProcessIntegration` integration instead. Functionally they are the same. `processThreadBreadcrumbIntegration` will be removed in the next major version.\n */\nconst processThreadBreadcrumbIntegration = childProcessIntegration;\nfunction captureChildProcessEvents(child, options) {\n  let hasExited = false;\n  let data;\n  child.on('spawn', () => {\n    // This is Sentry getting macOS OS context\n    if (child.spawnfile === '/usr/bin/sw_vers') {\n      hasExited = true;\n      return;\n    }\n    data = {\n      spawnfile: child.spawnfile\n    };\n    if (options.includeChildProcessArgs) {\n      data.spawnargs = child.spawnargs;\n    }\n  }).on('exit', code => {\n    if (!hasExited) {\n      hasExited = true;\n\n      // Only log for non-zero exit codes\n      if (code !== null && code !== 0) {\n        core.addBreadcrumb({\n          category: 'child_process',\n          message: `Child process exited with code '${code}'`,\n          level: 'warning',\n          data\n        });\n      }\n    }\n  }).on('error', error => {\n    if (!hasExited) {\n      hasExited = true;\n      core.addBreadcrumb({\n        category: 'child_process',\n        message: `Child process errored with '${error.message}'`,\n        level: 'error',\n        data\n      });\n    }\n  });\n}\nfunction captureWorkerThreadEvents(worker) {\n  let threadId;\n  worker.on('online', () => {\n    threadId = worker.threadId;\n  }).on('error', error => {\n    core.addBreadcrumb({\n      category: 'worker_thread',\n      message: `Worker thread errored with '${error.message}'`,\n      level: 'error',\n      data: {\n        threadId\n      }\n    });\n  });\n}\nexports.childProcessIntegration = childProcessIntegration;\nexports.processThreadBreadcrumbIntegration = processThreadBreadcrumbIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NoaWxkUHJvY2Vzcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLGtCQUFrQixHQUFHQyxtQkFBTyxDQUFDLDBEQUEwQixDQUFDO0FBQzlELE1BQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDOztBQUVwQztBQUNBLE1BQU1FLGdCQUFnQixHQUFHLDZCQUE2Qjs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUdGLElBQUksQ0FBQ0csaUJBQWlCLENBQUMsQ0FBQ0MsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLO0VBQ3ZFLE9BQU87SUFDTEMsSUFBSSxFQUFFSixnQkFBZ0I7SUFDdEJLLEtBQUtBLENBQUNDLE9BQU8sRUFBRTtNQUNiO01BQ0FULGtCQUFrQixDQUFDVSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUNDLFNBQVMsQ0FBRUMsS0FBSyxJQUFLO1FBQy9ELElBQUlBLEtBQUssSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUFJLFNBQVMsSUFBSUEsS0FBSyxFQUFFO1VBQzVEQyx5QkFBeUIsQ0FBQ0QsS0FBSyxDQUFDRSxPQUFPLEVBQUdSLE9BQU8sQ0FBQztRQUNwRDtNQUNGLENBQUMsQ0FBQzs7TUFFRjtNQUNBTixrQkFBa0IsQ0FBQ1UsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNDLFNBQVMsQ0FBRUMsS0FBSyxJQUFLO1FBQ2hFLElBQUlBLEtBQUssSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSUEsS0FBSyxFQUFFO1VBQzNERyx5QkFBeUIsQ0FBQ0gsS0FBSyxDQUFDSSxNQUFPLENBQUM7UUFDMUM7TUFDRixDQUFDLENBQUM7SUFDSjtFQUNGLENBQUM7QUFDSCxDQUFDLENBQUM7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGtDQUFrQyxHQUFHYix1QkFBdUI7QUFFbEUsU0FBU1MseUJBQXlCQSxDQUFDSyxLQUFLLEVBQUVaLE9BQU8sRUFBRTtFQUNqRCxJQUFJYSxTQUFTLEdBQUcsS0FBSztFQUNyQixJQUFJQyxJQUFJO0VBRVJGLEtBQUssQ0FDRkcsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNO0lBQ2pCO0lBQ0EsSUFBSUgsS0FBSyxDQUFDSSxTQUFTLEtBQUssa0JBQWtCLEVBQUU7TUFDMUNILFNBQVMsR0FBRyxJQUFJO01BQ2hCO0lBQ0Y7SUFFQUMsSUFBSSxHQUFHO01BQUVFLFNBQVMsRUFBRUosS0FBSyxDQUFDSTtJQUFVLENBQUM7SUFDckMsSUFBSWhCLE9BQU8sQ0FBQ2lCLHVCQUF1QixFQUFFO01BQ25DSCxJQUFJLENBQUNJLFNBQVMsR0FBR04sS0FBSyxDQUFDTSxTQUFTO0lBQ2xDO0VBQ0YsQ0FBQyxDQUFDLENBQ0RILEVBQUUsQ0FBQyxNQUFNLEVBQUVJLElBQUksSUFBSTtJQUNsQixJQUFJLENBQUNOLFNBQVMsRUFBRTtNQUNkQSxTQUFTLEdBQUcsSUFBSTs7TUFFaEI7TUFDQSxJQUFJTSxJQUFJLEtBQUssSUFBSSxJQUFJQSxJQUFJLEtBQUssQ0FBQyxFQUFFO1FBQy9CdkIsSUFBSSxDQUFDd0IsYUFBYSxDQUFDO1VBQ2pCQyxRQUFRLEVBQUUsZUFBZTtVQUN6QkMsT0FBTyxFQUFHLG1DQUFrQ0gsSUFBSyxHQUFFO1VBQ25ESSxLQUFLLEVBQUUsU0FBUztVQUNoQlQ7UUFDRixDQUFDLENBQUM7TUFDSjtJQUNGO0VBQ0YsQ0FBQyxDQUFDLENBQ0RDLEVBQUUsQ0FBQyxPQUFPLEVBQUVTLEtBQUssSUFBSTtJQUNwQixJQUFJLENBQUNYLFNBQVMsRUFBRTtNQUNkQSxTQUFTLEdBQUcsSUFBSTtNQUVoQmpCLElBQUksQ0FBQ3dCLGFBQWEsQ0FBQztRQUNqQkMsUUFBUSxFQUFFLGVBQWU7UUFDekJDLE9BQU8sRUFBRywrQkFBOEJFLEtBQUssQ0FBQ0YsT0FBUSxHQUFFO1FBQ3hEQyxLQUFLLEVBQUUsT0FBTztRQUNkVDtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQyxDQUFDO0FBQ047QUFFQSxTQUFTTCx5QkFBeUJBLENBQUNDLE1BQU0sRUFBRTtFQUN6QyxJQUFJZSxRQUFRO0VBRVpmLE1BQU0sQ0FDSEssRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNO0lBQ2xCVSxRQUFRLEdBQUdmLE1BQU0sQ0FBQ2UsUUFBUTtFQUM1QixDQUFDLENBQUMsQ0FDRFYsRUFBRSxDQUFDLE9BQU8sRUFBRVMsS0FBSyxJQUFJO0lBQ3BCNUIsSUFBSSxDQUFDd0IsYUFBYSxDQUFDO01BQ2pCQyxRQUFRLEVBQUUsZUFBZTtNQUN6QkMsT0FBTyxFQUFHLCtCQUE4QkUsS0FBSyxDQUFDRixPQUFRLEdBQUU7TUFDeERDLEtBQUssRUFBRSxPQUFPO01BQ2RULElBQUksRUFBRTtRQUFFVztNQUFTO0lBQ25CLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNOO0FBRUFqQywrQkFBK0IsR0FBR00sdUJBQXVCO0FBQ3pETiwwQ0FBMEMsR0FBR21CLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9jaGlsZFByb2Nlc3MuanM/OWE2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBkaWFnbm9zdGljc0NoYW5uZWwgPSByZXF1aXJlKCdub2RlOmRpYWdub3N0aWNzX2NoYW5uZWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLy8gVE9ETyh2OSk6IFVwZGF0ZSB0aGlzIG5hbWUgYW5kIG1lbnRpb24gaW4gbWlncmF0aW9uIGRvY3MuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Byb2Nlc3NBbmRUaHJlYWRCcmVhZGNydW1icyc7XG5cbi8qKlxuICogQ2FwdHVyZSBicmVhZGNydW1icyBmb3IgY2hpbGQgcHJvY2Vzc2VzIGFuZCB3b3JrZXIgdGhyZWFkcy5cbiAqL1xuY29uc3QgY2hpbGRQcm9jZXNzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKF9jbGllbnQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgZGlhZ25vc3RpY3NDaGFubmVsLmNoYW5uZWwoJ2NoaWxkX3Byb2Nlc3MnKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudCAmJiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICdwcm9jZXNzJyBpbiBldmVudCkge1xuICAgICAgICAgIGNhcHR1cmVDaGlsZFByb2Nlc3NFdmVudHMoZXZlbnQucHJvY2VzcyAsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICBkaWFnbm9zdGljc0NoYW5uZWwuY2hhbm5lbCgnd29ya2VyX3RocmVhZHMnKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudCAmJiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICd3b3JrZXInIGluIGV2ZW50KSB7XG4gICAgICAgICAgY2FwdHVyZVdvcmtlclRocmVhZEV2ZW50cyhldmVudC53b3JrZXIgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pO1xuXG4vKipcbiAqIENhcHR1cmUgYnJlYWRjcnVtYnMgZm9yIGNoaWxkIHByb2Nlc3NlcyBhbmQgd29ya2VyIHRocmVhZHMuXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBjaGlsZFByb2Nlc3NJbnRlZ3JhdGlvbmAgaW50ZWdyYXRpb24gaW5zdGVhZC4gRnVuY3Rpb25hbGx5IHRoZXkgYXJlIHRoZSBzYW1lLiBgcHJvY2Vzc1RocmVhZEJyZWFkY3J1bWJJbnRlZ3JhdGlvbmAgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gKi9cbmNvbnN0IHByb2Nlc3NUaHJlYWRCcmVhZGNydW1iSW50ZWdyYXRpb24gPSBjaGlsZFByb2Nlc3NJbnRlZ3JhdGlvbjtcblxuZnVuY3Rpb24gY2FwdHVyZUNoaWxkUHJvY2Vzc0V2ZW50cyhjaGlsZCwgb3B0aW9ucykge1xuICBsZXQgaGFzRXhpdGVkID0gZmFsc2U7XG4gIGxldCBkYXRhO1xuXG4gIGNoaWxkXG4gICAgLm9uKCdzcGF3bicsICgpID0+IHtcbiAgICAgIC8vIFRoaXMgaXMgU2VudHJ5IGdldHRpbmcgbWFjT1MgT1MgY29udGV4dFxuICAgICAgaWYgKGNoaWxkLnNwYXduZmlsZSA9PT0gJy91c3IvYmluL3N3X3ZlcnMnKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGF0YSA9IHsgc3Bhd25maWxlOiBjaGlsZC5zcGF3bmZpbGUgfTtcbiAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVDaGlsZFByb2Nlc3NBcmdzKSB7XG4gICAgICAgIGRhdGEuc3Bhd25hcmdzID0gY2hpbGQuc3Bhd25hcmdzO1xuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdleGl0JywgY29kZSA9PiB7XG4gICAgICBpZiAoIWhhc0V4aXRlZCkge1xuICAgICAgICBoYXNFeGl0ZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIE9ubHkgbG9nIGZvciBub24temVybyBleGl0IGNvZGVzXG4gICAgICAgIGlmIChjb2RlICE9PSBudWxsICYmIGNvZGUgIT09IDApIHtcbiAgICAgICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICdjaGlsZF9wcm9jZXNzJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBDaGlsZCBwcm9jZXNzIGV4aXRlZCB3aXRoIGNvZGUgJyR7Y29kZX0nYCxcbiAgICAgICAgICAgIGxldmVsOiAnd2FybmluZycsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuICAgICAgaWYgKCFoYXNFeGl0ZWQpIHtcbiAgICAgICAgaGFzRXhpdGVkID0gdHJ1ZTtcblxuICAgICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgIGNhdGVnb3J5OiAnY2hpbGRfcHJvY2VzcycsXG4gICAgICAgICAgbWVzc2FnZTogYENoaWxkIHByb2Nlc3MgZXJyb3JlZCB3aXRoICcke2Vycm9yLm1lc3NhZ2V9J2AsXG4gICAgICAgICAgbGV2ZWw6ICdlcnJvcicsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNhcHR1cmVXb3JrZXJUaHJlYWRFdmVudHMod29ya2VyKSB7XG4gIGxldCB0aHJlYWRJZDtcblxuICB3b3JrZXJcbiAgICAub24oJ29ubGluZScsICgpID0+IHtcbiAgICAgIHRocmVhZElkID0gd29ya2VyLnRocmVhZElkO1xuICAgIH0pXG4gICAgLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgIGNvcmUuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgIGNhdGVnb3J5OiAnd29ya2VyX3RocmVhZCcsXG4gICAgICAgIG1lc3NhZ2U6IGBXb3JrZXIgdGhyZWFkIGVycm9yZWQgd2l0aCAnJHtlcnJvci5tZXNzYWdlfSdgLFxuICAgICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgICAgZGF0YTogeyB0aHJlYWRJZCB9LFxuICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydHMuY2hpbGRQcm9jZXNzSW50ZWdyYXRpb24gPSBjaGlsZFByb2Nlc3NJbnRlZ3JhdGlvbjtcbmV4cG9ydHMucHJvY2Vzc1RocmVhZEJyZWFkY3J1bWJJbnRlZ3JhdGlvbiA9IHByb2Nlc3NUaHJlYWRCcmVhZGNydW1iSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGlsZFByb2Nlc3MuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkaWFnbm9zdGljc0NoYW5uZWwiLCJyZXF1aXJlIiwiY29yZSIsIklOVEVHUkFUSU9OX05BTUUiLCJjaGlsZFByb2Nlc3NJbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIiwib3B0aW9ucyIsIm5hbWUiLCJzZXR1cCIsIl9jbGllbnQiLCJjaGFubmVsIiwic3Vic2NyaWJlIiwiZXZlbnQiLCJjYXB0dXJlQ2hpbGRQcm9jZXNzRXZlbnRzIiwicHJvY2VzcyIsImNhcHR1cmVXb3JrZXJUaHJlYWRFdmVudHMiLCJ3b3JrZXIiLCJwcm9jZXNzVGhyZWFkQnJlYWRjcnVtYkludGVncmF0aW9uIiwiY2hpbGQiLCJoYXNFeGl0ZWQiLCJkYXRhIiwib24iLCJzcGF3bmZpbGUiLCJpbmNsdWRlQ2hpbGRQcm9jZXNzQXJncyIsInNwYXduYXJncyIsImNvZGUiLCJhZGRCcmVhZGNydW1iIiwiY2F0ZWdvcnkiLCJtZXNzYWdlIiwibGV2ZWwiLCJlcnJvciIsInRocmVhZElkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/childProcess.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/console.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/console.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Capture console logs as breadcrumbs.\n */\nconst consoleIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      core.addConsoleInstrumentationHandler(({\n        args,\n        level\n      }) => {\n        if (core.getClient() !== client) {\n          return;\n        }\n        core.addBreadcrumb({\n          category: 'console',\n          level: core.severityLevelFromString(level),\n          message: core.truncate(util.format.apply(undefined, args), 2048) // 2KB\n        }, {\n          input: [...args],\n          level\n        });\n      });\n    }\n  };\n});\nexports.consoleIntegration = consoleIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NvbnNvbGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxJQUFJLEdBQUdDLG1CQUFPLENBQUMsNEJBQVcsQ0FBQztBQUNqQyxNQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUVwQyxNQUFNRSxnQkFBZ0IsR0FBRyxTQUFTOztBQUVsQztBQUNBO0FBQ0E7QUFDQSxNQUFNQyxrQkFBa0IsR0FBR0YsSUFBSSxDQUFDRyxpQkFBaUIsQ0FBQyxNQUFNO0VBQ3RELE9BQU87SUFDTEMsSUFBSSxFQUFFSCxnQkFBZ0I7SUFDdEJJLEtBQUtBLENBQUNDLE1BQU0sRUFBRTtNQUNaTixJQUFJLENBQUNPLGdDQUFnQyxDQUFDLENBQUM7UUFBRUMsSUFBSTtRQUFFQztNQUFNLENBQUMsS0FBSztRQUN6RCxJQUFJVCxJQUFJLENBQUNVLFNBQVMsQ0FBQyxDQUFDLEtBQUtKLE1BQU0sRUFBRTtVQUMvQjtRQUNGO1FBRUFOLElBQUksQ0FBQ1csYUFBYSxDQUNoQjtVQUNFQyxRQUFRLEVBQUUsU0FBUztVQUNuQkgsS0FBSyxFQUFFVCxJQUFJLENBQUNhLHVCQUF1QixDQUFDSixLQUFLLENBQUM7VUFDMUNLLE9BQU8sRUFBRWQsSUFBSSxDQUFDZSxRQUFRLENBQUNqQixJQUFJLENBQUNrQixNQUFNLENBQUNDLEtBQUssQ0FBQ0MsU0FBUyxFQUFFVixJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBRTtRQUNwRSxDQUFDLEVBQ0Q7VUFDRVcsS0FBSyxFQUFFLENBQUMsR0FBR1gsSUFBSSxDQUFDO1VBQ2hCQztRQUNGLENBQ0YsQ0FBQztNQUNILENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGYiwwQkFBMEIsR0FBR00sa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NvbnNvbGUuanM/YTIyMiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgnbm9kZTp1dGlsJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnQ29uc29sZSc7XG5cbi8qKlxuICogQ2FwdHVyZSBjb25zb2xlIGxvZ3MgYXMgYnJlYWRjcnVtYnMuXG4gKi9cbmNvbnN0IGNvbnNvbGVJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjb3JlLmFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyKCh7IGFyZ3MsIGxldmVsIH0pID0+IHtcbiAgICAgICAgaWYgKGNvcmUuZ2V0Q2xpZW50KCkgIT09IGNsaWVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvcmUuYWRkQnJlYWRjcnVtYihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ2NvbnNvbGUnLFxuICAgICAgICAgICAgbGV2ZWw6IGNvcmUuc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcobGV2ZWwpLFxuICAgICAgICAgICAgbWVzc2FnZTogY29yZS50cnVuY2F0ZSh1dGlsLmZvcm1hdC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpLCAyMDQ4KSwgLy8gMktCXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpbnB1dDogWy4uLmFyZ3NdLFxuICAgICAgICAgICAgbGV2ZWwsXG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuZXhwb3J0cy5jb25zb2xlSW50ZWdyYXRpb24gPSBjb25zb2xlSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zb2xlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXRpbCIsInJlcXVpcmUiLCJjb3JlIiwiSU5URUdSQVRJT05fTkFNRSIsImNvbnNvbGVJbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIiwibmFtZSIsInNldHVwIiwiY2xpZW50IiwiYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJhcmdzIiwibGV2ZWwiLCJnZXRDbGllbnQiLCJhZGRCcmVhZGNydW1iIiwiY2F0ZWdvcnkiLCJzZXZlcml0eUxldmVsRnJvbVN0cmluZyIsIm1lc3NhZ2UiLCJ0cnVuY2F0ZSIsImZvcm1hdCIsImFwcGx5IiwidW5kZWZpbmVkIiwiaW5wdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/console.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/context.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/context.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst node_child_process = __webpack_require__(/*! node:child_process */ \"node:child_process\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/* eslint-disable max-lines */\n\nconst readFileAsync = util.promisify(node_fs.readFile);\nconst readDirAsync = util.promisify(node_fs.readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\n\nconst INTEGRATION_NAME = 'Context';\nconst _nodeContextIntegration = (options = {}) => {\n  let cachedContext;\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n    const updatedContext = _updateContext(await cachedContext);\n    event.contexts = {\n      ...event.contexts,\n      app: {\n        ...updatedContext.app,\n        ..._optionalChain([event, 'access', _ => _.contexts, 'optionalAccess', _2 => _2.app])\n      },\n      os: {\n        ...updatedContext.os,\n        ..._optionalChain([event, 'access', _3 => _3.contexts, 'optionalAccess', _4 => _4.os])\n      },\n      device: {\n        ...updatedContext.device,\n        ..._optionalChain([event, 'access', _5 => _5.contexts, 'optionalAccess', _6 => _6.device])\n      },\n      culture: {\n        ...updatedContext.culture,\n        ..._optionalChain([event, 'access', _7 => _7.contexts, 'optionalAccess', _8 => _8.culture])\n      },\n      cloud_resource: {\n        ...updatedContext.cloud_resource,\n        ..._optionalChain([event, 'access', _9 => _9.contexts, 'optionalAccess', _10 => _10.cloud_resource])\n      }\n    };\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n    if (_options.culture) {\n      const culture = getCultureContext();\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n    return contexts;\n  }\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    }\n  };\n};\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nconst nodeContextIntegration = core.defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n\n  if (_optionalChain([contexts, 'optionalAccess', _11 => _11.app, 'optionalAccess', _12 => _12.app_memory])) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n  if (_optionalChain([contexts, 'optionalAccess', _13 => _13.app, 'optionalAccess', _14 => _14.free_memory]) && typeof process.availableMemory === 'function') {\n    const freeMemory = _optionalChain([process, 'access', _15 => _15.availableMemory, 'optionalCall', _16 => _16()]);\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n  if (_optionalChain([contexts, 'optionalAccess', _17 => _17.device, 'optionalAccess', _18 => _18.free_memory])) {\n    contexts.device.free_memory = os.freemem();\n  }\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release()\n      };\n  }\n}\nfunction getCultureContext() {\n  try {\n    if (typeof process.versions.icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', {\n      month: 'long'\n    });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n      return {\n        locale: options.locale,\n        timezone: options.timeZone\n      };\n    }\n  } catch (err) {\n    //\n  }\n  return;\n}\n\n/**\n * Get app context information from process\n */\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext = {\n    app_start_time,\n    app_memory\n  };\n  if (typeof process.availableMemory === 'function') {\n    const freeMemory = _optionalChain([process, 'access', _19 => _19.availableMemory, 'optionalCall', _20 => _20()]);\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime && os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n  device.arch = os.arch();\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus();\n    const firstCpu = cpuInfo && cpuInfo[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows'\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [{\n  name: 'fedora-release',\n  distros: ['Fedora']\n}, {\n  name: 'redhat-release',\n  distros: ['Red Hat Linux', 'Centos']\n}, {\n  name: 'redhat_version',\n  distros: ['Red Hat Linux']\n}, {\n  name: 'SuSE-release',\n  distros: ['SUSE Linux']\n}, {\n  name: 'lsb-release',\n  distros: ['Ubuntu Linux', 'Arch Linux']\n}, {\n  name: 'debian_version',\n  distros: ['Debian']\n}, {\n  name: 'debian_release',\n  distros: ['Debian']\n}, {\n  name: 'arch-release',\n  distros: ['Arch Linux']\n}, {\n  name: 'gentoo-release',\n  distros: ['Gentoo Linux']\n}, {\n  name: 'novell-release',\n  distros: ['SUSE Linux']\n}, {\n  name: 'alpine-release',\n  distros: ['Alpine Linux']\n}];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content)\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`\n  };\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      node_child_process.execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return name.split(' ')[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux'\n  };\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = node_path.join('/etc', distroFile.name);\n    const contents = (await readFileAsync(distroPath, {\n      encoding: 'utf-8'\n    })).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const {\n      distros\n    } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = _optionalChain([LINUX_VERSIONS, 'access', _21 => _21[id], 'optionalCall', _22 => _22(contents)]);\n  } catch (e) {\n    // ignore\n  }\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp'\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify'\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku'\n    };\n  } else {\n    return undefined;\n  }\n}\nexports.getAppContext = getAppContext;\nexports.getDeviceContext = getDeviceContext;\nexports.nodeContextIntegration = nodeContextIntegration;\nexports.readDirAsync = readDirAsync;\nexports.readFileAsync = readFileAsync;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/context.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/contextlines.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/contextlines.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_readline = __webpack_require__(/*! node:readline */ \"node:readline\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst LRU_FILE_CONTENTS_CACHE = new core.LRUMap(10);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new core.LRUMap(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nconst MAX_CONTEXTLINES_COLNO = 1000;\nconst MAX_CONTEXTLINES_LINENO = 10000;\n\n/**\n * Get or init map value\n */\nfunction emplace(map, key, contents) {\n  const value = map.get(key);\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n  return value;\n}\n\n/**\n * Determines if context lines should be skipped for a file.\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\n */\nfunction shouldSkipContextLinesForFile(path) {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  if (path.startsWith('node:')) return true;\n  if (path.endsWith('.min.js')) return true;\n  if (path.endsWith('.min.cjs')) return true;\n  if (path.endsWith('.min.mjs')) return true;\n  if (path.startsWith('data:')) return true;\n  return false;\n}\n\n/**\n * Determines if we should skip contextlines based off the max lineno and colno values.\n */\nfunction shouldSkipContextLinesForFrame(frame) {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) return true;\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) return true;\n  return false;\n}\n/**\n * Checks if we have all the contents that we need in the cache.\n */\nfunction rangeExistsInContentCache(file, range) {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) return false;\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\n * the ranges are merged to create a single range.\n */\nfunction makeLineReaderRanges(lines, linecontext) {\n  if (!lines.length) {\n    return [];\n  }\n  let i = 0;\n  const line = lines[0];\n  if (typeof line !== 'number') {\n    return [];\n  }\n  let current = makeContextRange(line, linecontext);\n  const out = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + linecontext;\n    } else {\n      out.push(current);\n      current = makeContextRange(next, linecontext);\n    }\n    i++;\n  }\n  return out;\n}\n\n/**\n * Extracts lines from a file and stores them in a cache.\n */\nfunction getContextLinesFromFile(path, ranges, output) {\n  return new Promise((resolve, _reject) => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = node_fs.createReadStream(path);\n    const lineReaded = node_readline.createInterface({\n      input: stream\n    });\n\n    // We need to explicitly destroy the stream to prevent memory leaks,\n    // removing the listeners on the readline interface is not enough.\n    // See: https://github.com/nodejs/node/issues/9002 and https://github.com/getsentry/sentry-javascript/issues/14892\n    function destroyStreamAndResolve() {\n      stream.destroy();\n      resolve();\n    }\n\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      destroyStreamAndResolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError(e) {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      debugBuild.DEBUG_BUILD && core.logger.error(`Failed to read file: ${path}. Error: ${e}`);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      destroyStreamAndResolve();\n    }\n\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', destroyStreamAndResolve);\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) return;\n\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = core.snipLine(line, 0);\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n\n/**\n * Adds surrounding (context) lines of the line that an exception occurred on to the event.\n * This is done by reading the file line by line and extracting the lines. The extracted lines are stored in\n * a cache to prevent multiple reads of the same file. Failures to read a file are similarly cached to prevent multiple\n * failing reads from happening.\n */\n/* eslint-disable complexity */\nasync function addSourceContext(event, contextLines) {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines = {};\n  if (contextLines > 0 && _optionalChain([event, 'access', _ => _.exception, 'optionalAccess', _2 => _2.values])) {\n    for (const exception of event.exception.values) {\n      if (!_optionalChain([exception, 'access', _3 => _3.stacktrace, 'optionalAccess', _4 => _4.frames, 'optionalAccess', _5 => _5.length])) {\n        continue;\n      }\n\n      // Maps preserve insertion order, so we iterate in reverse, starting at the\n      // outermost frame and closer to where the exception has occurred (poor mans priority)\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame = exception.stacktrace.frames[i];\n        const filename = _optionalChain([frame, 'optionalAccess', _6 => _6.filename]);\n        if (!frame || typeof filename !== 'string' || typeof frame.lineno !== 'number' || shouldSkipContextLinesForFile(filename) || shouldSkipContextLinesForFrame(frame)) {\n          continue;\n        }\n        const filesToLinesOutput = filesToLines[filename];\n        if (!filesToLinesOutput) filesToLines[filename] = [];\n        // @ts-expect-error this is defined above\n        filesToLines[filename].push(frame.lineno);\n      }\n    }\n  }\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return event;\n  }\n  const readlinePromises = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges, contextLines);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {\n    debugBuild.DEBUG_BUILD && core.logger.log('Failed to read one or more source files and resolve context lines');\n  });\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && _optionalChain([event, 'access', _7 => _7.exception, 'optionalAccess', _8 => _8.values])) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace && exception.stacktrace.frames && exception.stacktrace.frames.length > 0) {\n        addSourceContextToFrames(exception.stacktrace.frames, contextLines, LRU_FILE_CONTENTS_CACHE);\n      }\n    }\n  }\n  return event;\n}\n/* eslint-enable complexity */\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(frames, contextLines, cache) {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n      addContextToFrame(frame.lineno, frame, contextLines, contents);\n    }\n  }\n}\n\n/**\n * Clears the context lines from a frame, used to reset a frame to its original state\n * if we fail to resolve all context lines for it.\n */\nfunction clearLineContext(frame) {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n\n/**\n * Resolves context lines before and after the given line number and appends them to the frame;\n */\nfunction addContextToFrame(lineno, frame, contextLines, contents) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno ism optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    debugBuild.DEBUG_BUILD && core.logger.error('Cannot resolve context for frame with no lineno or file contents');\n    return;\n  }\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno, contextLines); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      debugBuild.DEBUG_BUILD && core.logger.error(`Could not find line ${i} in file ${frame.filename}`);\n      return;\n    }\n    frame.pre_context.push(line);\n  }\n\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    debugBuild.DEBUG_BUILD && core.logger.error(`Could not find line ${lineno} in file ${frame.filename}`);\n    return;\n  }\n  frame.context_line = contents[lineno];\n  const end = makeRangeEnd(lineno, contextLines);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n\n// Helper functions for generating line context ranges. They take a line number and the number of lines of context to\n// include before and after the line and generate an inclusive range of indices.\n\n// Compute inclusive end context range\nfunction makeRangeStart(line, linecontext) {\n  return Math.max(1, line - linecontext);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line, linecontext) {\n  return line + linecontext;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line, linecontext) {\n  return [makeRangeStart(line, linecontext), makeRangeEnd(line, linecontext)];\n}\n\n/** Exported only for tests, as a type-safe variant. */\nconst _contextLinesIntegration = (options = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    }\n  };\n};\n\n/**\n * Capture the lines before and after the frame's context.\n */\nconst contextLinesIntegration = core.defineIntegration(_contextLinesIntegration);\nexports.MAX_CONTEXTLINES_COLNO = MAX_CONTEXTLINES_COLNO;\nexports.MAX_CONTEXTLINES_LINENO = MAX_CONTEXTLINES_LINENO;\nexports._contextLinesIntegration = _contextLinesIntegration;\nexports.addContextToFrame = addContextToFrame;\nexports.contextLinesIntegration = contextLinesIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/contextlines.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/fs.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/fs.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationFs = __webpack_require__(/*! @opentelemetry/instrumentation-fs */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-fs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst INTEGRATION_NAME = 'FileSystem';\n\n/**\n * This integration will create spans for `fs` API operations, like reading and writing files.\n *\n * **WARNING:** This integration may add significant overhead to your application. Especially in scenarios with a lot of\n * file I/O, like for example when running a framework dev server, including this integration can massively slow down\n * your application.\n *\n * @param options Configuration for this integration.\n */\nconst fsIntegration = core.defineIntegration((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationFs.FsInstrumentation({\n        requireParentSpan: true,\n        endHook(functionName, {\n          args,\n          span,\n          error\n        }) {\n          span.updateName(`fs.${functionName}`);\n          span.setAttributes({\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'file',\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.file.fs'\n          });\n          if (options.recordErrorMessagesAsSpanAttributes) {\n            if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PATH_ARG.includes(functionName)) {\n              span.setAttribute('path_argument', args[0]);\n            } else if (typeof args[0] === 'string' && typeof args[1] === 'string' && FS_OPERATIONS_WITH_TARGET_PATH.includes(functionName)) {\n              span.setAttribute('target_argument', args[0]);\n              span.setAttribute('path_argument', args[1]);\n            } else if (typeof args[0] === 'string' && FS_OPERATIONS_WITH_PREFIX.includes(functionName)) {\n              span.setAttribute('prefix_argument', args[0]);\n            } else if (typeof args[0] === 'string' && typeof args[1] === 'string' && FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH.includes(functionName)) {\n              span.setAttribute('existing_path_argument', args[0]);\n              span.setAttribute('new_path_argument', args[1]);\n            } else if (typeof args[0] === 'string' && typeof args[1] === 'string' && FS_OPERATIONS_WITH_SRC_DEST.includes(functionName)) {\n              span.setAttribute('src_argument', args[0]);\n              span.setAttribute('dest_argument', args[1]);\n            } else if (typeof args[0] === 'string' && typeof args[1] === 'string' && FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH.includes(functionName)) {\n              span.setAttribute('old_path_argument', args[0]);\n              span.setAttribute('new_path_argument', args[1]);\n            }\n          }\n          if (error && options.recordErrorMessagesAsSpanAttributes) {\n            span.setAttribute('fs_error', error.message);\n          }\n        }\n      }))();\n    }\n  };\n});\nconst FS_OPERATIONS_WITH_OLD_PATH_NEW_PATH = ['rename', 'renameSync'];\nconst FS_OPERATIONS_WITH_SRC_DEST = ['copyFile', 'cp', 'copyFileSync', 'cpSync'];\nconst FS_OPERATIONS_WITH_EXISTING_PATH_NEW_PATH = ['link', 'linkSync'];\nconst FS_OPERATIONS_WITH_PREFIX = ['mkdtemp', 'mkdtempSync'];\nconst FS_OPERATIONS_WITH_TARGET_PATH = ['symlink', 'symlinkSync'];\nconst FS_OPERATIONS_WITH_PATH_ARG = ['access', 'appendFile', 'chmod', 'chown', 'exists', 'mkdir', 'lchown', 'lstat', 'lutimes', 'open', 'opendir', 'readdir', 'readFile', 'readlink', 'realpath', 'realpath.native', 'rm', 'rmdir', 'stat', 'truncate', 'unlink', 'utimes', 'writeFile', 'accessSync', 'appendFileSync', 'chmodSync', 'chownSync', 'existsSync', 'lchownSync', 'lstatSync', 'lutimesSync', 'opendirSync', 'mkdirSync', 'openSync', 'readdirSync', 'readFileSync', 'readlinkSync', 'realpathSync', 'realpathSync.native', 'rmdirSync', 'rmSync', 'statSync', 'truncateSync', 'unlinkSync', 'utimesSync', 'writeFileSync'];\nexports.fsIntegration = fsIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/fs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/src/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/src/index.js\");\nconst core$1 = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\nconst getRequestInfo = __webpack_require__(/*! ./vendor/getRequestInfo.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/vendor/getRequestInfo.js\");\n\n// We only want to capture request bodies up to 1mb.\nconst MAX_BODY_BYTE_LENGTH = 1024 * 1024;\n\n/**\n * This custom HTTP instrumentation is used to isolate incoming requests and annotate them with additional information.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * Important note: Contrary to other OTEL instrumentation, this one cannot be unwrapped.\n * It only does minimal things though and does not emit any spans.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js/blob/f8ab5592ddea5cba0a3b33bf8d74f27872c0367f/experimental/packages/opentelemetry-instrumentation-http/src/http.ts\n */\nclass SentryHttpInstrumentation extends instrumentation.InstrumentationBase {\n  constructor(config = {}) {\n    super('@sentry/instrumentation-http', core.VERSION, config);\n  }\n\n  /** @inheritdoc */\n  init() {\n    return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n  }\n\n  /** Get the instrumentation for the http module. */\n  _getHttpInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition('http', ['*'], moduleExports => {\n      // Patch incoming requests for request isolation\n      stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n      // Patch outgoing requests for breadcrumbs\n      const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n      stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n      return moduleExports;\n    }, () => {\n      // no unwrap here\n    });\n  }\n\n  /** Get the instrumentation for the https module. */\n  _getHttpsInstrumentation() {\n    return new instrumentation.InstrumentationNodeModuleDefinition('https', ['*'], moduleExports => {\n      // Patch incoming requests for request isolation\n      stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n      // Patch outgoing requests for breadcrumbs\n      const patchedRequest = stealthWrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction());\n      stealthWrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n      return moduleExports;\n    }, () => {\n      // no unwrap here\n    });\n  }\n\n  /**\n   * Patch the incoming request function for request isolation.\n   */\n  _getPatchIncomingRequestFunction() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n    return original => {\n      return function incomingRequest(event, ...args) {\n        // Only traces request events\n        if (event !== 'request') {\n          return original.apply(this, [event, ...args]);\n        }\n        instrumentation._diag.debug('http instrumentation for incoming request');\n        const isolationScope = core$1.getIsolationScope().clone();\n        const request = args[0];\n        const normalizedRequest = core$1.httpRequestToRequestData(request);\n        patchRequestToCaptureBody(request, isolationScope);\n\n        // Update the isolation scope, isolate this request\n        // TODO(v9): Stop setting `request`, we only rely on normalizedRequest anymore\n        isolationScope.setSDKProcessingMetadata({\n          request,\n          normalizedRequest\n        });\n        const client = core$1.getClient();\n        // eslint-disable-next-line deprecation/deprecation\n        if (client && client.getOptions().autoSessionTracking) {\n          // eslint-disable-next-line deprecation/deprecation\n          isolationScope.setRequestSession({\n            status: 'ok'\n          });\n        }\n\n        // attempt to update the scope's `transactionName` based on the request URL\n        // Ideally, framework instrumentations coming after the HttpInstrumentation\n        // update the transactionName once we get a parameterized route.\n        const httpMethod = (request.method || 'GET').toUpperCase();\n        const httpTarget = core$1.stripUrlQueryAndFragment(request.url || '/');\n        const bestEffortTransactionName = `${httpMethod} ${httpTarget}`;\n        isolationScope.setTransactionName(bestEffortTransactionName);\n        return core$1.withIsolationScope(isolationScope, () => {\n          return original.apply(this, [event, ...args]);\n        });\n      };\n    };\n  }\n\n  /**\n   * Patch the outgoing request function for breadcrumbs.\n   */\n  _getPatchOutgoingRequestFunction() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const instrumentation = this;\n    return original => {\n      return function outgoingRequest(...args) {\n        instrumentation._diag.debug('http instrumentation for outgoing requests');\n\n        // Making a copy to avoid mutating the original args array\n        // We need to access and reconstruct the request options object passed to `ignoreOutgoingRequests`\n        // so that it matches what Otel instrumentation passes to `ignoreOutgoingRequestHook`.\n        // @see https://github.com/open-telemetry/opentelemetry-js/blob/7293e69c1e55ca62e15d0724d22605e61bd58952/experimental/packages/opentelemetry-instrumentation-http/src/http.ts#L756-L789\n        const argsCopy = [...args];\n        const options = argsCopy.shift();\n        const extraOptions = typeof argsCopy[0] === 'object' && (typeof options === 'string' || options instanceof URL) ? argsCopy.shift() : undefined;\n        const {\n          optionsParsed\n        } = getRequestInfo.getRequestInfo(instrumentation._diag, options, extraOptions);\n        const request = original.apply(this, args);\n        request.prependListener('response', response => {\n          const _breadcrumbs = instrumentation.getConfig().breadcrumbs;\n          const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n          const _ignoreOutgoingRequests = instrumentation.getConfig().ignoreOutgoingRequests;\n          const shouldCreateBreadcrumb = typeof _ignoreOutgoingRequests === 'function' ? !_ignoreOutgoingRequests(getRequestUrl.getRequestUrl(request), optionsParsed) : true;\n          if (breadCrumbsEnabled && shouldCreateBreadcrumb) {\n            addRequestBreadcrumb(request, response);\n          }\n        });\n        return request;\n      };\n    };\n  }\n\n  /** Path the outgoing get function for breadcrumbs. */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _getPatchOutgoingGetFunction(clientRequest) {\n    return _original => {\n      // Re-implement http.get. This needs to be done (instead of using\n      // getPatchOutgoingRequestFunction to patch it) because we need to\n      // set the trace context header before the returned http.ClientRequest is\n      // ended. The Node.js docs state that the only differences between\n      // request and get are that (1) get defaults to the HTTP GET method and\n      // (2) the returned request object is ended immediately. The former is\n      // already true (at least in supported Node versions up to v10), so we\n      // simply follow the latter. Ref:\n      // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n      // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n      return function outgoingGetRequest(...args) {\n        const req = clientRequest(...args);\n        req.end();\n        return req;\n      };\n    };\n  }\n}\n\n/**\n * This is a minimal version of `wrap` from shimmer:\n * https://github.com/othiym23/shimmer/blob/master/index.js\n *\n * In contrast to the original implementation, this version does not allow to unwrap,\n * and does not make it clear that the method is wrapped.\n * This is necessary because we want to wrap the http module with our own code,\n * while still allowing to use the HttpInstrumentation from OTEL.\n *\n * Without this, if we'd just use `wrap` from shimmer, the OTEL instrumentation would remove our wrapping,\n * because it only allows any module to be wrapped a single time.\n */\nfunction stealthWrap(nodule, name, wrapper) {\n  const original = nodule[name];\n  const wrapped = wrapper(original);\n  defineProperty(nodule, name, wrapped);\n  return wrapped;\n}\n\n// Sets a property on an object, preserving its enumerability.\nfunction defineProperty(obj, name, value) {\n  const enumerable = !!obj[name] && Object.prototype.propertyIsEnumerable.call(obj, name);\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: enumerable,\n    writable: true,\n    value: value\n  });\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n  const statusCode = response.statusCode;\n  const level = core$1.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n  core$1.addBreadcrumb({\n    category: 'http',\n    data: {\n      status_code: statusCode,\n      ...data\n    },\n    type: 'http',\n    level\n  }, {\n    event: 'response',\n    request,\n    response\n  });\n}\nfunction getBreadcrumbData(request) {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = core$1.parseUrl(url.toString());\n    const data = {\n      url: core$1.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET'\n    };\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n/**\n * This method patches the request object to capture the body.\n * Instead of actually consuming the streamed body ourselves, which has potential side effects,\n * we monkey patch `req.on('data')` to intercept the body chunks.\n * This way, we only read the body if the user also consumes the body, ensuring we do not change any behavior in unexpected ways.\n */\nfunction patchRequestToCaptureBody(req, isolationScope) {\n  const chunks = [];\n  function getChunksSize() {\n    return chunks.reduce((acc, chunk) => acc + chunk.byteLength, 0);\n  }\n\n  /**\n   * We need to keep track of the original callbacks, in order to be able to remove listeners again.\n   * Since `off` depends on having the exact same function reference passed in, we need to be able to map\n   * original listeners to our wrapped ones.\n   */\n  const callbackMap = new WeakMap();\n  try {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.on = new Proxy(req.on, {\n      apply: (target, thisArg, args) => {\n        const [event, listener, ...restArgs] = args;\n        if (event === 'data') {\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              // If we have already read more than the max body length, we stop addiing chunks\n              // To avoid growing the memory indefinitely if a respons is e.g. streamed\n              if (getChunksSize() < MAX_BODY_BYTE_LENGTH) {\n                const chunk = args[0];\n                chunks.push(chunk);\n              } else if (debugBuild.DEBUG_BUILD) {\n                core$1.logger.log(`Dropping request body chunk because it maximum body length of ${MAX_BODY_BYTE_LENGTH}b is exceeded.`);\n              }\n              return Reflect.apply(target, thisArg, args);\n            }\n          });\n          callbackMap.set(listener, callback);\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n        if (event === 'end') {\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              try {\n                const body = Buffer.concat(chunks).toString('utf-8');\n                if (body) {\n                  const normalizedRequest = {\n                    data: body\n                  };\n                  isolationScope.setSDKProcessingMetadata({\n                    normalizedRequest\n                  });\n                }\n              } catch (e2) {\n                // ignore errors here\n              }\n              return Reflect.apply(target, thisArg, args);\n            }\n          });\n          callbackMap.set(listener, callback);\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n        return Reflect.apply(target, thisArg, args);\n      }\n    });\n\n    // Ensure we also remove callbacks correctly\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.off = new Proxy(req.off, {\n      apply: (target, thisArg, args) => {\n        const [, listener] = args;\n        const callback = callbackMap.get(listener);\n        if (callback) {\n          callbackMap.delete(listener);\n          const modifiedArgs = args.slice();\n          modifiedArgs[1] = callback;\n          return Reflect.apply(target, thisArg, modifiedArgs);\n        }\n        return Reflect.apply(target, thisArg, args);\n      }\n    });\n  } catch (e3) {\n    // ignore errors if we can't patch stuff\n  }\n}\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2h0dHAvU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLElBQUksR0FBR0MsbUJBQU8sQ0FBQywrRkFBcUIsQ0FBQztBQUMzQyxNQUFNQyxlQUFlLEdBQUdELG1CQUFPLENBQUMscUhBQWdDLENBQUM7QUFDakUsTUFBTUUsTUFBTSxHQUFHRixtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFDdEMsTUFBTUcsVUFBVSxHQUFHSCxtQkFBTyxDQUFDLCtGQUFzQixDQUFDO0FBQ2xELE1BQU1JLGFBQWEsR0FBR0osbUJBQU8sQ0FBQywrR0FBOEIsQ0FBQztBQUM3RCxNQUFNSyxjQUFjLEdBQUdMLG1CQUFPLENBQUMsaUlBQTRCLENBQUM7O0FBRTVEO0FBQ0EsTUFBTU0sb0JBQW9CLEdBQUcsSUFBSSxHQUFHLElBQUk7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMseUJBQXlCLFNBQVNOLGVBQWUsQ0FBQ08sbUJBQW1CLENBQUM7RUFDekVDLFdBQVdBLENBQUNDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRTtJQUN4QixLQUFLLENBQUMsOEJBQThCLEVBQUVYLElBQUksQ0FBQ1ksT0FBTyxFQUFFRCxNQUFNLENBQUM7RUFDN0Q7O0VBRUE7RUFDQ0UsSUFBSUEsQ0FBQSxFQUFHO0lBQ04sT0FBTyxDQUFDLElBQUksQ0FBQ0Msd0JBQXdCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0VBQzFFOztFQUVBO0VBQ0NBLHVCQUF1QkEsQ0FBQSxFQUFHO0lBQ3pCLE9BQU8sSUFBSWIsZUFBZSxDQUFDYyxtQ0FBbUMsQ0FDNUQsTUFBTSxFQUNOLENBQUMsR0FBRyxDQUFDLEVBQ0pDLGFBQWEsSUFBSztNQUNqQjtNQUNBQyxXQUFXLENBQUNELGFBQWEsQ0FBQ0UsTUFBTSxDQUFDQyxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQ0MsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDOztNQUU1RjtNQUNBLE1BQU1DLGNBQWMsR0FBR0osV0FBVyxDQUFDRCxhQUFhLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQ00sZ0NBQWdDLENBQUMsQ0FBQyxDQUFDO01BQ3JHTCxXQUFXLENBQUNELGFBQWEsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDTyw0QkFBNEIsQ0FBQ0YsY0FBYyxDQUFDLENBQUM7TUFFcEYsT0FBT0wsYUFBYTtJQUN0QixDQUFDLEVBQ0QsTUFBTTtNQUNKO0lBQUEsQ0FFSixDQUFDO0VBQ0g7O0VBRUE7RUFDQ0gsd0JBQXdCQSxDQUFBLEVBQUc7SUFDMUIsT0FBTyxJQUFJWixlQUFlLENBQUNjLG1DQUFtQyxDQUM1RCxPQUFPLEVBQ1AsQ0FBQyxHQUFHLENBQUMsRUFDSkMsYUFBYSxJQUFLO01BQ2pCO01BQ0FDLFdBQVcsQ0FBQ0QsYUFBYSxDQUFDRSxNQUFNLENBQUNDLFNBQVMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUM7O01BRTVGO01BQ0EsTUFBTUMsY0FBYyxHQUFHSixXQUFXLENBQUNELGFBQWEsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDTSxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUM7TUFDckdMLFdBQVcsQ0FBQ0QsYUFBYSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUNPLDRCQUE0QixDQUFDRixjQUFjLENBQUMsQ0FBQztNQUVwRixPQUFPTCxhQUFhO0lBQ3RCLENBQUMsRUFDRCxNQUFNO01BQ0o7SUFBQSxDQUVKLENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7RUFDR0ksZ0NBQWdDQSxDQUFBLEVBRWxDO0lBQ0c7SUFDQSxNQUFNbkIsZUFBZSxHQUFHLElBQUk7SUFFNUIsT0FDRXVCLFFBQVEsSUFDTDtNQUNILE9BQU8sU0FBU0MsZUFBZUEsQ0FBRUMsS0FBSyxFQUFFLEdBQUdDLElBQUksRUFBRTtRQUMvQztRQUNBLElBQUlELEtBQUssS0FBSyxTQUFTLEVBQUU7VUFDdkIsT0FBT0YsUUFBUSxDQUFDSSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUNGLEtBQUssRUFBRSxHQUFHQyxJQUFJLENBQUMsQ0FBQztRQUMvQztRQUVBMUIsZUFBZSxDQUFDNEIsS0FBSyxDQUFDQyxLQUFLLENBQUMsMkNBQTJDLENBQUM7UUFFeEUsTUFBTUMsY0FBYyxHQUFHN0IsTUFBTSxDQUFDOEIsaUJBQWlCLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUMsQ0FBQztRQUN6RCxNQUFNQyxPQUFPLEdBQUdQLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFdkIsTUFBTVEsaUJBQWlCLEdBQUdqQyxNQUFNLENBQUNrQyx3QkFBd0IsQ0FBQ0YsT0FBTyxDQUFDO1FBRWxFRyx5QkFBeUIsQ0FBQ0gsT0FBTyxFQUFFSCxjQUFjLENBQUM7O1FBRWxEO1FBQ0E7UUFDQUEsY0FBYyxDQUFDTyx3QkFBd0IsQ0FBQztVQUN0Q0osT0FBTztVQUNQQztRQUNGLENBQUMsQ0FBQztRQUVGLE1BQU1JLE1BQU0sR0FBR3JDLE1BQU0sQ0FBQ3NDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pDO1FBQ0EsSUFBSUQsTUFBTSxJQUFJQSxNQUFNLENBQUNFLFVBQVUsQ0FBQyxDQUFDLENBQUNDLG1CQUFtQixFQUFFO1VBQ3JEO1VBQ0FYLGNBQWMsQ0FBQ1ksaUJBQWlCLENBQUM7WUFBRUMsTUFBTSxFQUFFO1VBQUssQ0FBQyxDQUFDO1FBQ3BEOztRQUVBO1FBQ0E7UUFDQTtRQUNBLE1BQU1DLFVBQVUsR0FBRyxDQUFDWCxPQUFPLENBQUNZLE1BQU0sSUFBSSxLQUFLLEVBQUVDLFdBQVcsQ0FBQyxDQUFDO1FBQzFELE1BQU1DLFVBQVUsR0FBRzlDLE1BQU0sQ0FBQytDLHdCQUF3QixDQUFDZixPQUFPLENBQUNnQixHQUFHLElBQUksR0FBRyxDQUFDO1FBRXRFLE1BQU1DLHlCQUF5QixHQUFJLEdBQUVOLFVBQVcsSUFBR0csVUFBVyxFQUFDO1FBRS9EakIsY0FBYyxDQUFDcUIsa0JBQWtCLENBQUNELHlCQUF5QixDQUFDO1FBRTVELE9BQU9qRCxNQUFNLENBQUNtRCxrQkFBa0IsQ0FBQ3RCLGNBQWMsRUFBRSxNQUFNO1VBQ3JELE9BQU9QLFFBQVEsQ0FBQ0ksS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDRixLQUFLLEVBQUUsR0FBR0MsSUFBSSxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDO01BQ0osQ0FBQztJQUNILENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7RUFDR0wsZ0NBQWdDQSxDQUFBLEVBRWxDO0lBQ0c7SUFDQSxNQUFNckIsZUFBZSxHQUFHLElBQUk7SUFFNUIsT0FBUXVCLFFBQVEsSUFBSztNQUNuQixPQUFPLFNBQVM4QixlQUFlQSxDQUFFLEdBQUczQixJQUFJLEVBQUU7UUFDeEMxQixlQUFlLENBQUM0QixLQUFLLENBQUNDLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQzs7UUFFekU7UUFDQTtRQUNBO1FBQ0E7UUFDQSxNQUFNeUIsUUFBUSxHQUFHLENBQUMsR0FBRzVCLElBQUksQ0FBQztRQUUxQixNQUFNNkIsT0FBTyxHQUFHRCxRQUFRLENBQUNFLEtBQUssQ0FBQyxDQUFDO1FBRWhDLE1BQU1DLFlBQVksR0FDaEIsT0FBT0gsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsS0FBSyxPQUFPQyxPQUFPLEtBQUssUUFBUSxJQUFJQSxPQUFPLFlBQVlHLEdBQUcsQ0FBQyxHQUNyRkosUUFBUSxDQUFDRSxLQUFLLENBQUMsQ0FBQyxHQUNqQkcsU0FBUztRQUVmLE1BQU07VUFBRUM7UUFBYyxDQUFDLEdBQUd4RCxjQUFjLENBQUNBLGNBQWMsQ0FBQ0osZUFBZSxDQUFDNEIsS0FBSyxFQUFFMkIsT0FBTyxFQUFFRSxZQUFZLENBQUM7UUFFckcsTUFBTXhCLE9BQU8sR0FBR1YsUUFBUSxDQUFDSSxLQUFLLENBQUMsSUFBSSxFQUFFRCxJQUFJLENBQUM7UUFFMUNPLE9BQU8sQ0FBQzRCLGVBQWUsQ0FBQyxVQUFVLEVBQUdDLFFBQVEsSUFBSztVQUNoRCxNQUFNQyxZQUFZLEdBQUcvRCxlQUFlLENBQUNnRSxTQUFTLENBQUMsQ0FBQyxDQUFDQyxXQUFXO1VBQzVELE1BQU1DLGtCQUFrQixHQUFHLE9BQU9ILFlBQVksS0FBSyxXQUFXLEdBQUcsSUFBSSxHQUFHQSxZQUFZO1VBRXBGLE1BQU1JLHVCQUF1QixHQUFHbkUsZUFBZSxDQUFDZ0UsU0FBUyxDQUFDLENBQUMsQ0FBQ0ksc0JBQXNCO1VBQ2xGLE1BQU1DLHNCQUFzQixHQUMxQixPQUFPRix1QkFBdUIsS0FBSyxVQUFVLEdBQ3pDLENBQUNBLHVCQUF1QixDQUFDaEUsYUFBYSxDQUFDQSxhQUFhLENBQUM4QixPQUFPLENBQUMsRUFBRTJCLGFBQWEsQ0FBQyxHQUM3RSxJQUFJO1VBRVYsSUFBSU0sa0JBQWtCLElBQUlHLHNCQUFzQixFQUFFO1lBQ2hEQyxvQkFBb0IsQ0FBQ3JDLE9BQU8sRUFBRTZCLFFBQVEsQ0FBQztVQUN6QztRQUNGLENBQUMsQ0FBQztRQUVGLE9BQU83QixPQUFPO01BQ2hCLENBQUM7SUFDSCxDQUFDO0VBQ0g7O0VBRUE7RUFDQTtFQUNDWCw0QkFBNEJBLENBQUNpRCxhQUFhLEVBQUU7SUFDM0MsT0FBUUMsU0FBUyxJQUFLO01BQ3BCO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0EsT0FBTyxTQUFTQyxrQkFBa0JBLENBQUMsR0FBRy9DLElBQUksRUFBRTtRQUMxQyxNQUFNZ0QsR0FBRyxHQUFHSCxhQUFhLENBQUMsR0FBRzdDLElBQUksQ0FBQztRQUNsQ2dELEdBQUcsQ0FBQ0MsR0FBRyxDQUFDLENBQUM7UUFDVCxPQUFPRCxHQUFHO01BQ1osQ0FBQztJQUNILENBQUM7RUFDSDtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMxRCxXQUFXQSxDQUNsQjRELE1BQU0sRUFDTkMsSUFBSSxFQUNKQyxPQUFPLEVBQ1A7RUFDQSxNQUFNdkQsUUFBUSxHQUFHcUQsTUFBTSxDQUFDQyxJQUFJLENBQUM7RUFDN0IsTUFBTUUsT0FBTyxHQUFHRCxPQUFPLENBQUN2RCxRQUFRLENBQUM7RUFFakM1QixjQUFjLENBQUNpRixNQUFNLEVBQUVDLElBQUksRUFBRUUsT0FBTyxDQUFDO0VBQ3JDLE9BQU9BLE9BQU87QUFDaEI7O0FBRUE7QUFDQSxTQUFTcEYsY0FBY0EsQ0FDckJxRixHQUFHLEVBQ0hILElBQUksRUFDSmhGLEtBQUssRUFDTDtFQUNBLE1BQU1vRixVQUFVLEdBQUcsQ0FBQyxDQUFDRCxHQUFHLENBQUNILElBQUksQ0FBQyxJQUFJbkYsTUFBTSxDQUFDd0IsU0FBUyxDQUFDZ0Usb0JBQW9CLENBQUNDLElBQUksQ0FBQ0gsR0FBRyxFQUFFSCxJQUFJLENBQUM7RUFFdkZuRixNQUFNLENBQUNDLGNBQWMsQ0FBQ3FGLEdBQUcsRUFBRUgsSUFBSSxFQUFFO0lBQy9CTyxZQUFZLEVBQUUsSUFBSTtJQUNsQkgsVUFBVSxFQUFFQSxVQUFVO0lBQ3RCSSxRQUFRLEVBQUUsSUFBSTtJQUNkeEYsS0FBSyxFQUFFQTtFQUNULENBQUMsQ0FBQztBQUNKOztBQUVBO0FBQ0EsU0FBU3lFLG9CQUFvQkEsQ0FBQ3JDLE9BQU8sRUFBRTZCLFFBQVEsRUFBRTtFQUMvQyxNQUFNd0IsSUFBSSxHQUFHQyxpQkFBaUIsQ0FBQ3RELE9BQU8sQ0FBQztFQUV2QyxNQUFNdUQsVUFBVSxHQUFHMUIsUUFBUSxDQUFDMEIsVUFBVTtFQUN0QyxNQUFNQyxLQUFLLEdBQUd4RixNQUFNLENBQUN5Rix1Q0FBdUMsQ0FBQ0YsVUFBVSxDQUFDO0VBRXhFdkYsTUFBTSxDQUFDMEYsYUFBYSxDQUNsQjtJQUNFQyxRQUFRLEVBQUUsTUFBTTtJQUNoQk4sSUFBSSxFQUFFO01BQ0pPLFdBQVcsRUFBRUwsVUFBVTtNQUN2QixHQUFHRjtJQUNMLENBQUM7SUFDRFEsSUFBSSxFQUFFLE1BQU07SUFDWkw7RUFDRixDQUFDLEVBQ0Q7SUFDRWhFLEtBQUssRUFBRSxVQUFVO0lBQ2pCUSxPQUFPO0lBQ1A2QjtFQUNGLENBQ0YsQ0FBQztBQUNIO0FBRUEsU0FBU3lCLGlCQUFpQkEsQ0FBQ3RELE9BQU8sRUFBRTtFQUNsQyxJQUFJO0lBQ0Y7SUFDQSxNQUFNOEQsSUFBSSxHQUFHOUQsT0FBTyxDQUFDK0QsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJL0QsT0FBTyxDQUFDOEQsSUFBSTtJQUN0RCxNQUFNOUMsR0FBRyxHQUFHLElBQUlTLEdBQUcsQ0FBQ3pCLE9BQU8sQ0FBQ2dFLElBQUksRUFBRyxHQUFFaEUsT0FBTyxDQUFDaUUsUUFBUyxLQUFJSCxJQUFLLEVBQUMsQ0FBQztJQUNqRSxNQUFNSSxTQUFTLEdBQUdsRyxNQUFNLENBQUNtRyxRQUFRLENBQUNuRCxHQUFHLENBQUNvRCxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRWpELE1BQU1mLElBQUksR0FBRztNQUNYckMsR0FBRyxFQUFFaEQsTUFBTSxDQUFDcUcscUJBQXFCLENBQUNILFNBQVMsQ0FBQztNQUM1QyxhQUFhLEVBQUVsRSxPQUFPLENBQUNZLE1BQU0sSUFBSTtJQUNuQyxDQUFDO0lBRUQsSUFBSXNELFNBQVMsQ0FBQ0ksTUFBTSxFQUFFO01BQ3BCakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHYSxTQUFTLENBQUNJLE1BQU07SUFDdkM7SUFDQSxJQUFJSixTQUFTLENBQUNLLElBQUksRUFBRTtNQUNsQmxCLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBR2EsU0FBUyxDQUFDSyxJQUFJO0lBQ3hDO0lBRUEsT0FBT2xCLElBQUk7RUFDYixDQUFDLENBQUMsT0FBT21CLENBQUMsRUFBRTtJQUNWLE9BQU8sQ0FBQyxDQUFDO0VBQ1g7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTckUseUJBQXlCQSxDQUFDc0MsR0FBRyxFQUFFNUMsY0FBYyxFQUFFO0VBQ3RELE1BQU00RSxNQUFNLEdBQUcsRUFBRTtFQUVqQixTQUFTQyxhQUFhQSxDQUFBLEVBQUc7SUFDdkIsT0FBT0QsTUFBTSxDQUFDRSxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLEtBQUtELEdBQUcsR0FBR0MsS0FBSyxDQUFDQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0VBQ2pFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRSxNQUFNQyxXQUFXLEdBQUcsSUFBSUMsT0FBTyxDQUFDLENBQUM7RUFFakMsSUFBSTtJQUNGO0lBQ0F2QyxHQUFHLENBQUN3QyxFQUFFLEdBQUcsSUFBSUMsS0FBSyxDQUFDekMsR0FBRyxDQUFDd0MsRUFBRSxFQUFFO01BQ3pCdkYsS0FBSyxFQUFFQSxDQUFDeUYsTUFBTSxFQUFFQyxPQUFPLEVBQUUzRixJQUFJLEtBQUs7UUFDaEMsTUFBTSxDQUFDRCxLQUFLLEVBQUU2RixRQUFRLEVBQUUsR0FBR0MsUUFBUSxDQUFDLEdBQUc3RixJQUFJO1FBRTNDLElBQUlELEtBQUssS0FBSyxNQUFNLEVBQUU7VUFDcEIsTUFBTStGLFFBQVEsR0FBRyxJQUFJTCxLQUFLLENBQUNHLFFBQVEsRUFBRTtZQUNuQzNGLEtBQUssRUFBRUEsQ0FBQ3lGLE1BQU0sRUFBRUMsT0FBTyxFQUFFM0YsSUFBSSxLQUFLO2NBQ2hDO2NBQ0E7Y0FDQSxJQUFJaUYsYUFBYSxDQUFDLENBQUMsR0FBR3RHLG9CQUFvQixFQUFFO2dCQUMxQyxNQUFNeUcsS0FBSyxHQUFHcEYsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDckJnRixNQUFNLENBQUNlLElBQUksQ0FBQ1gsS0FBSyxDQUFDO2NBQ3BCLENBQUMsTUFBTSxJQUFJNUcsVUFBVSxDQUFDd0gsV0FBVyxFQUFFO2dCQUNqQ3pILE1BQU0sQ0FBQzBILE1BQU0sQ0FBQ0MsR0FBRyxDQUNkLGlFQUFnRXZILG9CQUFxQixnQkFDeEYsQ0FBQztjQUNIO2NBRUEsT0FBT3dILE9BQU8sQ0FBQ2xHLEtBQUssQ0FBQ3lGLE1BQU0sRUFBRUMsT0FBTyxFQUFFM0YsSUFBSSxDQUFDO1lBQzdDO1VBQ0YsQ0FBQyxDQUFDO1VBRUZzRixXQUFXLENBQUNjLEdBQUcsQ0FBQ1IsUUFBUSxFQUFFRSxRQUFRLENBQUM7VUFFbkMsT0FBT0ssT0FBTyxDQUFDbEcsS0FBSyxDQUFDeUYsTUFBTSxFQUFFQyxPQUFPLEVBQUUsQ0FBQzVGLEtBQUssRUFBRStGLFFBQVEsRUFBRSxHQUFHRCxRQUFRLENBQUMsQ0FBQztRQUN2RTtRQUVBLElBQUk5RixLQUFLLEtBQUssS0FBSyxFQUFFO1VBQ25CLE1BQU0rRixRQUFRLEdBQUcsSUFBSUwsS0FBSyxDQUFDRyxRQUFRLEVBQUU7WUFDbkMzRixLQUFLLEVBQUVBLENBQUN5RixNQUFNLEVBQUVDLE9BQU8sRUFBRTNGLElBQUksS0FBSztjQUNoQyxJQUFJO2dCQUNGLE1BQU1xRyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDdkIsTUFBTSxDQUFDLENBQUNMLFFBQVEsQ0FBQyxPQUFPLENBQUM7Z0JBRXBELElBQUkwQixJQUFJLEVBQUU7a0JBQ1IsTUFBTTdGLGlCQUFpQixHQUFHO29CQUFFb0QsSUFBSSxFQUFFeUM7a0JBQUssQ0FBQztrQkFDeENqRyxjQUFjLENBQUNPLHdCQUF3QixDQUFDO29CQUFFSDtrQkFBa0IsQ0FBQyxDQUFDO2dCQUNoRTtjQUNGLENBQUMsQ0FBQyxPQUFPZ0csRUFBRSxFQUFFO2dCQUNYO2NBQUE7Y0FHRixPQUFPTCxPQUFPLENBQUNsRyxLQUFLLENBQUN5RixNQUFNLEVBQUVDLE9BQU8sRUFBRTNGLElBQUksQ0FBQztZQUM3QztVQUNGLENBQUMsQ0FBQztVQUVGc0YsV0FBVyxDQUFDYyxHQUFHLENBQUNSLFFBQVEsRUFBRUUsUUFBUSxDQUFDO1VBRW5DLE9BQU9LLE9BQU8sQ0FBQ2xHLEtBQUssQ0FBQ3lGLE1BQU0sRUFBRUMsT0FBTyxFQUFFLENBQUM1RixLQUFLLEVBQUUrRixRQUFRLEVBQUUsR0FBR0QsUUFBUSxDQUFDLENBQUM7UUFDdkU7UUFFQSxPQUFPTSxPQUFPLENBQUNsRyxLQUFLLENBQUN5RixNQUFNLEVBQUVDLE9BQU8sRUFBRTNGLElBQUksQ0FBQztNQUM3QztJQUNGLENBQUMsQ0FBQzs7SUFFRjtJQUNBO0lBQ0FnRCxHQUFHLENBQUN5RCxHQUFHLEdBQUcsSUFBSWhCLEtBQUssQ0FBQ3pDLEdBQUcsQ0FBQ3lELEdBQUcsRUFBRTtNQUMzQnhHLEtBQUssRUFBRUEsQ0FBQ3lGLE1BQU0sRUFBRUMsT0FBTyxFQUFFM0YsSUFBSSxLQUFLO1FBQ2hDLE1BQU0sR0FBRzRGLFFBQVEsQ0FBQyxHQUFHNUYsSUFBSTtRQUV6QixNQUFNOEYsUUFBUSxHQUFHUixXQUFXLENBQUNvQixHQUFHLENBQUNkLFFBQVEsQ0FBQztRQUMxQyxJQUFJRSxRQUFRLEVBQUU7VUFDWlIsV0FBVyxDQUFDcUIsTUFBTSxDQUFDZixRQUFRLENBQUM7VUFFNUIsTUFBTWdCLFlBQVksR0FBRzVHLElBQUksQ0FBQzZHLEtBQUssQ0FBQyxDQUFDO1VBQ2pDRCxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUdkLFFBQVE7VUFDMUIsT0FBT0ssT0FBTyxDQUFDbEcsS0FBSyxDQUFDeUYsTUFBTSxFQUFFQyxPQUFPLEVBQUVpQixZQUFZLENBQUM7UUFDckQ7UUFFQSxPQUFPVCxPQUFPLENBQUNsRyxLQUFLLENBQUN5RixNQUFNLEVBQUVDLE9BQU8sRUFBRTNGLElBQUksQ0FBQztNQUM3QztJQUNGLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQyxPQUFPOEcsRUFBRSxFQUFFO0lBQ1g7RUFBQTtBQUVKO0FBRUE1SSxpQ0FBaUMsR0FBR1UseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2h0dHAvU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbi5qcz83MTAxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24nKTtcbmNvbnN0IGNvcmUkMSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBnZXRSZXF1ZXN0VXJsID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZ2V0UmVxdWVzdFVybC5qcycpO1xuY29uc3QgZ2V0UmVxdWVzdEluZm8gPSByZXF1aXJlKCcuL3ZlbmRvci9nZXRSZXF1ZXN0SW5mby5qcycpO1xuXG4vLyBXZSBvbmx5IHdhbnQgdG8gY2FwdHVyZSByZXF1ZXN0IGJvZGllcyB1cCB0byAxbWIuXG5jb25zdCBNQVhfQk9EWV9CWVRFX0xFTkdUSCA9IDEwMjQgKiAxMDI0O1xuXG4vKipcbiAqIFRoaXMgY3VzdG9tIEhUVFAgaW5zdHJ1bWVudGF0aW9uIGlzIHVzZWQgdG8gaXNvbGF0ZSBpbmNvbWluZyByZXF1ZXN0cyBhbmQgYW5ub3RhdGUgdGhlbSB3aXRoIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uXG4gKiBJdCBkb2VzIG5vdCBlbWl0IGFueSBzcGFucy5cbiAqXG4gKiBUaGUgcmVhc29uIHRoaXMgaXMgaXNvbGF0ZWQgZnJvbSB0aGUgT3BlblRlbGVtZXRyeSBpbnN0cnVtZW50YXRpb24gaXMgdGhhdCB1c2VycyBtYXkgb3ZlcndyaXRlIHRoaXMsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIFNlbnRyeSBub3Qgd29ya2luZyBhcyBleHBlY3RlZC5cbiAqXG4gKiBJbXBvcnRhbnQgbm90ZTogQ29udHJhcnkgdG8gb3RoZXIgT1RFTCBpbnN0cnVtZW50YXRpb24sIHRoaXMgb25lIGNhbm5vdCBiZSB1bndyYXBwZWQuXG4gKiBJdCBvbmx5IGRvZXMgbWluaW1hbCB0aGluZ3MgdGhvdWdoIGFuZCBkb2VzIG5vdCBlbWl0IGFueSBzcGFucy5cbiAqXG4gKiBUaGlzIGlzIGhlYXZpbHkgaW5zcGlyZWQgJiBhZGFwdGVkIGZyb206XG4gKiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy9ibG9iL2Y4YWI1NTkyZGRlYTVjYmEwYTNiMzNiZjhkNzRmMjc4NzJjMDM2N2YvZXhwZXJpbWVudGFsL3BhY2thZ2VzL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWh0dHAvc3JjL2h0dHAudHNcbiAqL1xuY2xhc3MgU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbiBleHRlbmRzIGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25CYXNlIHtcbiAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoJ0BzZW50cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAnLCBjb3JlLlZFUlNJT04sIGNvbmZpZyk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGluaXQoKSB7XG4gICAgcmV0dXJuIFt0aGlzLl9nZXRIdHRwc0luc3RydW1lbnRhdGlvbigpLCB0aGlzLl9nZXRIdHRwSW5zdHJ1bWVudGF0aW9uKCldO1xuICB9XG5cbiAgLyoqIEdldCB0aGUgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgaHR0cCBtb2R1bGUuICovXG4gICBfZ2V0SHR0cEluc3RydW1lbnRhdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRGVmaW5pdGlvbihcbiAgICAgICdodHRwJyxcbiAgICAgIFsnKiddLFxuICAgICAgKG1vZHVsZUV4cG9ydHMpID0+IHtcbiAgICAgICAgLy8gUGF0Y2ggaW5jb21pbmcgcmVxdWVzdHMgZm9yIHJlcXVlc3QgaXNvbGF0aW9uXG4gICAgICAgIHN0ZWFsdGhXcmFwKG1vZHVsZUV4cG9ydHMuU2VydmVyLnByb3RvdHlwZSwgJ2VtaXQnLCB0aGlzLl9nZXRQYXRjaEluY29taW5nUmVxdWVzdEZ1bmN0aW9uKCkpO1xuXG4gICAgICAgIC8vIFBhdGNoIG91dGdvaW5nIHJlcXVlc3RzIGZvciBicmVhZGNydW1ic1xuICAgICAgICBjb25zdCBwYXRjaGVkUmVxdWVzdCA9IHN0ZWFsdGhXcmFwKG1vZHVsZUV4cG9ydHMsICdyZXF1ZXN0JywgdGhpcy5fZ2V0UGF0Y2hPdXRnb2luZ1JlcXVlc3RGdW5jdGlvbigpKTtcbiAgICAgICAgc3RlYWx0aFdyYXAobW9kdWxlRXhwb3J0cywgJ2dldCcsIHRoaXMuX2dldFBhdGNoT3V0Z29pbmdHZXRGdW5jdGlvbihwYXRjaGVkUmVxdWVzdCkpO1xuXG4gICAgICAgIHJldHVybiBtb2R1bGVFeHBvcnRzO1xuICAgICAgfSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gbm8gdW53cmFwIGhlcmVcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBHZXQgdGhlIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIGh0dHBzIG1vZHVsZS4gKi9cbiAgIF9nZXRIdHRwc0luc3RydW1lbnRhdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvbi5JbnN0cnVtZW50YXRpb25Ob2RlTW9kdWxlRGVmaW5pdGlvbihcbiAgICAgICdodHRwcycsXG4gICAgICBbJyonXSxcbiAgICAgIChtb2R1bGVFeHBvcnRzKSA9PiB7XG4gICAgICAgIC8vIFBhdGNoIGluY29taW5nIHJlcXVlc3RzIGZvciByZXF1ZXN0IGlzb2xhdGlvblxuICAgICAgICBzdGVhbHRoV3JhcChtb2R1bGVFeHBvcnRzLlNlcnZlci5wcm90b3R5cGUsICdlbWl0JywgdGhpcy5fZ2V0UGF0Y2hJbmNvbWluZ1JlcXVlc3RGdW5jdGlvbigpKTtcblxuICAgICAgICAvLyBQYXRjaCBvdXRnb2luZyByZXF1ZXN0cyBmb3IgYnJlYWRjcnVtYnNcbiAgICAgICAgY29uc3QgcGF0Y2hlZFJlcXVlc3QgPSBzdGVhbHRoV3JhcChtb2R1bGVFeHBvcnRzLCAncmVxdWVzdCcsIHRoaXMuX2dldFBhdGNoT3V0Z29pbmdSZXF1ZXN0RnVuY3Rpb24oKSk7XG4gICAgICAgIHN0ZWFsdGhXcmFwKG1vZHVsZUV4cG9ydHMsICdnZXQnLCB0aGlzLl9nZXRQYXRjaE91dGdvaW5nR2V0RnVuY3Rpb24ocGF0Y2hlZFJlcXVlc3QpKTtcblxuICAgICAgICByZXR1cm4gbW9kdWxlRXhwb3J0cztcbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIG5vIHVud3JhcCBoZXJlXG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUGF0Y2ggdGhlIGluY29taW5nIHJlcXVlc3QgZnVuY3Rpb24gZm9yIHJlcXVlc3QgaXNvbGF0aW9uLlxuICAgKi9cbiAgIF9nZXRQYXRjaEluY29taW5nUmVxdWVzdEZ1bmN0aW9uKClcblxuIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIG9yaWdpbmFsLFxuICAgICkgPT4ge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGluY29taW5nUmVxdWVzdCggZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gT25seSB0cmFjZXMgcmVxdWVzdCBldmVudHNcbiAgICAgICAgaWYgKGV2ZW50ICE9PSAncmVxdWVzdCcpIHtcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgW2V2ZW50LCAuLi5hcmdzXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnN0cnVtZW50YXRpb24uX2RpYWcuZGVidWcoJ2h0dHAgaW5zdHJ1bWVudGF0aW9uIGZvciBpbmNvbWluZyByZXF1ZXN0Jyk7XG5cbiAgICAgICAgY29uc3QgaXNvbGF0aW9uU2NvcGUgPSBjb3JlJDEuZ2V0SXNvbGF0aW9uU2NvcGUoKS5jbG9uZSgpO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gYXJnc1swXSA7XG5cbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFJlcXVlc3QgPSBjb3JlJDEuaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhKHJlcXVlc3QpO1xuXG4gICAgICAgIHBhdGNoUmVxdWVzdFRvQ2FwdHVyZUJvZHkocmVxdWVzdCwgaXNvbGF0aW9uU2NvcGUpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgaXNvbGF0aW9uIHNjb3BlLCBpc29sYXRlIHRoaXMgcmVxdWVzdFxuICAgICAgICAvLyBUT0RPKHY5KTogU3RvcCBzZXR0aW5nIGByZXF1ZXN0YCwgd2Ugb25seSByZWx5IG9uIG5vcm1hbGl6ZWRSZXF1ZXN0IGFueW1vcmVcbiAgICAgICAgaXNvbGF0aW9uU2NvcGUuc2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhKHtcbiAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgIG5vcm1hbGl6ZWRSZXF1ZXN0LFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjbGllbnQgPSBjb3JlJDEuZ2V0Q2xpZW50KCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICBpZiAoY2xpZW50ICYmIGNsaWVudC5nZXRPcHRpb25zKCkuYXV0b1Nlc3Npb25UcmFja2luZykge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgIGlzb2xhdGlvblNjb3BlLnNldFJlcXVlc3RTZXNzaW9uKHsgc3RhdHVzOiAnb2snIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXR0ZW1wdCB0byB1cGRhdGUgdGhlIHNjb3BlJ3MgYHRyYW5zYWN0aW9uTmFtZWAgYmFzZWQgb24gdGhlIHJlcXVlc3QgVVJMXG4gICAgICAgIC8vIElkZWFsbHksIGZyYW1ld29yayBpbnN0cnVtZW50YXRpb25zIGNvbWluZyBhZnRlciB0aGUgSHR0cEluc3RydW1lbnRhdGlvblxuICAgICAgICAvLyB1cGRhdGUgdGhlIHRyYW5zYWN0aW9uTmFtZSBvbmNlIHdlIGdldCBhIHBhcmFtZXRlcml6ZWQgcm91dGUuXG4gICAgICAgIGNvbnN0IGh0dHBNZXRob2QgPSAocmVxdWVzdC5tZXRob2QgfHwgJ0dFVCcpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGh0dHBUYXJnZXQgPSBjb3JlJDEuc3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50KHJlcXVlc3QudXJsIHx8ICcvJyk7XG5cbiAgICAgICAgY29uc3QgYmVzdEVmZm9ydFRyYW5zYWN0aW9uTmFtZSA9IGAke2h0dHBNZXRob2R9ICR7aHR0cFRhcmdldH1gO1xuXG4gICAgICAgIGlzb2xhdGlvblNjb3BlLnNldFRyYW5zYWN0aW9uTmFtZShiZXN0RWZmb3J0VHJhbnNhY3Rpb25OYW1lKTtcblxuICAgICAgICByZXR1cm4gY29yZSQxLndpdGhJc29sYXRpb25TY29wZShpc29sYXRpb25TY29wZSwgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBbZXZlbnQsIC4uLmFyZ3NdKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUGF0Y2ggdGhlIG91dGdvaW5nIHJlcXVlc3QgZnVuY3Rpb24gZm9yIGJyZWFkY3J1bWJzLlxuICAgKi9cbiAgIF9nZXRQYXRjaE91dGdvaW5nUmVxdWVzdEZ1bmN0aW9uKClcblxuIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb24gPSB0aGlzO1xuXG4gICAgcmV0dXJuIChvcmlnaW5hbCkgPT4ge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG91dGdvaW5nUmVxdWVzdCggLi4uYXJncykge1xuICAgICAgICBpbnN0cnVtZW50YXRpb24uX2RpYWcuZGVidWcoJ2h0dHAgaW5zdHJ1bWVudGF0aW9uIGZvciBvdXRnb2luZyByZXF1ZXN0cycpO1xuXG4gICAgICAgIC8vIE1ha2luZyBhIGNvcHkgdG8gYXZvaWQgbXV0YXRpbmcgdGhlIG9yaWdpbmFsIGFyZ3MgYXJyYXlcbiAgICAgICAgLy8gV2UgbmVlZCB0byBhY2Nlc3MgYW5kIHJlY29uc3RydWN0IHRoZSByZXF1ZXN0IG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byBgaWdub3JlT3V0Z29pbmdSZXF1ZXN0c2BcbiAgICAgICAgLy8gc28gdGhhdCBpdCBtYXRjaGVzIHdoYXQgT3RlbCBpbnN0cnVtZW50YXRpb24gcGFzc2VzIHRvIGBpZ25vcmVPdXRnb2luZ1JlcXVlc3RIb29rYC5cbiAgICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy9ibG9iLzcyOTNlNjljMWU1NWNhNjJlMTVkMDcyNGQyMjYwNWU2MWJkNTg5NTIvZXhwZXJpbWVudGFsL3BhY2thZ2VzL29wZW50ZWxlbWV0cnktaW5zdHJ1bWVudGF0aW9uLWh0dHAvc3JjL2h0dHAudHMjTDc1Ni1MNzg5XG4gICAgICAgIGNvbnN0IGFyZ3NDb3B5ID0gWy4uLmFyZ3NdO1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBhcmdzQ29weS5zaGlmdCgpIDtcblxuICAgICAgICBjb25zdCBleHRyYU9wdGlvbnMgPVxuICAgICAgICAgIHR5cGVvZiBhcmdzQ29weVswXSA9PT0gJ29iamVjdCcgJiYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyB8fCBvcHRpb25zIGluc3RhbmNlb2YgVVJMKVxuICAgICAgICAgICAgPyAoYXJnc0NvcHkuc2hpZnQoKSApXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjb25zdCB7IG9wdGlvbnNQYXJzZWQgfSA9IGdldFJlcXVlc3RJbmZvLmdldFJlcXVlc3RJbmZvKGluc3RydW1lbnRhdGlvbi5fZGlhZywgb3B0aW9ucywgZXh0cmFPcHRpb25zKTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncykgO1xuXG4gICAgICAgIHJlcXVlc3QucHJlcGVuZExpc3RlbmVyKCdyZXNwb25zZScsIChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IF9icmVhZGNydW1icyA9IGluc3RydW1lbnRhdGlvbi5nZXRDb25maWcoKS5icmVhZGNydW1icztcbiAgICAgICAgICBjb25zdCBicmVhZENydW1ic0VuYWJsZWQgPSB0eXBlb2YgX2JyZWFkY3J1bWJzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBfYnJlYWRjcnVtYnM7XG5cbiAgICAgICAgICBjb25zdCBfaWdub3JlT3V0Z29pbmdSZXF1ZXN0cyA9IGluc3RydW1lbnRhdGlvbi5nZXRDb25maWcoKS5pZ25vcmVPdXRnb2luZ1JlcXVlc3RzO1xuICAgICAgICAgIGNvbnN0IHNob3VsZENyZWF0ZUJyZWFkY3J1bWIgPVxuICAgICAgICAgICAgdHlwZW9mIF9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgID8gIV9pZ25vcmVPdXRnb2luZ1JlcXVlc3RzKGdldFJlcXVlc3RVcmwuZ2V0UmVxdWVzdFVybChyZXF1ZXN0KSwgb3B0aW9uc1BhcnNlZClcbiAgICAgICAgICAgICAgOiB0cnVlO1xuXG4gICAgICAgICAgaWYgKGJyZWFkQ3J1bWJzRW5hYmxlZCAmJiBzaG91bGRDcmVhdGVCcmVhZGNydW1iKSB7XG4gICAgICAgICAgICBhZGRSZXF1ZXN0QnJlYWRjcnVtYihyZXF1ZXN0LCByZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIC8qKiBQYXRoIHRoZSBvdXRnb2luZyBnZXQgZnVuY3Rpb24gZm9yIGJyZWFkY3J1bWJzLiAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgX2dldFBhdGNoT3V0Z29pbmdHZXRGdW5jdGlvbihjbGllbnRSZXF1ZXN0KSB7XG4gICAgcmV0dXJuIChfb3JpZ2luYWwpID0+IHtcbiAgICAgIC8vIFJlLWltcGxlbWVudCBodHRwLmdldC4gVGhpcyBuZWVkcyB0byBiZSBkb25lIChpbnN0ZWFkIG9mIHVzaW5nXG4gICAgICAvLyBnZXRQYXRjaE91dGdvaW5nUmVxdWVzdEZ1bmN0aW9uIHRvIHBhdGNoIGl0KSBiZWNhdXNlIHdlIG5lZWQgdG9cbiAgICAgIC8vIHNldCB0aGUgdHJhY2UgY29udGV4dCBoZWFkZXIgYmVmb3JlIHRoZSByZXR1cm5lZCBodHRwLkNsaWVudFJlcXVlc3QgaXNcbiAgICAgIC8vIGVuZGVkLiBUaGUgTm9kZS5qcyBkb2NzIHN0YXRlIHRoYXQgdGhlIG9ubHkgZGlmZmVyZW5jZXMgYmV0d2VlblxuICAgICAgLy8gcmVxdWVzdCBhbmQgZ2V0IGFyZSB0aGF0ICgxKSBnZXQgZGVmYXVsdHMgdG8gdGhlIEhUVFAgR0VUIG1ldGhvZCBhbmRcbiAgICAgIC8vICgyKSB0aGUgcmV0dXJuZWQgcmVxdWVzdCBvYmplY3QgaXMgZW5kZWQgaW1tZWRpYXRlbHkuIFRoZSBmb3JtZXIgaXNcbiAgICAgIC8vIGFscmVhZHkgdHJ1ZSAoYXQgbGVhc3QgaW4gc3VwcG9ydGVkIE5vZGUgdmVyc2lvbnMgdXAgdG8gdjEwKSwgc28gd2VcbiAgICAgIC8vIHNpbXBseSBmb2xsb3cgdGhlIGxhdHRlci4gUmVmOlxuICAgICAgLy8gaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL2h0dHAuaHRtbCNodHRwX2h0dHBfZ2V0X29wdGlvbnNfY2FsbGJhY2tcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVhcGlzL2Nsb3VkLXRyYWNlLW5vZGVqcy9ibG9iL21hc3Rlci9zcmMvaW5zdHJ1bWVudGF0aW9ucy9pbnN0cnVtZW50YXRpb24taHR0cC50cyNMMTk4XG4gICAgICByZXR1cm4gZnVuY3Rpb24gb3V0Z29pbmdHZXRSZXF1ZXN0KC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgcmVxID0gY2xpZW50UmVxdWVzdCguLi5hcmdzKTtcbiAgICAgICAgcmVxLmVuZCgpO1xuICAgICAgICByZXR1cm4gcmVxO1xuICAgICAgfTtcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBhIG1pbmltYWwgdmVyc2lvbiBvZiBgd3JhcGAgZnJvbSBzaGltbWVyOlxuICogaHR0cHM6Ly9naXRodWIuY29tL290aGl5bTIzL3NoaW1tZXIvYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAqXG4gKiBJbiBjb250cmFzdCB0byB0aGUgb3JpZ2luYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgdmVyc2lvbiBkb2VzIG5vdCBhbGxvdyB0byB1bndyYXAsXG4gKiBhbmQgZG9lcyBub3QgbWFrZSBpdCBjbGVhciB0aGF0IHRoZSBtZXRob2QgaXMgd3JhcHBlZC5cbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2Ugd2FudCB0byB3cmFwIHRoZSBodHRwIG1vZHVsZSB3aXRoIG91ciBvd24gY29kZSxcbiAqIHdoaWxlIHN0aWxsIGFsbG93aW5nIHRvIHVzZSB0aGUgSHR0cEluc3RydW1lbnRhdGlvbiBmcm9tIE9URUwuXG4gKlxuICogV2l0aG91dCB0aGlzLCBpZiB3ZSdkIGp1c3QgdXNlIGB3cmFwYCBmcm9tIHNoaW1tZXIsIHRoZSBPVEVMIGluc3RydW1lbnRhdGlvbiB3b3VsZCByZW1vdmUgb3VyIHdyYXBwaW5nLFxuICogYmVjYXVzZSBpdCBvbmx5IGFsbG93cyBhbnkgbW9kdWxlIHRvIGJlIHdyYXBwZWQgYSBzaW5nbGUgdGltZS5cbiAqL1xuZnVuY3Rpb24gc3RlYWx0aFdyYXAoXG4gIG5vZHVsZSxcbiAgbmFtZSxcbiAgd3JhcHBlcixcbikge1xuICBjb25zdCBvcmlnaW5hbCA9IG5vZHVsZVtuYW1lXTtcbiAgY29uc3Qgd3JhcHBlZCA9IHdyYXBwZXIob3JpZ2luYWwpO1xuXG4gIGRlZmluZVByb3BlcnR5KG5vZHVsZSwgbmFtZSwgd3JhcHBlZCk7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG4vLyBTZXRzIGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LCBwcmVzZXJ2aW5nIGl0cyBlbnVtZXJhYmlsaXR5LlxuZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoXG4gIG9iaixcbiAgbmFtZSxcbiAgdmFsdWUsXG4pIHtcbiAgY29uc3QgZW51bWVyYWJsZSA9ICEhb2JqW25hbWVdICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIG5hbWUpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gIH0pO1xufVxuXG4vKiogQWRkIGEgYnJlYWRjcnVtYiBmb3Igb3V0Z29pbmcgcmVxdWVzdHMuICovXG5mdW5jdGlvbiBhZGRSZXF1ZXN0QnJlYWRjcnVtYihyZXF1ZXN0LCByZXNwb25zZSkge1xuICBjb25zdCBkYXRhID0gZ2V0QnJlYWRjcnVtYkRhdGEocmVxdWVzdCk7XG5cbiAgY29uc3Qgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gIGNvbnN0IGxldmVsID0gY29yZSQxLmdldEJyZWFkY3J1bWJMb2dMZXZlbEZyb21IdHRwU3RhdHVzQ29kZShzdGF0dXNDb2RlKTtcblxuICBjb3JlJDEuYWRkQnJlYWRjcnVtYihcbiAgICB7XG4gICAgICBjYXRlZ29yeTogJ2h0dHAnLFxuICAgICAgZGF0YToge1xuICAgICAgICBzdGF0dXNfY29kZTogc3RhdHVzQ29kZSxcbiAgICAgICAgLi4uZGF0YSxcbiAgICAgIH0sXG4gICAgICB0eXBlOiAnaHR0cCcsXG4gICAgICBsZXZlbCxcbiAgICB9LFxuICAgIHtcbiAgICAgIGV2ZW50OiAncmVzcG9uc2UnLFxuICAgICAgcmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlLFxuICAgIH0sXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldEJyZWFkY3J1bWJEYXRhKHJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICAvLyBgcmVxdWVzdC5ob3N0YCBkb2VzIG5vdCBjb250YWluIHRoZSBwb3J0LCBidXQgdGhlIGhvc3QgaGVhZGVyIGRvZXNcbiAgICBjb25zdCBob3N0ID0gcmVxdWVzdC5nZXRIZWFkZXIoJ2hvc3QnKSB8fCByZXF1ZXN0Lmhvc3Q7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnBhdGgsIGAke3JlcXVlc3QucHJvdG9jb2x9Ly8ke2hvc3R9YCk7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gY29yZSQxLnBhcnNlVXJsKHVybC50b1N0cmluZygpKTtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICB1cmw6IGNvcmUkMS5nZXRTYW5pdGl6ZWRVcmxTdHJpbmcocGFyc2VkVXJsKSxcbiAgICAgICdodHRwLm1ldGhvZCc6IHJlcXVlc3QubWV0aG9kIHx8ICdHRVQnLFxuICAgIH07XG5cbiAgICBpZiAocGFyc2VkVXJsLnNlYXJjaCkge1xuICAgICAgZGF0YVsnaHR0cC5xdWVyeSddID0gcGFyc2VkVXJsLnNlYXJjaDtcbiAgICB9XG4gICAgaWYgKHBhcnNlZFVybC5oYXNoKSB7XG4gICAgICBkYXRhWydodHRwLmZyYWdtZW50J10gPSBwYXJzZWRVcmwuaGFzaDtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHBhdGNoZXMgdGhlIHJlcXVlc3Qgb2JqZWN0IHRvIGNhcHR1cmUgdGhlIGJvZHkuXG4gKiBJbnN0ZWFkIG9mIGFjdHVhbGx5IGNvbnN1bWluZyB0aGUgc3RyZWFtZWQgYm9keSBvdXJzZWx2ZXMsIHdoaWNoIGhhcyBwb3RlbnRpYWwgc2lkZSBlZmZlY3RzLFxuICogd2UgbW9ua2V5IHBhdGNoIGByZXEub24oJ2RhdGEnKWAgdG8gaW50ZXJjZXB0IHRoZSBib2R5IGNodW5rcy5cbiAqIFRoaXMgd2F5LCB3ZSBvbmx5IHJlYWQgdGhlIGJvZHkgaWYgdGhlIHVzZXIgYWxzbyBjb25zdW1lcyB0aGUgYm9keSwgZW5zdXJpbmcgd2UgZG8gbm90IGNoYW5nZSBhbnkgYmVoYXZpb3IgaW4gdW5leHBlY3RlZCB3YXlzLlxuICovXG5mdW5jdGlvbiBwYXRjaFJlcXVlc3RUb0NhcHR1cmVCb2R5KHJlcSwgaXNvbGF0aW9uU2NvcGUpIHtcbiAgY29uc3QgY2h1bmtzID0gW107XG5cbiAgZnVuY3Rpb24gZ2V0Q2h1bmtzU2l6ZSgpIHtcbiAgICByZXR1cm4gY2h1bmtzLnJlZHVjZSgoYWNjLCBjaHVuaykgPT4gYWNjICsgY2h1bmsuYnl0ZUxlbmd0aCwgMCk7XG4gIH1cblxuICAvKipcbiAgICogV2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIHRoZSBvcmlnaW5hbCBjYWxsYmFja3MsIGluIG9yZGVyIHRvIGJlIGFibGUgdG8gcmVtb3ZlIGxpc3RlbmVycyBhZ2Fpbi5cbiAgICogU2luY2UgYG9mZmAgZGVwZW5kcyBvbiBoYXZpbmcgdGhlIGV4YWN0IHNhbWUgZnVuY3Rpb24gcmVmZXJlbmNlIHBhc3NlZCBpbiwgd2UgbmVlZCB0byBiZSBhYmxlIHRvIG1hcFxuICAgKiBvcmlnaW5hbCBsaXN0ZW5lcnMgdG8gb3VyIHdyYXBwZWQgb25lcy5cbiAgICovXG4gIGNvbnN0IGNhbGxiYWNrTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgICByZXEub24gPSBuZXcgUHJveHkocmVxLm9uLCB7XG4gICAgICBhcHBseTogKHRhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgICBjb25zdCBbZXZlbnQsIGxpc3RlbmVyLCAuLi5yZXN0QXJnc10gPSBhcmdzO1xuXG4gICAgICAgIGlmIChldmVudCA9PT0gJ2RhdGEnKSB7XG4gICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBuZXcgUHJveHkobGlzdGVuZXIsIHtcbiAgICAgICAgICAgIGFwcGx5OiAodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYWxyZWFkeSByZWFkIG1vcmUgdGhhbiB0aGUgbWF4IGJvZHkgbGVuZ3RoLCB3ZSBzdG9wIGFkZGlpbmcgY2h1bmtzXG4gICAgICAgICAgICAgIC8vIFRvIGF2b2lkIGdyb3dpbmcgdGhlIG1lbW9yeSBpbmRlZmluaXRlbHkgaWYgYSByZXNwb25zIGlzIGUuZy4gc3RyZWFtZWRcbiAgICAgICAgICAgICAgaWYgKGdldENodW5rc1NpemUoKSA8IE1BWF9CT0RZX0JZVEVfTEVOR1RIKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBhcmdzWzBdIDtcbiAgICAgICAgICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVidWdCdWlsZC5ERUJVR19CVUlMRCkge1xuICAgICAgICAgICAgICAgIGNvcmUkMS5sb2dnZXIubG9nKFxuICAgICAgICAgICAgICAgICAgYERyb3BwaW5nIHJlcXVlc3QgYm9keSBjaHVuayBiZWNhdXNlIGl0IG1heGltdW0gYm9keSBsZW5ndGggb2YgJHtNQVhfQk9EWV9CWVRFX0xFTkdUSH1iIGlzIGV4Y2VlZGVkLmAsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY2FsbGJhY2tNYXAuc2V0KGxpc3RlbmVyLCBjYWxsYmFjayk7XG5cbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIFtldmVudCwgY2FsbGJhY2ssIC4uLnJlc3RBcmdzXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQgPT09ICdlbmQnKSB7XG4gICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBuZXcgUHJveHkobGlzdGVuZXIsIHtcbiAgICAgICAgICAgIGFwcGx5OiAodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IEJ1ZmZlci5jb25jYXQoY2h1bmtzKS50b1N0cmluZygndXRmLTgnKTtcblxuICAgICAgICAgICAgICAgIGlmIChib2R5KSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBub3JtYWxpemVkUmVxdWVzdCA9IHsgZGF0YTogYm9keSB9IDtcbiAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7IG5vcm1hbGl6ZWRSZXF1ZXN0IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGhlcmVcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY2FsbGJhY2tNYXAuc2V0KGxpc3RlbmVyLCBjYWxsYmFjayk7XG5cbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIFtldmVudCwgY2FsbGJhY2ssIC4uLnJlc3RBcmdzXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIEVuc3VyZSB3ZSBhbHNvIHJlbW92ZSBjYWxsYmFja3MgY29ycmVjdGx5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgIHJlcS5vZmYgPSBuZXcgUHJveHkocmVxLm9mZiwge1xuICAgICAgYXBwbHk6ICh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgWywgbGlzdGVuZXJdID0gYXJncztcblxuICAgICAgICBjb25zdCBjYWxsYmFjayA9IGNhbGxiYWNrTWFwLmdldChsaXN0ZW5lcik7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrTWFwLmRlbGV0ZShsaXN0ZW5lcik7XG5cbiAgICAgICAgICBjb25zdCBtb2RpZmllZEFyZ3MgPSBhcmdzLnNsaWNlKCk7XG4gICAgICAgICAgbW9kaWZpZWRBcmdzWzFdID0gY2FsbGJhY2s7XG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBtb2RpZmllZEFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUzKSB7XG4gICAgLy8gaWdub3JlIGVycm9ycyBpZiB3ZSBjYW4ndCBwYXRjaCBzdHVmZlxuICB9XG59XG5cbmV4cG9ydHMuU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbiA9IFNlbnRyeUh0dHBJbnN0cnVtZW50YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29yZSIsInJlcXVpcmUiLCJpbnN0cnVtZW50YXRpb24iLCJjb3JlJDEiLCJkZWJ1Z0J1aWxkIiwiZ2V0UmVxdWVzdFVybCIsImdldFJlcXVlc3RJbmZvIiwiTUFYX0JPRFlfQllURV9MRU5HVEgiLCJTZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uIiwiSW5zdHJ1bWVudGF0aW9uQmFzZSIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwiVkVSU0lPTiIsImluaXQiLCJfZ2V0SHR0cHNJbnN0cnVtZW50YXRpb24iLCJfZ2V0SHR0cEluc3RydW1lbnRhdGlvbiIsIkluc3RydW1lbnRhdGlvbk5vZGVNb2R1bGVEZWZpbml0aW9uIiwibW9kdWxlRXhwb3J0cyIsInN0ZWFsdGhXcmFwIiwiU2VydmVyIiwicHJvdG90eXBlIiwiX2dldFBhdGNoSW5jb21pbmdSZXF1ZXN0RnVuY3Rpb24iLCJwYXRjaGVkUmVxdWVzdCIsIl9nZXRQYXRjaE91dGdvaW5nUmVxdWVzdEZ1bmN0aW9uIiwiX2dldFBhdGNoT3V0Z29pbmdHZXRGdW5jdGlvbiIsIm9yaWdpbmFsIiwiaW5jb21pbmdSZXF1ZXN0IiwiZXZlbnQiLCJhcmdzIiwiYXBwbHkiLCJfZGlhZyIsImRlYnVnIiwiaXNvbGF0aW9uU2NvcGUiLCJnZXRJc29sYXRpb25TY29wZSIsImNsb25lIiwicmVxdWVzdCIsIm5vcm1hbGl6ZWRSZXF1ZXN0IiwiaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhIiwicGF0Y2hSZXF1ZXN0VG9DYXB0dXJlQm9keSIsInNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSIsImNsaWVudCIsImdldENsaWVudCIsImdldE9wdGlvbnMiLCJhdXRvU2Vzc2lvblRyYWNraW5nIiwic2V0UmVxdWVzdFNlc3Npb24iLCJzdGF0dXMiLCJodHRwTWV0aG9kIiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJodHRwVGFyZ2V0Iiwic3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50IiwidXJsIiwiYmVzdEVmZm9ydFRyYW5zYWN0aW9uTmFtZSIsInNldFRyYW5zYWN0aW9uTmFtZSIsIndpdGhJc29sYXRpb25TY29wZSIsIm91dGdvaW5nUmVxdWVzdCIsImFyZ3NDb3B5Iiwib3B0aW9ucyIsInNoaWZ0IiwiZXh0cmFPcHRpb25zIiwiVVJMIiwidW5kZWZpbmVkIiwib3B0aW9uc1BhcnNlZCIsInByZXBlbmRMaXN0ZW5lciIsInJlc3BvbnNlIiwiX2JyZWFkY3J1bWJzIiwiZ2V0Q29uZmlnIiwiYnJlYWRjcnVtYnMiLCJicmVhZENydW1ic0VuYWJsZWQiLCJfaWdub3JlT3V0Z29pbmdSZXF1ZXN0cyIsImlnbm9yZU91dGdvaW5nUmVxdWVzdHMiLCJzaG91bGRDcmVhdGVCcmVhZGNydW1iIiwiYWRkUmVxdWVzdEJyZWFkY3J1bWIiLCJjbGllbnRSZXF1ZXN0IiwiX29yaWdpbmFsIiwib3V0Z29pbmdHZXRSZXF1ZXN0IiwicmVxIiwiZW5kIiwibm9kdWxlIiwibmFtZSIsIndyYXBwZXIiLCJ3cmFwcGVkIiwib2JqIiwiZW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiY2FsbCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGF0YSIsImdldEJyZWFkY3J1bWJEYXRhIiwic3RhdHVzQ29kZSIsImxldmVsIiwiZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlIiwiYWRkQnJlYWRjcnVtYiIsImNhdGVnb3J5Iiwic3RhdHVzX2NvZGUiLCJ0eXBlIiwiaG9zdCIsImdldEhlYWRlciIsInBhdGgiLCJwcm90b2NvbCIsInBhcnNlZFVybCIsInBhcnNlVXJsIiwidG9TdHJpbmciLCJnZXRTYW5pdGl6ZWRVcmxTdHJpbmciLCJzZWFyY2giLCJoYXNoIiwiZSIsImNodW5rcyIsImdldENodW5rc1NpemUiLCJyZWR1Y2UiLCJhY2MiLCJjaHVuayIsImJ5dGVMZW5ndGgiLCJjYWxsYmFja01hcCIsIldlYWtNYXAiLCJvbiIsIlByb3h5IiwidGFyZ2V0IiwidGhpc0FyZyIsImxpc3RlbmVyIiwicmVzdEFyZ3MiLCJjYWxsYmFjayIsInB1c2giLCJERUJVR19CVUlMRCIsImxvZ2dlciIsImxvZyIsIlJlZmxlY3QiLCJzZXQiLCJib2R5IiwiQnVmZmVyIiwiY29uY2F0IiwiZTIiLCJvZmYiLCJnZXQiLCJkZWxldGUiLCJtb2RpZmllZEFyZ3MiLCJzbGljZSIsImUzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/http/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentationHttp = __webpack_require__(/*! @opentelemetry/instrumentation-http */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-http/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./SentryHttpInstrumentation.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\nconst INTEGRATION_NAME = 'Http';\nconst INSTRUMENTATION_NAME = '@opentelemetry_sentry-patched/instrumentation-http';\nconst instrumentSentryHttp = instrument.generateInstrumentOnce(`${INTEGRATION_NAME}.sentry`, options => {\n  return new SentryHttpInstrumentation.SentryHttpInstrumentation({\n    breadcrumbs: _optionalChain([options, 'optionalAccess', _ => _.breadcrumbs]),\n    ignoreOutgoingRequests: _optionalChain([options, 'optionalAccess', _2 => _2.ignoreOutgoingRequests])\n  });\n});\nconst instrumentOtelHttp = instrument.generateInstrumentOnce(INTEGRATION_NAME, config => {\n  const instrumentation = new instrumentationHttp.HttpInstrumentation(config);\n\n  // We want to update the logger namespace so we can better identify what is happening here\n  try {\n    instrumentation['_diag'] = api.diag.createComponentLogger({\n      namespace: INSTRUMENTATION_NAME\n    });\n    // @ts-expect-error We are writing a read-only property here...\n    instrumentation.instrumentationName = INSTRUMENTATION_NAME;\n  } catch (e) {\n    // ignore errors here...\n  }\n  return instrumentation;\n});\n\n/**\n * Instrument the HTTP and HTTPS modules.\n */\nconst instrumentHttp = (options = {}) => {\n  // This is the \"regular\" OTEL instrumentation that emits spans\n  if (options.spans !== false) {\n    const instrumentationConfig = getConfigWithDefaults(options);\n    instrumentOtelHttp(instrumentationConfig);\n  }\n\n  // This is the Sentry-specific instrumentation that isolates requests & creates breadcrumbs\n  // Note that this _has_ to be wrapped after the OTEL instrumentation,\n  // otherwise the isolation will not work correctly\n  instrumentSentryHttp(options);\n};\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs and spans for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHttp(options);\n    }\n  };\n});\n\n/**\n * Determines if @param req is a ClientRequest, meaning the request was created within the express app\n * and it's an outgoing request.\n * Checking for properties instead of using `instanceOf` to avoid importing the request classes.\n */\nfunction _isClientRequest(req) {\n  return 'outputData' in req && 'outputSize' in req && !('client' in req) && !('statusCode' in req);\n}\n\n/**\n * Detects if an incoming request is a prefetch request.\n */\nfunction isKnownPrefetchRequest(req) {\n  // Currently only handles Next.js prefetch requests but may check other frameworks in the future.\n  return req.headers['next-router-prefetch'] === '1';\n}\nfunction getConfigWithDefaults(options = {}) {\n  const instrumentationConfig = {\n    ..._optionalChain([options, 'access', _3 => _3.instrumentation, 'optionalAccess', _4 => _4._experimentalConfig]),\n    disableIncomingRequestInstrumentation: options.disableIncomingRequestSpans,\n    ignoreOutgoingRequestHook: request => {\n      const url = getRequestUrl.getRequestUrl(request);\n      if (!url) {\n        return false;\n      }\n      const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n      if (_ignoreOutgoingRequests && _ignoreOutgoingRequests(url, request)) {\n        return true;\n      }\n      return false;\n    },\n    ignoreIncomingRequestHook: request => {\n      // request.url is the only property that holds any information about the url\n      // it only consists of the URL path and query string (if any)\n      const urlPath = request.url;\n      const method = _optionalChain([request, 'access', _5 => _5.method, 'optionalAccess', _6 => _6.toUpperCase, 'call', _7 => _7()]);\n      // We do not capture OPTIONS/HEAD requests as transactions\n      if (method === 'OPTIONS' || method === 'HEAD') {\n        return true;\n      }\n      const _ignoreIncomingRequests = options.ignoreIncomingRequests;\n      if (urlPath && _ignoreIncomingRequests && _ignoreIncomingRequests(urlPath, request)) {\n        return true;\n      }\n      return false;\n    },\n    requireParentforOutgoingSpans: false,\n    requireParentforIncomingSpans: false,\n    requestHook: (span, req) => {\n      addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.http');\n      if (!_isClientRequest(req) && isKnownPrefetchRequest(req)) {\n        span.setAttribute('sentry.http.prefetch', true);\n      }\n      _optionalChain([options, 'access', _8 => _8.instrumentation, 'optionalAccess', _9 => _9.requestHook, 'optionalCall', _10 => _10(span, req)]);\n    },\n    responseHook: (span, res) => {\n      const client = opentelemetry.getClient();\n      if (client &&\n      // eslint-disable-next-line deprecation/deprecation\n      client.getOptions().autoSessionTracking !== false && options.trackIncomingRequestsAsSessions !== false) {\n        setImmediate(() => {\n          client['_captureRequestSession']();\n        });\n      }\n      _optionalChain([options, 'access', _11 => _11.instrumentation, 'optionalAccess', _12 => _12.responseHook, 'optionalCall', _13 => _13(span, res)]);\n    },\n    applyCustomAttributesOnSpan: (span, request, response) => {\n      _optionalChain([options, 'access', _14 => _14.instrumentation, 'optionalAccess', _15 => _15.applyCustomAttributesOnSpan, 'optionalCall', _16 => _16(span, request, response)]);\n    }\n  };\n  return instrumentationConfig;\n}\nexports.httpIntegration = httpIntegration;\nexports.instrumentOtelHttp = instrumentOtelHttp;\nexports.instrumentSentryHttp = instrumentSentryHttp;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/vendor/getRequestInfo.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/http/vendor/getRequestInfo.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst url = __webpack_require__(/*! url */ \"url\");\n\n/**\n * Makes sure options is an url object\n * return an object with default value and parsed options\n * @param logger component logger\n * @param options original options for the request\n * @param [extraOptions] additional options for the request\n */\nconst getRequestInfo = (logger, options, extraOptions) => {\n  let pathname;\n  let origin;\n  let optionsParsed;\n  let invalidUrl = false;\n  if (typeof options === 'string') {\n    try {\n      const convertedOptions = stringUrlToHttpOptions(options);\n      optionsParsed = convertedOptions;\n      pathname = convertedOptions.pathname || '/';\n    } catch (e) {\n      invalidUrl = true;\n      logger.verbose('Unable to parse URL provided to HTTP request, using fallback to determine path. Original error:', e);\n      // for backward compatibility with how url.parse() behaved.\n      optionsParsed = {\n        path: options\n      };\n      pathname = optionsParsed.path || '/';\n    }\n    origin = `${optionsParsed.protocol || 'http:'}//${optionsParsed.host}`;\n    if (extraOptions !== undefined) {\n      Object.assign(optionsParsed, extraOptions);\n    }\n  } else if (options instanceof url.URL) {\n    optionsParsed = {\n      protocol: options.protocol,\n      hostname: typeof options.hostname === 'string' && options.hostname.startsWith('[') ? options.hostname.slice(1, -1) : options.hostname,\n      path: `${options.pathname || ''}${options.search || ''}`\n    };\n    if (options.port !== '') {\n      optionsParsed.port = Number(options.port);\n    }\n    if (options.username || options.password) {\n      optionsParsed.auth = `${options.username}:${options.password}`;\n    }\n    pathname = options.pathname;\n    origin = options.origin;\n    if (extraOptions !== undefined) {\n      Object.assign(optionsParsed, extraOptions);\n    }\n  } else {\n    optionsParsed = Object.assign({\n      protocol: options.host ? 'http:' : undefined\n    }, options);\n    const hostname = optionsParsed.host || (optionsParsed.port != null ? `${optionsParsed.hostname}${optionsParsed.port}` : optionsParsed.hostname);\n    origin = `${optionsParsed.protocol || 'http:'}//${hostname}`;\n    pathname = options.pathname;\n    if (!pathname && optionsParsed.path) {\n      try {\n        const parsedUrl = new URL(optionsParsed.path, origin);\n        pathname = parsedUrl.pathname || '/';\n      } catch (e) {\n        pathname = '/';\n      }\n    }\n  }\n\n  // some packages return method in lowercase..\n  // ensure upperCase for consistency\n  const method = optionsParsed.method ? optionsParsed.method.toUpperCase() : 'GET';\n  return {\n    origin,\n    pathname,\n    method,\n    optionsParsed,\n    invalidUrl\n  };\n};\n\n/**\n * Mimics Node.js conversion of URL strings to RequestOptions expected by\n * `http.request` and `https.request` APIs.\n *\n * See https://github.com/nodejs/node/blob/2505e217bba05fc581b572c685c5cf280a16c5a3/lib/internal/url.js#L1415-L1437\n *\n * @param stringUrl\n * @throws TypeError if the URL is not valid.\n */\nfunction stringUrlToHttpOptions(stringUrl) {\n  // This is heavily inspired by Node.js handling of the same situation, trying\n  // to follow it as closely as possible while keeping in mind that we only\n  // deal with string URLs, not URL objects.\n  const {\n    hostname,\n    pathname,\n    port,\n    username,\n    password,\n    search,\n    protocol,\n    hash,\n    href,\n    origin,\n    host\n  } = new URL(stringUrl);\n  const options = {\n    protocol: protocol,\n    hostname: hostname && hostname[0] === '[' ? hostname.slice(1, -1) : hostname,\n    hash: hash,\n    search: search,\n    pathname: pathname,\n    path: `${pathname || ''}${search || ''}`,\n    href: href,\n    origin: origin,\n    host: host\n  };\n  if (port !== '') {\n    options.port = Number(port);\n  }\n  if (username || password) {\n    options.auth = `${decodeURIComponent(username)}:${decodeURIComponent(password)}`;\n  }\n  return options;\n}\nexports.getRequestInfo = getRequestInfo;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/vendor/getRequestInfo.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * The key used to store the local variables on the error object.\n */\nconst LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__';\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nfunction createRateLimiter(maxPerSecond, enable, disable) {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n    count = 0;\n  }, 1000).unref();\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\n\n/** Could this be an anonymous function? */\nfunction isAnonymous(name) {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nfunction functionNamesMatch(a, b) {\n  return a === b || isAnonymous(a) && isAnonymous(b);\n}\nexports.LOCAL_VARIABLES_KEY = LOCAL_VARIABLES_KEY;\nexports.createRateLimiter = createRateLimiter;\nexports.functionNamesMatch = functionNamesMatch;\nexports.isAnonymous = isAnonymous;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsa0NBQWtDOztBQUU5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsaUJBQWlCQSxDQUN4QkMsWUFBWSxFQUNaQyxNQUFNLEVBQ05DLE9BQU8sRUFDUDtFQUNBLElBQUlDLEtBQUssR0FBRyxDQUFDO0VBQ2IsSUFBSUMsWUFBWSxHQUFHLENBQUM7RUFDcEIsSUFBSUMsZUFBZSxHQUFHLENBQUM7RUFFdkJDLFdBQVcsQ0FBQyxNQUFNO0lBQ2hCLElBQUlELGVBQWUsS0FBSyxDQUFDLEVBQUU7TUFDekIsSUFBSUYsS0FBSyxHQUFHSCxZQUFZLEVBQUU7UUFDeEJJLFlBQVksSUFBSSxDQUFDO1FBQ2pCRixPQUFPLENBQUNFLFlBQVksQ0FBQzs7UUFFckI7UUFDQSxJQUFJQSxZQUFZLEdBQUcsS0FBSyxFQUFFO1VBQ3hCQSxZQUFZLEdBQUcsS0FBSztRQUN0QjtRQUNBQyxlQUFlLEdBQUdELFlBQVk7TUFDaEM7SUFDRixDQUFDLE1BQU07TUFDTEMsZUFBZSxJQUFJLENBQUM7TUFFcEIsSUFBSUEsZUFBZSxLQUFLLENBQUMsRUFBRTtRQUN6QkosTUFBTSxDQUFDLENBQUM7TUFDVjtJQUNGO0lBRUFFLEtBQUssR0FBRyxDQUFDO0VBQ1gsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDSSxLQUFLLENBQUMsQ0FBQztFQUVoQixPQUFPLE1BQU07SUFDWEosS0FBSyxJQUFJLENBQUM7RUFDWixDQUFDO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQSxTQUFTSyxXQUFXQSxDQUFDQyxJQUFJLEVBQUU7RUFDekIsT0FBT0EsSUFBSSxLQUFLQyxTQUFTLEtBQUtELElBQUksQ0FBQ0UsTUFBTSxLQUFLLENBQUMsSUFBSUYsSUFBSSxLQUFLLEdBQUcsSUFBSUEsSUFBSSxLQUFLLGFBQWEsQ0FBQztBQUM1Rjs7QUFFQTtBQUNBLFNBQVNHLGtCQUFrQkEsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUU7RUFDaEMsT0FBT0QsQ0FBQyxLQUFLQyxDQUFDLElBQUtOLFdBQVcsQ0FBQ0ssQ0FBQyxDQUFDLElBQUlMLFdBQVcsQ0FBQ00sQ0FBQyxDQUFFO0FBQ3REO0FBRUFsQiwyQkFBMkIsR0FBR0UsbUJBQW1CO0FBQ2pERix5QkFBeUIsR0FBR0csaUJBQWlCO0FBQzdDSCwwQkFBMEIsR0FBR2dCLGtCQUFrQjtBQUMvQ2hCLG1CQUFtQixHQUFHWSxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9jb21tb24uanM/MDBiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFRoZSBrZXkgdXNlZCB0byBzdG9yZSB0aGUgbG9jYWwgdmFyaWFibGVzIG9uIHRoZSBlcnJvciBvYmplY3QuXG4gKi9cbmNvbnN0IExPQ0FMX1ZBUklBQkxFU19LRVkgPSAnX19TRU5UUllfRVJST1JfTE9DQUxfVkFSSUFCTEVTX18nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByYXRlIGxpbWl0ZXIgdGhhdCB3aWxsIGNhbGwgdGhlIGRpc2FibGUgY2FsbGJhY2sgd2hlbiB0aGUgcmF0ZSBsaW1pdCBpcyByZWFjaGVkIGFuZCB0aGUgZW5hYmxlIGNhbGxiYWNrXG4gKiB3aGVuIGEgdGltZW91dCBoYXMgb2NjdXJyZWQuXG4gKiBAcGFyYW0gbWF4UGVyU2Vjb25kIE1heGltdW0gbnVtYmVyIG9mIGNhbGxzIHBlciBzZWNvbmRcbiAqIEBwYXJhbSBlbmFibGUgQ2FsbGJhY2sgdG8gZW5hYmxlIGNhcHR1cmVcbiAqIEBwYXJhbSBkaXNhYmxlIENhbGxiYWNrIHRvIGRpc2FibGUgY2FwdHVyZVxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0byBjYWxsIHRvIGluY3JlbWVudCB0aGUgcmF0ZSBsaW1pdGVyIGNvdW50XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJhdGVMaW1pdGVyKFxuICBtYXhQZXJTZWNvbmQsXG4gIGVuYWJsZSxcbiAgZGlzYWJsZSxcbikge1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgcmV0cnlTZWNvbmRzID0gNTtcbiAgbGV0IGRpc2FibGVkVGltZW91dCA9IDA7XG5cbiAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgIGlmIChkaXNhYmxlZFRpbWVvdXQgPT09IDApIHtcbiAgICAgIGlmIChjb3VudCA+IG1heFBlclNlY29uZCkge1xuICAgICAgICByZXRyeVNlY29uZHMgKj0gMjtcbiAgICAgICAgZGlzYWJsZShyZXRyeVNlY29uZHMpO1xuXG4gICAgICAgIC8vIENhcCBhdCBvbmUgZGF5XG4gICAgICAgIGlmIChyZXRyeVNlY29uZHMgPiA4NjQwMCkge1xuICAgICAgICAgIHJldHJ5U2Vjb25kcyA9IDg2NDAwO1xuICAgICAgICB9XG4gICAgICAgIGRpc2FibGVkVGltZW91dCA9IHJldHJ5U2Vjb25kcztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGlzYWJsZWRUaW1lb3V0IC09IDE7XG5cbiAgICAgIGlmIChkaXNhYmxlZFRpbWVvdXQgPT09IDApIHtcbiAgICAgICAgZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY291bnQgPSAwO1xuICB9LCAxMDAwKS51bnJlZigpO1xuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgY291bnQgKz0gMTtcbiAgfTtcbn1cblxuLy8gQWRkIHR5cGVzIGZvciB0aGUgZXhjZXB0aW9uIGV2ZW50IGRhdGFcblxuLyoqIENvdWxkIHRoaXMgYmUgYW4gYW5vbnltb3VzIGZ1bmN0aW9uPyAqL1xuZnVuY3Rpb24gaXNBbm9ueW1vdXMobmFtZSkge1xuICByZXR1cm4gbmFtZSAhPT0gdW5kZWZpbmVkICYmIChuYW1lLmxlbmd0aCA9PT0gMCB8fCBuYW1lID09PSAnPycgfHwgbmFtZSA9PT0gJzxhbm9ueW1vdXM+Jyk7XG59XG5cbi8qKiBEbyB0aGUgZnVuY3Rpb24gbmFtZXMgYXBwZWFyIHRvIG1hdGNoPyAqL1xuZnVuY3Rpb24gZnVuY3Rpb25OYW1lc01hdGNoKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGIgfHwgKGlzQW5vbnltb3VzKGEpICYmIGlzQW5vbnltb3VzKGIpKTtcbn1cblxuZXhwb3J0cy5MT0NBTF9WQVJJQUJMRVNfS0VZID0gTE9DQUxfVkFSSUFCTEVTX0tFWTtcbmV4cG9ydHMuY3JlYXRlUmF0ZUxpbWl0ZXIgPSBjcmVhdGVSYXRlTGltaXRlcjtcbmV4cG9ydHMuZnVuY3Rpb25OYW1lc01hdGNoID0gZnVuY3Rpb25OYW1lc01hdGNoO1xuZXhwb3J0cy5pc0Fub255bW91cyA9IGlzQW5vbnltb3VzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTE9DQUxfVkFSSUFCTEVTX0tFWSIsImNyZWF0ZVJhdGVMaW1pdGVyIiwibWF4UGVyU2Vjb25kIiwiZW5hYmxlIiwiZGlzYWJsZSIsImNvdW50IiwicmV0cnlTZWNvbmRzIiwiZGlzYWJsZWRUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJ1bnJlZiIsImlzQW5vbnltb3VzIiwibmFtZSIsInVuZGVmaW5lZCIsImxlbmd0aCIsImZ1bmN0aW9uTmFtZXNNYXRjaCIsImEiLCJiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst localVariablesAsync = __webpack_require__(/*! ./local-variables-async.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\");\nconst localVariablesSync = __webpack_require__(/*! ./local-variables-sync.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\");\nconst localVariablesIntegration = (options = {}) => {\n  return nodeVersion.NODE_VERSION.major < 19 ? localVariablesSync.localVariablesSyncIntegration(options) : localVariablesAsync.localVariablesAsyncIntegration(options);\n};\nexports.localVariablesIntegration = localVariablesIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQywrRkFBc0IsQ0FBQztBQUNuRCxNQUFNQyxtQkFBbUIsR0FBR0QsbUJBQU8sQ0FBQyw0SUFBNEIsQ0FBQztBQUNqRSxNQUFNRSxrQkFBa0IsR0FBR0YsbUJBQU8sQ0FBQywwSUFBMkIsQ0FBQztBQUUvRCxNQUFNRyx5QkFBeUIsR0FBR0EsQ0FBQ0MsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLO0VBQ2xELE9BQU9MLFdBQVcsQ0FBQ00sWUFBWSxDQUFDQyxLQUFLLEdBQUcsRUFBRSxHQUFHSixrQkFBa0IsQ0FBQ0ssNkJBQTZCLENBQUNILE9BQU8sQ0FBQyxHQUFHSCxtQkFBbUIsQ0FBQ08sOEJBQThCLENBQUNKLE9BQU8sQ0FBQztBQUN0SyxDQUFDO0FBRURQLGlDQUFpQyxHQUFHTSx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2luZGV4LmpzP2EwMGUiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgbm9kZVZlcnNpb24gPSByZXF1aXJlKCcuLi8uLi9ub2RlVmVyc2lvbi5qcycpO1xuY29uc3QgbG9jYWxWYXJpYWJsZXNBc3luYyA9IHJlcXVpcmUoJy4vbG9jYWwtdmFyaWFibGVzLWFzeW5jLmpzJyk7XG5jb25zdCBsb2NhbFZhcmlhYmxlc1N5bmMgPSByZXF1aXJlKCcuL2xvY2FsLXZhcmlhYmxlcy1zeW5jLmpzJyk7XG5cbmNvbnN0IGxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb24gPSAob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiBub2RlVmVyc2lvbi5OT0RFX1ZFUlNJT04ubWFqb3IgPCAxOSA/IGxvY2FsVmFyaWFibGVzU3luYy5sb2NhbFZhcmlhYmxlc1N5bmNJbnRlZ3JhdGlvbihvcHRpb25zKSA6IGxvY2FsVmFyaWFibGVzQXN5bmMubG9jYWxWYXJpYWJsZXNBc3luY0ludGVncmF0aW9uKG9wdGlvbnMpO1xufTtcblxuZXhwb3J0cy5sb2NhbFZhcmlhYmxlc0ludGVncmF0aW9uID0gbG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibm9kZVZlcnNpb24iLCJyZXF1aXJlIiwibG9jYWxWYXJpYWJsZXNBc3luYyIsImxvY2FsVmFyaWFibGVzU3luYyIsImxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb24iLCJvcHRpb25zIiwiTk9ERV9WRVJTSU9OIiwibWFqb3IiLCJsb2NhbFZhcmlhYmxlc1N5bmNJbnRlZ3JhdGlvbiIsImxvY2FsVmFyaWFibGVzQXN5bmNJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/debug.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = 'LyohIEBzZW50cnkvbm9kZSA4LjUwLjAgKDcwZWZkZGUpIHwgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdCAqLwppbXBvcnR7U2Vzc2lvbiBhcyBlfWZyb20ibm9kZTppbnNwZWN0b3IvcHJvbWlzZXMiO2ltcG9ydHt3b3JrZXJEYXRhIGFzIHR9ZnJvbSJub2RlOndvcmtlcl90aHJlYWRzIjtjb25zdCBuPSI4LjUwLjAiLG89Z2xvYmFsVGhpcztjb25zdCBpPSJ1bmRlZmluZWQiPT10eXBlb2YgX19TRU5UUllfREVCVUdfX3x8X19TRU5UUllfREVCVUdfXyxhPVsiZGVidWciLCJpbmZvIiwid2FybiIsImVycm9yIiwibG9nIiwiYXNzZXJ0IiwidHJhY2UiXSxzPXt9O2Z1bmN0aW9uIGMoZSl7aWYoISgiY29uc29sZSJpbiBvKSlyZXR1cm4gZSgpO2NvbnN0IHQ9by5jb25zb2xlLG49e30saT1PYmplY3Qua2V5cyhzKTtpLmZvckVhY2goKGU9Pntjb25zdCBvPXNbZV07bltlXT10W2VdLHRbZV09b30pKTt0cnl7cmV0dXJuIGUoKX1maW5hbGx5e2kuZm9yRWFjaCgoZT0+e3RbZV09bltlXX0pKX19IWZ1bmN0aW9uKGUsdCxpKXtjb25zdCBhPW8scz1hLl9fU0VOVFJZX189YS5fX1NFTlRSWV9ffHx7fSxjPXNbbl09c1tuXXx8e307Y1tlXXx8KGNbZV09dCgpKX0oImxvZ2dlciIsKGZ1bmN0aW9uKCl7bGV0IGU9ITE7Y29uc3QgdD17ZW5hYmxlOigpPT57ZT0hMH0sZGlzYWJsZTooKT0+e2U9ITF9LGlzRW5hYmxlZDooKT0+ZX07cmV0dXJuIGk/YS5mb3JFYWNoKChuPT57dFtuXT0oLi4udCk9PntlJiZjKCgoKT0+e28uY29uc29sZVtuXShgU2VudHJ5IExvZ2dlciBbJHtufV06YCwuLi50KX0pKX19KSk6YS5mb3JFYWNoKChlPT57dFtlXT0oKT0+e319KSksdH0pKTtjb25zdCByPSJfX1NFTlRSWV9FUlJPUl9MT0NBTF9WQVJJQUJMRVNfXyI7Y29uc3QgdT10O2Z1bmN0aW9uIGwoLi4uZSl7dS5kZWJ1ZyYmYygoKCk9PmNvbnNvbGUubG9nKCJbTG9jYWxWYXJpYWJsZXMgV29ya2VyXSIsLi4uZSkpKX1hc3luYyBmdW5jdGlvbiBmKGUsdCxuLG8pe2NvbnN0IGk9YXdhaXQgZS5wb3N0KCJSdW50aW1lLmdldFByb3BlcnRpZXMiLHtvYmplY3RJZDp0LG93blByb3BlcnRpZXM6ITB9KTtvW25dPWkucmVzdWx0LmZpbHRlcigoZT0+Imxlbmd0aCIhPT1lLm5hbWUmJiFpc05hTihwYXJzZUludChlLm5hbWUsMTApKSkpLnNvcnQoKChlLHQpPT5wYXJzZUludChlLm5hbWUsMTApLXBhcnNlSW50KHQubmFtZSwxMCkpKS5tYXAoKGU9PmUudmFsdWU/LnZhbHVlKSl9YXN5bmMgZnVuY3Rpb24gZyhlLHQsbixvKXtjb25zdCBpPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSk7b1tuXT1pLnJlc3VsdC5tYXAoKGU9PltlLm5hbWUsZS52YWx1ZT8udmFsdWVdKSkucmVkdWNlKCgoZSxbdCxuXSk9PihlW3RdPW4sZSkpLHt9KX1mdW5jdGlvbiBkKGUsdCl7ZS52YWx1ZSYmKCJ2YWx1ZSJpbiBlLnZhbHVlP3ZvaWQgMD09PWUudmFsdWUudmFsdWV8fG51bGw9PT1lLnZhbHVlLnZhbHVlP3RbZS5uYW1lXT1gPCR7ZS52YWx1ZS52YWx1ZX0+YDp0W2UubmFtZV09ZS52YWx1ZS52YWx1ZToiZGVzY3JpcHRpb24iaW4gZS52YWx1ZSYmImZ1bmN0aW9uIiE9PWUudmFsdWUudHlwZT90W2UubmFtZV09YDwke2UudmFsdWUuZGVzY3JpcHRpb259PmA6InVuZGVmaW5lZCI9PT1lLnZhbHVlLnR5cGUmJih0W2UubmFtZV09Ijx1bmRlZmluZWQ+IikpfWFzeW5jIGZ1bmN0aW9uIGIoZSx0KXtjb25zdCBuPWF3YWl0IGUucG9zdCgiUnVudGltZS5nZXRQcm9wZXJ0aWVzIix7b2JqZWN0SWQ6dCxvd25Qcm9wZXJ0aWVzOiEwfSksbz17fTtmb3IoY29uc3QgdCBvZiBuLnJlc3VsdClpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJBcnJheSI9PT10Py52YWx1ZS5jbGFzc05hbWUpe2NvbnN0IG49dC52YWx1ZS5vYmplY3RJZDthd2FpdCBmKGUsbix0Lm5hbWUsbyl9ZWxzZSBpZih0Py52YWx1ZT8ub2JqZWN0SWQmJiJPYmplY3QiPT09dD8udmFsdWU/LmNsYXNzTmFtZSl7Y29uc3Qgbj10LnZhbHVlLm9iamVjdElkO2F3YWl0IGcoZSxuLHQubmFtZSxvKX1lbHNlIHQ/LnZhbHVlJiZkKHQsbyk7cmV0dXJuIG99bGV0IHA7KGFzeW5jIGZ1bmN0aW9uKCl7Y29uc3QgdD1uZXcgZTt0LmNvbm5lY3RUb01haW5UaHJlYWQoKSxsKCJDb25uZWN0ZWQgdG8gbWFpbiB0aHJlYWQiKTtsZXQgbj0hMTt0Lm9uKCJEZWJ1Z2dlci5yZXN1bWVkIiwoKCk9PntuPSExfSkpLHQub24oIkRlYnVnZ2VyLnBhdXNlZCIsKGU9PntuPSEwLGFzeW5jIGZ1bmN0aW9uKGUse3JlYXNvbjp0LGRhdGE6e29iamVjdElkOm59LGNhbGxGcmFtZXM6b30pe2lmKCJleGNlcHRpb24iIT09dCYmInByb21pc2VSZWplY3Rpb24iIT09dClyZXR1cm47aWYocD8uKCksbnVsbD09bilyZXR1cm47Y29uc3QgaT1bXTtmb3IobGV0IHQ9MDt0PG8ubGVuZ3RoO3QrKyl7Y29uc3R7c2NvcGVDaGFpbjpuLGZ1bmN0aW9uTmFtZTphLHRoaXM6c309b1t0XSxjPW4uZmluZCgoZT0+ImxvY2FsIj09PWUudHlwZSkpLHI9Imdsb2JhbCIhPT1zLmNsYXNzTmFtZSYmcy5jbGFzc05hbWU/YCR7cy5jbGFzc05hbWV9LiR7YX1gOmE7aWYodm9pZCAwPT09Yz8ub2JqZWN0Lm9iamVjdElkKWlbdF09e2Z1bmN0aW9uOnJ9O2Vsc2V7Y29uc3Qgbj1hd2FpdCBiKGUsYy5vYmplY3Qub2JqZWN0SWQpO2lbdF09e2Z1bmN0aW9uOnIsdmFyczpufX19YXdhaXQgZS5wb3N0KCJSdW50aW1lLmNhbGxGdW5jdGlvbk9uIix7ZnVuY3Rpb25EZWNsYXJhdGlvbjpgZnVuY3Rpb24oKSB7IHRoaXMuJHtyfSA9IHRoaXMuJHtyfSB8fCAke0pTT04uc3RyaW5naWZ5KGkpfTsgfWAsc2lsZW50OiEwLG9iamVjdElkOm59KSxhd2FpdCBlLnBvc3QoIlJ1bnRpbWUucmVsZWFzZU9iamVjdCIse29iamVjdElkOm59KX0odCxlLnBhcmFtcykudGhlbigoYXN5bmMoKT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSwoYXN5bmMgZT0+e24mJmF3YWl0IHQucG9zdCgiRGVidWdnZXIucmVzdW1lIil9KSl9KSksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5lbmFibGUiKTtjb25zdCBvPSExIT09dS5jYXB0dXJlQWxsRXhjZXB0aW9ucztpZihhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6bz8iYWxsIjoidW5jYXVnaHQifSksbyl7Y29uc3QgZT11Lm1heEV4Y2VwdGlvbnNQZXJTZWNvbmR8fDUwO3A9ZnVuY3Rpb24oZSx0LG4pe2xldCBvPTAsaT01LGE9MDtyZXR1cm4gc2V0SW50ZXJ2YWwoKCgpPT57MD09PWE/bz5lJiYoaSo9MixuKGkpLGk+ODY0MDAmJihpPTg2NDAwKSxhPWkpOihhLT0xLDA9PT1hJiZ0KCkpLG89MH0pLDFlMykudW5yZWYoKSwoKT0+e28rPTF9fShlLChhc3luYygpPT57bCgiUmF0ZS1saW1pdCBsaWZ0ZWQuIiksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJhbGwifSl9KSwoYXN5bmMgZT0+e2woYFJhdGUtbGltaXQgZXhjZWVkZWQuIERpc2FibGluZyBjYXB0dXJpbmcgb2YgY2F1Z2h0IGV4Y2VwdGlvbnMgZm9yICR7ZX0gc2Vjb25kcy5gKSxhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6InVuY2F1Z2h0In0pfSkpfX0pKCkuY2F0Y2goKGU9PntsKCJGYWlsZWQgdG8gc3RhcnQgZGVidWdnZXIiLGUpfSkpLHNldEludGVydmFsKCgoKT0+e30pLDFlNCk7';\nfunction log(...args) {\n  core.logger.log('[LocalVariables]', ...args);\n}\n\n/**\n * Adds local variables to exception frames\n */\nconst localVariablesAsyncIntegration = core.defineIntegration((integrationOptions = {}) => {\n  function addLocalVariablesToException(exception, localVariables) {\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _ => _.stacktrace, 'optionalAccess', _2 => _2.frames]) || []).filter(frame => frame.function !== 'new Promise');\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n      const frameLocalVariables = localVariables[i];\n      const frame = frames[frameIndex];\n      if (!frame || !frameLocalVariables) {\n        // Drop out if we run out of frames to match up\n        break;\n      }\n      if (\n      // We need to have vars to add\n      frameLocalVariables.vars === undefined ||\n      // We're not interested in frames that are not in_app because the vars are not relevant\n      frame.in_app === false ||\n      // The function names need to match\n      !common.functionNamesMatch(frame.function, frameLocalVariables.function)) {\n        continue;\n      }\n      frame.vars = frameLocalVariables.vars;\n    }\n  }\n  function addLocalVariablesToEvent(event, hint) {\n    if (hint.originalException && typeof hint.originalException === 'object' && common.LOCAL_VARIABLES_KEY in hint.originalException && Array.isArray(hint.originalException[common.LOCAL_VARIABLES_KEY])) {\n      for (const exception of _optionalChain([event, 'access', _3 => _3.exception, 'optionalAccess', _4 => _4.values]) || []) {\n        addLocalVariablesToException(exception, hint.originalException[common.LOCAL_VARIABLES_KEY]);\n      }\n      hint.originalException[common.LOCAL_VARIABLES_KEY] = undefined;\n    }\n    return event;\n  }\n  async function startInspector() {\n    // We load inspector dynamically because on some platforms Node is built without inspector support\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n  function startWorker(options) {\n    const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n      workerData: options,\n      // We don't want any Node args to be passed to the worker\n      execArgv: [],\n      env: {\n        ...process.env,\n        NODE_OPTIONS: undefined\n      }\n    });\n    process.on('exit', () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      worker.terminate();\n    });\n    worker.once('error', err => {\n      log('Worker error', err);\n    });\n    worker.once('exit', code => {\n      log('Worker exit', code);\n    });\n\n    // Ensure this thread can't block app exit\n    worker.unref();\n  }\n  return {\n    name: 'LocalVariablesAsync',\n    async setup(client) {\n      const clientOptions = client.getOptions();\n      if (!clientOptions.includeLocalVariables) {\n        return;\n      }\n      if (await debug.isDebuggerEnabled()) {\n        core.logger.warn('Local variables capture has been disabled because the debugger was already enabled');\n        return;\n      }\n      const options = {\n        ...integrationOptions,\n        debug: core.logger.isEnabled()\n      };\n      startInspector().then(() => {\n        try {\n          startWorker(options);\n        } catch (e) {\n          core.logger.error('Failed to start worker', e);\n        }\n      }, e => {\n        core.logger.error('Failed to start inspector', e);\n      });\n    },\n    processEvent(event, hint) {\n      return addLocalVariablesToEvent(event, hint);\n    }\n  };\n});\nexports.base64WorkerScript = base64WorkerScript;\nexports.localVariablesAsyncIntegration = localVariablesAsyncIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-async.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/nodeVersion.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/debug.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/common.js\");\n\n/** Creates a unique hash from stack frames */\nfunction hashFrames(frames) {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nfunction hashFromStack(stackParser, stack) {\n  if (stack === undefined) {\n    return undefined;\n  }\n  return hashFrames(stackParser(stack, 1));\n}\n\n/** Creates a container for callbacks to be called sequentially */\nfunction createCallbackList(complete) {\n  // A collection of callbacks to be executed last to first\n  let callbacks = [];\n  let completedCalled = false;\n  function checkedComplete(result) {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n  function add(fn) {\n    callbacks.push(fn);\n  }\n  function next(result) {\n    const popped = callbacks.pop() || checkedComplete;\n    try {\n      popped(result);\n    } catch (_) {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n  return {\n    add,\n    next\n  };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession {\n  /** Throws if inspector API is not available */\n  constructor(_session) {\n    this._session = _session;\n    //\n  }\n\n  static async create(orDefault) {\n    if (orDefault) {\n      return orDefault;\n    }\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    return new AsyncSession(new inspector.Session());\n  }\n\n  /** @inheritdoc */\n  configureAndConnect(onPause, captureAll) {\n    this._session.connect();\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', {\n      state: captureAll ? 'all' : 'uncaught'\n    });\n  }\n  setPauseOnExceptions(captureAll) {\n    this._session.post('Debugger.setPauseOnExceptions', {\n      state: captureAll ? 'all' : 'uncaught'\n    });\n  }\n\n  /** @inheritdoc */\n  getLocalVariables(objectId, complete) {\n    this._getProperties(objectId, props => {\n      const {\n        add,\n        next\n      } = createCallbackList(complete);\n      for (const prop of props) {\n        if (_optionalChain([prop, 'optionalAccess', _2 => _2.value, 'optionalAccess', _3 => _3.objectId]) && _optionalChain([prop, 'optionalAccess', _4 => _4.value, 'access', _5 => _5.className]) === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _6 => _6.value, 'optionalAccess', _7 => _7.objectId]) && _optionalChain([prop, 'optionalAccess', _8 => _8.value, 'optionalAccess', _9 => _9.className]) === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (_optionalChain([prop, 'optionalAccess', _10 => _10.value])) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n  _getProperties(objectId, next) {\n    this._session.post('Runtime.getProperties', {\n      objectId,\n      ownProperties: true\n    }, (err, params) => {\n      if (err) {\n        next([]);\n      } else {\n        next(params.result);\n      }\n    });\n  }\n\n  /**\n   * Unrolls an array property\n   */\n  _unrollArray(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props.filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10))).sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10)).map(v => _optionalChain([v, 'optionalAccess', _11 => _11.value, 'optionalAccess', _12 => _12.value]));\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n  _unrollObject(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props.map(v => [v.name, _optionalChain([v, 'optionalAccess', _13 => _13.value, 'optionalAccess', _14 => _14.value])]).reduce((obj, [key, val]) => {\n        obj[key] = val;\n        return obj;\n      }, {});\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n  _unrollOther(prop, vars, next) {\n    if (prop.value) {\n      if ('value' in prop.value) {\n        if (prop.value.value === undefined || prop.value.value === null) {\n          vars[prop.name] = `<${prop.value.value}>`;\n        } else {\n          vars[prop.name] = prop.value.value;\n        }\n      } else if ('description' in prop.value && prop.value.type !== 'function') {\n        vars[prop.name] = `<${prop.value.description}>`;\n      } else if (prop.value.type === 'undefined') {\n        vars[prop.name] = '<undefined>';\n      }\n    }\n    next(vars);\n  }\n}\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst _localVariablesSyncIntegration = (options = {}, sessionOverride) => {\n  const cachedFrames = new core.LRUMap(20);\n  let rateLimiter;\n  let shouldProcessEvent = false;\n  function addLocalVariablesToException(exception) {\n    const hash = hashFrames(_optionalChain([exception, 'optionalAccess', _15 => _15.stacktrace, 'optionalAccess', _16 => _16.frames]));\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (_optionalChain([exception, 'access', _17 => _17.stacktrace, 'optionalAccess', _18 => _18.frames]) || []).filter(frame => frame.function !== 'new Promise');\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n      const cachedFrameVariable = cachedFrame[i];\n      const frameVariable = frames[frameIndex];\n\n      // Drop out if we run out of frames to match up\n      if (!frameVariable || !cachedFrameVariable) {\n        break;\n      }\n      if (\n      // We need to have vars to add\n      cachedFrameVariable.vars === undefined ||\n      // We're not interested in frames that are not in_app because the vars are not relevant\n      frameVariable.in_app === false ||\n      // The function names need to match\n      !common.functionNamesMatch(frameVariable.function, cachedFrameVariable.function)) {\n        continue;\n      }\n      frameVariable.vars = cachedFrameVariable.vars;\n    }\n  }\n  function addLocalVariablesToEvent(event) {\n    for (const exception of _optionalChain([event, 'optionalAccess', _19 => _19.exception, 'optionalAccess', _20 => _20.values]) || []) {\n      addLocalVariablesToException(exception);\n    }\n    return event;\n  }\n  return {\n    name: INTEGRATION_NAME,\n    async setupOnce() {\n      const client = core.getClient();\n      const clientOptions = _optionalChain([client, 'optionalAccess', _21 => _21.getOptions, 'call', _22 => _22()]);\n      if (!_optionalChain([clientOptions, 'optionalAccess', _23 => _23.includeLocalVariables])) {\n        return;\n      }\n\n      // Only setup this integration if the Node version is >= v18\n      // https://github.com/getsentry/sentry-javascript/issues/7697\n      const unsupportedNodeVersion = nodeVersion.NODE_MAJOR < 18;\n      if (unsupportedNodeVersion) {\n        core.logger.log('The `LocalVariables` integration is only supported on Node >= v18.');\n        return;\n      }\n      if (await debug.isDebuggerEnabled()) {\n        core.logger.warn('Local variables capture has been disabled because the debugger was already enabled');\n        return;\n      }\n      AsyncSession.create(sessionOverride).then(session => {\n        function handlePaused(stackParser, {\n          params: {\n            reason,\n            data,\n            callFrames\n          }\n        }, complete) {\n          if (reason !== 'exception' && reason !== 'promiseRejection') {\n            complete();\n            return;\n          }\n          _optionalChain([rateLimiter, 'optionalCall', _24 => _24()]);\n\n          // data.description contains the original error.stack\n          const exceptionHash = hashFromStack(stackParser, _optionalChain([data, 'optionalAccess', _25 => _25.description]));\n          if (exceptionHash == undefined) {\n            complete();\n            return;\n          }\n          const {\n            add,\n            next\n          } = createCallbackList(frames => {\n            cachedFrames.set(exceptionHash, frames);\n            complete();\n          });\n\n          // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n          // For this reason we only attempt to get local variables for the first 5 frames\n          for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const {\n              scopeChain,\n              functionName,\n              this: obj\n            } = callFrames[i];\n            const localScope = scopeChain.find(scope => scope.type === 'local');\n\n            // obj.className is undefined in ESM modules\n            const fn = obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n            if (_optionalChain([localScope, 'optionalAccess', _26 => _26.object, 'access', _27 => _27.objectId]) === undefined) {\n              add(frames => {\n                frames[i] = {\n                  function: fn\n                };\n                next(frames);\n              });\n            } else {\n              const id = localScope.object.objectId;\n              add(frames => _optionalChain([session, 'optionalAccess', _28 => _28.getLocalVariables, 'call', _29 => _29(id, vars => {\n                frames[i] = {\n                  function: fn,\n                  vars\n                };\n                next(frames);\n              })]));\n            }\n          }\n          next([]);\n        }\n        const captureAll = options.captureAllExceptions !== false;\n        session.configureAndConnect((ev, complete) => handlePaused(clientOptions.stackParser, ev, complete), captureAll);\n        if (captureAll) {\n          const max = options.maxExceptionsPerSecond || 50;\n          rateLimiter = common.createRateLimiter(max, () => {\n            core.logger.log('Local variables rate-limit lifted.');\n            _optionalChain([session, 'optionalAccess', _30 => _30.setPauseOnExceptions, 'call', _31 => _31(true)]);\n          }, seconds => {\n            core.logger.log(`Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`);\n            _optionalChain([session, 'optionalAccess', _32 => _32.setPauseOnExceptions, 'call', _33 => _33(false)]);\n          });\n        }\n        shouldProcessEvent = true;\n      }, error => {\n        core.logger.log('The `LocalVariables` integration failed to start.', error);\n      });\n    },\n    processEvent(event) {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount() {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame() {\n      return cachedFrames.values()[0];\n    }\n  };\n};\n\n/**\n * Adds local variables to exception frames.\n */\nconst localVariablesSyncIntegration = core.defineIntegration(_localVariablesSyncIntegration);\nexports.createCallbackList = createCallbackList;\nexports.hashFrames = hashFrames;\nexports.hashFromStack = hashFromStack;\nexports.localVariablesSyncIntegration = localVariablesSyncIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/local-variables-sync.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/modules.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/modules.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nlet moduleCache;\nconst INTEGRATION_NAME = 'Modules';\nconst _modulesIntegration = () => {\n  // This integration only works in CJS contexts\n  if (!commonjs.isCjs()) {\n    debugBuild.DEBUG_BUILD && core.logger.warn('modulesIntegration only works in CommonJS (CJS) environments. Remove this integration if you are using ESM.');\n    return {\n      name: INTEGRATION_NAME\n    };\n  }\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules()\n      };\n      return event;\n    }\n  };\n};\n\n/**\n * Add node modules / packages to the event.\n *\n * Only works in CommonJS (CJS) environments.\n */\nconst modulesIntegration = core.defineIntegration(_modulesIntegration);\n\n/** Extract information about paths */\nfunction getPaths() {\n  try {\n    return __webpack_require__.c ? Object.keys(__webpack_require__.c) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules() {\n  const mainPaths = __webpack_require__.c[__webpack_require__.s] && __webpack_require__.c[__webpack_require__.s].paths || [];\n  const paths = getPaths();\n  const infos = {};\n  const seen = {};\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = node_path.dirname(orig);\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n      const pkgfile = node_path.join(orig, 'package.json');\n      seen[orig] = true;\n      if (!node_fs.existsSync(pkgfile)) {\n        return updir();\n      }\n      try {\n        const info = JSON.parse(node_fs.readFileSync(pkgfile, 'utf8'));\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n    updir();\n  });\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\nexports.modulesIntegration = modulesIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21vZHVsZXMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxPQUFPLEdBQUdDLG1CQUFPLENBQUMsd0JBQVMsQ0FBQztBQUNsQyxNQUFNQyxTQUFTLEdBQUdELG1CQUFPLENBQUMsNEJBQVcsQ0FBQztBQUN0QyxNQUFNRSxJQUFJLEdBQUdGLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNRyxVQUFVLEdBQUdILG1CQUFPLENBQUMsNEZBQW1CLENBQUM7QUFDL0MsTUFBTUksUUFBUSxHQUFHSixtQkFBTyxDQUFDLGtHQUFzQixDQUFDO0FBRWhELElBQUlLLFdBQVc7QUFFZixNQUFNQyxnQkFBZ0IsR0FBRyxTQUFTO0FBRWxDLE1BQU1DLG1CQUFtQixHQUFJQSxDQUFBLEtBQU07RUFDakM7RUFDQSxJQUFJLENBQUNILFFBQVEsQ0FBQ0ksS0FBSyxDQUFDLENBQUMsRUFBRTtJQUNyQkwsVUFBVSxDQUFDTSxXQUFXLElBQ3BCUCxJQUFJLENBQUNRLE1BQU0sQ0FBQ0MsSUFBSSxDQUNkLDZHQUNGLENBQUM7SUFDSCxPQUFPO01BQ0xDLElBQUksRUFBRU47SUFDUixDQUFDO0VBQ0g7RUFFQSxPQUFPO0lBQ0xNLElBQUksRUFBRU4sZ0JBQWdCO0lBQ3RCTyxZQUFZQSxDQUFDQyxLQUFLLEVBQUU7TUFDbEJBLEtBQUssQ0FBQ0MsT0FBTyxHQUFHO1FBQ2QsR0FBR0QsS0FBSyxDQUFDQyxPQUFPO1FBQ2hCLEdBQUdDLFdBQVcsQ0FBQztNQUNqQixDQUFDO01BRUQsT0FBT0YsS0FBSztJQUNkO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1HLGtCQUFrQixHQUFHZixJQUFJLENBQUNnQixpQkFBaUIsQ0FBQ1gsbUJBQW1CLENBQUM7O0FBRXRFO0FBQ0EsU0FBU1ksUUFBUUEsQ0FBQSxFQUFHO0VBQ2xCLElBQUk7SUFDRixPQUFPbkIscUJBQWEsR0FBR0wsTUFBTSxDQUFDMEIsSUFBSSxDQUFDckIscUJBQWMsQ0FBQyxHQUFHLEVBQUU7RUFDekQsQ0FBQyxDQUFDLE9BQU9zQixDQUFDLEVBQUU7SUFDVixPQUFPLEVBQUU7RUFDWDtBQUNGOztBQUVBO0FBQ0EsU0FBU0MsY0FBY0EsQ0FBQSxFQUV0QjtFQUNDLE1BQU1DLFNBQVMsR0FBSXhCLDRDQUFZLElBQUlBLDRDQUFZLENBQUMwQixLQUFLLElBQUssRUFBRTtFQUM1RCxNQUFNQSxLQUFLLEdBQUdQLFFBQVEsQ0FBQyxDQUFDO0VBQ3hCLE1BQU1RLEtBQUssR0FFVixDQUFDLENBQUM7RUFDSCxNQUFNQyxJQUFJLEdBRVQsQ0FBQyxDQUFDO0VBRUhGLEtBQUssQ0FBQ0csT0FBTyxDQUFDQyxJQUFJLElBQUk7SUFDcEIsSUFBSUMsR0FBRyxHQUFHRCxJQUFJOztJQUVkO0lBQ0EsTUFBTUUsS0FBSyxHQUFHQSxDQUFBLEtBQU07TUFDbEIsTUFBTUMsSUFBSSxHQUFHRixHQUFHO01BQ2hCQSxHQUFHLEdBQUc5QixTQUFTLENBQUNpQyxPQUFPLENBQUNELElBQUksQ0FBQztNQUU3QixJQUFJLENBQUNGLEdBQUcsSUFBSUUsSUFBSSxLQUFLRixHQUFHLElBQUlILElBQUksQ0FBQ0ssSUFBSSxDQUFDLEVBQUU7UUFDdEMsT0FBT0UsU0FBUztNQUNsQjtNQUNBLElBQUlYLFNBQVMsQ0FBQ1ksT0FBTyxDQUFDTCxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDOUIsT0FBT0MsS0FBSyxDQUFDLENBQUM7TUFDaEI7TUFFQSxNQUFNSyxPQUFPLEdBQUdwQyxTQUFTLENBQUNxQyxJQUFJLENBQUNMLElBQUksRUFBRSxjQUFjLENBQUM7TUFDcERMLElBQUksQ0FBQ0ssSUFBSSxDQUFDLEdBQUcsSUFBSTtNQUVqQixJQUFJLENBQUNsQyxPQUFPLENBQUN3QyxVQUFVLENBQUNGLE9BQU8sQ0FBQyxFQUFFO1FBQ2hDLE9BQU9MLEtBQUssQ0FBQyxDQUFDO01BQ2hCO01BRUEsSUFBSTtRQUNGLE1BQU1RLElBQUksR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUMzQyxPQUFPLENBQUM0QyxZQUFZLENBQUNOLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUc5RFYsS0FBSyxDQUFDYSxJQUFJLENBQUM1QixJQUFJLENBQUMsR0FBRzRCLElBQUksQ0FBQ0ksT0FBTztNQUNqQyxDQUFDLENBQUMsT0FBT0MsR0FBRyxFQUFFO1FBQ1o7TUFBQTtJQUVKLENBQUM7SUFFRGIsS0FBSyxDQUFDLENBQUM7RUFDVCxDQUFDLENBQUM7RUFFRixPQUFPTCxLQUFLO0FBQ2Q7O0FBRUE7QUFDQSxTQUFTWCxXQUFXQSxDQUFBLEVBQUc7RUFDckIsSUFBSSxDQUFDWCxXQUFXLEVBQUU7SUFDaEJBLFdBQVcsR0FBR2tCLGNBQWMsQ0FBQyxDQUFDO0VBQ2hDO0VBQ0EsT0FBT2xCLFdBQVc7QUFDcEI7QUFFQVIsMEJBQTBCLEdBQUdvQixrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbW9kdWxlcy5qcz9iNjZlIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG5vZGVfZnMgPSByZXF1aXJlKCdub2RlOmZzJyk7XG5jb25zdCBub2RlX3BhdGggPSByZXF1aXJlKCdub2RlOnBhdGgnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgY29tbW9uanMgPSByZXF1aXJlKCcuLi91dGlscy9jb21tb25qcy5qcycpO1xuXG5sZXQgbW9kdWxlQ2FjaGU7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTW9kdWxlcyc7XG5cbmNvbnN0IF9tb2R1bGVzSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICAvLyBUaGlzIGludGVncmF0aW9uIG9ubHkgd29ya3MgaW4gQ0pTIGNvbnRleHRzXG4gIGlmICghY29tbW9uanMuaXNDanMoKSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgIGNvcmUubG9nZ2VyLndhcm4oXG4gICAgICAgICdtb2R1bGVzSW50ZWdyYXRpb24gb25seSB3b3JrcyBpbiBDb21tb25KUyAoQ0pTKSBlbnZpcm9ubWVudHMuIFJlbW92ZSB0aGlzIGludGVncmF0aW9uIGlmIHlvdSBhcmUgdXNpbmcgRVNNLicsXG4gICAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgcHJvY2Vzc0V2ZW50KGV2ZW50KSB7XG4gICAgICBldmVudC5tb2R1bGVzID0ge1xuICAgICAgICAuLi5ldmVudC5tb2R1bGVzLFxuICAgICAgICAuLi5fZ2V0TW9kdWxlcygpLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkIG5vZGUgbW9kdWxlcyAvIHBhY2thZ2VzIHRvIHRoZSBldmVudC5cbiAqXG4gKiBPbmx5IHdvcmtzIGluIENvbW1vbkpTIChDSlMpIGVudmlyb25tZW50cy5cbiAqL1xuY29uc3QgbW9kdWxlc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbW9kdWxlc0ludGVncmF0aW9uKTtcblxuLyoqIEV4dHJhY3QgaW5mb3JtYXRpb24gYWJvdXQgcGF0aHMgKi9cbmZ1bmN0aW9uIGdldFBhdGhzKCkge1xuICB0cnkge1xuICAgIHJldHVybiByZXF1aXJlLmNhY2hlID8gT2JqZWN0LmtleXMocmVxdWlyZS5jYWNoZSApIDogW107XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuLyoqIEV4dHJhY3QgaW5mb3JtYXRpb24gYWJvdXQgcGFja2FnZS5qc29uIG1vZHVsZXMgKi9cbmZ1bmN0aW9uIGNvbGxlY3RNb2R1bGVzKClcblxuIHtcbiAgY29uc3QgbWFpblBhdGhzID0gKHJlcXVpcmUubWFpbiAmJiByZXF1aXJlLm1haW4ucGF0aHMpIHx8IFtdO1xuICBjb25zdCBwYXRocyA9IGdldFBhdGhzKCk7XG4gIGNvbnN0IGluZm9zXG5cbiA9IHt9O1xuICBjb25zdCBzZWVuXG5cbiA9IHt9O1xuXG4gIHBhdGhzLmZvckVhY2gocGF0aCA9PiB7XG4gICAgbGV0IGRpciA9IHBhdGg7XG5cbiAgICAvKiogVHJhdmVyc2UgZGlyZWN0b3JpZXMgdXB3YXJkIGluIHRoZSBzZWFyY2ggb2YgcGFja2FnZS5qc29uIGZpbGUgKi9cbiAgICBjb25zdCB1cGRpciA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG9yaWcgPSBkaXI7XG4gICAgICBkaXIgPSBub2RlX3BhdGguZGlybmFtZShvcmlnKTtcblxuICAgICAgaWYgKCFkaXIgfHwgb3JpZyA9PT0gZGlyIHx8IHNlZW5bb3JpZ10pIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChtYWluUGF0aHMuaW5kZXhPZihkaXIpIDwgMCkge1xuICAgICAgICByZXR1cm4gdXBkaXIoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGtnZmlsZSA9IG5vZGVfcGF0aC5qb2luKG9yaWcsICdwYWNrYWdlLmpzb24nKTtcbiAgICAgIHNlZW5bb3JpZ10gPSB0cnVlO1xuXG4gICAgICBpZiAoIW5vZGVfZnMuZXhpc3RzU3luYyhwa2dmaWxlKSkge1xuICAgICAgICByZXR1cm4gdXBkaXIoKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5mbyA9IEpTT04ucGFyc2Uobm9kZV9mcy5yZWFkRmlsZVN5bmMocGtnZmlsZSwgJ3V0ZjgnKSlcblxuO1xuICAgICAgICBpbmZvc1tpbmZvLm5hbWVdID0gaW5mby52ZXJzaW9uO1xuICAgICAgfSBjYXRjaCAoX29PKSB7XG4gICAgICAgIC8vIG5vLWVtcHR5XG4gICAgICB9XG4gICAgfTtcblxuICAgIHVwZGlyKCk7XG4gIH0pO1xuXG4gIHJldHVybiBpbmZvcztcbn1cblxuLyoqIEZldGNoZXMgdGhlIGxpc3Qgb2YgbW9kdWxlcyBhbmQgdGhlIHZlcnNpb25zIGxvYWRlZCBieSB0aGUgZW50cnkgZmlsZSBmb3IgeW91ciBub2RlLmpzIGFwcC4gKi9cbmZ1bmN0aW9uIF9nZXRNb2R1bGVzKCkge1xuICBpZiAoIW1vZHVsZUNhY2hlKSB7XG4gICAgbW9kdWxlQ2FjaGUgPSBjb2xsZWN0TW9kdWxlcygpO1xuICB9XG4gIHJldHVybiBtb2R1bGVDYWNoZTtcbn1cblxuZXhwb3J0cy5tb2R1bGVzSW50ZWdyYXRpb24gPSBtb2R1bGVzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2R1bGVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibm9kZV9mcyIsInJlcXVpcmUiLCJub2RlX3BhdGgiLCJjb3JlIiwiZGVidWdCdWlsZCIsImNvbW1vbmpzIiwibW9kdWxlQ2FjaGUiLCJJTlRFR1JBVElPTl9OQU1FIiwiX21vZHVsZXNJbnRlZ3JhdGlvbiIsImlzQ2pzIiwiREVCVUdfQlVJTEQiLCJsb2dnZXIiLCJ3YXJuIiwibmFtZSIsInByb2Nlc3NFdmVudCIsImV2ZW50IiwibW9kdWxlcyIsIl9nZXRNb2R1bGVzIiwibW9kdWxlc0ludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iLCJnZXRQYXRocyIsImNhY2hlIiwia2V5cyIsImUiLCJjb2xsZWN0TW9kdWxlcyIsIm1haW5QYXRocyIsIm1haW4iLCJwYXRocyIsImluZm9zIiwic2VlbiIsImZvckVhY2giLCJwYXRoIiwiZGlyIiwidXBkaXIiLCJvcmlnIiwiZGlybmFtZSIsInVuZGVmaW5lZCIsImluZGV4T2YiLCJwa2dmaWxlIiwiam9pbiIsImV4aXN0c1N5bmMiLCJpbmZvIiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwidmVyc2lvbiIsIl9vTyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/modules.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/node-fetch.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/src/index.js\");\nconst instrumentationUndici = __webpack_require__(/*! @opentelemetry/instrumentation-undici */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-undici/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst _nativeNodeFetchIntegration = (options = {}) => {\n  const _breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n  const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      const propagationDecisionMap = new core.LRUMap(100);\n      const instrumentation$1 = new instrumentationUndici.UndiciInstrumentation({\n        requireParentforSpans: false,\n        ignoreRequestHook: request => {\n          const url = getAbsoluteUrl(request.origin, request.path);\n          const shouldIgnore = _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n          if (shouldIgnore) {\n            return true;\n          }\n\n          // If tracing is disabled, we still want to propagate traces\n          // So we do that manually here, matching what the instrumentation does otherwise\n          if (!core.hasTracingEnabled()) {\n            const tracePropagationTargets = _optionalChain([core.getClient, 'call', _2 => _2(), 'optionalAccess', _3 => _3.getOptions, 'call', _4 => _4(), 'access', _5 => _5.tracePropagationTargets]);\n            const addedHeaders = opentelemetry.shouldPropagateTraceForUrl(url, tracePropagationTargets, propagationDecisionMap) ? core.getTraceData() : {};\n            const requestHeaders = request.headers;\n            if (Array.isArray(requestHeaders)) {\n              Object.entries(addedHeaders).forEach(headers => requestHeaders.push(...headers));\n            } else {\n              request.headers += Object.entries(addedHeaders).map(([k, v]) => `${k}: ${v}\\r\\n`).join('');\n            }\n\n            // Prevent starting a span for this request\n            return true;\n          }\n          return false;\n        },\n        startSpanHook: () => {\n          return {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.node_fetch'\n          };\n        },\n        responseHook: (_, {\n          request,\n          response\n        }) => {\n          if (_breadcrumbs) {\n            addRequestBreadcrumb(request, response);\n          }\n        }\n      });\n      instrumentation.registerInstrumentations({\n        instrumentations: [instrumentation$1]\n      });\n    }\n  };\n};\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n  const statusCode = response.statusCode;\n  const level = core.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n  core.addBreadcrumb({\n    category: 'http',\n    data: {\n      status_code: statusCode,\n      ...data\n    },\n    type: 'http',\n    level\n  }, {\n    event: 'response',\n    request,\n    response\n  });\n}\nfunction getBreadcrumbData(request) {\n  try {\n    const url = new URL(request.path, request.origin);\n    const parsedUrl = core.parseUrl(url.toString());\n    const data = {\n      url: core.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET'\n    };\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\n// Matching the behavior of the base instrumentation\nfunction getAbsoluteUrl(origin, path = '/') {\n  const url = `${origin}`;\n  if (url.endsWith('/') && path.startsWith('/')) {\n    return `${url}${path.slice(1)}`;\n  }\n  if (!url.endsWith('/') && !path.startsWith('/')) {\n    return `${url}/${path.slice(1)}`;\n  }\n  return `${url}${path}`;\n}\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\n/**\n * Add a global exception handler.\n */\nconst onUncaughtExceptionIntegration = core.defineIntegration((options = {}) => {\n  const optionsWithDefaults = {\n    exitEvenIfOtherHandlersAreRegistered: false,\n    ...options\n  };\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('uncaughtException', makeErrorHandler(client, optionsWithDefaults));\n    }\n  };\n});\n\n/** Exported only for tests */\nfunction makeErrorHandler(client, options) {\n  const timeout = 2000;\n  let caughtFirstError = false;\n  let caughtSecondError = false;\n  let calledFatalError = false;\n  let firstError;\n  const clientOptions = client.getOptions();\n  return Object.assign(error => {\n    let onFatalError = errorhandling.logAndExitProcess;\n    if (options.onFatalError) {\n      onFatalError = options.onFatalError;\n    } else if (clientOptions.onFatalError) {\n      onFatalError = clientOptions.onFatalError;\n    }\n\n    // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n    // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n    // exit behaviour of the SDK accordingly:\n    // - If other listeners are attached, do not exit.\n    // - If the only listener attached is ours, exit.\n    const userProvidedListenersCount = global.process.listeners('uncaughtException').filter(listener => {\n      // There are 3 listeners we ignore:\n      return (\n        // as soon as we're using domains this listener is attached by node itself\n        listener.name !== 'domainUncaughtExceptionClear' &&\n        // the handler we register for tracing\n        listener.tag !== 'sentry_tracingErrorCallback' &&\n        // the handler we register in this integration\n        listener._errorHandler !== true\n      );\n    }).length;\n    const processWouldExit = userProvidedListenersCount === 0;\n    const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n    if (!caughtFirstError) {\n      // this is the first uncaught error and the ultimate reason for shutting down\n      // we want to do absolutely everything possible to ensure it gets captured\n      // also we want to make sure we don't go recursion crazy if more errors happen after this one\n      firstError = error;\n      caughtFirstError = true;\n      if (core.getClient() === client) {\n        core.captureException(error, {\n          originalException: error,\n          captureContext: {\n            level: 'fatal'\n          },\n          mechanism: {\n            handled: false,\n            type: 'onuncaughtexception'\n          }\n        });\n      }\n      if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n        calledFatalError = true;\n        onFatalError(error);\n      }\n    } else {\n      if (shouldApplyFatalHandlingLogic) {\n        if (calledFatalError) {\n          // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n          debugBuild.DEBUG_BUILD && core.logger.warn('uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown');\n          errorhandling.logAndExitProcess(error);\n        } else if (!caughtSecondError) {\n          // two cases for how we can hit this branch:\n          //   - capturing of first error blew up and we just caught the exception from that\n          //     - quit trying to capture, proceed with shutdown\n          //   - a second independent error happened while waiting for first error to capture\n          //     - want to avoid causing premature shutdown before first error capture finishes\n          // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n          // so let's instead just delay a bit before we proceed with our action here\n          // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n          // in case 2, the delay hopefully made us wait long enough for the capture to finish\n          // two potential nonideal outcomes:\n          //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n          //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n          // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n          //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n          caughtSecondError = true;\n          setTimeout(() => {\n            if (!calledFatalError) {\n              // it was probably case 1, let's treat err as the sendErr and call onFatalError\n              calledFatalError = true;\n              onFatalError(firstError, error);\n            }\n          }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n        }\n      }\n    }\n  }, {\n    _errorHandler: true\n  });\n}\nexports.makeErrorHandler = makeErrorHandler;\nexports.onUncaughtExceptionIntegration = onUncaughtExceptionIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/errorhandling.js\");\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\nconst _onUnhandledRejectionIntegration = (options = {}) => {\n  const mode = options.mode || 'warn';\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, {\n        mode\n      }));\n    }\n  };\n};\n\n/**\n * Add a global promise rejection handler.\n */\nconst onUnhandledRejectionIntegration = core.defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nfunction makeUnhandledPromiseHandler(client, options) {\n  return function sendUnhandledPromise(reason, promise) {\n    if (core.getClient() !== client) {\n      return;\n    }\n    core.captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: {\n          unhandledPromiseRejection: true\n        }\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection'\n      }\n    });\n    handleRejection(reason, options);\n  };\n}\n\n/**\n * Handler for `mode` option\n */\nfunction handleRejection(reason, options) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning = 'This error originated either by ' + 'throwing inside of an async function without a catch block, ' + 'or by rejecting a promise which was not handled with .catch().' + ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (options.mode === 'warn') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      console.error(reason && typeof reason === 'object' && 'stack' in reason ? reason.stack : reason);\n    });\n  } else if (options.mode === 'strict') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    errorhandling.logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n\nexports.makeUnhandledPromiseHandler = makeUnhandledPromiseHandler;\nexports.onUnhandledRejectionIntegration = onUnhandledRejectionIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFDcEMsTUFBTUMsYUFBYSxHQUFHRCxtQkFBTyxDQUFDLDRHQUEyQixDQUFDO0FBRTFELE1BQU1FLGdCQUFnQixHQUFHLHNCQUFzQjtBQUUvQyxNQUFNQyxnQ0FBZ0MsR0FBSUEsQ0FBQ0MsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLO0VBQzFELE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDQyxJQUFJLElBQUksTUFBTTtFQUVuQyxPQUFPO0lBQ0xDLElBQUksRUFBRUosZ0JBQWdCO0lBQ3RCSyxLQUFLQSxDQUFDQyxNQUFNLEVBQUU7TUFDWkMsTUFBTSxDQUFDQyxPQUFPLENBQUNDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRUMsMkJBQTJCLENBQUNKLE1BQU0sRUFBRTtRQUFFSDtNQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3hGO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsTUFBTVEsK0JBQStCLEdBQUdkLElBQUksQ0FBQ2UsaUJBQWlCLENBQUNYLGdDQUFnQyxDQUFDOztBQUVoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNTLDJCQUEyQkEsQ0FDbENKLE1BQU0sRUFDTkosT0FBTyxFQUNQO0VBQ0EsT0FBTyxTQUFTVyxvQkFBb0JBLENBQUNDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO0lBQ3BELElBQUlsQixJQUFJLENBQUNtQixTQUFTLENBQUMsQ0FBQyxLQUFLVixNQUFNLEVBQUU7TUFDL0I7SUFDRjtJQUVBVCxJQUFJLENBQUNvQixnQkFBZ0IsQ0FBQ0gsTUFBTSxFQUFFO01BQzVCSSxpQkFBaUIsRUFBRUgsT0FBTztNQUMxQkksY0FBYyxFQUFFO1FBQ2RDLEtBQUssRUFBRTtVQUFFQyx5QkFBeUIsRUFBRTtRQUFLO01BQzNDLENBQUM7TUFDREMsU0FBUyxFQUFFO1FBQ1RDLE9BQU8sRUFBRSxLQUFLO1FBQ2RDLElBQUksRUFBRTtNQUNSO0lBQ0YsQ0FBQyxDQUFDO0lBRUZDLGVBQWUsQ0FBQ1gsTUFBTSxFQUFFWixPQUFPLENBQUM7RUFDbEMsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVN1QixlQUFlQSxDQUFDWCxNQUFNLEVBQUVaLE9BQU8sRUFBRTtFQUN4QztFQUNBLE1BQU13QixnQkFBZ0IsR0FDcEIsa0NBQWtDLEdBQ2xDLDhEQUE4RCxHQUM5RCxnRUFBZ0UsR0FDaEUsd0NBQXdDOztFQUUxQztFQUNBLElBQUl4QixPQUFPLENBQUNDLElBQUksS0FBSyxNQUFNLEVBQUU7SUFDM0JOLElBQUksQ0FBQzhCLGNBQWMsQ0FBQyxNQUFNO01BQ3hCQyxPQUFPLENBQUNDLElBQUksQ0FBQ0gsZ0JBQWdCLENBQUM7TUFDOUJFLE9BQU8sQ0FBQ0UsS0FBSyxDQUFDaEIsTUFBTSxJQUFJLE9BQU9BLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBTyxJQUFJQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ2lCLEtBQUssR0FBR2pCLE1BQU0sQ0FBQztJQUNsRyxDQUFDLENBQUM7RUFDSixDQUFDLE1BQU0sSUFBSVosT0FBTyxDQUFDQyxJQUFJLEtBQUssUUFBUSxFQUFFO0lBQ3BDTixJQUFJLENBQUM4QixjQUFjLENBQUMsTUFBTTtNQUN4QkMsT0FBTyxDQUFDQyxJQUFJLENBQUNILGdCQUFnQixDQUFDO0lBQ2hDLENBQUMsQ0FBQztJQUNGM0IsYUFBYSxDQUFDaUMsaUJBQWlCLENBQUNsQixNQUFNLENBQUM7RUFDekM7RUFDQTtBQUNGOztBQUVBbkIsbUNBQW1DLEdBQUdlLDJCQUEyQjtBQUNqRWYsdUNBQXVDLEdBQUdnQiwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvb251bmhhbmRsZWRyZWplY3Rpb24uanM/NzhmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBlcnJvcmhhbmRsaW5nID0gcmVxdWlyZSgnLi4vdXRpbHMvZXJyb3JoYW5kbGluZy5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ09uVW5oYW5kbGVkUmVqZWN0aW9uJztcblxuY29uc3QgX29uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBtb2RlID0gb3B0aW9ucy5tb2RlIHx8ICd3YXJuJztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBnbG9iYWwucHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgbWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyKGNsaWVudCwgeyBtb2RlIH0pKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZCBhIGdsb2JhbCBwcm9taXNlIHJlamVjdGlvbiBoYW5kbGVyLlxuICovXG5jb25zdCBvblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbik7XG5cbi8qKlxuICogU2VuZCBhbiBleGNlcHRpb24gd2l0aCByZWFzb25cbiAqIEBwYXJhbSByZWFzb24gc3RyaW5nXG4gKiBAcGFyYW0gcHJvbWlzZSBwcm9taXNlXG4gKlxuICogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuXG4gKi9cbmZ1bmN0aW9uIG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcihcbiAgY2xpZW50LFxuICBvcHRpb25zLFxuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZW5kVW5oYW5kbGVkUHJvbWlzZShyZWFzb24sIHByb21pc2UpIHtcbiAgICBpZiAoY29yZS5nZXRDbGllbnQoKSAhPT0gY2xpZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKHJlYXNvbiwge1xuICAgICAgb3JpZ2luYWxFeGNlcHRpb246IHByb21pc2UsXG4gICAgICBjYXB0dXJlQ29udGV4dDoge1xuICAgICAgICBleHRyYTogeyB1bmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uOiB0cnVlIH0sXG4gICAgICB9LFxuICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICB0eXBlOiAnb251bmhhbmRsZWRyZWplY3Rpb24nLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGhhbmRsZVJlamVjdGlvbihyZWFzb24sIG9wdGlvbnMpO1xuICB9O1xufVxuXG4vKipcbiAqIEhhbmRsZXIgZm9yIGBtb2RlYCBvcHRpb25cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUmVqZWN0aW9uKHJlYXNvbiwgb3B0aW9ucykge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi83Y2Y2ZjllOTY0YWEwMDc3Mjk2NTM5MWMyM2FjZGE2ZDcxOTcyYTlhL2xpYi9pbnRlcm5hbC9wcm9jZXNzL3Byb21pc2VzLmpzI0wyMzQtTDI0MFxuICBjb25zdCByZWplY3Rpb25XYXJuaW5nID1cbiAgICAnVGhpcyBlcnJvciBvcmlnaW5hdGVkIGVpdGhlciBieSAnICtcbiAgICAndGhyb3dpbmcgaW5zaWRlIG9mIGFuIGFzeW5jIGZ1bmN0aW9uIHdpdGhvdXQgYSBjYXRjaCBibG9jaywgJyArXG4gICAgJ29yIGJ5IHJlamVjdGluZyBhIHByb21pc2Ugd2hpY2ggd2FzIG5vdCBoYW5kbGVkIHdpdGggLmNhdGNoKCkuJyArXG4gICAgJyBUaGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIHRoZSByZWFzb246JztcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmIChvcHRpb25zLm1vZGUgPT09ICd3YXJuJykge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgY29uc29sZS53YXJuKHJlamVjdGlvbldhcm5pbmcpO1xuICAgICAgY29uc29sZS5lcnJvcihyZWFzb24gJiYgdHlwZW9mIHJlYXNvbiA9PT0gJ29iamVjdCcgJiYgJ3N0YWNrJyBpbiByZWFzb24gPyByZWFzb24uc3RhY2sgOiByZWFzb24pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMubW9kZSA9PT0gJ3N0cmljdCcpIHtcbiAgICBjb3JlLmNvbnNvbGVTYW5kYm94KCgpID0+IHtcbiAgICAgIGNvbnNvbGUud2FybihyZWplY3Rpb25XYXJuaW5nKTtcbiAgICB9KTtcbiAgICBlcnJvcmhhbmRsaW5nLmxvZ0FuZEV4aXRQcm9jZXNzKHJlYXNvbik7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG59XG5cbmV4cG9ydHMubWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyID0gbWFrZVVuaGFuZGxlZFByb21pc2VIYW5kbGVyO1xuZXhwb3J0cy5vblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uID0gb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9udW5oYW5kbGVkcmVqZWN0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29yZSIsInJlcXVpcmUiLCJlcnJvcmhhbmRsaW5nIiwiSU5URUdSQVRJT05fTkFNRSIsIl9vblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uIiwib3B0aW9ucyIsIm1vZGUiLCJuYW1lIiwic2V0dXAiLCJjbGllbnQiLCJnbG9iYWwiLCJwcm9jZXNzIiwib24iLCJtYWtlVW5oYW5kbGVkUHJvbWlzZUhhbmRsZXIiLCJvblVuaGFuZGxlZFJlamVjdGlvbkludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iLCJzZW5kVW5oYW5kbGVkUHJvbWlzZSIsInJlYXNvbiIsInByb21pc2UiLCJnZXRDbGllbnQiLCJjYXB0dXJlRXhjZXB0aW9uIiwib3JpZ2luYWxFeGNlcHRpb24iLCJjYXB0dXJlQ29udGV4dCIsImV4dHJhIiwidW5oYW5kbGVkUHJvbWlzZVJlamVjdGlvbiIsIm1lY2hhbmlzbSIsImhhbmRsZWQiLCJ0eXBlIiwiaGFuZGxlUmVqZWN0aW9uIiwicmVqZWN0aW9uV2FybmluZyIsImNvbnNvbGVTYW5kYm94IiwiY29uc29sZSIsIndhcm4iLCJlcnJvciIsInN0YWNrIiwibG9nQW5kRXhpdFByb2Nlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/spotlight.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/spotlight.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst INTEGRATION_NAME = 'Spotlight';\nconst _spotlightIntegration = (options = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream'\n  };\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (typeof process === 'object' && process.env && false) {}\n      connectToSpotlight(client, _options);\n    }\n  };\n};\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n */\nconst spotlightIntegration = core.defineIntegration(_spotlightIntegration);\nfunction connectToSpotlight(client, options) {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n  let failedRequests = 0;\n  client.on('beforeEnvelope', envelope => {\n    if (failedRequests > 3) {\n      core.logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n    const serializedEnvelope = core.serializeEnvelope(envelope);\n    const request = getNativeHttpRequest();\n    const req = request({\n      method: 'POST',\n      path: spotlightUrl.pathname,\n      hostname: spotlightUrl.hostname,\n      port: spotlightUrl.port,\n      headers: {\n        'Content-Type': 'application/x-sentry-envelope'\n      }\n    }, res => {\n      if (res.statusCode && res.statusCode >= 200 && res.statusCode < 400) {\n        // Reset failed requests counter on success\n        failedRequests = 0;\n      }\n      res.on('data', () => {\n        // Drain socket\n      });\n      res.on('end', () => {\n        // Drain socket\n      });\n      res.setEncoding('utf8');\n    });\n    req.on('error', () => {\n      failedRequests++;\n      core.logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n    });\n    req.write(serializedEnvelope);\n    req.end();\n  });\n}\nfunction parseSidecarUrl(url) {\n  try {\n    return new URL(`${url}`);\n  } catch (e) {\n    core.logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\n/**\n * We want to get an unpatched http request implementation to avoid capturing our own calls.\n */\nfunction getNativeHttpRequest() {\n  const {\n    request\n  } = http;\n  if (isWrapped(request)) {\n    return request.__sentry_original__;\n  }\n  return request;\n}\nfunction isWrapped(impl) {\n  return '__sentry_original__' in impl;\n}\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\nexports.getNativeHttpRequest = getNativeHttpRequest;\nexports.spotlightIntegration = spotlightIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLElBQUksR0FBR0MsbUJBQU8sQ0FBQyw0QkFBVyxDQUFDO0FBQ2pDLE1BQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBRXBDLE1BQU1FLGdCQUFnQixHQUFHLFdBQVc7QUFFcEMsTUFBTUMscUJBQXFCLEdBQUlBLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSztFQUMvQyxNQUFNQyxRQUFRLEdBQUc7SUFDZkMsVUFBVSxFQUFFRixPQUFPLENBQUNFLFVBQVUsSUFBSTtFQUNwQyxDQUFDO0VBRUQsT0FBTztJQUNMQyxJQUFJLEVBQUVMLGdCQUFnQjtJQUN0Qk0sS0FBS0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ1osSUFBSSxPQUFPQyxPQUFPLEtBQUssUUFBUSxJQUFJQSxPQUFPLENBQUNDLEdBQUcsU0FBMEMsRUFBRSxFQUV6RjtNQUNERyxrQkFBa0IsQ0FBQ0wsTUFBTSxFQUFFSixRQUFRLENBQUM7SUFDdEM7RUFDRixDQUFDO0FBQ0gsQ0FBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1VLG9CQUFvQixHQUFHZCxJQUFJLENBQUNlLGlCQUFpQixDQUFDYixxQkFBcUIsQ0FBQztBQUUxRSxTQUFTVyxrQkFBa0JBLENBQUNMLE1BQU0sRUFBRUwsT0FBTyxFQUFFO0VBQzNDLE1BQU1hLFlBQVksR0FBR0MsZUFBZSxDQUFDZCxPQUFPLENBQUNFLFVBQVUsQ0FBQztFQUN4RCxJQUFJLENBQUNXLFlBQVksRUFBRTtJQUNqQjtFQUNGO0VBRUEsSUFBSUUsY0FBYyxHQUFHLENBQUM7RUFFdEJWLE1BQU0sQ0FBQ1csRUFBRSxDQUFDLGdCQUFnQixFQUFHQyxRQUFRLElBQUs7SUFDeEMsSUFBSUYsY0FBYyxHQUFHLENBQUMsRUFBRTtNQUN0QmxCLElBQUksQ0FBQ1csTUFBTSxDQUFDQyxJQUFJLENBQUMsc0ZBQXNGLENBQUM7TUFDeEc7SUFDRjtJQUVBLE1BQU1TLGtCQUFrQixHQUFHckIsSUFBSSxDQUFDc0IsaUJBQWlCLENBQUNGLFFBQVEsQ0FBQztJQUUzRCxNQUFNRyxPQUFPLEdBQUdDLG9CQUFvQixDQUFDLENBQUM7SUFDdEMsTUFBTUMsR0FBRyxHQUFHRixPQUFPLENBQ2pCO01BQ0VHLE1BQU0sRUFBRSxNQUFNO01BQ2RDLElBQUksRUFBRVgsWUFBWSxDQUFDWSxRQUFRO01BQzNCQyxRQUFRLEVBQUViLFlBQVksQ0FBQ2EsUUFBUTtNQUMvQkMsSUFBSSxFQUFFZCxZQUFZLENBQUNjLElBQUk7TUFDdkJDLE9BQU8sRUFBRTtRQUNQLGNBQWMsRUFBRTtNQUNsQjtJQUNGLENBQUMsRUFDREMsR0FBRyxJQUFJO01BQ0wsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLElBQUlELEdBQUcsQ0FBQ0MsVUFBVSxJQUFJLEdBQUcsSUFBSUQsR0FBRyxDQUFDQyxVQUFVLEdBQUcsR0FBRyxFQUFFO1FBQ25FO1FBQ0FmLGNBQWMsR0FBRyxDQUFDO01BQ3BCO01BQ0FjLEdBQUcsQ0FBQ2IsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNO1FBQ25CO01BQUEsQ0FDRCxDQUFDO01BRUZhLEdBQUcsQ0FBQ2IsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNO1FBQ2xCO01BQUEsQ0FDRCxDQUFDO01BQ0ZhLEdBQUcsQ0FBQ0UsV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUN6QixDQUNGLENBQUM7SUFFRFQsR0FBRyxDQUFDTixFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU07TUFDcEJELGNBQWMsRUFBRTtNQUNoQmxCLElBQUksQ0FBQ1csTUFBTSxDQUFDQyxJQUFJLENBQUMsMERBQTBELENBQUM7SUFDOUUsQ0FBQyxDQUFDO0lBQ0ZhLEdBQUcsQ0FBQ1UsS0FBSyxDQUFDZCxrQkFBa0IsQ0FBQztJQUM3QkksR0FBRyxDQUFDVyxHQUFHLENBQUMsQ0FBQztFQUNYLENBQUMsQ0FBQztBQUNKO0FBRUEsU0FBU25CLGVBQWVBLENBQUNvQixHQUFHLEVBQUU7RUFDNUIsSUFBSTtJQUNGLE9BQU8sSUFBSUMsR0FBRyxDQUFFLEdBQUVELEdBQUksRUFBQyxDQUFDO0VBQzFCLENBQUMsQ0FBQyxPQUFPRSxDQUFDLEVBQUU7SUFDVnZDLElBQUksQ0FBQ1csTUFBTSxDQUFDQyxJQUFJLENBQUUsb0NBQW1DeUIsR0FBSSxFQUFDLENBQUM7SUFDM0QsT0FBT0csU0FBUztFQUNsQjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNoQixvQkFBb0JBLENBQUEsRUFBRztFQUM5QixNQUFNO0lBQUVEO0VBQVEsQ0FBQyxHQUFHekIsSUFBSTtFQUN4QixJQUFJMkMsU0FBUyxDQUFDbEIsT0FBTyxDQUFDLEVBQUU7SUFDdEIsT0FBT0EsT0FBTyxDQUFDbUIsbUJBQW1CO0VBQ3BDO0VBRUEsT0FBT25CLE9BQU87QUFDaEI7QUFFQSxTQUFTa0IsU0FBU0EsQ0FBQ0UsSUFBSSxFQUFFO0VBQ3ZCLE9BQU8scUJBQXFCLElBQUlBLElBQUk7QUFDdEM7QUFFQS9DLHdCQUF3QixHQUFHSyxnQkFBZ0I7QUFDM0NMLDRCQUE0QixHQUFHNEIsb0JBQW9CO0FBQ25ENUIsNEJBQTRCLEdBQUdrQixvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvc3BvdGxpZ2h0LmpzPzI1NGYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ25vZGU6aHR0cCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Nwb3RsaWdodCc7XG5cbmNvbnN0IF9zcG90bGlnaHRJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IF9vcHRpb25zID0ge1xuICAgIHNpZGVjYXJVcmw6IG9wdGlvbnMuc2lkZWNhclVybCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4OTY5L3N0cmVhbScsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICBjb3JlLmxvZ2dlci53YXJuKFwiW1Nwb3RsaWdodF0gSXQgc2VlbXMgeW91J3JlIG5vdCBpbiBkZXYgbW9kZS4gRG8geW91IHJlYWxseSB3YW50IHRvIGhhdmUgU3BvdGxpZ2h0IGVuYWJsZWQ/XCIpO1xuICAgICAgfVxuICAgICAgY29ubmVjdFRvU3BvdGxpZ2h0KGNsaWVudCwgX29wdGlvbnMpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogVXNlIHRoaXMgaW50ZWdyYXRpb24gdG8gc2VuZCBlcnJvcnMgYW5kIHRyYW5zYWN0aW9ucyB0byBTcG90bGlnaHQuXG4gKlxuICogTGVhcm4gbW9yZSBhYm91dCBzcG90bGlnaHQgYXQgaHR0cHM6Ly9zcG90bGlnaHRqcy5jb21cbiAqXG4gKiBJbXBvcnRhbnQ6IFRoaXMgaW50ZWdyYXRpb24gb25seSB3b3JrcyB3aXRoIE5vZGUgMTggb3IgbmV3ZXIuXG4gKi9cbmNvbnN0IHNwb3RsaWdodEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfc3BvdGxpZ2h0SW50ZWdyYXRpb24pO1xuXG5mdW5jdGlvbiBjb25uZWN0VG9TcG90bGlnaHQoY2xpZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IHNwb3RsaWdodFVybCA9IHBhcnNlU2lkZWNhclVybChvcHRpb25zLnNpZGVjYXJVcmwpO1xuICBpZiAoIXNwb3RsaWdodFVybCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBmYWlsZWRSZXF1ZXN0cyA9IDA7XG5cbiAgY2xpZW50Lm9uKCdiZWZvcmVFbnZlbG9wZScsIChlbnZlbG9wZSkgPT4ge1xuICAgIGlmIChmYWlsZWRSZXF1ZXN0cyA+IDMpIHtcbiAgICAgIGNvcmUubG9nZ2VyLndhcm4oJ1tTcG90bGlnaHRdIERpc2FibGVkIFNlbnRyeSAtPiBTcG90bGlnaHQgaW50ZWdyYXRpb24gZHVlIHRvIHRvbyBtYW55IGZhaWxlZCByZXF1ZXN0cycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcmlhbGl6ZWRFbnZlbG9wZSA9IGNvcmUuc2VyaWFsaXplRW52ZWxvcGUoZW52ZWxvcGUpO1xuXG4gICAgY29uc3QgcmVxdWVzdCA9IGdldE5hdGl2ZUh0dHBSZXF1ZXN0KCk7XG4gICAgY29uc3QgcmVxID0gcmVxdWVzdChcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHBhdGg6IHNwb3RsaWdodFVybC5wYXRobmFtZSxcbiAgICAgICAgaG9zdG5hbWU6IHNwb3RsaWdodFVybC5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogc3BvdGxpZ2h0VXJsLnBvcnQsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtc2VudHJ5LWVudmVsb3BlJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICByZXMgPT4ge1xuICAgICAgICBpZiAocmVzLnN0YXR1c0NvZGUgJiYgcmVzLnN0YXR1c0NvZGUgPj0gMjAwICYmIHJlcy5zdGF0dXNDb2RlIDwgNDAwKSB7XG4gICAgICAgICAgLy8gUmVzZXQgZmFpbGVkIHJlcXVlc3RzIGNvdW50ZXIgb24gc3VjY2Vzc1xuICAgICAgICAgIGZhaWxlZFJlcXVlc3RzID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXMub24oJ2RhdGEnLCAoKSA9PiB7XG4gICAgICAgICAgLy8gRHJhaW4gc29ja2V0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICByZXEub24oJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgZmFpbGVkUmVxdWVzdHMrKztcbiAgICAgIGNvcmUubG9nZ2VyLndhcm4oJ1tTcG90bGlnaHRdIEZhaWxlZCB0byBzZW5kIGVudmVsb3BlIHRvIFNwb3RsaWdodCBTaWRlY2FyJyk7XG4gICAgfSk7XG4gICAgcmVxLndyaXRlKHNlcmlhbGl6ZWRFbnZlbG9wZSk7XG4gICAgcmVxLmVuZCgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VTaWRlY2FyVXJsKHVybCkge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgVVJMKGAke3VybH1gKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvcmUubG9nZ2VyLndhcm4oYFtTcG90bGlnaHRdIEludmFsaWQgc2lkZWNhciBVUkw6ICR7dXJsfWApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBXZSB3YW50IHRvIGdldCBhbiB1bnBhdGNoZWQgaHR0cCByZXF1ZXN0IGltcGxlbWVudGF0aW9uIHRvIGF2b2lkIGNhcHR1cmluZyBvdXIgb3duIGNhbGxzLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmVIdHRwUmVxdWVzdCgpIHtcbiAgY29uc3QgeyByZXF1ZXN0IH0gPSBodHRwO1xuICBpZiAoaXNXcmFwcGVkKHJlcXVlc3QpKSB7XG4gICAgcmV0dXJuIHJlcXVlc3QuX19zZW50cnlfb3JpZ2luYWxfXztcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0O1xufVxuXG5mdW5jdGlvbiBpc1dyYXBwZWQoaW1wbCkge1xuICByZXR1cm4gJ19fc2VudHJ5X29yaWdpbmFsX18nIGluIGltcGw7XG59XG5cbmV4cG9ydHMuSU5URUdSQVRJT05fTkFNRSA9IElOVEVHUkFUSU9OX05BTUU7XG5leHBvcnRzLmdldE5hdGl2ZUh0dHBSZXF1ZXN0ID0gZ2V0TmF0aXZlSHR0cFJlcXVlc3Q7XG5leHBvcnRzLnNwb3RsaWdodEludGVncmF0aW9uID0gc3BvdGxpZ2h0SW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcG90bGlnaHQuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJodHRwIiwicmVxdWlyZSIsImNvcmUiLCJJTlRFR1JBVElPTl9OQU1FIiwiX3Nwb3RsaWdodEludGVncmF0aW9uIiwib3B0aW9ucyIsIl9vcHRpb25zIiwic2lkZWNhclVybCIsIm5hbWUiLCJzZXR1cCIsImNsaWVudCIsInByb2Nlc3MiLCJlbnYiLCJsb2dnZXIiLCJ3YXJuIiwiY29ubmVjdFRvU3BvdGxpZ2h0Iiwic3BvdGxpZ2h0SW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiIsInNwb3RsaWdodFVybCIsInBhcnNlU2lkZWNhclVybCIsImZhaWxlZFJlcXVlc3RzIiwib24iLCJlbnZlbG9wZSIsInNlcmlhbGl6ZWRFbnZlbG9wZSIsInNlcmlhbGl6ZUVudmVsb3BlIiwicmVxdWVzdCIsImdldE5hdGl2ZUh0dHBSZXF1ZXN0IiwicmVxIiwibWV0aG9kIiwicGF0aCIsInBhdGhuYW1lIiwiaG9zdG5hbWUiLCJwb3J0IiwiaGVhZGVycyIsInJlcyIsInN0YXR1c0NvZGUiLCJzZXRFbmNvZGluZyIsIndyaXRlIiwiZW5kIiwidXJsIiwiVVJMIiwiZSIsInVuZGVmaW5lZCIsImlzV3JhcHBlZCIsIl9fc2VudHJ5X29yaWdpbmFsX18iLCJpbXBsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/spotlight.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationAmqplib = __webpack_require__(/*! @opentelemetry/instrumentation-amqplib */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-amqplib/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst INTEGRATION_NAME = 'Amqplib';\nconst config = {\n  consumeEndHook: span => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.consumer');\n  },\n  publishHook: span => {\n    addOriginToSpan.addOriginToSpan(span, 'auto.amqplib.otel.publisher');\n  }\n};\nconst instrumentAmqplib = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationAmqplib.AmqplibInstrumentation(config));\nconst _amqplibIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentAmqplib();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [amqplib](https://www.npmjs.com/package/amqplib) library.\n *\n * For more information, see the [`amqplibIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/amqplib/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.amqplibIntegration()],\n * });\n * ```\n */\nconst amqplibIntegration = core.defineIntegration(_amqplibIntegration);\nexports.amqplibIntegration = amqplibIntegration;\nexports.instrumentAmqplib = instrumentAmqplib;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvYW1xcGxpYi5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLHNCQUFzQixHQUFHQyxtQkFBTyxDQUFDLHFJQUF3QyxDQUFDO0FBQ2hGLE1BQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBQ3BDLE1BQU1FLFVBQVUsR0FBR0YsbUJBQU8sQ0FBQyx1R0FBMEIsQ0FBQztBQUN0RCxNQUFNRyxlQUFlLEdBQUdILG1CQUFPLENBQUMsbUhBQWdDLENBQUM7QUFFakUsTUFBTUksZ0JBQWdCLEdBQUcsU0FBUztBQUVsQyxNQUFNQyxNQUFNLEdBQUc7RUFDYkMsY0FBYyxFQUFHQyxJQUFJLElBQUs7SUFDeEJKLGVBQWUsQ0FBQ0EsZUFBZSxDQUFDSSxJQUFJLEVBQUUsNEJBQTRCLENBQUM7RUFDckUsQ0FBQztFQUNEQyxXQUFXLEVBQUdELElBQUksSUFBSztJQUNyQkosZUFBZSxDQUFDQSxlQUFlLENBQUNJLElBQUksRUFBRSw2QkFBNkIsQ0FBQztFQUN0RTtBQUNGLENBQUM7QUFFRCxNQUFNRSxpQkFBaUIsR0FBR1AsVUFBVSxDQUFDUSxzQkFBc0IsQ0FBQ04sZ0JBQWdCLEVBQUUsTUFBTSxJQUFJTCxzQkFBc0IsQ0FBQ1ksc0JBQXNCLENBQUNOLE1BQU0sQ0FBQyxDQUFDO0FBRTlJLE1BQU1PLG1CQUFtQixHQUFJQSxDQUFBLEtBQU07RUFDakMsT0FBTztJQUNMQyxJQUFJLEVBQUVULGdCQUFnQjtJQUN0QlUsU0FBU0EsQ0FBQSxFQUFHO01BQ1ZMLGlCQUFpQixDQUFDLENBQUM7SUFDckI7RUFDRixDQUFDO0FBQ0gsQ0FBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTU0sa0JBQWtCLEdBQUdkLElBQUksQ0FBQ2UsaUJBQWlCLENBQUNKLG1CQUFtQixDQUFDO0FBRXRFZiwwQkFBMEIsR0FBR2tCLGtCQUFrQjtBQUMvQ2xCLHlCQUF5QixHQUFHWSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9hbXFwbGliLmpzP2M4MGIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uQW1xcGxpYiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1hbXFwbGliJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdBbXFwbGliJztcblxuY29uc3QgY29uZmlnID0ge1xuICBjb25zdW1lRW5kSG9vazogKHNwYW4pID0+IHtcbiAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmFtcXBsaWIub3RlbC5jb25zdW1lcicpO1xuICB9LFxuICBwdWJsaXNoSG9vazogKHNwYW4pID0+IHtcbiAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmFtcXBsaWIub3RlbC5wdWJsaXNoZXInKTtcbiAgfSxcbn07XG5cbmNvbnN0IGluc3RydW1lbnRBbXFwbGliID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25BbXFwbGliLkFtcXBsaWJJbnN0cnVtZW50YXRpb24oY29uZmlnKSk7XG5cbmNvbnN0IF9hbXFwbGliSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEFtcXBsaWIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2FtcXBsaWJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2FtcXBsaWIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BhbXFwbGliSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvYW1xcGxpYi8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmFtcXBsaWJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGFtcXBsaWJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2FtcXBsaWJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuYW1xcGxpYkludGVncmF0aW9uID0gYW1xcGxpYkludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50QW1xcGxpYiA9IGluc3RydW1lbnRBbXFwbGliO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW1xcGxpYi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluc3RydW1lbnRhdGlvbkFtcXBsaWIiLCJyZXF1aXJlIiwiY29yZSIsImluc3RydW1lbnQiLCJhZGRPcmlnaW5Ub1NwYW4iLCJJTlRFR1JBVElPTl9OQU1FIiwiY29uZmlnIiwiY29uc3VtZUVuZEhvb2siLCJzcGFuIiwicHVibGlzaEhvb2siLCJpbnN0cnVtZW50QW1xcGxpYiIsImdlbmVyYXRlSW5zdHJ1bWVudE9uY2UiLCJBbXFwbGliSW5zdHJ1bWVudGF0aW9uIiwiX2FtcXBsaWJJbnRlZ3JhdGlvbiIsIm5hbWUiLCJzZXR1cE9uY2UiLCJhbXFwbGliSW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationConnect = __webpack_require__(/*! @opentelemetry/instrumentation-connect */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-connect/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\nconst INTEGRATION_NAME = 'Connect';\nconst instrumentConnect = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationConnect.ConnectInstrumentation());\nconst _connectIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentConnect();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for [Connect](https://github.com/senchalabs/connect/).\n *\n * If you also want to capture errors, you need to call `setupConnectErrorHandler(app)` after you initialize your connect app.\n *\n * For more information, see the [connect documentation](https://docs.sentry.io/platforms/javascript/guides/connect/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.connectIntegration()],\n * })\n * ```\n */\nconst connectIntegration = core.defineIntegration(_connectIntegration);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction connectErrorMiddleware(err, req, res, next) {\n  core.captureException(err);\n  next(err);\n}\n\n/**\n * Add a Connect middleware to capture errors to Sentry.\n *\n * @param app The Connect app to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const connect = require(\"connect\");\n *\n * const app = connect();\n *\n * Sentry.setupConnectErrorHandler(app);\n *\n * // Add you connect routes here\n *\n * app.listen(3000);\n * ```\n */\nconst setupConnectErrorHandler = app => {\n  app.use(connectErrorMiddleware);\n\n  // Sadly, ConnectInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using connect\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addConnectSpanAttributes(span);\n    });\n  }\n  ensureIsWrapped.ensureIsWrapped(app.use, 'connect');\n};\nfunction addConnectSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['connect.type'];\n\n  // If this is already set, or we have no connect span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.connect',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.connect`\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['connect.name'];\n  if (typeof name === 'string') {\n    span.updateName(name);\n  }\n}\nexports.connectIntegration = connectIntegration;\nexports.instrumentConnect = instrumentConnect;\nexports.setupConnectErrorHandler = setupConnectErrorHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationDataloader = __webpack_require__(/*! @opentelemetry/instrumentation-dataloader */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-dataloader/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst INTEGRATION_NAME = 'Dataloader';\nconst instrumentDataloader = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationDataloader.DataloaderInstrumentation({\n  requireParentSpan: true\n}));\nconst _dataloaderIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentDataloader();\n    },\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _ => _.description, 'optionalAccess', _2 => _2.startsWith, 'call', _3 => _3('dataloader')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.dataloader');\n        }\n\n        // These are all possible dataloader span descriptions\n        // Still checking for the future versions\n        // in case they add support for `clear` and `prime`\n        if (spanJSON.description === 'dataloader.load' || spanJSON.description === 'dataloader.loadMany' || spanJSON.description === 'dataloader.batch') {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'cache.get');\n          // TODO: We can try adding `key` to the `data` attribute upstream.\n          // Or alternatively, we can add `requestHook` to the dataloader instrumentation.\n        }\n      });\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [dataloader](https://www.npmjs.com/package/dataloader) library.\n *\n * For more information, see the [`dataloaderIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/dataloader/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.dataloaderIntegration()],\n * });\n * ```\n */\nconst dataloaderIntegration = core.defineIntegration(_dataloaderIntegration);\nexports.dataloaderIntegration = dataloaderIntegration;\nexports.instrumentDataloader = instrumentDataloader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZGF0YWxvYWRlci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLElBQUk7RUFDRkE7QUFDRixDQUFDLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUUzQkMsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyx5QkFBeUIsR0FBR0wsbUJBQU8sQ0FBQywySUFBMkMsQ0FBQztBQUN0RixNQUFNTSxJQUFJLEdBQUdOLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNTyxVQUFVLEdBQUdQLG1CQUFPLENBQUMsdUdBQTBCLENBQUM7QUFFdEQsTUFBTVEsZ0JBQWdCLEdBQUcsWUFBWTtBQUVyQyxNQUFNQyxvQkFBb0IsR0FBR0YsVUFBVSxDQUFDRyxzQkFBc0IsQ0FDNURGLGdCQUFnQixFQUNoQixNQUNFLElBQUlILHlCQUF5QixDQUFDTSx5QkFBeUIsQ0FBQztFQUN0REMsaUJBQWlCLEVBQUU7QUFDckIsQ0FBQyxDQUNMLENBQUM7QUFFRCxNQUFNQyxzQkFBc0IsR0FBSUEsQ0FBQSxLQUFNO0VBQ3BDLE9BQU87SUFDTEMsSUFBSSxFQUFFTixnQkFBZ0I7SUFDdEJPLFNBQVNBLENBQUEsRUFBRztNQUNWTixvQkFBb0IsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRE8sS0FBS0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ1pBLE1BQU0sQ0FBQ0MsRUFBRSxDQUFDLFdBQVcsRUFBRUMsSUFBSSxJQUFJO1FBQzdCLE1BQU1DLFFBQVEsR0FBR2QsSUFBSSxDQUFDZSxVQUFVLENBQUNGLElBQUksQ0FBQztRQUN0QyxJQUFJcEIsY0FBYyxDQUFDLENBQUNxQixRQUFRLEVBQUUsUUFBUSxFQUFFRSxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsV0FBVyxFQUFFLGdCQUFnQixFQUFFQyxFQUFFLElBQUlBLEVBQUUsQ0FBQ0MsVUFBVSxFQUFFLE1BQU0sRUFBRUMsRUFBRSxJQUFJQSxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFO1VBQ25JUCxJQUFJLENBQUNRLFlBQVksQ0FBQ3JCLElBQUksQ0FBQ3NCLGdDQUFnQyxFQUFFLHlCQUF5QixDQUFDO1FBQ3JGOztRQUVBO1FBQ0E7UUFDQTtRQUNBLElBQ0VSLFFBQVEsQ0FBQ0csV0FBVyxLQUFLLGlCQUFpQixJQUMxQ0gsUUFBUSxDQUFDRyxXQUFXLEtBQUsscUJBQXFCLElBQzlDSCxRQUFRLENBQUNHLFdBQVcsS0FBSyxrQkFBa0IsRUFDM0M7VUFDQUosSUFBSSxDQUFDUSxZQUFZLENBQUNyQixJQUFJLENBQUN1Qiw0QkFBNEIsRUFBRSxXQUFXLENBQUM7VUFDakU7VUFDQTtRQUNGO01BQ0YsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUFDO0FBQ0gsQ0FBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUd4QixJQUFJLENBQUN5QixpQkFBaUIsQ0FBQ2xCLHNCQUFzQixDQUFDO0FBRTVFViw2QkFBNkIsR0FBRzJCLHFCQUFxQjtBQUNyRDNCLDRCQUE0QixHQUFHTSxvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9kYXRhbG9hZGVyLmpzP2NiODkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uRGF0YWxvYWRlciA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1kYXRhbG9hZGVyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnRGF0YWxvYWRlcic7XG5cbmNvbnN0IGluc3RydW1lbnREYXRhbG9hZGVyID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBJTlRFR1JBVElPTl9OQU1FLFxuICAoKSA9PlxuICAgIG5ldyBpbnN0cnVtZW50YXRpb25EYXRhbG9hZGVyLkRhdGFsb2FkZXJJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVxdWlyZVBhcmVudFNwYW46IHRydWUsXG4gICAgfSksXG4pO1xuXG5jb25zdCBfZGF0YWxvYWRlckludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnREYXRhbG9hZGVyKCk7XG4gICAgfSxcblxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgY2xpZW50Lm9uKCdzcGFuU3RhcnQnLCBzcGFuID0+IHtcbiAgICAgICAgY29uc3Qgc3BhbkpTT04gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgIGlmIChfb3B0aW9uYWxDaGFpbihbc3BhbkpTT04sICdhY2Nlc3MnLCBfID0+IF8uZGVzY3JpcHRpb24sICdvcHRpb25hbEFjY2VzcycsIF8yID0+IF8yLnN0YXJ0c1dpdGgsICdjYWxsJywgXzMgPT4gXzMoJ2RhdGFsb2FkZXInKV0pKSB7XG4gICAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiwgJ2F1dG8uZGIub3RlbC5kYXRhbG9hZGVyJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGVzZSBhcmUgYWxsIHBvc3NpYmxlIGRhdGFsb2FkZXIgc3BhbiBkZXNjcmlwdGlvbnNcbiAgICAgICAgLy8gU3RpbGwgY2hlY2tpbmcgZm9yIHRoZSBmdXR1cmUgdmVyc2lvbnNcbiAgICAgICAgLy8gaW4gY2FzZSB0aGV5IGFkZCBzdXBwb3J0IGZvciBgY2xlYXJgIGFuZCBgcHJpbWVgXG4gICAgICAgIGlmIChcbiAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIubG9hZCcgfHxcbiAgICAgICAgICBzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ2RhdGFsb2FkZXIubG9hZE1hbnknIHx8XG4gICAgICAgICAgc3BhbkpTT04uZGVzY3JpcHRpb24gPT09ICdkYXRhbG9hZGVyLmJhdGNoJ1xuICAgICAgICApIHtcbiAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AsICdjYWNoZS5nZXQnKTtcbiAgICAgICAgICAvLyBUT0RPOiBXZSBjYW4gdHJ5IGFkZGluZyBga2V5YCB0byB0aGUgYGRhdGFgIGF0dHJpYnV0ZSB1cHN0cmVhbS5cbiAgICAgICAgICAvLyBPciBhbHRlcm5hdGl2ZWx5LCB3ZSBjYW4gYWRkIGByZXF1ZXN0SG9va2AgdG8gdGhlIGRhdGFsb2FkZXIgaW5zdHJ1bWVudGF0aW9uLlxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2RhdGFsb2FkZXJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2RhdGFsb2FkZXIpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BkYXRhbG9hZGVySW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvZGF0YWxvYWRlci8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmRhdGFsb2FkZXJJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGRhdGFsb2FkZXJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2RhdGFsb2FkZXJJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZGF0YWxvYWRlckludGVncmF0aW9uID0gZGF0YWxvYWRlckludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50RGF0YWxvYWRlciA9IGluc3RydW1lbnREYXRhbG9hZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YWxvYWRlci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfb3B0aW9uYWxDaGFpbiIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluc3RydW1lbnRhdGlvbkRhdGFsb2FkZXIiLCJjb3JlIiwiaW5zdHJ1bWVudCIsIklOVEVHUkFUSU9OX05BTUUiLCJpbnN0cnVtZW50RGF0YWxvYWRlciIsImdlbmVyYXRlSW5zdHJ1bWVudE9uY2UiLCJEYXRhbG9hZGVySW5zdHJ1bWVudGF0aW9uIiwicmVxdWlyZVBhcmVudFNwYW4iLCJfZGF0YWxvYWRlckludGVncmF0aW9uIiwibmFtZSIsInNldHVwT25jZSIsInNldHVwIiwiY2xpZW50Iiwib24iLCJzcGFuIiwic3BhbkpTT04iLCJzcGFuVG9KU09OIiwiXyIsImRlc2NyaXB0aW9uIiwiXzIiLCJzdGFydHNXaXRoIiwiXzMiLCJzZXRBdHRyaWJ1dGUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AiLCJkYXRhbG9hZGVySW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/dataloader.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationExpress = __webpack_require__(/*! @opentelemetry/instrumentation-express */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-express/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\nconst INTEGRATION_NAME = 'Express';\nconst instrumentExpress = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationExpress.ExpressInstrumentation({\n  requestHook(span) {\n    addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.express');\n    const attributes = core.spanToJSON(span).data || {};\n    // this is one of: middleware, request_handler, router\n    const type = attributes['express.type'];\n    if (type) {\n      span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.express`);\n    }\n\n    // Also update the name, we don't need to \"middleware - \" prefix\n    const name = attributes['express.name'];\n    if (typeof name === 'string') {\n      span.updateName(name);\n    }\n  },\n  spanNameHook(info, defaultName) {\n    if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n      debugBuild.DEBUG_BUILD && core.logger.warn('Isolation scope is still default isolation scope - skipping setting transactionName');\n      return defaultName;\n    }\n    if (info.layerType === 'request_handler') {\n      // type cast b/c Otel unfortunately types info.request as any :(\n      const req = info.request;\n      const method = req.method ? req.method.toUpperCase() : 'GET';\n      core.getIsolationScope().setTransactionName(`${method} ${info.route}`);\n    }\n    return defaultName;\n  }\n}));\nconst _expressIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentExpress();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for [Express](https://expressjs.com/).\n *\n * If you also want to capture errors, you need to call `setupExpressErrorHandler(app)` after you set up your Express server.\n *\n * For more information, see the [express documentation](https://docs.sentry.io/platforms/javascript/guides/express/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.expressIntegration()],\n * })\n * ```\n */\nconst expressIntegration = core.defineIntegration(_expressIntegration);\n\n/**\n * An Express-compatible error handler.\n */\nfunction expressErrorHandler(options) {\n  return function sentryErrorMiddleware(error, request, res, next) {\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    // When an error happens, the `expressRequestHandler` middleware does not run, so we set it here too\n    core.getIsolationScope().setSDKProcessingMetadata({\n      request\n    });\n    const shouldHandleError = _optionalChain([options, 'optionalAccess', _ => _.shouldHandleError]) || defaultShouldHandleError;\n    if (shouldHandleError(error)) {\n      const client = core.getClient();\n      // eslint-disable-next-line deprecation/deprecation\n      if (client && client.getOptions().autoSessionTracking) {\n        // Check if the `SessionFlusher` is instantiated on the client to go into this branch that marks the\n        // `requestSession.status` as `Crashed`, and this check is necessary because the `SessionFlusher` is only\n        // instantiated when the the`requestHandler` middleware is initialised, which indicates that we should be\n        // running in SessionAggregates mode\n        const isSessionAggregatesMode = client['_sessionFlusher'] !== undefined;\n        if (isSessionAggregatesMode) {\n          // eslint-disable-next-line deprecation/deprecation\n          const requestSession = core.getIsolationScope().getRequestSession();\n          // If an error bubbles to the `errorHandler`, then this is an unhandled error, and should be reported as a\n          // Crashed session. The `_requestSession.status` is checked to ensure that this error is happening within\n          // the bounds of a request, and if so the status is updated\n          if (requestSession && requestSession.status !== undefined) {\n            requestSession.status = 'crashed';\n          }\n        }\n      }\n      const eventId = core.captureException(error, {\n        mechanism: {\n          type: 'middleware',\n          handled: false\n        }\n      });\n      res.sentry = eventId;\n      next(error);\n      return;\n    }\n    next(error);\n  };\n}\nfunction expressRequestHandler() {\n  return function sentryRequestMiddleware(request, _res, next) {\n    // Ensure we use the express-enhanced request here, instead of the plain HTTP one\n    core.getIsolationScope().setSDKProcessingMetadata({\n      request\n    });\n    next();\n  };\n}\n\n/**\n * Add an Express error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const express = require(\"express\");\n *\n * const app = express();\n *\n * // Add your routes, etc.\n *\n * // Add this after all routes,\n * // but before any and other error-handling middlewares are defined\n * Sentry.setupExpressErrorHandler(app);\n *\n * app.listen(3000);\n * ```\n */\nfunction setupExpressErrorHandler(app, options) {\n  app.use(expressRequestHandler());\n  app.use(expressErrorHandler(options));\n  ensureIsWrapped.ensureIsWrapped(app.use, 'express');\n}\nfunction getStatusCodeFromResponse(error) {\n  const statusCode = error.status || error.statusCode || error.status_code || error.output && error.output.statusCode;\n  return statusCode ? parseInt(statusCode, 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\nexports.expressErrorHandler = expressErrorHandler;\nexports.expressIntegration = expressIntegration;\nexports.instrumentExpress = instrumentExpress;\nexports.setupExpressErrorHandler = setupExpressErrorHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationFastify = __webpack_require__(/*! @opentelemetry/instrumentation-fastify */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-fastify/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\n\n// We inline the types we care about here\n\nconst INTEGRATION_NAME = 'Fastify';\nconst instrumentFastify = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationFastify.FastifyInstrumentation({\n  requestHook(span) {\n    addFastifySpanAttributes(span);\n  }\n}));\nconst _fastifyIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentFastify();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for [Fastify](https://fastify.dev/).\n *\n * If you also want to capture errors, you need to call `setupFastifyErrorHandler(app)` after you set up your Fastify server.\n *\n * For more information, see the [fastify documentation](https://docs.sentry.io/platforms/javascript/guides/fastify/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.fastifyIntegration()],\n * })\n * ```\n */\nconst fastifyIntegration = core.defineIntegration(_fastifyIntegration);\n\n/**\n * Add an Fastify error handler to capture errors to Sentry.\n *\n * @param fastify The Fastify instance to which to add the error handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Fastify = require(\"fastify\");\n *\n * const app = Fastify();\n *\n * Sentry.setupFastifyErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen({ port: 3000 });\n * ```\n */\nfunction setupFastifyErrorHandler(fastify) {\n  const plugin = Object.assign(function (fastify, _options, done) {\n    fastify.addHook('onError', async (_request, _reply, error) => {\n      core.captureException(error);\n    });\n\n    // registering `onRequest` hook here instead of using Otel `onRequest` callback b/c `onRequest` hook\n    // is ironically called in the fastify `preHandler` hook which is called later in the lifecycle:\n    // https://fastify.dev/docs/latest/Reference/Lifecycle/\n    fastify.addHook('onRequest', async (request, _reply) => {\n      const reqWithRouteInfo = request;\n\n      // Taken from Otel Fastify instrumentation:\n      // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/main/plugins/node/opentelemetry-instrumentation-fastify/src/instrumentation.ts#L94-L96\n      const routeName = _optionalChain([reqWithRouteInfo, 'access', _ => _.routeOptions, 'optionalAccess', _2 => _2.url]) || reqWithRouteInfo.routerPath;\n      const method = _optionalChain([reqWithRouteInfo, 'access', _3 => _3.routeOptions, 'optionalAccess', _4 => _4.method]) || 'GET';\n      core.getIsolationScope().setTransactionName(`${method} ${routeName}`);\n    });\n    done();\n  }, {\n    [Symbol.for('skip-override')]: true,\n    [Symbol.for('fastify.display-name')]: 'sentry-fastify-error-handler'\n  });\n  fastify.register(plugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using fastify\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addFastifySpanAttributes(span);\n    });\n  }\n  ensureIsWrapped.ensureIsWrapped(fastify.addHook, 'fastify');\n}\nfunction addFastifySpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, request_handler\n  const type = attributes['fastify.type'];\n\n  // If this is already set, or we have no fastify span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.fastify',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.fastify`\n  });\n\n  // Also update the name, we don't need to \"middleware - \" prefix\n  const name = attributes['fastify.name'] || attributes['plugin.name'] || attributes['hook.name'];\n  if (typeof name === 'string') {\n    // Also remove `fastify -> ` prefix\n    span.updateName(name.replace(/^fastify -> /, ''));\n  }\n}\nexports.fastifyIntegration = fastifyIntegration;\nexports.instrumentFastify = instrumentFastify;\nexports.setupFastifyErrorHandler = setupFastifyErrorHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationGenericPool = __webpack_require__(/*! @opentelemetry/instrumentation-generic-pool */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-generic-pool/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst INTEGRATION_NAME = 'GenericPool';\nconst instrumentGenericPool = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationGenericPool.GenericPoolInstrumentation({}));\nconst _genericPoolIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentGenericPool();\n    },\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        const spanDescription = spanJSON.description;\n\n        // typo in emitted span for version <= 0.38.0 of @opentelemetry/instrumentation-generic-pool\n        const isGenericPoolSpan = spanDescription === 'generic-pool.aquire' || spanDescription === 'generic-pool.acquire';\n        if (isGenericPoolSpan) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.generic_pool');\n        }\n      });\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [generic-pool](https://www.npmjs.com/package/generic-pool) library.\n *\n * For more information, see the [`genericPoolIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/genericpool/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.genericPoolIntegration()],\n * });\n * ```\n */\nconst genericPoolIntegration = core.defineIntegration(_genericPoolIntegration);\nexports.genericPoolIntegration = genericPoolIntegration;\nexports.instrumentGenericPool = instrumentGenericPool;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvZ2VuZXJpY1Bvb2wuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQywwQkFBMEIsR0FBR0MsbUJBQU8sQ0FBQywrSUFBNkMsQ0FBQztBQUN6RixNQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsdUdBQTBCLENBQUM7QUFFdEQsTUFBTUcsZ0JBQWdCLEdBQUcsYUFBYTtBQUV0QyxNQUFNQyxxQkFBcUIsR0FBR0YsVUFBVSxDQUFDRyxzQkFBc0IsQ0FBQ0YsZ0JBQWdCLEVBQUUsTUFBTSxJQUFJSiwwQkFBMEIsQ0FBQ08sMEJBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV0SixNQUFNQyx1QkFBdUIsR0FBSUEsQ0FBQSxLQUFNO0VBQ3JDLE9BQU87SUFDTEMsSUFBSSxFQUFFTCxnQkFBZ0I7SUFDdEJNLFNBQVNBLENBQUEsRUFBRztNQUNWTCxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRE0sS0FBS0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ1pBLE1BQU0sQ0FBQ0MsRUFBRSxDQUFDLFdBQVcsRUFBRUMsSUFBSSxJQUFJO1FBQzdCLE1BQU1DLFFBQVEsR0FBR2IsSUFBSSxDQUFDYyxVQUFVLENBQUNGLElBQUksQ0FBQztRQUV0QyxNQUFNRyxlQUFlLEdBQUdGLFFBQVEsQ0FBQ0csV0FBVzs7UUFFNUM7UUFDQSxNQUFNQyxpQkFBaUIsR0FDckJGLGVBQWUsS0FBSyxxQkFBcUIsSUFBSUEsZUFBZSxLQUFLLHNCQUFzQjtRQUV6RixJQUFJRSxpQkFBaUIsRUFBRTtVQUNyQkwsSUFBSSxDQUFDTSxZQUFZLENBQUNsQixJQUFJLENBQUNtQixnQ0FBZ0MsRUFBRSwyQkFBMkIsQ0FBQztRQUN2RjtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLHNCQUFzQixHQUFHcEIsSUFBSSxDQUFDcUIsaUJBQWlCLENBQUNmLHVCQUF1QixDQUFDO0FBRTlFViw4QkFBOEIsR0FBR3dCLHNCQUFzQjtBQUN2RHhCLDZCQUE2QixHQUFHTyxxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9nZW5lcmljUG9vbC5qcz9iMTUwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbkdlbmVyaWNQb29sID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWdlbmVyaWMtcG9vbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0dlbmVyaWNQb29sJztcblxuY29uc3QgaW5zdHJ1bWVudEdlbmVyaWNQb29sID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKElOVEVHUkFUSU9OX05BTUUsICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25HZW5lcmljUG9vbC5HZW5lcmljUG9vbEluc3RydW1lbnRhdGlvbih7fSkpO1xuXG5jb25zdCBfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50R2VuZXJpY1Bvb2woKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcblxuICAgICAgICBjb25zdCBzcGFuRGVzY3JpcHRpb24gPSBzcGFuSlNPTi5kZXNjcmlwdGlvbjtcblxuICAgICAgICAvLyB0eXBvIGluIGVtaXR0ZWQgc3BhbiBmb3IgdmVyc2lvbiA8PSAwLjM4LjAgb2YgQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWdlbmVyaWMtcG9vbFxuICAgICAgICBjb25zdCBpc0dlbmVyaWNQb29sU3BhbiA9XG4gICAgICAgICAgc3BhbkRlc2NyaXB0aW9uID09PSAnZ2VuZXJpYy1wb29sLmFxdWlyZScgfHwgc3BhbkRlc2NyaXB0aW9uID09PSAnZ2VuZXJpYy1wb29sLmFjcXVpcmUnO1xuXG4gICAgICAgIGlmIChpc0dlbmVyaWNQb29sU3Bhbikge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwuZ2VuZXJpY19wb29sJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbZ2VuZXJpYy1wb29sXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9nZW5lcmljLXBvb2wpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BnZW5lcmljUG9vbEludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2dlbmVyaWNwb29sLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkuZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGdlbmVyaWNQb29sSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9nZW5lcmljUG9vbEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5nZW5lcmljUG9vbEludGVncmF0aW9uID0gZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5zdHJ1bWVudEdlbmVyaWNQb29sID0gaW5zdHJ1bWVudEdlbmVyaWNQb29sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXJpY1Bvb2wuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnN0cnVtZW50YXRpb25HZW5lcmljUG9vbCIsInJlcXVpcmUiLCJjb3JlIiwiaW5zdHJ1bWVudCIsIklOVEVHUkFUSU9OX05BTUUiLCJpbnN0cnVtZW50R2VuZXJpY1Bvb2wiLCJnZW5lcmF0ZUluc3RydW1lbnRPbmNlIiwiR2VuZXJpY1Bvb2xJbnN0cnVtZW50YXRpb24iLCJfZ2VuZXJpY1Bvb2xJbnRlZ3JhdGlvbiIsIm5hbWUiLCJzZXR1cE9uY2UiLCJzZXR1cCIsImNsaWVudCIsIm9uIiwic3BhbiIsInNwYW5KU09OIiwic3BhblRvSlNPTiIsInNwYW5EZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwiaXNHZW5lcmljUG9vbFNwYW4iLCJzZXRBdHRyaWJ1dGUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiIsImdlbmVyaWNQb29sSW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationGraphql = __webpack_require__(/*! @opentelemetry/instrumentation-graphql */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-graphql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst INTEGRATION_NAME = 'Graphql';\nconst instrumentGraphql = instrument.generateInstrumentOnce(INTEGRATION_NAME, (_options = {}) => {\n  const options = getOptionsWithDefaults(_options);\n  return new instrumentationGraphql.GraphQLInstrumentation({\n    ...options,\n    responseHook(span) {\n      addOriginToSpan.addOriginToSpan(span, 'auto.graphql.otel.graphql');\n      const attributes = core.spanToJSON(span).data || {};\n\n      // If operation.name is not set, we fall back to use operation.type only\n      const operationType = attributes['graphql.operation.type'];\n      const operationName = attributes['graphql.operation.name'];\n      if (options.useOperationNameForRootSpan && operationType) {\n        const rootSpan = core.getRootSpan(span);\n\n        // We guard to only do this on http.server spans\n\n        const rootSpanAttributes = core.spanToJSON(rootSpan).data || {};\n        const existingOperations = rootSpanAttributes[opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION] || [];\n        const newOperation = operationName ? `${operationType} ${operationName}` : `${operationType}`;\n\n        // We keep track of each operation on the root span\n        // This can either be a string, or an array of strings (if there are multiple operations)\n        if (Array.isArray(existingOperations)) {\n          existingOperations.push(newOperation);\n          rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, existingOperations);\n        } else if (existingOperations) {\n          rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, [existingOperations, newOperation]);\n        } else {\n          rootSpan.setAttribute(opentelemetry.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, newOperation);\n        }\n      }\n    }\n  });\n});\nconst _graphqlIntegration = (options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // We set defaults here, too, because otherwise we'd update the instrumentation config\n      // to the config without defaults, as `generateInstrumentOnce` automatically calls `setConfig(options)`\n      // when being called the second time\n      instrumentGraphql(getOptionsWithDefaults(options));\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [graphql](https://www.npmjs.com/package/graphql) library.\n *\n * For more information, see the [`graphqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/graphql/).\n *\n * @param {GraphqlOptions} options Configuration options for the GraphQL integration.\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.graphqlIntegration()],\n * });\n */\nconst graphqlIntegration = core.defineIntegration(_graphqlIntegration);\nfunction getOptionsWithDefaults(options) {\n  return {\n    ignoreResolveSpans: true,\n    ignoreTrivialResolveSpans: true,\n    useOperationNameForRootSpan: true,\n    ...options\n  };\n}\nexports.graphqlIntegration = graphqlIntegration;\nexports.instrumentGraphql = instrumentGraphql;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationHapi = __webpack_require__(/*! @opentelemetry/instrumentation-hapi */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-hapi/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../../utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\nconst INTEGRATION_NAME = 'Hapi';\nconst instrumentHapi = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationHapi.HapiInstrumentation());\nconst _hapiIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentHapi();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for [Hapi](https://hapi.dev/).\n *\n * If you also want to capture errors, you need to call `setupHapiErrorHandler(server)` after you set up your server.\n *\n * For more information, see the [hapi documentation](https://docs.sentry.io/platforms/javascript/guides/hapi/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.hapiIntegration()],\n * })\n * ```\n */\nconst hapiIntegration = core.defineIntegration(_hapiIntegration);\nfunction isErrorEvent(event) {\n  return event && event.error !== undefined;\n}\nfunction sendErrorToSentry(errorData) {\n  core.captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin'\n      }\n    }\n  });\n}\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: core.SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg;\n    server.events.on({\n      name: 'request',\n      channels: ['error']\n    }, (request, event) => {\n      if (core.getIsolationScope() !== core.getDefaultIsolationScope()) {\n        const route = request.route;\n        if (route && route.path) {\n          core.getIsolationScope().setTransactionName(`${_optionalChain([route, 'access', _ => _.method, 'optionalAccess', _2 => _2.toUpperCase, 'call', _3 => _3()]) || 'GET'} ${route.path}`);\n        }\n      } else {\n        debugBuild.DEBUG_BUILD && core.logger.warn('Isolation scope is still the default isolation scope - skipping setting transactionName');\n      }\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n    });\n  }\n};\n\n/**\n * Add a Hapi plugin to capture errors to Sentry.\n *\n * @param server The Hapi server to attach the error handler to\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Hapi = require('@hapi/hapi');\n *\n * const init = async () => {\n *   const server = Hapi.server();\n *\n *   // all your routes here\n *\n *   await Sentry.setupHapiErrorHandler(server);\n *\n *   await server.start();\n * };\n * ```\n */\nasync function setupHapiErrorHandler(server) {\n  await server.register(hapiErrorPlugin);\n\n  // Sadly, middleware spans do not go through `requestHook`, so we handle those here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using hapi\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addHapiSpanAttributes(span);\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  ensureIsWrapped.ensureIsWrapped(server.register, 'hapi');\n}\nfunction addHapiSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: router, plugin, server.ext\n  const type = attributes['hapi.type'];\n\n  // If this is already set, or we have no Hapi span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.hapi',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.hapi`\n  });\n}\nexports.hapiErrorPlugin = hapiErrorPlugin;\nexports.hapiIntegration = hapiIntegration;\nexports.instrumentHapi = instrumentHapi;\nexports.setupHapiErrorHandler = setupHapiErrorHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst index$2 = __webpack_require__(/*! ../http/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst amqplib = __webpack_require__(/*! ./amqplib.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/amqplib.js\");\nconst connect = __webpack_require__(/*! ./connect.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/connect.js\");\nconst express = __webpack_require__(/*! ./express.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/express.js\");\nconst fastify = __webpack_require__(/*! ./fastify.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/fastify.js\");\nconst genericPool = __webpack_require__(/*! ./genericPool.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/genericPool.js\");\nconst graphql = __webpack_require__(/*! ./graphql.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/graphql.js\");\nconst index = __webpack_require__(/*! ./hapi/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/hapi/index.js\");\nconst kafka = __webpack_require__(/*! ./kafka.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\");\nconst koa = __webpack_require__(/*! ./koa.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\");\nconst lrumemoizer = __webpack_require__(/*! ./lrumemoizer.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\");\nconst mongo = __webpack_require__(/*! ./mongo.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\");\nconst mongoose = __webpack_require__(/*! ./mongoose.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\");\nconst mysql = __webpack_require__(/*! ./mysql.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\");\nconst mysql2 = __webpack_require__(/*! ./mysql2.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\");\nconst nest = __webpack_require__(/*! ./nest/nest.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\");\nconst postgres = __webpack_require__(/*! ./postgres.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\");\nconst redis = __webpack_require__(/*! ./redis.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\");\nconst tedious = __webpack_require__(/*! ./tedious.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\");\nconst index$1 = __webpack_require__(/*! ./vercelai/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\");\n\n/**\n * With OTEL, all performance integrations will be added, as OTEL only initializes them when the patched package is actually required.\n */\nfunction getAutoPerformanceIntegrations() {\n  return [express.expressIntegration(), fastify.fastifyIntegration(), graphql.graphqlIntegration(), mongo.mongoIntegration(), mongoose.mongooseIntegration(), mysql.mysqlIntegration(), mysql2.mysql2Integration(), redis.redisIntegration(), postgres.postgresIntegration(),\n  // For now, we do not include prisma by default because it has ESM issues\n  // See https://github.com/prisma/prisma/issues/23410\n  // TODO v8: Figure out a better solution for this, maybe only disable in ESM mode?\n  // prismaIntegration(),\n  // eslint-disable-next-line deprecation/deprecation\n  nest.nestIntegration(), index.hapiIntegration(), koa.koaIntegration(), connect.connectIntegration(), tedious.tediousIntegration(), genericPool.genericPoolIntegration(), kafka.kafkaIntegration(), amqplib.amqplibIntegration(), lrumemoizer.lruMemoizerIntegration(), index$1.vercelAIIntegration()];\n}\n\n/**\n * Get a list of methods to instrument OTEL, when preload instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getOpenTelemetryInstrumentationToPreload() {\n  return [index$2.instrumentOtelHttp, express.instrumentExpress, connect.instrumentConnect, fastify.instrumentFastify, index.instrumentHapi, kafka.instrumentKafka, koa.instrumentKoa, lrumemoizer.instrumentLruMemoizer,\n  // eslint-disable-next-line deprecation/deprecation\n  nest.instrumentNest, mongo.instrumentMongo, mongoose.instrumentMongoose, mysql.instrumentMysql, mysql2.instrumentMysql2, postgres.instrumentPostgres, index.instrumentHapi, graphql.instrumentGraphql, redis.instrumentRedis, tedious.instrumentTedious, genericPool.instrumentGenericPool, amqplib.instrumentAmqplib, index$1.instrumentVercelAi];\n}\nexports.getAutoPerformanceIntegrations = getAutoPerformanceIntegrations;\nexports.getOpenTelemetryInstrumentationToPreload = getOpenTelemetryInstrumentationToPreload;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationKafkajs = __webpack_require__(/*! @opentelemetry/instrumentation-kafkajs */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-kafkajs/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst INTEGRATION_NAME = 'Kafka';\nconst instrumentKafka = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationKafkajs.KafkaJsInstrumentation({\n  consumerHook(span) {\n    addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.consumer');\n  },\n  producerHook(span) {\n    addOriginToSpan.addOriginToSpan(span, 'auto.kafkajs.otel.producer');\n  }\n}));\nconst _kafkaIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKafka();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [kafkajs](https://www.npmjs.com/package/kafkajs) library.\n *\n * For more information, see the [`kafkaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/kafka/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.kafkaIntegration()],\n * });\n */\nconst kafkaIntegration = core.defineIntegration(_kafkaIntegration);\nexports.instrumentKafka = instrumentKafka;\nexports.kafkaIntegration = kafkaIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva2Fma2EuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxzQkFBc0IsR0FBR0MsbUJBQU8sQ0FBQyxxSUFBd0MsQ0FBQztBQUNoRixNQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsdUdBQTBCLENBQUM7QUFDdEQsTUFBTUcsZUFBZSxHQUFHSCxtQkFBTyxDQUFDLG1IQUFnQyxDQUFDO0FBRWpFLE1BQU1JLGdCQUFnQixHQUFHLE9BQU87QUFFaEMsTUFBTUMsZUFBZSxHQUFHSCxVQUFVLENBQUNJLHNCQUFzQixDQUN2REYsZ0JBQWdCLEVBQ2hCLE1BQ0UsSUFBSUwsc0JBQXNCLENBQUNRLHNCQUFzQixDQUFDO0VBQ2hEQyxZQUFZQSxDQUFDQyxJQUFJLEVBQUU7SUFDakJOLGVBQWUsQ0FBQ0EsZUFBZSxDQUFDTSxJQUFJLEVBQUUsNEJBQTRCLENBQUM7RUFDckUsQ0FBQztFQUNEQyxZQUFZQSxDQUFDRCxJQUFJLEVBQUU7SUFDakJOLGVBQWUsQ0FBQ0EsZUFBZSxDQUFDTSxJQUFJLEVBQUUsNEJBQTRCLENBQUM7RUFDckU7QUFDRixDQUFDLENBQ0wsQ0FBQztBQUVELE1BQU1FLGlCQUFpQixHQUFJQSxDQUFBLEtBQU07RUFDL0IsT0FBTztJQUNMQyxJQUFJLEVBQUVSLGdCQUFnQjtJQUN0QlMsU0FBU0EsQ0FBQSxFQUFHO01BQ1ZSLGVBQWUsQ0FBQyxDQUFDO0lBQ25CO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNUyxnQkFBZ0IsR0FBR2IsSUFBSSxDQUFDYyxpQkFBaUIsQ0FBQ0osaUJBQWlCLENBQUM7QUFFbEVkLHVCQUF1QixHQUFHUSxlQUFlO0FBQ3pDUix3QkFBd0IsR0FBR2lCLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2thZmthLmpzPzgyMjMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uS2Fma2FqcyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1rYWZrYWpzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBhZGRPcmlnaW5Ub1NwYW4gPSByZXF1aXJlKCcuLi8uLi91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdLYWZrYSc7XG5cbmNvbnN0IGluc3RydW1lbnRLYWZrYSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgSU5URUdSQVRJT05fTkFNRSxcbiAgKCkgPT5cbiAgICBuZXcgaW5zdHJ1bWVudGF0aW9uS2Fma2Fqcy5LYWZrYUpzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIGNvbnN1bWVySG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8ua2Fma2Fqcy5vdGVsLmNvbnN1bWVyJyk7XG4gICAgICB9LFxuICAgICAgcHJvZHVjZXJIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5rYWZrYWpzLm90ZWwucHJvZHVjZXInKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfa2Fma2FJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50S2Fma2EoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2thZmthanNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL2thZmthanMpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BrYWZrYUludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL2thZmthLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkua2Fma2FJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICovXG5jb25zdCBrYWZrYUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfa2Fma2FJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudEthZmthID0gaW5zdHJ1bWVudEthZmthO1xuZXhwb3J0cy5rYWZrYUludGVncmF0aW9uID0ga2Fma2FJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWthZmthLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW5zdHJ1bWVudGF0aW9uS2Fma2FqcyIsInJlcXVpcmUiLCJjb3JlIiwiaW5zdHJ1bWVudCIsImFkZE9yaWdpblRvU3BhbiIsIklOVEVHUkFUSU9OX05BTUUiLCJpbnN0cnVtZW50S2Fma2EiLCJnZW5lcmF0ZUluc3RydW1lbnRPbmNlIiwiS2Fma2FKc0luc3RydW1lbnRhdGlvbiIsImNvbnN1bWVySG9vayIsInNwYW4iLCJwcm9kdWNlckhvb2siLCJfa2Fma2FJbnRlZ3JhdGlvbiIsIm5hbWUiLCJzZXR1cE9uY2UiLCJrYWZrYUludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/kafka.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationKnex = __webpack_require__(/*! @opentelemetry/instrumentation-knex */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-knex/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst INTEGRATION_NAME = 'Knex';\nconst instrumentKnex = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationKnex.KnexInstrumentation({\n  requireParentSpan: true\n}));\nconst _knexIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKnex();\n    },\n    setup(client) {\n      client.on('spanStart', span => {\n        const {\n          data\n        } = core.spanToJSON(span);\n        // knex.version is always set in the span data\n        // https://github.com/open-telemetry/opentelemetry-js-contrib/blob/0309caeafc44ac9cb13a3345b790b01b76d0497d/plugins/node/opentelemetry-instrumentation-knex/src/instrumentation.ts#L138\n        if (data && 'knex.version' in data) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.knex');\n        }\n      });\n    }\n  };\n};\n\n/**\n * Knex integration\n *\n * Capture tracing data for [Knex](https://knexjs.org/).\n *\n * @example\n * ```javascript\n * import * as Sentry from '@sentry/node';\n *\n * Sentry.init({\n *  integrations: [Sentry.knexIntegration()],\n * });\n * ```\n */\nconst knexIntegration = core.defineIntegration(_knexIntegration);\nexports.instrumentKnex = instrumentKnex;\nexports.knexIntegration = knexIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcva25leC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLG1CQUFtQixHQUFHQyxtQkFBTyxDQUFDLCtIQUFxQyxDQUFDO0FBQzFFLE1BQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBQ3BDLE1BQU1FLFVBQVUsR0FBR0YsbUJBQU8sQ0FBQyx1R0FBMEIsQ0FBQztBQUV0RCxNQUFNRyxnQkFBZ0IsR0FBRyxNQUFNO0FBRS9CLE1BQU1DLGNBQWMsR0FBR0YsVUFBVSxDQUFDRyxzQkFBc0IsQ0FDdERGLGdCQUFnQixFQUNoQixNQUFNLElBQUlKLG1CQUFtQixDQUFDTyxtQkFBbUIsQ0FBQztFQUFFQyxpQkFBaUIsRUFBRTtBQUFLLENBQUMsQ0FDL0UsQ0FBQztBQUVELE1BQU1DLGdCQUFnQixHQUFJQSxDQUFBLEtBQU07RUFDOUIsT0FBTztJQUNMQyxJQUFJLEVBQUVOLGdCQUFnQjtJQUN0Qk8sU0FBU0EsQ0FBQSxFQUFHO01BQ1ZOLGNBQWMsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRE8sS0FBS0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ1pBLE1BQU0sQ0FBQ0MsRUFBRSxDQUFDLFdBQVcsRUFBRUMsSUFBSSxJQUFJO1FBQzdCLE1BQU07VUFBRUM7UUFBSyxDQUFDLEdBQUdkLElBQUksQ0FBQ2UsVUFBVSxDQUFDRixJQUFJLENBQUM7UUFDdEM7UUFDQTtRQUNBLElBQUlDLElBQUksSUFBSSxjQUFjLElBQUlBLElBQUksRUFBRTtVQUNsQ0QsSUFBSSxDQUFDRyxZQUFZLENBQUNoQixJQUFJLENBQUNpQixnQ0FBZ0MsRUFBRSxtQkFBbUIsQ0FBQztRQUMvRTtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGVBQWUsR0FBR2xCLElBQUksQ0FBQ21CLGlCQUFpQixDQUFDWixnQkFBZ0IsQ0FBQztBQUVoRVgsc0JBQXNCLEdBQUdPLGNBQWM7QUFDdkNQLHVCQUF1QixHQUFHc0IsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2tuZXguanM/YjJjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25LbmV4ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWtuZXgnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdLbmV4JztcblxuY29uc3QgaW5zdHJ1bWVudEtuZXggPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+IG5ldyBpbnN0cnVtZW50YXRpb25LbmV4LktuZXhJbnN0cnVtZW50YXRpb24oeyByZXF1aXJlUGFyZW50U3BhbjogdHJ1ZSB9KSxcbik7XG5cbmNvbnN0IF9rbmV4SW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudEtuZXgoKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgLy8ga25leC52ZXJzaW9uIGlzIGFsd2F5cyBzZXQgaW4gdGhlIHNwYW4gZGF0YVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy1jb250cmliL2Jsb2IvMDMwOWNhZWFmYzQ0YWM5Y2IxM2EzMzQ1Yjc5MGIwMWI3NmQwNDk3ZC9wbHVnaW5zL25vZGUvb3BlbnRlbGVtZXRyeS1pbnN0cnVtZW50YXRpb24ta25leC9zcmMvaW5zdHJ1bWVudGF0aW9uLnRzI0wxMzhcbiAgICAgICAgaWYgKGRhdGEgJiYgJ2tuZXgudmVyc2lvbicgaW4gZGF0YSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwua25leCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEtuZXggaW50ZWdyYXRpb25cbiAqXG4gKiBDYXB0dXJlIHRyYWNpbmcgZGF0YSBmb3IgW0tuZXhdKGh0dHBzOi8va25leGpzLm9yZy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmtuZXhJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IGtuZXhJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2tuZXhJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudEtuZXggPSBpbnN0cnVtZW50S25leDtcbmV4cG9ydHMua25leEludGVncmF0aW9uID0ga25leEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a25leC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluc3RydW1lbnRhdGlvbktuZXgiLCJyZXF1aXJlIiwiY29yZSIsImluc3RydW1lbnQiLCJJTlRFR1JBVElPTl9OQU1FIiwiaW5zdHJ1bWVudEtuZXgiLCJnZW5lcmF0ZUluc3RydW1lbnRPbmNlIiwiS25leEluc3RydW1lbnRhdGlvbiIsInJlcXVpcmVQYXJlbnRTcGFuIiwiX2tuZXhJbnRlZ3JhdGlvbiIsIm5hbWUiLCJzZXR1cE9uY2UiLCJzZXR1cCIsImNsaWVudCIsIm9uIiwic3BhbiIsImRhdGEiLCJzcGFuVG9KU09OIiwic2V0QXR0cmlidXRlIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4iLCJrbmV4SW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/knex.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationKoa = __webpack_require__(/*! @opentelemetry/instrumentation-koa */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-koa/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ../../utils/ensureIsWrapped.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\");\nconst INTEGRATION_NAME = 'Koa';\nconst instrumentKoa = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationKoa.KoaInstrumentation({\n  requestHook(span, info) {\n    addKoaSpanAttributes(span);\n    if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n      debugBuild.DEBUG_BUILD && core.logger.warn('Isolation scope is default isolation scope - skipping setting transactionName');\n      return;\n    }\n    const attributes = core.spanToJSON(span).data;\n    const route = attributes && attributes[semanticConventions.ATTR_HTTP_ROUTE];\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const method = _optionalChain([info, 'optionalAccess', _ => _.context, 'optionalAccess', _2 => _2.request, 'optionalAccess', _3 => _3.method, 'optionalAccess', _4 => _4.toUpperCase, 'call', _5 => _5()]) || 'GET';\n    if (route) {\n      core.getIsolationScope().setTransactionName(`${method} ${route}`);\n    }\n  }\n}));\nconst _koaIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentKoa();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for [Koa](https://koajs.com/).\n *\n * If you also want to capture errors, you need to call `setupKoaErrorHandler(app)` after you set up your Koa server.\n *\n * For more information, see the [koa documentation](https://docs.sentry.io/platforms/javascript/guides/koa/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *   integrations: [Sentry.koaIntegration()],\n * })\n * ```\n */\nconst koaIntegration = core.defineIntegration(_koaIntegration);\n\n/**\n * Add an Koa error handler to capture errors to Sentry.\n *\n * The error handler must be before any other middleware and after all controllers.\n *\n * @param app The Express instances\n * @param options {ExpressHandlerOptions} Configuration options for the handler\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n * const Koa = require(\"koa\");\n *\n * const app = new Koa();\n *\n * Sentry.setupKoaErrorHandler(app);\n *\n * // Add your routes, etc.\n *\n * app.listen(3000);\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst setupKoaErrorHandler = app => {\n  app.use(async (ctx, next) => {\n    try {\n      await next();\n    } catch (error) {\n      core.captureException(error);\n      throw error;\n    }\n  });\n  ensureIsWrapped.ensureIsWrapped(app.use, 'koa');\n};\nfunction addKoaSpanAttributes(span) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.http.otel.koa');\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: middleware, router\n  const type = attributes['koa.type'];\n  if (type) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, `${type}.koa`);\n  }\n\n  // Also update the name\n  const name = attributes['koa.name'];\n  if (typeof name === 'string') {\n    // Somehow, name is sometimes `''` for middleware spans\n    // See: https://github.com/open-telemetry/opentelemetry-js-contrib/issues/2220\n    span.updateName(name || '< unknown >');\n  }\n}\nexports.instrumentKoa = instrumentKoa;\nexports.koaIntegration = koaIntegration;\nexports.setupKoaErrorHandler = setupKoaErrorHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/koa.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationLruMemoizer = __webpack_require__(/*! @opentelemetry/instrumentation-lru-memoizer */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-lru-memoizer/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst INTEGRATION_NAME = 'LruMemoizer';\nconst instrumentLruMemoizer = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationLruMemoizer.LruMemoizerInstrumentation());\nconst _lruMemoizerIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentLruMemoizer();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [lru-memoizer](https://www.npmjs.com/package/lru-memoizer) library.\n *\n * For more information, see the [`lruMemoizerIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/lrumemoizer/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.lruMemoizerIntegration()],\n * });\n */\nconst lruMemoizerIntegration = core.defineIntegration(_lruMemoizerIntegration);\nexports.instrumentLruMemoizer = instrumentLruMemoizer;\nexports.lruMemoizerIntegration = lruMemoizerIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbHJ1bWVtb2l6ZXIuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQywwQkFBMEIsR0FBR0MsbUJBQU8sQ0FBQywrSUFBNkMsQ0FBQztBQUN6RixNQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsdUdBQTBCLENBQUM7QUFFdEQsTUFBTUcsZ0JBQWdCLEdBQUcsYUFBYTtBQUV0QyxNQUFNQyxxQkFBcUIsR0FBR0YsVUFBVSxDQUFDRyxzQkFBc0IsQ0FBQ0YsZ0JBQWdCLEVBQUUsTUFBTSxJQUFJSiwwQkFBMEIsQ0FBQ08sMEJBQTBCLENBQUMsQ0FBQyxDQUFDO0FBRXBKLE1BQU1DLHVCQUF1QixHQUFJQSxDQUFBLEtBQU07RUFDckMsT0FBTztJQUNMQyxJQUFJLEVBQUVMLGdCQUFnQjtJQUN0Qk0sU0FBU0EsQ0FBQSxFQUFHO01BQ1ZMLHFCQUFxQixDQUFDLENBQUM7SUFDekI7RUFDRixDQUFDO0FBQ0gsQ0FBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1NLHNCQUFzQixHQUFHVCxJQUFJLENBQUNVLGlCQUFpQixDQUFDSix1QkFBdUIsQ0FBQztBQUU5RVYsNkJBQTZCLEdBQUdPLHFCQUFxQjtBQUNyRFAsOEJBQThCLEdBQUdhLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL2xydW1lbW9pemVyLmpzPzdmYWYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTHJ1TWVtb2l6ZXIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbHJ1LW1lbW9pemVyJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTHJ1TWVtb2l6ZXInO1xuXG5jb25zdCBpbnN0cnVtZW50THJ1TWVtb2l6ZXIgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoSU5URUdSQVRJT05fTkFNRSwgKCkgPT4gbmV3IGluc3RydW1lbnRhdGlvbkxydU1lbW9pemVyLkxydU1lbW9pemVySW5zdHJ1bWVudGF0aW9uKCkpO1xuXG5jb25zdCBfbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50THJ1TWVtb2l6ZXIoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW2xydS1tZW1vaXplcl0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbHJ1LW1lbW9pemVyKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9scnVtZW1vaXplci8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LmxydU1lbW9pemVySW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqL1xuY29uc3QgbHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX2xydU1lbW9pemVySW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRMcnVNZW1vaXplciA9IGluc3RydW1lbnRMcnVNZW1vaXplcjtcbmV4cG9ydHMubHJ1TWVtb2l6ZXJJbnRlZ3JhdGlvbiA9IGxydU1lbW9pemVySW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1scnVtZW1vaXplci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluc3RydW1lbnRhdGlvbkxydU1lbW9pemVyIiwicmVxdWlyZSIsImNvcmUiLCJpbnN0cnVtZW50IiwiSU5URUdSQVRJT05fTkFNRSIsImluc3RydW1lbnRMcnVNZW1vaXplciIsImdlbmVyYXRlSW5zdHJ1bWVudE9uY2UiLCJMcnVNZW1vaXplckluc3RydW1lbnRhdGlvbiIsIl9scnVNZW1vaXplckludGVncmF0aW9uIiwibmFtZSIsInNldHVwT25jZSIsImxydU1lbW9pemVySW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/lrumemoizer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationMongodb = __webpack_require__(/*! @opentelemetry/instrumentation-mongodb */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst INTEGRATION_NAME = 'Mongo';\nconst instrumentMongo = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMongodb.MongoDBInstrumentation({\n  dbStatementSerializer: _defaultDbStatementSerializer,\n  responseHook(span) {\n    addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongo');\n  }\n}));\n\n/**\n * Replaces values in document with '?', hiding PII and helping grouping.\n */\nfunction _defaultDbStatementSerializer(commandObj) {\n  const resultObj = _scrubStatement(commandObj);\n  return JSON.stringify(resultObj);\n}\nfunction _scrubStatement(value) {\n  if (Array.isArray(value)) {\n    return value.map(element => _scrubStatement(element));\n  }\n  if (isCommandObj(value)) {\n    const initial = {};\n    return Object.entries(value).map(([key, element]) => [key, _scrubStatement(element)]).reduce((prev, current) => {\n      if (isCommandEntry(current)) {\n        prev[current[0]] = current[1];\n      }\n      return prev;\n    }, initial);\n  }\n\n  // A value like string or number, possible contains PII, scrub it\n  return '?';\n}\nfunction isCommandObj(value) {\n  return typeof value === 'object' && value !== null && !isBuffer(value);\n}\nfunction isBuffer(value) {\n  let isBuffer = false;\n  if (typeof Buffer !== 'undefined') {\n    isBuffer = Buffer.isBuffer(value);\n  }\n  return isBuffer;\n}\nfunction isCommandEntry(value) {\n  return Array.isArray(value);\n}\nconst _mongoIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongo();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [mongodb](https://www.npmjs.com/package/mongodb) library.\n *\n * For more information, see the [`mongoIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongo/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongoIntegration()],\n * });\n * ```\n */\nconst mongoIntegration = core.defineIntegration(_mongoIntegration);\nexports._defaultDbStatementSerializer = _defaultDbStatementSerializer;\nexports.instrumentMongo = instrumentMongo;\nexports.mongoIntegration = mongoIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ28uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxzQkFBc0IsR0FBR0MsbUJBQU8sQ0FBQyxxSUFBd0MsQ0FBQztBQUNoRixNQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsdUdBQTBCLENBQUM7QUFDdEQsTUFBTUcsZUFBZSxHQUFHSCxtQkFBTyxDQUFDLG1IQUFnQyxDQUFDO0FBRWpFLE1BQU1JLGdCQUFnQixHQUFHLE9BQU87QUFFaEMsTUFBTUMsZUFBZSxHQUFHSCxVQUFVLENBQUNJLHNCQUFzQixDQUN2REYsZ0JBQWdCLEVBQ2hCLE1BQ0UsSUFBSUwsc0JBQXNCLENBQUNRLHNCQUFzQixDQUFDO0VBQ2hEQyxxQkFBcUIsRUFBRUMsNkJBQTZCO0VBQ3BEQyxZQUFZQSxDQUFDQyxJQUFJLEVBQUU7SUFDakJSLGVBQWUsQ0FBQ0EsZUFBZSxDQUFDUSxJQUFJLEVBQUUsb0JBQW9CLENBQUM7RUFDN0Q7QUFDRixDQUFDLENBQ0wsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxTQUFTRiw2QkFBNkJBLENBQUNHLFVBQVUsRUFBRTtFQUNqRCxNQUFNQyxTQUFTLEdBQUdDLGVBQWUsQ0FBQ0YsVUFBVSxDQUFDO0VBQzdDLE9BQU9HLElBQUksQ0FBQ0MsU0FBUyxDQUFDSCxTQUFTLENBQUM7QUFDbEM7QUFFQSxTQUFTQyxlQUFlQSxDQUFDaEIsS0FBSyxFQUFFO0VBQzlCLElBQUltQixLQUFLLENBQUNDLE9BQU8sQ0FBQ3BCLEtBQUssQ0FBQyxFQUFFO0lBQ3hCLE9BQU9BLEtBQUssQ0FBQ3FCLEdBQUcsQ0FBQ0MsT0FBTyxJQUFJTixlQUFlLENBQUNNLE9BQU8sQ0FBQyxDQUFDO0VBQ3ZEO0VBRUEsSUFBSUMsWUFBWSxDQUFDdkIsS0FBSyxDQUFDLEVBQUU7SUFDdkIsTUFBTXdCLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDbEIsT0FBTzNCLE1BQU0sQ0FBQzRCLE9BQU8sQ0FBQ3pCLEtBQUssQ0FBQyxDQUN6QnFCLEdBQUcsQ0FBQyxDQUFDLENBQUNLLEdBQUcsRUFBRUosT0FBTyxDQUFDLEtBQUssQ0FBQ0ksR0FBRyxFQUFFVixlQUFlLENBQUNNLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDeERLLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sS0FBSztNQUN6QixJQUFJQyxjQUFjLENBQUNELE9BQU8sQ0FBQyxFQUFFO1FBQzNCRCxJQUFJLENBQUNDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHQSxPQUFPLENBQUMsQ0FBQyxDQUFDO01BQy9CO01BQ0EsT0FBT0QsSUFBSTtJQUNiLENBQUMsRUFBRUosT0FBTyxDQUFDO0VBQ2Y7O0VBRUE7RUFDQSxPQUFPLEdBQUc7QUFDWjtBQUVBLFNBQVNELFlBQVlBLENBQUN2QixLQUFLLEVBQUU7RUFDM0IsT0FBTyxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUFJQSxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMrQixRQUFRLENBQUMvQixLQUFLLENBQUM7QUFDeEU7QUFFQSxTQUFTK0IsUUFBUUEsQ0FBQy9CLEtBQUssRUFBRTtFQUN2QixJQUFJK0IsUUFBUSxHQUFHLEtBQUs7RUFDcEIsSUFBSSxPQUFPQyxNQUFNLEtBQUssV0FBVyxFQUFFO0lBQ2pDRCxRQUFRLEdBQUdDLE1BQU0sQ0FBQ0QsUUFBUSxDQUFDL0IsS0FBSyxDQUFDO0VBQ25DO0VBQ0EsT0FBTytCLFFBQVE7QUFDakI7QUFFQSxTQUFTRCxjQUFjQSxDQUFDOUIsS0FBSyxFQUFFO0VBQzdCLE9BQU9tQixLQUFLLENBQUNDLE9BQU8sQ0FBQ3BCLEtBQUssQ0FBQztBQUM3QjtBQUVBLE1BQU1pQyxpQkFBaUIsR0FBSUEsQ0FBQSxLQUFNO0VBQy9CLE9BQU87SUFDTEMsSUFBSSxFQUFFNUIsZ0JBQWdCO0lBQ3RCNkIsU0FBU0EsQ0FBQSxFQUFHO01BQ1Y1QixlQUFlLENBQUMsQ0FBQztJQUNuQjtFQUNGLENBQUM7QUFDSCxDQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNNkIsZ0JBQWdCLEdBQUdqQyxJQUFJLENBQUNrQyxpQkFBaUIsQ0FBQ0osaUJBQWlCLENBQUM7QUFFbEVsQyxxQ0FBcUMsR0FBR1ksNkJBQTZCO0FBQ3JFWix1QkFBdUIsR0FBR1EsZUFBZTtBQUN6Q1Isd0JBQXdCLEdBQUdxQyxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9tb25nby5qcz9lMjc5Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk1vbmdvZGIgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29kYicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTW9uZ28nO1xuXG5jb25zdCBpbnN0cnVtZW50TW9uZ28gPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk1vbmdvZGIuTW9uZ29EQkluc3RydW1lbnRhdGlvbih7XG4gICAgICBkYlN0YXRlbWVudFNlcmlhbGl6ZXI6IF9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyLFxuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm1vbmdvJyk7XG4gICAgICB9LFxuICAgIH0pLFxuKTtcblxuLyoqXG4gKiBSZXBsYWNlcyB2YWx1ZXMgaW4gZG9jdW1lbnQgd2l0aCAnPycsIGhpZGluZyBQSUkgYW5kIGhlbHBpbmcgZ3JvdXBpbmcuXG4gKi9cbmZ1bmN0aW9uIF9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyKGNvbW1hbmRPYmopIHtcbiAgY29uc3QgcmVzdWx0T2JqID0gX3NjcnViU3RhdGVtZW50KGNvbW1hbmRPYmopO1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0T2JqKTtcbn1cblxuZnVuY3Rpb24gX3NjcnViU3RhdGVtZW50KHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoZWxlbWVudCA9PiBfc2NydWJTdGF0ZW1lbnQoZWxlbWVudCkpO1xuICB9XG5cbiAgaWYgKGlzQ29tbWFuZE9iaih2YWx1ZSkpIHtcbiAgICBjb25zdCBpbml0aWFsID0ge307XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHZhbHVlKVxuICAgICAgLm1hcCgoW2tleSwgZWxlbWVudF0pID0+IFtrZXksIF9zY3J1YlN0YXRlbWVudChlbGVtZW50KV0pXG4gICAgICAucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiB7XG4gICAgICAgIGlmIChpc0NvbW1hbmRFbnRyeShjdXJyZW50KSkge1xuICAgICAgICAgIHByZXZbY3VycmVudFswXV0gPSBjdXJyZW50WzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgfSwgaW5pdGlhbCk7XG4gIH1cblxuICAvLyBBIHZhbHVlIGxpa2Ugc3RyaW5nIG9yIG51bWJlciwgcG9zc2libGUgY29udGFpbnMgUElJLCBzY3J1YiBpdFxuICByZXR1cm4gJz8nO1xufVxuXG5mdW5jdGlvbiBpc0NvbW1hbmRPYmoodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgIWlzQnVmZmVyKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIodmFsdWUpIHtcbiAgbGV0IGlzQnVmZmVyID0gZmFsc2U7XG4gIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gaXNCdWZmZXI7XG59XG5cbmZ1bmN0aW9uIGlzQ29tbWFuZEVudHJ5KHZhbHVlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cblxuY29uc3QgX21vbmdvSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE1vbmdvKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFttb25nb2RiXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9tb25nb2RiKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbW9uZ29JbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9tb25nby8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm1vbmdvSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBtb25nb0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbW9uZ29JbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuX2RlZmF1bHREYlN0YXRlbWVudFNlcmlhbGl6ZXIgPSBfZGVmYXVsdERiU3RhdGVtZW50U2VyaWFsaXplcjtcbmV4cG9ydHMuaW5zdHJ1bWVudE1vbmdvID0gaW5zdHJ1bWVudE1vbmdvO1xuZXhwb3J0cy5tb25nb0ludGVncmF0aW9uID0gbW9uZ29JbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW5zdHJ1bWVudGF0aW9uTW9uZ29kYiIsInJlcXVpcmUiLCJjb3JlIiwiaW5zdHJ1bWVudCIsImFkZE9yaWdpblRvU3BhbiIsIklOVEVHUkFUSU9OX05BTUUiLCJpbnN0cnVtZW50TW9uZ28iLCJnZW5lcmF0ZUluc3RydW1lbnRPbmNlIiwiTW9uZ29EQkluc3RydW1lbnRhdGlvbiIsImRiU3RhdGVtZW50U2VyaWFsaXplciIsIl9kZWZhdWx0RGJTdGF0ZW1lbnRTZXJpYWxpemVyIiwicmVzcG9uc2VIb29rIiwic3BhbiIsImNvbW1hbmRPYmoiLCJyZXN1bHRPYmoiLCJfc2NydWJTdGF0ZW1lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiZWxlbWVudCIsImlzQ29tbWFuZE9iaiIsImluaXRpYWwiLCJlbnRyaWVzIiwia2V5IiwicmVkdWNlIiwicHJldiIsImN1cnJlbnQiLCJpc0NvbW1hbmRFbnRyeSIsImlzQnVmZmVyIiwiQnVmZmVyIiwiX21vbmdvSW50ZWdyYXRpb24iLCJuYW1lIiwic2V0dXBPbmNlIiwibW9uZ29JbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongo.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationMongoose = __webpack_require__(/*! @opentelemetry/instrumentation-mongoose */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mongoose/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst INTEGRATION_NAME = 'Mongoose';\nconst instrumentMongoose = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMongoose.MongooseInstrumentation({\n  responseHook(span) {\n    addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mongoose');\n  }\n}));\nconst _mongooseIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMongoose();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [mongoose](https://www.npmjs.com/package/mongoose) library.\n *\n * For more information, see the [`mongooseIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mongoose/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mongooseIntegration()],\n * });\n * ```\n */\nconst mongooseIntegration = core.defineIntegration(_mongooseIntegration);\nexports.instrumentMongoose = instrumentMongoose;\nexports.mongooseIntegration = mongooseIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyx1QkFBdUIsR0FBR0MsbUJBQU8sQ0FBQyx1SUFBeUMsQ0FBQztBQUNsRixNQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsdUdBQTBCLENBQUM7QUFDdEQsTUFBTUcsZUFBZSxHQUFHSCxtQkFBTyxDQUFDLG1IQUFnQyxDQUFDO0FBRWpFLE1BQU1JLGdCQUFnQixHQUFHLFVBQVU7QUFFbkMsTUFBTUMsa0JBQWtCLEdBQUdILFVBQVUsQ0FBQ0ksc0JBQXNCLENBQzFERixnQkFBZ0IsRUFDaEIsTUFDRSxJQUFJTCx1QkFBdUIsQ0FBQ1EsdUJBQXVCLENBQUM7RUFDbERDLFlBQVlBLENBQUNDLElBQUksRUFBRTtJQUNqQk4sZUFBZSxDQUFDQSxlQUFlLENBQUNNLElBQUksRUFBRSx1QkFBdUIsQ0FBQztFQUNoRTtBQUNGLENBQUMsQ0FDTCxDQUFDO0FBRUQsTUFBTUMsb0JBQW9CLEdBQUlBLENBQUEsS0FBTTtFQUNsQyxPQUFPO0lBQ0xDLElBQUksRUFBRVAsZ0JBQWdCO0lBQ3RCUSxTQUFTQSxDQUFBLEVBQUc7TUFDVlAsa0JBQWtCLENBQUMsQ0FBQztJQUN0QjtFQUNGLENBQUM7QUFDSCxDQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNUSxtQkFBbUIsR0FBR1osSUFBSSxDQUFDYSxpQkFBaUIsQ0FBQ0osb0JBQW9CLENBQUM7QUFFeEViLDBCQUEwQixHQUFHUSxrQkFBa0I7QUFDL0NSLDJCQUEyQixHQUFHZ0IsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbW9uZ29vc2UuanM/YzkyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25Nb25nb29zZSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb29zZScpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTW9uZ29vc2UnO1xuXG5jb25zdCBpbnN0cnVtZW50TW9uZ29vc2UgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk1vbmdvb3NlLk1vbmdvb3NlSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlc3BvbnNlSG9vayhzcGFuKSB7XG4gICAgICAgIGFkZE9yaWdpblRvU3Bhbi5hZGRPcmlnaW5Ub1NwYW4oc3BhbiwgJ2F1dG8uZGIub3RlbC5tb25nb29zZScpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9tb25nb29zZUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRNb25nb29zZSgpO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbbW9uZ29vc2VdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL21vbmdvb3NlKSBsaWJyYXJ5LlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgbW9uZ29vc2VJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9tb25nb29zZS8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm1vbmdvb3NlSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBtb25nb29zZUludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfbW9uZ29vc2VJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudE1vbmdvb3NlID0gaW5zdHJ1bWVudE1vbmdvb3NlO1xuZXhwb3J0cy5tb25nb29zZUludGVncmF0aW9uID0gbW9uZ29vc2VJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvb3NlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW5zdHJ1bWVudGF0aW9uTW9uZ29vc2UiLCJyZXF1aXJlIiwiY29yZSIsImluc3RydW1lbnQiLCJhZGRPcmlnaW5Ub1NwYW4iLCJJTlRFR1JBVElPTl9OQU1FIiwiaW5zdHJ1bWVudE1vbmdvb3NlIiwiZ2VuZXJhdGVJbnN0cnVtZW50T25jZSIsIk1vbmdvb3NlSW5zdHJ1bWVudGF0aW9uIiwicmVzcG9uc2VIb29rIiwic3BhbiIsIl9tb25nb29zZUludGVncmF0aW9uIiwibmFtZSIsInNldHVwT25jZSIsIm1vbmdvb3NlSW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mongoose.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationMysql = __webpack_require__(/*! @opentelemetry/instrumentation-mysql */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst INTEGRATION_NAME = 'Mysql';\nconst instrumentMysql = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql.MySQLInstrumentation({}));\nconst _mysqlIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql](https://www.npmjs.com/package/mysql) library.\n *\n * For more information, see the [`mysqlIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysqlIntegration = core.defineIntegration(_mysqlIntegration);\nexports.instrumentMysql = instrumentMysql;\nexports.mysqlIntegration = mysqlIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxvQkFBb0IsR0FBR0MsbUJBQU8sQ0FBQyxpSUFBc0MsQ0FBQztBQUM1RSxNQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsdUdBQTBCLENBQUM7QUFFdEQsTUFBTUcsZ0JBQWdCLEdBQUcsT0FBTztBQUVoQyxNQUFNQyxlQUFlLEdBQUdGLFVBQVUsQ0FBQ0csc0JBQXNCLENBQUNGLGdCQUFnQixFQUFFLE1BQU0sSUFBSUosb0JBQW9CLENBQUNPLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFcEksTUFBTUMsaUJBQWlCLEdBQUlBLENBQUEsS0FBTTtFQUMvQixPQUFPO0lBQ0xDLElBQUksRUFBRUwsZ0JBQWdCO0lBQ3RCTSxTQUFTQSxDQUFBLEVBQUc7TUFDVkwsZUFBZSxDQUFDLENBQUM7SUFDbkI7RUFDRixDQUFDO0FBQ0gsQ0FBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTU0sZ0JBQWdCLEdBQUdULElBQUksQ0FBQ1UsaUJBQWlCLENBQUNKLGlCQUFpQixDQUFDO0FBRWxFVix1QkFBdUIsR0FBR08sZUFBZTtBQUN6Q1Asd0JBQXdCLEdBQUdhLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsLmpzP2VlM2MiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uTXlzcWwgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbXlzcWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdNeXNxbCc7XG5cbmNvbnN0IGluc3RydW1lbnRNeXNxbCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uTXlzcWwuTXlTUUxJbnN0cnVtZW50YXRpb24oe30pKTtcblxuY29uc3QgX215c3FsSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudE15c3FsKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtteXNxbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvbXlzcWwpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BteXNxbEludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL215c3FsLykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IFNlbnRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvbm9kZScpO1xuICpcbiAqIFNlbnRyeS5pbml0KHtcbiAqICBpbnRlZ3JhdGlvbnM6IFtTZW50cnkubXlzcWxJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IG15c3FsSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9teXNxbEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TXlzcWwgPSBpbnN0cnVtZW50TXlzcWw7XG5leHBvcnRzLm15c3FsSW50ZWdyYXRpb24gPSBteXNxbEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlzcWwuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnN0cnVtZW50YXRpb25NeXNxbCIsInJlcXVpcmUiLCJjb3JlIiwiaW5zdHJ1bWVudCIsIklOVEVHUkFUSU9OX05BTUUiLCJpbnN0cnVtZW50TXlzcWwiLCJnZW5lcmF0ZUluc3RydW1lbnRPbmNlIiwiTXlTUUxJbnN0cnVtZW50YXRpb24iLCJfbXlzcWxJbnRlZ3JhdGlvbiIsIm5hbWUiLCJzZXR1cE9uY2UiLCJteXNxbEludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationMysql2 = __webpack_require__(/*! @opentelemetry/instrumentation-mysql2 */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-mysql2/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst INTEGRATION_NAME = 'Mysql2';\nconst instrumentMysql2 = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationMysql2.MySQL2Instrumentation({\n  responseHook(span) {\n    addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.mysql2');\n  }\n}));\nconst _mysql2Integration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentMysql2();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [mysql2](https://www.npmjs.com/package/mysql2) library.\n *\n * For more information, see the [`mysql2Integration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/mysql2/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.mysqlIntegration()],\n * });\n * ```\n */\nconst mysql2Integration = core.defineIntegration(_mysql2Integration);\nexports.instrumentMysql2 = instrumentMysql2;\nexports.mysql2Integration = mysql2Integration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbXlzcWwyLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMscUJBQXFCLEdBQUdDLG1CQUFPLENBQUMsbUlBQXVDLENBQUM7QUFDOUUsTUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFDcEMsTUFBTUUsVUFBVSxHQUFHRixtQkFBTyxDQUFDLHVHQUEwQixDQUFDO0FBQ3RELE1BQU1HLGVBQWUsR0FBR0gsbUJBQU8sQ0FBQyxtSEFBZ0MsQ0FBQztBQUVqRSxNQUFNSSxnQkFBZ0IsR0FBRyxRQUFRO0FBRWpDLE1BQU1DLGdCQUFnQixHQUFHSCxVQUFVLENBQUNJLHNCQUFzQixDQUN4REYsZ0JBQWdCLEVBQ2hCLE1BQ0UsSUFBSUwscUJBQXFCLENBQUNRLHFCQUFxQixDQUFDO0VBQzlDQyxZQUFZQSxDQUFDQyxJQUFJLEVBQUU7SUFDakJOLGVBQWUsQ0FBQ0EsZUFBZSxDQUFDTSxJQUFJLEVBQUUscUJBQXFCLENBQUM7RUFDOUQ7QUFDRixDQUFDLENBQ0wsQ0FBQztBQUVELE1BQU1DLGtCQUFrQixHQUFJQSxDQUFBLEtBQU07RUFDaEMsT0FBTztJQUNMQyxJQUFJLEVBQUVQLGdCQUFnQjtJQUN0QlEsU0FBU0EsQ0FBQSxFQUFHO01BQ1ZQLGdCQUFnQixDQUFDLENBQUM7SUFDcEI7RUFDRixDQUFDO0FBQ0gsQ0FBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTVEsaUJBQWlCLEdBQUdaLElBQUksQ0FBQ2EsaUJBQWlCLENBQUNKLGtCQUFrQixDQUFDO0FBRXBFYix3QkFBd0IsR0FBR1EsZ0JBQWdCO0FBQzNDUix5QkFBeUIsR0FBR2dCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL215c3FsMi5qcz8zMGM4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbk15c3FsMiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1teXNxbDInKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IGFkZE9yaWdpblRvU3BhbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ015c3FsMic7XG5cbmNvbnN0IGluc3RydW1lbnRNeXNxbDIgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvbk15c3FsMi5NeVNRTDJJbnN0cnVtZW50YXRpb24oe1xuICAgICAgcmVzcG9uc2VIb29rKHNwYW4pIHtcbiAgICAgICAgYWRkT3JpZ2luVG9TcGFuLmFkZE9yaWdpblRvU3BhbihzcGFuLCAnYXV0by5kYi5vdGVsLm15c3FsMicpO1xuICAgICAgfSxcbiAgICB9KSxcbik7XG5cbmNvbnN0IF9teXNxbDJJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50TXlzcWwyKCk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGRzIFNlbnRyeSB0cmFjaW5nIGluc3RydW1lbnRhdGlvbiBmb3IgdGhlIFtteXNxbDJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL215c3FsMikgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYG15c3FsMkludGVncmF0aW9uYCBkb2N1bWVudGF0aW9uXShodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy9ub2RlL2NvbmZpZ3VyYXRpb24vaW50ZWdyYXRpb25zL215c3FsMi8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5Lm15c3FsSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBteXNxbDJJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX215c3FsMkludGVncmF0aW9uKTtcblxuZXhwb3J0cy5pbnN0cnVtZW50TXlzcWwyID0gaW5zdHJ1bWVudE15c3FsMjtcbmV4cG9ydHMubXlzcWwySW50ZWdyYXRpb24gPSBteXNxbDJJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15c3FsMi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluc3RydW1lbnRhdGlvbk15c3FsMiIsInJlcXVpcmUiLCJjb3JlIiwiaW5zdHJ1bWVudCIsImFkZE9yaWdpblRvU3BhbiIsIklOVEVHUkFUSU9OX05BTUUiLCJpbnN0cnVtZW50TXlzcWwyIiwiZ2VuZXJhdGVJbnN0cnVtZW50T25jZSIsIk15U1FMMkluc3RydW1lbnRhdGlvbiIsInJlc3BvbnNlSG9vayIsInNwYW4iLCJfbXlzcWwySW50ZWdyYXRpb24iLCJuYW1lIiwic2V0dXBPbmNlIiwibXlzcWwySW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/mysql2.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst sentryPatched = 'sentryPatched';\n\n/**\n * Helper checking if a concrete target class is already patched.\n *\n * We already guard duplicate patching with isWrapped. However, isWrapped checks whether a file has been patched, whereas we use this check for concrete target classes.\n * This check might not be necessary, but better to play it safe.\n */\nfunction isPatched(target) {\n  if (target.sentryPatched) {\n    return true;\n  }\n  core.addNonEnumerableProperty(target, sentryPatched, true);\n  return false;\n}\n\n/**\n * Returns span options for nest middleware spans.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction getMiddlewareSpanOptions(target, name = undefined) {\n  const span_name = _nullishCoalesce(name, () => target.name); // fallback to class name if no name is provided\n\n  return {\n    name: span_name,\n    attributes: {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'middleware.nestjs',\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.middleware.nestjs'\n    }\n  };\n}\n\n/**\n * Returns span options for nest event spans.\n */\nfunction getEventSpanOptions(event) {\n  return {\n    name: `event ${event}`,\n    attributes: {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'event.nestjs',\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.event.nestjs'\n    },\n    forceTransaction: true\n  };\n}\n\n/**\n * Adds instrumentation to a js observable and attaches the span to an active parent span.\n */\nfunction instrumentObservable(observable, activeSpan) {\n  if (activeSpan) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    observable.subscribe = new Proxy(observable.subscribe, {\n      apply: (originalSubscribe, thisArgSubscribe, argsSubscribe) => {\n        return core.withActiveSpan(activeSpan, () => {\n          const subscription = originalSubscribe.apply(thisArgSubscribe, argsSubscribe);\n          subscription.add(() => activeSpan.end());\n          return subscription;\n        });\n      }\n    });\n  }\n}\n\n/**\n * Proxies the next() call in a nestjs middleware to end the span when it is called.\n */\nfunction getNextProxy(next, span, prevSpan) {\n  return new Proxy(next, {\n    apply: (originalNext, thisArgNext, argsNext) => {\n      span.end();\n      if (prevSpan) {\n        return core.withActiveSpan(prevSpan, () => {\n          return Reflect.apply(originalNext, thisArgNext, argsNext);\n        });\n      } else {\n        return Reflect.apply(originalNext, thisArgNext, argsNext);\n      }\n    }\n  });\n}\nexports.getEventSpanOptions = getEventSpanOptions;\nexports.getMiddlewareSpanOptions = getMiddlewareSpanOptions;\nexports.getNextProxy = getNextProxy;\nexports.instrumentObservable = instrumentObservable;\nexports.isPatched = isPatched;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvbmVzdC9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSTtFQUNGQTtBQUNGLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBRTNCQyw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLElBQUksR0FBR0wsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBRXBDLE1BQU1NLGFBQWEsR0FBRyxlQUFlOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxTQUFTQSxDQUFDQyxNQUFNLEVBQUU7RUFDekIsSUFBSUEsTUFBTSxDQUFDRixhQUFhLEVBQUU7SUFDeEIsT0FBTyxJQUFJO0VBQ2I7RUFFQUQsSUFBSSxDQUFDSSx3QkFBd0IsQ0FBQ0QsTUFBTSxFQUFFRixhQUFhLEVBQUUsSUFBSSxDQUFDO0VBQzFELE9BQU8sS0FBSztBQUNkOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ksd0JBQXdCQSxDQUFDRixNQUFNLEVBQUVHLElBQUksR0FBR0MsU0FBUyxFQUFFO0VBQzFELE1BQU1DLFNBQVMsR0FBR2QsZ0JBQWdCLENBQUNZLElBQUksRUFBRSxNQUFRSCxNQUFNLENBQUNHLElBQUssQ0FBQyxDQUFDLENBQUM7O0VBRWhFLE9BQU87SUFDTEEsSUFBSSxFQUFFRSxTQUFTO0lBQ2ZDLFVBQVUsRUFBRTtNQUNWLENBQUNULElBQUksQ0FBQ1UsNEJBQTRCLEdBQUcsbUJBQW1CO01BQ3hELENBQUNWLElBQUksQ0FBQ1csZ0NBQWdDLEdBQUc7SUFDM0M7RUFDRixDQUFDO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsbUJBQW1CQSxDQUFDQyxLQUFLLEVBRWpDO0VBQ0MsT0FBTztJQUNMUCxJQUFJLEVBQUcsU0FBUU8sS0FBTSxFQUFDO0lBQ3RCSixVQUFVLEVBQUU7TUFDVixDQUFDVCxJQUFJLENBQUNVLDRCQUE0QixHQUFHLGNBQWM7TUFDbkQsQ0FBQ1YsSUFBSSxDQUFDVyxnQ0FBZ0MsR0FBRztJQUMzQyxDQUFDO0lBQ0RHLGdCQUFnQixFQUFFO0VBQ3BCLENBQUM7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxvQkFBb0JBLENBQUNDLFVBQVUsRUFBRUMsVUFBVSxFQUFFO0VBQ3BELElBQUlBLFVBQVUsRUFBRTtJQUNkO0lBQ0FELFVBQVUsQ0FBQ0UsU0FBUyxHQUFHLElBQUlDLEtBQUssQ0FBQ0gsVUFBVSxDQUFDRSxTQUFTLEVBQUU7TUFDckRFLEtBQUssRUFBRUEsQ0FBQ0MsaUJBQWlCLEVBQUVDLGdCQUFnQixFQUFFQyxhQUFhLEtBQUs7UUFDN0QsT0FBT3ZCLElBQUksQ0FBQ3dCLGNBQWMsQ0FBQ1AsVUFBVSxFQUFFLE1BQU07VUFDM0MsTUFBTVEsWUFBWSxHQUFHSixpQkFBaUIsQ0FBQ0QsS0FBSyxDQUFDRSxnQkFBZ0IsRUFBRUMsYUFBYSxDQUFDO1VBQzdFRSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxNQUFNVCxVQUFVLENBQUNVLEdBQUcsQ0FBQyxDQUFDLENBQUM7VUFDeEMsT0FBT0YsWUFBWTtRQUNyQixDQUFDLENBQUM7TUFDSjtJQUNGLENBQUMsQ0FBQztFQUNKO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0csWUFBWUEsQ0FBQ0MsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLFFBQVEsRUFBRTtFQUMxQyxPQUFPLElBQUlaLEtBQUssQ0FBQ1UsSUFBSSxFQUFFO0lBQ3JCVCxLQUFLLEVBQUVBLENBQUNZLFlBQVksRUFBRUMsV0FBVyxFQUFFQyxRQUFRLEtBQUs7TUFDOUNKLElBQUksQ0FBQ0gsR0FBRyxDQUFDLENBQUM7TUFFVixJQUFJSSxRQUFRLEVBQUU7UUFDWixPQUFPL0IsSUFBSSxDQUFDd0IsY0FBYyxDQUFDTyxRQUFRLEVBQUUsTUFBTTtVQUN6QyxPQUFPSSxPQUFPLENBQUNmLEtBQUssQ0FBQ1ksWUFBWSxFQUFFQyxXQUFXLEVBQUVDLFFBQVEsQ0FBQztRQUMzRCxDQUFDLENBQUM7TUFDSixDQUFDLE1BQU07UUFDTCxPQUFPQyxPQUFPLENBQUNmLEtBQUssQ0FBQ1ksWUFBWSxFQUFFQyxXQUFXLEVBQUVDLFFBQVEsQ0FBQztNQUMzRDtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQXBDLDJCQUEyQixHQUFHYyxtQkFBbUI7QUFDakRkLGdDQUFnQyxHQUFHTyx3QkFBd0I7QUFDM0RQLG9CQUFvQixHQUFHOEIsWUFBWTtBQUNuQzlCLDRCQUE0QixHQUFHaUIsb0JBQW9CO0FBQ25EakIsaUJBQWlCLEdBQUdJLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9uZXN0L2hlbHBlcnMuanM/YTc4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfbnVsbGlzaENvYWxlc2NlXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3Qgc2VudHJ5UGF0Y2hlZCA9ICdzZW50cnlQYXRjaGVkJztcblxuLyoqXG4gKiBIZWxwZXIgY2hlY2tpbmcgaWYgYSBjb25jcmV0ZSB0YXJnZXQgY2xhc3MgaXMgYWxyZWFkeSBwYXRjaGVkLlxuICpcbiAqIFdlIGFscmVhZHkgZ3VhcmQgZHVwbGljYXRlIHBhdGNoaW5nIHdpdGggaXNXcmFwcGVkLiBIb3dldmVyLCBpc1dyYXBwZWQgY2hlY2tzIHdoZXRoZXIgYSBmaWxlIGhhcyBiZWVuIHBhdGNoZWQsIHdoZXJlYXMgd2UgdXNlIHRoaXMgY2hlY2sgZm9yIGNvbmNyZXRlIHRhcmdldCBjbGFzc2VzLlxuICogVGhpcyBjaGVjayBtaWdodCBub3QgYmUgbmVjZXNzYXJ5LCBidXQgYmV0dGVyIHRvIHBsYXkgaXQgc2FmZS5cbiAqL1xuZnVuY3Rpb24gaXNQYXRjaGVkKHRhcmdldCkge1xuICBpZiAodGFyZ2V0LnNlbnRyeVBhdGNoZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvcmUuYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldCwgc2VudHJ5UGF0Y2hlZCwgdHJ1ZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHNwYW4gb3B0aW9ucyBmb3IgbmVzdCBtaWRkbGV3YXJlIHNwYW5zLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LWZ1bmN0aW9uLXJldHVybi10eXBlXG5mdW5jdGlvbiBnZXRNaWRkbGV3YXJlU3Bhbk9wdGlvbnModGFyZ2V0LCBuYW1lID0gdW5kZWZpbmVkKSB7XG4gIGNvbnN0IHNwYW5fbmFtZSA9IF9udWxsaXNoQ29hbGVzY2UobmFtZSwgKCkgPT4gKCB0YXJnZXQubmFtZSkpOyAvLyBmYWxsYmFjayB0byBjbGFzcyBuYW1lIGlmIG5vIG5hbWUgaXMgcHJvdmlkZWRcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IHNwYW5fbmFtZSxcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogJ21pZGRsZXdhcmUubmVzdGpzJyxcbiAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8ubWlkZGxld2FyZS5uZXN0anMnLFxuICAgIH0sXG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJucyBzcGFuIG9wdGlvbnMgZm9yIG5lc3QgZXZlbnQgc3BhbnMuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50U3Bhbk9wdGlvbnMoZXZlbnQpXG5cbiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogYGV2ZW50ICR7ZXZlbnR9YCxcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogJ2V2ZW50Lm5lc3RqcycsXG4gICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl06ICdhdXRvLmV2ZW50Lm5lc3RqcycsXG4gICAgfSxcbiAgICBmb3JjZVRyYW5zYWN0aW9uOiB0cnVlLFxuICB9O1xufVxuXG4vKipcbiAqIEFkZHMgaW5zdHJ1bWVudGF0aW9uIHRvIGEganMgb2JzZXJ2YWJsZSBhbmQgYXR0YWNoZXMgdGhlIHNwYW4gdG8gYW4gYWN0aXZlIHBhcmVudCBzcGFuLlxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50T2JzZXJ2YWJsZShvYnNlcnZhYmxlLCBhY3RpdmVTcGFuKSB7XG4gIGlmIChhY3RpdmVTcGFuKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgIG9ic2VydmFibGUuc3Vic2NyaWJlID0gbmV3IFByb3h5KG9ic2VydmFibGUuc3Vic2NyaWJlLCB7XG4gICAgICBhcHBseTogKG9yaWdpbmFsU3Vic2NyaWJlLCB0aGlzQXJnU3Vic2NyaWJlLCBhcmdzU3Vic2NyaWJlKSA9PiB7XG4gICAgICAgIHJldHVybiBjb3JlLndpdGhBY3RpdmVTcGFuKGFjdGl2ZVNwYW4sICgpID0+IHtcbiAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBvcmlnaW5hbFN1YnNjcmliZS5hcHBseSh0aGlzQXJnU3Vic2NyaWJlLCBhcmdzU3Vic2NyaWJlKTtcbiAgICAgICAgICBzdWJzY3JpcHRpb24uYWRkKCgpID0+IGFjdGl2ZVNwYW4uZW5kKCkpO1xuICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFByb3hpZXMgdGhlIG5leHQoKSBjYWxsIGluIGEgbmVzdGpzIG1pZGRsZXdhcmUgdG8gZW5kIHRoZSBzcGFuIHdoZW4gaXQgaXMgY2FsbGVkLlxuICovXG5mdW5jdGlvbiBnZXROZXh0UHJveHkobmV4dCwgc3BhbiwgcHJldlNwYW4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShuZXh0LCB7XG4gICAgYXBwbHk6IChvcmlnaW5hbE5leHQsIHRoaXNBcmdOZXh0LCBhcmdzTmV4dCkgPT4ge1xuICAgICAgc3Bhbi5lbmQoKTtcblxuICAgICAgaWYgKHByZXZTcGFuKSB7XG4gICAgICAgIHJldHVybiBjb3JlLndpdGhBY3RpdmVTcGFuKHByZXZTcGFuLCAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkob3JpZ2luYWxOZXh0LCB0aGlzQXJnTmV4dCwgYXJnc05leHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KG9yaWdpbmFsTmV4dCwgdGhpc0FyZ05leHQsIGFyZ3NOZXh0KTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5nZXRFdmVudFNwYW5PcHRpb25zID0gZ2V0RXZlbnRTcGFuT3B0aW9ucztcbmV4cG9ydHMuZ2V0TWlkZGxld2FyZVNwYW5PcHRpb25zID0gZ2V0TWlkZGxld2FyZVNwYW5PcHRpb25zO1xuZXhwb3J0cy5nZXROZXh0UHJveHkgPSBnZXROZXh0UHJveHk7XG5leHBvcnRzLmluc3RydW1lbnRPYnNlcnZhYmxlID0gaW5zdHJ1bWVudE9ic2VydmFibGU7XG5leHBvcnRzLmlzUGF0Y2hlZCA9IGlzUGF0Y2hlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwXG4iXSwibmFtZXMiOlsiX251bGxpc2hDb2FsZXNjZSIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvcmUiLCJzZW50cnlQYXRjaGVkIiwiaXNQYXRjaGVkIiwidGFyZ2V0IiwiYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZ2V0TWlkZGxld2FyZVNwYW5PcHRpb25zIiwibmFtZSIsInVuZGVmaW5lZCIsInNwYW5fbmFtZSIsImF0dHJpYnV0ZXMiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4iLCJnZXRFdmVudFNwYW5PcHRpb25zIiwiZXZlbnQiLCJmb3JjZVRyYW5zYWN0aW9uIiwiaW5zdHJ1bWVudE9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwiYWN0aXZlU3BhbiIsInN1YnNjcmliZSIsIlByb3h5IiwiYXBwbHkiLCJvcmlnaW5hbFN1YnNjcmliZSIsInRoaXNBcmdTdWJzY3JpYmUiLCJhcmdzU3Vic2NyaWJlIiwid2l0aEFjdGl2ZVNwYW4iLCJzdWJzY3JpcHRpb24iLCJhZGQiLCJlbmQiLCJnZXROZXh0UHJveHkiLCJuZXh0Iiwic3BhbiIsInByZXZTcGFuIiwib3JpZ2luYWxOZXh0IiwidGhpc0FyZ05leHQiLCJhcmdzTmV4dCIsIlJlZmxlY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/helpers.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationNestjsCore = __webpack_require__(/*! @opentelemetry/instrumentation-nestjs-core */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-nestjs-core/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst sentryNestEventInstrumentation = __webpack_require__(/*! ./sentry-nest-event-instrumentation.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-event-instrumentation.js\");\nconst sentryNestInstrumentation = __webpack_require__(/*! ./sentry-nest-instrumentation.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/sentry-nest-instrumentation.js\");\nconst INTEGRATION_NAME = 'Nest';\nconst instrumentNestCore = instrument.generateInstrumentOnce('Nest-Core', () => {\n  return new instrumentationNestjsCore.NestInstrumentation();\n});\nconst instrumentNestCommon = instrument.generateInstrumentOnce('Nest-Common', () => {\n  return new sentryNestInstrumentation.SentryNestInstrumentation();\n});\nconst instrumentNestEvent = instrument.generateInstrumentOnce('Nest-Event', () => {\n  return new sentryNestEventInstrumentation.SentryNestEventInstrumentation();\n});\nconst instrumentNest = Object.assign(() => {\n  instrumentNestCore();\n  instrumentNestCommon();\n  instrumentNestEvent();\n}, {\n  id: INTEGRATION_NAME\n});\n\n/**\n * Integration capturing tracing data for NestJS.\n *\n * @deprecated The `nestIntegration` is deprecated. Instead, use the NestJS SDK directly (`@sentry/nestjs`), or use the `nestIntegration` export from `@sentry/nestjs`.\n */\nconst nestIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentNest();\n    }\n  };\n});\n\n/**\n * Setup an error handler for Nest.\n *\n * @deprecated `setupNestErrorHandler` is deprecated.\n * Instead use the `@sentry/nestjs` package, which has more functional APIs for capturing errors.\n * See the [`@sentry/nestjs` Setup Guide](https://docs.sentry.io/platforms/javascript/guides/nestjs/) for how to set up the Sentry NestJS SDK.\n */\nfunction setupNestErrorHandler(app, baseFilter) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.warn('[Sentry] Warning: You used the `setupNestErrorHandler()` method to set up Sentry error monitoring. This function is deprecated and will be removed in the next major version. Instead, it is recommended to use the `@sentry/nestjs` package. To set up the NestJS SDK see: https://docs.sentry.io/platforms/javascript/guides/nestjs/');\n  });\n\n  // Sadly, NestInstrumentation has no requestHook, so we need to add the attributes here\n  // We register this hook in this method, because if we register it in the integration `setup`,\n  // it would always run even for users that are not even using Nest.js\n  const client = core.getClient();\n  if (client) {\n    client.on('spanStart', span => {\n      addNestSpanAttributes(span);\n    });\n  }\n  app.useGlobalInterceptors({\n    intercept(context, next) {\n      if (core.getIsolationScope() === core.getDefaultIsolationScope()) {\n        core.logger.warn('Isolation scope is still the default isolation scope, skipping setting transactionName.');\n        return next.handle();\n      }\n      if (context.getType() === 'http') {\n        // getRequest() returns either a FastifyRequest or ExpressRequest, depending on the used adapter\n        const req = context.switchToHttp().getRequest();\n        if ('routeOptions' in req && req.routeOptions && req.routeOptions.url) {\n          // fastify case\n          core.getIsolationScope().setTransactionName(`${_optionalChain([req, 'access', _ => _.routeOptions, 'access', _2 => _2.method, 'optionalAccess', _3 => _3.toUpperCase, 'call', _4 => _4()]) || 'GET'} ${req.routeOptions.url}`);\n        } else if ('route' in req && req.route && req.route.path) {\n          // express case\n          core.getIsolationScope().setTransactionName(`${_optionalChain([req, 'access', _5 => _5.method, 'optionalAccess', _6 => _6.toUpperCase, 'call', _7 => _7()]) || 'GET'} ${req.route.path}`);\n        }\n      }\n      return next.handle();\n    }\n  });\n  const wrappedFilter = new Proxy(baseFilter, {\n    get(target, prop, receiver) {\n      if (prop === 'catch') {\n        const originalCatch = Reflect.get(target, prop, receiver);\n        return (exception, host) => {\n          const exceptionIsObject = typeof exception === 'object' && exception !== null;\n          const exceptionStatusCode = exceptionIsObject && 'status' in exception ? exception.status : null;\n          const exceptionErrorProperty = exceptionIsObject && 'error' in exception ? exception.error : null;\n\n          /*\n          Don't report expected NestJS control flow errors\n          - `HttpException` errors will have a `status` property\n          - `RpcException` errors will have an `error` property\n           */\n          if (exceptionStatusCode !== null || exceptionErrorProperty !== null) {\n            return originalCatch.apply(target, [exception, host]);\n          }\n          core.captureException(exception);\n          return originalCatch.apply(target, [exception, host]);\n        };\n      }\n      return Reflect.get(target, prop, receiver);\n    }\n  });\n  app.useGlobalFilters(wrappedFilter);\n}\nfunction addNestSpanAttributes(span) {\n  const attributes = core.spanToJSON(span).data || {};\n\n  // this is one of: app_creation, request_context, handler\n  const type = attributes['nestjs.type'];\n\n  // If this is already set, or we have no nest.js span, no need to process again...\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] || !type) {\n    return;\n  }\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.nestjs',\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: `${type}.nestjs`\n  });\n}\nexports.instrumentNest = instrumentNest;\nexports.nestIntegration = nestIntegration;\nexports.setupNestErrorHandler = setupNestErrorHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/nest/nest.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationPg = __webpack_require__(/*! @opentelemetry/instrumentation-pg */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-pg/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst INTEGRATION_NAME = 'Postgres';\nconst instrumentPostgres = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationPg.PgInstrumentation({\n  requireParentSpan: true,\n  requestHook(span) {\n    addOriginToSpan.addOriginToSpan(span, 'auto.db.otel.postgres');\n  }\n}));\nconst _postgresIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPostgres();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [pg](https://www.npmjs.com/package/pg) library.\n *\n * For more information, see the [`postgresIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/postgres/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.postgresIntegration()],\n * });\n * ```\n */\nconst postgresIntegration = core.defineIntegration(_postgresIntegration);\nexports.instrumentPostgres = instrumentPostgres;\nexports.postgresIntegration = postgresIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcG9zdGdyZXMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxpQkFBaUIsR0FBR0MsbUJBQU8sQ0FBQywySEFBbUMsQ0FBQztBQUN0RSxNQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsdUdBQTBCLENBQUM7QUFDdEQsTUFBTUcsZUFBZSxHQUFHSCxtQkFBTyxDQUFDLG1IQUFnQyxDQUFDO0FBRWpFLE1BQU1JLGdCQUFnQixHQUFHLFVBQVU7QUFFbkMsTUFBTUMsa0JBQWtCLEdBQUdILFVBQVUsQ0FBQ0ksc0JBQXNCLENBQzFERixnQkFBZ0IsRUFDaEIsTUFDRSxJQUFJTCxpQkFBaUIsQ0FBQ1EsaUJBQWlCLENBQUM7RUFDdENDLGlCQUFpQixFQUFFLElBQUk7RUFDdkJDLFdBQVdBLENBQUNDLElBQUksRUFBRTtJQUNoQlAsZUFBZSxDQUFDQSxlQUFlLENBQUNPLElBQUksRUFBRSx1QkFBdUIsQ0FBQztFQUNoRTtBQUNGLENBQUMsQ0FDTCxDQUFDO0FBRUQsTUFBTUMsb0JBQW9CLEdBQUlBLENBQUEsS0FBTTtFQUNsQyxPQUFPO0lBQ0xDLElBQUksRUFBRVIsZ0JBQWdCO0lBQ3RCUyxTQUFTQSxDQUFBLEVBQUc7TUFDVlIsa0JBQWtCLENBQUMsQ0FBQztJQUN0QjtFQUNGLENBQUM7QUFDSCxDQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNUyxtQkFBbUIsR0FBR2IsSUFBSSxDQUFDYyxpQkFBaUIsQ0FBQ0osb0JBQW9CLENBQUM7QUFFeEVkLDBCQUEwQixHQUFHUSxrQkFBa0I7QUFDL0NSLDJCQUEyQixHQUFHaUIsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcG9zdGdyZXMuanM/NmZjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnN0cnVtZW50YXRpb25QZyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1wZycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5zdHJ1bWVudCA9IHJlcXVpcmUoJy4uLy4uL290ZWwvaW5zdHJ1bWVudC5qcycpO1xuY29uc3QgYWRkT3JpZ2luVG9TcGFuID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUG9zdGdyZXMnO1xuXG5jb25zdCBpbnN0cnVtZW50UG9zdGdyZXMgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIElOVEVHUkFUSU9OX05BTUUsXG4gICgpID0+XG4gICAgbmV3IGluc3RydW1lbnRhdGlvblBnLlBnSW5zdHJ1bWVudGF0aW9uKHtcbiAgICAgIHJlcXVpcmVQYXJlbnRTcGFuOiB0cnVlLFxuICAgICAgcmVxdWVzdEhvb2soc3Bhbikge1xuICAgICAgICBhZGRPcmlnaW5Ub1NwYW4uYWRkT3JpZ2luVG9TcGFuKHNwYW4sICdhdXRvLmRiLm90ZWwucG9zdGdyZXMnKTtcbiAgICAgIH0sXG4gICAgfSksXG4pO1xuXG5jb25zdCBfcG9zdGdyZXNJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBpbnN0cnVtZW50UG9zdGdyZXMoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3BnXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9wZykgbGlicmFyeS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBbYHBvc3RncmVzSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvcG9zdGdyZXMvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgU2VudHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9ub2RlJyk7XG4gKlxuICogU2VudHJ5LmluaXQoe1xuICogIGludGVncmF0aW9uczogW1NlbnRyeS5wb3N0Z3Jlc0ludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgcG9zdGdyZXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3Bvc3RncmVzSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLmluc3RydW1lbnRQb3N0Z3JlcyA9IGluc3RydW1lbnRQb3N0Z3JlcztcbmV4cG9ydHMucG9zdGdyZXNJbnRlZ3JhdGlvbiA9IHBvc3RncmVzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3N0Z3Jlcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluc3RydW1lbnRhdGlvblBnIiwicmVxdWlyZSIsImNvcmUiLCJpbnN0cnVtZW50IiwiYWRkT3JpZ2luVG9TcGFuIiwiSU5URUdSQVRJT05fTkFNRSIsImluc3RydW1lbnRQb3N0Z3JlcyIsImdlbmVyYXRlSW5zdHJ1bWVudE9uY2UiLCJQZ0luc3RydW1lbnRhdGlvbiIsInJlcXVpcmVQYXJlbnRTcGFuIiwicmVxdWVzdEhvb2siLCJzcGFuIiwiX3Bvc3RncmVzSW50ZWdyYXRpb24iLCJuYW1lIiwic2V0dXBPbmNlIiwicG9zdGdyZXNJbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/postgres.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst prismaInstrumentation = __webpack_require__(/*! @prisma/instrumentation */ \"(instrument)/./node_modules/@prisma/instrumentation/dist/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst INTEGRATION_NAME = 'Prisma';\nconst instrumentPrisma = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => {\n  const EsmInteropPrismaInstrumentation =\n  // @ts-expect-error We need to do the following for interop reasons\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  _optionalChain([prismaInstrumentation, 'access', _ => _.default, 'optionalAccess', _2 => _2.PrismaInstrumentation]) || prismaInstrumentation.PrismaInstrumentation;\n  return new EsmInteropPrismaInstrumentation({});\n});\nconst _prismaIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentPrisma();\n    },\n    setup(client) {\n      client.on('spanStart', span => {\n        const spanJSON = core.spanToJSON(span);\n        if (_optionalChain([spanJSON, 'access', _3 => _3.description, 'optionalAccess', _4 => _4.startsWith, 'call', _5 => _5('prisma:')])) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.prisma');\n        }\n\n        // In Prisma v5.22+, the `db.system` attribute is automatically set\n        // On older versions, this is missing, so we add it here\n        if (spanJSON.description === 'prisma:engine:db_query' && !_optionalChain([spanJSON, 'access', _6 => _6.data, 'optionalAccess', _7 => _7['db.system']])) {\n          span.setAttribute('db.system', 'prisma');\n        }\n      });\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [prisma](https://www.npmjs.com/package/prisma) library.\n *\n * For more information, see the [`prismaIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/prisma/).\n *\n * @example\n *\n * Make sure `previewFeatures = [\"tracing\"]` is set in the prisma client generator block. See the\n * [prisma docs](https://www.prisma.io/docs/concepts/components/prisma-client/opentelemetry-tracing) for more details.\n *\n * ```prisma\n * generator client {\n *  provider = \"prisma-client-js\"\n *  previewFeatures = [\"tracing\"]\n * }\n * ```\n *\n * Then you can use the integration like this:\n *\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.prismaIntegration()],\n * });\n * ```\n */\nconst prismaIntegration = core.defineIntegration(_prismaIntegration);\nexports.instrumentPrisma = instrumentPrisma;\nexports.prismaIntegration = prismaIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcHJpc21hLmpzIiwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSTtFQUNGQTtBQUNGLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBRTNCQyw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLHFCQUFxQixHQUFHTCxtQkFBTyxDQUFDLGtHQUF5QixDQUFDO0FBQ2hFLE1BQU1NLElBQUksR0FBR04sbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBQ3BDLE1BQU1PLFVBQVUsR0FBR1AsbUJBQU8sQ0FBQyx1R0FBMEIsQ0FBQztBQUV0RCxNQUFNUSxnQkFBZ0IsR0FBRyxRQUFRO0FBRWpDLE1BQU1DLGdCQUFnQixHQUFHRixVQUFVLENBQUNHLHNCQUFzQixDQUFDRixnQkFBZ0IsRUFBRSxNQUFNO0VBQ2pGLE1BQU1HLCtCQUErQjtFQUNuQztFQUNBO0VBQ0FaLGNBQWMsQ0FBQyxDQUFDTSxxQkFBcUIsRUFBRSxRQUFRLEVBQUVPLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUVDLEVBQUUsSUFBSUEsRUFBRSxDQUFDQyxxQkFBcUIsQ0FBQyxDQUFDLElBQUlWLHFCQUFxQixDQUFDVSxxQkFBcUI7RUFFcEssT0FBTyxJQUFJSiwrQkFBK0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUM7QUFFRixNQUFNSyxrQkFBa0IsR0FBSUEsQ0FBQSxLQUFNO0VBQ2hDLE9BQU87SUFDTEMsSUFBSSxFQUFFVCxnQkFBZ0I7SUFDdEJVLFNBQVNBLENBQUEsRUFBRztNQUNWVCxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRFUsS0FBS0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ1pBLE1BQU0sQ0FBQ0MsRUFBRSxDQUFDLFdBQVcsRUFBRUMsSUFBSSxJQUFJO1FBQzdCLE1BQU1DLFFBQVEsR0FBR2pCLElBQUksQ0FBQ2tCLFVBQVUsQ0FBQ0YsSUFBSSxDQUFDO1FBQ3RDLElBQUl2QixjQUFjLENBQUMsQ0FBQ3dCLFFBQVEsRUFBRSxRQUFRLEVBQUVFLEVBQUUsSUFBSUEsRUFBRSxDQUFDQyxXQUFXLEVBQUUsZ0JBQWdCLEVBQUVDLEVBQUUsSUFBSUEsRUFBRSxDQUFDQyxVQUFVLEVBQUUsTUFBTSxFQUFFQyxFQUFFLElBQUlBLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7VUFDbElQLElBQUksQ0FBQ1EsWUFBWSxDQUFDeEIsSUFBSSxDQUFDeUIsZ0NBQWdDLEVBQUUscUJBQXFCLENBQUM7UUFDakY7O1FBRUE7UUFDQTtRQUNBLElBQUlSLFFBQVEsQ0FBQ0csV0FBVyxLQUFLLHdCQUF3QixJQUFJLENBQUMzQixjQUFjLENBQUMsQ0FBQ3dCLFFBQVEsRUFBRSxRQUFRLEVBQUVTLEVBQUUsSUFBSUEsRUFBRSxDQUFDQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUVDLEVBQUUsSUFBSUEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRTtVQUN0SlosSUFBSSxDQUFDUSxZQUFZLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQztRQUMxQztNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUssaUJBQWlCLEdBQUc3QixJQUFJLENBQUM4QixpQkFBaUIsQ0FBQ3BCLGtCQUFrQixDQUFDO0FBRXBFYix3QkFBd0IsR0FBR00sZ0JBQWdCO0FBQzNDTix5QkFBeUIsR0FBR2dDLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy90cmFjaW5nL3ByaXNtYS5qcz8xNDMxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHByaXNtYUluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BwcmlzbWEvaW5zdHJ1bWVudGF0aW9uJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUHJpc21hJztcblxuY29uc3QgaW5zdHJ1bWVudFByaXNtYSA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiB7XG4gIGNvbnN0IEVzbUludGVyb3BQcmlzbWFJbnN0cnVtZW50YXRpb24gPVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgbmVlZCB0byBkbyB0aGUgZm9sbG93aW5nIGZvciBpbnRlcm9wIHJlYXNvbnNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgX29wdGlvbmFsQ2hhaW4oW3ByaXNtYUluc3RydW1lbnRhdGlvbiwgJ2FjY2VzcycsIF8gPT4gXy5kZWZhdWx0LCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5QcmlzbWFJbnN0cnVtZW50YXRpb25dKSB8fCBwcmlzbWFJbnN0cnVtZW50YXRpb24uUHJpc21hSW5zdHJ1bWVudGF0aW9uO1xuXG4gIHJldHVybiBuZXcgRXNtSW50ZXJvcFByaXNtYUluc3RydW1lbnRhdGlvbih7fSk7XG59KTtcblxuY29uc3QgX3ByaXNtYUludGVncmF0aW9uID0gKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGluc3RydW1lbnRQcmlzbWEoKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICBjb25zdCBzcGFuSlNPTiA9IGNvcmUuc3BhblRvSlNPTihzcGFuKTtcbiAgICAgICAgaWYgKF9vcHRpb25hbENoYWluKFtzcGFuSlNPTiwgJ2FjY2VzcycsIF8zID0+IF8zLmRlc2NyaXB0aW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNC5zdGFydHNXaXRoLCAnY2FsbCcsIF81ID0+IF81KCdwcmlzbWE6JyldKSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwucHJpc21hJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbiBQcmlzbWEgdjUuMjIrLCB0aGUgYGRiLnN5c3RlbWAgYXR0cmlidXRlIGlzIGF1dG9tYXRpY2FsbHkgc2V0XG4gICAgICAgIC8vIE9uIG9sZGVyIHZlcnNpb25zLCB0aGlzIGlzIG1pc3NpbmcsIHNvIHdlIGFkZCBpdCBoZXJlXG4gICAgICAgIGlmIChzcGFuSlNPTi5kZXNjcmlwdGlvbiA9PT0gJ3ByaXNtYTplbmdpbmU6ZGJfcXVlcnknICYmICFfb3B0aW9uYWxDaGFpbihbc3BhbkpTT04sICdhY2Nlc3MnLCBfNiA9PiBfNi5kYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNyA9PiBfN1snZGIuc3lzdGVtJ11dKSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdkYi5zeXN0ZW0nLCAncHJpc21hJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbi8qKlxuICogQWRkcyBTZW50cnkgdHJhY2luZyBpbnN0cnVtZW50YXRpb24gZm9yIHRoZSBbcHJpc21hXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9wcmlzbWEpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2BwcmlzbWFJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9wcmlzbWEvKS5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIE1ha2Ugc3VyZSBgcHJldmlld0ZlYXR1cmVzID0gW1widHJhY2luZ1wiXWAgaXMgc2V0IGluIHRoZSBwcmlzbWEgY2xpZW50IGdlbmVyYXRvciBibG9jay4gU2VlIHRoZVxuICogW3ByaXNtYSBkb2NzXShodHRwczovL3d3dy5wcmlzbWEuaW8vZG9jcy9jb25jZXB0cy9jb21wb25lbnRzL3ByaXNtYS1jbGllbnQvb3BlbnRlbGVtZXRyeS10cmFjaW5nKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIGBgYHByaXNtYVxuICogZ2VuZXJhdG9yIGNsaWVudCB7XG4gKiAgcHJvdmlkZXIgPSBcInByaXNtYS1jbGllbnQtanNcIlxuICogIHByZXZpZXdGZWF0dXJlcyA9IFtcInRyYWNpbmdcIl1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZW4geW91IGNhbiB1c2UgdGhlIGludGVncmF0aW9uIGxpa2UgdGhpczpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnByaXNtYUludGVncmF0aW9uKCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuY29uc3QgcHJpc21hSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9wcmlzbWFJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFByaXNtYSA9IGluc3RydW1lbnRQcmlzbWE7XG5leHBvcnRzLnByaXNtYUludGVncmF0aW9uID0gcHJpc21hSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmlzbWEuanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwcmlzbWFJbnN0cnVtZW50YXRpb24iLCJjb3JlIiwiaW5zdHJ1bWVudCIsIklOVEVHUkFUSU9OX05BTUUiLCJpbnN0cnVtZW50UHJpc21hIiwiZ2VuZXJhdGVJbnN0cnVtZW50T25jZSIsIkVzbUludGVyb3BQcmlzbWFJbnN0cnVtZW50YXRpb24iLCJfIiwiZGVmYXVsdCIsIl8yIiwiUHJpc21hSW5zdHJ1bWVudGF0aW9uIiwiX3ByaXNtYUludGVncmF0aW9uIiwibmFtZSIsInNldHVwT25jZSIsInNldHVwIiwiY2xpZW50Iiwib24iLCJzcGFuIiwic3BhbkpTT04iLCJzcGFuVG9KU09OIiwiXzMiLCJkZXNjcmlwdGlvbiIsIl80Iiwic3RhcnRzV2l0aCIsIl81Iiwic2V0QXR0cmlidXRlIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4iLCJfNiIsImRhdGEiLCJfNyIsInByaXNtYUludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/prisma.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationIoredis = __webpack_require__(/*! @opentelemetry/instrumentation-ioredis */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-ioredis/build/src/index.js\");\nconst instrumentationRedis4 = __webpack_require__(/*! @opentelemetry/instrumentation-redis-4 */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-redis-4/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst redisCache = __webpack_require__(/*! ../../utils/redisCache.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/redisCache.js\");\nconst INTEGRATION_NAME = 'Redis';\nlet _redisOptions = {};\nconst cacheResponseHook = (span, redisCommand, cmdArgs, response) => {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.redis');\n  const safeKey = redisCache.getCacheKeySafely(redisCommand, cmdArgs);\n  const cacheOperation = redisCache.getCacheOperation(redisCommand);\n  if (!safeKey || !cacheOperation || !_optionalChain([_redisOptions, 'optionalAccess', _ => _.cachePrefixes]) || !redisCache.shouldConsiderForCache(redisCommand, safeKey, _redisOptions.cachePrefixes)) {\n    // not relevant for cache\n    return;\n  }\n\n  // otel/ioredis seems to be using the old standard, as there was a change to those params: https://github.com/open-telemetry/opentelemetry-specification/issues/3199\n  // We are using params based on the docs: https://opentelemetry.io/docs/specs/semconv/attributes-registry/network/\n  const networkPeerAddress = _optionalChain([core.spanToJSON, 'call', _2 => _2(span), 'access', _3 => _3.data, 'optionalAccess', _4 => _4['net.peer.name']]);\n  const networkPeerPort = _optionalChain([core.spanToJSON, 'call', _5 => _5(span), 'access', _6 => _6.data, 'optionalAccess', _7 => _7['net.peer.port']]);\n  if (networkPeerPort && networkPeerAddress) {\n    span.setAttributes({\n      'network.peer.address': networkPeerAddress,\n      'network.peer.port': networkPeerPort\n    });\n  }\n  const cacheItemSize = redisCache.calculateCacheItemSize(response);\n  if (cacheItemSize) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, cacheItemSize);\n  }\n  if (redisCache.isInCommands(redisCache.GET_COMMANDS, redisCommand) && cacheItemSize !== undefined) {\n    span.setAttribute(core.SEMANTIC_ATTRIBUTE_CACHE_HIT, cacheItemSize > 0);\n  }\n  span.setAttributes({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: cacheOperation,\n    [core.SEMANTIC_ATTRIBUTE_CACHE_KEY]: safeKey\n  });\n  const spanDescription = safeKey.join(', ');\n  span.updateName(core.truncate(spanDescription, 1024));\n};\nconst instrumentIORedis = instrument.generateInstrumentOnce('IORedis', () => {\n  return new instrumentationIoredis.IORedisInstrumentation({\n    responseHook: cacheResponseHook\n  });\n});\nconst instrumentRedis4 = instrument.generateInstrumentOnce('Redis-4', () => {\n  return new instrumentationRedis4.RedisInstrumentation({\n    responseHook: cacheResponseHook\n  });\n});\n\n/** To be able to preload all Redis OTel instrumentations with just one ID (\"Redis\"), all the instrumentations are generated in this one function  */\nconst instrumentRedis = Object.assign(() => {\n  instrumentIORedis();\n  instrumentRedis4();\n\n  // todo: implement them gradually\n  // new LegacyRedisInstrumentation({}),\n}, {\n  id: INTEGRATION_NAME\n});\nconst _redisIntegration = (options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      _redisOptions = options;\n      instrumentRedis();\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [redis](https://www.npmjs.com/package/redis) and\n * [ioredis](https://www.npmjs.com/package/ioredis) libraries.\n *\n * For more information, see the [`redisIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/redis/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.redisIntegration()],\n * });\n * ```\n */\nconst redisIntegration = core.defineIntegration(_redisIntegration);\nexports.instrumentRedis = instrumentRedis;\nexports.redisIntegration = redisIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvcmVkaXMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJO0VBQ0ZBO0FBQ0YsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFFM0JDLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsc0JBQXNCLEdBQUdMLG1CQUFPLENBQUMscUlBQXdDLENBQUM7QUFDaEYsTUFBTU0scUJBQXFCLEdBQUdOLG1CQUFPLENBQUMscUlBQXdDLENBQUM7QUFDL0UsTUFBTU8sSUFBSSxHQUFHUCxtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFDcEMsTUFBTVEsVUFBVSxHQUFHUixtQkFBTyxDQUFDLHVHQUEwQixDQUFDO0FBQ3RELE1BQU1TLFVBQVUsR0FBR1QsbUJBQU8sQ0FBQyx5R0FBMkIsQ0FBQztBQUV2RCxNQUFNVSxnQkFBZ0IsR0FBRyxPQUFPO0FBRWhDLElBQUlDLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFFdEIsTUFBTUMsaUJBQWlCLEdBQUdBLENBQUNDLElBQUksRUFBRUMsWUFBWSxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsS0FBSztFQUNuRUgsSUFBSSxDQUFDSSxZQUFZLENBQUNWLElBQUksQ0FBQ1csZ0NBQWdDLEVBQUUsb0JBQW9CLENBQUM7RUFFOUUsTUFBTUMsT0FBTyxHQUFHVixVQUFVLENBQUNXLGlCQUFpQixDQUFDTixZQUFZLEVBQUVDLE9BQU8sQ0FBQztFQUNuRSxNQUFNTSxjQUFjLEdBQUdaLFVBQVUsQ0FBQ2EsaUJBQWlCLENBQUNSLFlBQVksQ0FBQztFQUVqRSxJQUNFLENBQUNLLE9BQU8sSUFDUixDQUFDRSxjQUFjLElBQ2YsQ0FBQ3RCLGNBQWMsQ0FBQyxDQUFDWSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUVZLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxhQUFhLENBQUMsQ0FBQyxJQUN4RSxDQUFDZixVQUFVLENBQUNnQixzQkFBc0IsQ0FBQ1gsWUFBWSxFQUFFSyxPQUFPLEVBQUVSLGFBQWEsQ0FBQ2EsYUFBYSxDQUFDLEVBQ3RGO0lBQ0E7SUFDQTtFQUNGOztFQUVBO0VBQ0E7RUFDQSxNQUFNRSxrQkFBa0IsR0FBRzNCLGNBQWMsQ0FBQyxDQUFDUSxJQUFJLENBQUNvQixVQUFVLEVBQUUsTUFBTSxFQUFFQyxFQUFFLElBQUlBLEVBQUUsQ0FBQ2YsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFZ0IsRUFBRSxJQUFJQSxFQUFFLENBQUNDLElBQUksRUFBRSxnQkFBZ0IsRUFBRUMsRUFBRSxJQUFJQSxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztFQUMxSixNQUFNQyxlQUFlLEdBQUdqQyxjQUFjLENBQUMsQ0FBQ1EsSUFBSSxDQUFDb0IsVUFBVSxFQUFFLE1BQU0sRUFBRU0sRUFBRSxJQUFJQSxFQUFFLENBQUNwQixJQUFJLENBQUMsRUFBRSxRQUFRLEVBQUVxQixFQUFFLElBQUlBLEVBQUUsQ0FBQ0osSUFBSSxFQUFFLGdCQUFnQixFQUFFSyxFQUFFLElBQUlBLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0VBQ3ZKLElBQUlILGVBQWUsSUFBSU4sa0JBQWtCLEVBQUU7SUFDekNiLElBQUksQ0FBQ3VCLGFBQWEsQ0FBQztNQUFFLHNCQUFzQixFQUFFVixrQkFBa0I7TUFBRSxtQkFBbUIsRUFBRU07SUFBZ0IsQ0FBQyxDQUFDO0VBQzFHO0VBRUEsTUFBTUssYUFBYSxHQUFHNUIsVUFBVSxDQUFDNkIsc0JBQXNCLENBQUN0QixRQUFRLENBQUM7RUFFakUsSUFBSXFCLGFBQWEsRUFBRTtJQUNqQnhCLElBQUksQ0FBQ0ksWUFBWSxDQUFDVixJQUFJLENBQUNnQyxrQ0FBa0MsRUFBRUYsYUFBYSxDQUFDO0VBQzNFO0VBRUEsSUFBSTVCLFVBQVUsQ0FBQytCLFlBQVksQ0FBQy9CLFVBQVUsQ0FBQ2dDLFlBQVksRUFBRTNCLFlBQVksQ0FBQyxJQUFJdUIsYUFBYSxLQUFLSyxTQUFTLEVBQUU7SUFDakc3QixJQUFJLENBQUNJLFlBQVksQ0FBQ1YsSUFBSSxDQUFDb0MsNEJBQTRCLEVBQUVOLGFBQWEsR0FBRyxDQUFDLENBQUM7RUFDekU7RUFFQXhCLElBQUksQ0FBQ3VCLGFBQWEsQ0FBQztJQUNqQixDQUFDN0IsSUFBSSxDQUFDcUMsNEJBQTRCLEdBQUd2QixjQUFjO0lBQ25ELENBQUNkLElBQUksQ0FBQ3NDLDRCQUE0QixHQUFHMUI7RUFDdkMsQ0FBQyxDQUFDO0VBRUYsTUFBTTJCLGVBQWUsR0FBRzNCLE9BQU8sQ0FBQzRCLElBQUksQ0FBQyxJQUFJLENBQUM7RUFFMUNsQyxJQUFJLENBQUNtQyxVQUFVLENBQUN6QyxJQUFJLENBQUMwQyxRQUFRLENBQUNILGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2RCxDQUFDO0FBRUQsTUFBTUksaUJBQWlCLEdBQUcxQyxVQUFVLENBQUMyQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsTUFBTTtFQUMzRSxPQUFPLElBQUk5QyxzQkFBc0IsQ0FBQytDLHNCQUFzQixDQUFDO0lBQ3ZEQyxZQUFZLEVBQUV6QztFQUNoQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNMEMsZ0JBQWdCLEdBQUc5QyxVQUFVLENBQUMyQyxzQkFBc0IsQ0FBQyxTQUFTLEVBQUUsTUFBTTtFQUMxRSxPQUFPLElBQUk3QyxxQkFBcUIsQ0FBQ2lELG9CQUFvQixDQUFDO0lBQ3BERixZQUFZLEVBQUV6QztFQUNoQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7O0FBRUY7QUFDQSxNQUFNNEMsZUFBZSxHQUFHdkQsTUFBTSxDQUFDd0QsTUFBTSxDQUNuQyxNQUFNO0VBQ0pQLGlCQUFpQixDQUFDLENBQUM7RUFDbkJJLGdCQUFnQixDQUFDLENBQUM7O0VBRWxCO0VBQ0E7QUFDRixDQUFDLEVBQ0Q7RUFBRUksRUFBRSxFQUFFaEQ7QUFBaUIsQ0FDekIsQ0FBQztBQUVELE1BQU1pRCxpQkFBaUIsR0FBSUEsQ0FBQ0MsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLO0VBQzNDLE9BQU87SUFDTEMsSUFBSSxFQUFFbkQsZ0JBQWdCO0lBQ3RCb0QsU0FBU0EsQ0FBQSxFQUFHO01BQ1ZuRCxhQUFhLEdBQUdpRCxPQUFPO01BQ3ZCSixlQUFlLENBQUMsQ0FBQztJQUNuQjtFQUNGLENBQUM7QUFDSCxDQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1PLGdCQUFnQixHQUFHeEQsSUFBSSxDQUFDeUQsaUJBQWlCLENBQUNMLGlCQUFpQixDQUFDO0FBRWxFeEQsdUJBQXVCLEdBQUdxRCxlQUFlO0FBQ3pDckQsd0JBQXdCLEdBQUc0RCxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy9yZWRpcy5qcz85ZGUzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbklvcmVkaXMgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taW9yZWRpcycpO1xuY29uc3QgaW5zdHJ1bWVudGF0aW9uUmVkaXM0ID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLXJlZGlzLTQnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IHJlZGlzQ2FjaGUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9yZWRpc0NhY2hlLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnUmVkaXMnO1xuXG5sZXQgX3JlZGlzT3B0aW9ucyA9IHt9O1xuXG5jb25zdCBjYWNoZVJlc3BvbnNlSG9vayA9IChzcGFuLCByZWRpc0NvbW1hbmQsIGNtZEFyZ3MsIHJlc3BvbnNlKSA9PiB7XG4gIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwucmVkaXMnKTtcblxuICBjb25zdCBzYWZlS2V5ID0gcmVkaXNDYWNoZS5nZXRDYWNoZUtleVNhZmVseShyZWRpc0NvbW1hbmQsIGNtZEFyZ3MpO1xuICBjb25zdCBjYWNoZU9wZXJhdGlvbiA9IHJlZGlzQ2FjaGUuZ2V0Q2FjaGVPcGVyYXRpb24ocmVkaXNDb21tYW5kKTtcblxuICBpZiAoXG4gICAgIXNhZmVLZXkgfHxcbiAgICAhY2FjaGVPcGVyYXRpb24gfHxcbiAgICAhX29wdGlvbmFsQ2hhaW4oW19yZWRpc09wdGlvbnMsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5jYWNoZVByZWZpeGVzXSkgfHxcbiAgICAhcmVkaXNDYWNoZS5zaG91bGRDb25zaWRlckZvckNhY2hlKHJlZGlzQ29tbWFuZCwgc2FmZUtleSwgX3JlZGlzT3B0aW9ucy5jYWNoZVByZWZpeGVzKVxuICApIHtcbiAgICAvLyBub3QgcmVsZXZhbnQgZm9yIGNhY2hlXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gb3RlbC9pb3JlZGlzIHNlZW1zIHRvIGJlIHVzaW5nIHRoZSBvbGQgc3RhbmRhcmQsIGFzIHRoZXJlIHdhcyBhIGNoYW5nZSB0byB0aG9zZSBwYXJhbXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LXNwZWNpZmljYXRpb24vaXNzdWVzLzMxOTlcbiAgLy8gV2UgYXJlIHVzaW5nIHBhcmFtcyBiYXNlZCBvbiB0aGUgZG9jczogaHR0cHM6Ly9vcGVudGVsZW1ldHJ5LmlvL2RvY3Mvc3BlY3Mvc2VtY29udi9hdHRyaWJ1dGVzLXJlZ2lzdHJ5L25ldHdvcmsvXG4gIGNvbnN0IG5ldHdvcmtQZWVyQWRkcmVzcyA9IF9vcHRpb25hbENoYWluKFtjb3JlLnNwYW5Ub0pTT04sICdjYWxsJywgXzIgPT4gXzIoc3BhbiksICdhY2Nlc3MnLCBfMyA9PiBfMy5kYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNFsnbmV0LnBlZXIubmFtZSddXSk7XG4gIGNvbnN0IG5ldHdvcmtQZWVyUG9ydCA9IF9vcHRpb25hbENoYWluKFtjb3JlLnNwYW5Ub0pTT04sICdjYWxsJywgXzUgPT4gXzUoc3BhbiksICdhY2Nlc3MnLCBfNiA9PiBfNi5kYXRhLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNyA9PiBfN1snbmV0LnBlZXIucG9ydCddXSk7XG4gIGlmIChuZXR3b3JrUGVlclBvcnQgJiYgbmV0d29ya1BlZXJBZGRyZXNzKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGVzKHsgJ25ldHdvcmsucGVlci5hZGRyZXNzJzogbmV0d29ya1BlZXJBZGRyZXNzLCAnbmV0d29yay5wZWVyLnBvcnQnOiBuZXR3b3JrUGVlclBvcnQgfSk7XG4gIH1cblxuICBjb25zdCBjYWNoZUl0ZW1TaXplID0gcmVkaXNDYWNoZS5jYWxjdWxhdGVDYWNoZUl0ZW1TaXplKHJlc3BvbnNlKTtcblxuICBpZiAoY2FjaGVJdGVtU2l6ZSkge1xuICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRSwgY2FjaGVJdGVtU2l6ZSk7XG4gIH1cblxuICBpZiAocmVkaXNDYWNoZS5pc0luQ29tbWFuZHMocmVkaXNDYWNoZS5HRVRfQ09NTUFORFMsIHJlZGlzQ29tbWFuZCkgJiYgY2FjaGVJdGVtU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElULCBjYWNoZUl0ZW1TaXplID4gMCk7XG4gIH1cblxuICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdOiBjYWNoZU9wZXJhdGlvbixcbiAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZXTogc2FmZUtleSxcbiAgfSk7XG5cbiAgY29uc3Qgc3BhbkRlc2NyaXB0aW9uID0gc2FmZUtleS5qb2luKCcsICcpO1xuXG4gIHNwYW4udXBkYXRlTmFtZShjb3JlLnRydW5jYXRlKHNwYW5EZXNjcmlwdGlvbiwgMTAyNCkpO1xufTtcblxuY29uc3QgaW5zdHJ1bWVudElPUmVkaXMgPSBpbnN0cnVtZW50LmdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoJ0lPUmVkaXMnLCAoKSA9PiB7XG4gIHJldHVybiBuZXcgaW5zdHJ1bWVudGF0aW9uSW9yZWRpcy5JT1JlZGlzSW5zdHJ1bWVudGF0aW9uKHtcbiAgICByZXNwb25zZUhvb2s6IGNhY2hlUmVzcG9uc2VIb29rLFxuICB9KTtcbn0pO1xuXG5jb25zdCBpbnN0cnVtZW50UmVkaXM0ID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKCdSZWRpcy00JywgKCkgPT4ge1xuICByZXR1cm4gbmV3IGluc3RydW1lbnRhdGlvblJlZGlzNC5SZWRpc0luc3RydW1lbnRhdGlvbih7XG4gICAgcmVzcG9uc2VIb29rOiBjYWNoZVJlc3BvbnNlSG9vayxcbiAgfSk7XG59KTtcblxuLyoqIFRvIGJlIGFibGUgdG8gcHJlbG9hZCBhbGwgUmVkaXMgT1RlbCBpbnN0cnVtZW50YXRpb25zIHdpdGgganVzdCBvbmUgSUQgKFwiUmVkaXNcIiksIGFsbCB0aGUgaW5zdHJ1bWVudGF0aW9ucyBhcmUgZ2VuZXJhdGVkIGluIHRoaXMgb25lIGZ1bmN0aW9uICAqL1xuY29uc3QgaW5zdHJ1bWVudFJlZGlzID0gT2JqZWN0LmFzc2lnbihcbiAgKCkgPT4ge1xuICAgIGluc3RydW1lbnRJT1JlZGlzKCk7XG4gICAgaW5zdHJ1bWVudFJlZGlzNCgpO1xuXG4gICAgLy8gdG9kbzogaW1wbGVtZW50IHRoZW0gZ3JhZHVhbGx5XG4gICAgLy8gbmV3IExlZ2FjeVJlZGlzSW5zdHJ1bWVudGF0aW9uKHt9KSxcbiAgfSxcbiAgeyBpZDogSU5URUdSQVRJT05fTkFNRSB9LFxuKTtcblxuY29uc3QgX3JlZGlzSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgX3JlZGlzT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBpbnN0cnVtZW50UmVkaXMoKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3JlZGlzXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9yZWRpcykgYW5kXG4gKiBbaW9yZWRpc10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaW9yZWRpcykgbGlicmFyaWVzLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIFtgcmVkaXNJbnRlZ3JhdGlvbmAgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvbm9kZS9jb25maWd1cmF0aW9uL2ludGVncmF0aW9ucy9yZWRpcy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnJlZGlzSW50ZWdyYXRpb24oKV0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCByZWRpc0ludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbihfcmVkaXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFJlZGlzID0gaW5zdHJ1bWVudFJlZGlzO1xuZXhwb3J0cy5yZWRpc0ludGVncmF0aW9uID0gcmVkaXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZGlzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9vcHRpb25hbENoYWluIiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW5zdHJ1bWVudGF0aW9uSW9yZWRpcyIsImluc3RydW1lbnRhdGlvblJlZGlzNCIsImNvcmUiLCJpbnN0cnVtZW50IiwicmVkaXNDYWNoZSIsIklOVEVHUkFUSU9OX05BTUUiLCJfcmVkaXNPcHRpb25zIiwiY2FjaGVSZXNwb25zZUhvb2siLCJzcGFuIiwicmVkaXNDb21tYW5kIiwiY21kQXJncyIsInJlc3BvbnNlIiwic2V0QXR0cmlidXRlIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4iLCJzYWZlS2V5IiwiZ2V0Q2FjaGVLZXlTYWZlbHkiLCJjYWNoZU9wZXJhdGlvbiIsImdldENhY2hlT3BlcmF0aW9uIiwiXyIsImNhY2hlUHJlZml4ZXMiLCJzaG91bGRDb25zaWRlckZvckNhY2hlIiwibmV0d29ya1BlZXJBZGRyZXNzIiwic3BhblRvSlNPTiIsIl8yIiwiXzMiLCJkYXRhIiwiXzQiLCJuZXR3b3JrUGVlclBvcnQiLCJfNSIsIl82IiwiXzciLCJzZXRBdHRyaWJ1dGVzIiwiY2FjaGVJdGVtU2l6ZSIsImNhbGN1bGF0ZUNhY2hlSXRlbVNpemUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSVRFTV9TSVpFIiwiaXNJbkNvbW1hbmRzIiwiR0VUX0NPTU1BTkRTIiwidW5kZWZpbmVkIiwiU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVCIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AiLCJTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZIiwic3BhbkRlc2NyaXB0aW9uIiwiam9pbiIsInVwZGF0ZU5hbWUiLCJ0cnVuY2F0ZSIsImluc3RydW1lbnRJT1JlZGlzIiwiZ2VuZXJhdGVJbnN0cnVtZW50T25jZSIsIklPUmVkaXNJbnN0cnVtZW50YXRpb24iLCJyZXNwb25zZUhvb2siLCJpbnN0cnVtZW50UmVkaXM0IiwiUmVkaXNJbnN0cnVtZW50YXRpb24iLCJpbnN0cnVtZW50UmVkaXMiLCJhc3NpZ24iLCJpZCIsIl9yZWRpc0ludGVncmF0aW9uIiwib3B0aW9ucyIsIm5hbWUiLCJzZXR1cE9uY2UiLCJyZWRpc0ludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/redis.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentationTedious = __webpack_require__(/*! @opentelemetry/instrumentation-tedious */ \"(instrument)/./node_modules/@opentelemetry/instrumentation-tedious/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst TEDIUS_INSTRUMENTED_METHODS = new Set(['callProcedure', 'execSql', 'execSqlBatch', 'execBulkLoad', 'prepare', 'execute']);\nconst INTEGRATION_NAME = 'Tedious';\nconst instrumentTedious = instrument.generateInstrumentOnce(INTEGRATION_NAME, () => new instrumentationTedious.TediousInstrumentation({}));\nconst _tediousIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      instrumentTedious();\n    },\n    setup(client) {\n      client.on('spanStart', span => {\n        const {\n          description,\n          data\n        } = core.spanToJSON(span);\n        // Tedius integration always set a span name and `db.system` attribute to `mssql`.\n        if (!description || _optionalChain([data, 'optionalAccess', _ => _['db.system']]) !== 'mssql') {\n          return;\n        }\n        const operation = _optionalChain([description, 'optionalAccess', _2 => _2.split, 'call', _3 => _3(' '), 'access', _4 => _4[0]]) || '';\n        if (TEDIUS_INSTRUMENTED_METHODS.has(operation)) {\n          span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto.db.otel.tedious');\n        }\n      });\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [tedious](https://www.npmjs.com/package/tedious) library.\n *\n * For more information, see the [`tediousIntegration` documentation](https://docs.sentry.io/platforms/javascript/guides/node/configuration/integrations/tedious/).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.tediousIntegration()],\n * });\n * ```\n */\nconst tediousIntegration = core.defineIntegration(_tediousIntegration);\nexports.instrumentTedious = instrumentTedious;\nexports.tediousIntegration = tediousIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3RyYWNpbmcvdGVkaW91cy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLElBQUk7RUFDRkE7QUFDRixDQUFDLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUUzQkMsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxzQkFBc0IsR0FBR0wsbUJBQU8sQ0FBQyxxSUFBd0MsQ0FBQztBQUNoRixNQUFNTSxJQUFJLEdBQUdOLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNTyxVQUFVLEdBQUdQLG1CQUFPLENBQUMsdUdBQTBCLENBQUM7QUFFdEQsTUFBTVEsMkJBQTJCLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQzFDLGVBQWUsRUFDZixTQUFTLEVBQ1QsY0FBYyxFQUNkLGNBQWMsRUFDZCxTQUFTLEVBQ1QsU0FBUyxDQUNWLENBQUM7QUFFRixNQUFNQyxnQkFBZ0IsR0FBRyxTQUFTO0FBRWxDLE1BQU1DLGlCQUFpQixHQUFHSixVQUFVLENBQUNLLHNCQUFzQixDQUFDRixnQkFBZ0IsRUFBRSxNQUFNLElBQUlMLHNCQUFzQixDQUFDUSxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTFJLE1BQU1DLG1CQUFtQixHQUFJQSxDQUFBLEtBQU07RUFDakMsT0FBTztJQUNMQyxJQUFJLEVBQUVMLGdCQUFnQjtJQUN0Qk0sU0FBU0EsQ0FBQSxFQUFHO01BQ1ZMLGlCQUFpQixDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVETSxLQUFLQSxDQUFDQyxNQUFNLEVBQUU7TUFDWkEsTUFBTSxDQUFDQyxFQUFFLENBQUMsV0FBVyxFQUFFQyxJQUFJLElBQUk7UUFDN0IsTUFBTTtVQUFFQyxXQUFXO1VBQUVDO1FBQUssQ0FBQyxHQUFHaEIsSUFBSSxDQUFDaUIsVUFBVSxDQUFDSCxJQUFJLENBQUM7UUFDbkQ7UUFDQSxJQUFJLENBQUNDLFdBQVcsSUFBSXRCLGNBQWMsQ0FBQyxDQUFDdUIsSUFBSSxFQUFFLGdCQUFnQixFQUFFRSxDQUFDLElBQUlBLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxFQUFFO1VBQzdGO1FBQ0Y7UUFFQSxNQUFNQyxTQUFTLEdBQUcxQixjQUFjLENBQUMsQ0FBQ3NCLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRUssRUFBRSxJQUFJQSxFQUFFLENBQUNDLEtBQUssRUFBRSxNQUFNLEVBQUVDLEVBQUUsSUFBSUEsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBRUMsRUFBRSxJQUFJQSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7UUFDckksSUFBSXJCLDJCQUEyQixDQUFDc0IsR0FBRyxDQUFDTCxTQUFTLENBQUMsRUFBRTtVQUM5Q0wsSUFBSSxDQUFDVyxZQUFZLENBQUN6QixJQUFJLENBQUMwQixnQ0FBZ0MsRUFBRSxzQkFBc0IsQ0FBQztRQUNsRjtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGtCQUFrQixHQUFHM0IsSUFBSSxDQUFDNEIsaUJBQWlCLENBQUNwQixtQkFBbUIsQ0FBQztBQUV0RVgseUJBQXlCLEdBQUdRLGlCQUFpQjtBQUM3Q1IsMEJBQTBCLEdBQUc4QixrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvdHJhY2luZy90ZWRpb3VzLmpzP2FhZjMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHtcbiAgX29wdGlvbmFsQ2hhaW5cbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uVGVkaW91cyA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi10ZWRpb3VzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5cbmNvbnN0IFRFRElVU19JTlNUUlVNRU5URURfTUVUSE9EUyA9IG5ldyBTZXQoW1xuICAnY2FsbFByb2NlZHVyZScsXG4gICdleGVjU3FsJyxcbiAgJ2V4ZWNTcWxCYXRjaCcsXG4gICdleGVjQnVsa0xvYWQnLFxuICAncHJlcGFyZScsXG4gICdleGVjdXRlJyxcbl0pO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1RlZGlvdXMnO1xuXG5jb25zdCBpbnN0cnVtZW50VGVkaW91cyA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShJTlRFR1JBVElPTl9OQU1FLCAoKSA9PiBuZXcgaW5zdHJ1bWVudGF0aW9uVGVkaW91cy5UZWRpb3VzSW5zdHJ1bWVudGF0aW9uKHt9KSk7XG5cbmNvbnN0IF90ZWRpb3VzSW50ZWdyYXRpb24gPSAoKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudFRlZGlvdXMoKTtcbiAgICB9LFxuXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBjbGllbnQub24oJ3NwYW5TdGFydCcsIHNwYW4gPT4ge1xuICAgICAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCBkYXRhIH0gPSBjb3JlLnNwYW5Ub0pTT04oc3Bhbik7XG4gICAgICAgIC8vIFRlZGl1cyBpbnRlZ3JhdGlvbiBhbHdheXMgc2V0IGEgc3BhbiBuYW1lIGFuZCBgZGIuc3lzdGVtYCBhdHRyaWJ1dGUgdG8gYG1zc3FsYC5cbiAgICAgICAgaWYgKCFkZXNjcmlwdGlvbiB8fCBfb3B0aW9uYWxDaGFpbihbZGF0YSwgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfWydkYi5zeXN0ZW0nXV0pICE9PSAnbXNzcWwnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gX29wdGlvbmFsQ2hhaW4oW2Rlc2NyaXB0aW9uLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5zcGxpdCwgJ2NhbGwnLCBfMyA9PiBfMygnICcpLCAnYWNjZXNzJywgXzQgPT4gXzRbMF1dKSB8fCAnJztcbiAgICAgICAgaWYgKFRFRElVU19JTlNUUlVNRU5URURfTUVUSE9EUy5oYXMob3BlcmF0aW9uKSkge1xuICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sICdhdXRvLmRiLm90ZWwudGVkaW91cycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEFkZHMgU2VudHJ5IHRyYWNpbmcgaW5zdHJ1bWVudGF0aW9uIGZvciB0aGUgW3RlZGlvdXNdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3RlZGlvdXMpIGxpYnJhcnkuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgW2B0ZWRpb3VzSW50ZWdyYXRpb25gIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25vZGUvY29uZmlndXJhdGlvbi9pbnRlZ3JhdGlvbnMvdGVkaW91cy8pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBTZW50cnkgPSByZXF1aXJlKCdAc2VudHJ5L25vZGUnKTtcbiAqXG4gKiBTZW50cnkuaW5pdCh7XG4gKiAgaW50ZWdyYXRpb25zOiBbU2VudHJ5LnRlZGlvdXNJbnRlZ3JhdGlvbigpXSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmNvbnN0IHRlZGlvdXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX3RlZGlvdXNJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuaW5zdHJ1bWVudFRlZGlvdXMgPSBpbnN0cnVtZW50VGVkaW91cztcbmV4cG9ydHMudGVkaW91c0ludGVncmF0aW9uID0gdGVkaW91c0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVkaW91cy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfb3B0aW9uYWxDaGFpbiIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluc3RydW1lbnRhdGlvblRlZGlvdXMiLCJjb3JlIiwiaW5zdHJ1bWVudCIsIlRFRElVU19JTlNUUlVNRU5URURfTUVUSE9EUyIsIlNldCIsIklOVEVHUkFUSU9OX05BTUUiLCJpbnN0cnVtZW50VGVkaW91cyIsImdlbmVyYXRlSW5zdHJ1bWVudE9uY2UiLCJUZWRpb3VzSW5zdHJ1bWVudGF0aW9uIiwiX3RlZGlvdXNJbnRlZ3JhdGlvbiIsIm5hbWUiLCJzZXR1cE9uY2UiLCJzZXR1cCIsImNsaWVudCIsIm9uIiwic3BhbiIsImRlc2NyaXB0aW9uIiwiZGF0YSIsInNwYW5Ub0pTT04iLCJfIiwib3BlcmF0aW9uIiwiXzIiLCJzcGxpdCIsIl8zIiwiXzQiLCJoYXMiLCJzZXRBdHRyaWJ1dGUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiIsInRlZGlvdXNJbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/tedious.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../../otel/instrument.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\");\nconst addOriginToSpan = __webpack_require__(/*! ../../../utils/addOriginToSpan.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\");\nconst instrumentation = __webpack_require__(/*! ./instrumentation.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/instrumentation.js\");\n\n/* eslint-disable complexity */\n\nconst instrumentVercelAi = instrument.generateInstrumentOnce('vercelAI', () => new instrumentation.SentryVercelAiInstrumentation({}));\nconst _vercelAIIntegration = () => {\n  return {\n    name: 'vercelAI',\n    setupOnce() {\n      instrumentVercelAi();\n    },\n    processEvent(event) {\n      if (event.type === 'transaction' && _optionalChain([event, 'access', _ => _.spans, 'optionalAccess', _2 => _2.length])) {\n        for (const span of event.spans) {\n          const {\n            data: attributes,\n            description: name\n          } = span;\n          if (!attributes || !name || span.origin !== 'auto.vercelai.otel') {\n            continue;\n          }\n\n          // attributes around token usage can only be set on span finish\n          span.data = span.data || {};\n          if (attributes['ai.usage.completionTokens'] != undefined) {\n            span.data['ai.completion_tokens.used'] = attributes['ai.usage.completionTokens'];\n          }\n          if (attributes['ai.usage.promptTokens'] != undefined) {\n            span.data['ai.prompt_tokens.used'] = attributes['ai.usage.promptTokens'];\n          }\n          if (attributes['ai.usage.completionTokens'] != undefined && attributes['ai.usage.promptTokens'] != undefined) {\n            span.data['ai.total_tokens.used'] = attributes['ai.usage.completionTokens'] + attributes['ai.usage.promptTokens'];\n          }\n        }\n      }\n      return event;\n    },\n    setup(client) {\n      client.on('spanStart', span => {\n        if (!instrumentation.sentryVercelAiPatched) {\n          return;\n        }\n        const {\n          data: attributes,\n          description: name\n        } = core.spanToJSON(span);\n        if (!attributes || !name) {\n          return;\n        }\n\n        // The id of the model\n        const aiModelId = attributes['ai.model.id'];\n\n        // the provider of the model\n        const aiModelProvider = attributes['ai.model.provider'];\n\n        // both of these must be defined for the integration to work\n        if (!aiModelId || !aiModelProvider) {\n          return;\n        }\n        let isPipelineSpan = false;\n        switch (name) {\n          case 'ai.generateText':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.generateText');\n              isPipelineSpan = true;\n              break;\n            }\n          case 'ai.generateText.doGenerate':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doGenerate');\n              break;\n            }\n          case 'ai.streamText':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.streamText');\n              isPipelineSpan = true;\n              break;\n            }\n          case 'ai.streamText.doStream':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doStream');\n              break;\n            }\n          case 'ai.generateObject':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.generateObject');\n              isPipelineSpan = true;\n              break;\n            }\n          case 'ai.generateObject.doGenerate':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doGenerate');\n              break;\n            }\n          case 'ai.streamObject':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.streamObject');\n              isPipelineSpan = true;\n              break;\n            }\n          case 'ai.streamObject.doStream':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doStream');\n              break;\n            }\n          case 'ai.embed':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.embed');\n              isPipelineSpan = true;\n              break;\n            }\n          case 'ai.embed.doEmbed':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.embeddings');\n              break;\n            }\n          case 'ai.embedMany':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.embedMany');\n              isPipelineSpan = true;\n              break;\n            }\n          case 'ai.embedMany.doEmbed':\n            {\n              span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.embeddings');\n              break;\n            }\n          case 'ai.toolCall':\n          case 'ai.stream.firstChunk':\n          case 'ai.stream.finish':\n            span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run');\n            break;\n        }\n        addOriginToSpan.addOriginToSpan(span, 'auto.vercelai.otel');\n        const nameWthoutAi = name.replace('ai.', '');\n        span.setAttribute('ai.pipeline.name', nameWthoutAi);\n        span.updateName(nameWthoutAi);\n\n        // If a Telemetry name is set and it is a pipeline span, use that as the operation name\n        if (attributes['ai.telemetry.functionId'] && isPipelineSpan) {\n          span.updateName(attributes['ai.telemetry.functionId']);\n          span.setAttribute('ai.pipeline.name', attributes['ai.telemetry.functionId']);\n        }\n        if (attributes['ai.prompt']) {\n          span.setAttribute('ai.input_messages', attributes['ai.prompt']);\n        }\n        if (attributes['ai.model.id']) {\n          span.setAttribute('ai.model_id', attributes['ai.model.id']);\n        }\n        span.setAttribute('ai.streaming', name.includes('stream'));\n      });\n    }\n  };\n};\n\n/**\n * Adds Sentry tracing instrumentation for the [ai](https://www.npmjs.com/package/ai) library.\n *\n * For more information, see the [`ai` documentation](https://sdk.vercel.ai/docs/ai-sdk-core/telemetry).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.vercelAIIntegration()],\n * });\n * ```\n *\n * By default this integration adds tracing support to all `ai` function calls. If you need to disable\n * collecting spans for a specific call, you can do so by setting `experimental_telemetry.isEnabled` to\n * `false` in the first argument of the function call.\n *\n * ```javascript\n * const result = await generateText({\n *   model: openai('gpt-4-turbo'),\n *   experimental_telemetry: { isEnabled: false },\n * });\n * ```\n *\n * If you want to collect inputs and outputs for a specific call, you must specifically opt-in to each\n * function call by setting `experimental_telemetry.recordInputs` and `experimental_telemetry.recordOutputs`\n * to `true`.\n *\n * ```javascript\n * const result = await generateText({\n *  model: openai('gpt-4-turbo'),\n *  experimental_telemetry: { isEnabled: true, recordInputs: true, recordOutputs: true },\n * });\n */\nconst vercelAIIntegration = core.defineIntegration(_vercelAIIntegration);\nexports.instrumentVercelAi = instrumentVercelAi;\nexports.vercelAIIntegration = vercelAIIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/vercelai/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/nodeVersion.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/nodeVersion.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst NODE_VERSION = core.parseSemver(process.versions.node);\nconst NODE_MAJOR = NODE_VERSION.major;\nexports.NODE_MAJOR = NODE_MAJOR;\nexports.NODE_VERSION = NODE_VERSION;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvbm9kZVZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxJQUFJLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUVwQyxNQUFNQyxZQUFZLEdBQUdGLElBQUksQ0FBQ0csV0FBVyxDQUFDQyxPQUFPLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDO0FBQzVELE1BQU1DLFVBQVUsR0FBR0wsWUFBWSxDQUFDTSxLQUFLO0FBRXJDVixrQkFBa0IsR0FBR1MsVUFBVTtBQUMvQlQsb0JBQW9CLEdBQUdJLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy9ub2RlVmVyc2lvbi5qcz9lNzE3Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgTk9ERV9WRVJTSU9OID0gY29yZS5wYXJzZVNlbXZlcihwcm9jZXNzLnZlcnNpb25zLm5vZGUpIDtcbmNvbnN0IE5PREVfTUFKT1IgPSBOT0RFX1ZFUlNJT04ubWFqb3I7XG5cbmV4cG9ydHMuTk9ERV9NQUpPUiA9IE5PREVfTUFKT1I7XG5leHBvcnRzLk5PREVfVkVSU0lPTiA9IE5PREVfVkVSU0lPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGVWZXJzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29yZSIsInJlcXVpcmUiLCJOT0RFX1ZFUlNJT04iLCJwYXJzZVNlbXZlciIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJOT0RFX01BSk9SIiwibWFqb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/nodeVersion.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/otel/contextManager.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/otel/contextManager.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst contextAsyncHooks = __webpack_require__(/*! @opentelemetry/context-async-hooks */ \"(instrument)/./node_modules/@opentelemetry/context-async-hooks/build/src/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/**\n * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n * It ensures that we create a new hub per context, so that the OTEL Context & the Sentry Hub are always in sync.\n *\n * Note that we currently only support AsyncHooks with this,\n * but since this should work for Node 14+ anyhow that should be good enough.\n */\nconst SentryContextManager = opentelemetry.wrapContextManagerClass(contextAsyncHooks.AsyncLocalStorageContextManager);\nexports.SentryContextManager = SentryContextManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9jb250ZXh0TWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLGlCQUFpQixHQUFHQyxtQkFBTyxDQUFDLDZIQUFvQyxDQUFDO0FBQ3ZFLE1BQU1DLGFBQWEsR0FBR0QsbUJBQU8sQ0FBQyxtR0FBdUIsQ0FBQzs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNRSxvQkFBb0IsR0FBR0QsYUFBYSxDQUFDRSx1QkFBdUIsQ0FBQ0osaUJBQWlCLENBQUNLLCtCQUErQixDQUFDO0FBRXJIUCw0QkFBNEIsR0FBR0ssb0JBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9jb250ZXh0TWFuYWdlci5qcz9jMjUzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvbnRleHRBc3luY0hvb2tzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvY29udGV4dC1hc3luYy1ob29rcycpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBjdXN0b20gQ29udGV4dE1hbmFnZXIgZm9yIE9wZW5UZWxlbWV0cnksIHdoaWNoIGV4dGVuZHMgdGhlIGRlZmF1bHQgQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlci5cbiAqIEl0IGVuc3VyZXMgdGhhdCB3ZSBjcmVhdGUgYSBuZXcgaHViIHBlciBjb250ZXh0LCBzbyB0aGF0IHRoZSBPVEVMIENvbnRleHQgJiB0aGUgU2VudHJ5IEh1YiBhcmUgYWx3YXlzIGluIHN5bmMuXG4gKlxuICogTm90ZSB0aGF0IHdlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgQXN5bmNIb29rcyB3aXRoIHRoaXMsXG4gKiBidXQgc2luY2UgdGhpcyBzaG91bGQgd29yayBmb3IgTm9kZSAxNCsgYW55aG93IHRoYXQgc2hvdWxkIGJlIGdvb2QgZW5vdWdoLlxuICovXG5jb25zdCBTZW50cnlDb250ZXh0TWFuYWdlciA9IG9wZW50ZWxlbWV0cnkud3JhcENvbnRleHRNYW5hZ2VyQ2xhc3MoY29udGV4dEFzeW5jSG9va3MuQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlcik7XG5cbmV4cG9ydHMuU2VudHJ5Q29udGV4dE1hbmFnZXIgPSBTZW50cnlDb250ZXh0TWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHRNYW5hZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29udGV4dEFzeW5jSG9va3MiLCJyZXF1aXJlIiwib3BlbnRlbGVtZXRyeSIsIlNlbnRyeUNvbnRleHRNYW5hZ2VyIiwid3JhcENvbnRleHRNYW5hZ2VyQ2xhc3MiLCJBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/otel/contextManager.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/otel/instrument.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/src/index.js\");\n\n/** Exported only for tests. */\nconst INSTRUMENTED = {};\n\n/**\n * Instrument an OpenTelemetry instrumentation once.\n * This will skip running instrumentation again if it was already instrumented.\n */\nfunction generateInstrumentOnce(name, creator) {\n  return Object.assign(options => {\n    const instrumented = INSTRUMENTED[name];\n    if (instrumented) {\n      // If options are provided, ensure we update them\n      if (options) {\n        instrumented.setConfig(options);\n      }\n      return;\n    }\n    const instrumentation$1 = creator(options);\n    INSTRUMENTED[name] = instrumentation$1;\n    instrumentation.registerInstrumentations({\n      instrumentations: [instrumentation$1]\n    });\n  }, {\n    id: name\n  });\n}\nexports.INSTRUMENTED = INSTRUMENTED;\nexports.generateInstrumentOnce = generateInstrumentOnce;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9pbnN0cnVtZW50LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsZUFBZSxHQUFHQyxtQkFBTyxDQUFDLHFIQUFnQyxDQUFDOztBQUVqRTtBQUNBLE1BQU1DLFlBQVksR0FBRyxDQUFDLENBQUM7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Msc0JBQXNCQSxDQUM3QkMsSUFBSSxFQUNKQyxPQUFPLEVBQ1A7RUFDQSxPQUFPVCxNQUFNLENBQUNVLE1BQU0sQ0FDakJDLE9BQU8sSUFBSztJQUNYLE1BQU1DLFlBQVksR0FBR04sWUFBWSxDQUFDRSxJQUFJLENBQUM7SUFDdkMsSUFBSUksWUFBWSxFQUFFO01BQ2hCO01BQ0EsSUFBSUQsT0FBTyxFQUFFO1FBQ1hDLFlBQVksQ0FBQ0MsU0FBUyxDQUFDRixPQUFPLENBQUM7TUFDakM7TUFDQTtJQUNGO0lBRUEsTUFBTUcsaUJBQWlCLEdBQUdMLE9BQU8sQ0FBQ0UsT0FBTyxDQUFDO0lBQzFDTCxZQUFZLENBQUNFLElBQUksQ0FBQyxHQUFHTSxpQkFBaUI7SUFFdENWLGVBQWUsQ0FBQ1csd0JBQXdCLENBQUM7TUFDdkNDLGdCQUFnQixFQUFFLENBQUNGLGlCQUFpQjtJQUN0QyxDQUFDLENBQUM7RUFDSixDQUFDLEVBQ0Q7SUFBRUcsRUFBRSxFQUFFVDtFQUFLLENBQ2IsQ0FBQztBQUNIO0FBRUFOLG9CQUFvQixHQUFHSSxZQUFZO0FBQ25DSiw4QkFBOEIsR0FBR0ssc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvb3RlbC9pbnN0cnVtZW50LmpzPzNjMjciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uJyk7XG5cbi8qKiBFeHBvcnRlZCBvbmx5IGZvciB0ZXN0cy4gKi9cbmNvbnN0IElOU1RSVU1FTlRFRCA9IHt9O1xuXG4vKipcbiAqIEluc3RydW1lbnQgYW4gT3BlblRlbGVtZXRyeSBpbnN0cnVtZW50YXRpb24gb25jZS5cbiAqIFRoaXMgd2lsbCBza2lwIHJ1bm5pbmcgaW5zdHJ1bWVudGF0aW9uIGFnYWluIGlmIGl0IHdhcyBhbHJlYWR5IGluc3RydW1lbnRlZC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgbmFtZSxcbiAgY3JlYXRvcixcbikge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAob3B0aW9ucykgPT4ge1xuICAgICAgY29uc3QgaW5zdHJ1bWVudGVkID0gSU5TVFJVTUVOVEVEW25hbWVdO1xuICAgICAgaWYgKGluc3RydW1lbnRlZCkge1xuICAgICAgICAvLyBJZiBvcHRpb25zIGFyZSBwcm92aWRlZCwgZW5zdXJlIHdlIHVwZGF0ZSB0aGVtXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgaW5zdHJ1bWVudGVkLnNldENvbmZpZyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbiQxID0gY3JlYXRvcihvcHRpb25zKTtcbiAgICAgIElOU1RSVU1FTlRFRFtuYW1lXSA9IGluc3RydW1lbnRhdGlvbiQxO1xuXG4gICAgICBpbnN0cnVtZW50YXRpb24ucmVnaXN0ZXJJbnN0cnVtZW50YXRpb25zKHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uczogW2luc3RydW1lbnRhdGlvbiQxXSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgeyBpZDogbmFtZSB9LFxuICApO1xufVxuXG5leHBvcnRzLklOU1RSVU1FTlRFRCA9IElOU1RSVU1FTlRFRDtcbmV4cG9ydHMuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSA9IGdlbmVyYXRlSW5zdHJ1bWVudE9uY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnN0cnVtZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW5zdHJ1bWVudGF0aW9uIiwicmVxdWlyZSIsIklOU1RSVU1FTlRFRCIsImdlbmVyYXRlSW5zdHJ1bWVudE9uY2UiLCJuYW1lIiwiY3JlYXRvciIsImFzc2lnbiIsIm9wdGlvbnMiLCJpbnN0cnVtZW50ZWQiLCJzZXRDb25maWciLCJpbnN0cnVtZW50YXRpb24kMSIsInJlZ2lzdGVySW5zdHJ1bWVudGF0aW9ucyIsImluc3RydW1lbnRhdGlvbnMiLCJpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/otel/instrument.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/proxy/base.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/proxy/base.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n\n/**\n* This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n* With the following LICENSE:\n*\n* (The MIT License)\n*\n* Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* 'Software'), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:*\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.*\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\nclass Agent extends http.Agent {\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      if (typeof options.secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const {\n      stack\n    } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options)\n    };\n    Promise.resolve().then(() => this.connect(req, connectOpts)).then(socket => {\n      if (socket instanceof http.Agent) {\n        // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n        return socket.addRequest(req, connectOpts);\n      }\n      this[INTERNAL].currentSocket = socket;\n      // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n      super.createSocket(req, options, cb);\n    }, cb);\n  }\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n  get defaultPort() {\n    return _nullishCoalesce(this[INTERNAL].defaultPort, () => this.protocol === 'https:' ? 443 : 80);\n  }\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n  get protocol() {\n    return _nullishCoalesce(this[INTERNAL].protocol, () => this.isSecureEndpoint() ? 'https:' : 'http:');\n  }\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\nexports.Agent = Agent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvcHJveHkvYmFzZS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLElBQUk7RUFDRkE7QUFDRixDQUFDLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUUzQkMsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxJQUFJLEdBQUdMLG1CQUFPLENBQUMsNEJBQVcsQ0FBQztBQUNqQ0EsbUJBQU8sQ0FBQyw4QkFBWSxDQUFDOztBQUVyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTU0sUUFBUSxHQUFHQyxNQUFNLENBQUMsd0JBQXdCLENBQUM7QUFFakQsTUFBTUMsS0FBSyxTQUFTSCxJQUFJLENBQUNHLEtBQUssQ0FBQztFQUU3Qjs7RUFFQUMsV0FBV0EsQ0FBQ0MsSUFBSSxFQUFFO0lBQ2hCLEtBQUssQ0FBQ0EsSUFBSSxDQUFDO0lBQ1gsSUFBSSxDQUFDSixRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDckI7O0VBRUE7QUFDRjtBQUNBO0VBQ0VLLGdCQUFnQkEsQ0FBQ0MsT0FBTyxFQUFFO0lBQ3hCLElBQUlBLE9BQU8sRUFBRTtNQUNYO01BQ0E7TUFDQSxJQUFJLE9BQVFBLE9BQU8sQ0FBR0MsY0FBYyxLQUFLLFNBQVMsRUFBRTtRQUNsRCxPQUFPRCxPQUFPLENBQUNDLGNBQWM7TUFDL0I7O01BRUE7TUFDQTtNQUNBO01BQ0EsSUFBSSxPQUFPRCxPQUFPLENBQUNFLFFBQVEsS0FBSyxRQUFRLEVBQUU7UUFDeEMsT0FBT0YsT0FBTyxDQUFDRSxRQUFRLEtBQUssUUFBUTtNQUN0QztJQUNGOztJQUVBO0lBQ0E7SUFDQTtJQUNBLE1BQU07TUFBRUM7SUFBTSxDQUFDLEdBQUcsSUFBSUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsSUFBSSxPQUFPRCxLQUFLLEtBQUssUUFBUSxFQUFFLE9BQU8sS0FBSztJQUMzQyxPQUFPQSxLQUFLLENBQUNFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQ0MsSUFBSSxDQUFDQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJRCxDQUFDLENBQUNDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUN2RztFQUVBQyxZQUFZQSxDQUFDQyxHQUFHLEVBQUVWLE9BQU8sRUFBRVcsRUFBRSxFQUFFO0lBQzdCLE1BQU1DLFdBQVcsR0FBRztNQUNsQixHQUFHWixPQUFPO01BQ1ZDLGNBQWMsRUFBRSxJQUFJLENBQUNGLGdCQUFnQixDQUFDQyxPQUFPO0lBQy9DLENBQUM7SUFDRGEsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQyxDQUNkQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUNDLE9BQU8sQ0FBQ04sR0FBRyxFQUFFRSxXQUFXLENBQUMsQ0FBQyxDQUMxQ0csSUFBSSxDQUFDRSxNQUFNLElBQUk7TUFDZCxJQUFJQSxNQUFNLFlBQVl4QixJQUFJLENBQUNHLEtBQUssRUFBRTtRQUNoQztRQUNBLE9BQU9xQixNQUFNLENBQUNDLFVBQVUsQ0FBQ1IsR0FBRyxFQUFFRSxXQUFXLENBQUM7TUFDNUM7TUFDQSxJQUFJLENBQUNsQixRQUFRLENBQUMsQ0FBQ3lCLGFBQWEsR0FBR0YsTUFBTTtNQUNyQztNQUNBLEtBQUssQ0FBQ1IsWUFBWSxDQUFDQyxHQUFHLEVBQUVWLE9BQU8sRUFBRVcsRUFBRSxDQUFDO0lBQ3RDLENBQUMsRUFBRUEsRUFBRSxDQUFDO0VBQ1Y7RUFFQVMsZ0JBQWdCQSxDQUFBLEVBQUc7SUFDakIsTUFBTUgsTUFBTSxHQUFHLElBQUksQ0FBQ3ZCLFFBQVEsQ0FBQyxDQUFDeUIsYUFBYTtJQUMzQyxJQUFJLENBQUN6QixRQUFRLENBQUMsQ0FBQ3lCLGFBQWEsR0FBR0UsU0FBUztJQUN4QyxJQUFJLENBQUNKLE1BQU0sRUFBRTtNQUNYLE1BQU0sSUFBSWIsS0FBSyxDQUFDLG9EQUFvRCxDQUFDO0lBQ3ZFO0lBQ0EsT0FBT2EsTUFBTTtFQUNmO0VBRUEsSUFBSUssV0FBV0EsQ0FBQSxFQUFHO0lBQ2hCLE9BQU9uQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUNPLFFBQVEsQ0FBQyxDQUFDNEIsV0FBVyxFQUFFLE1BQVMsSUFBSSxDQUFDcEIsUUFBUSxLQUFLLFFBQVEsR0FBRyxHQUFHLEdBQUcsRUFBSSxDQUFDO0VBQ3ZHO0VBRUEsSUFBSW9CLFdBQVdBLENBQUNDLENBQUMsRUFBRTtJQUNqQixJQUFJLElBQUksQ0FBQzdCLFFBQVEsQ0FBQyxFQUFFO01BQ2xCLElBQUksQ0FBQ0EsUUFBUSxDQUFDLENBQUM0QixXQUFXLEdBQUdDLENBQUM7SUFDaEM7RUFDRjtFQUVBLElBQUlyQixRQUFRQSxDQUFBLEVBQUc7SUFDYixPQUFPZixnQkFBZ0IsQ0FBQyxJQUFJLENBQUNPLFFBQVEsQ0FBQyxDQUFDUSxRQUFRLEVBQUUsTUFBUyxJQUFJLENBQUNILGdCQUFnQixDQUFDLENBQUMsR0FBRyxRQUFRLEdBQUcsT0FBUyxDQUFDO0VBQzNHO0VBRUEsSUFBSUcsUUFBUUEsQ0FBQ3FCLENBQUMsRUFBRTtJQUNkLElBQUksSUFBSSxDQUFDN0IsUUFBUSxDQUFDLEVBQUU7TUFDbEIsSUFBSSxDQUFDQSxRQUFRLENBQUMsQ0FBQ1EsUUFBUSxHQUFHcUIsQ0FBQztJQUM3QjtFQUNGO0FBQ0Y7QUFFQWhDLGFBQWEsR0FBR0ssS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3Byb3h5L2Jhc2UuanM/YWUxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfbnVsbGlzaENvYWxlc2NlXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdub2RlOmh0dHAnKTtcbnJlcXVpcmUoJ25vZGU6aHR0cHMnKTtcblxuLyoqXG4qIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSBmb3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vVG9vVGFsbE5hdGUvcHJveHktYWdlbnRzL3RyZWUvYjEzMzI5NWZkMTZmNjQ3NTU3OGI2YjE1YmQ5YjRlMzNlY2IwZDBiN1xuKiBXaXRoIHRoZSBmb2xsb3dpbmcgTElDRU5TRTpcbipcbiogKFRoZSBNSVQgTGljZW5zZSlcbipcbiogQ29weXJpZ2h0IChjKSAyMDEzIE5hdGhhbiBSYWpsaWNoIDxuYXRoYW5AdG9vdGFsbG5hdGUubmV0PipcbipcbiogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4qIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4qIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4qIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6KlxuKlxuKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4qXG4qXG4qIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuKiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuKiBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuKiBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuKiBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiovXG5cbmNvbnN0IElOVEVSTkFMID0gU3ltYm9sKCdBZ2VudEJhc2VJbnRlcm5hbFN0YXRlJyk7XG5cbmNsYXNzIEFnZW50IGV4dGVuZHMgaHR0cC5BZ2VudCB7XG5cbiAgLy8gU2V0IGJ5IGBodHRwLkFnZW50YCAtIG1pc3NpbmcgZnJvbSBgQHR5cGVzL25vZGVgXG5cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXNbSU5URVJOQUxdID0ge307XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhbiBgaHR0cGAgb3IgYGh0dHBzYCByZXF1ZXN0LlxuICAgKi9cbiAgaXNTZWN1cmVFbmRwb2ludChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIC8vIEZpcnN0IGNoZWNrIHRoZSBgc2VjdXJlRW5kcG9pbnRgIHByb3BlcnR5IGV4cGxpY2l0bHksIHNpbmNlIHRoaXNcbiAgICAgIC8vIG1lYW5zIHRoYXQgYSBwYXJlbnQgYEFnZW50YCBpcyBcInBhc3NpbmcgdGhyb3VnaFwiIHRvIHRoaXMgaW5zdGFuY2UuXG4gICAgICBpZiAodHlwZW9mIChvcHRpb25zICkuc2VjdXJlRW5kcG9pbnQgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5zZWN1cmVFbmRwb2ludDtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gZXhwbGljaXQgYHNlY3VyZWAgZW5kcG9pbnQsIGNoZWNrIGlmIGBwcm90b2NvbGAgcHJvcGVydHkgaXNcbiAgICAgIC8vIHNldC4gVGhpcyB3aWxsIHVzdWFsbHkgYmUgdGhlIGNhc2Ugc2luY2UgdXNpbmcgYSBmdWxsIHN0cmluZyBVUkxcbiAgICAgIC8vIG9yIGBVUkxgIGluc3RhbmNlIHNob3VsZCBiZSB0aGUgbW9zdCBjb21tb24gdXNhZ2UuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMucHJvdG9jb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnByb3RvY29sID09PSAnaHR0cHM6JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5LCBpZiBubyBgcHJvdG9jb2xgIHByb3BlcnR5IHdhcyBzZXQsIHRoZW4gZmFsbCBiYWNrIHRvXG4gICAgLy8gY2hlY2tpbmcgdGhlIHN0YWNrIHRyYWNlIG9mIHRoZSBjdXJyZW50IGNhbGwgc3RhY2ssIGFuZCB0cnkgdG9cbiAgICAvLyBkZXRlY3QgdGhlIFwiaHR0cHNcIiBtb2R1bGUuXG4gICAgY29uc3QgeyBzdGFjayB9ID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKHR5cGVvZiBzdGFjayAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc3RhY2suc3BsaXQoJ1xcbicpLnNvbWUobCA9PiBsLmluZGV4T2YoJyhodHRwcy5qczonKSAhPT0gLTEgfHwgbC5pbmRleE9mKCdub2RlOmh0dHBzOicpICE9PSAtMSk7XG4gIH1cblxuICBjcmVhdGVTb2NrZXQocmVxLCBvcHRpb25zLCBjYikge1xuICAgIGNvbnN0IGNvbm5lY3RPcHRzID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHNlY3VyZUVuZHBvaW50OiB0aGlzLmlzU2VjdXJlRW5kcG9pbnQob3B0aW9ucyksXG4gICAgfTtcbiAgICBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5jb25uZWN0KHJlcSwgY29ubmVjdE9wdHMpKVxuICAgICAgLnRoZW4oc29ja2V0ID0+IHtcbiAgICAgICAgaWYgKHNvY2tldCBpbnN0YW5jZW9mIGh0dHAuQWdlbnQpIHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBhZGRSZXF1ZXN0KClgIGlzbid0IGRlZmluZWQgaW4gYEB0eXBlcy9ub2RlYFxuICAgICAgICAgIHJldHVybiBzb2NrZXQuYWRkUmVxdWVzdChyZXEsIGNvbm5lY3RPcHRzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0ID0gc29ja2V0O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBjcmVhdGVTb2NrZXQoKWAgaXNuJ3QgZGVmaW5lZCBpbiBgQHR5cGVzL25vZGVgXG4gICAgICAgIHN1cGVyLmNyZWF0ZVNvY2tldChyZXEsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH0sIGNiKTtcbiAgfVxuXG4gIGNyZWF0ZUNvbm5lY3Rpb24oKSB7XG4gICAgY29uc3Qgc29ja2V0ID0gdGhpc1tJTlRFUk5BTF0uY3VycmVudFNvY2tldDtcbiAgICB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0ID0gdW5kZWZpbmVkO1xuICAgIGlmICghc29ja2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNvY2tldCB3YXMgcmV0dXJuZWQgaW4gdGhlIGBjb25uZWN0KClgIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiBzb2NrZXQ7XG4gIH1cblxuICBnZXQgZGVmYXVsdFBvcnQoKSB7XG4gICAgcmV0dXJuIF9udWxsaXNoQ29hbGVzY2UodGhpc1tJTlRFUk5BTF0uZGVmYXVsdFBvcnQsICgpID0+ICggKHRoaXMucHJvdG9jb2wgPT09ICdodHRwczonID8gNDQzIDogODApKSk7XG4gIH1cblxuICBzZXQgZGVmYXVsdFBvcnQodikge1xuICAgIGlmICh0aGlzW0lOVEVSTkFMXSkge1xuICAgICAgdGhpc1tJTlRFUk5BTF0uZGVmYXVsdFBvcnQgPSB2O1xuICAgIH1cbiAgfVxuXG4gIGdldCBwcm90b2NvbCgpIHtcbiAgICByZXR1cm4gX251bGxpc2hDb2FsZXNjZSh0aGlzW0lOVEVSTkFMXS5wcm90b2NvbCwgKCkgPT4gKCAodGhpcy5pc1NlY3VyZUVuZHBvaW50KCkgPyAnaHR0cHM6JyA6ICdodHRwOicpKSk7XG4gIH1cblxuICBzZXQgcHJvdG9jb2wodikge1xuICAgIGlmICh0aGlzW0lOVEVSTkFMXSkge1xuICAgICAgdGhpc1tJTlRFUk5BTF0ucHJvdG9jb2wgPSB2O1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLkFnZW50ID0gQWdlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9udWxsaXNoQ29hbGVzY2UiLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJodHRwIiwiSU5URVJOQUwiLCJTeW1ib2wiLCJBZ2VudCIsImNvbnN0cnVjdG9yIiwib3B0cyIsImlzU2VjdXJlRW5kcG9pbnQiLCJvcHRpb25zIiwic2VjdXJlRW5kcG9pbnQiLCJwcm90b2NvbCIsInN0YWNrIiwiRXJyb3IiLCJzcGxpdCIsInNvbWUiLCJsIiwiaW5kZXhPZiIsImNyZWF0ZVNvY2tldCIsInJlcSIsImNiIiwiY29ubmVjdE9wdHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJjb25uZWN0Iiwic29ja2V0IiwiYWRkUmVxdWVzdCIsImN1cnJlbnRTb2NrZXQiLCJjcmVhdGVDb25uZWN0aW9uIiwidW5kZWZpbmVkIiwiZGVmYXVsdFBvcnQiLCJ2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/proxy/base.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/proxy/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/proxy/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst tls = __webpack_require__(/*! node:tls */ \"node:tls\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst base = __webpack_require__(/*! ./base.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/proxy/base.js\");\nconst parseProxyResponse = __webpack_require__(/*! ./parse-proxy-response.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\");\nfunction debug(...args) {\n  core.logger.log('[https-proxy-agent]', ...args);\n}\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends base.Agent {\n  static __initStatic() {\n    this.protocols = ['http', 'https'];\n  }\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = _nullishCoalesce(_optionalChain([opts, 'optionalAccess', _2 => _2.headers]), () => ({}));\n    debug('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const {\n      proxy\n    } = this;\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debug('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername\n      });\n    } else {\n      debug('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n    const headers = typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : {\n      ...this.proxyHeaders\n    };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n    headers.Host = `${host}:${opts.port}`;\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n    const proxyResponsePromise = parseProxyResponse.parseProxyResponse(socket);\n    socket.write(`${payload}\\r\\n`);\n    const {\n      connect,\n      buffered\n    } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername\n        });\n      }\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n    const fakeSocket = new net.Socket({\n      writable: false\n    });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', s => {\n      debug('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n    return fakeSocket;\n  }\n}\nHttpsProxyAgent.__initStatic();\nfunction resume(socket) {\n  socket.resume();\n}\nfunction omit(obj, ...keys) {\n  const ret = {};\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\nexports.HttpsProxyAgent = HttpsProxyAgent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/proxy/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nfunction debug(...args) {\n  core.logger.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);else socket.once('readable', read);\n    }\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n    function onend() {\n      cleanup();\n      debug('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n    function onerror(err) {\n      cleanup();\n      debug('onerror %o', err);\n      reject(err);\n    }\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debug('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n      const headerParts = buffered.slice(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +(firstLineParts[1] || 0);\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debug('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers\n        },\n        buffered\n      });\n    }\n    socket.on('error', onerror);\n    socket.on('end', onend);\n    read();\n  });\n}\nexports.parseProxyResponse = parseProxyResponse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/proxy/parse-proxy-response.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/sdk/api.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/sdk/api.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst module$1 = __webpack_require__(/*! ../utils/module.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/module.js\");\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (core.GLOBAL_OBJ.SENTRY_RELEASE && core.GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return core.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n  // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n  process.env['GITHUB_SHA'] ||\n  // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n  process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] || process.env['CI_BUILD_REF'] || process.env['CI_COMMIT_SHA'] ||\n  // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n  process.env['BITBUCKET_COMMIT'];\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n  // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n  process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] || process.env['APPVEYOR_REPO_COMMIT'] ||\n  // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n  process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n  // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n  process.env['AWS_COMMIT_ID'] ||\n  // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n  process.env['BUILD_SOURCEVERSION'] ||\n  // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n  process.env['GIT_CLONE_COMMIT_HASH'] ||\n  // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n  process.env['BUDDY_EXECUTION_REVISION'] ||\n  // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n  process.env['BUILDKITE_COMMIT'] ||\n  // CircleCI - https://circleci.com/docs/variables/\n  process.env['CIRCLE_SHA1'] ||\n  // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n  process.env['CIRRUS_CHANGE_IN_REPO'] ||\n  // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n  process.env['CF_REVISION'] ||\n  // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n  process.env['CM_COMMIT'] ||\n  // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n  process.env['CF_PAGES_COMMIT_SHA'] ||\n  // Drone - https://docs.drone.io/pipeline/environment/reference/\n  process.env['DRONE_COMMIT_SHA'] ||\n  // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n  process.env['FC_GIT_COMMIT_SHA'] ||\n  // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n  process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n  // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n  process.env['HEROKU_SLUG_COMMIT'] ||\n  // Railway - https://docs.railway.app/reference/variables#git-variables\n  process.env['RAILWAY_GIT_COMMIT_SHA'] ||\n  // Render - https://render.com/docs/environment-variables\n  process.env['RENDER_GIT_COMMIT'] ||\n  // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n  process.env['SEMAPHORE_GIT_SHA'] ||\n  // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n  process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n  // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n  process.env['VERCEL_GIT_COMMIT_SHA'] || process.env['VERCEL_GITHUB_COMMIT_SHA'] || process.env['VERCEL_GITLAB_COMMIT_SHA'] || process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n  // Zeit (now known as Vercel)\n  process.env['ZEIT_GITHUB_COMMIT_SHA'] || process.env['ZEIT_GITLAB_COMMIT_SHA'] || process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n  // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n  process.env['CI_COMMIT_ID'] ||\n  // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n  process.env['SOURCE_COMMIT'] ||\n  // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n  process.env['SOURCE_VERSION'] ||\n  // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n  process.env['GIT_COMMIT'] ||\n  // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n  process.env['COMMIT_REF'] ||\n  // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n  process.env['BUILD_VCS_NUMBER'] ||\n  // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n  process.env['CI_COMMIT_SHA'];\n  return possibleReleaseNameOfGitProvider || possibleReleaseNameOfCiProvidersWithSpecificEnvVar || possibleReleaseNameOfCiProvidersWithGenericEnvVar || fallback;\n}\n\n/** Node.js stack parser */\nconst defaultStackParser = core.createStackParser(core.nodeStackLineParser(module$1.createGetModuleFromFilename()));\nexports.defaultStackParser = defaultStackParser;\nexports.getSentryRelease = getSentryRelease;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/sdk/api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/sdk/client.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/sdk/client.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst worker_threads = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS = 60000; // 60s was chosen arbitrarily\n\n/** A client for using Sentry with Node & OpenTelemetry. */\nclass NodeClient extends core.ServerRuntimeClient {\n  constructor(options) {\n    const clientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: {\n        name: 'node',\n        version: global.process.version\n      },\n      serverName: options.serverName || global.process.env.SENTRY_NAME || os.hostname()\n    };\n    if (options.openTelemetryInstrumentations) {\n      instrumentation.registerInstrumentations({\n        instrumentations: options.openTelemetryInstrumentations\n      });\n    }\n    core.applySdkMetadata(clientOptions, 'node');\n    core.logger.log(`Initializing Sentry: process: ${process.pid}, thread: ${worker_threads.isMainThread ? 'main' : `worker-${worker_threads.threadId}`}.`);\n    super(clientOptions);\n  }\n\n  /** Get the OTEL tracer. */\n  get tracer() {\n    if (this._tracer) {\n      return this._tracer;\n    }\n    const name = '@sentry/node';\n    const version = core.SDK_VERSION;\n    const tracer = api.trace.getTracer(name, version);\n    this._tracer = tracer;\n    return tracer;\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  async flush(timeout) {\n    const provider = this.traceProvider;\n    const spanProcessor = _optionalChain([provider, 'optionalAccess', _ => _.activeSpanProcessor]);\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n    return super.flush(timeout);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  close(timeout) {\n    if (this._clientReportInterval) {\n      clearInterval(this._clientReportInterval);\n    }\n    if (this._clientReportOnExitFlushListener) {\n      process.off('beforeExit', this._clientReportOnExitFlushListener);\n    }\n    return super.close(timeout);\n  }\n\n  /**\n   * Will start tracking client reports for this client.\n   *\n   * NOTICE: This method will create an interval that is periodically called and attach a `process.on('beforeExit')`\n   * hook. To clean up these resources, call `.close()` when you no longer intend to use the client. Not doing so will\n   * result in a memory leak.\n   */\n  // The reason client reports need to be manually activated with this method instead of just enabling them in a\n  // constructor, is that if users periodically and unboundedly create new clients, we will create more and more\n  // intervals and beforeExit listeners, thus leaking memory. In these situations, users are required to call\n  // `client.close()` in order to dispose of the acquired resources.\n  // We assume that calling this method in Sentry.init() is a sensible default, because calling Sentry.init() over and\n  // over again would also result in memory leaks.\n  // Note: We have experimented with using `FinalizationRegisty` to clear the interval when the client is garbage\n  // collected, but it did not work, because the cleanup function never got called.\n  startClientReportTracking() {\n    const clientOptions = this.getOptions();\n    if (clientOptions.sendClientReports) {\n      this._clientReportOnExitFlushListener = () => {\n        this._flushOutcomes();\n      };\n      this._clientReportInterval = setInterval(() => {\n        debugBuild.DEBUG_BUILD && core.logger.log('Flushing client reports based on interval.');\n        this._flushOutcomes();\n      }, _nullishCoalesce(clientOptions.clientReportFlushInterval, () => DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS))\n      // Unref is critical for not preventing the process from exiting because the interval is active.\n      .unref();\n      process.on('beforeExit', this._clientReportOnExitFlushListener);\n    }\n  }\n\n  /** Custom implementation for OTEL, so we can handle scope-span linking. */\n  _getTraceInfoFromScope(scope) {\n    if (!scope) {\n      return [undefined, undefined];\n    }\n    return opentelemetry.getTraceContextForScope(this, scope);\n  }\n}\nexports.NodeClient = NodeClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/sdk/client.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/sdk/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/sdk/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst childProcess = __webpack_require__(/*! ../integrations/childProcess.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/childProcess.js\");\nconst console$1 = __webpack_require__(/*! ../integrations/console.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/console.js\");\nconst context = __webpack_require__(/*! ../integrations/context.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ../integrations/contextlines.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/contextlines.js\");\nconst index = __webpack_require__(/*! ../integrations/http/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/http/index.js\");\nconst index$1 = __webpack_require__(/*! ../integrations/local-variables/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ../integrations/modules.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/modules.js\");\nconst nodeFetch = __webpack_require__(/*! ../integrations/node-fetch.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/node-fetch.js\");\nconst onuncaughtexception = __webpack_require__(/*! ../integrations/onuncaughtexception.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ../integrations/onunhandledrejection.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/onunhandledrejection.js\");\nconst spotlight = __webpack_require__(/*! ../integrations/spotlight.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/spotlight.js\");\nconst index$2 = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst http = __webpack_require__(/*! ../transports/http.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/transports/http.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst envToBool = __webpack_require__(/*! ../utils/envToBool.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/envToBool.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/sdk/api.js\");\nconst client = __webpack_require__(/*! ./client.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/sdk/client.js\");\nconst initOtel = __webpack_require__(/*! ./initOtel.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js\");\nfunction getCjsOnlyIntegrations() {\n  return commonjs.isCjs() ? [modules.modulesIntegration()] : [];\n}\n\n/**\n * Get default integrations, excluding performance.\n */\nfunction getDefaultIntegrationsWithoutPerformance() {\n  return [\n  // Common\n  core.inboundFiltersIntegration(), core.functionToStringIntegration(), core.linkedErrorsIntegration(), core.requestDataIntegration(),\n  // Native Wrappers\n  console$1.consoleIntegration(), index.httpIntegration(), nodeFetch.nativeNodeFetchIntegration(),\n  // Global Handlers\n  onuncaughtexception.onUncaughtExceptionIntegration(), onunhandledrejection.onUnhandledRejectionIntegration(),\n  // Event Info\n  contextlines.contextLinesIntegration(), index$1.localVariablesIntegration(), context.nodeContextIntegration(), childProcess.childProcessIntegration(), ...getCjsOnlyIntegrations()];\n}\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(options) {\n  return [...getDefaultIntegrationsWithoutPerformance(),\n  // We only add performance integrations if tracing is enabled\n  // Note that this means that without tracing enabled, e.g. `expressIntegration()` will not be added\n  // This means that generally request isolation will work (because that is done by httpIntegration)\n  // But `transactionName` will not be set automatically\n  ...(shouldAddPerformanceIntegrations(options) ? index$2.getAutoPerformanceIntegrations() : [])];\n}\nfunction shouldAddPerformanceIntegrations(options) {\n  if (!core.hasTracingEnabled(options)) {\n    return false;\n  }\n\n  // We want to ensure `tracesSampleRate` is not just undefined/null here\n  // eslint-disable-next-line deprecation/deprecation\n  return options.enableTracing || options.tracesSampleRate != null || 'tracesSampler' in options;\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\n/**\n * Initialize Sentry for Node, without performance instrumentation.\n */\nfunction _init(_options = {}, getDefaultIntegrationsImpl) {\n  const options = getClientOptions(_options, getDefaultIntegrationsImpl);\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      core.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  if (!commonjs.isCjs() && options.registerEsmLoaderHooks !== false) {\n    initOtel.maybeInitializeEsmLoader(options.registerEsmLoaderHooks === true ? undefined : options.registerEsmLoaderHooks);\n  }\n  opentelemetry.setOpenTelemetryContextAsyncContextStrategy();\n  const scope = core.getCurrentScope();\n  scope.update(options.initialScope);\n  if (options.spotlight && !options.integrations.some(({\n    name\n  }) => name === spotlight.INTEGRATION_NAME)) {\n    options.integrations.push(spotlight.spotlightIntegration({\n      sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined\n    }));\n  }\n  const client$1 = new client.NodeClient(options);\n  // The client is on the current scope, from where it generally is inherited\n  core.getCurrentScope().setClient(client$1);\n  client$1.init();\n  core.logger.log(`Running in ${commonjs.isCjs() ? 'CommonJS' : 'ESM'} mode.`);\n\n  // TODO(V9): Remove this code since all of the logic should be in an integration\n  // eslint-disable-next-line deprecation/deprecation\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n  client$1.startClientReportTracking();\n  updateScopeFromEnvVariables();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    initOtel.initOpenTelemetry(client$1, {\n      spanProcessors: options.openTelemetrySpanProcessors\n    });\n    validateOpenTelemetrySetup();\n  }\n  opentelemetry.enhanceDscWithOpenTelemetryRootSpanName(client$1);\n  opentelemetry.setupEventContextTrace(client$1);\n  return client$1;\n}\n\n/**\n * Validate that your OpenTelemetry setup is correct.\n */\nfunction validateOpenTelemetrySetup() {\n  if (!debugBuild.DEBUG_BUILD) {\n    return;\n  }\n  const setup = opentelemetry.openTelemetrySetupCheck();\n  const required = ['SentryContextManager', 'SentryPropagator'];\n  if (core.hasTracingEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      core.logger.error(`You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`);\n    }\n  }\n  if (!setup.includes('SentrySampler')) {\n    core.logger.warn('You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.');\n  }\n}\nfunction getClientOptions(options, getDefaultIntegrationsImpl) {\n  const release = getRelease(options.release);\n  const autoSessionTracking = typeof release !== 'string' ? false :\n  // eslint-disable-next-line deprecation/deprecation\n  options.autoSessionTracking === undefined ? true :\n  // eslint-disable-next-line deprecation/deprecation\n  options.autoSessionTracking;\n  if (options.spotlight == null) {\n    const spotlightEnv = envToBool.envToBool(process.env.SENTRY_SPOTLIGHT, {\n      strict: true\n    });\n    if (spotlightEnv == null) {\n      options.spotlight = process.env.SENTRY_SPOTLIGHT;\n    } else {\n      options.spotlight = spotlightEnv;\n    }\n  }\n  const tracesSampleRate = getTracesSampleRate(options.tracesSampleRate);\n  const baseOptions = core.dropUndefinedKeys({\n    transport: http.makeNodeTransport,\n    dsn: process.env.SENTRY_DSN,\n    environment: process.env.SENTRY_ENVIRONMENT,\n    sendClientReports: true\n  });\n  const overwriteOptions = core.dropUndefinedKeys({\n    release,\n    autoSessionTracking,\n    tracesSampleRate\n  });\n  const mergedOptions = {\n    ...baseOptions,\n    ...options,\n    ...overwriteOptions\n  };\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrationsImpl(mergedOptions);\n  }\n  const clientOptions = {\n    ...mergedOptions,\n    stackParser: core.stackParserFromStackParserOptions(options.stackParser || api.defaultStackParser),\n    integrations: core.getIntegrationsToSetup({\n      defaultIntegrations: options.defaultIntegrations,\n      integrations: options.integrations\n    })\n  };\n  return clientOptions;\n}\nfunction getRelease(release) {\n  if (release !== undefined) {\n    return release;\n  }\n  const detectedRelease = api.getSentryRelease();\n  if (detectedRelease !== undefined) {\n    return detectedRelease;\n  }\n  return undefined;\n}\nfunction getTracesSampleRate(tracesSampleRate) {\n  if (tracesSampleRate !== undefined) {\n    return tracesSampleRate;\n  }\n  const sampleRateFromEnv = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (!sampleRateFromEnv) {\n    return undefined;\n  }\n  const parsed = parseFloat(sampleRateFromEnv);\n  return isFinite(parsed) ? parsed : undefined;\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables() {\n  if (envToBool.envToBool(process.env.SENTRY_USE_ENVIRONMENT) !== false) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = core.propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    core.getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n\n/**\n * Enable automatic Session Tracking for the node process.\n */\nfunction startSessionTracking() {\n  const client = core.getClient();\n  // eslint-disable-next-line deprecation/deprecation\n  if (client && client.getOptions().autoSessionTracking) {\n    client.initSessionFlusher();\n  }\n  core.startSession();\n\n  // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n  // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n  // such as calling process.exit() or uncaught exceptions.\n  // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n  process.on('beforeExit', () => {\n    const session = core.getIsolationScope().getSession();\n\n    // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n    // Terminal Status i.e. Exited or Crashed because\n    // \"When a session is moved away from ok it must not be updated anymore.\"\n    // Ref: https://develop.sentry.dev/sdk/sessions/\n    if (session && session.status !== 'ok') {\n      core.endSession();\n    }\n  });\n}\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.getDefaultIntegrationsWithoutPerformance = getDefaultIntegrationsWithoutPerformance;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = validateOpenTelemetrySetup;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/sdk/initOtel.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst moduleModule = __webpack_require__(/*! module */ \"module\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst resources = __webpack_require__(/*! @opentelemetry/resources */ \"(instrument)/./node_modules/@opentelemetry/resources/build/src/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/src/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst importInTheMiddle = __webpack_require__(/*! import-in-the-middle */ \"(instrument)/./node_modules/import-in-the-middle/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst index = __webpack_require__(/*! ../integrations/tracing/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/integrations/tracing/index.js\");\nconst contextManager = __webpack_require__(/*! ../otel/contextManager.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/otel/contextManager.js\");\nconst commonjs = __webpack_require__(/*! ../utils/commonjs.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nvar _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;\n// About 277h - this must fit into new Array(len)!\nconst MAX_MAX_SPAN_WAIT_DURATION = 1000000;\n\n/**\n * Initialize OpenTelemetry for Node.\n */\nfunction initOpenTelemetry(client, options = {}) {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n  const provider = setupOtel(client, options);\n  client.traceProvider = provider;\n}\nfunction getRegisterOptions(esmHookConfig) {\n  // TODO(v9): Make onlyIncludeInstrumentedModules: true the default behavior.\n  if (_optionalChain([esmHookConfig, 'optionalAccess', _ => _.onlyIncludeInstrumentedModules])) {\n    const {\n      addHookMessagePort\n    } = importInTheMiddle.createAddHookMessageChannel();\n    // If the user supplied include, we need to use that as a starting point or use an empty array to ensure no modules\n    // are wrapped if they are not hooked\n    // eslint-disable-next-line deprecation/deprecation\n    return {\n      data: {\n        addHookMessagePort,\n        include: esmHookConfig.include || []\n      },\n      transferList: [addHookMessagePort]\n    };\n  }\n  return {\n    data: esmHookConfig\n  };\n}\n\n/** Initialize the ESM loader. */\nfunction maybeInitializeEsmLoader(esmHookConfig) {\n  const [nodeMajor = 0, nodeMinor = 0] = process.versions.node.split('.').map(Number);\n\n  // Register hook was added in v20.6.0 and v18.19.0\n  if (nodeMajor >= 22 || nodeMajor === 20 && nodeMinor >= 6 || nodeMajor === 18 && nodeMinor >= 19) {\n    // We need to work around using import.meta.url directly because jest complains about it.\n    const importMetaUrl = typeof (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : _documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href) !== 'undefined' ? typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : _documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/initOtel.js', document.baseURI).href : undefined;\n    if (!core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered && importMetaUrl) {\n      try {\n        // @ts-expect-error register is available in these versions\n        moduleModule.default.register('import-in-the-middle/hook.mjs', importMetaUrl, getRegisterOptions(esmHookConfig));\n        core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered = true;\n      } catch (error) {\n        core.logger.warn('Failed to register ESM hook', error);\n      }\n    }\n  } else {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] You are using Node.js in ESM mode (\"import syntax\"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS (\"require() syntax\"), or upgrade your Node.js version.');\n    });\n  }\n}\n\n/**\n * Preload OpenTelemetry for Node.\n * This can be used to preload instrumentation early, but set up Sentry later.\n * By preloading the OTEL instrumentation wrapping still happens early enough that everything works.\n */\nfunction preloadOpenTelemetry(options = {}) {\n  const {\n    debug\n  } = options;\n  if (debug) {\n    core.logger.enable();\n    setupOpenTelemetryLogger();\n  }\n  if (!commonjs.isCjs()) {\n    maybeInitializeEsmLoader(options.registerEsmLoaderHooks);\n  }\n\n  // These are all integrations that we need to pre-load to ensure they are set up before any other code runs\n  getPreloadMethods(options.integrations).forEach(fn => {\n    fn();\n    if (debug) {\n      core.logger.log(`[Sentry] Preloaded ${fn.id} instrumentation`);\n    }\n  });\n}\nfunction getPreloadMethods(integrationNames) {\n  const instruments = index.getOpenTelemetryInstrumentationToPreload();\n  if (!integrationNames) {\n    return instruments;\n  }\n  return instruments.filter(instrumentation => integrationNames.includes(instrumentation.id));\n}\n\n/** Just exported for tests. */\nfunction setupOtel(client, options = {}) {\n  // Create and configure NodeTracerProvider\n  const provider = new sdkTraceBase.BasicTracerProvider({\n    sampler: new opentelemetry.SentrySampler(client),\n    resource: new resources.Resource({\n      [semanticConventions.ATTR_SERVICE_NAME]: 'node',\n      // eslint-disable-next-line deprecation/deprecation\n      [semanticConventions.SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [semanticConventions.ATTR_SERVICE_VERSION]: core.SDK_VERSION\n    }),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [new opentelemetry.SentrySpanProcessor({\n      timeout: _clampSpanProcessorTimeout(client.getOptions().maxSpanWaitDuration)\n    }), ...(options.spanProcessors || [])]\n  });\n\n  // Initialize the provider\n  provider.register({\n    propagator: new opentelemetry.SentryPropagator(),\n    contextManager: new contextManager.SentryContextManager()\n  });\n  return provider;\n}\n\n/** Just exported for tests. */\nfunction _clampSpanProcessorTimeout(maxSpanWaitDuration) {\n  if (maxSpanWaitDuration == null) {\n    return undefined;\n  }\n\n  // We guard for a max. value here, because we create an array with this length\n  // So if this value is too large, this would fail\n  if (maxSpanWaitDuration > MAX_MAX_SPAN_WAIT_DURATION) {\n    debugBuild.DEBUG_BUILD && core.logger.warn(`\\`maxSpanWaitDuration\\` is too high, using the maximum value of ${MAX_MAX_SPAN_WAIT_DURATION}`);\n    return MAX_MAX_SPAN_WAIT_DURATION;\n  } else if (maxSpanWaitDuration <= 0 || Number.isNaN(maxSpanWaitDuration)) {\n    debugBuild.DEBUG_BUILD && core.logger.warn('`maxSpanWaitDuration` must be a positive number, using default value instead.');\n    return undefined;\n  }\n  return maxSpanWaitDuration;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger() {\n  const otelLogger = new Proxy(core.logger, {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    }\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  api.diag.disable();\n  api.diag.setLogger(otelLogger, api.DiagLogLevel.DEBUG);\n}\nexports._clampSpanProcessorTimeout = _clampSpanProcessorTimeout;\nexports.initOpenTelemetry = initOpenTelemetry;\nexports.maybeInitializeEsmLoader = maybeInitializeEsmLoader;\nexports.preloadOpenTelemetry = preloadOpenTelemetry;\nexports.setupOtel = setupOtel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/sdk/initOtel.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/transports/http.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/transports/http.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst node_stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst index = __webpack_require__(/*! ../proxy/index.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/proxy/index.js\");\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body) {\n  return new node_stream.Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    }\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nfunction makeNodeTransport(options) {\n  let urlSegments;\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.');\n    });\n    return core.createTransport(options, () => Promise.resolve({}));\n  }\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(urlSegments, options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy);\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v9): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy ? new index.HttpsProxyAgent(proxy) : new nativeHttpModule.Agent({\n    keepAlive,\n    maxSockets: 30,\n    timeout: 2000\n  });\n  const requestExecutor = createRequestExecutor(options, _nullishCoalesce(options.httpModule, () => nativeHttpModule), agent);\n  return core.createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments, proxy) {\n  const {\n    no_proxy\n  } = process.env;\n  const urlIsExemptFromProxy = no_proxy && no_proxy.split(',').some(exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption));\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(options, httpModule, agent) {\n  const {\n    hostname,\n    pathname,\n    port,\n    protocol,\n    search\n  } = new URL(options.url);\n  return function makeRequest(request) {\n    return new Promise((resolve, reject) => {\n      // This ensures we do not generate any spans in OpenTelemetry for the transport\n      core.suppressTracing(() => {\n        let body = streamFromBody(request.body);\n        const headers = {\n          ...options.headers\n        };\n        if (request.body.length > GZIP_THRESHOLD) {\n          headers['content-encoding'] = 'gzip';\n          body = body.pipe(node_zlib.createGzip());\n        }\n        const req = httpModule.request({\n          method: 'POST',\n          agent,\n          headers,\n          hostname,\n          path: `${pathname}${search}`,\n          port,\n          protocol,\n          ca: options.caCerts\n        }, res => {\n          res.on('data', () => {\n            // Drain socket\n          });\n          res.on('end', () => {\n            // Drain socket\n          });\n          res.setEncoding('utf8');\n\n          // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n          // https://nodejs.org/api/http.html#http_message_headers\n          const retryAfterHeader = _nullishCoalesce(res.headers['retry-after'], () => null);\n          const rateLimitsHeader = _nullishCoalesce(res.headers['x-sentry-rate-limits'], () => null);\n          resolve({\n            statusCode: res.statusCode,\n            headers: {\n              'retry-after': retryAfterHeader,\n              'x-sentry-rate-limits': Array.isArray(rateLimitsHeader) ? rateLimitsHeader[0] || null : rateLimitsHeader\n            }\n          });\n        });\n        req.on('error', reject);\n        body.pipe(req);\n      });\n    });\n  };\n}\nexports.makeNodeTransport = makeNodeTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/transports/http.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/** Adds an origin to an OTEL Span. */\nfunction addOriginToSpan(span, origin) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\nexports.addOriginToSpan = addOriginToSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvYWRkT3JpZ2luVG9TcGFuLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGlGQUFjLENBQUM7O0FBRXBDO0FBQ0EsU0FBU0MsZUFBZUEsQ0FBQ0MsSUFBSSxFQUFFQyxNQUFNLEVBQUU7RUFDckNELElBQUksQ0FBQ0UsWUFBWSxDQUFDTCxJQUFJLENBQUNNLGdDQUFnQyxFQUFFRixNQUFNLENBQUM7QUFDbEU7QUFFQU4sdUJBQXVCLEdBQUdJLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanM/ZWEwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKiBBZGRzIGFuIG9yaWdpbiB0byBhbiBPVEVMIFNwYW4uICovXG5mdW5jdGlvbiBhZGRPcmlnaW5Ub1NwYW4oc3Bhbiwgb3JpZ2luKSB7XG4gIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sIG9yaWdpbik7XG59XG5cbmV4cG9ydHMuYWRkT3JpZ2luVG9TcGFuID0gYWRkT3JpZ2luVG9TcGFuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkT3JpZ2luVG9TcGFuLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29yZSIsInJlcXVpcmUiLCJhZGRPcmlnaW5Ub1NwYW4iLCJzcGFuIiwib3JpZ2luIiwic2V0QXR0cmlidXRlIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/addOriginToSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/commonjs.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** Detect CommonJS. */\nfunction isCjs() {\n  return \"function\" !== 'undefined';\n}\nexports.isCjs = isCjs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY29tbW9uanMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQSxTQUFTQyxLQUFLQSxDQUFBLEVBQUc7RUFDZixPQUFPLFVBQWMsS0FBSyxXQUFXO0FBQ3ZDO0FBRUFGLGFBQWEsR0FBR0UsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2NvbW1vbmpzLmpzPzEyMzgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqIERldGVjdCBDb21tb25KUy4gKi9cbmZ1bmN0aW9uIGlzQ2pzKCkge1xuICByZXR1cm4gdHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnO1xufVxuXG5leHBvcnRzLmlzQ2pzID0gaXNDanM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb25qcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQ2pzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst createMissingInstrumentationContext = pkg => ({\n  package: pkg,\n  'javascript.is_cjs': commonjs.isCjs()\n});\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxRQUFRLEdBQUdDLG1CQUFPLENBQUMsMkZBQWUsQ0FBQztBQUV6QyxNQUFNQyxtQ0FBbUMsR0FBSUMsR0FBRyxLQUFNO0VBQ3BEQyxPQUFPLEVBQUVELEdBQUc7RUFDWixtQkFBbUIsRUFBRUgsUUFBUSxDQUFDSyxLQUFLLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0FBRUZQLDJDQUEyQyxHQUFHSSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcz8zODQ0Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvbW1vbmpzID0gcmVxdWlyZSgnLi9jb21tb25qcy5qcycpO1xuXG5jb25zdCBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCA9IChwa2cpID0+ICh7XG4gIHBhY2thZ2U6IHBrZyxcbiAgJ2phdmFzY3JpcHQuaXNfY2pzJzogY29tbW9uanMuaXNDanMoKSxcbn0pO1xuXG5leHBvcnRzLmNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0ID0gY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbW1vbmpzIiwicmVxdWlyZSIsImNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0IiwicGtnIiwicGFja2FnZSIsImlzQ2pzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/debug.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/debug.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nlet cachedDebuggerEnabled;\n\n/**\n * Was the debugger enabled when this function was first called?\n */\nasync function isDebuggerEnabled() {\n  if (cachedDebuggerEnabled === undefined) {\n    try {\n      // Node can be built without inspector support\n      const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n      cachedDebuggerEnabled = !!inspector.url();\n    } catch (_) {\n      cachedDebuggerEnabled = false;\n    }\n  }\n  return cachedDebuggerEnabled;\n}\nexports.isDebuggerEnabled = isDebuggerEnabled;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZGVidWcuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxJQUFJQyxxQkFBcUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBLGVBQWVDLGlCQUFpQkEsQ0FBQSxFQUFHO0VBQ2pDLElBQUlELHFCQUFxQixLQUFLRSxTQUFTLEVBQUU7SUFDdkMsSUFBSTtNQUNGO01BQ0EsTUFBTUMsU0FBUyxHQUFHLE1BQU0sa0lBQXdCO01BQ2hESCxxQkFBcUIsR0FBRyxDQUFDLENBQUNHLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLE9BQU9DLENBQUMsRUFBRTtNQUNWTCxxQkFBcUIsR0FBRyxLQUFLO0lBQy9CO0VBQ0Y7RUFFQSxPQUFPQSxxQkFBcUI7QUFDOUI7QUFFQUYseUJBQXlCLEdBQUdHLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2RlYnVnLmpzPzFmOGYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxubGV0IGNhY2hlZERlYnVnZ2VyRW5hYmxlZDtcblxuLyoqXG4gKiBXYXMgdGhlIGRlYnVnZ2VyIGVuYWJsZWQgd2hlbiB0aGlzIGZ1bmN0aW9uIHdhcyBmaXJzdCBjYWxsZWQ/XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGlzRGVidWdnZXJFbmFibGVkKCkge1xuICBpZiAoY2FjaGVkRGVidWdnZXJFbmFibGVkID09PSB1bmRlZmluZWQpIHtcbiAgICB0cnkge1xuICAgICAgLy8gTm9kZSBjYW4gYmUgYnVpbHQgd2l0aG91dCBpbnNwZWN0b3Igc3VwcG9ydFxuICAgICAgY29uc3QgaW5zcGVjdG9yID0gYXdhaXQgaW1wb3J0KCdub2RlOmluc3BlY3RvcicpO1xuICAgICAgY2FjaGVkRGVidWdnZXJFbmFibGVkID0gISFpbnNwZWN0b3IudXJsKCk7XG4gICAgfSBjYXRjaCAoXykge1xuICAgICAgY2FjaGVkRGVidWdnZXJFbmFibGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhY2hlZERlYnVnZ2VyRW5hYmxlZDtcbn1cblxuZXhwb3J0cy5pc0RlYnVnZ2VyRW5hYmxlZCA9IGlzRGVidWdnZXJFbmFibGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWcuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjYWNoZWREZWJ1Z2dlckVuYWJsZWQiLCJpc0RlYnVnZ2VyRW5hYmxlZCIsInVuZGVmaW5lZCIsImluc3BlY3RvciIsInVybCIsIl8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/debug.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/src/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst commonjs = __webpack_require__(/*! ./commonjs.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/commonjs.js\");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./createMissingInstrumentationContext.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/utils/createMissingInstrumentationContext.js\");\n\n/**\n * Checks and warns if a framework isn't wrapped by opentelemetry.\n */\nfunction ensureIsWrapped(maybeWrappedFunction, name) {\n  const client = core.getClient();\n  if (!_optionalChain([client, 'optionalAccess', _ => _.getOptions, 'call', _2 => _2(), 'access', _3 => _3.disableInstrumentationWarnings]) && !core$1.isWrapped(maybeWrappedFunction) && core.isEnabled() && core.hasTracingEnabled()) {\n    core.consoleSandbox(() => {\n      if (commonjs.isCjs()) {\n        // eslint-disable-next-line no-console\n        console.warn(`[Sentry] ${name} is not instrumented. This is likely because you required/imported ${name} before calling \\`Sentry.init()\\`.`);\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(`[Sentry] ${name} is not instrumented. Please make sure to initialize Sentry in a separate file that you \\`--import\\` when running node, see: https://docs.sentry.io/platforms/javascript/guides/${name}/install/esm/.`);\n      }\n    });\n    core.getGlobalScope().setContext('missing_instrumentation', createMissingInstrumentationContext.createMissingInstrumentationContext(name));\n  }\n}\nexports.ensureIsWrapped = ensureIsWrapped;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzIiwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSTtFQUNGQTtBQUNGLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBRTNCQyw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE1BQU0sR0FBR0wsbUJBQU8sQ0FBQywrRkFBcUIsQ0FBQztBQUM3QyxNQUFNTSxJQUFJLEdBQUdOLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNTyxRQUFRLEdBQUdQLG1CQUFPLENBQUMsMkZBQWUsQ0FBQztBQUN6QyxNQUFNUSxtQ0FBbUMsR0FBR1IsbUJBQU8sQ0FBQyxpSkFBMEMsQ0FBQzs7QUFFL0Y7QUFDQTtBQUNBO0FBQ0EsU0FBU1MsZUFBZUEsQ0FDdEJDLG9CQUFvQixFQUNwQkMsSUFBSSxFQUNKO0VBQ0EsTUFBTUMsTUFBTSxHQUFHTixJQUFJLENBQUNPLFNBQVMsQ0FBQyxDQUFDO0VBQy9CLElBQ0UsQ0FBQ2QsY0FBYyxDQUFDLENBQUNhLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRUUsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLFVBQVUsRUFBRSxNQUFNLEVBQUVDLEVBQUUsSUFBSUEsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUVDLEVBQUUsSUFBSUEsRUFBRSxDQUFDQyw4QkFBOEIsQ0FBQyxDQUFDLElBQ3JJLENBQUNiLE1BQU0sQ0FBQ2MsU0FBUyxDQUFDVCxvQkFBb0IsQ0FBQyxJQUN2Q0osSUFBSSxDQUFDYyxTQUFTLENBQUMsQ0FBQyxJQUNoQmQsSUFBSSxDQUFDZSxpQkFBaUIsQ0FBQyxDQUFDLEVBQ3hCO0lBQ0FmLElBQUksQ0FBQ2dCLGNBQWMsQ0FBQyxNQUFNO01BQ3hCLElBQUlmLFFBQVEsQ0FBQ2dCLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDcEI7UUFDQUMsT0FBTyxDQUFDQyxJQUFJLENBQ1QsWUFBV2QsSUFBSyxzRUFBcUVBLElBQUssb0NBQzdGLENBQUM7TUFDSCxDQUFDLE1BQU07UUFDTDtRQUNBYSxPQUFPLENBQUNDLElBQUksQ0FDVCxZQUFXZCxJQUFLLG1MQUFrTEEsSUFBSyxnQkFDMU0sQ0FBQztNQUNIO0lBQ0YsQ0FBQyxDQUFDO0lBRUZMLElBQUksQ0FBQ29CLGNBQWMsQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQyx5QkFBeUIsRUFBRW5CLG1DQUFtQyxDQUFDQSxtQ0FBbUMsQ0FBQ0csSUFBSSxDQUFDLENBQUM7RUFDNUk7QUFDRjtBQUVBUix1QkFBdUIsR0FBR00sZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2J1Y2thbGV3LWZpbmFuY2lhbC1zZXJ2aWNlcy8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUvYnVpbGQvY2pzL3V0aWxzL2Vuc3VyZUlzV3JhcHBlZC5qcz8yZDE3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUkMSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2NvcmUnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbmpzID0gcmVxdWlyZSgnLi9jb21tb25qcy5qcycpO1xuY29uc3QgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSByZXF1aXJlKCcuL2NyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzJyk7XG5cbi8qKlxuICogQ2hlY2tzIGFuZCB3YXJucyBpZiBhIGZyYW1ld29yayBpc24ndCB3cmFwcGVkIGJ5IG9wZW50ZWxlbWV0cnkuXG4gKi9cbmZ1bmN0aW9uIGVuc3VyZUlzV3JhcHBlZChcbiAgbWF5YmVXcmFwcGVkRnVuY3Rpb24sXG4gIG5hbWUsXG4pIHtcbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgaWYgKFxuICAgICFfb3B0aW9uYWxDaGFpbihbY2xpZW50LCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uZ2V0T3B0aW9ucywgJ2NhbGwnLCBfMiA9PiBfMigpLCAnYWNjZXNzJywgXzMgPT4gXzMuZGlzYWJsZUluc3RydW1lbnRhdGlvbldhcm5pbmdzXSkgJiZcbiAgICAhY29yZSQxLmlzV3JhcHBlZChtYXliZVdyYXBwZWRGdW5jdGlvbikgJiZcbiAgICBjb3JlLmlzRW5hYmxlZCgpICYmXG4gICAgY29yZS5oYXNUcmFjaW5nRW5hYmxlZCgpXG4gICkge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgaWYgKGNvbW1vbmpzLmlzQ2pzKCkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbU2VudHJ5XSAke25hbWV9IGlzIG5vdCBpbnN0cnVtZW50ZWQuIFRoaXMgaXMgbGlrZWx5IGJlY2F1c2UgeW91IHJlcXVpcmVkL2ltcG9ydGVkICR7bmFtZX0gYmVmb3JlIGNhbGxpbmcgXFxgU2VudHJ5LmluaXQoKVxcYC5gLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBbU2VudHJ5XSAke25hbWV9IGlzIG5vdCBpbnN0cnVtZW50ZWQuIFBsZWFzZSBtYWtlIHN1cmUgdG8gaW5pdGlhbGl6ZSBTZW50cnkgaW4gYSBzZXBhcmF0ZSBmaWxlIHRoYXQgeW91IFxcYC0taW1wb3J0XFxgIHdoZW4gcnVubmluZyBub2RlLCBzZWU6IGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzLyR7bmFtZX0vaW5zdGFsbC9lc20vLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb3JlLmdldEdsb2JhbFNjb3BlKCkuc2V0Q29udGV4dCgnbWlzc2luZ19pbnN0cnVtZW50YXRpb24nLCBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dChuYW1lKSk7XG4gIH1cbn1cblxuZXhwb3J0cy5lbnN1cmVJc1dyYXBwZWQgPSBlbnN1cmVJc1dyYXBwZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnN1cmVJc1dyYXBwZWQuanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJyZXF1aXJlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb3JlJDEiLCJjb3JlIiwiY29tbW9uanMiLCJjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCIsImVuc3VyZUlzV3JhcHBlZCIsIm1heWJlV3JhcHBlZEZ1bmN0aW9uIiwibmFtZSIsImNsaWVudCIsImdldENsaWVudCIsIl8iLCJnZXRPcHRpb25zIiwiXzIiLCJfMyIsImRpc2FibGVJbnN0cnVtZW50YXRpb25XYXJuaW5ncyIsImlzV3JhcHBlZCIsImlzRW5hYmxlZCIsImhhc1RyYWNpbmdFbmFibGVkIiwiY29uc29sZVNhbmRib3giLCJpc0NqcyIsImNvbnNvbGUiLCJ3YXJuIiwiZ2V0R2xvYmFsU2NvcGUiLCJzZXRDb250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/ensureIsWrapped.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/envToBool.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/envToBool.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst FALSY_ENV_VALUES = new Set(['false', 'f', 'n', 'no', 'off', '0']);\nconst TRUTHY_ENV_VALUES = new Set(['true', 't', 'y', 'yes', 'on', '1']);\n\n/**\n * A helper function which casts an ENV variable value to `true` or `false` using the constants defined above.\n * In strict mode, it may return `null` if the value doesn't match any of the predefined values.\n *\n * @param value The value of the env variable\n * @param options -- Only has `strict` key for now, which requires a strict match for `true` in TRUTHY_ENV_VALUES\n * @returns true/false if the lowercase value matches the predefined values above. If not, null in strict mode,\n *          and Boolean(value) in loose mode.\n */\nfunction envToBool(value, options) {\n  const normalized = String(value).toLowerCase();\n  if (FALSY_ENV_VALUES.has(normalized)) {\n    return false;\n  }\n  if (TRUTHY_ENV_VALUES.has(normalized)) {\n    return true;\n  }\n  return options && options.strict ? null : Boolean(value);\n}\nexports.FALSY_ENV_VALUES = FALSY_ENV_VALUES;\nexports.TRUTHY_ENV_VALUES = TRUTHY_ENV_VALUES;\nexports.envToBool = envToBool;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZW52VG9Cb29sLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN2RSxNQUFNQyxpQkFBaUIsR0FBRyxJQUFJRCxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDOztBQUV2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxTQUFTQSxDQUFDSixLQUFLLEVBQUVLLE9BQU8sRUFBRTtFQUNqQyxNQUFNQyxVQUFVLEdBQUdDLE1BQU0sQ0FBQ1AsS0FBSyxDQUFDLENBQUNRLFdBQVcsQ0FBQyxDQUFDO0VBRTlDLElBQUlQLGdCQUFnQixDQUFDUSxHQUFHLENBQUNILFVBQVUsQ0FBQyxFQUFFO0lBQ3BDLE9BQU8sS0FBSztFQUNkO0VBRUEsSUFBSUgsaUJBQWlCLENBQUNNLEdBQUcsQ0FBQ0gsVUFBVSxDQUFDLEVBQUU7SUFDckMsT0FBTyxJQUFJO0VBQ2I7RUFFQSxPQUFPRCxPQUFPLElBQUlBLE9BQU8sQ0FBQ0ssTUFBTSxHQUFHLElBQUksR0FBR0MsT0FBTyxDQUFDWCxLQUFLLENBQUM7QUFDMUQ7QUFFQUQsd0JBQXdCLEdBQUdFLGdCQUFnQjtBQUMzQ0YseUJBQXlCLEdBQUdJLGlCQUFpQjtBQUM3Q0osaUJBQWlCLEdBQUdLLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9lbnZUb0Jvb2wuanM/OTQ2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBGQUxTWV9FTlZfVkFMVUVTID0gbmV3IFNldChbJ2ZhbHNlJywgJ2YnLCAnbicsICdubycsICdvZmYnLCAnMCddKTtcbmNvbnN0IFRSVVRIWV9FTlZfVkFMVUVTID0gbmV3IFNldChbJ3RydWUnLCAndCcsICd5JywgJ3llcycsICdvbicsICcxJ10pO1xuXG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHdoaWNoIGNhc3RzIGFuIEVOViB2YXJpYWJsZSB2YWx1ZSB0byBgdHJ1ZWAgb3IgYGZhbHNlYCB1c2luZyB0aGUgY29uc3RhbnRzIGRlZmluZWQgYWJvdmUuXG4gKiBJbiBzdHJpY3QgbW9kZSwgaXQgbWF5IHJldHVybiBgbnVsbGAgaWYgdGhlIHZhbHVlIGRvZXNuJ3QgbWF0Y2ggYW55IG9mIHRoZSBwcmVkZWZpbmVkIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBlbnYgdmFyaWFibGVcbiAqIEBwYXJhbSBvcHRpb25zIC0tIE9ubHkgaGFzIGBzdHJpY3RgIGtleSBmb3Igbm93LCB3aGljaCByZXF1aXJlcyBhIHN0cmljdCBtYXRjaCBmb3IgYHRydWVgIGluIFRSVVRIWV9FTlZfVkFMVUVTXG4gKiBAcmV0dXJucyB0cnVlL2ZhbHNlIGlmIHRoZSBsb3dlcmNhc2UgdmFsdWUgbWF0Y2hlcyB0aGUgcHJlZGVmaW5lZCB2YWx1ZXMgYWJvdmUuIElmIG5vdCwgbnVsbCBpbiBzdHJpY3QgbW9kZSxcbiAqICAgICAgICAgIGFuZCBCb29sZWFuKHZhbHVlKSBpbiBsb29zZSBtb2RlLlxuICovXG5mdW5jdGlvbiBlbnZUb0Jvb2wodmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IFN0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoRkFMU1lfRU5WX1ZBTFVFUy5oYXMobm9ybWFsaXplZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoVFJVVEhZX0VOVl9WQUxVRVMuaGFzKG5vcm1hbGl6ZWQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnN0cmljdCA/IG51bGwgOiBCb29sZWFuKHZhbHVlKTtcbn1cblxuZXhwb3J0cy5GQUxTWV9FTlZfVkFMVUVTID0gRkFMU1lfRU5WX1ZBTFVFUztcbmV4cG9ydHMuVFJVVEhZX0VOVl9WQUxVRVMgPSBUUlVUSFlfRU5WX1ZBTFVFUztcbmV4cG9ydHMuZW52VG9Cb29sID0gZW52VG9Cb29sO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52VG9Cb29sLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRkFMU1lfRU5WX1ZBTFVFUyIsIlNldCIsIlRSVVRIWV9FTlZfVkFMVUVTIiwiZW52VG9Cb29sIiwib3B0aW9ucyIsIm5vcm1hbGl6ZWQiLCJTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImhhcyIsInN0cmljdCIsIkJvb2xlYW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/envToBool.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/errorhandling.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/errorhandling.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/node/build/cjs/debug-build.js\");\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nfunction logAndExitProcess(error) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n  const client = core.getClient();\n  if (client === undefined) {\n    debugBuild.DEBUG_BUILD && core.logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n  const options = client.getOptions();\n  const timeout = options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout || DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(result => {\n    if (!result) {\n      debugBuild.DEBUG_BUILD && core.logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n    }\n    global.process.exit(1);\n  }, error => {\n    debugBuild.DEBUG_BUILD && core.logger.error(error);\n  });\n}\nexports.logAndExitProcess = logAndExitProcess;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZXJyb3JoYW5kbGluZy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBQ3BDLE1BQU1DLFVBQVUsR0FBR0QsbUJBQU8sQ0FBQyw0RkFBbUIsQ0FBQztBQUUvQyxNQUFNRSx3QkFBd0IsR0FBRyxJQUFJOztBQUVyQztBQUNBO0FBQ0E7QUFDQSxTQUFTQyxpQkFBaUJBLENBQUNDLEtBQUssRUFBRTtFQUNoQ0wsSUFBSSxDQUFDTSxjQUFjLENBQUMsTUFBTTtJQUN4QjtJQUNBQyxPQUFPLENBQUNGLEtBQUssQ0FBQ0EsS0FBSyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztFQUVGLE1BQU1HLE1BQU0sR0FBR1IsSUFBSSxDQUFDUyxTQUFTLENBQUMsQ0FBQztFQUUvQixJQUFJRCxNQUFNLEtBQUtFLFNBQVMsRUFBRTtJQUN4QlIsVUFBVSxDQUFDUyxXQUFXLElBQUlYLElBQUksQ0FBQ1ksTUFBTSxDQUFDQyxJQUFJLENBQUMsNERBQTRELENBQUM7SUFDeEdDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RCO0VBQ0Y7RUFFQSxNQUFNQyxPQUFPLEdBQUdULE1BQU0sQ0FBQ1UsVUFBVSxDQUFDLENBQUM7RUFDbkMsTUFBTUMsT0FBTyxHQUNWRixPQUFPLElBQUlBLE9BQU8sQ0FBQ0csZUFBZSxJQUFJSCxPQUFPLENBQUNHLGVBQWUsR0FBRyxDQUFDLElBQUlILE9BQU8sQ0FBQ0csZUFBZSxJQUM3RmpCLHdCQUF3QjtFQUMxQkssTUFBTSxDQUFDYSxLQUFLLENBQUNGLE9BQU8sQ0FBQyxDQUFDRyxJQUFJLENBQ3ZCQyxNQUFNLElBQUs7SUFDVixJQUFJLENBQUNBLE1BQU0sRUFBRTtNQUNYckIsVUFBVSxDQUFDUyxXQUFXLElBQUlYLElBQUksQ0FBQ1ksTUFBTSxDQUFDQyxJQUFJLENBQUMsNEVBQTRFLENBQUM7SUFDMUg7SUFDQUMsTUFBTSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDeEIsQ0FBQyxFQUNEWCxLQUFLLElBQUk7SUFDUEgsVUFBVSxDQUFDUyxXQUFXLElBQUlYLElBQUksQ0FBQ1ksTUFBTSxDQUFDUCxLQUFLLENBQUNBLEtBQUssQ0FBQztFQUNwRCxDQUNGLENBQUM7QUFDSDtBQUVBUCx5QkFBeUIsR0FBR00saUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZXJyb3JoYW5kbGluZy5qcz9mYmZlIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBERUZBVUxUX1NIVVRET1dOX1RJTUVPVVQgPSAyMDAwO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gbG9nQW5kRXhpdFByb2Nlc3MoZXJyb3IpIHtcbiAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfSk7XG5cbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcblxuICBpZiAoY2xpZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLndhcm4oJ05vIE5vZGVDbGllbnQgd2FzIGRlZmluZWQsIHdlIGFyZSBleGl0aW5nIHRoZSBwcm9jZXNzIG5vdy4nKTtcbiAgICBnbG9iYWwucHJvY2Vzcy5leGl0KDEpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuICBjb25zdCB0aW1lb3V0ID1cbiAgICAob3B0aW9ucyAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCA+IDAgJiYgb3B0aW9ucy5zaHV0ZG93blRpbWVvdXQpIHx8XG4gICAgREVGQVVMVF9TSFVURE9XTl9USU1FT1VUO1xuICBjbGllbnQuY2xvc2UodGltZW91dCkudGhlbihcbiAgICAocmVzdWx0KSA9PiB7XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUubG9nZ2VyLndhcm4oJ1dlIHJlYWNoZWQgdGhlIHRpbWVvdXQgZm9yIGVtcHR5aW5nIHRoZSByZXF1ZXN0IGJ1ZmZlciwgc3RpbGwgZXhpdGluZyBub3chJyk7XG4gICAgICB9XG4gICAgICBnbG9iYWwucHJvY2Vzcy5leGl0KDEpO1xuICAgIH0sXG4gICAgZXJyb3IgPT4ge1xuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci5lcnJvcihlcnJvcik7XG4gICAgfSxcbiAgKTtcbn1cblxuZXhwb3J0cy5sb2dBbmRFeGl0UHJvY2VzcyA9IGxvZ0FuZEV4aXRQcm9jZXNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JoYW5kbGluZy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvcmUiLCJyZXF1aXJlIiwiZGVidWdCdWlsZCIsIkRFRkFVTFRfU0hVVERPV05fVElNRU9VVCIsImxvZ0FuZEV4aXRQcm9jZXNzIiwiZXJyb3IiLCJjb25zb2xlU2FuZGJveCIsImNvbnNvbGUiLCJjbGllbnQiLCJnZXRDbGllbnQiLCJ1bmRlZmluZWQiLCJERUJVR19CVUlMRCIsImxvZ2dlciIsIndhcm4iLCJnbG9iYWwiLCJwcm9jZXNzIiwiZXhpdCIsIm9wdGlvbnMiLCJnZXRPcHRpb25zIiwidGltZW91dCIsInNodXRkb3duVGltZW91dCIsImNsb3NlIiwidGhlbiIsInJlc3VsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/errorhandling.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** Build a full URL from request options. */\nfunction getRequestUrl(requestOptions) {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port = !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname) ? '' : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\nexports.getRequestUrl = getRequestUrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZ2V0UmVxdWVzdFVybC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDOztBQUU3RDtBQUNBLFNBQVNDLGFBQWFBLENBQUNDLGNBQWMsRUFBRTtFQUNyQyxNQUFNQyxRQUFRLEdBQUdELGNBQWMsQ0FBQ0MsUUFBUSxJQUFJLEVBQUU7RUFDOUMsTUFBTUMsUUFBUSxHQUFHRixjQUFjLENBQUNFLFFBQVEsSUFBSUYsY0FBYyxDQUFDRyxJQUFJLElBQUksRUFBRTtFQUNyRTtFQUNBO0VBQ0EsTUFBTUMsSUFBSSxHQUNSLENBQUNKLGNBQWMsQ0FBQ0ksSUFBSSxJQUFJSixjQUFjLENBQUNJLElBQUksS0FBSyxFQUFFLElBQUlKLGNBQWMsQ0FBQ0ksSUFBSSxLQUFLLEdBQUcsSUFBSSxjQUFjLENBQUNDLElBQUksQ0FBQ0gsUUFBUSxDQUFDLEdBQzlHLEVBQUUsR0FDRCxJQUFHRixjQUFjLENBQUNJLElBQUssRUFBQztFQUMvQixNQUFNRSxJQUFJLEdBQUdOLGNBQWMsQ0FBQ00sSUFBSSxHQUFHTixjQUFjLENBQUNNLElBQUksR0FBRyxHQUFHO0VBQzVELE9BQVEsR0FBRUwsUUFBUyxLQUFJQyxRQUFTLEdBQUVFLElBQUssR0FBRUUsSUFBSyxFQUFDO0FBQ2pEO0FBRUFULHFCQUFxQixHQUFHRSxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVja2FsZXctZmluYW5jaWFsLXNlcnZpY2VzLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvZ2V0UmVxdWVzdFVybC5qcz9hNmY1Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKiBCdWlsZCBhIGZ1bGwgVVJMIGZyb20gcmVxdWVzdCBvcHRpb25zLiAqL1xuZnVuY3Rpb24gZ2V0UmVxdWVzdFVybChyZXF1ZXN0T3B0aW9ucykge1xuICBjb25zdCBwcm90b2NvbCA9IHJlcXVlc3RPcHRpb25zLnByb3RvY29sIHx8ICcnO1xuICBjb25zdCBob3N0bmFtZSA9IHJlcXVlc3RPcHRpb25zLmhvc3RuYW1lIHx8IHJlcXVlc3RPcHRpb25zLmhvc3QgfHwgJyc7XG4gIC8vIERvbid0IGxvZyBzdGFuZGFyZCA6ODAgKGh0dHApIGFuZCA6NDQzIChodHRwcykgcG9ydHMgdG8gcmVkdWNlIHRoZSBub2lzZVxuICAvLyBBbHNvIGRvbid0IGFkZCBwb3J0IGlmIHRoZSBob3N0bmFtZSBhbHJlYWR5IGluY2x1ZGVzIGEgcG9ydFxuICBjb25zdCBwb3J0ID1cbiAgICAhcmVxdWVzdE9wdGlvbnMucG9ydCB8fCByZXF1ZXN0T3B0aW9ucy5wb3J0ID09PSA4MCB8fCByZXF1ZXN0T3B0aW9ucy5wb3J0ID09PSA0NDMgfHwgL14oLiopOihcXGQrKSQvLnRlc3QoaG9zdG5hbWUpXG4gICAgICA/ICcnXG4gICAgICA6IGA6JHtyZXF1ZXN0T3B0aW9ucy5wb3J0fWA7XG4gIGNvbnN0IHBhdGggPSByZXF1ZXN0T3B0aW9ucy5wYXRoID8gcmVxdWVzdE9wdGlvbnMucGF0aCA6ICcvJztcbiAgcmV0dXJuIGAke3Byb3RvY29sfS8vJHtob3N0bmFtZX0ke3BvcnR9JHtwYXRofWA7XG59XG5cbmV4cG9ydHMuZ2V0UmVxdWVzdFVybCA9IGdldFJlcXVlc3RVcmw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRSZXF1ZXN0VXJsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0UmVxdWVzdFVybCIsInJlcXVlc3RPcHRpb25zIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsImhvc3QiLCJwb3J0IiwidGVzdCIsInBhdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/getRequestUrl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/module.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/module.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path.replace(/^[A-Z]:/, '') // remove Windows-style prefix\n  .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(basePath = process.argv[1] ? core.dirname(process.argv[1]) : process.cwd(), isWindows = node_path.sep === '\\\\') {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n  return filename => {\n    if (!filename) {\n      return;\n    }\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let {\n      dir,\n      base: file,\n      ext\n    } = node_path.posix.parse(normalizedFilename);\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    // The file name might be URI-encoded which we want to decode to\n    // the original file name.\n    const decodedFile = decodeURIComponent(file);\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${decodedFile}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      const moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n      return moduleName ? `${moduleName}:${decodedFile}` : decodedFile;\n    }\n    return decodedFile;\n  };\n}\nexports.createGetModuleFromFilename = createGetModuleFromFilename;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS9idWlsZC9janMvdXRpbHMvbW9kdWxlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsU0FBUyxHQUFHQyxtQkFBTyxDQUFDLDRCQUFXLENBQUM7QUFDdEMsTUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLGlGQUFjLENBQUM7O0FBRXBDO0FBQ0EsU0FBU0Usb0JBQW9CQSxDQUFDQyxJQUFJLEVBQUU7RUFDbEMsT0FBT0EsSUFBSSxDQUNSQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQUEsQ0FDdkJBLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMxQjs7QUFFQTtBQUNBLFNBQVNDLDJCQUEyQkEsQ0FDbENDLFFBQVEsR0FBR0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUdQLElBQUksQ0FBQ1EsT0FBTyxDQUFDRixPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHRCxPQUFPLENBQUNHLEdBQUcsQ0FBQyxDQUFDLEVBQzFFQyxTQUFTLEdBQUdaLFNBQVMsQ0FBQ2EsR0FBRyxLQUFLLElBQUksRUFDbEM7RUFDQSxNQUFNQyxjQUFjLEdBQUdGLFNBQVMsR0FBR1Qsb0JBQW9CLENBQUNJLFFBQVEsQ0FBQyxHQUFHQSxRQUFRO0VBRTVFLE9BQVFRLFFBQVEsSUFBSztJQUNuQixJQUFJLENBQUNBLFFBQVEsRUFBRTtNQUNiO0lBQ0Y7SUFFQSxNQUFNQyxrQkFBa0IsR0FBR0osU0FBUyxHQUFHVCxvQkFBb0IsQ0FBQ1ksUUFBUSxDQUFDLEdBQUdBLFFBQVE7O0lBRWhGO0lBQ0EsSUFBSTtNQUFFRSxHQUFHO01BQUVDLElBQUksRUFBRUMsSUFBSTtNQUFFQztJQUFJLENBQUMsR0FBR3BCLFNBQVMsQ0FBQ3FCLEtBQUssQ0FBQ0MsS0FBSyxDQUFDTixrQkFBa0IsQ0FBQztJQUV4RSxJQUFJSSxHQUFHLEtBQUssS0FBSyxJQUFJQSxHQUFHLEtBQUssTUFBTSxJQUFJQSxHQUFHLEtBQUssTUFBTSxFQUFFO01BQ3JERCxJQUFJLEdBQUdBLElBQUksQ0FBQ0ksS0FBSyxDQUFDLENBQUMsRUFBRUgsR0FBRyxDQUFDSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdkM7O0lBRUE7SUFDQTtJQUNBLE1BQU1DLFdBQVcsR0FBR0Msa0JBQWtCLENBQUNQLElBQUksQ0FBQztJQUU1QyxJQUFJLENBQUNGLEdBQUcsRUFBRTtNQUNSO01BQ0FBLEdBQUcsR0FBRyxHQUFHO0lBQ1g7SUFFQSxNQUFNVSxDQUFDLEdBQUdWLEdBQUcsQ0FBQ1csV0FBVyxDQUFDLGVBQWUsQ0FBQztJQUMxQyxJQUFJRCxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7TUFDVixPQUFRLEdBQUVWLEdBQUcsQ0FBQ00sS0FBSyxDQUFDSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUN0QixPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBRSxJQUFHb0IsV0FBWSxFQUFDO0lBQ2xFOztJQUVBO0lBQ0E7SUFDQSxJQUFJUixHQUFHLENBQUNZLFVBQVUsQ0FBQ2YsY0FBYyxDQUFDLEVBQUU7TUFDbEMsTUFBTWdCLFVBQVUsR0FBR2IsR0FBRyxDQUFDTSxLQUFLLENBQUNULGNBQWMsQ0FBQ1UsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDbkIsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7TUFDM0UsT0FBT3lCLFVBQVUsR0FBSSxHQUFFQSxVQUFXLElBQUdMLFdBQVksRUFBQyxHQUFHQSxXQUFXO0lBQ2xFO0lBRUEsT0FBT0EsV0FBVztFQUNwQixDQUFDO0FBQ0g7QUFFQTNCLG1DQUFtQyxHQUFHUSwyQkFBMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWNrYWxldy1maW5hbmNpYWwtc2VydmljZXMvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlL2J1aWxkL2Nqcy91dGlscy9tb2R1bGUuanM/YzM2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBub2RlX3BhdGggPSByZXF1aXJlKCdub2RlOnBhdGgnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqIG5vcm1hbGl6ZXMgV2luZG93cyBwYXRocyAqL1xuZnVuY3Rpb24gbm9ybWFsaXplV2luZG93c1BhdGgocGF0aCkge1xuICByZXR1cm4gcGF0aFxuICAgIC5yZXBsYWNlKC9eW0EtWl06LywgJycpIC8vIHJlbW92ZSBXaW5kb3dzLXN0eWxlIHByZWZpeFxuICAgIC5yZXBsYWNlKC9cXFxcL2csICcvJyk7IC8vIHJlcGxhY2UgYWxsIGBcXGAgaW5zdGFuY2VzIHdpdGggYC9gXG59XG5cbi8qKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBtb2R1bGUgbmFtZSBmcm9tIGEgZmlsZW5hbWUgKi9cbmZ1bmN0aW9uIGNyZWF0ZUdldE1vZHVsZUZyb21GaWxlbmFtZShcbiAgYmFzZVBhdGggPSBwcm9jZXNzLmFyZ3ZbMV0gPyBjb3JlLmRpcm5hbWUocHJvY2Vzcy5hcmd2WzFdKSA6IHByb2Nlc3MuY3dkKCksXG4gIGlzV2luZG93cyA9IG5vZGVfcGF0aC5zZXAgPT09ICdcXFxcJyxcbikge1xuICBjb25zdCBub3JtYWxpemVkQmFzZSA9IGlzV2luZG93cyA/IG5vcm1hbGl6ZVdpbmRvd3NQYXRoKGJhc2VQYXRoKSA6IGJhc2VQYXRoO1xuXG4gIHJldHVybiAoZmlsZW5hbWUpID0+IHtcbiAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgbm9ybWFsaXplZEZpbGVuYW1lID0gaXNXaW5kb3dzID8gbm9ybWFsaXplV2luZG93c1BhdGgoZmlsZW5hbWUpIDogZmlsZW5hbWU7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0XG4gICAgbGV0IHsgZGlyLCBiYXNlOiBmaWxlLCBleHQgfSA9IG5vZGVfcGF0aC5wb3NpeC5wYXJzZShub3JtYWxpemVkRmlsZW5hbWUpO1xuXG4gICAgaWYgKGV4dCA9PT0gJy5qcycgfHwgZXh0ID09PSAnLm1qcycgfHwgZXh0ID09PSAnLmNqcycpIHtcbiAgICAgIGZpbGUgPSBmaWxlLnNsaWNlKDAsIGV4dC5sZW5ndGggKiAtMSk7XG4gICAgfVxuXG4gICAgLy8gVGhlIGZpbGUgbmFtZSBtaWdodCBiZSBVUkktZW5jb2RlZCB3aGljaCB3ZSB3YW50IHRvIGRlY29kZSB0b1xuICAgIC8vIHRoZSBvcmlnaW5hbCBmaWxlIG5hbWUuXG4gICAgY29uc3QgZGVjb2RlZEZpbGUgPSBkZWNvZGVVUklDb21wb25lbnQoZmlsZSk7XG5cbiAgICBpZiAoIWRpcikge1xuICAgICAgLy8gTm8gZGlybmFtZSB3aGF0c29ldmVyXG4gICAgICBkaXIgPSAnLic7XG4gICAgfVxuXG4gICAgY29uc3QgbiA9IGRpci5sYXN0SW5kZXhPZignL25vZGVfbW9kdWxlcycpO1xuICAgIGlmIChuID4gLTEpIHtcbiAgICAgIHJldHVybiBgJHtkaXIuc2xpY2UobiArIDE0KS5yZXBsYWNlKC9cXC8vZywgJy4nKX06JHtkZWNvZGVkRmlsZX1gO1xuICAgIH1cblxuICAgIC8vIExldCdzIHNlZSBpZiBpdCdzIGEgcGFydCBvZiB0aGUgbWFpbiBtb2R1bGVcbiAgICAvLyBUbyBiZSBhIHBhcnQgb2YgbWFpbiBtb2R1bGUsIGl0IGhhcyB0byBzaGFyZSB0aGUgc2FtZSBiYXNlXG4gICAgaWYgKGRpci5zdGFydHNXaXRoKG5vcm1hbGl6ZWRCYXNlKSkge1xuICAgICAgY29uc3QgbW9kdWxlTmFtZSA9IGRpci5zbGljZShub3JtYWxpemVkQmFzZS5sZW5ndGggKyAxKS5yZXBsYWNlKC9cXC8vZywgJy4nKTtcbiAgICAgIHJldHVybiBtb2R1bGVOYW1lID8gYCR7bW9kdWxlTmFtZX06JHtkZWNvZGVkRmlsZX1gIDogZGVjb2RlZEZpbGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlY29kZWRGaWxlO1xuICB9O1xufVxuXG5leHBvcnRzLmNyZWF0ZUdldE1vZHVsZUZyb21GaWxlbmFtZSA9IGNyZWF0ZUdldE1vZHVsZUZyb21GaWxlbmFtZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm5vZGVfcGF0aCIsInJlcXVpcmUiLCJjb3JlIiwibm9ybWFsaXplV2luZG93c1BhdGgiLCJwYXRoIiwicmVwbGFjZSIsImNyZWF0ZUdldE1vZHVsZUZyb21GaWxlbmFtZSIsImJhc2VQYXRoIiwicHJvY2VzcyIsImFyZ3YiLCJkaXJuYW1lIiwiY3dkIiwiaXNXaW5kb3dzIiwic2VwIiwibm9ybWFsaXplZEJhc2UiLCJmaWxlbmFtZSIsIm5vcm1hbGl6ZWRGaWxlbmFtZSIsImRpciIsImJhc2UiLCJmaWxlIiwiZXh0IiwicG9zaXgiLCJwYXJzZSIsInNsaWNlIiwibGVuZ3RoIiwiZGVjb2RlZEZpbGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJuIiwibGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwibW9kdWxlTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/module.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/node/build/cjs/utils/redisCache.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/node/build/cjs/utils/redisCache.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst SINGLE_ARG_COMMANDS = ['get', 'set', 'setex'];\nconst GET_COMMANDS = ['get', 'mget'];\nconst SET_COMMANDS = ['set', 'setex'];\n// todo: del, expire\n\n/** Checks if a given command is in the list of redis commands.\n *  Useful because commands can come in lowercase or uppercase (depending on the library). */\nfunction isInCommands(redisCommands, command) {\n  return redisCommands.includes(command.toLowerCase());\n}\n\n/** Determine cache operation based on redis statement */\nfunction getCacheOperation(command) {\n  if (isInCommands(GET_COMMANDS, command)) {\n    return 'cache.get';\n  } else if (isInCommands(SET_COMMANDS, command)) {\n    return 'cache.put';\n  } else {\n    return undefined;\n  }\n}\nfunction keyHasPrefix(key, prefixes) {\n  return prefixes.some(prefix => key.startsWith(prefix));\n}\n\n/** Safely converts a redis key to a string (comma-separated if there are multiple keys) */\nfunction getCacheKeySafely(redisCommand, cmdArgs) {\n  try {\n    if (cmdArgs.length === 0) {\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const processArg = arg => {\n      if (typeof arg === 'string' || typeof arg === 'number' || Buffer.isBuffer(arg)) {\n        return [arg.toString()];\n      } else if (Array.isArray(arg)) {\n        return flatten(arg.map(arg => processArg(arg)));\n      } else {\n        return ['<unknown>'];\n      }\n    };\n    const firstArg = cmdArgs[0];\n    if (isInCommands(SINGLE_ARG_COMMANDS, redisCommand) && firstArg != null) {\n      return processArg(firstArg);\n    }\n    return flatten(cmdArgs.map(arg => processArg(arg)));\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/** Determines whether a redis operation should be considered as \"cache operation\" by checking if a key is prefixed.\n *  We only support certain commands (such as 'set', 'get', 'mget'). */\nfunction shouldConsiderForCache(redisCommand, keys, prefixes) {\n  if (!getCacheOperation(redisCommand)) {\n    return false;\n  }\n  for (const key of keys) {\n    if (keyHasPrefix(key, prefixes)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** Calculates size based on the cache response value */\nfunction calculateCacheItemSize(response) {\n  const getSize = value => {\n    try {\n      if (Buffer.isBuffer(value)) return value.byteLength;else if (typeof value === 'string') return value.length;else if (typeof value === 'number') return value.toString().length;else if (value === null || value === undefined) return 0;\n      return JSON.stringify(value).length;\n    } catch (e) {\n      return undefined;\n    }\n  };\n  return Array.isArray(response) ? response.reduce((acc, curr) => {\n    const size = getSize(curr);\n    return typeof size === 'number' ? acc !== undefined ? acc + size : size : acc;\n  }, 0) : getSize(response);\n}\n\n// TODO(v9): This is inlined from core so we can deprecate `flatten`.\n//           It's usage can be replaced with `Array.flat` in v9.\n\nfunction flatten(input) {\n  const result = [];\n  const flattenHelper = input => {\n    input.forEach(el => {\n      if (Array.isArray(el)) {\n        flattenHelper(el);\n      } else {\n        result.push(el);\n      }\n    });\n  };\n  flattenHelper(input);\n  return result;\n}\nexports.GET_COMMANDS = GET_COMMANDS;\nexports.SET_COMMANDS = SET_COMMANDS;\nexports.calculateCacheItemSize = calculateCacheItemSize;\nexports.getCacheKeySafely = getCacheKeySafely;\nexports.getCacheOperation = getCacheOperation;\nexports.isInCommands = isInCommands;\nexports.shouldConsiderForCache = shouldConsiderForCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/node/build/cjs/utils/redisCache.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/opentelemetry/build/cjs/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/./node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/./node_modules/@opentelemetry/core/build/src/index.js\");\nconst sdkTraceBase = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"(instrument)/./node_modules/@opentelemetry/sdk-trace-base/build/src/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/./node_modules/@opentelemetry/instrumentation/build/src/index.js\");\n\n/** If this attribute is true, it means that the parent is a remote span. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE = 'sentry.parentIsRemote';\n\n// These are not standardized yet, but used by the graphql instrumentation\nconst SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = 'sentry.graphql.operation';\n\n/**\n * Check if a given span has attributes.\n * This is necessary because the base `Span` type does not have attributes,\n * so in places where we are passed a generic span, we need to check if we want to access them.\n */\nfunction spanHasAttributes(span) {\n  const castSpan = span;\n  return !!castSpan.attributes && typeof castSpan.attributes === 'object';\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasKind(span) {\n  const castSpan = span;\n  return typeof castSpan.kind === 'number';\n}\n\n/**\n * Check if a given span has a status.\n * This is necessary because the base `Span` type does not have a status,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasStatus(span) {\n  const castSpan = span;\n  return !!castSpan.status;\n}\n\n/**\n * Check if a given span has a name.\n * This is necessary because the base `Span` type does not have a name,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasName(span) {\n  const castSpan = span;\n  return !!castSpan.name;\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasParentId(span) {\n  const castSpan = span;\n  return !!castSpan.parentSpanId;\n}\n\n/**\n * Check if a given span has events.\n * This is necessary because the base `Span` type does not have events,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasEvents(span) {\n  const castSpan = span;\n  return Array.isArray(castSpan.events);\n}\n\n/**\n * Get sanitizied request data from an OTEL span.\n */\nfunction getRequestSpanData(span) {\n  // The base `Span` type has no `attributes`, so we need to guard here against that\n  if (!spanHasAttributes(span)) {\n    return {};\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeUrlAttribute = span.attributes[semanticConventions.ATTR_URL_FULL] || span.attributes[semanticConventions.SEMATTRS_HTTP_URL];\n  const data = {\n    url: maybeUrlAttribute,\n    // eslint-disable-next-line deprecation/deprecation\n    'http.method': span.attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || span.attributes[semanticConventions.SEMATTRS_HTTP_METHOD]\n  };\n\n  // Default to GET if URL is set but method is not\n  if (!data['http.method'] && data.url) {\n    data['http.method'] = 'GET';\n  }\n  try {\n    if (typeof maybeUrlAttribute === 'string') {\n      const url = core.parseUrl(maybeUrlAttribute);\n      data.url = core.getSanitizedUrlString(url);\n      if (url.search) {\n        data['http.query'] = url.search;\n      }\n      if (url.hash) {\n        data['http.fragment'] = url.hash;\n      }\n    }\n  } catch (e) {\n    // ignore\n  }\n  return data;\n}\nfunction _optionalChain$6(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Typescript complains if we do not use `...args: any[]` for the mixin, with:\n// A mixin class must have a constructor with a single rest parameter of type 'any[]'.ts(2545)\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Wrap an Client with things we need for OpenTelemetry support.\n *\n * Usage:\n * const OpenTelemetryClient = getWrappedClientClass(NodeClient);\n * const client = new OpenTelemetryClient(options);\n */\nfunction wrapClientClass(ClientClass) {\n  class OpenTelemetryClient extends ClientClass {\n    constructor(...args) {\n      super(...args);\n    }\n\n    /** Get the OTEL tracer. */\n    get tracer() {\n      if (this._tracer) {\n        return this._tracer;\n      }\n      const name = '@sentry/opentelemetry';\n      const version = core.SDK_VERSION;\n      const tracer = api.trace.getTracer(name, version);\n      this._tracer = tracer;\n      return tracer;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    async flush(timeout) {\n      const provider = this.traceProvider;\n      const spanProcessor = _optionalChain$6([provider, 'optionalAccess', _ => _.activeSpanProcessor]);\n      if (spanProcessor) {\n        await spanProcessor.forceFlush();\n      }\n      return super.flush(timeout);\n    }\n  }\n  return OpenTelemetryClient;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Get the span kind from a span.\n * For whatever reason, this is not public API on the generic \"Span\" type,\n * so we need to check if we actually have a `SDKTraceBaseSpan` where we can fetch this from.\n * Otherwise, we fall back to `SpanKind.INTERNAL`.\n */\nfunction getSpanKind(span) {\n  if (spanHasKind(span)) {\n    return span.kind;\n  }\n  return api.SpanKind.INTERNAL;\n}\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\nconst SENTRY_TRACE_STATE_DSC = 'sentry.dsc';\nconst SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING = 'sentry.sampled_not_recording';\nconst SENTRY_TRACE_STATE_URL = 'sentry.url';\nconst SENTRY_SCOPES_CONTEXT_KEY = api.createContextKey('sentry_scopes');\nconst SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_isolation_scope');\nconst SENTRY_FORK_SET_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_set_scope');\nconst SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_set_isolation_scope');\nconst SCOPE_CONTEXT_FIELD = '_scopeContext';\n\n/**\n * Try to get the current scopes from the given OTEL context.\n * This requires a Context Manager that was wrapped with getWrappedContextManager.\n */\nfunction getScopesFromContext(context) {\n  return context.getValue(SENTRY_SCOPES_CONTEXT_KEY);\n}\n\n/**\n * Set the current scopes on an OTEL context.\n * This will return a forked context with the Propagation Context set.\n */\nfunction setScopesOnContext(context, scopes) {\n  return context.setValue(SENTRY_SCOPES_CONTEXT_KEY, scopes);\n}\n\n/**\n * Set the context on the scope so we can later look it up.\n * We need this to get the context from the scope in the `trace` functions.\n */\nfunction setContextOnScope(scope, context) {\n  core.addNonEnumerableProperty(scope, SCOPE_CONTEXT_FIELD, context);\n}\n\n/**\n * Get the context related to a scope.\n * TODO v8: Use this for the `trace` functions.\n * */\nfunction getContextFromScope(scope) {\n  return scope[SCOPE_CONTEXT_FIELD];\n}\n\n/**\n *\n * @param otelSpan Checks whether a given OTEL Span is an http request to sentry.\n * @returns boolean\n */\nfunction isSentryRequestSpan(span) {\n  if (!spanHasAttributes(span)) {\n    return false;\n  }\n  const {\n    attributes\n  } = span;\n\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[semanticConventions.SEMATTRS_HTTP_URL] || attributes[semanticConventions.ATTR_URL_FULL];\n  if (!httpUrl) {\n    return false;\n  }\n  return core.isSentryRequestUrl(httpUrl.toString(), core.getClient());\n}\nfunction _optionalChain$5(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n/**\n * OpenTelemetry only knows about SAMPLED or NONE decision,\n * but for us it is important to differentiate between unset and unsampled.\n *\n * Both of these are identified as `traceFlags === TracegFlags.NONE`,\n * but we additionally look at a special trace state to differentiate between them.\n */\nfunction getSamplingDecision(spanContext) {\n  const {\n    traceFlags,\n    traceState\n  } = spanContext;\n  const sampledNotRecording = traceState ? traceState.get(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING) === '1' : false;\n\n  // If trace flag is `SAMPLED`, we interpret this as sampled\n  // If it is `NONE`, it could mean either it was sampled to be not recorder, or that it was not sampled at all\n  // For us this is an important difference, sow e look at the SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING\n  // to identify which it is\n  if (traceFlags === api.TraceFlags.SAMPLED) {\n    return true;\n  }\n  if (sampledNotRecording) {\n    return false;\n  }\n\n  // Fall back to DSC as a last resort, that may also contain `sampled`...\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const dsc = dscString ? core.baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n  if (_optionalChain$5([dsc, 'optionalAccess', _ => _.sampled]) === 'true') {\n    return true;\n  }\n  if (_optionalChain$5([dsc, 'optionalAccess', _2 => _2.sampled]) === 'false') {\n    return false;\n  }\n  return undefined;\n}\n\n/**\n * Infer the op & description for a set of name, attributes and kind of a span.\n */\nfunction inferSpanData(spanName, attributes, kind) {\n  // if http.method exists, this is an http request span\n  // eslint-disable-next-line deprecation/deprecation\n  const httpMethod = attributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD] || attributes[semanticConventions.SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod({\n      attributes,\n      name: spanName,\n      kind\n    }, httpMethod);\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const dbSystem = attributes[semanticConventions.SEMATTRS_DB_SYSTEM];\n  const opIsCache = typeof attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] === 'string' && attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');\n\n  // If db.type exists then this is a database call span\n  // If the Redis DB is used as a cache, the span description should not be changed\n  if (dbSystem && !opIsCache) {\n    return descriptionForDbSystem({\n      attributes,\n      name: spanName\n    });\n  }\n  const customSourceOrRoute = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom' ? 'custom' : 'route';\n\n  // If rpc.service exists then this is a rpc call span.\n  // eslint-disable-next-line deprecation/deprecation\n  const rpcService = attributes[semanticConventions.SEMATTRS_RPC_SERVICE];\n  if (rpcService) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, 'route'),\n      op: 'rpc'\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  // eslint-disable-next-line deprecation/deprecation\n  const messagingSystem = attributes[semanticConventions.SEMATTRS_MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: 'message'\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  // eslint-disable-next-line deprecation/deprecation\n  const faasTrigger = attributes[semanticConventions.SEMATTRS_FAAS_TRIGGER];\n  if (faasTrigger) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: faasTrigger.toString()\n    };\n  }\n  return {\n    op: undefined,\n    description: spanName,\n    source: 'custom'\n  };\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Does not overwrite the span name if the source is already set to custom to ensure\n * that user-updated span names are preserved. In this case, we only adjust the op but\n * leave span description and source unchanged.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n */\nfunction parseSpanDescription(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const name = spanHasName(span) ? span.name : '<unknown>';\n  const kind = getSpanKind(span);\n  return inferSpanData(name, attributes, kind);\n}\nfunction descriptionForDbSystem({\n  attributes,\n  name\n}) {\n  // if we already have a custom name, we don't overwrite it but only set the op\n  const userDefinedName = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  if (typeof userDefinedName === 'string') {\n    return {\n      op: 'db',\n      description: userDefinedName,\n      source: attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] || 'custom'\n    };\n  }\n\n  // if we already have the source set to custom, we don't overwrite the span description but only set the op\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom') {\n    return {\n      op: 'db',\n      description: name,\n      source: 'custom'\n    };\n  }\n\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  // eslint-disable-next-line deprecation/deprecation\n  const statement = attributes[semanticConventions.SEMATTRS_DB_STATEMENT];\n  const description = statement ? statement.toString() : name;\n  return {\n    op: 'db',\n    description,\n    source: 'task'\n  };\n}\n\n/** Only exported for tests. */\nfunction descriptionForHttpMethod({\n  name,\n  kind,\n  attributes\n}, httpMethod) {\n  const opParts = ['http'];\n  switch (kind) {\n    case api.SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case api.SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  // Spans for HTTP requests we have determined to be prefetch requests will have a `.prefetch` postfix in the op\n  if (attributes['sentry.http.prefetch']) {\n    opParts.push('prefetch');\n  }\n  const {\n    urlPath,\n    url,\n    query,\n    fragment,\n    hasRoute\n  } = getSanitizedUrl(attributes, kind);\n  if (!urlPath) {\n    return {\n      ...getUserUpdatedNameAndSource(name, attributes),\n      op: opParts.join('.')\n    };\n  }\n  const graphqlOperationsAttribute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION];\n\n  // Ex. GET /api/users\n  const baseDescription = `${httpMethod} ${urlPath}`;\n\n  // When the http span has a graphql operation, append it to the description\n  // We add these in the graphqlIntegration\n  const inferredDescription = graphqlOperationsAttribute ? `${baseDescription} (${getGraphqlOperationNamesFromAttribute(graphqlOperationsAttribute)})` : baseDescription;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const inferredSource = hasRoute || urlPath === '/' ? 'route' : 'url';\n  const data = {};\n  if (url) {\n    data.url = url;\n  }\n  if (query) {\n    data['http.query'] = query;\n  }\n  if (fragment) {\n    data['http.fragment'] = fragment;\n  }\n\n  // If the span kind is neither client nor server, we use the original name\n  // this infers that somebody manually started this span, in which case we don't want to overwrite the name\n  const isClientOrServerKind = kind === api.SpanKind.CLIENT || kind === api.SpanKind.SERVER;\n\n  // If the span is an auto-span (=it comes from one of our instrumentations),\n  // we always want to infer the name\n  // this is necessary because some of the auto-instrumentation we use uses kind=INTERNAL\n  const origin = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual';\n  const isManualSpan = !`${origin}`.startsWith('auto');\n\n  // If users (or in very rare occasions we) set the source to custom, we don't overwrite the name\n  const alreadyHasCustomSource = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom';\n  const customSpanName = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  const useInferredDescription = !alreadyHasCustomSource && customSpanName == null && (isClientOrServerKind || !isManualSpan);\n  const {\n    description,\n    source\n  } = useInferredDescription ? {\n    description: inferredDescription,\n    source: inferredSource\n  } : getUserUpdatedNameAndSource(name, attributes);\n  return {\n    op: opParts.join('.'),\n    description,\n    source,\n    data\n  };\n}\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n  return `${attr}`;\n}\n\n/** Exported for tests only */\nfunction getSanitizedUrl(attributes, kind) {\n  // This is the relative path of the URL, e.g. /sub\n  // eslint-disable-next-line deprecation/deprecation\n  const httpTarget = attributes[semanticConventions.SEMATTRS_HTTP_TARGET];\n  // This is the full URL, including host & query params etc., e.g. https://example.com/sub?foo=bar\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[semanticConventions.SEMATTRS_HTTP_URL] || attributes[semanticConventions.ATTR_URL_FULL];\n  // This is the normalized route name - may not always be available!\n  const httpRoute = attributes[semanticConventions.ATTR_HTTP_ROUTE];\n  const parsedUrl = typeof httpUrl === 'string' ? core.parseUrl(httpUrl) : undefined;\n  const url = parsedUrl ? core.getSanitizedUrlString(parsedUrl) : undefined;\n  const query = parsedUrl && parsedUrl.search ? parsedUrl.search : undefined;\n  const fragment = parsedUrl && parsedUrl.hash ? parsedUrl.hash : undefined;\n  if (typeof httpRoute === 'string') {\n    return {\n      urlPath: httpRoute,\n      url,\n      query,\n      fragment,\n      hasRoute: true\n    };\n  }\n  if (kind === api.SpanKind.SERVER && typeof httpTarget === 'string') {\n    return {\n      urlPath: core.stripUrlQueryAndFragment(httpTarget),\n      url,\n      query,\n      fragment,\n      hasRoute: false\n    };\n  }\n  if (parsedUrl) {\n    return {\n      urlPath: url,\n      url,\n      query,\n      fragment,\n      hasRoute: false\n    };\n  }\n\n  // fall back to target even for client spans, if no URL is present\n  if (typeof httpTarget === 'string') {\n    return {\n      urlPath: core.stripUrlQueryAndFragment(httpTarget),\n      url,\n      query,\n      fragment,\n      hasRoute: false\n    };\n  }\n  return {\n    urlPath: undefined,\n    url,\n    query,\n    fragment,\n    hasRoute: false\n  };\n}\n\n/**\n * Because Otel instrumentation sometimes mutates span names via `span.updateName`, the only way\n * to ensure that a user-set span name is preserved is to store it as a tmp attribute on the span.\n * We delete this attribute once we're done with it when preparing the event envelope.\n *\n * This temp attribute always takes precedence over the original name.\n *\n * We also need to take care of setting the correct source. Users can always update the source\n * after updating the name, so we need to respect that.\n *\n * @internal exported only for testing\n */\nfunction getUserUpdatedNameAndSource(originalName, attributes, fallbackSource = 'custom') {\n  const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] || fallbackSource;\n  const description = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  if (description && typeof description === 'string') {\n    return {\n      description,\n      source\n    };\n  }\n  return {\n    description: originalName,\n    source\n  };\n}\n\n/**\n * Setup a DSC handler on the passed client,\n * ensuring that the transaction name is inferred from the span correctly.\n */\nfunction enhanceDscWithOpenTelemetryRootSpanName(client) {\n  client.on('createDsc', (dsc, rootSpan) => {\n    if (!rootSpan) {\n      return;\n    }\n\n    // We want to overwrite the transaction on the DSC that is created by default in core\n    // The reason for this is that we want to infer the span name, not use the initial one\n    // Otherwise, we'll get names like \"GET\" instead of e.g. \"GET /foo\"\n    // `parseSpanDescription` takes the attributes of the span into account for the name\n    // This mutates the passed-in DSC\n\n    const jsonSpan = core.spanToJSON(rootSpan);\n    const attributes = jsonSpan.data || {};\n    const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n    const {\n      description\n    } = spanHasName(rootSpan) ? parseSpanDescription(rootSpan) : {\n      description: undefined\n    };\n    if (source !== 'url' && description) {\n      dsc.transaction = description;\n    }\n\n    // Also ensure sampling decision is correctly inferred\n    // In core, we use `spanIsSampled`, which just looks at the trace flags\n    // but in OTEL, we use a slightly more complex logic to be able to differntiate between unsampled and deferred sampling\n    if (core.hasTracingEnabled()) {\n      const sampled = getSamplingDecision(rootSpan.spanContext());\n      dsc.sampled = sampled == undefined ? undefined : String(sampled);\n    }\n  });\n}\n\n/**\n * Generate a TraceState for the given data.\n */\nfunction makeTraceState({\n  dsc,\n  sampled\n}) {\n  // We store the DSC as OTEL trace state on the span context\n  const dscString = dsc ? core.dynamicSamplingContextToSentryBaggageHeader(dsc) : undefined;\n  const traceStateBase = new core$1.TraceState();\n  const traceStateWithDsc = dscString ? traceStateBase.set(SENTRY_TRACE_STATE_DSC, dscString) : traceStateBase;\n\n  // We also specifically want to store if this is sampled to be not recording,\n  // or unsampled (=could be either sampled or not)\n  return sampled === false ? traceStateWithDsc.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') : traceStateWithDsc;\n}\n\n/**\n * Generates a SpanContext that represents a PropagationContext.\n * This can be set on a `context` to make this a (virtual) active span.\n *\n * @deprecated This function is deprecated and will be removed in the next major version.\n */\nfunction generateSpanContextForPropagationContext(propagationContext) {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    dsc: propagationContext.dsc,\n    sampled: propagationContext.sampled\n  });\n  const spanContext = {\n    traceId: propagationContext.traceId,\n    // TODO: Do not create an invalid span context here\n    spanId: propagationContext.parentSpanId || '',\n    isRemote: true,\n    traceFlags: propagationContext.sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState\n  };\n  return spanContext;\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  return api.trace.getActiveSpan();\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nconst setupElements = new Set();\n\n/** Get all the OpenTelemetry elements that have been set up. */\nfunction openTelemetrySetupCheck() {\n  return Array.from(setupElements);\n}\n\n/** Mark an OpenTelemetry element as setup. */\nfunction setIsSetup(element) {\n  setupElements.add(element);\n}\nfunction _optionalChain$4(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n/** Get the Sentry propagation context from a span context. */\nfunction getPropagationContextFromSpan(span) {\n  const spanContext = span.spanContext();\n  const {\n    traceId,\n    spanId,\n    traceState\n  } = spanContext;\n\n  // When we have a dsc trace state, it means this came from the incoming trace\n  // Then this takes presedence over the root span\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const traceStateDsc = dscString ? core.baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n  const parentSpanId = spanHasParentId(span) ? span.parentSpanId : undefined;\n  const sampled = getSamplingDecision(spanContext);\n\n  // No trace state? --> Take DSC from root span\n  const dsc = traceStateDsc || core.getDynamicSamplingContextFromSpan(core.getRootSpan(span));\n  return {\n    traceId,\n    spanId,\n    sampled,\n    parentSpanId,\n    dsc\n  };\n}\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nclass SentryPropagator extends core$1.W3CBaggagePropagator {\n  /** A map of URLs that have already been checked for if they match tracePropagationTargets. */\n\n  constructor() {\n    super();\n    setIsSetup('SentryPropagator');\n\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    this._urlMatchesTargetsMap = new core.LRUMap(100);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  inject(context, carrier, setter) {\n    if (core$1.isTracingSuppressed(context)) {\n      DEBUG_BUILD && core.logger.log('[Tracing] Not injecting trace data for url because tracing is suppressed.');\n      return;\n    }\n    const activeSpan = api.trace.getSpan(context);\n    const url = activeSpan && getCurrentURL(activeSpan);\n    const tracePropagationTargets = _optionalChain$4([core.getClient, 'call', _ => _(), 'optionalAccess', _2 => _2.getOptions, 'call', _3 => _3(), 'optionalAccess', _4 => _4.tracePropagationTargets]);\n    if (!shouldPropagateTraceForUrl(url, tracePropagationTargets, this._urlMatchesTargetsMap)) {\n      DEBUG_BUILD && core.logger.log('[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:', url);\n      return;\n    }\n    const existingBaggageHeader = getExistingBaggage(carrier);\n    let baggage = api.propagation.getBaggage(context) || api.propagation.createBaggage({});\n    const {\n      dynamicSamplingContext,\n      traceId,\n      spanId,\n      sampled\n    } = getInjectionData(context);\n    if (existingBaggageHeader) {\n      const baggageEntries = core.parseBaggageHeader(existingBaggageHeader);\n      if (baggageEntries) {\n        Object.entries(baggageEntries).forEach(([key, value]) => {\n          baggage = baggage.setEntry(key, {\n            value\n          });\n        });\n      }\n    }\n    if (dynamicSamplingContext) {\n      baggage = Object.entries(dynamicSamplingContext).reduce((b, [dscKey, dscValue]) => {\n        if (dscValue) {\n          return b.setEntry(`${core.SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, {\n            value: dscValue\n          });\n        }\n        return b;\n      }, baggage);\n    }\n\n    // We also want to avoid setting the default OTEL trace ID, if we get that for whatever reason\n    if (traceId && traceId !== api.INVALID_TRACEID) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, core.generateSentryTraceHeader(traceId, spanId, sampled));\n    }\n    super.inject(api.propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  extract(context, carrier, getter) {\n    const maybeSentryTraceHeader = getter.get(carrier, SENTRY_TRACE_HEADER);\n    const baggage = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n    const sentryTrace = maybeSentryTraceHeader ? Array.isArray(maybeSentryTraceHeader) ? maybeSentryTraceHeader[0] : maybeSentryTraceHeader : undefined;\n\n    // Add remote parent span context\n    // If there is no incoming trace, this will return the context as-is\n    return ensureScopesOnContext(getContextWithRemoteActiveSpan(context, {\n      sentryTrace,\n      baggage\n    }));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  fields() {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n}\nconst NOT_PROPAGATED_MESSAGE = '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:';\n\n/**\n * Check if a given URL should be propagated to or not.\n * If no url is defined, or no trace propagation targets are defined, this will always return `true`.\n * You can also optionally provide a decision map, to cache decisions and avoid repeated regex lookups.\n */\nfunction shouldPropagateTraceForUrl(url, tracePropagationTargets, decisionMap) {\n  if (typeof url !== 'string' || !tracePropagationTargets) {\n    return true;\n  }\n  const cachedDecision = _optionalChain$4([decisionMap, 'optionalAccess', _5 => _5.get, 'call', _6 => _6(url)]);\n  if (cachedDecision !== undefined) {\n    DEBUG_BUILD && !cachedDecision && core.logger.log(NOT_PROPAGATED_MESSAGE, url);\n    return cachedDecision;\n  }\n  const decision = core.stringMatchesSomePattern(url, tracePropagationTargets);\n  _optionalChain$4([decisionMap, 'optionalAccess', _7 => _7.set, 'call', _8 => _8(url, decision)]);\n  DEBUG_BUILD && !decision && core.logger.log(NOT_PROPAGATED_MESSAGE, url);\n  return decision;\n}\n\n/**\n * Get propagation injection data for the given context.\n */\nfunction getInjectionData(context) {\n  const span = api.trace.getSpan(context);\n\n  // If we have a remote span, the spanId should be considered as the parentSpanId, not spanId itself\n  // Instead, we use a virtual (generated) spanId for propagation\n  if (span && span.spanContext().isRemote) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = core.getDynamicSamplingContextFromSpan(span);\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      // Because this is a remote span, we do not want to propagate this directly\n      // As otherwise things may be attached \"directly\" to an unrelated span\n      spanId: core.generateSpanId(),\n      sampled: getSamplingDecision(spanContext)\n    };\n  }\n\n  // If we have a local span, we just use this\n  if (span) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = core.getDynamicSamplingContextFromSpan(span);\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      sampled: getSamplingDecision(spanContext)\n    };\n  }\n\n  // Else we try to use the propagation context from the scope\n  // The only scenario where this should happen is when we neither have a span, nor an incoming trace\n  const scope = _optionalChain$4([getScopesFromContext, 'call', _9 => _9(context), 'optionalAccess', _10 => _10.scope]) || core.getCurrentScope();\n  const client = core.getClient();\n  const propagationContext = scope.getPropagationContext();\n  const dynamicSamplingContext = client ? core.getDynamicSamplingContextFromScope(client, scope) : undefined;\n  return {\n    dynamicSamplingContext,\n    traceId: propagationContext.traceId,\n    // TODO(v9): Use generateSpanId() instead\n    // eslint-disable-next-line deprecation/deprecation\n    spanId: propagationContext.spanId,\n    sampled: propagationContext.sampled\n  };\n}\nfunction getContextWithRemoteActiveSpan(ctx, {\n  sentryTrace,\n  baggage\n}) {\n  const propagationContext = core.propagationContextFromHeaders(sentryTrace, baggage);\n  const {\n    traceId,\n    parentSpanId,\n    sampled,\n    dsc\n  } = propagationContext;\n\n  // We only want to set the virtual span if we are continuing a concrete trace\n  // Otherwise, we ignore the incoming trace here, e.g. if we have no trace headers\n  if (!parentSpanId) {\n    return ctx;\n  }\n  const spanContext = generateRemoteSpanContext({\n    traceId,\n    spanId: parentSpanId,\n    sampled,\n    dsc\n  });\n  return api.trace.setSpanContext(ctx, spanContext);\n}\n\n/**\n * Takes trace strings and propagates them as a remote active span.\n * This should be used in addition to `continueTrace` in OTEL-powered environments.\n */\nfunction continueTraceAsRemoteSpan(ctx, options, callback) {\n  const ctxWithSpanContext = ensureScopesOnContext(getContextWithRemoteActiveSpan(ctx, options));\n  return api.context.with(ctxWithSpanContext, callback);\n}\nfunction ensureScopesOnContext(ctx) {\n  // If there are no scopes yet on the context, ensure we have them\n  const scopes = getScopesFromContext(ctx);\n  const newScopes = {\n    // If we have no scope here, this is most likely either the root context or a context manually derived from it\n    // In this case, we want to fork the current scope, to ensure we do not pollute the root scope\n    scope: scopes ? scopes.scope : core.getCurrentScope().clone(),\n    isolationScope: scopes ? scopes.isolationScope : core.getIsolationScope()\n  };\n  return setScopesOnContext(ctx, newScopes);\n}\n\n/** Try to get the existing baggage header so we can merge this in. */\nfunction getExistingBaggage(carrier) {\n  try {\n    const baggage = carrier[SENTRY_BAGGAGE_HEADER];\n    return Array.isArray(baggage) ? baggage.join(',') : baggage;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * It is pretty tricky to get access to the outgoing request URL of a request in the propagator.\n * As we only have access to the context of the span to be sent and the carrier (=headers),\n * but the span may be unsampled and thus have no attributes.\n *\n * So we use the following logic:\n * 1. If we have an active span, we check if it has a URL attribute.\n * 2. Else, if the active span has no URL attribute (e.g. it is unsampled), we check a special trace state (which we set in our sampler).\n */\nfunction getCurrentURL(span) {\n  const spanData = core.spanToJSON(span).data;\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const urlAttribute = _optionalChain$4([spanData, 'optionalAccess', _11 => _11[semanticConventions.SEMATTRS_HTTP_URL]]) || _optionalChain$4([spanData, 'optionalAccess', _12 => _12[semanticConventions.ATTR_URL_FULL]]);\n  if (urlAttribute) {\n    return urlAttribute;\n  }\n\n  // Also look at the traceState, which we may set in the sampler even for unsampled spans\n  const urlTraceState = _optionalChain$4([span, 'access', _13 => _13.spanContext, 'call', _14 => _14(), 'access', _15 => _15.traceState, 'optionalAccess', _16 => _16.get, 'call', _17 => _17(SENTRY_TRACE_STATE_URL)]);\n  if (urlTraceState) {\n    return urlTraceState;\n  }\n  return undefined;\n}\nfunction generateRemoteSpanContext({\n  spanId,\n  traceId,\n  sampled,\n  dsc\n}) {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    dsc,\n    sampled\n  });\n  const spanContext = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState\n  };\n  return spanContext;\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const tracer = getTracer();\n  const {\n    name,\n    parentSpan: customParentSpan\n  } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n    const spanOptions = getSpanOptions(options);\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return core.handleCallbackErrors(() => callback(span), () => {\n        // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n        if (core.spanToJSON(span).status === undefined) {\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR\n          });\n        }\n      }, () => span.end());\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(options, callback) {\n  const tracer = getTracer();\n  const {\n    name,\n    parentSpan: customParentSpan\n  } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n    const spanOptions = getSpanOptions(options);\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return core.handleCallbackErrors(() => callback(span, () => span.end()), () => {\n        // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n        if (core.spanToJSON(span).status === undefined) {\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR\n          });\n        }\n      });\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const tracer = getTracer();\n  const {\n    name,\n    parentSpan: customParentSpan\n  } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? core$1.suppressTracing(activeCtx) : activeCtx;\n    const spanOptions = getSpanOptions(options);\n    const span = tracer.startSpan(name, spanOptions, ctx);\n    return span;\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will be root spans.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const newContextWithActiveSpan = span ? api.trace.setSpan(api.context.active(), span) : api.trace.deleteSpan(api.context.active());\n  return api.context.with(newContextWithActiveSpan, () => callback(core.getCurrentScope()));\n}\nfunction getTracer() {\n  const client = core.getClient();\n  return client && client.tracer || api.trace.getTracer('@sentry/opentelemetry', core.SDK_VERSION);\n}\nfunction getSpanOptions(options) {\n  const {\n    startTime,\n    attributes,\n    kind,\n    op\n  } = options;\n\n  // OTEL expects timestamps in ms, not seconds\n  const fixedStartTime = typeof startTime === 'number' ? ensureTimestampInMilliseconds(startTime) : startTime;\n  return {\n    attributes: op ? {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n      ...attributes\n    } : attributes,\n    kind,\n    startTime: fixedStartTime\n  };\n}\nfunction ensureTimestampInMilliseconds(timestamp) {\n  const isMs = timestamp < 9999999999;\n  return isMs ? timestamp * 1000 : timestamp;\n}\nfunction getContext(scope, forceTransaction) {\n  const ctx = getContextForScope(scope);\n  const parentSpan = api.trace.getSpan(ctx);\n\n  // In the case that we have no parent span, we start a new trace\n  // Note that if we continue a trace, we'll always have a remote parent span here anyhow\n  if (!parentSpan) {\n    return ctx;\n  }\n\n  // If we don't want to force a transaction, and we have a parent span, all good, we just return as-is!\n  if (!forceTransaction) {\n    return ctx;\n  }\n\n  // Else, if we do have a parent span but want to force a transaction, we have to simulate a \"root\" context\n\n  // Else, we need to do two things:\n  // 1. Unset the parent span from the context, so we'll create a new root span\n  // 2. Ensure the propagation context is correct, so we'll continue from the parent span\n  const ctxWithoutSpan = api.trace.deleteSpan(ctx);\n  const {\n    spanId,\n    traceId\n  } = parentSpan.spanContext();\n  const sampled = getSamplingDecision(parentSpan.spanContext());\n\n  // In this case, when we are forcing a transaction, we want to treat this like continuing an incoming trace\n  // so we set the traceState according to the root span\n  const rootSpan = core.getRootSpan(parentSpan);\n  const dsc = core.getDynamicSamplingContextFromSpan(rootSpan);\n  const traceState = makeTraceState({\n    dsc,\n    sampled\n  });\n  const spanOptions = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState\n  };\n  const ctxWithSpanContext = api.trace.setSpanContext(ctxWithoutSpan, spanOptions);\n  return ctxWithSpanContext;\n}\nfunction getContextForScope(scope) {\n  if (scope) {\n    const ctx = getContextFromScope(scope);\n    if (ctx) {\n      return ctx;\n    }\n  }\n  return api.context.active();\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n *\n * This is a custom version of `continueTrace` that is used in OTEL-powered environments.\n * It propagates the trace as a remote span, in addition to setting it on the propagation context.\n */\nfunction continueTrace(options, callback) {\n  return continueTraceAsRemoteSpan(api.context.active(), options, callback);\n}\n\n/**\n * Get the trace context for a given scope.\n * We have a custom implemention here because we need an OTEL-specific way to get the span from a scope.\n */\nfunction getTraceContextForScope(client, scope) {\n  const ctx = getContextFromScope(scope);\n  const span = ctx && api.trace.getSpan(ctx);\n  const traceContext = span ? core.spanToTraceContext(span) : core.getTraceContextFromScope(scope);\n  const dynamicSamplingContext = span ? core.getDynamicSamplingContextFromSpan(span) : core.getDynamicSamplingContextFromScope(client, scope);\n  return [dynamicSamplingContext, traceContext];\n}\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined ? callback => {\n    return withActiveSpan(parentSpan, callback);\n  } : callback => callback();\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const ctx = core$1.suppressTracing(api.context.active());\n  return api.context.with(ctx, callback);\n}\n\n/** Ensure the `trace` context is set on all events. */\nfunction setupEventContextTrace(client) {\n  client.on('preprocessEvent', event => {\n    const span = getActiveSpan();\n    // For transaction events, this is handled separately\n    // Because the active span may not be the span that is actually the transaction event\n    if (!span || event.type === 'transaction') {\n      return;\n    }\n\n    // If event has already set `trace` context, use that one.\n    event.contexts = {\n      trace: core.spanToTraceContext(span),\n      ...event.contexts\n    };\n    const rootSpan = core.getRootSpan(span);\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: core.getDynamicSamplingContextFromSpan(rootSpan),\n      ...event.sdkProcessingMetadata\n    };\n    return event;\n  });\n}\n\n/**\n * Otel-specific implementation of `getTraceData`.\n * @see `@sentry/core` version of `getTraceData` for more information\n */\nfunction getTraceData({\n  span\n} = {}) {\n  let ctx = api.context.active();\n  if (span) {\n    const {\n      scope\n    } = core.getCapturedScopesOnSpan(span);\n    // fall back to current context if for whatever reason we can't find the one of the span\n    ctx = scope && getContextFromScope(scope) || api.trace.setSpan(api.context.active(), span);\n  }\n  const {\n    traceId,\n    spanId,\n    sampled,\n    dynamicSamplingContext\n  } = getInjectionData(ctx);\n  return {\n    'sentry-trace': core.generateSentryTraceHeader(traceId, spanId, sampled),\n    baggage: core.dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext)\n  };\n}\n\n/**\n * Sets the async context strategy to use follow the OTEL context under the hood.\n * We handle forking a hub inside of our custom OTEL Context Manager (./otelContextManager.ts)\n */\nfunction setOpenTelemetryContextAsyncContextStrategy() {\n  function getScopes() {\n    const ctx = api.context.active();\n    const scopes = getScopesFromContext(ctx);\n    if (scopes) {\n      return scopes;\n    }\n\n    // fallback behavior:\n    // if, for whatever reason, we can't find scopes on the context here, we have to fix this somehow\n    return {\n      scope: core.getDefaultCurrentScope(),\n      isolationScope: core.getDefaultIsolationScope()\n    };\n  }\n  function withScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    // as by default, we don't want to fork this, unless triggered explicitly by `withScope`\n    return api.context.with(ctx, () => {\n      return callback(getCurrentScope());\n    });\n  }\n  function withSetScope(scope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_SET_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which picks up this scope as the current scope\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY, scope), () => {\n      return callback(scope);\n    });\n  }\n  function withIsolationScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY, true), () => {\n      return callback(getIsolationScope());\n    });\n  }\n  function withSetIsolationScope(isolationScope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY, isolationScope), () => {\n      return callback(getIsolationScope());\n    });\n  }\n  function getCurrentScope() {\n    return getScopes().scope;\n  }\n  function getIsolationScope() {\n    return getScopes().isolationScope;\n  }\n  core.setAsyncContextStrategy({\n    withScope,\n    withSetScope,\n    withSetIsolationScope,\n    withIsolationScope,\n    getCurrentScope,\n    getIsolationScope,\n    startSpan,\n    startSpanManual,\n    startInactiveSpan,\n    getActiveSpan,\n    suppressTracing,\n    getTraceData,\n    continueTrace,\n    // The types here don't fully align, because our own `Span` type is narrower\n    // than the OTEL one - but this is OK for here, as we now we'll only have OTEL spans passed around\n    withActiveSpan: withActiveSpan\n  });\n}\nfunction _optionalChain$3(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n/**\n * Wrap an OpenTelemetry ContextManager in a way that ensures the context is kept in sync with the Sentry Scope.\n *\n * Usage:\n * import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\n * const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n * const contextManager = new SentryContextManager();\n */\nfunction wrapContextManagerClass(ContextManagerClass) {\n  /**\n   * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n   * It ensures that we create new scopes per context, so that the OTEL Context & the Sentry Scope are always in sync.\n   *\n   * Note that we currently only support AsyncHooks with this,\n   * but since this should work for Node 14+ anyhow that should be good enough.\n   */\n\n  // @ts-expect-error TS does not like this, but we know this is fine\n  class SentryContextManager extends ContextManagerClass {\n    constructor(...args) {\n      super(...args);\n      setIsSetup('SentryContextManager');\n    }\n    /**\n     * Overwrite with() of the original AsyncLocalStorageContextManager\n     * to ensure we also create new scopes per context.\n     */\n    with(context, fn, thisArg, ...args) {\n      const currentScopes = getScopesFromContext(context);\n      const currentScope = _optionalChain$3([currentScopes, 'optionalAccess', _ => _.scope]) || core.getCurrentScope();\n      const currentIsolationScope = _optionalChain$3([currentScopes, 'optionalAccess', _2 => _2.isolationScope]) || core.getIsolationScope();\n      const shouldForkIsolationScope = context.getValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY) === true;\n      const scope = context.getValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY);\n      const isolationScope = context.getValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n      const newCurrentScope = scope || currentScope.clone();\n      const newIsolationScope = isolationScope || (shouldForkIsolationScope ? currentIsolationScope.clone() : currentIsolationScope);\n      const scopes = {\n        scope: newCurrentScope,\n        isolationScope: newIsolationScope\n      };\n      const ctx1 = setScopesOnContext(context, scopes);\n\n      // Remove the unneeded values again\n      const ctx2 = ctx1.deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY).deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY).deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n      setContextOnScope(newCurrentScope, ctx2);\n      return super.with(ctx2, fn, thisArg, ...args);\n    }\n  }\n  return SentryContextManager;\n}\n\n/**\n * This function runs through a list of OTEL Spans, and wraps them in an `SpanNode`\n * where each node holds a reference to their parent node.\n */\nfunction groupSpansWithParents(spans) {\n  const nodeMap = new Map();\n  for (const span of spans) {\n    createOrUpdateSpanNodeAndRefs(nodeMap, span);\n  }\n  return Array.from(nodeMap, function ([_id, spanNode]) {\n    return spanNode;\n  });\n}\n\n/**\n * This returns the _local_ parent ID - `parentId` on the span may point to a remote span.\n */\nfunction getLocalParentId(span) {\n  const parentIsRemote = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE] === true;\n  // If the parentId is the trace parent ID, we pretend it's undefined\n  // As this means the parent exists somewhere else\n  return !parentIsRemote ? span.parentSpanId : undefined;\n}\nfunction createOrUpdateSpanNodeAndRefs(nodeMap, span) {\n  const id = span.spanContext().spanId;\n  const parentId = getLocalParentId(span);\n  if (!parentId) {\n    createOrUpdateNode(nodeMap, {\n      id,\n      span,\n      children: []\n    });\n    return;\n  }\n\n  // Else make sure to create parent node as well\n  // Note that the parent may not know it's parent _yet_, this may be updated in a later pass\n  const parentNode = createOrGetParentNode(nodeMap, parentId);\n  const node = createOrUpdateNode(nodeMap, {\n    id,\n    span,\n    parentNode,\n    children: []\n  });\n  parentNode.children.push(node);\n}\nfunction createOrGetParentNode(nodeMap, id) {\n  const existing = nodeMap.get(id);\n  if (existing) {\n    return existing;\n  }\n  return createOrUpdateNode(nodeMap, {\n    id,\n    children: []\n  });\n}\nfunction createOrUpdateNode(nodeMap, spanNode) {\n  const existing = nodeMap.get(spanNode.id);\n\n  // If span is already set, nothing to do here\n  if (existing && existing.span) {\n    return existing;\n  }\n\n  // If it exists but span is not set yet, we update it\n  if (existing && !existing.span) {\n    existing.span = spanNode.span;\n    existing.parentNode = spanNode.parentNode;\n    return existing;\n  }\n\n  // Else, we create a new one...\n  nodeMap.set(spanNode.id, spanNode);\n  return spanNode;\n}\n\n// canonicalCodesGrpcMap maps some GRPC codes to Sentry's span statuses. See description in grpc documentation.\nconst canonicalGrpcErrorCodesMap = {\n  '1': 'cancelled',\n  '2': 'unknown_error',\n  '3': 'invalid_argument',\n  '4': 'deadline_exceeded',\n  '5': 'not_found',\n  '6': 'already_exists',\n  '7': 'permission_denied',\n  '8': 'resource_exhausted',\n  '9': 'failed_precondition',\n  '10': 'aborted',\n  '11': 'out_of_range',\n  '12': 'unimplemented',\n  '13': 'internal_error',\n  '14': 'unavailable',\n  '15': 'data_loss',\n  '16': 'unauthenticated'\n};\nconst isStatusErrorMessageValid = message => {\n  return Object.values(canonicalGrpcErrorCodesMap).includes(message);\n};\n\n/**\n * Get a Sentry span status from an otel span.\n */\nfunction mapStatus(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const status = spanHasStatus(span) ? span.status : undefined;\n  if (status) {\n    // Since span status OK is not set by default, we give it priority: https://opentelemetry.io/docs/concepts/signals/traces/#span-status\n    if (status.code === api.SpanStatusCode.OK) {\n      return {\n        code: core.SPAN_STATUS_OK\n      };\n      // If the span is already marked as erroneous we return that exact status\n    } else if (status.code === api.SpanStatusCode.ERROR) {\n      if (typeof status.message === 'undefined') {\n        const inferredStatus = inferStatusFromAttributes(attributes);\n        if (inferredStatus) {\n          return inferredStatus;\n        }\n      }\n      if (status.message && isStatusErrorMessageValid(status.message)) {\n        return {\n          code: core.SPAN_STATUS_ERROR,\n          message: status.message\n        };\n      } else {\n        return {\n          code: core.SPAN_STATUS_ERROR,\n          message: 'unknown_error'\n        };\n      }\n    }\n  }\n\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n  const inferredStatus = inferStatusFromAttributes(attributes);\n  if (inferredStatus) {\n    return inferredStatus;\n  }\n\n  // We default to setting the spans status to ok.\n  if (status && status.code === api.SpanStatusCode.UNSET) {\n    return {\n      code: core.SPAN_STATUS_OK\n    };\n  } else {\n    return {\n      code: core.SPAN_STATUS_ERROR,\n      message: 'unknown_error'\n    };\n  }\n}\nfunction inferStatusFromAttributes(attributes) {\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n\n  // eslint-disable-next-line deprecation/deprecation\n  const httpCodeAttribute = attributes[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE] || attributes[semanticConventions.SEMATTRS_HTTP_STATUS_CODE];\n  // eslint-disable-next-line deprecation/deprecation\n  const grpcCodeAttribute = attributes[semanticConventions.SEMATTRS_RPC_GRPC_STATUS_CODE];\n  const numberHttpCode = typeof httpCodeAttribute === 'number' ? httpCodeAttribute : typeof httpCodeAttribute === 'string' ? parseInt(httpCodeAttribute) : undefined;\n  if (typeof numberHttpCode === 'number') {\n    return core.getSpanStatusFromHttpCode(numberHttpCode);\n  }\n  if (typeof grpcCodeAttribute === 'string') {\n    return {\n      code: core.SPAN_STATUS_ERROR,\n      message: canonicalGrpcErrorCodesMap[grpcCodeAttribute] || 'unknown_error'\n    };\n  }\n  return undefined;\n}\nfunction _optionalChain$2(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\nconst MAX_SPAN_COUNT = 1000;\nconst DEFAULT_TIMEOUT = 300; // 5 min\n\n/**\n * A Sentry-specific exporter that converts OpenTelemetry Spans to Sentry Spans & Transactions.\n */\nclass SentrySpanExporter {\n  /*\n   * A quick explanation on the buckets: We do bucketing of finished spans for efficiency. This span exporter is\n   * accumulating spans until a root span is encountered and then it flushes all the spans that are descendants of that\n   * root span. Because it is totally in the realm of possibilities that root spans are never finished, and we don't\n   * want to accumulate spans indefinitely in memory, we need to periodically evacuate spans. Naively we could simply\n   * store the spans in an array and each time a new span comes in we could iterate through the entire array and\n   * evacuate all spans that have an end-timestamp that is older than our limit. This could get quite expensive because\n   * we would have to iterate a potentially large number of spans every time we evacuate. We want to avoid these large\n   * bursts of computation.\n   *\n   * Instead we go for a bucketing approach and put spans into buckets, based on what second\n   * (modulo the time limit) the span was put into the exporter. With buckets, when we decide to evacuate, we can\n   * iterate through the bucket entries instead, which have an upper bound of items, making the evacuation much more\n   * efficient. Cleaning up also becomes much more efficient since it simply involves de-referencing a bucket within the\n   * bucket array, and letting garbage collection take care of the rest.\n   */\n\n  constructor(options) {\n    this._finishedSpanBucketSize = _optionalChain$2([options, 'optionalAccess', _ => _.timeout]) || DEFAULT_TIMEOUT;\n    this._finishedSpanBuckets = new Array(this._finishedSpanBucketSize).fill(undefined);\n    this._lastCleanupTimestampInS = Math.floor(Date.now() / 1000);\n    this._spansToBucketEntry = new WeakMap();\n  }\n\n  /** Export a single span. */\n  export(span) {\n    const currentTimestampInS = Math.floor(Date.now() / 1000);\n    if (this._lastCleanupTimestampInS !== currentTimestampInS) {\n      let droppedSpanCount = 0;\n      this._finishedSpanBuckets.forEach((bucket, i) => {\n        if (bucket && bucket.timestampInS <= currentTimestampInS - this._finishedSpanBucketSize) {\n          droppedSpanCount += bucket.spans.size;\n          this._finishedSpanBuckets[i] = undefined;\n        }\n      });\n      if (droppedSpanCount > 0) {\n        DEBUG_BUILD && core.logger.log(`SpanExporter dropped ${droppedSpanCount} spans because they were pending for more than ${this._finishedSpanBucketSize} seconds.`);\n      }\n      this._lastCleanupTimestampInS = currentTimestampInS;\n    }\n    const currentBucketIndex = currentTimestampInS % this._finishedSpanBucketSize;\n    const currentBucket = this._finishedSpanBuckets[currentBucketIndex] || {\n      timestampInS: currentTimestampInS,\n      spans: new Set()\n    };\n    this._finishedSpanBuckets[currentBucketIndex] = currentBucket;\n    currentBucket.spans.add(span);\n    this._spansToBucketEntry.set(span, currentBucket);\n\n    // If the span doesn't have a local parent ID (it's a root span), we're gonna flush all the ended spans\n    if (!getLocalParentId(span)) {\n      this._clearTimeout();\n\n      // If we got a parent span, we try to send the span tree\n      // Wait a tick for this, to ensure we avoid race conditions\n      this._flushTimeout = setTimeout(() => {\n        this.flush();\n      }, 1);\n    }\n  }\n\n  /** Try to flush any pending spans immediately. */\n  flush() {\n    this._clearTimeout();\n    const finishedSpans = [];\n    this._finishedSpanBuckets.forEach(bucket => {\n      if (bucket) {\n        finishedSpans.push(...bucket.spans);\n      }\n    });\n    const sentSpans = maybeSend(finishedSpans);\n    const sentSpanCount = sentSpans.size;\n    const remainingOpenSpanCount = finishedSpans.length - sentSpanCount;\n    DEBUG_BUILD && core.logger.log(`SpanExporter exported ${sentSpanCount} spans, ${remainingOpenSpanCount} spans are waiting for their parent spans to finish`);\n    sentSpans.forEach(span => {\n      const bucketEntry = this._spansToBucketEntry.get(span);\n      if (bucketEntry) {\n        bucketEntry.spans.delete(span);\n      }\n    });\n  }\n\n  /** Clear the exporter. */\n  clear() {\n    this._finishedSpanBuckets = this._finishedSpanBuckets.fill(undefined);\n    this._clearTimeout();\n  }\n\n  /** Clear the flush timeout. */\n  _clearTimeout() {\n    if (this._flushTimeout) {\n      clearTimeout(this._flushTimeout);\n      this._flushTimeout = undefined;\n    }\n  }\n}\n\n/**\n * Send the given spans, but only if they are part of a finished transaction.\n *\n * Returns the sent spans.\n * Spans remain unsent when their parent span is not yet finished.\n * This will happen regularly, as child spans are generally finished before their parents.\n * But it _could_ also happen because, for whatever reason, a parent span was lost.\n * In this case, we'll eventually need to clean this up.\n */\nfunction maybeSend(spans) {\n  const grouped = groupSpansWithParents(spans);\n  const sentSpans = new Set();\n  const rootNodes = getCompletedRootNodes(grouped);\n  rootNodes.forEach(root => {\n    const span = root.span;\n    sentSpans.add(span);\n    const transactionEvent = createTransactionForOtelSpan(span);\n\n    // We'll recursively add all the child spans to this array\n    const spans = transactionEvent.spans || [];\n    root.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n\n    // spans.sort() mutates the array, but we do not use this anymore after this point\n    // so we can safely mutate it here\n    transactionEvent.spans = spans.length > MAX_SPAN_COUNT ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT) : spans;\n    const measurements = core.timedEventsToMeasurements(span.events);\n    if (measurements) {\n      transactionEvent.measurements = measurements;\n    }\n    core.captureEvent(transactionEvent);\n  });\n  return sentSpans;\n}\nfunction nodeIsCompletedRootNode(node) {\n  return !!node.span && !node.parentNode;\n}\nfunction getCompletedRootNodes(nodes) {\n  return nodes.filter(nodeIsCompletedRootNode);\n}\nfunction parseSpan(span) {\n  const attributes = span.attributes;\n  const origin = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN];\n  const op = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP];\n  const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n  return {\n    origin,\n    op,\n    source\n  };\n}\n\n/** Exported only for tests. */\nfunction createTransactionForOtelSpan(span) {\n  const {\n    op,\n    description,\n    data,\n    origin = 'manual',\n    source\n  } = getSpanData(span);\n  const capturedSpanScopes = core.getCapturedScopesOnSpan(span);\n  const sampleRate = span.attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  const attributes = core.dropUndefinedKeys({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    ...data,\n    ...removeSentryAttributes(span.attributes)\n  });\n  const {\n    traceId: trace_id,\n    spanId: span_id\n  } = span.spanContext();\n\n  // If parentSpanIdFromTraceState is defined at all, we want it to take precedence\n  // In that case, an empty string should be interpreted as \"no parent span id\",\n  // even if `span.parentSpanId` is set\n  // this is the case when we are starting a new trace, where we have a virtual span based on the propagationContext\n  // We only want to continue the traceId in this case, but ignore the parent span\n  const parent_span_id = span.parentSpanId;\n  const status = mapStatus(span);\n  const traceContext = core.dropUndefinedKeys({\n    parent_span_id,\n    span_id,\n    trace_id,\n    data: attributes,\n    origin,\n    op,\n    status: core.getStatusMessage(status) // As per protocol, span status is allowed to be undefined\n  });\n\n  const statusCode = attributes[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE];\n  const responseContext = typeof statusCode === 'number' ? {\n    response: {\n      status_code: statusCode\n    }\n  } : undefined;\n  const transactionEvent = core.dropUndefinedKeys({\n    contexts: {\n      trace: traceContext,\n      otel: {\n        resource: span.resource.attributes\n      },\n      ...responseContext\n    },\n    spans: [],\n    start_timestamp: core.spanTimeInputToSeconds(span.startTime),\n    timestamp: core.spanTimeInputToSeconds(span.endTime),\n    transaction: description,\n    type: 'transaction',\n    sdkProcessingMetadata: {\n      ...core.dropUndefinedKeys({\n        capturedSpanScope: capturedSpanScopes.scope,\n        capturedSpanIsolationScope: capturedSpanScopes.isolationScope,\n        sampleRate,\n        dynamicSamplingContext: core.getDynamicSamplingContextFromSpan(span)\n      })\n    },\n    ...(source && {\n      transaction_info: {\n        source\n      }\n    }),\n    _metrics_summary: core.getMetricSummaryJsonForSpan(span)\n  });\n  return transactionEvent;\n}\nfunction createAndFinishSpanForOtelSpan(node, spans, sentSpans) {\n  const span = node.span;\n  if (span) {\n    sentSpans.add(span);\n  }\n  const shouldDrop = !span;\n\n  // If this span should be dropped, we still want to create spans for the children of this\n  if (shouldDrop) {\n    node.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n    return;\n  }\n  const span_id = span.spanContext().spanId;\n  const trace_id = span.spanContext().traceId;\n  const {\n    attributes,\n    startTime,\n    endTime,\n    parentSpanId\n  } = span;\n  const {\n    op,\n    description,\n    data,\n    origin = 'manual'\n  } = getSpanData(span);\n  const allData = core.dropUndefinedKeys({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    ...removeSentryAttributes(attributes),\n    ...data\n  });\n  const status = mapStatus(span);\n  const spanJSON = core.dropUndefinedKeys({\n    span_id,\n    trace_id,\n    data: allData,\n    description,\n    parent_span_id: parentSpanId,\n    start_timestamp: core.spanTimeInputToSeconds(startTime),\n    // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n    timestamp: core.spanTimeInputToSeconds(endTime) || undefined,\n    status: core.getStatusMessage(status),\n    // As per protocol, span status is allowed to be undefined\n    op,\n    origin,\n    _metrics_summary: core.getMetricSummaryJsonForSpan(span),\n    measurements: core.timedEventsToMeasurements(span.events)\n  });\n  spans.push(spanJSON);\n  node.children.forEach(child => {\n    createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n  });\n}\nfunction getSpanData(span) {\n  const {\n    op: definedOp,\n    source: definedSource,\n    origin\n  } = parseSpan(span);\n  const {\n    op: inferredOp,\n    description,\n    source: inferredSource,\n    data: inferredData\n  } = parseSpanDescription(span);\n  const op = definedOp || inferredOp;\n  const source = definedSource || inferredSource;\n  const data = {\n    ...inferredData,\n    ...getData(span)\n  };\n  return {\n    op,\n    description,\n    source,\n    origin,\n    data\n  };\n}\n\n/**\n * Remove custom `sentry.` attributes we do not need to send.\n * These are more carrier attributes we use inside of the SDK, we do not need to send them to the API.\n */\nfunction removeSentryAttributes(data) {\n  const cleanedData = {\n    ...data\n  };\n\n  /* eslint-disable @typescript-eslint/no-dynamic-delete */\n  delete cleanedData[core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE];\n  delete cleanedData[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  /* eslint-enable @typescript-eslint/no-dynamic-delete */\n\n  return cleanedData;\n}\nfunction getData(span) {\n  const attributes = span.attributes;\n  const data = {};\n  if (span.kind !== api.SpanKind.INTERNAL) {\n    data['otel.kind'] = api.SpanKind[span.kind];\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeHttpStatusCodeAttribute = attributes[semanticConventions.SEMATTRS_HTTP_STATUS_CODE];\n  if (maybeHttpStatusCodeAttribute) {\n    data[semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE] = maybeHttpStatusCodeAttribute;\n  }\n  const requestData = getRequestSpanData(span);\n  if (requestData.url) {\n    data.url = requestData.url;\n  }\n  if (requestData['http.query']) {\n    data['http.query'] = requestData['http.query'].slice(1);\n  }\n  if (requestData['http.fragment']) {\n    data['http.fragment'] = requestData['http.fragment'].slice(1);\n  }\n  return data;\n}\nfunction _optionalChain$1(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\nfunction onSpanStart(span, parentContext) {\n  // This is a reliable way to get the parent span - because this is exactly how the parent is identified in the OTEL SDK\n  const parentSpan = api.trace.getSpan(parentContext);\n  let scopes = getScopesFromContext(parentContext);\n\n  // We need access to the parent span in order to be able to move up the span tree for breadcrumbs\n  if (parentSpan && !parentSpan.spanContext().isRemote) {\n    core.addChildSpanToSpan(parentSpan, span);\n  }\n\n  // We need this in the span exporter\n  if (parentSpan && parentSpan.spanContext().isRemote) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE, true);\n  }\n\n  // The root context does not have scopes stored, so we check for this specifically\n  // As fallback we attach the global scopes\n  if (parentContext === api.ROOT_CONTEXT) {\n    scopes = {\n      scope: core.getDefaultCurrentScope(),\n      isolationScope: core.getDefaultIsolationScope()\n    };\n  }\n\n  // We need the scope at time of span creation in order to apply it to the event when the span is finished\n  if (scopes) {\n    core.setCapturedScopesOnSpan(span, scopes.scope, scopes.isolationScope);\n  }\n  core.logSpanStart(span);\n  const client = core.getClient();\n  _optionalChain$1([client, 'optionalAccess', _ => _.emit, 'call', _2 => _2('spanStart', span)]);\n}\nfunction onSpanEnd(span) {\n  core.logSpanEnd(span);\n  const client = core.getClient();\n  _optionalChain$1([client, 'optionalAccess', _3 => _3.emit, 'call', _4 => _4('spanEnd', span)]);\n}\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nclass SentrySpanProcessor {\n  constructor(options) {\n    setIsSetup('SentrySpanProcessor');\n    this._exporter = new SentrySpanExporter(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async forceFlush() {\n    this._exporter.flush();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async shutdown() {\n    this._exporter.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onStart(span, parentContext) {\n    onSpanStart(span, parentContext);\n  }\n\n  /** @inheritDoc */\n  onEnd(span) {\n    onSpanEnd(span);\n    this._exporter.export(span);\n  }\n}\n\n/**\n * A custom OTEL sampler that uses Sentry sampling rates to make its decision\n */\nclass SentrySampler {\n  constructor(client) {\n    this._client = client;\n    setIsSetup('SentrySampler');\n  }\n\n  /** @inheritDoc */\n  shouldSample(context, traceId, spanName, spanKind, spanAttributes, _links) {\n    const options = this._client.getOptions();\n    const parentSpan = getValidSpan(context);\n    const parentContext = _optionalChain([parentSpan, 'optionalAccess', _ => _.spanContext, 'call', _2 => _2()]);\n    if (!core.hasTracingEnabled(options)) {\n      return wrapSamplingDecision({\n        decision: undefined,\n        context,\n        spanAttributes\n      });\n    }\n\n    // `ATTR_HTTP_REQUEST_METHOD` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_METHOD`, for now.\n    // eslint-disable-next-line deprecation/deprecation\n    const maybeSpanHttpMethod = spanAttributes[semanticConventions.SEMATTRS_HTTP_METHOD] || spanAttributes[semanticConventions.ATTR_HTTP_REQUEST_METHOD];\n\n    // If we have a http.client span that has no local parent, we never want to sample it\n    // but we want to leave downstream sampling decisions up to the server\n    if (spanKind === api.SpanKind.CLIENT && maybeSpanHttpMethod && (!parentSpan || _optionalChain([parentContext, 'optionalAccess', _3 => _3.isRemote]))) {\n      return wrapSamplingDecision({\n        decision: undefined,\n        context,\n        spanAttributes\n      });\n    }\n    const parentSampled = parentSpan ? getParentSampled(parentSpan, traceId, spanName) : undefined;\n\n    // We want to pass the inferred name & attributes to the sampler method\n    const {\n      description: inferredSpanName,\n      data: inferredAttributes,\n      op\n    } = inferSpanData(spanName, spanAttributes, spanKind);\n    const mergedAttributes = {\n      ...inferredAttributes,\n      ...spanAttributes\n    };\n    if (op) {\n      mergedAttributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] = op;\n    }\n    const mutableSamplingDecision = {\n      decision: true\n    };\n    this._client.emit('beforeSampling', {\n      spanAttributes: mergedAttributes,\n      spanName: inferredSpanName,\n      parentSampled: parentSampled,\n      parentContext: parentContext\n    }, mutableSamplingDecision);\n    if (!mutableSamplingDecision.decision) {\n      return wrapSamplingDecision({\n        decision: undefined,\n        context,\n        spanAttributes\n      });\n    }\n    const [sampled, sampleRate] = core.sampleSpan(options, {\n      name: inferredSpanName,\n      attributes: mergedAttributes,\n      transactionContext: {\n        name: inferredSpanName,\n        parentSampled\n      },\n      parentSampled\n    });\n    const attributes = {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate\n    };\n    const method = `${maybeSpanHttpMethod}`.toUpperCase();\n    if (method === 'OPTIONS' || method === 'HEAD') {\n      DEBUG_BUILD && core.logger.log(`[Tracing] Not sampling span because HTTP method is '${method}' for ${spanName}`);\n      return {\n        ...wrapSamplingDecision({\n          decision: sdkTraceBase.SamplingDecision.NOT_RECORD,\n          context,\n          spanAttributes\n        }),\n        attributes\n      };\n    }\n    if (!sampled) {\n      return {\n        ...wrapSamplingDecision({\n          decision: sdkTraceBase.SamplingDecision.NOT_RECORD,\n          context,\n          spanAttributes\n        }),\n        attributes\n      };\n    }\n    return {\n      ...wrapSamplingDecision({\n        decision: sdkTraceBase.SamplingDecision.RECORD_AND_SAMPLED,\n        context,\n        spanAttributes\n      }),\n      attributes\n    };\n  }\n\n  /** Returns the sampler name or short description with the configuration. */\n  toString() {\n    return 'SentrySampler';\n  }\n}\nfunction getParentRemoteSampled(parentSpan) {\n  const traceId = parentSpan.spanContext().traceId;\n  const traceparentData = getPropagationContextFromSpan(parentSpan);\n\n  // Only inherit sampled if `traceId` is the same\n  return traceparentData && traceId === traceparentData.traceId ? traceparentData.sampled : undefined;\n}\nfunction getParentSampled(parentSpan, traceId, spanName) {\n  const parentContext = parentSpan.spanContext();\n\n  // Only inherit sample rate if `traceId` is the same\n  // Note for testing: `isSpanContextValid()` checks the format of the traceId/spanId, so we need to pass valid ones\n  if (api.isSpanContextValid(parentContext) && parentContext.traceId === traceId) {\n    if (parentContext.isRemote) {\n      const parentSampled = getParentRemoteSampled(parentSpan);\n      DEBUG_BUILD && core.logger.log(`[Tracing] Inheriting remote parent's sampled decision for ${spanName}: ${parentSampled}`);\n      return parentSampled;\n    }\n    const parentSampled = getSamplingDecision(parentContext);\n    DEBUG_BUILD && core.logger.log(`[Tracing] Inheriting parent's sampled decision for ${spanName}: ${parentSampled}`);\n    return parentSampled;\n  }\n  return undefined;\n}\n\n/**\n * Wrap a sampling decision with data that Sentry needs to work properly with it.\n * If you pass `decision: undefined`, it will be treated as `NOT_RECORDING`, but in contrast to passing `NOT_RECORDING`\n * it will not propagate this decision to downstream Sentry SDKs.\n */\nfunction wrapSamplingDecision({\n  decision,\n  context,\n  spanAttributes\n}) {\n  const traceState = getBaseTraceState(context, spanAttributes);\n\n  // If the decision is undefined, we treat it as NOT_RECORDING, but we don't propagate this decision to downstream SDKs\n  // Which is done by not setting `SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING` traceState\n  if (decision == undefined) {\n    return {\n      decision: sdkTraceBase.SamplingDecision.NOT_RECORD,\n      traceState\n    };\n  }\n  if (decision === sdkTraceBase.SamplingDecision.NOT_RECORD) {\n    return {\n      decision,\n      traceState: traceState.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1')\n    };\n  }\n  return {\n    decision,\n    traceState\n  };\n}\nfunction getBaseTraceState(context, spanAttributes) {\n  const parentSpan = api.trace.getSpan(context);\n  const parentContext = _optionalChain([parentSpan, 'optionalAccess', _4 => _4.spanContext, 'call', _5 => _5()]);\n  let traceState = _optionalChain([parentContext, 'optionalAccess', _6 => _6.traceState]) || new core$1.TraceState();\n\n  // We always keep the URL on the trace state, so we can access it in the propagator\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const url = spanAttributes[semanticConventions.SEMATTRS_HTTP_URL] || spanAttributes[semanticConventions.ATTR_URL_FULL];\n  if (url && typeof url === 'string') {\n    traceState = traceState.set(SENTRY_TRACE_STATE_URL, url);\n  }\n  return traceState;\n}\n\n/**\n * If the active span is invalid, we want to ignore it as parent.\n * This aligns with how otel tracers and default samplers handle these cases.\n */\nfunction getValidSpan(context) {\n  const span = api.trace.getSpan(context);\n  return span && api.isSpanContextValid(span.spanContext()) ? span : undefined;\n}\n\n/**\n * This method takes an OpenTelemetry instrumentation or\n * array of instrumentations and registers them with OpenTelemetry.\n *\n * @deprecated This method will be removed in the next major version of the SDK.\n * Use the `openTelemetryInstrumentations` option in `Sentry.init()` or your custom Sentry Client instead.\n */\nfunction addOpenTelemetryInstrumentation(...instrumentations) {\n  instrumentation.registerInstrumentations({\n    instrumentations\n  });\n}\nexports.getClient = core.getClient;\nexports.getCurrentHubShim = core.getCurrentHubShim;\nexports.getDynamicSamplingContextFromSpan = core.getDynamicSamplingContextFromSpan;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION;\nexports.SentryPropagator = SentryPropagator;\nexports.SentrySampler = SentrySampler;\nexports.SentrySpanProcessor = SentrySpanProcessor;\nexports.addOpenTelemetryInstrumentation = addOpenTelemetryInstrumentation;\nexports.continueTrace = continueTrace;\nexports.enhanceDscWithOpenTelemetryRootSpanName = enhanceDscWithOpenTelemetryRootSpanName;\nexports.generateSpanContextForPropagationContext = generateSpanContextForPropagationContext;\nexports.getActiveSpan = getActiveSpan;\nexports.getPropagationContextFromSpan = getPropagationContextFromSpan;\nexports.getRequestSpanData = getRequestSpanData;\nexports.getScopesFromContext = getScopesFromContext;\nexports.getSpanKind = getSpanKind;\nexports.getTraceContextForScope = getTraceContextForScope;\nexports.isSentryRequestSpan = isSentryRequestSpan;\nexports.openTelemetrySetupCheck = openTelemetrySetupCheck;\nexports.setOpenTelemetryContextAsyncContextStrategy = setOpenTelemetryContextAsyncContextStrategy;\nexports.setupEventContextTrace = setupEventContextTrace;\nexports.shouldPropagateTraceForUrl = shouldPropagateTraceForUrl;\nexports.spanHasAttributes = spanHasAttributes;\nexports.spanHasEvents = spanHasEvents;\nexports.spanHasKind = spanHasKind;\nexports.spanHasName = spanHasName;\nexports.spanHasParentId = spanHasParentId;\nexports.spanHasStatus = spanHasStatus;\nexports.startInactiveSpan = startInactiveSpan;\nexports.startSpan = startSpan;\nexports.startSpanManual = startSpanManual;\nexports.suppressTracing = suppressTracing;\nexports.withActiveSpan = withActiveSpan;\nexports.wrapClientClass = wrapClientClass;\nexports.wrapContextManagerClass = wrapContextManagerClass;\nexports.wrapSamplingDecision = wrapSamplingDecision;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/opentelemetry/build/cjs/index.js\n");

/***/ })

};
;