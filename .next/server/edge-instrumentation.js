// runtime can't be in strict mode because a global variable is assign and maybe created.
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["instrumentation"],{

/***/ "buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/context.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ContextAPI = void 0;\nvar _NoopContextManager = __webpack_require__(/*! ../context/NoopContextManager */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js\");\nvar _globalUtils = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\nvar _diag = __webpack_require__(/*! ./diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = void 0 && (void 0).__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = void 0 && (void 0).__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new _NoopContextManager.NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = exports.ContextAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function ContextAPI() {}\n  /** Get the singleton instance of the Context API */\n  ContextAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n    return (0, _globalUtils.registerGlobal)(API_NAME, contextManager, _diag.DiagAPI.instance());\n  };\n  /**\n   * Get the currently active context\n   */\n  ContextAPI.prototype.active = function () {\n    return this._getContextManager().active();\n  };\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  ContextAPI.prototype.with = function (context, fn, thisArg) {\n    var _a;\n    var args = [];\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n    return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], __read(args), false));\n  };\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  ContextAPI.prototype.bind = function (context, target) {\n    return this._getContextManager().bind(context, target);\n  };\n  ContextAPI.prototype._getContextManager = function () {\n    return (0, _globalUtils.getGlobal)(API_NAME) || NOOP_CONTEXT_MANAGER;\n  };\n  /** Disable and remove the global context manager */\n  ContextAPI.prototype.disable = function () {\n    this._getContextManager().disable();\n    (0, _globalUtils.unregisterGlobal)(API_NAME, _diag.DiagAPI.instance());\n  };\n  return ContextAPI;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/diag.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.DiagAPI = void 0;\nvar _ComponentLogger = __webpack_require__(/*! ../diag/ComponentLogger */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js\");\nvar _logLevelLogger = __webpack_require__(/*! ../diag/internal/logLevelLogger */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js\");\nvar _types = __webpack_require__(/*! ../diag/types */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\nvar _globalUtils = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = void 0 && (void 0).__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = void 0 && (void 0).__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = exports.DiagAPI = /** @class */function () {\n  /**\n   * Private internal constructor\n   * @private\n   */\n  function DiagAPI() {\n    function _logProxy(funcName) {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var logger = (0, _globalUtils.getGlobal)('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n      };\n    }\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    var self = this;\n    // DiagAPI specific functions\n    var setLogger = function (logger, optionsOrLogLevel) {\n      var _a, _b, _c;\n      if (optionsOrLogLevel === void 0) {\n        optionsOrLogLevel = {\n          logLevel: _types.DiagLogLevel.INFO\n        };\n      }\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n        self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n        return false;\n      }\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel\n        };\n      }\n      var oldLogger = (0, _globalUtils.getGlobal)('diag');\n      var newLogger = (0, _logLevelLogger.createLogLevelDiagLogger)((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : _types.DiagLogLevel.INFO, logger);\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';\n        oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n        newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n      }\n      return (0, _globalUtils.registerGlobal)('diag', newLogger, self, true);\n    };\n    self.setLogger = setLogger;\n    self.disable = function () {\n      (0, _globalUtils.unregisterGlobal)(API_NAME, self);\n    };\n    self.createComponentLogger = function (options) {\n      return new _ComponentLogger.DiagComponentLogger(options);\n    };\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n  /** Get the singleton instance of the DiagAPI API */\n  DiagAPI.instance = function () {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n    return this._instance;\n  };\n  return DiagAPI;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/api/metrics.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/metrics.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MetricsAPI = void 0;\nvar _NoopMeterProvider = __webpack_require__(/*! ../metrics/NoopMeterProvider */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js\");\nvar _globalUtils = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\nvar _diag = __webpack_require__(/*! ./diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = exports.MetricsAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function MetricsAPI() {}\n  /** Get the singleton instance of the Metrics API */\n  MetricsAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n  MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n    return (0, _globalUtils.registerGlobal)(API_NAME, provider, _diag.DiagAPI.instance());\n  };\n  /**\n   * Returns the global meter provider.\n   */\n  MetricsAPI.prototype.getMeterProvider = function () {\n    return (0, _globalUtils.getGlobal)(API_NAME) || _NoopMeterProvider.NOOP_METER_PROVIDER;\n  };\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  MetricsAPI.prototype.getMeter = function (name, version, options) {\n    return this.getMeterProvider().getMeter(name, version, options);\n  };\n  /** Remove the global meter provider */\n  MetricsAPI.prototype.disable = function () {\n    (0, _globalUtils.unregisterGlobal)(API_NAME, _diag.DiagAPI.instance());\n  };\n  return MetricsAPI;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYXBpL21ldHJpY3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBZUEsSUFBQUEsa0JBQUEsR0FBQUMsbUJBQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELG1CQUFBO0FBQ0EsSUFBQUUsS0FBQSxHQUFBRixtQkFBQTtBQWpCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUEsSUFBSUcsUUFBUSxHQUFHLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsVUFBVSxHQUFBQyxrQkFBQSxHQUFHLGFBQWUsWUFBWTtFQUN4QztFQUNBLFNBQVNELFVBQVVBLENBQUEsRUFBRyxDQUN0QjtFQUNBO0VBQ0FBLFVBQVUsQ0FBQ0UsV0FBVyxHQUFHLFlBQVk7SUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQ0MsU0FBUyxFQUFFO01BQ2pCLElBQUksQ0FBQ0EsU0FBUyxHQUFHLElBQUlILFVBQVUsQ0FBQyxDQUFDO0lBQ3JDO0lBQ0EsT0FBTyxJQUFJLENBQUNHLFNBQVM7RUFDekIsQ0FBQztFQUNEO0FBQ0o7QUFDQTtBQUNBO0VBQ0lILFVBQVUsQ0FBQ0ksU0FBUyxDQUFDQyxzQkFBc0IsR0FBRyxVQUFVQyxRQUFRLEVBQUU7SUFDOUQsT0FBTyxJQUFBQywyQkFBYyxFQUFDUixRQUFRLEVBQUVPLFFBQVEsRUFBRUUsYUFBTyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0VBQ2pFLENBQUM7RUFDRDtBQUNKO0FBQ0E7RUFDSVQsVUFBVSxDQUFDSSxTQUFTLENBQUNNLGdCQUFnQixHQUFHLFlBQVk7SUFDaEQsT0FBTyxJQUFBQyxzQkFBUyxFQUFDWixRQUFRLENBQUMsSUFBSWEsc0NBQW1CO0VBQ3JELENBQUM7RUFDRDtBQUNKO0FBQ0E7RUFDSVosVUFBVSxDQUFDSSxTQUFTLENBQUNTLFFBQVEsR0FBRyxVQUFVQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0lBQzlELE9BQU8sSUFBSSxDQUFDTixnQkFBZ0IsQ0FBQyxDQUFDLENBQUNHLFFBQVEsQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sQ0FBQztFQUNuRSxDQUFDO0VBQ0Q7RUFDQWhCLFVBQVUsQ0FBQ0ksU0FBUyxDQUFDYSxPQUFPLEdBQUcsWUFBWTtJQUN2QyxJQUFBQyw2QkFBZ0IsRUFBQ25CLFFBQVEsRUFBRVMsYUFBTyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0VBQ2xELENBQUM7RUFDRCxPQUFPVCxVQUFVO0FBQ3JCLENBQUMsQ0FBQyxDQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2FwaS9tZXRyaWNzLmpzP2E4ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IE5PT1BfTUVURVJfUFJPVklERVIgfSBmcm9tICcuLi9tZXRyaWNzL05vb3BNZXRlclByb3ZpZGVyJztcbmltcG9ydCB7IGdldEdsb2JhbCwgcmVnaXN0ZXJHbG9iYWwsIHVucmVnaXN0ZXJHbG9iYWwsIH0gZnJvbSAnLi4vaW50ZXJuYWwvZ2xvYmFsLXV0aWxzJztcbmltcG9ydCB7IERpYWdBUEkgfSBmcm9tICcuL2RpYWcnO1xudmFyIEFQSV9OQU1FID0gJ21ldHJpY3MnO1xuLyoqXG4gKiBTaW5nbGV0b24gb2JqZWN0IHdoaWNoIHJlcHJlc2VudHMgdGhlIGVudHJ5IHBvaW50IHRvIHRoZSBPcGVuVGVsZW1ldHJ5IE1ldHJpY3MgQVBJXG4gKi9cbnZhciBNZXRyaWNzQVBJID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKiBFbXB0eSBwcml2YXRlIGNvbnN0cnVjdG9yIHByZXZlbnRzIGVuZCB1c2VycyBmcm9tIGNvbnN0cnVjdGluZyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgQVBJICovXG4gICAgZnVuY3Rpb24gTWV0cmljc0FQSSgpIHtcbiAgICB9XG4gICAgLyoqIEdldCB0aGUgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBNZXRyaWNzIEFQSSAqL1xuICAgIE1ldHJpY3NBUEkuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IE1ldHJpY3NBUEkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGN1cnJlbnQgZ2xvYmFsIG1ldGVyIHByb3ZpZGVyLlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgbWV0ZXIgcHJvdmlkZXIgd2FzIHN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkLCBlbHNlIGZhbHNlLlxuICAgICAqL1xuICAgIE1ldHJpY3NBUEkucHJvdG90eXBlLnNldEdsb2JhbE1ldGVyUHJvdmlkZXIgPSBmdW5jdGlvbiAocHJvdmlkZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyR2xvYmFsKEFQSV9OQU1FLCBwcm92aWRlciwgRGlhZ0FQSS5pbnN0YW5jZSgpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGdsb2JhbCBtZXRlciBwcm92aWRlci5cbiAgICAgKi9cbiAgICBNZXRyaWNzQVBJLnByb3RvdHlwZS5nZXRNZXRlclByb3ZpZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0R2xvYmFsKEFQSV9OQU1FKSB8fCBOT09QX01FVEVSX1BST1ZJREVSO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG1ldGVyIGZyb20gdGhlIGdsb2JhbCBtZXRlciBwcm92aWRlci5cbiAgICAgKi9cbiAgICBNZXRyaWNzQVBJLnByb3RvdHlwZS5nZXRNZXRlciA9IGZ1bmN0aW9uIChuYW1lLCB2ZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE1ldGVyUHJvdmlkZXIoKS5nZXRNZXRlcihuYW1lLCB2ZXJzaW9uLCBvcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKiBSZW1vdmUgdGhlIGdsb2JhbCBtZXRlciBwcm92aWRlciAqL1xuICAgIE1ldHJpY3NBUEkucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVucmVnaXN0ZXJHbG9iYWwoQVBJX05BTUUsIERpYWdBUEkuaW5zdGFuY2UoKSk7XG4gICAgfTtcbiAgICByZXR1cm4gTWV0cmljc0FQSTtcbn0oKSk7XG5leHBvcnQgeyBNZXRyaWNzQVBJIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRyaWNzLmpzLm1hcCJdLCJuYW1lcyI6WyJfTm9vcE1ldGVyUHJvdmlkZXIiLCJyZXF1aXJlIiwiX2dsb2JhbFV0aWxzIiwiX2RpYWciLCJBUElfTkFNRSIsIk1ldHJpY3NBUEkiLCJleHBvcnRzIiwiZ2V0SW5zdGFuY2UiLCJfaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJzZXRHbG9iYWxNZXRlclByb3ZpZGVyIiwicHJvdmlkZXIiLCJyZWdpc3Rlckdsb2JhbCIsIkRpYWdBUEkiLCJpbnN0YW5jZSIsImdldE1ldGVyUHJvdmlkZXIiLCJnZXRHbG9iYWwiLCJOT09QX01FVEVSX1BST1ZJREVSIiwiZ2V0TWV0ZXIiLCJuYW1lIiwidmVyc2lvbiIsIm9wdGlvbnMiLCJkaXNhYmxlIiwidW5yZWdpc3Rlckdsb2JhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/api/metrics.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/api/propagation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/propagation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.PropagationAPI = void 0;\nvar _globalUtils = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\nvar _NoopTextMapPropagator = __webpack_require__(/*! ../propagation/NoopTextMapPropagator */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js\");\nvar _TextMapPropagator = __webpack_require__(/*! ../propagation/TextMapPropagator */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\");\nvar _contextHelpers = __webpack_require__(/*! ../baggage/context-helpers */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js\");\nvar _utils = __webpack_require__(/*! ../baggage/utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\");\nvar _diag = __webpack_require__(/*! ./diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new _NoopTextMapPropagator.NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = exports.PropagationAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function PropagationAPI() {\n    this.createBaggage = _utils.createBaggage;\n    this.getBaggage = _contextHelpers.getBaggage;\n    this.getActiveBaggage = _contextHelpers.getActiveBaggage;\n    this.setBaggage = _contextHelpers.setBaggage;\n    this.deleteBaggage = _contextHelpers.deleteBaggage;\n  }\n  /** Get the singleton instance of the Propagator API */\n  PropagationAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n    return (0, _globalUtils.registerGlobal)(API_NAME, propagator, _diag.DiagAPI.instance());\n  };\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  PropagationAPI.prototype.inject = function (context, carrier, setter) {\n    if (setter === void 0) {\n      setter = _TextMapPropagator.defaultTextMapSetter;\n    }\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  };\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  PropagationAPI.prototype.extract = function (context, carrier, getter) {\n    if (getter === void 0) {\n      getter = _TextMapPropagator.defaultTextMapGetter;\n    }\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  };\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  PropagationAPI.prototype.fields = function () {\n    return this._getGlobalPropagator().fields();\n  };\n  /** Remove the global propagator */\n  PropagationAPI.prototype.disable = function () {\n    (0, _globalUtils.unregisterGlobal)(API_NAME, _diag.DiagAPI.instance());\n  };\n  PropagationAPI.prototype._getGlobalPropagator = function () {\n    return (0, _globalUtils.getGlobal)(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  };\n  return PropagationAPI;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/api/propagation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/api/trace.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/trace.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TraceAPI = void 0;\nvar _globalUtils = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\nvar _ProxyTracerProvider = __webpack_require__(/*! ../trace/ProxyTracerProvider */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\");\nvar _spancontextUtils = __webpack_require__(/*! ../trace/spancontext-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\nvar _contextUtils = __webpack_require__(/*! ../trace/context-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\");\nvar _diag = __webpack_require__(/*! ./diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = exports.TraceAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function TraceAPI() {\n    this._proxyTracerProvider = new _ProxyTracerProvider.ProxyTracerProvider();\n    this.wrapSpanContext = _spancontextUtils.wrapSpanContext;\n    this.isSpanContextValid = _spancontextUtils.isSpanContextValid;\n    this.deleteSpan = _contextUtils.deleteSpan;\n    this.getSpan = _contextUtils.getSpan;\n    this.getActiveSpan = _contextUtils.getActiveSpan;\n    this.getSpanContext = _contextUtils.getSpanContext;\n    this.setSpan = _contextUtils.setSpan;\n    this.setSpanContext = _contextUtils.setSpanContext;\n  }\n  /** Get the singleton instance of the Trace API */\n  TraceAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n    var success = (0, _globalUtils.registerGlobal)(API_NAME, this._proxyTracerProvider, _diag.DiagAPI.instance());\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  };\n  /**\n   * Returns the global tracer provider.\n   */\n  TraceAPI.prototype.getTracerProvider = function () {\n    return (0, _globalUtils.getGlobal)(API_NAME) || this._proxyTracerProvider;\n  };\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  TraceAPI.prototype.getTracer = function (name, version) {\n    return this.getTracerProvider().getTracer(name, version);\n  };\n  /** Remove the global tracer provider */\n  TraceAPI.prototype.disable = function () {\n    (0, _globalUtils.unregisterGlobal)(API_NAME, _diag.DiagAPI.instance());\n    this._proxyTracerProvider = new _ProxyTracerProvider.ProxyTracerProvider();\n  };\n  return TraceAPI;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYXBpL3RyYWNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQWVBLElBQUFBLFlBQUEsR0FBQUMsbUJBQUE7QUFDQSxJQUFBQyxvQkFBQSxHQUFBRCxtQkFBQTtBQUNBLElBQUFFLGlCQUFBLEdBQUFGLG1CQUFBO0FBQ0EsSUFBQUcsYUFBQSxHQUFBSCxtQkFBQTtBQUNBLElBQUFJLEtBQUEsR0FBQUosbUJBQUE7QUFuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1BLElBQUlLLFFBQVEsR0FBRyxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLElBQUlDLFFBQVEsR0FBQUMsZ0JBQUEsR0FBRyxhQUFlLFlBQVk7RUFDdEM7RUFDQSxTQUFTRCxRQUFRQSxDQUFBLEVBQUc7SUFDaEIsSUFBSSxDQUFDRSxvQkFBb0IsR0FBRyxJQUFJQyx3Q0FBbUIsQ0FBQyxDQUFDO0lBQ3JELElBQUksQ0FBQ0MsZUFBZSxHQUFHQSxpQ0FBZTtJQUN0QyxJQUFJLENBQUNDLGtCQUFrQixHQUFHQSxvQ0FBa0I7SUFDNUMsSUFBSSxDQUFDQyxVQUFVLEdBQUdBLHdCQUFVO0lBQzVCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxxQkFBTztJQUN0QixJQUFJLENBQUNDLGFBQWEsR0FBR0EsMkJBQWE7SUFDbEMsSUFBSSxDQUFDQyxjQUFjLEdBQUdBLDRCQUFjO0lBQ3BDLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxxQkFBTztJQUN0QixJQUFJLENBQUNDLGNBQWMsR0FBR0EsNEJBQWM7RUFDeEM7RUFDQTtFQUNBWCxRQUFRLENBQUNZLFdBQVcsR0FBRyxZQUFZO0lBQy9CLElBQUksQ0FBQyxJQUFJLENBQUNDLFNBQVMsRUFBRTtNQUNqQixJQUFJLENBQUNBLFNBQVMsR0FBRyxJQUFJYixRQUFRLENBQUMsQ0FBQztJQUNuQztJQUNBLE9BQU8sSUFBSSxDQUFDYSxTQUFTO0VBQ3pCLENBQUM7RUFDRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0VBQ0liLFFBQVEsQ0FBQ2MsU0FBUyxDQUFDQyx1QkFBdUIsR0FBRyxVQUFVQyxRQUFRLEVBQUU7SUFDN0QsSUFBSUMsT0FBTyxHQUFHLElBQUFDLDJCQUFjLEVBQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDRyxvQkFBb0IsRUFBRWlCLGFBQU8sQ0FBQ0MsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNyRixJQUFJSCxPQUFPLEVBQUU7TUFDVCxJQUFJLENBQUNmLG9CQUFvQixDQUFDbUIsV0FBVyxDQUFDTCxRQUFRLENBQUM7SUFDbkQ7SUFDQSxPQUFPQyxPQUFPO0VBQ2xCLENBQUM7RUFDRDtBQUNKO0FBQ0E7RUFDSWpCLFFBQVEsQ0FBQ2MsU0FBUyxDQUFDUSxpQkFBaUIsR0FBRyxZQUFZO0lBQy9DLE9BQU8sSUFBQUMsc0JBQVMsRUFBQ3hCLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQ0csb0JBQW9CO0VBQzNELENBQUM7RUFDRDtBQUNKO0FBQ0E7RUFDSUYsUUFBUSxDQUFDYyxTQUFTLENBQUNVLFNBQVMsR0FBRyxVQUFVQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtJQUNwRCxPQUFPLElBQUksQ0FBQ0osaUJBQWlCLENBQUMsQ0FBQyxDQUFDRSxTQUFTLENBQUNDLElBQUksRUFBRUMsT0FBTyxDQUFDO0VBQzVELENBQUM7RUFDRDtFQUNBMUIsUUFBUSxDQUFDYyxTQUFTLENBQUNhLE9BQU8sR0FBRyxZQUFZO0lBQ3JDLElBQUFDLDZCQUFnQixFQUFDN0IsUUFBUSxFQUFFb0IsYUFBTyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzlDLElBQUksQ0FBQ2xCLG9CQUFvQixHQUFHLElBQUlDLHdDQUFtQixDQUFDLENBQUM7RUFDekQsQ0FBQztFQUNELE9BQU9ILFFBQVE7QUFDbkIsQ0FBQyxDQUFDLENBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYXBpL3RyYWNlLmpzP2E3MjYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGdldEdsb2JhbCwgcmVnaXN0ZXJHbG9iYWwsIHVucmVnaXN0ZXJHbG9iYWwsIH0gZnJvbSAnLi4vaW50ZXJuYWwvZ2xvYmFsLXV0aWxzJztcbmltcG9ydCB7IFByb3h5VHJhY2VyUHJvdmlkZXIgfSBmcm9tICcuLi90cmFjZS9Qcm94eVRyYWNlclByb3ZpZGVyJztcbmltcG9ydCB7IGlzU3BhbkNvbnRleHRWYWxpZCwgd3JhcFNwYW5Db250ZXh0LCB9IGZyb20gJy4uL3RyYWNlL3NwYW5jb250ZXh0LXV0aWxzJztcbmltcG9ydCB7IGRlbGV0ZVNwYW4sIGdldEFjdGl2ZVNwYW4sIGdldFNwYW4sIGdldFNwYW5Db250ZXh0LCBzZXRTcGFuLCBzZXRTcGFuQ29udGV4dCwgfSBmcm9tICcuLi90cmFjZS9jb250ZXh0LXV0aWxzJztcbmltcG9ydCB7IERpYWdBUEkgfSBmcm9tICcuL2RpYWcnO1xudmFyIEFQSV9OQU1FID0gJ3RyYWNlJztcbi8qKlxuICogU2luZ2xldG9uIG9iamVjdCB3aGljaCByZXByZXNlbnRzIHRoZSBlbnRyeSBwb2ludCB0byB0aGUgT3BlblRlbGVtZXRyeSBUcmFjaW5nIEFQSVxuICovXG52YXIgVHJhY2VBUEkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqIEVtcHR5IHByaXZhdGUgY29uc3RydWN0b3IgcHJldmVudHMgZW5kIHVzZXJzIGZyb20gY29uc3RydWN0aW5nIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBBUEkgKi9cbiAgICBmdW5jdGlvbiBUcmFjZUFQSSgpIHtcbiAgICAgICAgdGhpcy5fcHJveHlUcmFjZXJQcm92aWRlciA9IG5ldyBQcm94eVRyYWNlclByb3ZpZGVyKCk7XG4gICAgICAgIHRoaXMud3JhcFNwYW5Db250ZXh0ID0gd3JhcFNwYW5Db250ZXh0O1xuICAgICAgICB0aGlzLmlzU3BhbkNvbnRleHRWYWxpZCA9IGlzU3BhbkNvbnRleHRWYWxpZDtcbiAgICAgICAgdGhpcy5kZWxldGVTcGFuID0gZGVsZXRlU3BhbjtcbiAgICAgICAgdGhpcy5nZXRTcGFuID0gZ2V0U3BhbjtcbiAgICAgICAgdGhpcy5nZXRBY3RpdmVTcGFuID0gZ2V0QWN0aXZlU3BhbjtcbiAgICAgICAgdGhpcy5nZXRTcGFuQ29udGV4dCA9IGdldFNwYW5Db250ZXh0O1xuICAgICAgICB0aGlzLnNldFNwYW4gPSBzZXRTcGFuO1xuICAgICAgICB0aGlzLnNldFNwYW5Db250ZXh0ID0gc2V0U3BhbkNvbnRleHQ7XG4gICAgfVxuICAgIC8qKiBHZXQgdGhlIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiB0aGUgVHJhY2UgQVBJICovXG4gICAgVHJhY2VBUEkuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IFRyYWNlQVBJKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJyZW50IGdsb2JhbCB0cmFjZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSB0cmFjZXIgcHJvdmlkZXIgd2FzIHN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkLCBlbHNlIGZhbHNlXG4gICAgICovXG4gICAgVHJhY2VBUEkucHJvdG90eXBlLnNldEdsb2JhbFRyYWNlclByb3ZpZGVyID0gZnVuY3Rpb24gKHByb3ZpZGVyKSB7XG4gICAgICAgIHZhciBzdWNjZXNzID0gcmVnaXN0ZXJHbG9iYWwoQVBJX05BTUUsIHRoaXMuX3Byb3h5VHJhY2VyUHJvdmlkZXIsIERpYWdBUEkuaW5zdGFuY2UoKSk7XG4gICAgICAgIGlmIChzdWNjZXNzKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyLnNldERlbGVnYXRlKHByb3ZpZGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VjY2VzcztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGdsb2JhbCB0cmFjZXIgcHJvdmlkZXIuXG4gICAgICovXG4gICAgVHJhY2VBUEkucHJvdG90eXBlLmdldFRyYWNlclByb3ZpZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0R2xvYmFsKEFQSV9OQU1FKSB8fCB0aGlzLl9wcm94eVRyYWNlclByb3ZpZGVyO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHRyYWNlciBmcm9tIHRoZSBnbG9iYWwgdHJhY2VyIHByb3ZpZGVyLlxuICAgICAqL1xuICAgIFRyYWNlQVBJLnByb3RvdHlwZS5nZXRUcmFjZXIgPSBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUcmFjZXJQcm92aWRlcigpLmdldFRyYWNlcihuYW1lLCB2ZXJzaW9uKTtcbiAgICB9O1xuICAgIC8qKiBSZW1vdmUgdGhlIGdsb2JhbCB0cmFjZXIgcHJvdmlkZXIgKi9cbiAgICBUcmFjZUFQSS5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdW5yZWdpc3Rlckdsb2JhbChBUElfTkFNRSwgRGlhZ0FQSS5pbnN0YW5jZSgpKTtcbiAgICAgICAgdGhpcy5fcHJveHlUcmFjZXJQcm92aWRlciA9IG5ldyBQcm94eVRyYWNlclByb3ZpZGVyKCk7XG4gICAgfTtcbiAgICByZXR1cm4gVHJhY2VBUEk7XG59KCkpO1xuZXhwb3J0IHsgVHJhY2VBUEkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNlLmpzLm1hcCJdLCJuYW1lcyI6WyJfZ2xvYmFsVXRpbHMiLCJyZXF1aXJlIiwiX1Byb3h5VHJhY2VyUHJvdmlkZXIiLCJfc3BhbmNvbnRleHRVdGlscyIsIl9jb250ZXh0VXRpbHMiLCJfZGlhZyIsIkFQSV9OQU1FIiwiVHJhY2VBUEkiLCJleHBvcnRzIiwiX3Byb3h5VHJhY2VyUHJvdmlkZXIiLCJQcm94eVRyYWNlclByb3ZpZGVyIiwid3JhcFNwYW5Db250ZXh0IiwiaXNTcGFuQ29udGV4dFZhbGlkIiwiZGVsZXRlU3BhbiIsImdldFNwYW4iLCJnZXRBY3RpdmVTcGFuIiwiZ2V0U3BhbkNvbnRleHQiLCJzZXRTcGFuIiwic2V0U3BhbkNvbnRleHQiLCJnZXRJbnN0YW5jZSIsIl9pbnN0YW5jZSIsInByb3RvdHlwZSIsInNldEdsb2JhbFRyYWNlclByb3ZpZGVyIiwicHJvdmlkZXIiLCJzdWNjZXNzIiwicmVnaXN0ZXJHbG9iYWwiLCJEaWFnQVBJIiwiaW5zdGFuY2UiLCJzZXREZWxlZ2F0ZSIsImdldFRyYWNlclByb3ZpZGVyIiwiZ2V0R2xvYmFsIiwiZ2V0VHJhY2VyIiwibmFtZSIsInZlcnNpb24iLCJkaXNhYmxlIiwidW5yZWdpc3Rlckdsb2JhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/api/trace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deleteBaggage = deleteBaggage;\nexports.getActiveBaggage = getActiveBaggage;\nexports.getBaggage = getBaggage;\nexports.setBaggage = setBaggage;\nvar _context = __webpack_require__(/*! ../api/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js\");\nvar _context2 = __webpack_require__(/*! ../context/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = (0, _context2.createContextKey)('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getBaggage(context) {\n  return context.getValue(BAGGAGE_KEY) || undefined;\n}\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getActiveBaggage() {\n  return getBaggage(_context.ContextAPI.getInstance().active());\n}\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nfunction setBaggage(context, baggage) {\n  return context.setValue(BAGGAGE_KEY, baggage);\n}\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nfunction deleteBaggage(context) {\n  return context.deleteValue(BAGGAGE_KEY);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYmFnZ2FnZS9jb250ZXh0LWhlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBZUEsSUFBQUEsUUFBQSxHQUFBQyxtQkFBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUQsbUJBQUE7QUFoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNBLElBQUlFLFdBQVcsR0FBRyxJQUFBQywwQkFBZ0IsRUFBQywyQkFBMkIsQ0FBQztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQyxVQUFVQSxDQUFDQyxPQUFPLEVBQUU7RUFDaEMsT0FBT0EsT0FBTyxDQUFDQyxRQUFRLENBQUNKLFdBQVcsQ0FBQyxJQUFJSyxTQUFTO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGdCQUFnQkEsQ0FBQSxFQUFHO0VBQy9CLE9BQU9KLFVBQVUsQ0FBQ0ssbUJBQVUsQ0FBQ0MsV0FBVyxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLFVBQVVBLENBQUNQLE9BQU8sRUFBRVEsT0FBTyxFQUFFO0VBQ3pDLE9BQU9SLE9BQU8sQ0FBQ1MsUUFBUSxDQUFDWixXQUFXLEVBQUVXLE9BQU8sQ0FBQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRSxhQUFhQSxDQUFDVixPQUFPLEVBQUU7RUFDbkMsT0FBT0EsT0FBTyxDQUFDVyxXQUFXLENBQUNkLFdBQVcsQ0FBQztBQUMzQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9iYWdnYWdlL2NvbnRleHQtaGVscGVycy5qcz81MDMwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBDb250ZXh0QVBJIH0gZnJvbSAnLi4vYXBpL2NvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dEtleSB9IGZyb20gJy4uL2NvbnRleHQvY29udGV4dCc7XG4vKipcbiAqIEJhZ2dhZ2Uga2V5XG4gKi9cbnZhciBCQUdHQUdFX0tFWSA9IGNyZWF0ZUNvbnRleHRLZXkoJ09wZW5UZWxlbWV0cnkgQmFnZ2FnZSBLZXknKTtcbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgYmFnZ2FnZSBmcm9tIHRoZSBnaXZlbiBjb250ZXh0XG4gKlxuICogQHBhcmFtIHtDb250ZXh0fSBDb250ZXh0IHRoYXQgbWFuYWdlIGFsbCBjb250ZXh0IHZhbHVlc1xuICogQHJldHVybnMge0JhZ2dhZ2V9IEV4dHJhY3RlZCBiYWdnYWdlIGZyb20gdGhlIGNvbnRleHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJhZ2dhZ2UoY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0LmdldFZhbHVlKEJBR0dBR0VfS0VZKSB8fCB1bmRlZmluZWQ7XG59XG4vKipcbiAqIFJldHJpZXZlIHRoZSBjdXJyZW50IGJhZ2dhZ2UgZnJvbSB0aGUgYWN0aXZlL2N1cnJlbnQgY29udGV4dFxuICpcbiAqIEByZXR1cm5zIHtCYWdnYWdlfSBFeHRyYWN0ZWQgYmFnZ2FnZSBmcm9tIHRoZSBjb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3RpdmVCYWdnYWdlKCkge1xuICAgIHJldHVybiBnZXRCYWdnYWdlKENvbnRleHRBUEkuZ2V0SW5zdGFuY2UoKS5hY3RpdmUoKSk7XG59XG4vKipcbiAqIFN0b3JlIGEgYmFnZ2FnZSBpbiB0aGUgZ2l2ZW4gY29udGV4dFxuICpcbiAqIEBwYXJhbSB7Q29udGV4dH0gQ29udGV4dCB0aGF0IG1hbmFnZSBhbGwgY29udGV4dCB2YWx1ZXNcbiAqIEBwYXJhbSB7QmFnZ2FnZX0gYmFnZ2FnZSB0aGF0IHdpbGwgYmUgc2V0IGluIHRoZSBhY3R1YWwgY29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0QmFnZ2FnZShjb250ZXh0LCBiYWdnYWdlKSB7XG4gICAgcmV0dXJuIGNvbnRleHQuc2V0VmFsdWUoQkFHR0FHRV9LRVksIGJhZ2dhZ2UpO1xufVxuLyoqXG4gKiBEZWxldGUgdGhlIGJhZ2dhZ2Ugc3RvcmVkIGluIHRoZSBnaXZlbiBjb250ZXh0XG4gKlxuICogQHBhcmFtIHtDb250ZXh0fSBDb250ZXh0IHRoYXQgbWFuYWdlIGFsbCBjb250ZXh0IHZhbHVlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlQmFnZ2FnZShjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQuZGVsZXRlVmFsdWUoQkFHR0FHRV9LRVkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGV4dC1oZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJfY29udGV4dCIsInJlcXVpcmUiLCJfY29udGV4dDIiLCJCQUdHQUdFX0tFWSIsImNyZWF0ZUNvbnRleHRLZXkiLCJnZXRCYWdnYWdlIiwiY29udGV4dCIsImdldFZhbHVlIiwidW5kZWZpbmVkIiwiZ2V0QWN0aXZlQmFnZ2FnZSIsIkNvbnRleHRBUEkiLCJnZXRJbnN0YW5jZSIsImFjdGl2ZSIsInNldEJhZ2dhZ2UiLCJiYWdnYWdlIiwic2V0VmFsdWUiLCJkZWxldGVCYWdnYWdlIiwiZGVsZXRlVmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.BaggageImpl = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = void 0 && (void 0).__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = void 0 && (void 0).__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar BaggageImpl = exports.BaggageImpl = /** @class */function () {\n  function BaggageImpl(entries) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n  BaggageImpl.prototype.getEntry = function (key) {\n    var entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n    return Object.assign({}, entry);\n  };\n  BaggageImpl.prototype.getAllEntries = function () {\n    return Array.from(this._entries.entries()).map(function (_a) {\n      var _b = __read(_a, 2),\n        k = _b[0],\n        v = _b[1];\n      return [k, v];\n    });\n  };\n  BaggageImpl.prototype.setEntry = function (key, entry) {\n    var newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  };\n  BaggageImpl.prototype.removeEntry = function (key) {\n    var newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  };\n  BaggageImpl.prototype.removeEntries = function () {\n    var e_1, _a;\n    var keys = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      keys[_i] = arguments[_i];\n    }\n    var newBaggage = new BaggageImpl(this._entries);\n    try {\n      for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n        var key = keys_1_1.value;\n        newBaggage._entries.delete(key);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return newBaggage;\n  };\n  BaggageImpl.prototype.clear = function () {\n    return new BaggageImpl();\n  };\n  return BaggageImpl;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.baggageEntryMetadataSymbol = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nvar baggageEntryMetadataSymbol = exports.baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYmFnZ2FnZS9pbnRlcm5hbC9zeW1ib2wuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBSUEsMEJBQTBCLEdBQUFDLGtDQUFBLEdBQUdDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9iYWdnYWdlL2ludGVybmFsL3N5bWJvbC5qcz8wNGExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIFN5bWJvbCB1c2VkIHRvIG1ha2UgQmFnZ2FnZUVudHJ5TWV0YWRhdGEgYW4gb3BhcXVlIHR5cGVcbiAqL1xuZXhwb3J0IHZhciBiYWdnYWdlRW50cnlNZXRhZGF0YVN5bWJvbCA9IFN5bWJvbCgnQmFnZ2FnZUVudHJ5TWV0YWRhdGEnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN5bWJvbC5qcy5tYXAiXSwibmFtZXMiOlsiYmFnZ2FnZUVudHJ5TWV0YWRhdGFTeW1ib2wiLCJleHBvcnRzIiwiU3ltYm9sIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.baggageEntryMetadataFromString = baggageEntryMetadataFromString;\nexports.createBaggage = createBaggage;\nvar _diag = __webpack_require__(/*! ../api/diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\nvar _baggageImpl = __webpack_require__(/*! ./internal/baggage-impl */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js\");\nvar _symbol = __webpack_require__(/*! ./internal/symbol */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar diag = _diag.DiagAPI.instance();\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nfunction createBaggage(entries) {\n  if (entries === void 0) {\n    entries = {};\n  }\n  return new _baggageImpl.BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nfunction baggageEntryMetadataFromString(str) {\n  if (typeof str !== 'string') {\n    diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n    str = '';\n  }\n  return {\n    __TYPE__: _symbol.baggageEntryMetadataSymbol,\n    toString: function () {\n      return str;\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vYmFnZ2FnZS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZUEsSUFBQUEsS0FBQSxHQUFBQyxtQkFBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsbUJBQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLG1CQUFBO0FBakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxJQUFJRyxJQUFJLEdBQUdDLGFBQU8sQ0FBQ0MsUUFBUSxDQUFDLENBQUM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGFBQWFBLENBQUNDLE9BQU8sRUFBRTtFQUNuQyxJQUFJQSxPQUFPLEtBQUssS0FBSyxDQUFDLEVBQUU7SUFBRUEsT0FBTyxHQUFHLENBQUMsQ0FBQztFQUFFO0VBQ3hDLE9BQU8sSUFBSUMsd0JBQVcsQ0FBQyxJQUFJQyxHQUFHLENBQUNDLE1BQU0sQ0FBQ0gsT0FBTyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0ksOEJBQThCQSxDQUFDQyxHQUFHLEVBQUU7RUFDaEQsSUFBSSxPQUFPQSxHQUFHLEtBQUssUUFBUSxFQUFFO0lBQ3pCVCxJQUFJLENBQUNVLEtBQUssQ0FBQyxvREFBb0QsR0FBRyxPQUFPRCxHQUFHLENBQUM7SUFDN0VBLEdBQUcsR0FBRyxFQUFFO0VBQ1o7RUFDQSxPQUFPO0lBQ0hFLFFBQVEsRUFBRUMsa0NBQTBCO0lBQ3BDQyxRQUFRLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO01BQ2xCLE9BQU9KLEdBQUc7SUFDZDtFQUNKLENBQUM7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9iYWdnYWdlL3V0aWxzLmpzP2Q0NjUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IERpYWdBUEkgfSBmcm9tICcuLi9hcGkvZGlhZyc7XG5pbXBvcnQgeyBCYWdnYWdlSW1wbCB9IGZyb20gJy4vaW50ZXJuYWwvYmFnZ2FnZS1pbXBsJztcbmltcG9ydCB7IGJhZ2dhZ2VFbnRyeU1ldGFkYXRhU3ltYm9sIH0gZnJvbSAnLi9pbnRlcm5hbC9zeW1ib2wnO1xudmFyIGRpYWcgPSBEaWFnQVBJLmluc3RhbmNlKCk7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBCYWdnYWdlIHdpdGggb3B0aW9uYWwgZW50cmllc1xuICpcbiAqIEBwYXJhbSBlbnRyaWVzIEFuIGFycmF5IG9mIGJhZ2dhZ2UgZW50cmllcyB0aGUgbmV3IGJhZ2dhZ2Ugc2hvdWxkIGNvbnRhaW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJhZ2dhZ2UoZW50cmllcykge1xuICAgIGlmIChlbnRyaWVzID09PSB2b2lkIDApIHsgZW50cmllcyA9IHt9OyB9XG4gICAgcmV0dXJuIG5ldyBCYWdnYWdlSW1wbChuZXcgTWFwKE9iamVjdC5lbnRyaWVzKGVudHJpZXMpKSk7XG59XG4vKipcbiAqIENyZWF0ZSBhIHNlcmlhbGl6YWJsZSBCYWdnYWdlRW50cnlNZXRhZGF0YSBvYmplY3QgZnJvbSBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gc3RyIHN0cmluZyBtZXRhZGF0YS4gRm9ybWF0IGlzIGN1cnJlbnRseSBub3QgZGVmaW5lZCBieSB0aGUgc3BlYyBhbmQgaGFzIG5vIHNwZWNpYWwgbWVhbmluZy5cbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiYWdnYWdlRW50cnlNZXRhZGF0YUZyb21TdHJpbmcoc3RyKSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGRpYWcuZXJyb3IoXCJDYW5ub3QgY3JlYXRlIGJhZ2dhZ2UgbWV0YWRhdGEgZnJvbSB1bmtub3duIHR5cGU6IFwiICsgdHlwZW9mIHN0cik7XG4gICAgICAgIHN0ciA9ICcnO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBfX1RZUEVfXzogYmFnZ2FnZUVudHJ5TWV0YWRhdGFTeW1ib2wsXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiX2RpYWciLCJyZXF1aXJlIiwiX2JhZ2dhZ2VJbXBsIiwiX3N5bWJvbCIsImRpYWciLCJEaWFnQVBJIiwiaW5zdGFuY2UiLCJjcmVhdGVCYWdnYWdlIiwiZW50cmllcyIsIkJhZ2dhZ2VJbXBsIiwiTWFwIiwiT2JqZWN0IiwiYmFnZ2FnZUVudHJ5TWV0YWRhdGFGcm9tU3RyaW5nIiwic3RyIiwiZXJyb3IiLCJfX1RZUEVfXyIsImJhZ2dhZ2VFbnRyeU1ldGFkYXRhU3ltYm9sIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/context-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context-api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.context = void 0;\nvar _context = __webpack_require__(/*! ./api/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for context API */\nvar context = exports.context = _context.ContextAPI.getInstance();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vY29udGV4dC1hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBaUJBLElBQUFBLFFBQUEsR0FBQUMsbUJBQUE7QUFqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNPLElBQUlDLE9BQU8sR0FBQUMsZUFBQSxHQUFHQyxtQkFBVSxDQUFDQyxXQUFXLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9jb250ZXh0LWFwaS5qcz9jOTE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBTcGxpdCBtb2R1bGUtbGV2ZWwgdmFyaWFibGUgZGVmaW5pdGlvbiBpbnRvIHNlcGFyYXRlIGZpbGVzIHRvIGFsbG93XG4vLyB0cmVlLXNoYWtpbmcgb24gZWFjaCBhcGkgaW5zdGFuY2UuXG5pbXBvcnQgeyBDb250ZXh0QVBJIH0gZnJvbSAnLi9hcGkvY29udGV4dCc7XG4vKiogRW50cnlwb2ludCBmb3IgY29udGV4dCBBUEkgKi9cbmV4cG9ydCB2YXIgY29udGV4dCA9IENvbnRleHRBUEkuZ2V0SW5zdGFuY2UoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHQtYXBpLmpzLm1hcCJdLCJuYW1lcyI6WyJfY29udGV4dCIsInJlcXVpcmUiLCJjb250ZXh0IiwiZXhwb3J0cyIsIkNvbnRleHRBUEkiLCJnZXRJbnN0YW5jZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/context-api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NoopContextManager = void 0;\nvar _context2 = __webpack_require__(/*! ./context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = void 0 && (void 0).__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = void 0 && (void 0).__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar NoopContextManager = exports.NoopContextManager = /** @class */function () {\n  function NoopContextManager() {}\n  NoopContextManager.prototype.active = function () {\n    return _context2.ROOT_CONTEXT;\n  };\n  NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n    var args = [];\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n    return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n  };\n  NoopContextManager.prototype.bind = function (_context, target) {\n    return target;\n  };\n  NoopContextManager.prototype.enable = function () {\n    return this;\n  };\n  NoopContextManager.prototype.disable = function () {\n    return this;\n  };\n  return NoopContextManager;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vY29udGV4dC9Ob29wQ29udGV4dE1hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBd0NBLElBQUFBLFNBQUEsR0FBQUMsbUJBQUE7QUF4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsTUFBTSxHQUFJLFVBQVEsU0FBS0EsTUFBTSxJQUFLLFVBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0VBQ2xELElBQUlDLENBQUMsR0FBRyxPQUFPQyxNQUFNLEtBQUssVUFBVSxJQUFJSCxDQUFDLENBQUNHLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDO0VBQzFELElBQUksQ0FBQ0YsQ0FBQyxFQUFFLE9BQU9GLENBQUM7RUFDaEIsSUFBSUssQ0FBQyxHQUFHSCxDQUFDLENBQUNJLElBQUksQ0FBQ04sQ0FBQyxDQUFDO0lBQUVPLENBQUM7SUFBRUMsRUFBRSxHQUFHLEVBQUU7SUFBRUMsQ0FBQztFQUNoQyxJQUFJO0lBQ0EsT0FBTyxDQUFDUixDQUFDLEtBQUssS0FBSyxDQUFDLElBQUlBLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUNNLENBQUMsR0FBR0YsQ0FBQyxDQUFDSyxJQUFJLENBQUMsQ0FBQyxFQUFFQyxJQUFJLEVBQUVILEVBQUUsQ0FBQ0ksSUFBSSxDQUFDTCxDQUFDLENBQUNNLEtBQUssQ0FBQztFQUM5RSxDQUFDLENBQ0QsT0FBT0MsS0FBSyxFQUFFO0lBQUVMLENBQUMsR0FBRztNQUFFSyxLQUFLLEVBQUVBO0lBQU0sQ0FBQztFQUFFLENBQUMsU0FDL0I7SUFDSixJQUFJO01BQ0EsSUFBSVAsQ0FBQyxJQUFJLENBQUNBLENBQUMsQ0FBQ0ksSUFBSSxLQUFLVCxDQUFDLEdBQUdHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFSCxDQUFDLENBQUNJLElBQUksQ0FBQ0QsQ0FBQyxDQUFDO0lBQ3BELENBQUMsU0FDTztNQUFFLElBQUlJLENBQUMsRUFBRSxNQUFNQSxDQUFDLENBQUNLLEtBQUs7SUFBRTtFQUNwQztFQUNBLE9BQU9OLEVBQUU7QUFDYixDQUFDO0FBQ0QsSUFBSU8sYUFBYSxHQUFJLFVBQVEsU0FBS0EsYUFBYSxJQUFLLFVBQVVDLEVBQUUsRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQUU7RUFDMUUsSUFBSUEsSUFBSSxJQUFJQyxTQUFTLENBQUNDLE1BQU0sS0FBSyxDQUFDLEVBQUUsS0FBSyxJQUFJZixDQUFDLEdBQUcsQ0FBQyxFQUFFZ0IsQ0FBQyxHQUFHSixJQUFJLENBQUNHLE1BQU0sRUFBRVosRUFBRSxFQUFFSCxDQUFDLEdBQUdnQixDQUFDLEVBQUVoQixDQUFDLEVBQUUsRUFBRTtJQUNqRixJQUFJRyxFQUFFLElBQUksRUFBRUgsQ0FBQyxJQUFJWSxJQUFJLENBQUMsRUFBRTtNQUNwQixJQUFJLENBQUNULEVBQUUsRUFBRUEsRUFBRSxHQUFHYyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDbEIsSUFBSSxDQUFDVyxJQUFJLEVBQUUsQ0FBQyxFQUFFWixDQUFDLENBQUM7TUFDcERHLEVBQUUsQ0FBQ0gsQ0FBQyxDQUFDLEdBQUdZLElBQUksQ0FBQ1osQ0FBQyxDQUFDO0lBQ25CO0VBQ0o7RUFDQSxPQUFPVyxFQUFFLENBQUNTLE1BQU0sQ0FBQ2pCLEVBQUUsSUFBSWMsS0FBSyxDQUFDQyxTQUFTLENBQUNDLEtBQUssQ0FBQ2xCLElBQUksQ0FBQ1csSUFBSSxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELElBQUlTLGtCQUFrQixHQUFBQywwQkFBQSxHQUFHLGFBQWUsWUFBWTtFQUNoRCxTQUFTRCxrQkFBa0JBLENBQUEsRUFBRyxDQUM5QjtFQUNBQSxrQkFBa0IsQ0FBQ0gsU0FBUyxDQUFDSyxNQUFNLEdBQUcsWUFBWTtJQUM5QyxPQUFPQyxzQkFBWTtFQUN2QixDQUFDO0VBQ0RILGtCQUFrQixDQUFDSCxTQUFTLENBQUNPLElBQUksR0FBRyxVQUFVQyxRQUFRLEVBQUVDLEVBQUUsRUFBRUMsT0FBTyxFQUFFO0lBQ2pFLElBQUlDLElBQUksR0FBRyxFQUFFO0lBQ2IsS0FBSyxJQUFJQyxFQUFFLEdBQUcsQ0FBQyxFQUFFQSxFQUFFLEdBQUdoQixTQUFTLENBQUNDLE1BQU0sRUFBRWUsRUFBRSxFQUFFLEVBQUU7TUFDMUNELElBQUksQ0FBQ0MsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHaEIsU0FBUyxDQUFDZ0IsRUFBRSxDQUFDO0lBQ2hDO0lBQ0EsT0FBT0gsRUFBRSxDQUFDMUIsSUFBSSxDQUFDOEIsS0FBSyxDQUFDSixFQUFFLEVBQUVqQixhQUFhLENBQUMsQ0FBQ2tCLE9BQU8sQ0FBQyxFQUFFbEMsTUFBTSxDQUFDbUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7RUFDM0UsQ0FBQztFQUNEUixrQkFBa0IsQ0FBQ0gsU0FBUyxDQUFDYyxJQUFJLEdBQUcsVUFBVU4sUUFBUSxFQUFFTyxNQUFNLEVBQUU7SUFDNUQsT0FBT0EsTUFBTTtFQUNqQixDQUFDO0VBQ0RaLGtCQUFrQixDQUFDSCxTQUFTLENBQUNnQixNQUFNLEdBQUcsWUFBWTtJQUM5QyxPQUFPLElBQUk7RUFDZixDQUFDO0VBQ0RiLGtCQUFrQixDQUFDSCxTQUFTLENBQUNpQixPQUFPLEdBQUcsWUFBWTtJQUMvQyxPQUFPLElBQUk7RUFDZixDQUFDO0VBQ0QsT0FBT2Qsa0JBQWtCO0FBQzdCLENBQUMsQ0FBQyxDQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2NvbnRleHQvTm9vcENvbnRleHRNYW5hZ2VyLmpzP2FkMDIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbmltcG9ydCB7IFJPT1RfQ09OVEVYVCB9IGZyb20gJy4vY29udGV4dCc7XG52YXIgTm9vcENvbnRleHRNYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vb3BDb250ZXh0TWFuYWdlcigpIHtcbiAgICB9XG4gICAgTm9vcENvbnRleHRNYW5hZ2VyLnByb3RvdHlwZS5hY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBST09UX0NPTlRFWFQ7XG4gICAgfTtcbiAgICBOb29wQ29udGV4dE1hbmFnZXIucHJvdG90eXBlLndpdGggPSBmdW5jdGlvbiAoX2NvbnRleHQsIGZuLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMzsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gM10gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5jYWxsLmFwcGx5KGZuLCBfX3NwcmVhZEFycmF5KFt0aGlzQXJnXSwgX19yZWFkKGFyZ3MpLCBmYWxzZSkpO1xuICAgIH07XG4gICAgTm9vcENvbnRleHRNYW5hZ2VyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKF9jb250ZXh0LCB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIE5vb3BDb250ZXh0TWFuYWdlci5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE5vb3BDb250ZXh0TWFuYWdlci5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gTm9vcENvbnRleHRNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydCB7IE5vb3BDb250ZXh0TWFuYWdlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm9vcENvbnRleHRNYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJfY29udGV4dDIiLCJyZXF1aXJlIiwiX19yZWFkIiwibyIsIm4iLCJtIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJpIiwiY2FsbCIsInIiLCJhciIsImUiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJ2YWx1ZSIsImVycm9yIiwiX19zcHJlYWRBcnJheSIsInRvIiwiZnJvbSIsInBhY2siLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJsIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNvbmNhdCIsIk5vb3BDb250ZXh0TWFuYWdlciIsImV4cG9ydHMiLCJhY3RpdmUiLCJST09UX0NPTlRFWFQiLCJ3aXRoIiwiX2NvbnRleHQiLCJmbiIsInRoaXNBcmciLCJhcmdzIiwiX2kiLCJhcHBseSIsImJpbmQiLCJ0YXJnZXQiLCJlbmFibGUiLCJkaXNhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/context.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ROOT_CONTEXT = void 0;\nexports.createContextKey = createContextKey;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nfunction createContextKey(description) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\nvar BaseContext = /** @class */function () {\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  function BaseContext(parentContext) {\n    // for minification\n    var self = this;\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n    self.getValue = function (key) {\n      return self._currentContext.get(key);\n    };\n    self.setValue = function (key, value) {\n      var context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n    self.deleteValue = function (key) {\n      var context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n  return BaseContext;\n}();\n/** The root context is used as the default parent context when there is no active context */\nvar ROOT_CONTEXT = exports.ROOT_CONTEXT = new BaseContext();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vY29udGV4dC9jb250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLGdCQUFnQkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQzFDO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLE9BQU9DLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDRixXQUFXLENBQUM7QUFDbEM7QUFDQSxJQUFJRyxXQUFXLEdBQUcsYUFBZSxZQUFZO0VBQ3pDO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSSxTQUFTQSxXQUFXQSxDQUFDQyxhQUFhLEVBQUU7SUFDaEM7SUFDQSxJQUFJQyxJQUFJLEdBQUcsSUFBSTtJQUNmQSxJQUFJLENBQUNDLGVBQWUsR0FBR0YsYUFBYSxHQUFHLElBQUlHLEdBQUcsQ0FBQ0gsYUFBYSxDQUFDLEdBQUcsSUFBSUcsR0FBRyxDQUFDLENBQUM7SUFDekVGLElBQUksQ0FBQ0csUUFBUSxHQUFHLFVBQVVDLEdBQUcsRUFBRTtNQUFFLE9BQU9KLElBQUksQ0FBQ0MsZUFBZSxDQUFDSSxHQUFHLENBQUNELEdBQUcsQ0FBQztJQUFFLENBQUM7SUFDeEVKLElBQUksQ0FBQ00sUUFBUSxHQUFHLFVBQVVGLEdBQUcsRUFBRUcsS0FBSyxFQUFFO01BQ2xDLElBQUlDLE9BQU8sR0FBRyxJQUFJVixXQUFXLENBQUNFLElBQUksQ0FBQ0MsZUFBZSxDQUFDO01BQ25ETyxPQUFPLENBQUNQLGVBQWUsQ0FBQ1EsR0FBRyxDQUFDTCxHQUFHLEVBQUVHLEtBQUssQ0FBQztNQUN2QyxPQUFPQyxPQUFPO0lBQ2xCLENBQUM7SUFDRFIsSUFBSSxDQUFDVSxXQUFXLEdBQUcsVUFBVU4sR0FBRyxFQUFFO01BQzlCLElBQUlJLE9BQU8sR0FBRyxJQUFJVixXQUFXLENBQUNFLElBQUksQ0FBQ0MsZUFBZSxDQUFDO01BQ25ETyxPQUFPLENBQUNQLGVBQWUsQ0FBQ1UsTUFBTSxDQUFDUCxHQUFHLENBQUM7TUFDbkMsT0FBT0ksT0FBTztJQUNsQixDQUFDO0VBQ0w7RUFDQSxPQUFPVixXQUFXO0FBQ3RCLENBQUMsQ0FBQyxDQUFFO0FBQ0o7QUFDTyxJQUFJYyxZQUFZLEdBQUFDLG9CQUFBLEdBQUcsSUFBSWYsV0FBVyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vY29udGV4dC9jb250ZXh0LmpzP2JkNTgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBHZXQgYSBrZXkgdG8gdW5pcXVlbHkgaWRlbnRpZnkgYSBjb250ZXh0IHZhbHVlICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dEtleShkZXNjcmlwdGlvbikge1xuICAgIC8vIFRoZSBzcGVjaWZpY2F0aW9uIHN0YXRlcyB0aGF0IGZvciB0aGUgc2FtZSBpbnB1dCwgbXVsdGlwbGUgY2FsbHMgc2hvdWxkXG4gICAgLy8gcmV0dXJuIGRpZmZlcmVudCBrZXlzLiBEdWUgdG8gdGhlIG5hdHVyZSBvZiB0aGUgSlMgZGVwZW5kZW5jeSBtYW5hZ2VtZW50XG4gICAgLy8gc3lzdGVtLCB0aGlzIGNyZWF0ZXMgcHJvYmxlbXMgd2hlcmUgbXVsdGlwbGUgdmVyc2lvbnMgb2Ygc29tZSBwYWNrYWdlXG4gICAgLy8gY291bGQgaG9sZCBkaWZmZXJlbnQga2V5cyBmb3IgdGhlIHNhbWUgcHJvcGVydHkuXG4gICAgLy9cbiAgICAvLyBUaGVyZWZvcmUsIHdlIHVzZSBTeW1ib2wuZm9yIHdoaWNoIHJldHVybnMgdGhlIHNhbWUga2V5IGZvciB0aGUgc2FtZSBpbnB1dC5cbiAgICByZXR1cm4gU3ltYm9sLmZvcihkZXNjcmlwdGlvbik7XG59XG52YXIgQmFzZUNvbnRleHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgbmV3IGNvbnRleHQgd2hpY2ggaW5oZXJpdHMgdmFsdWVzIGZyb20gYW4gb3B0aW9uYWwgcGFyZW50IGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyZW50Q29udGV4dCBhIGNvbnRleHQgZnJvbSB3aGljaCB0byBpbmhlcml0IHZhbHVlc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJhc2VDb250ZXh0KHBhcmVudENvbnRleHQpIHtcbiAgICAgICAgLy8gZm9yIG1pbmlmaWNhdGlvblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNlbGYuX2N1cnJlbnRDb250ZXh0ID0gcGFyZW50Q29udGV4dCA/IG5ldyBNYXAocGFyZW50Q29udGV4dCkgOiBuZXcgTWFwKCk7XG4gICAgICAgIHNlbGYuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBzZWxmLl9jdXJyZW50Q29udGV4dC5nZXQoa2V5KTsgfTtcbiAgICAgICAgc2VsZi5zZXRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBCYXNlQ29udGV4dChzZWxmLl9jdXJyZW50Q29udGV4dCk7XG4gICAgICAgICAgICBjb250ZXh0Ll9jdXJyZW50Q29udGV4dC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfTtcbiAgICAgICAgc2VsZi5kZWxldGVWYWx1ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IEJhc2VDb250ZXh0KHNlbGYuX2N1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnRleHQuX2N1cnJlbnRDb250ZXh0LmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBCYXNlQ29udGV4dDtcbn0oKSk7XG4vKiogVGhlIHJvb3QgY29udGV4dCBpcyB1c2VkIGFzIHRoZSBkZWZhdWx0IHBhcmVudCBjb250ZXh0IHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGNvbnRleHQgKi9cbmV4cG9ydCB2YXIgUk9PVF9DT05URVhUID0gbmV3IEJhc2VDb250ZXh0KCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVDb250ZXh0S2V5IiwiZGVzY3JpcHRpb24iLCJTeW1ib2wiLCJmb3IiLCJCYXNlQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJzZWxmIiwiX2N1cnJlbnRDb250ZXh0IiwiTWFwIiwiZ2V0VmFsdWUiLCJrZXkiLCJnZXQiLCJzZXRWYWx1ZSIsInZhbHVlIiwiY29udGV4dCIsInNldCIsImRlbGV0ZVZhbHVlIiwiZGVsZXRlIiwiUk9PVF9DT05URVhUIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag-api.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.diag = void 0;\nvar _diag = __webpack_require__(/*! ./api/diag */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nvar diag = exports.diag = _diag.DiagAPI.instance();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vZGlhZy1hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBaUJBLElBQUFBLEtBQUEsR0FBQUMsbUJBQUE7QUFqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFJQyxJQUFJLEdBQUFDLFlBQUEsR0FBR0MsYUFBTyxDQUFDQyxRQUFRLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9kaWFnLWFwaS5qcz85NGVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBTcGxpdCBtb2R1bGUtbGV2ZWwgdmFyaWFibGUgZGVmaW5pdGlvbiBpbnRvIHNlcGFyYXRlIGZpbGVzIHRvIGFsbG93XG4vLyB0cmVlLXNoYWtpbmcgb24gZWFjaCBhcGkgaW5zdGFuY2UuXG5pbXBvcnQgeyBEaWFnQVBJIH0gZnJvbSAnLi9hcGkvZGlhZyc7XG4vKipcbiAqIEVudHJ5cG9pbnQgZm9yIERpYWcgQVBJLlxuICogRGVmaW5lcyBEaWFnbm9zdGljIGhhbmRsZXIgdXNlZCBmb3IgaW50ZXJuYWwgZGlhZ25vc3RpYyBsb2dnaW5nIG9wZXJhdGlvbnMuXG4gKiBUaGUgZGVmYXVsdCBwcm92aWRlcyBhIE5vb3AgRGlhZ0xvZ2dlciBpbXBsZW1lbnRhdGlvbiB3aGljaCBtYXkgYmUgY2hhbmdlZCB2aWEgdGhlXG4gKiBkaWFnLnNldExvZ2dlcihsb2dnZXI6IERpYWdMb2dnZXIpIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgdmFyIGRpYWcgPSBEaWFnQVBJLmluc3RhbmNlKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaWFnLWFwaS5qcy5tYXAiXSwibmFtZXMiOlsiX2RpYWciLCJyZXF1aXJlIiwiZGlhZyIsImV4cG9ydHMiLCJEaWFnQVBJIiwiaW5zdGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.DiagComponentLogger = void 0;\nvar _globalUtils = __webpack_require__(/*! ../internal/global-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = void 0 && (void 0).__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = void 0 && (void 0).__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = exports.DiagComponentLogger = /** @class */function () {\n  function DiagComponentLogger(props) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n  DiagComponentLogger.prototype.debug = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('debug', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('error', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.info = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('info', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('warn', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.verbose = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('verbose', this._namespace, args);\n  };\n  return DiagComponentLogger;\n}();\nfunction logProxy(funcName, namespace, args) {\n  var logger = (0, _globalUtils.getGlobal)('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n  args.unshift(namespace);\n  return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.DiagConsoleLogger = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [{\n  n: 'error',\n  c: 'error'\n}, {\n  n: 'warn',\n  c: 'warn'\n}, {\n  n: 'info',\n  c: 'info'\n}, {\n  n: 'debug',\n  c: 'debug'\n}, {\n  n: 'verbose',\n  c: 'trace'\n}];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = exports.DiagConsoleLogger = /** @class */function () {\n  function DiagConsoleLogger() {\n    function _consoleFunc(funcName) {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        if (console) {\n          // Some environments only expose the console when the F12 developer console is open\n          // eslint-disable-next-line no-console\n          var theFunc = console[funcName];\n          if (typeof theFunc !== 'function') {\n            // Not all environments support all functions\n            // eslint-disable-next-line no-console\n            theFunc = console.log;\n          }\n          // One last final check\n          if (typeof theFunc === 'function') {\n            return theFunc.apply(console, args);\n          }\n        }\n      };\n    }\n    for (var i = 0; i < consoleMap.length; i++) {\n      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n    }\n  }\n  return DiagConsoleLogger;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vZGlhZy9jb25zb2xlTG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlBLFVBQVUsR0FBRyxDQUNiO0VBQUVDLENBQUMsRUFBRSxPQUFPO0VBQUVDLENBQUMsRUFBRTtBQUFRLENBQUMsRUFDMUI7RUFBRUQsQ0FBQyxFQUFFLE1BQU07RUFBRUMsQ0FBQyxFQUFFO0FBQU8sQ0FBQyxFQUN4QjtFQUFFRCxDQUFDLEVBQUUsTUFBTTtFQUFFQyxDQUFDLEVBQUU7QUFBTyxDQUFDLEVBQ3hCO0VBQUVELENBQUMsRUFBRSxPQUFPO0VBQUVDLENBQUMsRUFBRTtBQUFRLENBQUMsRUFDMUI7RUFBRUQsQ0FBQyxFQUFFLFNBQVM7RUFBRUMsQ0FBQyxFQUFFO0FBQVEsQ0FBQyxDQUMvQjtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxpQkFBaUIsR0FBQUMseUJBQUEsR0FBRyxhQUFlLFlBQVk7RUFDL0MsU0FBU0QsaUJBQWlCQSxDQUFBLEVBQUc7SUFDekIsU0FBU0UsWUFBWUEsQ0FBQ0MsUUFBUSxFQUFFO01BQzVCLE9BQU8sWUFBWTtRQUNmLElBQUlDLElBQUksR0FBRyxFQUFFO1FBQ2IsS0FBSyxJQUFJQyxFQUFFLEdBQUcsQ0FBQyxFQUFFQSxFQUFFLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBTSxFQUFFRixFQUFFLEVBQUUsRUFBRTtVQUMxQ0QsSUFBSSxDQUFDQyxFQUFFLENBQUMsR0FBR0MsU0FBUyxDQUFDRCxFQUFFLENBQUM7UUFDNUI7UUFDQSxJQUFJRyxPQUFPLEVBQUU7VUFDVDtVQUNBO1VBQ0EsSUFBSUMsT0FBTyxHQUFHRCxPQUFPLENBQUNMLFFBQVEsQ0FBQztVQUMvQixJQUFJLE9BQU9NLE9BQU8sS0FBSyxVQUFVLEVBQUU7WUFDL0I7WUFDQTtZQUNBQSxPQUFPLEdBQUdELE9BQU8sQ0FBQ0UsR0FBRztVQUN6QjtVQUNBO1VBQ0EsSUFBSSxPQUFPRCxPQUFPLEtBQUssVUFBVSxFQUFFO1lBQy9CLE9BQU9BLE9BQU8sQ0FBQ0UsS0FBSyxDQUFDSCxPQUFPLEVBQUVKLElBQUksQ0FBQztVQUN2QztRQUNKO01BQ0osQ0FBQztJQUNMO0lBQ0EsS0FBSyxJQUFJUSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdmLFVBQVUsQ0FBQ1UsTUFBTSxFQUFFSyxDQUFDLEVBQUUsRUFBRTtNQUN4QyxJQUFJLENBQUNmLFVBQVUsQ0FBQ2UsQ0FBQyxDQUFDLENBQUNkLENBQUMsQ0FBQyxHQUFHSSxZQUFZLENBQUNMLFVBQVUsQ0FBQ2UsQ0FBQyxDQUFDLENBQUNiLENBQUMsQ0FBQztJQUN6RDtFQUNKO0VBQ0EsT0FBT0MsaUJBQWlCO0FBQzVCLENBQUMsQ0FBQyxDQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2RpYWcvY29uc29sZUxvZ2dlci5qcz9hMjhhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgY29uc29sZU1hcCA9IFtcbiAgICB7IG46ICdlcnJvcicsIGM6ICdlcnJvcicgfSxcbiAgICB7IG46ICd3YXJuJywgYzogJ3dhcm4nIH0sXG4gICAgeyBuOiAnaW5mbycsIGM6ICdpbmZvJyB9LFxuICAgIHsgbjogJ2RlYnVnJywgYzogJ2RlYnVnJyB9LFxuICAgIHsgbjogJ3ZlcmJvc2UnLCBjOiAndHJhY2UnIH0sXG5dO1xuLyoqXG4gKiBBIHNpbXBsZSBJbW11dGFibGUgQ29uc29sZSBiYXNlZCBkaWFnbm9zdGljIGxvZ2dlciB3aGljaCB3aWxsIG91dHB1dCBhbnkgbWVzc2FnZXMgdG8gdGhlIENvbnNvbGUuXG4gKiBJZiB5b3Ugd2FudCB0byBsaW1pdCB0aGUgYW1vdW50IG9mIGxvZ2dpbmcgdG8gYSBzcGVjaWZpYyBsZXZlbCBvciBsb3dlciB1c2UgdGhlXG4gKiB7QGxpbmsgY3JlYXRlTG9nTGV2ZWxEaWFnTG9nZ2VyfVxuICovXG52YXIgRGlhZ0NvbnNvbGVMb2dnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlhZ0NvbnNvbGVMb2dnZXIoKSB7XG4gICAgICAgIGZ1bmN0aW9uIF9jb25zb2xlRnVuYyhmdW5jTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvbnNvbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU29tZSBlbnZpcm9ubWVudHMgb25seSBleHBvc2UgdGhlIGNvbnNvbGUgd2hlbiB0aGUgRjEyIGRldmVsb3BlciBjb25zb2xlIGlzIG9wZW5cbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoZUZ1bmMgPSBjb25zb2xlW2Z1bmNOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGVGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgYWxsIGVudmlyb25tZW50cyBzdXBwb3J0IGFsbCBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGVGdW5jID0gY29uc29sZS5sb2c7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gT25lIGxhc3QgZmluYWwgY2hlY2tcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGVGdW5jID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhlRnVuYy5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25zb2xlTWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzW2NvbnNvbGVNYXBbaV0ubl0gPSBfY29uc29sZUZ1bmMoY29uc29sZU1hcFtpXS5jKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gRGlhZ0NvbnNvbGVMb2dnZXI7XG59KCkpO1xuZXhwb3J0IHsgRGlhZ0NvbnNvbGVMb2dnZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnNvbGVMb2dnZXIuanMubWFwIl0sIm5hbWVzIjpbImNvbnNvbGVNYXAiLCJuIiwiYyIsIkRpYWdDb25zb2xlTG9nZ2VyIiwiZXhwb3J0cyIsIl9jb25zb2xlRnVuYyIsImZ1bmNOYW1lIiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiY29uc29sZSIsInRoZUZ1bmMiLCJsb2ciLCJhcHBseSIsImkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createLogLevelDiagLogger = createLogLevelDiagLogger;\nvar _types = __webpack_require__(/*! ../types */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction createLogLevelDiagLogger(maxLevel, logger) {\n  if (maxLevel < _types.DiagLogLevel.NONE) {\n    maxLevel = _types.DiagLogLevel.NONE;\n  } else if (maxLevel > _types.DiagLogLevel.ALL) {\n    maxLevel = _types.DiagLogLevel.ALL;\n  }\n  // In case the logger is null or undefined\n  logger = logger || {};\n  function _filterFunc(funcName, theLevel) {\n    var theFunc = logger[funcName];\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n  return {\n    error: _filterFunc('error', _types.DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', _types.DiagLogLevel.WARN),\n    info: _filterFunc('info', _types.DiagLogLevel.INFO),\n    debug: _filterFunc('debug', _types.DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', _types.DiagLogLevel.VERBOSE)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vZGlhZy9pbnRlcm5hbC9sb2dMZXZlbExvZ2dlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFlQSxJQUFBQSxNQUFBLEdBQUFDLG1CQUFBO0FBZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPLFNBQVNDLHdCQUF3QkEsQ0FBQ0MsUUFBUSxFQUFFQyxNQUFNLEVBQUU7RUFDdkQsSUFBSUQsUUFBUSxHQUFHRSxtQkFBWSxDQUFDQyxJQUFJLEVBQUU7SUFDOUJILFFBQVEsR0FBR0UsbUJBQVksQ0FBQ0MsSUFBSTtFQUNoQyxDQUFDLE1BQ0ksSUFBSUgsUUFBUSxHQUFHRSxtQkFBWSxDQUFDRSxHQUFHLEVBQUU7SUFDbENKLFFBQVEsR0FBR0UsbUJBQVksQ0FBQ0UsR0FBRztFQUMvQjtFQUNBO0VBQ0FILE1BQU0sR0FBR0EsTUFBTSxJQUFJLENBQUMsQ0FBQztFQUNyQixTQUFTSSxXQUFXQSxDQUFDQyxRQUFRLEVBQUVDLFFBQVEsRUFBRTtJQUNyQyxJQUFJQyxPQUFPLEdBQUdQLE1BQU0sQ0FBQ0ssUUFBUSxDQUFDO0lBQzlCLElBQUksT0FBT0UsT0FBTyxLQUFLLFVBQVUsSUFBSVIsUUFBUSxJQUFJTyxRQUFRLEVBQUU7TUFDdkQsT0FBT0MsT0FBTyxDQUFDQyxJQUFJLENBQUNSLE1BQU0sQ0FBQztJQUMvQjtJQUNBLE9BQU8sWUFBWSxDQUFFLENBQUM7RUFDMUI7RUFDQSxPQUFPO0lBQ0hTLEtBQUssRUFBRUwsV0FBVyxDQUFDLE9BQU8sRUFBRUgsbUJBQVksQ0FBQ1MsS0FBSyxDQUFDO0lBQy9DQyxJQUFJLEVBQUVQLFdBQVcsQ0FBQyxNQUFNLEVBQUVILG1CQUFZLENBQUNXLElBQUksQ0FBQztJQUM1Q0MsSUFBSSxFQUFFVCxXQUFXLENBQUMsTUFBTSxFQUFFSCxtQkFBWSxDQUFDYSxJQUFJLENBQUM7SUFDNUNDLEtBQUssRUFBRVgsV0FBVyxDQUFDLE9BQU8sRUFBRUgsbUJBQVksQ0FBQ2UsS0FBSyxDQUFDO0lBQy9DQyxPQUFPLEVBQUViLFdBQVcsQ0FBQyxTQUFTLEVBQUVILG1CQUFZLENBQUNpQixPQUFPO0VBQ3hELENBQUM7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9kaWFnL2ludGVybmFsL2xvZ0xldmVsTG9nZ2VyLmpzP2U5MWUiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IERpYWdMb2dMZXZlbCB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2dMZXZlbERpYWdMb2dnZXIobWF4TGV2ZWwsIGxvZ2dlcikge1xuICAgIGlmIChtYXhMZXZlbCA8IERpYWdMb2dMZXZlbC5OT05FKSB7XG4gICAgICAgIG1heExldmVsID0gRGlhZ0xvZ0xldmVsLk5PTkU7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1heExldmVsID4gRGlhZ0xvZ0xldmVsLkFMTCkge1xuICAgICAgICBtYXhMZXZlbCA9IERpYWdMb2dMZXZlbC5BTEw7XG4gICAgfVxuICAgIC8vIEluIGNhc2UgdGhlIGxvZ2dlciBpcyBudWxsIG9yIHVuZGVmaW5lZFxuICAgIGxvZ2dlciA9IGxvZ2dlciB8fCB7fTtcbiAgICBmdW5jdGlvbiBfZmlsdGVyRnVuYyhmdW5jTmFtZSwgdGhlTGV2ZWwpIHtcbiAgICAgICAgdmFyIHRoZUZ1bmMgPSBsb2dnZXJbZnVuY05hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIHRoZUZ1bmMgPT09ICdmdW5jdGlvbicgJiYgbWF4TGV2ZWwgPj0gdGhlTGV2ZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGVGdW5jLmJpbmQobG9nZ2VyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcjogX2ZpbHRlckZ1bmMoJ2Vycm9yJywgRGlhZ0xvZ0xldmVsLkVSUk9SKSxcbiAgICAgICAgd2FybjogX2ZpbHRlckZ1bmMoJ3dhcm4nLCBEaWFnTG9nTGV2ZWwuV0FSTiksXG4gICAgICAgIGluZm86IF9maWx0ZXJGdW5jKCdpbmZvJywgRGlhZ0xvZ0xldmVsLklORk8pLFxuICAgICAgICBkZWJ1ZzogX2ZpbHRlckZ1bmMoJ2RlYnVnJywgRGlhZ0xvZ0xldmVsLkRFQlVHKSxcbiAgICAgICAgdmVyYm9zZTogX2ZpbHRlckZ1bmMoJ3ZlcmJvc2UnLCBEaWFnTG9nTGV2ZWwuVkVSQk9TRSksXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ0xldmVsTG9nZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJfdHlwZXMiLCJyZXF1aXJlIiwiY3JlYXRlTG9nTGV2ZWxEaWFnTG9nZ2VyIiwibWF4TGV2ZWwiLCJsb2dnZXIiLCJEaWFnTG9nTGV2ZWwiLCJOT05FIiwiQUxMIiwiX2ZpbHRlckZ1bmMiLCJmdW5jTmFtZSIsInRoZUxldmVsIiwidGhlRnVuYyIsImJpbmQiLCJlcnJvciIsIkVSUk9SIiwid2FybiIsIldBUk4iLCJpbmZvIiwiSU5GTyIsImRlYnVnIiwiREVCVUciLCJ2ZXJib3NlIiwiVkVSQk9TRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.DiagLogLevel = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nvar DiagLogLevel;\n(function (DiagLogLevel) {\n  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n  DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n  /** Identifies an error scenario */\n  DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n  /** Identifies a warning scenario */\n  DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n  /** General informational log message */\n  DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n  /** General debug log message */\n  DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n  /**\n   * Detailed trace level logging should only be used for development, should only be set\n   * in a development environment.\n   */\n  DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n  /** Used to set the logging level to include all logging */\n  DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel || (exports.DiagLogLevel = DiagLogLevel = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vZGlhZy90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBSUEsWUFBWTtBQUN2QixDQUFDLFVBQVVBLFlBQVksRUFBRTtFQUNyQjtFQUNBQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNO0VBQy9DO0VBQ0FBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLE9BQU87RUFDbEQ7RUFDQUEsWUFBWSxDQUFDQSxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsTUFBTTtFQUNoRDtFQUNBQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxNQUFNO0VBQ2hEO0VBQ0FBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLE9BQU87RUFDbEQ7QUFDSjtBQUNBO0FBQ0E7RUFDSUEsWUFBWSxDQUFDQSxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsU0FBUztFQUN0RDtFQUNBQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxLQUFLO0FBQ3BELENBQUMsRUFBRUEsWUFBWSxLQUFBQyxvQkFBQSxHQUFLRCxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9kaWFnL3R5cGVzLmpzPzM0NWQiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogRGVmaW5lcyB0aGUgYXZhaWxhYmxlIGludGVybmFsIGxvZ2dpbmcgbGV2ZWxzIGZvciB0aGUgZGlhZ25vc3RpYyBsb2dnZXIsIHRoZSBudW1lcmljIHZhbHVlc1xuICogb2YgdGhlIGxldmVscyBhcmUgZGVmaW5lZCB0byBtYXRjaCB0aGUgb3JpZ2luYWwgdmFsdWVzIGZyb20gdGhlIGluaXRpYWwgTG9nTGV2ZWwgdG8gYXZvaWRcbiAqIGNvbXBhdGliaWxpdHkvbWlncmF0aW9uIGlzc3VlcyBmb3IgYW55IGltcGxlbWVudGF0aW9uIHRoYXQgYXNzdW1lIHRoZSBudW1lcmljIG9yZGVyaW5nLlxuICovXG5leHBvcnQgdmFyIERpYWdMb2dMZXZlbDtcbihmdW5jdGlvbiAoRGlhZ0xvZ0xldmVsKSB7XG4gICAgLyoqIERpYWdub3N0aWMgTG9nZ2luZyBsZXZlbCBzZXR0aW5nIHRvIGRpc2FibGUgYWxsIGxvZ2dpbmcgKGV4Y2VwdCBhbmQgZm9yY2VkIGxvZ3MpICovXG4gICAgRGlhZ0xvZ0xldmVsW0RpYWdMb2dMZXZlbFtcIk5PTkVcIl0gPSAwXSA9IFwiTk9ORVwiO1xuICAgIC8qKiBJZGVudGlmaWVzIGFuIGVycm9yIHNjZW5hcmlvICovXG4gICAgRGlhZ0xvZ0xldmVsW0RpYWdMb2dMZXZlbFtcIkVSUk9SXCJdID0gMzBdID0gXCJFUlJPUlwiO1xuICAgIC8qKiBJZGVudGlmaWVzIGEgd2FybmluZyBzY2VuYXJpbyAqL1xuICAgIERpYWdMb2dMZXZlbFtEaWFnTG9nTGV2ZWxbXCJXQVJOXCJdID0gNTBdID0gXCJXQVJOXCI7XG4gICAgLyoqIEdlbmVyYWwgaW5mb3JtYXRpb25hbCBsb2cgbWVzc2FnZSAqL1xuICAgIERpYWdMb2dMZXZlbFtEaWFnTG9nTGV2ZWxbXCJJTkZPXCJdID0gNjBdID0gXCJJTkZPXCI7XG4gICAgLyoqIEdlbmVyYWwgZGVidWcgbG9nIG1lc3NhZ2UgKi9cbiAgICBEaWFnTG9nTGV2ZWxbRGlhZ0xvZ0xldmVsW1wiREVCVUdcIl0gPSA3MF0gPSBcIkRFQlVHXCI7XG4gICAgLyoqXG4gICAgICogRGV0YWlsZWQgdHJhY2UgbGV2ZWwgbG9nZ2luZyBzaG91bGQgb25seSBiZSB1c2VkIGZvciBkZXZlbG9wbWVudCwgc2hvdWxkIG9ubHkgYmUgc2V0XG4gICAgICogaW4gYSBkZXZlbG9wbWVudCBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICBEaWFnTG9nTGV2ZWxbRGlhZ0xvZ0xldmVsW1wiVkVSQk9TRVwiXSA9IDgwXSA9IFwiVkVSQk9TRVwiO1xuICAgIC8qKiBVc2VkIHRvIHNldCB0aGUgbG9nZ2luZyBsZXZlbCB0byBpbmNsdWRlIGFsbCBsb2dnaW5nICovXG4gICAgRGlhZ0xvZ0xldmVsW0RpYWdMb2dMZXZlbFtcIkFMTFwiXSA9IDk5OTldID0gXCJBTExcIjtcbn0pKERpYWdMb2dMZXZlbCB8fCAoRGlhZ0xvZ0xldmVsID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJEaWFnTG9nTGV2ZWwiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nObject.defineProperty(exports, \"DiagConsoleLogger\", ({\n  enumerable: true,\n  get: function () {\n    return _consoleLogger.DiagConsoleLogger;\n  }\n}));\nObject.defineProperty(exports, \"DiagLogLevel\", ({\n  enumerable: true,\n  get: function () {\n    return _types.DiagLogLevel;\n  }\n}));\nObject.defineProperty(exports, \"INVALID_SPANID\", ({\n  enumerable: true,\n  get: function () {\n    return _invalidSpanConstants.INVALID_SPANID;\n  }\n}));\nObject.defineProperty(exports, \"INVALID_SPAN_CONTEXT\", ({\n  enumerable: true,\n  get: function () {\n    return _invalidSpanConstants.INVALID_SPAN_CONTEXT;\n  }\n}));\nObject.defineProperty(exports, \"INVALID_TRACEID\", ({\n  enumerable: true,\n  get: function () {\n    return _invalidSpanConstants.INVALID_TRACEID;\n  }\n}));\nObject.defineProperty(exports, \"ProxyTracer\", ({\n  enumerable: true,\n  get: function () {\n    return _ProxyTracer.ProxyTracer;\n  }\n}));\nObject.defineProperty(exports, \"ProxyTracerProvider\", ({\n  enumerable: true,\n  get: function () {\n    return _ProxyTracerProvider.ProxyTracerProvider;\n  }\n}));\nObject.defineProperty(exports, \"ROOT_CONTEXT\", ({\n  enumerable: true,\n  get: function () {\n    return _context.ROOT_CONTEXT;\n  }\n}));\nObject.defineProperty(exports, \"SamplingDecision\", ({\n  enumerable: true,\n  get: function () {\n    return _SamplingResult.SamplingDecision;\n  }\n}));\nObject.defineProperty(exports, \"SpanKind\", ({\n  enumerable: true,\n  get: function () {\n    return _span_kind.SpanKind;\n  }\n}));\nObject.defineProperty(exports, \"SpanStatusCode\", ({\n  enumerable: true,\n  get: function () {\n    return _status.SpanStatusCode;\n  }\n}));\nObject.defineProperty(exports, \"TraceFlags\", ({\n  enumerable: true,\n  get: function () {\n    return _trace_flags.TraceFlags;\n  }\n}));\nObject.defineProperty(exports, \"ValueType\", ({\n  enumerable: true,\n  get: function () {\n    return _Metric.ValueType;\n  }\n}));\nObject.defineProperty(exports, \"baggageEntryMetadataFromString\", ({\n  enumerable: true,\n  get: function () {\n    return _utils.baggageEntryMetadataFromString;\n  }\n}));\nObject.defineProperty(exports, \"context\", ({\n  enumerable: true,\n  get: function () {\n    return _contextApi.context;\n  }\n}));\nObject.defineProperty(exports, \"createContextKey\", ({\n  enumerable: true,\n  get: function () {\n    return _context.createContextKey;\n  }\n}));\nObject.defineProperty(exports, \"createNoopMeter\", ({\n  enumerable: true,\n  get: function () {\n    return _NoopMeter.createNoopMeter;\n  }\n}));\nObject.defineProperty(exports, \"createTraceState\", ({\n  enumerable: true,\n  get: function () {\n    return _utils2.createTraceState;\n  }\n}));\nexports[\"default\"] = void 0;\nObject.defineProperty(exports, \"defaultTextMapGetter\", ({\n  enumerable: true,\n  get: function () {\n    return _TextMapPropagator.defaultTextMapGetter;\n  }\n}));\nObject.defineProperty(exports, \"defaultTextMapSetter\", ({\n  enumerable: true,\n  get: function () {\n    return _TextMapPropagator.defaultTextMapSetter;\n  }\n}));\nObject.defineProperty(exports, \"diag\", ({\n  enumerable: true,\n  get: function () {\n    return _diagApi.diag;\n  }\n}));\nObject.defineProperty(exports, \"isSpanContextValid\", ({\n  enumerable: true,\n  get: function () {\n    return _spancontextUtils.isSpanContextValid;\n  }\n}));\nObject.defineProperty(exports, \"isValidSpanId\", ({\n  enumerable: true,\n  get: function () {\n    return _spancontextUtils.isValidSpanId;\n  }\n}));\nObject.defineProperty(exports, \"isValidTraceId\", ({\n  enumerable: true,\n  get: function () {\n    return _spancontextUtils.isValidTraceId;\n  }\n}));\nObject.defineProperty(exports, \"metrics\", ({\n  enumerable: true,\n  get: function () {\n    return _metricsApi.metrics;\n  }\n}));\nObject.defineProperty(exports, \"propagation\", ({\n  enumerable: true,\n  get: function () {\n    return _propagationApi.propagation;\n  }\n}));\nObject.defineProperty(exports, \"trace\", ({\n  enumerable: true,\n  get: function () {\n    return _traceApi.trace;\n  }\n}));\nvar _utils = __webpack_require__(/*! ./baggage/utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\");\nvar _context = __webpack_require__(/*! ./context/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\");\nvar _consoleLogger = __webpack_require__(/*! ./diag/consoleLogger */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js\");\nvar _types = __webpack_require__(/*! ./diag/types */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\nvar _NoopMeter = __webpack_require__(/*! ./metrics/NoopMeter */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js\");\nvar _Metric = __webpack_require__(/*! ./metrics/Metric */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js\");\nvar _TextMapPropagator = __webpack_require__(/*! ./propagation/TextMapPropagator */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\");\nvar _ProxyTracer = __webpack_require__(/*! ./trace/ProxyTracer */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\");\nvar _ProxyTracerProvider = __webpack_require__(/*! ./trace/ProxyTracerProvider */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\");\nvar _SamplingResult = __webpack_require__(/*! ./trace/SamplingResult */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\");\nvar _span_kind = __webpack_require__(/*! ./trace/span_kind */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\");\nvar _status = __webpack_require__(/*! ./trace/status */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/status.js\");\nvar _trace_flags = __webpack_require__(/*! ./trace/trace_flags */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\nvar _utils2 = __webpack_require__(/*! ./trace/internal/utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js\");\nvar _spancontextUtils = __webpack_require__(/*! ./trace/spancontext-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\nvar _invalidSpanConstants = __webpack_require__(/*! ./trace/invalid-span-constants */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\nvar _contextApi = __webpack_require__(/*! ./context-api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context-api.js\");\nvar _diagApi = __webpack_require__(/*! ./diag-api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\nvar _metricsApi = __webpack_require__(/*! ./metrics-api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics-api.js\");\nvar _propagationApi = __webpack_require__(/*! ./propagation-api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation-api.js\");\nvar _traceApi = __webpack_require__(/*! ./trace-api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Context APIs\n// Diag APIs\n// Metrics APIs\n// Propagation APIs\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n// Named export.\n// Default export.\nvar _default = exports[\"default\"] = {\n  context: _contextApi.context,\n  diag: _diagApi.diag,\n  metrics: _metricsApi.metrics,\n  propagation: _propagationApi.propagation,\n  trace: _traceApi.trace\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsSUFBQUEsTUFBQSxHQUFBQyxtQkFBQTtBQUVBLElBQUFDLFFBQUEsR0FBQUQsbUJBQUE7QUFFQSxJQUFBRSxjQUFBLEdBQUFGLG1CQUFBO0FBQ0EsSUFBQUcsTUFBQSxHQUFBSCxtQkFBQTtBQUVBLElBQUFJLFVBQUEsR0FBQUosbUJBQUE7QUFDQSxJQUFBSyxPQUFBLEdBQUFMLG1CQUFBO0FBRUEsSUFBQU0sa0JBQUEsR0FBQU4sbUJBQUE7QUFDQSxJQUFBTyxZQUFBLEdBQUFQLG1CQUFBO0FBQ0EsSUFBQVEsb0JBQUEsR0FBQVIsbUJBQUE7QUFDQSxJQUFBUyxlQUFBLEdBQUFULG1CQUFBO0FBQ0EsSUFBQVUsVUFBQSxHQUFBVixtQkFBQTtBQUNBLElBQUFXLE9BQUEsR0FBQVgsbUJBQUE7QUFDQSxJQUFBWSxZQUFBLEdBQUFaLG1CQUFBO0FBQ0EsSUFBQWEsT0FBQSxHQUFBYixtQkFBQTtBQUNBLElBQUFjLGlCQUFBLEdBQUFkLG1CQUFBO0FBQ0EsSUFBQWUscUJBQUEsR0FBQWYsbUJBQUE7QUFHQSxJQUFBZ0IsV0FBQSxHQUFBaEIsbUJBQUE7QUFDQSxJQUFBaUIsUUFBQSxHQUFBakIsbUJBQUE7QUFDQSxJQUFBa0IsV0FBQSxHQUFBbEIsbUJBQUE7QUFDQSxJQUFBbUIsZUFBQSxHQUFBbkIsbUJBQUE7QUFDQSxJQUFBb0IsU0FBQSxHQUFBcEIsbUJBQUE7QUF6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUdBO0FBR0E7QUFXQTtBQUNBO0FBTUE7QUFFQTtBQUFBLElBQUFxQixRQUFBLEdBQUFDLGtCQUFBLEdBQ2U7RUFDWEUsT0FBTyxFQUFFQSxtQkFBTztFQUNoQkMsSUFBSSxFQUFFQSxhQUFJO0VBQ1ZDLE9BQU8sRUFBRUEsbUJBQU87RUFDaEJDLFdBQVcsRUFBRUEsMkJBQVc7RUFDeEJDLEtBQUssRUFBRUE7QUFDWCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL2luZGV4LmpzP2NhMjgiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB7IGJhZ2dhZ2VFbnRyeU1ldGFkYXRhRnJvbVN0cmluZyB9IGZyb20gJy4vYmFnZ2FnZS91dGlscyc7XG4vLyBDb250ZXh0IEFQSXNcbmV4cG9ydCB7IGNyZWF0ZUNvbnRleHRLZXksIFJPT1RfQ09OVEVYVCB9IGZyb20gJy4vY29udGV4dC9jb250ZXh0Jztcbi8vIERpYWcgQVBJc1xuZXhwb3J0IHsgRGlhZ0NvbnNvbGVMb2dnZXIgfSBmcm9tICcuL2RpYWcvY29uc29sZUxvZ2dlcic7XG5leHBvcnQgeyBEaWFnTG9nTGV2ZWwsIH0gZnJvbSAnLi9kaWFnL3R5cGVzJztcbi8vIE1ldHJpY3MgQVBJc1xuZXhwb3J0IHsgY3JlYXRlTm9vcE1ldGVyIH0gZnJvbSAnLi9tZXRyaWNzL05vb3BNZXRlcic7XG5leHBvcnQgeyBWYWx1ZVR5cGUsIH0gZnJvbSAnLi9tZXRyaWNzL01ldHJpYyc7XG4vLyBQcm9wYWdhdGlvbiBBUElzXG5leHBvcnQgeyBkZWZhdWx0VGV4dE1hcEdldHRlciwgZGVmYXVsdFRleHRNYXBTZXR0ZXIsIH0gZnJvbSAnLi9wcm9wYWdhdGlvbi9UZXh0TWFwUHJvcGFnYXRvcic7XG5leHBvcnQgeyBQcm94eVRyYWNlciB9IGZyb20gJy4vdHJhY2UvUHJveHlUcmFjZXInO1xuZXhwb3J0IHsgUHJveHlUcmFjZXJQcm92aWRlciB9IGZyb20gJy4vdHJhY2UvUHJveHlUcmFjZXJQcm92aWRlcic7XG5leHBvcnQgeyBTYW1wbGluZ0RlY2lzaW9uIH0gZnJvbSAnLi90cmFjZS9TYW1wbGluZ1Jlc3VsdCc7XG5leHBvcnQgeyBTcGFuS2luZCB9IGZyb20gJy4vdHJhY2Uvc3Bhbl9raW5kJztcbmV4cG9ydCB7IFNwYW5TdGF0dXNDb2RlIH0gZnJvbSAnLi90cmFjZS9zdGF0dXMnO1xuZXhwb3J0IHsgVHJhY2VGbGFncyB9IGZyb20gJy4vdHJhY2UvdHJhY2VfZmxhZ3MnO1xuZXhwb3J0IHsgY3JlYXRlVHJhY2VTdGF0ZSB9IGZyb20gJy4vdHJhY2UvaW50ZXJuYWwvdXRpbHMnO1xuZXhwb3J0IHsgaXNTcGFuQ29udGV4dFZhbGlkLCBpc1ZhbGlkVHJhY2VJZCwgaXNWYWxpZFNwYW5JZCwgfSBmcm9tICcuL3RyYWNlL3NwYW5jb250ZXh0LXV0aWxzJztcbmV4cG9ydCB7IElOVkFMSURfU1BBTklELCBJTlZBTElEX1RSQUNFSUQsIElOVkFMSURfU1BBTl9DT05URVhULCB9IGZyb20gJy4vdHJhY2UvaW52YWxpZC1zcGFuLWNvbnN0YW50cyc7XG4vLyBTcGxpdCBtb2R1bGUtbGV2ZWwgdmFyaWFibGUgZGVmaW5pdGlvbiBpbnRvIHNlcGFyYXRlIGZpbGVzIHRvIGFsbG93XG4vLyB0cmVlLXNoYWtpbmcgb24gZWFjaCBhcGkgaW5zdGFuY2UuXG5pbXBvcnQgeyBjb250ZXh0IH0gZnJvbSAnLi9jb250ZXh0LWFwaSc7XG5pbXBvcnQgeyBkaWFnIH0gZnJvbSAnLi9kaWFnLWFwaSc7XG5pbXBvcnQgeyBtZXRyaWNzIH0gZnJvbSAnLi9tZXRyaWNzLWFwaSc7XG5pbXBvcnQgeyBwcm9wYWdhdGlvbiB9IGZyb20gJy4vcHJvcGFnYXRpb24tYXBpJztcbmltcG9ydCB7IHRyYWNlIH0gZnJvbSAnLi90cmFjZS1hcGknO1xuLy8gTmFtZWQgZXhwb3J0LlxuZXhwb3J0IHsgY29udGV4dCwgZGlhZywgbWV0cmljcywgcHJvcGFnYXRpb24sIHRyYWNlIH07XG4vLyBEZWZhdWx0IGV4cG9ydC5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgIGRpYWc6IGRpYWcsXG4gICAgbWV0cmljczogbWV0cmljcyxcbiAgICBwcm9wYWdhdGlvbjogcHJvcGFnYXRpb24sXG4gICAgdHJhY2U6IHRyYWNlLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJfdXRpbHMiLCJyZXF1aXJlIiwiX2NvbnRleHQiLCJfY29uc29sZUxvZ2dlciIsIl90eXBlcyIsIl9Ob29wTWV0ZXIiLCJfTWV0cmljIiwiX1RleHRNYXBQcm9wYWdhdG9yIiwiX1Byb3h5VHJhY2VyIiwiX1Byb3h5VHJhY2VyUHJvdmlkZXIiLCJfU2FtcGxpbmdSZXN1bHQiLCJfc3Bhbl9raW5kIiwiX3N0YXR1cyIsIl90cmFjZV9mbGFncyIsIl91dGlsczIiLCJfc3BhbmNvbnRleHRVdGlscyIsIl9pbnZhbGlkU3BhbkNvbnN0YW50cyIsIl9jb250ZXh0QXBpIiwiX2RpYWdBcGkiLCJfbWV0cmljc0FwaSIsIl9wcm9wYWdhdGlvbkFwaSIsIl90cmFjZUFwaSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiLCJjb250ZXh0IiwiZGlhZyIsIm1ldHJpY3MiLCJwcm9wYWdhdGlvbiIsInRyYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.getGlobal = getGlobal;\nexports.registerGlobal = registerGlobal;\nexports.unregisterGlobal = unregisterGlobal;\nvar _platform = __webpack_require__(/*! ../platform */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/platform/browser/index.js\");\nvar _version = __webpack_require__(/*! ../version */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/version.js\");\nvar _semver = __webpack_require__(/*! ./semver */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/semver.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar major = _version.VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _platform._globalThis;\nfunction registerGlobal(type, instance, diag, allowOverride) {\n  var _a;\n  if (allowOverride === void 0) {\n    allowOverride = false;\n  }\n  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n    version: _version.VERSION\n  };\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n    diag.error(err.stack || err.message);\n    return false;\n  }\n  if (api.version !== _version.VERSION) {\n    // All registered APIs must be of the same version exactly\n    var err = new Error(\"@opentelemetry/api: Registration of version v\" + api.version + \" for \" + type + \" does not match previously registered API v\" + _version.VERSION);\n    diag.error(err.stack || err.message);\n    return false;\n  }\n  api[type] = instance;\n  diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + _version.VERSION + \".\");\n  return true;\n}\nfunction getGlobal(type) {\n  var _a, _b;\n  var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n  if (!globalVersion || !(0, _semver.isCompatible)(globalVersion)) {\n    return;\n  }\n  return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nfunction unregisterGlobal(type, diag) {\n  diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + _version.VERSION + \".\");\n  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n  if (api) {\n    delete api[type];\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vaW50ZXJuYWwvZ2xvYmFsLXV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBZUEsSUFBQUEsU0FBQSxHQUFBQyxtQkFBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsbUJBQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFGLG1CQUFBO0FBakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxJQUFJRyxLQUFLLEdBQUdDLGdCQUFPLENBQUNDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakMsSUFBSUMsNEJBQTRCLEdBQUdDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLHVCQUF1QixHQUFHTCxLQUFLLENBQUM7QUFDOUUsSUFBSU0sT0FBTyxHQUFHQyxxQkFBVztBQUNsQixTQUFTQyxjQUFjQSxDQUFDQyxJQUFJLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxhQUFhLEVBQUU7RUFDaEUsSUFBSUMsRUFBRTtFQUNOLElBQUlELGFBQWEsS0FBSyxLQUFLLENBQUMsRUFBRTtJQUFFQSxhQUFhLEdBQUcsS0FBSztFQUFFO0VBQ3ZELElBQUlFLEdBQUcsR0FBSVIsT0FBTyxDQUFDSCw0QkFBNEIsQ0FBQyxHQUFHLENBQUNVLEVBQUUsR0FBR1AsT0FBTyxDQUFDSCw0QkFBNEIsQ0FBQyxNQUFNLElBQUksSUFBSVUsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxFQUFFLEdBQUc7SUFDN0hFLE9BQU8sRUFBRWQ7RUFDYixDQUFFO0VBQ0YsSUFBSSxDQUFDVyxhQUFhLElBQUlFLEdBQUcsQ0FBQ0wsSUFBSSxDQUFDLEVBQUU7SUFDN0I7SUFDQSxJQUFJTyxHQUFHLEdBQUcsSUFBSUMsS0FBSyxDQUFDLCtEQUErRCxHQUFHUixJQUFJLENBQUM7SUFDM0ZFLElBQUksQ0FBQ08sS0FBSyxDQUFDRixHQUFHLENBQUNHLEtBQUssSUFBSUgsR0FBRyxDQUFDSSxPQUFPLENBQUM7SUFDcEMsT0FBTyxLQUFLO0VBQ2hCO0VBQ0EsSUFBSU4sR0FBRyxDQUFDQyxPQUFPLEtBQUtkLGdCQUFPLEVBQUU7SUFDekI7SUFDQSxJQUFJZSxHQUFHLEdBQUcsSUFBSUMsS0FBSyxDQUFDLCtDQUErQyxHQUFHSCxHQUFHLENBQUNDLE9BQU8sR0FBRyxPQUFPLEdBQUdOLElBQUksR0FBRyw2Q0FBNkMsR0FBR1IsZ0JBQU8sQ0FBQztJQUM3SlUsSUFBSSxDQUFDTyxLQUFLLENBQUNGLEdBQUcsQ0FBQ0csS0FBSyxJQUFJSCxHQUFHLENBQUNJLE9BQU8sQ0FBQztJQUNwQyxPQUFPLEtBQUs7RUFDaEI7RUFDQU4sR0FBRyxDQUFDTCxJQUFJLENBQUMsR0FBR0MsUUFBUTtFQUNwQkMsSUFBSSxDQUFDVSxLQUFLLENBQUMsOENBQThDLEdBQUdaLElBQUksR0FBRyxJQUFJLEdBQUdSLGdCQUFPLEdBQUcsR0FBRyxDQUFDO0VBQ3hGLE9BQU8sSUFBSTtBQUNmO0FBQ08sU0FBU3FCLFNBQVNBLENBQUNiLElBQUksRUFBRTtFQUM1QixJQUFJSSxFQUFFLEVBQUVVLEVBQUU7RUFDVixJQUFJQyxhQUFhLEdBQUcsQ0FBQ1gsRUFBRSxHQUFHUCxPQUFPLENBQUNILDRCQUE0QixDQUFDLE1BQU0sSUFBSSxJQUFJVSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEVBQUUsQ0FBQ0UsT0FBTztFQUNoSCxJQUFJLENBQUNTLGFBQWEsSUFBSSxDQUFDLElBQUFDLG9CQUFZLEVBQUNELGFBQWEsQ0FBQyxFQUFFO0lBQ2hEO0VBQ0o7RUFDQSxPQUFPLENBQUNELEVBQUUsR0FBR2pCLE9BQU8sQ0FBQ0gsNEJBQTRCLENBQUMsTUFBTSxJQUFJLElBQUlvQixFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEVBQUUsQ0FBQ2QsSUFBSSxDQUFDO0FBQ3JHO0FBQ08sU0FBU2lCLGdCQUFnQkEsQ0FBQ2pCLElBQUksRUFBRUUsSUFBSSxFQUFFO0VBQ3pDQSxJQUFJLENBQUNVLEtBQUssQ0FBQyxpREFBaUQsR0FBR1osSUFBSSxHQUFHLElBQUksR0FBR1IsZ0JBQU8sR0FBRyxHQUFHLENBQUM7RUFDM0YsSUFBSWEsR0FBRyxHQUFHUixPQUFPLENBQUNILDRCQUE0QixDQUFDO0VBQy9DLElBQUlXLEdBQUcsRUFBRTtJQUNMLE9BQU9BLEdBQUcsQ0FBQ0wsSUFBSSxDQUFDO0VBQ3BCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vaW50ZXJuYWwvZ2xvYmFsLXV0aWxzLmpzP2QyNTEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IF9nbG9iYWxUaGlzIH0gZnJvbSAnLi4vcGxhdGZvcm0nO1xuaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4uL3ZlcnNpb24nO1xuaW1wb3J0IHsgaXNDb21wYXRpYmxlIH0gZnJvbSAnLi9zZW12ZXInO1xudmFyIG1ham9yID0gVkVSU0lPTi5zcGxpdCgnLicpWzBdO1xudmFyIEdMT0JBTF9PUEVOVEVMRU1FVFJZX0FQSV9LRVkgPSBTeW1ib2wuZm9yKFwib3BlbnRlbGVtZXRyeS5qcy5hcGkuXCIgKyBtYWpvcik7XG52YXIgX2dsb2JhbCA9IF9nbG9iYWxUaGlzO1xuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyR2xvYmFsKHR5cGUsIGluc3RhbmNlLCBkaWFnLCBhbGxvd092ZXJyaWRlKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmIChhbGxvd092ZXJyaWRlID09PSB2b2lkIDApIHsgYWxsb3dPdmVycmlkZSA9IGZhbHNlOyB9XG4gICAgdmFyIGFwaSA9IChfZ2xvYmFsW0dMT0JBTF9PUEVOVEVMRU1FVFJZX0FQSV9LRVldID0gKF9hID0gX2dsb2JhbFtHTE9CQUxfT1BFTlRFTEVNRVRSWV9BUElfS0VZXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge1xuICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgIH0pO1xuICAgIGlmICghYWxsb3dPdmVycmlkZSAmJiBhcGlbdHlwZV0pIHtcbiAgICAgICAgLy8gYWxyZWFkeSByZWdpc3RlcmVkIGFuIEFQSSBvZiB0aGlzIHR5cGVcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihcIkBvcGVudGVsZW1ldHJ5L2FwaTogQXR0ZW1wdGVkIGR1cGxpY2F0ZSByZWdpc3RyYXRpb24gb2YgQVBJOiBcIiArIHR5cGUpO1xuICAgICAgICBkaWFnLmVycm9yKGVyci5zdGFjayB8fCBlcnIubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGFwaS52ZXJzaW9uICE9PSBWRVJTSU9OKSB7XG4gICAgICAgIC8vIEFsbCByZWdpc3RlcmVkIEFQSXMgbXVzdCBiZSBvZiB0aGUgc2FtZSB2ZXJzaW9uIGV4YWN0bHlcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcihcIkBvcGVudGVsZW1ldHJ5L2FwaTogUmVnaXN0cmF0aW9uIG9mIHZlcnNpb24gdlwiICsgYXBpLnZlcnNpb24gKyBcIiBmb3IgXCIgKyB0eXBlICsgXCIgZG9lcyBub3QgbWF0Y2ggcHJldmlvdXNseSByZWdpc3RlcmVkIEFQSSB2XCIgKyBWRVJTSU9OKTtcbiAgICAgICAgZGlhZy5lcnJvcihlcnIuc3RhY2sgfHwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGFwaVt0eXBlXSA9IGluc3RhbmNlO1xuICAgIGRpYWcuZGVidWcoXCJAb3BlbnRlbGVtZXRyeS9hcGk6IFJlZ2lzdGVyZWQgYSBnbG9iYWwgZm9yIFwiICsgdHlwZSArIFwiIHZcIiArIFZFUlNJT04gKyBcIi5cIik7XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsKHR5cGUpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBnbG9iYWxWZXJzaW9uID0gKF9hID0gX2dsb2JhbFtHTE9CQUxfT1BFTlRFTEVNRVRSWV9BUElfS0VZXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZlcnNpb247XG4gICAgaWYgKCFnbG9iYWxWZXJzaW9uIHx8ICFpc0NvbXBhdGlibGUoZ2xvYmFsVmVyc2lvbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gKF9iID0gX2dsb2JhbFtHTE9CQUxfT1BFTlRFTEVNRVRSWV9BUElfS0VZXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW3R5cGVdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVucmVnaXN0ZXJHbG9iYWwodHlwZSwgZGlhZykge1xuICAgIGRpYWcuZGVidWcoXCJAb3BlbnRlbGVtZXRyeS9hcGk6IFVucmVnaXN0ZXJpbmcgYSBnbG9iYWwgZm9yIFwiICsgdHlwZSArIFwiIHZcIiArIFZFUlNJT04gKyBcIi5cIik7XG4gICAgdmFyIGFwaSA9IF9nbG9iYWxbR0xPQkFMX09QRU5URUxFTUVUUllfQVBJX0tFWV07XG4gICAgaWYgKGFwaSkge1xuICAgICAgICBkZWxldGUgYXBpW3R5cGVdO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdsb2JhbC11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiX3BsYXRmb3JtIiwicmVxdWlyZSIsIl92ZXJzaW9uIiwiX3NlbXZlciIsIm1ham9yIiwiVkVSU0lPTiIsInNwbGl0IiwiR0xPQkFMX09QRU5URUxFTUVUUllfQVBJX0tFWSIsIlN5bWJvbCIsImZvciIsIl9nbG9iYWwiLCJfZ2xvYmFsVGhpcyIsInJlZ2lzdGVyR2xvYmFsIiwidHlwZSIsImluc3RhbmNlIiwiZGlhZyIsImFsbG93T3ZlcnJpZGUiLCJfYSIsImFwaSIsInZlcnNpb24iLCJlcnIiLCJFcnJvciIsImVycm9yIiwic3RhY2siLCJtZXNzYWdlIiwiZGVidWciLCJnZXRHbG9iYWwiLCJfYiIsImdsb2JhbFZlcnNpb24iLCJpc0NvbXBhdGlibGUiLCJ1bnJlZ2lzdGVyR2xvYmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/semver.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/internal/semver.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports._makeCompatibilityCheck = _makeCompatibilityCheck;\nexports.isCompatible = void 0;\nvar _version = __webpack_require__(/*! ../version */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/version.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nfunction _makeCompatibilityCheck(ownVersion) {\n  var acceptedVersions = new Set([ownVersion]);\n  var rejectedVersions = new Set();\n  var myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return function () {\n      return false;\n    };\n  }\n  var ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4]\n  };\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion) {\n      return globalVersion === ownVersion;\n    };\n  }\n  function _reject(v) {\n    rejectedVersions.add(v);\n    return false;\n  }\n  function _accept(v) {\n    acceptedVersions.add(v);\n    return true;\n  }\n  return function isCompatible(globalVersion) {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n    var globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n    var globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4]\n    };\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n    if (ownVersionParsed.major === 0) {\n      if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {\n        return _accept(globalVersion);\n      }\n      return _reject(globalVersion);\n    }\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n    return _reject(globalVersion);\n  };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nvar isCompatible = exports.isCompatible = _makeCompatibilityCheck(_version.VERSION);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vaW50ZXJuYWwvc2VtdmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFlQSxJQUFBQSxRQUFBLEdBQUFDLG1CQUFBO0FBZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUlDLEVBQUUsR0FBRywrQkFBK0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQyx1QkFBdUJBLENBQUNDLFVBQVUsRUFBRTtFQUNoRCxJQUFJQyxnQkFBZ0IsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQ0YsVUFBVSxDQUFDLENBQUM7RUFDNUMsSUFBSUcsZ0JBQWdCLEdBQUcsSUFBSUQsR0FBRyxDQUFDLENBQUM7RUFDaEMsSUFBSUUsY0FBYyxHQUFHSixVQUFVLENBQUNLLEtBQUssQ0FBQ1AsRUFBRSxDQUFDO0VBQ3pDLElBQUksQ0FBQ00sY0FBYyxFQUFFO0lBQ2pCO0lBQ0EsT0FBTyxZQUFZO01BQUUsT0FBTyxLQUFLO0lBQUUsQ0FBQztFQUN4QztFQUNBLElBQUlFLGdCQUFnQixHQUFHO0lBQ25CQyxLQUFLLEVBQUUsQ0FBQ0gsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUN6QkksS0FBSyxFQUFFLENBQUNKLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDekJLLEtBQUssRUFBRSxDQUFDTCxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ3pCTSxVQUFVLEVBQUVOLGNBQWMsQ0FBQyxDQUFDO0VBQ2hDLENBQUM7RUFDRDtFQUNBLElBQUlFLGdCQUFnQixDQUFDSSxVQUFVLElBQUksSUFBSSxFQUFFO0lBQ3JDLE9BQU8sU0FBU0MsWUFBWUEsQ0FBQ0MsYUFBYSxFQUFFO01BQ3hDLE9BQU9BLGFBQWEsS0FBS1osVUFBVTtJQUN2QyxDQUFDO0VBQ0w7RUFDQSxTQUFTYSxPQUFPQSxDQUFDQyxDQUFDLEVBQUU7SUFDaEJYLGdCQUFnQixDQUFDWSxHQUFHLENBQUNELENBQUMsQ0FBQztJQUN2QixPQUFPLEtBQUs7RUFDaEI7RUFDQSxTQUFTRSxPQUFPQSxDQUFDRixDQUFDLEVBQUU7SUFDaEJiLGdCQUFnQixDQUFDYyxHQUFHLENBQUNELENBQUMsQ0FBQztJQUN2QixPQUFPLElBQUk7RUFDZjtFQUNBLE9BQU8sU0FBU0csWUFBWUEsQ0FBQ0wsYUFBYSxFQUFFO0lBQ3hDLElBQUlYLGdCQUFnQixDQUFDaUIsR0FBRyxDQUFDTixhQUFhLENBQUMsRUFBRTtNQUNyQyxPQUFPLElBQUk7SUFDZjtJQUNBLElBQUlULGdCQUFnQixDQUFDZSxHQUFHLENBQUNOLGFBQWEsQ0FBQyxFQUFFO01BQ3JDLE9BQU8sS0FBSztJQUNoQjtJQUNBLElBQUlPLGtCQUFrQixHQUFHUCxhQUFhLENBQUNQLEtBQUssQ0FBQ1AsRUFBRSxDQUFDO0lBQ2hELElBQUksQ0FBQ3FCLGtCQUFrQixFQUFFO01BQ3JCO01BQ0E7TUFDQSxPQUFPTixPQUFPLENBQUNELGFBQWEsQ0FBQztJQUNqQztJQUNBLElBQUlRLG1CQUFtQixHQUFHO01BQ3RCYixLQUFLLEVBQUUsQ0FBQ1ksa0JBQWtCLENBQUMsQ0FBQyxDQUFDO01BQzdCWCxLQUFLLEVBQUUsQ0FBQ1csa0JBQWtCLENBQUMsQ0FBQyxDQUFDO01BQzdCVixLQUFLLEVBQUUsQ0FBQ1Usa0JBQWtCLENBQUMsQ0FBQyxDQUFDO01BQzdCVCxVQUFVLEVBQUVTLGtCQUFrQixDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNEO0lBQ0EsSUFBSUMsbUJBQW1CLENBQUNWLFVBQVUsSUFBSSxJQUFJLEVBQUU7TUFDeEMsT0FBT0csT0FBTyxDQUFDRCxhQUFhLENBQUM7SUFDakM7SUFDQTtJQUNBLElBQUlOLGdCQUFnQixDQUFDQyxLQUFLLEtBQUthLG1CQUFtQixDQUFDYixLQUFLLEVBQUU7TUFDdEQsT0FBT00sT0FBTyxDQUFDRCxhQUFhLENBQUM7SUFDakM7SUFDQSxJQUFJTixnQkFBZ0IsQ0FBQ0MsS0FBSyxLQUFLLENBQUMsRUFBRTtNQUM5QixJQUFJRCxnQkFBZ0IsQ0FBQ0UsS0FBSyxLQUFLWSxtQkFBbUIsQ0FBQ1osS0FBSyxJQUNwREYsZ0JBQWdCLENBQUNHLEtBQUssSUFBSVcsbUJBQW1CLENBQUNYLEtBQUssRUFBRTtRQUNyRCxPQUFPTyxPQUFPLENBQUNKLGFBQWEsQ0FBQztNQUNqQztNQUNBLE9BQU9DLE9BQU8sQ0FBQ0QsYUFBYSxDQUFDO0lBQ2pDO0lBQ0EsSUFBSU4sZ0JBQWdCLENBQUNFLEtBQUssSUFBSVksbUJBQW1CLENBQUNaLEtBQUssRUFBRTtNQUNyRCxPQUFPUSxPQUFPLENBQUNKLGFBQWEsQ0FBQztJQUNqQztJQUNBLE9BQU9DLE9BQU8sQ0FBQ0QsYUFBYSxDQUFDO0VBQ2pDLENBQUM7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQUlLLFlBQVksR0FBQUksb0JBQUEsR0FBR3RCLHVCQUF1QixDQUFDdUIsZ0JBQU8sQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9pbnRlcm5hbC9zZW12ZXIuanM/MDY4MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gJy4uL3ZlcnNpb24nO1xudmFyIHJlID0gL14oXFxkKylcXC4oXFxkKylcXC4oXFxkKykoLSguKykpPyQvO1xuLyoqXG4gKiBDcmVhdGUgYSBmdW5jdGlvbiB0byB0ZXN0IGFuIEFQSSB2ZXJzaW9uIHRvIHNlZSBpZiBpdCBpcyBjb21wYXRpYmxlIHdpdGggdGhlIHByb3ZpZGVkIG93blZlcnNpb24uXG4gKlxuICogVGhlIHJldHVybmVkIGZ1bmN0aW9uIGhhcyB0aGUgZm9sbG93aW5nIHNlbWFudGljczpcbiAqIC0gRXhhY3QgbWF0Y2ggaXMgYWx3YXlzIGNvbXBhdGlibGVcbiAqIC0gTWFqb3IgdmVyc2lvbnMgbXVzdCBtYXRjaCBleGFjdGx5XG4gKiAgICAtIDEueCBwYWNrYWdlIGNhbm5vdCB1c2UgZ2xvYmFsIDIueCBwYWNrYWdlXG4gKiAgICAtIDIueCBwYWNrYWdlIGNhbm5vdCB1c2UgZ2xvYmFsIDEueCBwYWNrYWdlXG4gKiAtIFRoZSBtaW5vciB2ZXJzaW9uIG9mIHRoZSBBUEkgbW9kdWxlIHJlcXVlc3RpbmcgYWNjZXNzIHRvIHRoZSBnbG9iYWwgQVBJIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBtaW5vciB2ZXJzaW9uIG9mIHRoaXMgQVBJXG4gKiAgICAtIDEuMyBwYWNrYWdlIG1heSB1c2UgMS40IGdsb2JhbCBiZWNhdXNlIHRoZSBsYXRlciBnbG9iYWwgY29udGFpbnMgYWxsIGZ1bmN0aW9ucyAxLjMgZXhwZWN0c1xuICogICAgLSAxLjQgcGFja2FnZSBtYXkgTk9UIHVzZSAxLjMgZ2xvYmFsIGJlY2F1c2UgaXQgbWF5IHRyeSB0byBjYWxsIGZ1bmN0aW9ucyB3aGljaCBkb24ndCBleGlzdCBvbiAxLjNcbiAqIC0gSWYgdGhlIG1ham9yIHZlcnNpb24gaXMgMCwgdGhlIG1pbm9yIHZlcnNpb24gaXMgdHJlYXRlZCBhcyB0aGUgbWFqb3IgYW5kIHRoZSBwYXRjaCBpcyB0cmVhdGVkIGFzIHRoZSBtaW5vclxuICogLSBQYXRjaCBhbmQgYnVpbGQgdGFnIGRpZmZlcmVuY2VzIGFyZSBub3QgY29uc2lkZXJlZCBhdCB0aGlzIHRpbWVcbiAqXG4gKiBAcGFyYW0gb3duVmVyc2lvbiB2ZXJzaW9uIHdoaWNoIHNob3VsZCBiZSBjaGVja2VkIGFnYWluc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9tYWtlQ29tcGF0aWJpbGl0eUNoZWNrKG93blZlcnNpb24pIHtcbiAgICB2YXIgYWNjZXB0ZWRWZXJzaW9ucyA9IG5ldyBTZXQoW293blZlcnNpb25dKTtcbiAgICB2YXIgcmVqZWN0ZWRWZXJzaW9ucyA9IG5ldyBTZXQoKTtcbiAgICB2YXIgbXlWZXJzaW9uTWF0Y2ggPSBvd25WZXJzaW9uLm1hdGNoKHJlKTtcbiAgICBpZiAoIW15VmVyc2lvbk1hdGNoKSB7XG4gICAgICAgIC8vIHdlIGNhbm5vdCBndWFyYW50ZWUgY29tcGF0aWJpbGl0eSBzbyB3ZSBhbHdheXMgcmV0dXJuIG5vb3BcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9O1xuICAgIH1cbiAgICB2YXIgb3duVmVyc2lvblBhcnNlZCA9IHtcbiAgICAgICAgbWFqb3I6ICtteVZlcnNpb25NYXRjaFsxXSxcbiAgICAgICAgbWlub3I6ICtteVZlcnNpb25NYXRjaFsyXSxcbiAgICAgICAgcGF0Y2g6ICtteVZlcnNpb25NYXRjaFszXSxcbiAgICAgICAgcHJlcmVsZWFzZTogbXlWZXJzaW9uTWF0Y2hbNF0sXG4gICAgfTtcbiAgICAvLyBpZiBvd25WZXJzaW9uIGhhcyBhIHByZXJlbGVhc2UgdGFnLCB2ZXJzaW9ucyBtdXN0IG1hdGNoIGV4YWN0bHlcbiAgICBpZiAob3duVmVyc2lvblBhcnNlZC5wcmVyZWxlYXNlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzRXhhY3RtYXRjaChnbG9iYWxWZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsVmVyc2lvbiA9PT0gb3duVmVyc2lvbjtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX3JlamVjdCh2KSB7XG4gICAgICAgIHJlamVjdGVkVmVyc2lvbnMuYWRkKHYpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9hY2NlcHQodikge1xuICAgICAgICBhY2NlcHRlZFZlcnNpb25zLmFkZCh2KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBpc0NvbXBhdGlibGUoZ2xvYmFsVmVyc2lvbikge1xuICAgICAgICBpZiAoYWNjZXB0ZWRWZXJzaW9ucy5oYXMoZ2xvYmFsVmVyc2lvbikpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZWplY3RlZFZlcnNpb25zLmhhcyhnbG9iYWxWZXJzaW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBnbG9iYWxWZXJzaW9uTWF0Y2ggPSBnbG9iYWxWZXJzaW9uLm1hdGNoKHJlKTtcbiAgICAgICAgaWYgKCFnbG9iYWxWZXJzaW9uTWF0Y2gpIHtcbiAgICAgICAgICAgIC8vIGNhbm5vdCBwYXJzZSBvdGhlciB2ZXJzaW9uXG4gICAgICAgICAgICAvLyB3ZSBjYW5ub3QgZ3VhcmFudGVlIGNvbXBhdGliaWxpdHkgc28gd2UgYWx3YXlzIG5vb3BcbiAgICAgICAgICAgIHJldHVybiBfcmVqZWN0KGdsb2JhbFZlcnNpb24pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBnbG9iYWxWZXJzaW9uUGFyc2VkID0ge1xuICAgICAgICAgICAgbWFqb3I6ICtnbG9iYWxWZXJzaW9uTWF0Y2hbMV0sXG4gICAgICAgICAgICBtaW5vcjogK2dsb2JhbFZlcnNpb25NYXRjaFsyXSxcbiAgICAgICAgICAgIHBhdGNoOiArZ2xvYmFsVmVyc2lvbk1hdGNoWzNdLFxuICAgICAgICAgICAgcHJlcmVsZWFzZTogZ2xvYmFsVmVyc2lvbk1hdGNoWzRdLFxuICAgICAgICB9O1xuICAgICAgICAvLyBpZiBnbG9iYWxWZXJzaW9uIGhhcyBhIHByZXJlbGVhc2UgdGFnLCB2ZXJzaW9ucyBtdXN0IG1hdGNoIGV4YWN0bHlcbiAgICAgICAgaWYgKGdsb2JhbFZlcnNpb25QYXJzZWQucHJlcmVsZWFzZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gX3JlamVjdChnbG9iYWxWZXJzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtYWpvciB2ZXJzaW9ucyBtdXN0IG1hdGNoXG4gICAgICAgIGlmIChvd25WZXJzaW9uUGFyc2VkLm1ham9yICE9PSBnbG9iYWxWZXJzaW9uUGFyc2VkLm1ham9yKSB7XG4gICAgICAgICAgICByZXR1cm4gX3JlamVjdChnbG9iYWxWZXJzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3duVmVyc2lvblBhcnNlZC5tYWpvciA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKG93blZlcnNpb25QYXJzZWQubWlub3IgPT09IGdsb2JhbFZlcnNpb25QYXJzZWQubWlub3IgJiZcbiAgICAgICAgICAgICAgICBvd25WZXJzaW9uUGFyc2VkLnBhdGNoIDw9IGdsb2JhbFZlcnNpb25QYXJzZWQucGF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2FjY2VwdChnbG9iYWxWZXJzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfcmVqZWN0KGdsb2JhbFZlcnNpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvd25WZXJzaW9uUGFyc2VkLm1pbm9yIDw9IGdsb2JhbFZlcnNpb25QYXJzZWQubWlub3IpIHtcbiAgICAgICAgICAgIHJldHVybiBfYWNjZXB0KGdsb2JhbFZlcnNpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfcmVqZWN0KGdsb2JhbFZlcnNpb24pO1xuICAgIH07XG59XG4vKipcbiAqIFRlc3QgYW4gQVBJIHZlcnNpb24gdG8gc2VlIGlmIGl0IGlzIGNvbXBhdGlibGUgd2l0aCB0aGlzIEFQSS5cbiAqXG4gKiAtIEV4YWN0IG1hdGNoIGlzIGFsd2F5cyBjb21wYXRpYmxlXG4gKiAtIE1ham9yIHZlcnNpb25zIG11c3QgbWF0Y2ggZXhhY3RseVxuICogICAgLSAxLnggcGFja2FnZSBjYW5ub3QgdXNlIGdsb2JhbCAyLnggcGFja2FnZVxuICogICAgLSAyLnggcGFja2FnZSBjYW5ub3QgdXNlIGdsb2JhbCAxLnggcGFja2FnZVxuICogLSBUaGUgbWlub3IgdmVyc2lvbiBvZiB0aGUgQVBJIG1vZHVsZSByZXF1ZXN0aW5nIGFjY2VzcyB0byB0aGUgZ2xvYmFsIEFQSSBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgbWlub3IgdmVyc2lvbiBvZiB0aGlzIEFQSVxuICogICAgLSAxLjMgcGFja2FnZSBtYXkgdXNlIDEuNCBnbG9iYWwgYmVjYXVzZSB0aGUgbGF0ZXIgZ2xvYmFsIGNvbnRhaW5zIGFsbCBmdW5jdGlvbnMgMS4zIGV4cGVjdHNcbiAqICAgIC0gMS40IHBhY2thZ2UgbWF5IE5PVCB1c2UgMS4zIGdsb2JhbCBiZWNhdXNlIGl0IG1heSB0cnkgdG8gY2FsbCBmdW5jdGlvbnMgd2hpY2ggZG9uJ3QgZXhpc3Qgb24gMS4zXG4gKiAtIElmIHRoZSBtYWpvciB2ZXJzaW9uIGlzIDAsIHRoZSBtaW5vciB2ZXJzaW9uIGlzIHRyZWF0ZWQgYXMgdGhlIG1ham9yIGFuZCB0aGUgcGF0Y2ggaXMgdHJlYXRlZCBhcyB0aGUgbWlub3JcbiAqIC0gUGF0Y2ggYW5kIGJ1aWxkIHRhZyBkaWZmZXJlbmNlcyBhcmUgbm90IGNvbnNpZGVyZWQgYXQgdGhpcyB0aW1lXG4gKlxuICogQHBhcmFtIHZlcnNpb24gdmVyc2lvbiBvZiB0aGUgQVBJIHJlcXVlc3RpbmcgYW4gaW5zdGFuY2Ugb2YgdGhlIGdsb2JhbCBBUElcbiAqL1xuZXhwb3J0IHZhciBpc0NvbXBhdGlibGUgPSBfbWFrZUNvbXBhdGliaWxpdHlDaGVjayhWRVJTSU9OKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbXZlci5qcy5tYXAiXSwibmFtZXMiOlsiX3ZlcnNpb24iLCJyZXF1aXJlIiwicmUiLCJfbWFrZUNvbXBhdGliaWxpdHlDaGVjayIsIm93blZlcnNpb24iLCJhY2NlcHRlZFZlcnNpb25zIiwiU2V0IiwicmVqZWN0ZWRWZXJzaW9ucyIsIm15VmVyc2lvbk1hdGNoIiwibWF0Y2giLCJvd25WZXJzaW9uUGFyc2VkIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwicHJlcmVsZWFzZSIsImlzRXhhY3RtYXRjaCIsImdsb2JhbFZlcnNpb24iLCJfcmVqZWN0IiwidiIsImFkZCIsIl9hY2NlcHQiLCJpc0NvbXBhdGlibGUiLCJoYXMiLCJnbG9iYWxWZXJzaW9uTWF0Y2giLCJnbG9iYWxWZXJzaW9uUGFyc2VkIiwiZXhwb3J0cyIsIlZFUlNJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/internal/semver.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics-api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.metrics = void 0;\nvar _metrics = __webpack_require__(/*! ./api/metrics */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/metrics.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for metrics API */\nvar metrics = exports.metrics = _metrics.MetricsAPI.getInstance();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vbWV0cmljcy1hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBaUJBLElBQUFBLFFBQUEsR0FBQUMsbUJBQUE7QUFqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNPLElBQUlDLE9BQU8sR0FBQUMsZUFBQSxHQUFHQyxtQkFBVSxDQUFDQyxXQUFXLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9tZXRyaWNzLWFwaS5qcz81M2Y3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBTcGxpdCBtb2R1bGUtbGV2ZWwgdmFyaWFibGUgZGVmaW5pdGlvbiBpbnRvIHNlcGFyYXRlIGZpbGVzIHRvIGFsbG93XG4vLyB0cmVlLXNoYWtpbmcgb24gZWFjaCBhcGkgaW5zdGFuY2UuXG5pbXBvcnQgeyBNZXRyaWNzQVBJIH0gZnJvbSAnLi9hcGkvbWV0cmljcyc7XG4vKiogRW50cnlwb2ludCBmb3IgbWV0cmljcyBBUEkgKi9cbmV4cG9ydCB2YXIgbWV0cmljcyA9IE1ldHJpY3NBUEkuZ2V0SW5zdGFuY2UoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldHJpY3MtYXBpLmpzLm1hcCJdLCJuYW1lcyI6WyJfbWV0cmljcyIsInJlcXVpcmUiLCJtZXRyaWNzIiwiZXhwb3J0cyIsIk1ldHJpY3NBUEkiLCJnZXRJbnN0YW5jZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics-api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ValueType = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Type of value. It describes how the data is reported. */\nvar ValueType;\n(function (ValueType) {\n  ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n  ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType || (exports.ValueType = ValueType = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vbWV0cmljcy9NZXRyaWMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxJQUFJQSxTQUFTO0FBQ3BCLENBQUMsVUFBVUEsU0FBUyxFQUFFO0VBQ2xCQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLO0VBQ3ZDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0FBQ2pELENBQUMsRUFBRUEsU0FBUyxLQUFBQyxpQkFBQSxHQUFLRCxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9tZXRyaWNzL01ldHJpYy5qcz84ZDA3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiogVGhlIFR5cGUgb2YgdmFsdWUuIEl0IGRlc2NyaWJlcyBob3cgdGhlIGRhdGEgaXMgcmVwb3J0ZWQuICovXG5leHBvcnQgdmFyIFZhbHVlVHlwZTtcbihmdW5jdGlvbiAoVmFsdWVUeXBlKSB7XG4gICAgVmFsdWVUeXBlW1ZhbHVlVHlwZVtcIklOVFwiXSA9IDBdID0gXCJJTlRcIjtcbiAgICBWYWx1ZVR5cGVbVmFsdWVUeXBlW1wiRE9VQkxFXCJdID0gMV0gPSBcIkRPVUJMRVwiO1xufSkoVmFsdWVUeXBlIHx8IChWYWx1ZVR5cGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWV0cmljLmpzLm1hcCJdLCJuYW1lcyI6WyJWYWx1ZVR5cGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NoopUpDownCounterMetric = exports.NoopObservableUpDownCounterMetric = exports.NoopObservableMetric = exports.NoopObservableGaugeMetric = exports.NoopObservableCounterMetric = exports.NoopMetric = exports.NoopMeter = exports.NoopHistogramMetric = exports.NoopGaugeMetric = exports.NoopCounterMetric = exports.NOOP_UP_DOWN_COUNTER_METRIC = exports.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = exports.NOOP_OBSERVABLE_GAUGE_METRIC = exports.NOOP_OBSERVABLE_COUNTER_METRIC = exports.NOOP_METER = exports.NOOP_HISTOGRAM_METRIC = exports.NOOP_GAUGE_METRIC = exports.NOOP_COUNTER_METRIC = void 0;\nexports.createNoopMeter = createNoopMeter;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = exports.NoopMeter = /** @class */function () {\n  function NoopMeter() {}\n  /**\n   * @see {@link Meter.createGauge}\n   */\n  NoopMeter.prototype.createGauge = function (_name, _options) {\n    return NOOP_GAUGE_METRIC;\n  };\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  NoopMeter.prototype.createHistogram = function (_name, _options) {\n    return NOOP_HISTOGRAM_METRIC;\n  };\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  NoopMeter.prototype.createCounter = function (_name, _options) {\n    return NOOP_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  NoopMeter.prototype.createObservableGauge = function (_name, _options) {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  NoopMeter.prototype.createObservableCounter = function (_name, _options) {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) {};\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  NoopMeter.prototype.removeBatchObservableCallback = function (_callback) {};\n  return NoopMeter;\n}();\nvar NoopMetric = exports.NoopMetric = /** @class */function () {\n  function NoopMetric() {}\n  return NoopMetric;\n}();\nvar NoopCounterMetric = exports.NoopCounterMetric = /** @class */function (_super) {\n  __extends(NoopCounterMetric, _super);\n  function NoopCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopCounterMetric.prototype.add = function (_value, _attributes) {};\n  return NoopCounterMetric;\n}(NoopMetric);\nvar NoopUpDownCounterMetric = exports.NoopUpDownCounterMetric = /** @class */function (_super) {\n  __extends(NoopUpDownCounterMetric, _super);\n  function NoopUpDownCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) {};\n  return NoopUpDownCounterMetric;\n}(NoopMetric);\nvar NoopGaugeMetric = exports.NoopGaugeMetric = /** @class */function (_super) {\n  __extends(NoopGaugeMetric, _super);\n  function NoopGaugeMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopGaugeMetric.prototype.record = function (_value, _attributes) {};\n  return NoopGaugeMetric;\n}(NoopMetric);\nvar NoopHistogramMetric = exports.NoopHistogramMetric = /** @class */function (_super) {\n  __extends(NoopHistogramMetric, _super);\n  function NoopHistogramMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopHistogramMetric.prototype.record = function (_value, _attributes) {};\n  return NoopHistogramMetric;\n}(NoopMetric);\nvar NoopObservableMetric = exports.NoopObservableMetric = /** @class */function () {\n  function NoopObservableMetric() {}\n  NoopObservableMetric.prototype.addCallback = function (_callback) {};\n  NoopObservableMetric.prototype.removeCallback = function (_callback) {};\n  return NoopObservableMetric;\n}();\nvar NoopObservableCounterMetric = exports.NoopObservableCounterMetric = /** @class */function (_super) {\n  __extends(NoopObservableCounterMetric, _super);\n  function NoopObservableCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return NoopObservableCounterMetric;\n}(NoopObservableMetric);\nvar NoopObservableGaugeMetric = exports.NoopObservableGaugeMetric = /** @class */function (_super) {\n  __extends(NoopObservableGaugeMetric, _super);\n  function NoopObservableGaugeMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return NoopObservableGaugeMetric;\n}(NoopObservableMetric);\nvar NoopObservableUpDownCounterMetric = exports.NoopObservableUpDownCounterMetric = /** @class */function (_super) {\n  __extends(NoopObservableUpDownCounterMetric, _super);\n  function NoopObservableUpDownCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return NoopObservableUpDownCounterMetric;\n}(NoopObservableMetric);\nvar NOOP_METER = exports.NOOP_METER = new NoopMeter();\n// Synchronous instruments\nvar NOOP_COUNTER_METRIC = exports.NOOP_COUNTER_METRIC = new NoopCounterMetric();\nvar NOOP_GAUGE_METRIC = exports.NOOP_GAUGE_METRIC = new NoopGaugeMetric();\nvar NOOP_HISTOGRAM_METRIC = exports.NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nvar NOOP_UP_DOWN_COUNTER_METRIC = exports.NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n// Asynchronous instruments\nvar NOOP_OBSERVABLE_COUNTER_METRIC = exports.NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nvar NOOP_OBSERVABLE_GAUGE_METRIC = exports.NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nvar NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = exports.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n/**\n * Create a no-op Meter\n */\nfunction createNoopMeter() {\n  return NOOP_METER;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NoopMeterProvider = exports.NOOP_METER_PROVIDER = void 0;\nvar _NoopMeter = __webpack_require__(/*! ./NoopMeter */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nvar NoopMeterProvider = exports.NoopMeterProvider = /** @class */function () {\n  function NoopMeterProvider() {}\n  NoopMeterProvider.prototype.getMeter = function (_name, _version, _options) {\n    return _NoopMeter.NOOP_METER;\n  };\n  return NoopMeterProvider;\n}();\nvar NOOP_METER_PROVIDER = exports.NOOP_METER_PROVIDER = new NoopMeterProvider();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vbWV0cmljcy9Ob29wTWV0ZXJQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFlQSxJQUFBQSxVQUFBLEdBQUFDLG1CQUFBO0FBZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsaUJBQWlCLEdBQUFDLHlCQUFBLEdBQUcsYUFBZSxZQUFZO0VBQy9DLFNBQVNELGlCQUFpQkEsQ0FBQSxFQUFHLENBQzdCO0VBQ0FBLGlCQUFpQixDQUFDRSxTQUFTLENBQUNDLFFBQVEsR0FBRyxVQUFVQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFO0lBQ3hFLE9BQU9DLHFCQUFVO0VBQ3JCLENBQUM7RUFDRCxPQUFPUCxpQkFBaUI7QUFDNUIsQ0FBQyxDQUFDLENBQUU7QUFFRyxJQUFJUSxtQkFBbUIsR0FBQVAsMkJBQUEsR0FBRyxJQUFJRCxpQkFBaUIsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL21ldHJpY3MvTm9vcE1ldGVyUHJvdmlkZXIuanM/NjA3YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgTk9PUF9NRVRFUiB9IGZyb20gJy4vTm9vcE1ldGVyJztcbi8qKlxuICogQW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIHtAbGluayBNZXRlclByb3ZpZGVyfSB3aGljaCByZXR1cm5zIGFuIGltcG90ZW50IE1ldGVyXG4gKiBmb3IgYWxsIGNhbGxzIHRvIGBnZXRNZXRlcmBcbiAqL1xudmFyIE5vb3BNZXRlclByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vb3BNZXRlclByb3ZpZGVyKCkge1xuICAgIH1cbiAgICBOb29wTWV0ZXJQcm92aWRlci5wcm90b3R5cGUuZ2V0TWV0ZXIgPSBmdW5jdGlvbiAoX25hbWUsIF92ZXJzaW9uLCBfb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gTk9PUF9NRVRFUjtcbiAgICB9O1xuICAgIHJldHVybiBOb29wTWV0ZXJQcm92aWRlcjtcbn0oKSk7XG5leHBvcnQgeyBOb29wTWV0ZXJQcm92aWRlciB9O1xuZXhwb3J0IHZhciBOT09QX01FVEVSX1BST1ZJREVSID0gbmV3IE5vb3BNZXRlclByb3ZpZGVyKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob29wTWV0ZXJQcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiX05vb3BNZXRlciIsInJlcXVpcmUiLCJOb29wTWV0ZXJQcm92aWRlciIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJnZXRNZXRlciIsIl9uYW1lIiwiX3ZlcnNpb24iLCJfb3B0aW9ucyIsIk5PT1BfTUVURVIiLCJOT09QX01FVEVSX1BST1ZJREVSIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports._globalThis = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/core too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nvar _globalThis = exports._globalThis = typeof globalThis === 'object' ? globalThis : typeof self === 'object' ? self :  false ? 0 : typeof __webpack_require__.g === 'object' ? __webpack_require__.g : {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcGxhdGZvcm0vYnJvd3Nlci9nbG9iYWxUaGlzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBSUEsV0FBVyxHQUFBQyxtQkFBQSxHQUFHLE9BQU9DLFVBQVUsS0FBSyxRQUFRLEdBQ2pEQSxVQUFVLEdBQ1YsT0FBT0MsSUFBSSxLQUFLLFFBQVEsR0FDcEJBLElBQUksR0FDSixTQUNJQyxDQUFNLEdBQ04sT0FBT0MscUJBQU0sS0FBSyxRQUFRLEdBQ3RCQSxxQkFBTSxHQUNOLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9wbGF0Zm9ybS9icm93c2VyL2dsb2JhbFRoaXMuanM/ZTA1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gVXBkYXRlcyB0byB0aGlzIGZpbGUgc2hvdWxkIGFsc28gYmUgcmVwbGljYXRlZCB0byBAb3BlbnRlbGVtZXRyeS9jb3JlIHRvby5cbi8qKlxuICogLSBnbG9iYWxUaGlzIChOZXcgc3RhbmRhcmQpXG4gKiAtIHNlbGYgKFdpbGwgcmV0dXJuIHRoZSBjdXJyZW50IHdpbmRvdyBpbnN0YW5jZSBmb3Igc3VwcG9ydGVkIGJyb3dzZXJzKVxuICogLSB3aW5kb3cgKGZhbGxiYWNrIGZvciBvbGRlciBicm93c2VyIGltcGxlbWVudGF0aW9ucylcbiAqIC0gZ2xvYmFsIChOb2RlSlMgaW1wbGVtZW50YXRpb24pXG4gKiAtIDxvYmplY3Q+IChXaGVuIGFsbCBlbHNlIGZhaWxzKVxuICovXG4vKiogb25seSBnbG9iYWxzIHRoYXQgY29tbW9uIHRvIG5vZGUgYW5kIGJyb3dzZXJzIGFyZSBhbGxvd2VkICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9lcy1idWlsdGlucywgbm8tdW5kZWZcbmV4cG9ydCB2YXIgX2dsb2JhbFRoaXMgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCdcbiAgICA/IGdsb2JhbFRoaXNcbiAgICA6IHR5cGVvZiBzZWxmID09PSAnb2JqZWN0J1xuICAgICAgICA/IHNlbGZcbiAgICAgICAgOiB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgPyB3aW5kb3dcbiAgICAgICAgICAgIDogdHlwZW9mIGdsb2JhbCA9PT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICA/IGdsb2JhbFxuICAgICAgICAgICAgICAgIDoge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxUaGlzLmpzLm1hcCJdLCJuYW1lcyI6WyJfZ2xvYmFsVGhpcyIsImV4cG9ydHMiLCJnbG9iYWxUaGlzIiwic2VsZiIsIndpbmRvdyIsImdsb2JhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/platform/browser/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/platform/browser/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _globalThis = __webpack_require__(/*! ./globalThis */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js\");\nObject.keys(_globalThis).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _globalThis[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _globalThis[key];\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcGxhdGZvcm0vYnJvd3Nlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQWVBLElBQUFBLFdBQUEsR0FBQUMsbUJBQUE7QUFBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFILFdBQUEsRUFBQUksT0FBQSxXQUFBQyxHQUFBO0VBQUEsSUFBQUEsR0FBQSxrQkFBQUEsR0FBQTtFQUFBLElBQUFBLEdBQUEsSUFBQUMsT0FBQSxJQUFBQSxPQUFBLENBQUFELEdBQUEsTUFBQUwsV0FBQSxDQUFBSyxHQUFBO0VBQUFILE1BQUEsQ0FBQUssY0FBQSxDQUFBRCxPQUFBLEVBQUFELEdBQUE7SUFBQUcsVUFBQTtJQUFBQyxHQUFBLFdBQUFBLENBQUE7TUFBQSxPQUFBVCxXQUFBLENBQUFLLEdBQUE7SUFBQTtFQUFBO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcGxhdGZvcm0vYnJvd3Nlci9pbmRleC5qcz9jNTQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgKiBmcm9tICcuL2dsb2JhbFRoaXMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9nbG9iYWxUaGlzIiwicmVxdWlyZSIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwiZXhwb3J0cyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/platform/browser/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation-api.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation-api.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.propagation = void 0;\nvar _propagation = __webpack_require__(/*! ./api/propagation */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/propagation.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for propagation API */\nvar propagation = exports.propagation = _propagation.PropagationAPI.getInstance();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcHJvcGFnYXRpb24tYXBpLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQWlCQSxJQUFBQSxZQUFBLEdBQUFDLG1CQUFBO0FBakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDTyxJQUFJQyxXQUFXLEdBQUFDLG1CQUFBLEdBQUdDLDJCQUFjLENBQUNDLFdBQVcsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3Byb3BhZ2F0aW9uLWFwaS5qcz9lZWE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBTcGxpdCBtb2R1bGUtbGV2ZWwgdmFyaWFibGUgZGVmaW5pdGlvbiBpbnRvIHNlcGFyYXRlIGZpbGVzIHRvIGFsbG93XG4vLyB0cmVlLXNoYWtpbmcgb24gZWFjaCBhcGkgaW5zdGFuY2UuXG5pbXBvcnQgeyBQcm9wYWdhdGlvbkFQSSB9IGZyb20gJy4vYXBpL3Byb3BhZ2F0aW9uJztcbi8qKiBFbnRyeXBvaW50IGZvciBwcm9wYWdhdGlvbiBBUEkgKi9cbmV4cG9ydCB2YXIgcHJvcGFnYXRpb24gPSBQcm9wYWdhdGlvbkFQSS5nZXRJbnN0YW5jZSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGFnYXRpb24tYXBpLmpzLm1hcCJdLCJuYW1lcyI6WyJfcHJvcGFnYXRpb24iLCJyZXF1aXJlIiwicHJvcGFnYXRpb24iLCJleHBvcnRzIiwiUHJvcGFnYXRpb25BUEkiLCJnZXRJbnN0YW5jZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation-api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NoopTextMapPropagator = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = exports.NoopTextMapPropagator = /** @class */function () {\n  function NoopTextMapPropagator() {}\n  /** Noop inject function does nothing */\n  NoopTextMapPropagator.prototype.inject = function (_context, _carrier) {};\n  /** Noop extract function does nothing and returns the input context */\n  NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n    return context;\n  };\n  NoopTextMapPropagator.prototype.fields = function () {\n    return [];\n  };\n  return NoopTextMapPropagator;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcHJvcGFnYXRpb24vTm9vcFRleHRNYXBQcm9wYWdhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlBLHFCQUFxQixHQUFBQyw2QkFBQSxHQUFHLGFBQWUsWUFBWTtFQUNuRCxTQUFTRCxxQkFBcUJBLENBQUEsRUFBRyxDQUNqQztFQUNBO0VBQ0FBLHFCQUFxQixDQUFDRSxTQUFTLENBQUNDLE1BQU0sR0FBRyxVQUFVQyxRQUFRLEVBQUVDLFFBQVEsRUFBRSxDQUFFLENBQUM7RUFDMUU7RUFDQUwscUJBQXFCLENBQUNFLFNBQVMsQ0FBQ0ksT0FBTyxHQUFHLFVBQVVDLE9BQU8sRUFBRUYsUUFBUSxFQUFFO0lBQ25FLE9BQU9FLE9BQU87RUFDbEIsQ0FBQztFQUNEUCxxQkFBcUIsQ0FBQ0UsU0FBUyxDQUFDTSxNQUFNLEdBQUcsWUFBWTtJQUNqRCxPQUFPLEVBQUU7RUFDYixDQUFDO0VBQ0QsT0FBT1IscUJBQXFCO0FBQ2hDLENBQUMsQ0FBQyxDQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3Byb3BhZ2F0aW9uL05vb3BUZXh0TWFwUHJvcGFnYXRvci5qcz81MDA1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIE5vLW9wIGltcGxlbWVudGF0aW9ucyBvZiB7QGxpbmsgVGV4dE1hcFByb3BhZ2F0b3J9LlxuICovXG52YXIgTm9vcFRleHRNYXBQcm9wYWdhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5vb3BUZXh0TWFwUHJvcGFnYXRvcigpIHtcbiAgICB9XG4gICAgLyoqIE5vb3AgaW5qZWN0IGZ1bmN0aW9uIGRvZXMgbm90aGluZyAqL1xuICAgIE5vb3BUZXh0TWFwUHJvcGFnYXRvci5wcm90b3R5cGUuaW5qZWN0ID0gZnVuY3Rpb24gKF9jb250ZXh0LCBfY2FycmllcikgeyB9O1xuICAgIC8qKiBOb29wIGV4dHJhY3QgZnVuY3Rpb24gZG9lcyBub3RoaW5nIGFuZCByZXR1cm5zIHRoZSBpbnB1dCBjb250ZXh0ICovXG4gICAgTm9vcFRleHRNYXBQcm9wYWdhdG9yLnByb3RvdHlwZS5leHRyYWN0ID0gZnVuY3Rpb24gKGNvbnRleHQsIF9jYXJyaWVyKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH07XG4gICAgTm9vcFRleHRNYXBQcm9wYWdhdG9yLnByb3RvdHlwZS5maWVsZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9O1xuICAgIHJldHVybiBOb29wVGV4dE1hcFByb3BhZ2F0b3I7XG59KCkpO1xuZXhwb3J0IHsgTm9vcFRleHRNYXBQcm9wYWdhdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob29wVGV4dE1hcFByb3BhZ2F0b3IuanMubWFwIl0sIm5hbWVzIjpbIk5vb3BUZXh0TWFwUHJvcGFnYXRvciIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJpbmplY3QiLCJfY29udGV4dCIsIl9jYXJyaWVyIiwiZXh0cmFjdCIsImNvbnRleHQiLCJmaWVsZHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.defaultTextMapSetter = exports.defaultTextMapGetter = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar defaultTextMapGetter = exports.defaultTextMapGetter = {\n  get: function (carrier, key) {\n    if (carrier == null) {\n      return undefined;\n    }\n    return carrier[key];\n  },\n  keys: function (carrier) {\n    if (carrier == null) {\n      return [];\n    }\n    return Object.keys(carrier);\n  }\n};\nvar defaultTextMapSetter = exports.defaultTextMapSetter = {\n  set: function (carrier, key, value) {\n    if (carrier == null) {\n      return;\n    }\n    carrier[key] = value;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vcHJvcGFnYXRpb24vVGV4dE1hcFByb3BhZ2F0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBSUEsb0JBQW9CLEdBQUFDLDRCQUFBLEdBQUc7RUFDOUJDLEdBQUcsRUFBRSxTQUFBQSxDQUFVQyxPQUFPLEVBQUVDLEdBQUcsRUFBRTtJQUN6QixJQUFJRCxPQUFPLElBQUksSUFBSSxFQUFFO01BQ2pCLE9BQU9FLFNBQVM7SUFDcEI7SUFDQSxPQUFPRixPQUFPLENBQUNDLEdBQUcsQ0FBQztFQUN2QixDQUFDO0VBQ0RFLElBQUksRUFBRSxTQUFBQSxDQUFVSCxPQUFPLEVBQUU7SUFDckIsSUFBSUEsT0FBTyxJQUFJLElBQUksRUFBRTtNQUNqQixPQUFPLEVBQUU7SUFDYjtJQUNBLE9BQU9JLE1BQU0sQ0FBQ0QsSUFBSSxDQUFDSCxPQUFPLENBQUM7RUFDL0I7QUFDSixDQUFDO0FBQ00sSUFBSUssb0JBQW9CLEdBQUFQLDRCQUFBLEdBQUc7RUFDOUJRLEdBQUcsRUFBRSxTQUFBQSxDQUFVTixPQUFPLEVBQUVDLEdBQUcsRUFBRU0sS0FBSyxFQUFFO0lBQ2hDLElBQUlQLE9BQU8sSUFBSSxJQUFJLEVBQUU7TUFDakI7SUFDSjtJQUNBQSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxHQUFHTSxLQUFLO0VBQ3hCO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS9wcm9wYWdhdGlvbi9UZXh0TWFwUHJvcGFnYXRvci5qcz80NGFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5leHBvcnQgdmFyIGRlZmF1bHRUZXh0TWFwR2V0dGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gKGNhcnJpZXIsIGtleSkge1xuICAgICAgICBpZiAoY2FycmllciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYXJyaWVyW2tleV07XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiAoY2Fycmllcikge1xuICAgICAgICBpZiAoY2FycmllciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGNhcnJpZXIpO1xuICAgIH0sXG59O1xuZXhwb3J0IHZhciBkZWZhdWx0VGV4dE1hcFNldHRlciA9IHtcbiAgICBzZXQ6IGZ1bmN0aW9uIChjYXJyaWVyLCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChjYXJyaWVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXJyaWVyW2tleV0gPSB2YWx1ZTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRleHRNYXBQcm9wYWdhdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0VGV4dE1hcEdldHRlciIsImV4cG9ydHMiLCJnZXQiLCJjYXJyaWVyIiwia2V5IiwidW5kZWZpbmVkIiwia2V5cyIsIk9iamVjdCIsImRlZmF1bHRUZXh0TWFwU2V0dGVyIiwic2V0IiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace-api.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.trace = void 0;\nvar _trace = __webpack_require__(/*! ./api/trace */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/trace.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for trace API */\nvar trace = exports.trace = _trace.TraceAPI.getInstance();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UtYXBpLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQWlCQSxJQUFBQSxNQUFBLEdBQUFDLG1CQUFBO0FBakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDTyxJQUFJQyxLQUFLLEdBQUFDLGFBQUEsR0FBR0MsZUFBUSxDQUFDQyxXQUFXLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS90cmFjZS1hcGkuanM/NzQwMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gU3BsaXQgbW9kdWxlLWxldmVsIHZhcmlhYmxlIGRlZmluaXRpb24gaW50byBzZXBhcmF0ZSBmaWxlcyB0byBhbGxvd1xuLy8gdHJlZS1zaGFraW5nIG9uIGVhY2ggYXBpIGluc3RhbmNlLlxuaW1wb3J0IHsgVHJhY2VBUEkgfSBmcm9tICcuL2FwaS90cmFjZSc7XG4vKiogRW50cnlwb2ludCBmb3IgdHJhY2UgQVBJICovXG5leHBvcnQgdmFyIHRyYWNlID0gVHJhY2VBUEkuZ2V0SW5zdGFuY2UoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNlLWFwaS5qcy5tYXAiXSwibmFtZXMiOlsiX3RyYWNlIiwicmVxdWlyZSIsInRyYWNlIiwiZXhwb3J0cyIsIlRyYWNlQVBJIiwiZ2V0SW5zdGFuY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace-api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NonRecordingSpan = void 0;\nvar _invalidSpanConstants = __webpack_require__(/*! ./invalid-span-constants */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = exports.NonRecordingSpan = /** @class */function () {\n  function NonRecordingSpan(_spanContext) {\n    if (_spanContext === void 0) {\n      _spanContext = _invalidSpanConstants.INVALID_SPAN_CONTEXT;\n    }\n    this._spanContext = _spanContext;\n  }\n  // Returns a SpanContext.\n  NonRecordingSpan.prototype.spanContext = function () {\n    return this._spanContext;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n    return this;\n  };\n  NonRecordingSpan.prototype.addLink = function (_link) {\n    return this;\n  };\n  NonRecordingSpan.prototype.addLinks = function (_links) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setStatus = function (_status) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.updateName = function (_name) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.end = function (_endTime) {};\n  // isRecording always returns false for NonRecordingSpan.\n  NonRecordingSpan.prototype.isRecording = function () {\n    return false;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.recordException = function (_exception, _time) {};\n  return NonRecordingSpan;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvTm9uUmVjb3JkaW5nU3Bhbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFlQSxJQUFBQSxxQkFBQSxHQUFBQyxtQkFBQTtBQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsZ0JBQWdCLEdBQUFDLHdCQUFBLEdBQUcsYUFBZSxZQUFZO0VBQzlDLFNBQVNELGdCQUFnQkEsQ0FBQ0UsWUFBWSxFQUFFO0lBQ3BDLElBQUlBLFlBQVksS0FBSyxLQUFLLENBQUMsRUFBRTtNQUFFQSxZQUFZLEdBQUdDLDBDQUFvQjtJQUFFO0lBQ3BFLElBQUksQ0FBQ0QsWUFBWSxHQUFHQSxZQUFZO0VBQ3BDO0VBQ0E7RUFDQUYsZ0JBQWdCLENBQUNJLFNBQVMsQ0FBQ0MsV0FBVyxHQUFHLFlBQVk7SUFDakQsT0FBTyxJQUFJLENBQUNILFlBQVk7RUFDNUIsQ0FBQztFQUNEO0VBQ0FGLGdCQUFnQixDQUFDSSxTQUFTLENBQUNFLFlBQVksR0FBRyxVQUFVQyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtJQUM5RCxPQUFPLElBQUk7RUFDZixDQUFDO0VBQ0Q7RUFDQVIsZ0JBQWdCLENBQUNJLFNBQVMsQ0FBQ0ssYUFBYSxHQUFHLFVBQVVDLFdBQVcsRUFBRTtJQUM5RCxPQUFPLElBQUk7RUFDZixDQUFDO0VBQ0Q7RUFDQVYsZ0JBQWdCLENBQUNJLFNBQVMsQ0FBQ08sUUFBUSxHQUFHLFVBQVVDLEtBQUssRUFBRUYsV0FBVyxFQUFFO0lBQ2hFLE9BQU8sSUFBSTtFQUNmLENBQUM7RUFDRFYsZ0JBQWdCLENBQUNJLFNBQVMsQ0FBQ1MsT0FBTyxHQUFHLFVBQVVDLEtBQUssRUFBRTtJQUNsRCxPQUFPLElBQUk7RUFDZixDQUFDO0VBQ0RkLGdCQUFnQixDQUFDSSxTQUFTLENBQUNXLFFBQVEsR0FBRyxVQUFVQyxNQUFNLEVBQUU7SUFDcEQsT0FBTyxJQUFJO0VBQ2YsQ0FBQztFQUNEO0VBQ0FoQixnQkFBZ0IsQ0FBQ0ksU0FBUyxDQUFDYSxTQUFTLEdBQUcsVUFBVUMsT0FBTyxFQUFFO0lBQ3RELE9BQU8sSUFBSTtFQUNmLENBQUM7RUFDRDtFQUNBbEIsZ0JBQWdCLENBQUNJLFNBQVMsQ0FBQ2UsVUFBVSxHQUFHLFVBQVVQLEtBQUssRUFBRTtJQUNyRCxPQUFPLElBQUk7RUFDZixDQUFDO0VBQ0Q7RUFDQVosZ0JBQWdCLENBQUNJLFNBQVMsQ0FBQ2dCLEdBQUcsR0FBRyxVQUFVQyxRQUFRLEVBQUUsQ0FBRSxDQUFDO0VBQ3hEO0VBQ0FyQixnQkFBZ0IsQ0FBQ0ksU0FBUyxDQUFDa0IsV0FBVyxHQUFHLFlBQVk7SUFDakQsT0FBTyxLQUFLO0VBQ2hCLENBQUM7RUFDRDtFQUNBdEIsZ0JBQWdCLENBQUNJLFNBQVMsQ0FBQ21CLGVBQWUsR0FBRyxVQUFVQyxVQUFVLEVBQUVDLEtBQUssRUFBRSxDQUFFLENBQUM7RUFDN0UsT0FBT3pCLGdCQUFnQjtBQUMzQixDQUFDLENBQUMsQ0FBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS90cmFjZS9Ob25SZWNvcmRpbmdTcGFuLmpzP2ZlOTciXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IElOVkFMSURfU1BBTl9DT05URVhUIH0gZnJvbSAnLi9pbnZhbGlkLXNwYW4tY29uc3RhbnRzJztcbi8qKlxuICogVGhlIE5vblJlY29yZGluZ1NwYW4gaXMgdGhlIGRlZmF1bHQge0BsaW5rIFNwYW59IHRoYXQgaXMgdXNlZCB3aGVuIG5vIFNwYW5cbiAqIGltcGxlbWVudGF0aW9uIGlzIGF2YWlsYWJsZS4gQWxsIG9wZXJhdGlvbnMgYXJlIG5vLW9wIGluY2x1ZGluZyBjb250ZXh0XG4gKiBwcm9wYWdhdGlvbi5cbiAqL1xudmFyIE5vblJlY29yZGluZ1NwYW4gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9uUmVjb3JkaW5nU3Bhbihfc3BhbkNvbnRleHQpIHtcbiAgICAgICAgaWYgKF9zcGFuQ29udGV4dCA9PT0gdm9pZCAwKSB7IF9zcGFuQ29udGV4dCA9IElOVkFMSURfU1BBTl9DT05URVhUOyB9XG4gICAgICAgIHRoaXMuX3NwYW5Db250ZXh0ID0gX3NwYW5Db250ZXh0O1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgU3BhbkNvbnRleHQuXG4gICAgTm9uUmVjb3JkaW5nU3Bhbi5wcm90b3R5cGUuc3BhbkNvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zcGFuQ29udGV4dDtcbiAgICB9O1xuICAgIC8vIEJ5IGRlZmF1bHQgZG9lcyBub3RoaW5nXG4gICAgTm9uUmVjb3JkaW5nU3Bhbi5wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKF9rZXksIF92YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8vIEJ5IGRlZmF1bHQgZG9lcyBub3RoaW5nXG4gICAgTm9uUmVjb3JkaW5nU3Bhbi5wcm90b3R5cGUuc2V0QXR0cmlidXRlcyA9IGZ1bmN0aW9uIChfYXR0cmlidXRlcykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8vIEJ5IGRlZmF1bHQgZG9lcyBub3RoaW5nXG4gICAgTm9uUmVjb3JkaW5nU3Bhbi5wcm90b3R5cGUuYWRkRXZlbnQgPSBmdW5jdGlvbiAoX25hbWUsIF9hdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgTm9uUmVjb3JkaW5nU3Bhbi5wcm90b3R5cGUuYWRkTGluayA9IGZ1bmN0aW9uIChfbGluaykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLmFkZExpbmtzID0gZnVuY3Rpb24gKF9saW5rcykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8vIEJ5IGRlZmF1bHQgZG9lcyBub3RoaW5nXG4gICAgTm9uUmVjb3JkaW5nU3Bhbi5wcm90b3R5cGUuc2V0U3RhdHVzID0gZnVuY3Rpb24gKF9zdGF0dXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvLyBCeSBkZWZhdWx0IGRvZXMgbm90aGluZ1xuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLnVwZGF0ZU5hbWUgPSBmdW5jdGlvbiAoX25hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvLyBCeSBkZWZhdWx0IGRvZXMgbm90aGluZ1xuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChfZW5kVGltZSkgeyB9O1xuICAgIC8vIGlzUmVjb3JkaW5nIGFsd2F5cyByZXR1cm5zIGZhbHNlIGZvciBOb25SZWNvcmRpbmdTcGFuLlxuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLmlzUmVjb3JkaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvLyBCeSBkZWZhdWx0IGRvZXMgbm90aGluZ1xuICAgIE5vblJlY29yZGluZ1NwYW4ucHJvdG90eXBlLnJlY29yZEV4Y2VwdGlvbiA9IGZ1bmN0aW9uIChfZXhjZXB0aW9uLCBfdGltZSkgeyB9O1xuICAgIHJldHVybiBOb25SZWNvcmRpbmdTcGFuO1xufSgpKTtcbmV4cG9ydCB7IE5vblJlY29yZGluZ1NwYW4gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vblJlY29yZGluZ1NwYW4uanMubWFwIl0sIm5hbWVzIjpbIl9pbnZhbGlkU3BhbkNvbnN0YW50cyIsInJlcXVpcmUiLCJOb25SZWNvcmRpbmdTcGFuIiwiZXhwb3J0cyIsIl9zcGFuQ29udGV4dCIsIklOVkFMSURfU1BBTl9DT05URVhUIiwicHJvdG90eXBlIiwic3BhbkNvbnRleHQiLCJzZXRBdHRyaWJ1dGUiLCJfa2V5IiwiX3ZhbHVlIiwic2V0QXR0cmlidXRlcyIsIl9hdHRyaWJ1dGVzIiwiYWRkRXZlbnQiLCJfbmFtZSIsImFkZExpbmsiLCJfbGluayIsImFkZExpbmtzIiwiX2xpbmtzIiwic2V0U3RhdHVzIiwiX3N0YXR1cyIsInVwZGF0ZU5hbWUiLCJlbmQiLCJfZW5kVGltZSIsImlzUmVjb3JkaW5nIiwicmVjb3JkRXhjZXB0aW9uIiwiX2V4Y2VwdGlvbiIsIl90aW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NoopTracer = void 0;\nvar _context = __webpack_require__(/*! ../api/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js\");\nvar _contextUtils = __webpack_require__(/*! ../trace/context-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\");\nvar _NonRecordingSpan = __webpack_require__(/*! ./NonRecordingSpan */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\nvar _spancontextUtils = __webpack_require__(/*! ./spancontext-utils */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar contextApi = _context.ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = exports.NoopTracer = /** @class */function () {\n  function NoopTracer() {}\n  // startSpan starts a noop span.\n  NoopTracer.prototype.startSpan = function (name, options, context) {\n    if (context === void 0) {\n      context = contextApi.active();\n    }\n    var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n    if (root) {\n      return new _NonRecordingSpan.NonRecordingSpan();\n    }\n    var parentFromContext = context && (0, _contextUtils.getSpanContext)(context);\n    if (isSpanContext(parentFromContext) && (0, _spancontextUtils.isSpanContextValid)(parentFromContext)) {\n      return new _NonRecordingSpan.NonRecordingSpan(parentFromContext);\n    } else {\n      return new _NonRecordingSpan.NonRecordingSpan();\n    }\n  };\n  NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n    var opts;\n    var ctx;\n    var fn;\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2;\n    } else if (arguments.length === 3) {\n      opts = arg2;\n      fn = arg3;\n    } else {\n      opts = arg2;\n      ctx = arg3;\n      fn = arg4;\n    }\n    var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n    var span = this.startSpan(name, opts, parentContext);\n    var contextWithSpanSet = (0, _contextUtils.setSpan)(parentContext, span);\n    return contextApi.with(contextWithSpanSet, fn, undefined, span);\n  };\n  return NoopTracer;\n}();\nfunction isSpanContext(spanContext) {\n  return typeof spanContext === 'object' && typeof spanContext['spanId'] === 'string' && typeof spanContext['traceId'] === 'string' && typeof spanContext['traceFlags'] === 'number';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvTm9vcFRyYWNlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFlQSxJQUFBQSxRQUFBLEdBQUFDLG1CQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRCxtQkFBQTtBQUNBLElBQUFFLGlCQUFBLEdBQUFGLG1CQUFBO0FBQ0EsSUFBQUcsaUJBQUEsR0FBQUgsbUJBQUE7QUFsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUtBLElBQUlJLFVBQVUsR0FBR0MsbUJBQVUsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7QUFDekM7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsVUFBVSxHQUFBQyxrQkFBQSxHQUFHLGFBQWUsWUFBWTtFQUN4QyxTQUFTRCxVQUFVQSxDQUFBLEVBQUcsQ0FDdEI7RUFDQTtFQUNBQSxVQUFVLENBQUNFLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLFVBQVVDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUU7SUFDL0QsSUFBSUEsT0FBTyxLQUFLLEtBQUssQ0FBQyxFQUFFO01BQUVBLE9BQU8sR0FBR1QsVUFBVSxDQUFDVSxNQUFNLENBQUMsQ0FBQztJQUFFO0lBQ3pELElBQUlDLElBQUksR0FBR0MsT0FBTyxDQUFDSixPQUFPLEtBQUssSUFBSSxJQUFJQSxPQUFPLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLE9BQU8sQ0FBQ0csSUFBSSxDQUFDO0lBQ2xGLElBQUlBLElBQUksRUFBRTtNQUNOLE9BQU8sSUFBSUUsa0NBQWdCLENBQUMsQ0FBQztJQUNqQztJQUNBLElBQUlDLGlCQUFpQixHQUFHTCxPQUFPLElBQUksSUFBQU0sNEJBQWMsRUFBQ04sT0FBTyxDQUFDO0lBQzFELElBQUlPLGFBQWEsQ0FBQ0YsaUJBQWlCLENBQUMsSUFDaEMsSUFBQUcsb0NBQWtCLEVBQUNILGlCQUFpQixDQUFDLEVBQUU7TUFDdkMsT0FBTyxJQUFJRCxrQ0FBZ0IsQ0FBQ0MsaUJBQWlCLENBQUM7SUFDbEQsQ0FBQyxNQUNJO01BQ0QsT0FBTyxJQUFJRCxrQ0FBZ0IsQ0FBQyxDQUFDO0lBQ2pDO0VBQ0osQ0FBQztFQUNEVixVQUFVLENBQUNFLFNBQVMsQ0FBQ2EsZUFBZSxHQUFHLFVBQVVYLElBQUksRUFBRVksSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRTtJQUNyRSxJQUFJQyxJQUFJO0lBQ1IsSUFBSUMsR0FBRztJQUNQLElBQUlDLEVBQUU7SUFDTixJQUFJQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLEVBQUU7TUFDdEI7SUFDSixDQUFDLE1BQ0ksSUFBSUQsU0FBUyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO01BQzdCRixFQUFFLEdBQUdMLElBQUk7SUFDYixDQUFDLE1BQ0ksSUFBSU0sU0FBUyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO01BQzdCSixJQUFJLEdBQUdILElBQUk7TUFDWEssRUFBRSxHQUFHSixJQUFJO0lBQ2IsQ0FBQyxNQUNJO01BQ0RFLElBQUksR0FBR0gsSUFBSTtNQUNYSSxHQUFHLEdBQUdILElBQUk7TUFDVkksRUFBRSxHQUFHSCxJQUFJO0lBQ2I7SUFDQSxJQUFJTSxhQUFhLEdBQUdKLEdBQUcsS0FBSyxJQUFJLElBQUlBLEdBQUcsS0FBSyxLQUFLLENBQUMsR0FBR0EsR0FBRyxHQUFHdkIsVUFBVSxDQUFDVSxNQUFNLENBQUMsQ0FBQztJQUM5RSxJQUFJa0IsSUFBSSxHQUFHLElBQUksQ0FBQ3RCLFNBQVMsQ0FBQ0MsSUFBSSxFQUFFZSxJQUFJLEVBQUVLLGFBQWEsQ0FBQztJQUNwRCxJQUFJRSxrQkFBa0IsR0FBRyxJQUFBQyxxQkFBTyxFQUFDSCxhQUFhLEVBQUVDLElBQUksQ0FBQztJQUNyRCxPQUFPNUIsVUFBVSxDQUFDK0IsSUFBSSxDQUFDRixrQkFBa0IsRUFBRUwsRUFBRSxFQUFFUSxTQUFTLEVBQUVKLElBQUksQ0FBQztFQUNuRSxDQUFDO0VBQ0QsT0FBT3pCLFVBQVU7QUFDckIsQ0FBQyxDQUFDLENBQUU7QUFFSixTQUFTYSxhQUFhQSxDQUFDaUIsV0FBVyxFQUFFO0VBQ2hDLE9BQVEsT0FBT0EsV0FBVyxLQUFLLFFBQVEsSUFDbkMsT0FBT0EsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLFFBQVEsSUFDekMsT0FBT0EsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLFFBQVEsSUFDMUMsT0FBT0EsV0FBVyxDQUFDLFlBQVksQ0FBQyxLQUFLLFFBQVE7QUFDckQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvTm9vcFRyYWNlci5qcz8xNTMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBDb250ZXh0QVBJIH0gZnJvbSAnLi4vYXBpL2NvbnRleHQnO1xuaW1wb3J0IHsgZ2V0U3BhbkNvbnRleHQsIHNldFNwYW4gfSBmcm9tICcuLi90cmFjZS9jb250ZXh0LXV0aWxzJztcbmltcG9ydCB7IE5vblJlY29yZGluZ1NwYW4gfSBmcm9tICcuL05vblJlY29yZGluZ1NwYW4nO1xuaW1wb3J0IHsgaXNTcGFuQ29udGV4dFZhbGlkIH0gZnJvbSAnLi9zcGFuY29udGV4dC11dGlscyc7XG52YXIgY29udGV4dEFwaSA9IENvbnRleHRBUEkuZ2V0SW5zdGFuY2UoKTtcbi8qKlxuICogTm8tb3AgaW1wbGVtZW50YXRpb25zIG9mIHtAbGluayBUcmFjZXJ9LlxuICovXG52YXIgTm9vcFRyYWNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb29wVHJhY2VyKCkge1xuICAgIH1cbiAgICAvLyBzdGFydFNwYW4gc3RhcnRzIGEgbm9vcCBzcGFuLlxuICAgIE5vb3BUcmFjZXIucHJvdG90eXBlLnN0YXJ0U3BhbiA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IGNvbnRleHRBcGkuYWN0aXZlKCk7IH1cbiAgICAgICAgdmFyIHJvb3QgPSBCb29sZWFuKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yb290KTtcbiAgICAgICAgaWYgKHJvb3QpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9uUmVjb3JkaW5nU3BhbigpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJlbnRGcm9tQ29udGV4dCA9IGNvbnRleHQgJiYgZ2V0U3BhbkNvbnRleHQoY29udGV4dCk7XG4gICAgICAgIGlmIChpc1NwYW5Db250ZXh0KHBhcmVudEZyb21Db250ZXh0KSAmJlxuICAgICAgICAgICAgaXNTcGFuQ29udGV4dFZhbGlkKHBhcmVudEZyb21Db250ZXh0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb25SZWNvcmRpbmdTcGFuKHBhcmVudEZyb21Db250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9uUmVjb3JkaW5nU3BhbigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBOb29wVHJhY2VyLnByb3RvdHlwZS5zdGFydEFjdGl2ZVNwYW4gPSBmdW5jdGlvbiAobmFtZSwgYXJnMiwgYXJnMywgYXJnNCkge1xuICAgICAgICB2YXIgb3B0cztcbiAgICAgICAgdmFyIGN0eDtcbiAgICAgICAgdmFyIGZuO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBmbiA9IGFyZzI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgb3B0cyA9IGFyZzI7XG4gICAgICAgICAgICBmbiA9IGFyZzM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRzID0gYXJnMjtcbiAgICAgICAgICAgIGN0eCA9IGFyZzM7XG4gICAgICAgICAgICBmbiA9IGFyZzQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcmVudENvbnRleHQgPSBjdHggIT09IG51bGwgJiYgY3R4ICE9PSB2b2lkIDAgPyBjdHggOiBjb250ZXh0QXBpLmFjdGl2ZSgpO1xuICAgICAgICB2YXIgc3BhbiA9IHRoaXMuc3RhcnRTcGFuKG5hbWUsIG9wdHMsIHBhcmVudENvbnRleHQpO1xuICAgICAgICB2YXIgY29udGV4dFdpdGhTcGFuU2V0ID0gc2V0U3BhbihwYXJlbnRDb250ZXh0LCBzcGFuKTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHRBcGkud2l0aChjb250ZXh0V2l0aFNwYW5TZXQsIGZuLCB1bmRlZmluZWQsIHNwYW4pO1xuICAgIH07XG4gICAgcmV0dXJuIE5vb3BUcmFjZXI7XG59KCkpO1xuZXhwb3J0IHsgTm9vcFRyYWNlciB9O1xuZnVuY3Rpb24gaXNTcGFuQ29udGV4dChzcGFuQ29udGV4dCkge1xuICAgIHJldHVybiAodHlwZW9mIHNwYW5Db250ZXh0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB0eXBlb2Ygc3BhbkNvbnRleHRbJ3NwYW5JZCddID09PSAnc3RyaW5nJyAmJlxuICAgICAgICB0eXBlb2Ygc3BhbkNvbnRleHRbJ3RyYWNlSWQnXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgdHlwZW9mIHNwYW5Db250ZXh0Wyd0cmFjZUZsYWdzJ10gPT09ICdudW1iZXInKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vb3BUcmFjZXIuanMubWFwIl0sIm5hbWVzIjpbIl9jb250ZXh0IiwicmVxdWlyZSIsIl9jb250ZXh0VXRpbHMiLCJfTm9uUmVjb3JkaW5nU3BhbiIsIl9zcGFuY29udGV4dFV0aWxzIiwiY29udGV4dEFwaSIsIkNvbnRleHRBUEkiLCJnZXRJbnN0YW5jZSIsIk5vb3BUcmFjZXIiLCJleHBvcnRzIiwicHJvdG90eXBlIiwic3RhcnRTcGFuIiwibmFtZSIsIm9wdGlvbnMiLCJjb250ZXh0IiwiYWN0aXZlIiwicm9vdCIsIkJvb2xlYW4iLCJOb25SZWNvcmRpbmdTcGFuIiwicGFyZW50RnJvbUNvbnRleHQiLCJnZXRTcGFuQ29udGV4dCIsImlzU3BhbkNvbnRleHQiLCJpc1NwYW5Db250ZXh0VmFsaWQiLCJzdGFydEFjdGl2ZVNwYW4iLCJhcmcyIiwiYXJnMyIsImFyZzQiLCJvcHRzIiwiY3R4IiwiZm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwYXJlbnRDb250ZXh0Iiwic3BhbiIsImNvbnRleHRXaXRoU3BhblNldCIsInNldFNwYW4iLCJ3aXRoIiwidW5kZWZpbmVkIiwic3BhbkNvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.NoopTracerProvider = void 0;\nvar _NoopTracer = __webpack_require__(/*! ./NoopTracer */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = exports.NoopTracerProvider = /** @class */function () {\n  function NoopTracerProvider() {}\n  NoopTracerProvider.prototype.getTracer = function (_name, _version, _options) {\n    return new _NoopTracer.NoopTracer();\n  };\n  return NoopTracerProvider;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvTm9vcFRyYWNlclByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQWVBLElBQUFBLFdBQUEsR0FBQUMsbUJBQUE7QUFmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsa0JBQWtCLEdBQUFDLDBCQUFBLEdBQUcsYUFBZSxZQUFZO0VBQ2hELFNBQVNELGtCQUFrQkEsQ0FBQSxFQUFHLENBQzlCO0VBQ0FBLGtCQUFrQixDQUFDRSxTQUFTLENBQUNDLFNBQVMsR0FBRyxVQUFVQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFO0lBQzFFLE9BQU8sSUFBSUMsc0JBQVUsQ0FBQyxDQUFDO0VBQzNCLENBQUM7RUFDRCxPQUFPUCxrQkFBa0I7QUFDN0IsQ0FBQyxDQUFDLENBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvTm9vcFRyYWNlclByb3ZpZGVyLmpzPzAzMTIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IE5vb3BUcmFjZXIgfSBmcm9tICcuL05vb3BUcmFjZXInO1xuLyoqXG4gKiBBbiBpbXBsZW1lbnRhdGlvbiBvZiB0aGUge0BsaW5rIFRyYWNlclByb3ZpZGVyfSB3aGljaCByZXR1cm5zIGFuIGltcG90ZW50XG4gKiBUcmFjZXIgZm9yIGFsbCBjYWxscyB0byBgZ2V0VHJhY2VyYC5cbiAqXG4gKiBBbGwgb3BlcmF0aW9ucyBhcmUgbm8tb3AuXG4gKi9cbnZhciBOb29wVHJhY2VyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9vcFRyYWNlclByb3ZpZGVyKCkge1xuICAgIH1cbiAgICBOb29wVHJhY2VyUHJvdmlkZXIucHJvdG90eXBlLmdldFRyYWNlciA9IGZ1bmN0aW9uIChfbmFtZSwgX3ZlcnNpb24sIF9vcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTm9vcFRyYWNlcigpO1xuICAgIH07XG4gICAgcmV0dXJuIE5vb3BUcmFjZXJQcm92aWRlcjtcbn0oKSk7XG5leHBvcnQgeyBOb29wVHJhY2VyUHJvdmlkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vb3BUcmFjZXJQcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiX05vb3BUcmFjZXIiLCJyZXF1aXJlIiwiTm9vcFRyYWNlclByb3ZpZGVyIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsImdldFRyYWNlciIsIl9uYW1lIiwiX3ZlcnNpb24iLCJfb3B0aW9ucyIsIk5vb3BUcmFjZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ProxyTracer = void 0;\nvar _NoopTracer = __webpack_require__(/*! ./NoopTracer */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar NOOP_TRACER = new _NoopTracer.NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = exports.ProxyTracer = /** @class */function () {\n  function ProxyTracer(_provider, name, version, options) {\n    this._provider = _provider;\n    this.name = name;\n    this.version = version;\n    this.options = options;\n  }\n  ProxyTracer.prototype.startSpan = function (name, options, context) {\n    return this._getTracer().startSpan(name, options, context);\n  };\n  ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n    var tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  };\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  ProxyTracer.prototype._getTracer = function () {\n    if (this._delegate) {\n      return this._delegate;\n    }\n    var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n    this._delegate = tracer;\n    return this._delegate;\n  };\n  return ProxyTracer;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvUHJveHlUcmFjZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBZUEsSUFBQUEsV0FBQSxHQUFBQyxtQkFBQTtBQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQyxXQUFXLEdBQUcsSUFBSUMsc0JBQVUsQ0FBQyxDQUFDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLElBQUlDLFdBQVcsR0FBQUMsbUJBQUEsR0FBRyxhQUFlLFlBQVk7RUFDekMsU0FBU0QsV0FBV0EsQ0FBQ0UsU0FBUyxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0lBQ3BELElBQUksQ0FBQ0gsU0FBUyxHQUFHQSxTQUFTO0lBQzFCLElBQUksQ0FBQ0MsSUFBSSxHQUFHQSxJQUFJO0lBQ2hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0VBQzFCO0VBQ0FMLFdBQVcsQ0FBQ00sU0FBUyxDQUFDQyxTQUFTLEdBQUcsVUFBVUosSUFBSSxFQUFFRSxPQUFPLEVBQUVHLE9BQU8sRUFBRTtJQUNoRSxPQUFPLElBQUksQ0FBQ0MsVUFBVSxDQUFDLENBQUMsQ0FBQ0YsU0FBUyxDQUFDSixJQUFJLEVBQUVFLE9BQU8sRUFBRUcsT0FBTyxDQUFDO0VBQzlELENBQUM7RUFDRFIsV0FBVyxDQUFDTSxTQUFTLENBQUNJLGVBQWUsR0FBRyxVQUFVQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxHQUFHLEVBQUU7SUFDOUUsSUFBSUMsTUFBTSxHQUFHLElBQUksQ0FBQ04sVUFBVSxDQUFDLENBQUM7SUFDOUIsT0FBT08sT0FBTyxDQUFDQyxLQUFLLENBQUNGLE1BQU0sQ0FBQ0wsZUFBZSxFQUFFSyxNQUFNLEVBQUVHLFNBQVMsQ0FBQztFQUNuRSxDQUFDO0VBQ0Q7QUFDSjtBQUNBO0FBQ0E7RUFDSWxCLFdBQVcsQ0FBQ00sU0FBUyxDQUFDRyxVQUFVLEdBQUcsWUFBWTtJQUMzQyxJQUFJLElBQUksQ0FBQ1UsU0FBUyxFQUFFO01BQ2hCLE9BQU8sSUFBSSxDQUFDQSxTQUFTO0lBQ3pCO0lBQ0EsSUFBSUosTUFBTSxHQUFHLElBQUksQ0FBQ2IsU0FBUyxDQUFDa0IsaUJBQWlCLENBQUMsSUFBSSxDQUFDakIsSUFBSSxFQUFFLElBQUksQ0FBQ0MsT0FBTyxFQUFFLElBQUksQ0FBQ0MsT0FBTyxDQUFDO0lBQ3BGLElBQUksQ0FBQ1UsTUFBTSxFQUFFO01BQ1QsT0FBT2pCLFdBQVc7SUFDdEI7SUFDQSxJQUFJLENBQUNxQixTQUFTLEdBQUdKLE1BQU07SUFDdkIsT0FBTyxJQUFJLENBQUNJLFNBQVM7RUFDekIsQ0FBQztFQUNELE9BQU9uQixXQUFXO0FBQ3RCLENBQUMsQ0FBQyxDQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL1Byb3h5VHJhY2VyLmpzPzM5N2EiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IE5vb3BUcmFjZXIgfSBmcm9tICcuL05vb3BUcmFjZXInO1xudmFyIE5PT1BfVFJBQ0VSID0gbmV3IE5vb3BUcmFjZXIoKTtcbi8qKlxuICogUHJveHkgdHJhY2VyIHByb3ZpZGVkIGJ5IHRoZSBwcm94eSB0cmFjZXIgcHJvdmlkZXJcbiAqL1xudmFyIFByb3h5VHJhY2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByb3h5VHJhY2VyKF9wcm92aWRlciwgbmFtZSwgdmVyc2lvbiwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9wcm92aWRlciA9IF9wcm92aWRlcjtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgUHJveHlUcmFjZXIucHJvdG90eXBlLnN0YXJ0U3BhbiA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRUcmFjZXIoKS5zdGFydFNwYW4obmFtZSwgb3B0aW9ucywgY29udGV4dCk7XG4gICAgfTtcbiAgICBQcm94eVRyYWNlci5wcm90b3R5cGUuc3RhcnRBY3RpdmVTcGFuID0gZnVuY3Rpb24gKF9uYW1lLCBfb3B0aW9ucywgX2NvbnRleHQsIF9mbikge1xuICAgICAgICB2YXIgdHJhY2VyID0gdGhpcy5fZ2V0VHJhY2VyKCk7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KHRyYWNlci5zdGFydEFjdGl2ZVNwYW4sIHRyYWNlciwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRyeSB0byBnZXQgYSB0cmFjZXIgZnJvbSB0aGUgcHJveHkgdHJhY2VyIHByb3ZpZGVyLlxuICAgICAqIElmIHRoZSBwcm94eSB0cmFjZXIgcHJvdmlkZXIgaGFzIG5vIGRlbGVnYXRlLCByZXR1cm4gYSBub29wIHRyYWNlci5cbiAgICAgKi9cbiAgICBQcm94eVRyYWNlci5wcm90b3R5cGUuX2dldFRyYWNlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlbGVnYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRyYWNlciA9IHRoaXMuX3Byb3ZpZGVyLmdldERlbGVnYXRlVHJhY2VyKHRoaXMubmFtZSwgdGhpcy52ZXJzaW9uLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICBpZiAoIXRyYWNlcikge1xuICAgICAgICAgICAgcmV0dXJuIE5PT1BfVFJBQ0VSO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RlbGVnYXRlID0gdHJhY2VyO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVsZWdhdGU7XG4gICAgfTtcbiAgICByZXR1cm4gUHJveHlUcmFjZXI7XG59KCkpO1xuZXhwb3J0IHsgUHJveHlUcmFjZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb3h5VHJhY2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJfTm9vcFRyYWNlciIsInJlcXVpcmUiLCJOT09QX1RSQUNFUiIsIk5vb3BUcmFjZXIiLCJQcm94eVRyYWNlciIsImV4cG9ydHMiLCJfcHJvdmlkZXIiLCJuYW1lIiwidmVyc2lvbiIsIm9wdGlvbnMiLCJwcm90b3R5cGUiLCJzdGFydFNwYW4iLCJjb250ZXh0IiwiX2dldFRyYWNlciIsInN0YXJ0QWN0aXZlU3BhbiIsIl9uYW1lIiwiX29wdGlvbnMiLCJfY29udGV4dCIsIl9mbiIsInRyYWNlciIsIlJlZmxlY3QiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9kZWxlZ2F0ZSIsImdldERlbGVnYXRlVHJhY2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ProxyTracerProvider = void 0;\nvar _ProxyTracer = __webpack_require__(/*! ./ProxyTracer */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\");\nvar _NoopTracerProvider = __webpack_require__(/*! ./NoopTracerProvider */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar NOOP_TRACER_PROVIDER = new _NoopTracerProvider.NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = exports.ProxyTracerProvider = /** @class */function () {\n  function ProxyTracerProvider() {}\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  ProxyTracerProvider.prototype.getTracer = function (name, version, options) {\n    var _a;\n    return (_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new _ProxyTracer.ProxyTracer(this, name, version, options);\n  };\n  ProxyTracerProvider.prototype.getDelegate = function () {\n    var _a;\n    return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n  };\n  /**\n   * Set the delegate tracer provider\n   */\n  ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n    this._delegate = delegate;\n  };\n  ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {\n    var _a;\n    return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);\n  };\n  return ProxyTracerProvider;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvUHJveHlUcmFjZXJQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFlQSxJQUFBQSxZQUFBLEdBQUFDLG1CQUFBO0FBQ0EsSUFBQUMsbUJBQUEsR0FBQUQsbUJBQUE7QUFoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLElBQUlFLG9CQUFvQixHQUFHLElBQUlDLHNDQUFrQixDQUFDLENBQUM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlDLG1CQUFtQixHQUFBQywyQkFBQSxHQUFHLGFBQWUsWUFBWTtFQUNqRCxTQUFTRCxtQkFBbUJBLENBQUEsRUFBRyxDQUMvQjtFQUNBO0FBQ0o7QUFDQTtFQUNJQSxtQkFBbUIsQ0FBQ0UsU0FBUyxDQUFDQyxTQUFTLEdBQUcsVUFBVUMsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRTtJQUN4RSxJQUFJQyxFQUFFO0lBQ04sT0FBUSxDQUFDQSxFQUFFLEdBQUcsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0osSUFBSSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxFQUFFLEdBQUcsSUFBSUUsd0JBQVcsQ0FBQyxJQUFJLEVBQUVMLElBQUksRUFBRUMsT0FBTyxFQUFFQyxPQUFPLENBQUM7RUFDaEosQ0FBQztFQUNETixtQkFBbUIsQ0FBQ0UsU0FBUyxDQUFDUSxXQUFXLEdBQUcsWUFBWTtJQUNwRCxJQUFJSCxFQUFFO0lBQ04sT0FBTyxDQUFDQSxFQUFFLEdBQUcsSUFBSSxDQUFDSSxTQUFTLE1BQU0sSUFBSSxJQUFJSixFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUdBLEVBQUUsR0FBR1Qsb0JBQW9CO0VBQ3RGLENBQUM7RUFDRDtBQUNKO0FBQ0E7RUFDSUUsbUJBQW1CLENBQUNFLFNBQVMsQ0FBQ1UsV0FBVyxHQUFHLFVBQVVDLFFBQVEsRUFBRTtJQUM1RCxJQUFJLENBQUNGLFNBQVMsR0FBR0UsUUFBUTtFQUM3QixDQUFDO0VBQ0RiLG1CQUFtQixDQUFDRSxTQUFTLENBQUNNLGlCQUFpQixHQUFHLFVBQVVKLElBQUksRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUU7SUFDaEYsSUFBSUMsRUFBRTtJQUNOLE9BQU8sQ0FBQ0EsRUFBRSxHQUFHLElBQUksQ0FBQ0ksU0FBUyxNQUFNLElBQUksSUFBSUosRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNKLFNBQVMsQ0FBQ0MsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sQ0FBQztFQUMxRyxDQUFDO0VBQ0QsT0FBT04sbUJBQW1CO0FBQzlCLENBQUMsQ0FBQyxDQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL1Byb3h5VHJhY2VyUHJvdmlkZXIuanM/MzE3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgUHJveHlUcmFjZXIgfSBmcm9tICcuL1Byb3h5VHJhY2VyJztcbmltcG9ydCB7IE5vb3BUcmFjZXJQcm92aWRlciB9IGZyb20gJy4vTm9vcFRyYWNlclByb3ZpZGVyJztcbnZhciBOT09QX1RSQUNFUl9QUk9WSURFUiA9IG5ldyBOb29wVHJhY2VyUHJvdmlkZXIoKTtcbi8qKlxuICogVHJhY2VyIHByb3ZpZGVyIHdoaWNoIHByb3ZpZGVzIHtAbGluayBQcm94eVRyYWNlcn1zLlxuICpcbiAqIEJlZm9yZSBhIGRlbGVnYXRlIGlzIHNldCwgdHJhY2VycyBwcm92aWRlZCBhcmUgTm9PcC5cbiAqICAgV2hlbiBhIGRlbGVnYXRlIGlzIHNldCwgdHJhY2VzIGFyZSBwcm92aWRlZCBmcm9tIHRoZSBkZWxlZ2F0ZS5cbiAqICAgV2hlbiBhIGRlbGVnYXRlIGlzIHNldCBhZnRlciB0cmFjZXJzIGhhdmUgYWxyZWFkeSBiZWVuIHByb3ZpZGVkLFxuICogICBhbGwgdHJhY2VycyBhbHJlYWR5IHByb3ZpZGVkIHdpbGwgdXNlIHRoZSBwcm92aWRlZCBkZWxlZ2F0ZSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xudmFyIFByb3h5VHJhY2VyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUHJveHlUcmFjZXJQcm92aWRlcigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEge0BsaW5rIFByb3h5VHJhY2VyfVxuICAgICAqL1xuICAgIFByb3h5VHJhY2VyUHJvdmlkZXIucHJvdG90eXBlLmdldFRyYWNlciA9IGZ1bmN0aW9uIChuYW1lLCB2ZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLmdldERlbGVnYXRlVHJhY2VyKG5hbWUsIHZlcnNpb24sIG9wdGlvbnMpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXcgUHJveHlUcmFjZXIodGhpcywgbmFtZSwgdmVyc2lvbiwgb3B0aW9ucykpO1xuICAgIH07XG4gICAgUHJveHlUcmFjZXJQcm92aWRlci5wcm90b3R5cGUuZ2V0RGVsZWdhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuX2RlbGVnYXRlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBOT09QX1RSQUNFUl9QUk9WSURFUjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGVsZWdhdGUgdHJhY2VyIHByb3ZpZGVyXG4gICAgICovXG4gICAgUHJveHlUcmFjZXJQcm92aWRlci5wcm90b3R5cGUuc2V0RGVsZWdhdGUgPSBmdW5jdGlvbiAoZGVsZWdhdGUpIHtcbiAgICAgICAgdGhpcy5fZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcbiAgICB9O1xuICAgIFByb3h5VHJhY2VyUHJvdmlkZXIucHJvdG90eXBlLmdldERlbGVnYXRlVHJhY2VyID0gZnVuY3Rpb24gKG5hbWUsIHZlcnNpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fZGVsZWdhdGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRUcmFjZXIobmFtZSwgdmVyc2lvbiwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICByZXR1cm4gUHJveHlUcmFjZXJQcm92aWRlcjtcbn0oKSk7XG5leHBvcnQgeyBQcm94eVRyYWNlclByb3ZpZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qcm94eVRyYWNlclByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJfUHJveHlUcmFjZXIiLCJyZXF1aXJlIiwiX05vb3BUcmFjZXJQcm92aWRlciIsIk5PT1BfVFJBQ0VSX1BST1ZJREVSIiwiTm9vcFRyYWNlclByb3ZpZGVyIiwiUHJveHlUcmFjZXJQcm92aWRlciIsImV4cG9ydHMiLCJwcm90b3R5cGUiLCJnZXRUcmFjZXIiLCJuYW1lIiwidmVyc2lvbiIsIm9wdGlvbnMiLCJfYSIsImdldERlbGVnYXRlVHJhY2VyIiwiUHJveHlUcmFjZXIiLCJnZXREZWxlZ2F0ZSIsIl9kZWxlZ2F0ZSIsInNldERlbGVnYXRlIiwiZGVsZWdhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SamplingDecision = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (exports.SamplingDecision = SamplingDecision = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvU2FtcGxpbmdSZXN1bHQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQUlBLGdCQUFnQjtBQUMzQixDQUFDLFVBQVVBLGdCQUFnQixFQUFFO0VBQ3pCO0FBQ0o7QUFDQTtBQUNBO0VBQ0lBLGdCQUFnQixDQUFDQSxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxZQUFZO0VBQ25FO0FBQ0o7QUFDQTtBQUNBO0VBQ0lBLGdCQUFnQixDQUFDQSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0VBQzNEO0FBQ0o7QUFDQTtBQUNBO0VBQ0lBLGdCQUFnQixDQUFDQSxnQkFBZ0IsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLG9CQUFvQjtBQUN2RixDQUFDLEVBQUVBLGdCQUFnQixLQUFBQyx3QkFBQSxHQUFLRCxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL1NhbXBsaW5nUmVzdWx0LmpzPzIwYjkiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHRoZSBvbmUgZGVjbGFyZWQgaW4gQG9wZW50ZWxlbWV0cnkvc2RrLXRyYWNlLWJhc2UgaW5zdGVhZC5cbiAqIEEgc2FtcGxpbmcgZGVjaXNpb24gdGhhdCBkZXRlcm1pbmVzIGhvdyBhIHtAbGluayBTcGFufSB3aWxsIGJlIHJlY29yZGVkXG4gKiBhbmQgY29sbGVjdGVkLlxuICovXG5leHBvcnQgdmFyIFNhbXBsaW5nRGVjaXNpb247XG4oZnVuY3Rpb24gKFNhbXBsaW5nRGVjaXNpb24pIHtcbiAgICAvKipcbiAgICAgKiBgU3Bhbi5pc1JlY29yZGluZygpID09PSBmYWxzZWAsIHNwYW4gd2lsbCBub3QgYmUgcmVjb3JkZWQgYW5kIGFsbCBldmVudHNcbiAgICAgKiBhbmQgYXR0cmlidXRlcyB3aWxsIGJlIGRyb3BwZWQuXG4gICAgICovXG4gICAgU2FtcGxpbmdEZWNpc2lvbltTYW1wbGluZ0RlY2lzaW9uW1wiTk9UX1JFQ09SRFwiXSA9IDBdID0gXCJOT1RfUkVDT1JEXCI7XG4gICAgLyoqXG4gICAgICogYFNwYW4uaXNSZWNvcmRpbmcoKSA9PT0gdHJ1ZWAsIGJ1dCBgU2FtcGxlZGAgZmxhZyBpbiB7QGxpbmsgVHJhY2VGbGFnc31cbiAgICAgKiBNVVNUIE5PVCBiZSBzZXQuXG4gICAgICovXG4gICAgU2FtcGxpbmdEZWNpc2lvbltTYW1wbGluZ0RlY2lzaW9uW1wiUkVDT1JEXCJdID0gMV0gPSBcIlJFQ09SRFwiO1xuICAgIC8qKlxuICAgICAqIGBTcGFuLmlzUmVjb3JkaW5nKCkgPT09IHRydWVgIEFORCBgU2FtcGxlZGAgZmxhZyBpbiB7QGxpbmsgVHJhY2VGbGFnc31cbiAgICAgKiBNVVNUIGJlIHNldC5cbiAgICAgKi9cbiAgICBTYW1wbGluZ0RlY2lzaW9uW1NhbXBsaW5nRGVjaXNpb25bXCJSRUNPUkRfQU5EX1NBTVBMRURcIl0gPSAyXSA9IFwiUkVDT1JEX0FORF9TQU1QTEVEXCI7XG59KShTYW1wbGluZ0RlY2lzaW9uIHx8IChTYW1wbGluZ0RlY2lzaW9uID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNhbXBsaW5nUmVzdWx0LmpzLm1hcCJdLCJuYW1lcyI6WyJTYW1wbGluZ0RlY2lzaW9uIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deleteSpan = deleteSpan;\nexports.getActiveSpan = getActiveSpan;\nexports.getSpan = getSpan;\nexports.getSpanContext = getSpanContext;\nexports.setSpan = setSpan;\nexports.setSpanContext = setSpanContext;\nvar _context = __webpack_require__(/*! ../context/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/context/context.js\");\nvar _NonRecordingSpan = __webpack_require__(/*! ./NonRecordingSpan */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\nvar _context2 = __webpack_require__(/*! ../api/context */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * span key\n */\nvar SPAN_KEY = (0, _context.createContextKey)('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nfunction getSpan(context) {\n  return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Gets the span from the current context, if one exists.\n */\nfunction getActiveSpan() {\n  return getSpan(_context2.ContextAPI.getInstance().active());\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nfunction setSpan(context, span) {\n  return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nfunction deleteSpan(context) {\n  return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nfunction setSpanContext(context, spanContext) {\n  return setSpan(context, new _NonRecordingSpan.NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nfunction getSpanContext(context) {\n  var _a;\n  return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvY29udGV4dC11dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQWVBLElBQUFBLFFBQUEsR0FBQUMsbUJBQUE7QUFDQSxJQUFBQyxpQkFBQSxHQUFBRCxtQkFBQTtBQUNBLElBQUFFLFNBQUEsR0FBQUYsbUJBQUE7QUFqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBO0FBQ0E7QUFDQTtBQUNBLElBQUlHLFFBQVEsR0FBRyxJQUFBQyx5QkFBZ0IsRUFBQyxnQ0FBZ0MsQ0FBQztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsT0FBT0EsQ0FBQ0MsT0FBTyxFQUFFO0VBQzdCLE9BQU9BLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDSixRQUFRLENBQUMsSUFBSUssU0FBUztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGFBQWFBLENBQUEsRUFBRztFQUM1QixPQUFPSixPQUFPLENBQUNLLG9CQUFVLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQyxPQUFPQSxDQUFDUCxPQUFPLEVBQUVRLElBQUksRUFBRTtFQUNuQyxPQUFPUixPQUFPLENBQUNTLFFBQVEsQ0FBQ1osUUFBUSxFQUFFVyxJQUFJLENBQUM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0UsVUFBVUEsQ0FBQ1YsT0FBTyxFQUFFO0VBQ2hDLE9BQU9BLE9BQU8sQ0FBQ1csV0FBVyxDQUFDZCxRQUFRLENBQUM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNlLGNBQWNBLENBQUNaLE9BQU8sRUFBRWEsV0FBVyxFQUFFO0VBQ2pELE9BQU9OLE9BQU8sQ0FBQ1AsT0FBTyxFQUFFLElBQUljLGtDQUFnQixDQUFDRCxXQUFXLENBQUMsQ0FBQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRSxjQUFjQSxDQUFDZixPQUFPLEVBQUU7RUFDcEMsSUFBSWdCLEVBQUU7RUFDTixPQUFPLENBQUNBLEVBQUUsR0FBR2pCLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLE1BQU0sSUFBSSxJQUFJZ0IsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNILFdBQVcsQ0FBQyxDQUFDO0FBQ3hGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL2NvbnRleHQtdXRpbHMuanM/ZTAxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgY3JlYXRlQ29udGV4dEtleSB9IGZyb20gJy4uL2NvbnRleHQvY29udGV4dCc7XG5pbXBvcnQgeyBOb25SZWNvcmRpbmdTcGFuIH0gZnJvbSAnLi9Ob25SZWNvcmRpbmdTcGFuJztcbmltcG9ydCB7IENvbnRleHRBUEkgfSBmcm9tICcuLi9hcGkvY29udGV4dCc7XG4vKipcbiAqIHNwYW4ga2V5XG4gKi9cbnZhciBTUEFOX0tFWSA9IGNyZWF0ZUNvbnRleHRLZXkoJ09wZW5UZWxlbWV0cnkgQ29udGV4dCBLZXkgU1BBTicpO1xuLyoqXG4gKiBSZXR1cm4gdGhlIHNwYW4gaWYgb25lIGV4aXN0c1xuICpcbiAqIEBwYXJhbSBjb250ZXh0IGNvbnRleHQgdG8gZ2V0IHNwYW4gZnJvbVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3Bhbihjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQuZ2V0VmFsdWUoU1BBTl9LRVkpIHx8IHVuZGVmaW5lZDtcbn1cbi8qKlxuICogR2V0cyB0aGUgc3BhbiBmcm9tIHRoZSBjdXJyZW50IGNvbnRleHQsIGlmIG9uZSBleGlzdHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3RpdmVTcGFuKCkge1xuICAgIHJldHVybiBnZXRTcGFuKENvbnRleHRBUEkuZ2V0SW5zdGFuY2UoKS5hY3RpdmUoKSk7XG59XG4vKipcbiAqIFNldCB0aGUgc3BhbiBvbiBhIGNvbnRleHRcbiAqXG4gKiBAcGFyYW0gY29udGV4dCBjb250ZXh0IHRvIHVzZSBhcyBwYXJlbnRcbiAqIEBwYXJhbSBzcGFuIHNwYW4gdG8gc2V0IGFjdGl2ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0U3Bhbihjb250ZXh0LCBzcGFuKSB7XG4gICAgcmV0dXJuIGNvbnRleHQuc2V0VmFsdWUoU1BBTl9LRVksIHNwYW4pO1xufVxuLyoqXG4gKiBSZW1vdmUgY3VycmVudCBzcGFuIHN0b3JlZCBpbiB0aGUgY29udGV4dFxuICpcbiAqIEBwYXJhbSBjb250ZXh0IGNvbnRleHQgdG8gZGVsZXRlIHNwYW4gZnJvbVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlU3Bhbihjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQuZGVsZXRlVmFsdWUoU1BBTl9LRVkpO1xufVxuLyoqXG4gKiBXcmFwIHNwYW4gY29udGV4dCBpbiBhIE5vb3BTcGFuIGFuZCBzZXQgYXMgc3BhbiBpbiBhIG5ld1xuICogY29udGV4dFxuICpcbiAqIEBwYXJhbSBjb250ZXh0IGNvbnRleHQgdG8gc2V0IGFjdGl2ZSBzcGFuIG9uXG4gKiBAcGFyYW0gc3BhbkNvbnRleHQgc3BhbiBjb250ZXh0IHRvIGJlIHdyYXBwZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFNwYW5Db250ZXh0KGNvbnRleHQsIHNwYW5Db250ZXh0KSB7XG4gICAgcmV0dXJuIHNldFNwYW4oY29udGV4dCwgbmV3IE5vblJlY29yZGluZ1NwYW4oc3BhbkNvbnRleHQpKTtcbn1cbi8qKlxuICogR2V0IHRoZSBzcGFuIGNvbnRleHQgb2YgdGhlIHNwYW4gaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSBjb250ZXh0IGNvbnRleHQgdG8gZ2V0IHZhbHVlcyBmcm9tXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGFuQ29udGV4dChjb250ZXh0KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBnZXRTcGFuKGNvbnRleHQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3BhbkNvbnRleHQoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHQtdXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIl9jb250ZXh0IiwicmVxdWlyZSIsIl9Ob25SZWNvcmRpbmdTcGFuIiwiX2NvbnRleHQyIiwiU1BBTl9LRVkiLCJjcmVhdGVDb250ZXh0S2V5IiwiZ2V0U3BhbiIsImNvbnRleHQiLCJnZXRWYWx1ZSIsInVuZGVmaW5lZCIsImdldEFjdGl2ZVNwYW4iLCJDb250ZXh0QVBJIiwiZ2V0SW5zdGFuY2UiLCJhY3RpdmUiLCJzZXRTcGFuIiwic3BhbiIsInNldFZhbHVlIiwiZGVsZXRlU3BhbiIsImRlbGV0ZVZhbHVlIiwic2V0U3BhbkNvbnRleHQiLCJzcGFuQ29udGV4dCIsIk5vblJlY29yZGluZ1NwYW4iLCJnZXRTcGFuQ29udGV4dCIsIl9hIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TraceStateImpl = void 0;\nvar _tracestateValidators = __webpack_require__(/*! ./tracestate-validators */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceStateImpl = exports.TraceStateImpl = /** @class */function () {\n  function TraceStateImpl(rawTraceState) {\n    this._internalState = new Map();\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n  TraceStateImpl.prototype.set = function (key, value) {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    var traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  };\n  TraceStateImpl.prototype.unset = function (key) {\n    var traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  };\n  TraceStateImpl.prototype.get = function (key) {\n    return this._internalState.get(key);\n  };\n  TraceStateImpl.prototype.serialize = function () {\n    var _this = this;\n    return this._keys().reduce(function (agg, key) {\n      agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n      return agg;\n    }, []).join(LIST_MEMBERS_SEPARATOR);\n  };\n  TraceStateImpl.prototype._parse = function (rawTraceState) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR).reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n    .reduce(function (agg, part) {\n      var listMember = part.trim(); // Optional Whitespace (OWS) handling\n      var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n      if (i !== -1) {\n        var key = listMember.slice(0, i);\n        var value = listMember.slice(i + 1, part.length);\n        if ((0, _tracestateValidators.validateKey)(key) && (0, _tracestateValidators.validateValue)(value)) {\n          agg.set(key, value);\n        } else {\n          // TODO: Consider to add warning log\n        }\n      }\n      return agg;\n    }, new Map());\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(Array.from(this._internalState.entries()).reverse() // Use reverse same as original tracestate parse chain\n      .slice(0, MAX_TRACE_STATE_ITEMS));\n    }\n  };\n  TraceStateImpl.prototype._keys = function () {\n    return Array.from(this._internalState.keys()).reverse();\n  };\n  TraceStateImpl.prototype._clone = function () {\n    var traceState = new TraceStateImpl();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  };\n  return TraceStateImpl;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.validateKey = validateKey;\nexports.validateValue = validateValue;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nfunction validateKey(key) {\n  return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nfunction validateValue(value) {\n  return VALID_VALUE_BASE_REGEX.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvaW50ZXJuYWwvdHJhY2VzdGF0ZS12YWxpZGF0b3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSxvQkFBb0IsR0FBRyxjQUFjO0FBQ3pDLElBQUlDLFNBQVMsR0FBRyxPQUFPLEdBQUdELG9CQUFvQixHQUFHLFNBQVM7QUFDMUQsSUFBSUUsZ0JBQWdCLEdBQUcsVUFBVSxHQUFHRixvQkFBb0IsR0FBRyxlQUFlLEdBQUdBLG9CQUFvQixHQUFHLFFBQVE7QUFDNUcsSUFBSUcsZUFBZSxHQUFHLElBQUlDLE1BQU0sQ0FBQyxNQUFNLEdBQUdILFNBQVMsR0FBRyxHQUFHLEdBQUdDLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUNwRixJQUFJRyxzQkFBc0IsR0FBRyxxQkFBcUI7QUFDbEQsSUFBSUMsK0JBQStCLEdBQUcsS0FBSztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MsV0FBV0EsQ0FBQ0MsR0FBRyxFQUFFO0VBQzdCLE9BQU9MLGVBQWUsQ0FBQ00sSUFBSSxDQUFDRCxHQUFHLENBQUM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNFLGFBQWFBLENBQUNDLEtBQUssRUFBRTtFQUNqQyxPQUFRTixzQkFBc0IsQ0FBQ0ksSUFBSSxDQUFDRSxLQUFLLENBQUMsSUFDdEMsQ0FBQ0wsK0JBQStCLENBQUNHLElBQUksQ0FBQ0UsS0FBSyxDQUFDO0FBQ3BEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL2ludGVybmFsL3RyYWNlc3RhdGUtdmFsaWRhdG9ycy5qcz8wMThkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgVkFMSURfS0VZX0NIQVJfUkFOR0UgPSAnW18wLTlhLXotKi9dJztcbnZhciBWQUxJRF9LRVkgPSBcIlthLXpdXCIgKyBWQUxJRF9LRVlfQ0hBUl9SQU5HRSArIFwiezAsMjU1fVwiO1xudmFyIFZBTElEX1ZFTkRPUl9LRVkgPSBcIlthLXowLTldXCIgKyBWQUxJRF9LRVlfQ0hBUl9SQU5HRSArIFwiezAsMjQwfUBbYS16XVwiICsgVkFMSURfS0VZX0NIQVJfUkFOR0UgKyBcInswLDEzfVwiO1xudmFyIFZBTElEX0tFWV9SRUdFWCA9IG5ldyBSZWdFeHAoXCJeKD86XCIgKyBWQUxJRF9LRVkgKyBcInxcIiArIFZBTElEX1ZFTkRPUl9LRVkgKyBcIikkXCIpO1xudmFyIFZBTElEX1ZBTFVFX0JBU0VfUkVHRVggPSAvXlsgLX5dezAsMjU1fVshLX5dJC87XG52YXIgSU5WQUxJRF9WQUxVRV9DT01NQV9FUVVBTF9SRUdFWCA9IC8sfD0vO1xuLyoqXG4gKiBLZXkgaXMgb3BhcXVlIHN0cmluZyB1cCB0byAyNTYgY2hhcmFjdGVycyBwcmludGFibGUuIEl0IE1VU1QgYmVnaW4gd2l0aCBhXG4gKiBsb3dlcmNhc2UgbGV0dGVyLCBhbmQgY2FuIG9ubHkgY29udGFpbiBsb3dlcmNhc2UgbGV0dGVycyBhLXosIGRpZ2l0cyAwLTksXG4gKiB1bmRlcnNjb3JlcyBfLCBkYXNoZXMgLSwgYXN0ZXJpc2tzICosIGFuZCBmb3J3YXJkIHNsYXNoZXMgLy5cbiAqIEZvciBtdWx0aS10ZW5hbnQgdmVuZG9yIHNjZW5hcmlvcywgYW4gYXQgc2lnbiAoQCkgY2FuIGJlIHVzZWQgdG8gcHJlZml4IHRoZVxuICogdmVuZG9yIG5hbWUuIFZlbmRvcnMgU0hPVUxEIHNldCB0aGUgdGVuYW50IElEIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGtleS5cbiAqIHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvdHJhY2UtY29udGV4dC8ja2V5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUtleShrZXkpIHtcbiAgICByZXR1cm4gVkFMSURfS0VZX1JFR0VYLnRlc3Qoa2V5KTtcbn1cbi8qKlxuICogVmFsdWUgaXMgb3BhcXVlIHN0cmluZyB1cCB0byAyNTYgY2hhcmFjdGVycyBwcmludGFibGUgQVNDSUkgUkZDMDAyMFxuICogY2hhcmFjdGVycyAoaS5lLiwgdGhlIHJhbmdlIDB4MjAgdG8gMHg3RSkgZXhjZXB0IGNvbW1hICwgYW5kID0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIChWQUxJRF9WQUxVRV9CQVNFX1JFR0VYLnRlc3QodmFsdWUpICYmXG4gICAgICAgICFJTlZBTElEX1ZBTFVFX0NPTU1BX0VRVUFMX1JFR0VYLnRlc3QodmFsdWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNlc3RhdGUtdmFsaWRhdG9ycy5qcy5tYXAiXSwibmFtZXMiOlsiVkFMSURfS0VZX0NIQVJfUkFOR0UiLCJWQUxJRF9LRVkiLCJWQUxJRF9WRU5ET1JfS0VZIiwiVkFMSURfS0VZX1JFR0VYIiwiUmVnRXhwIiwiVkFMSURfVkFMVUVfQkFTRV9SRUdFWCIsIklOVkFMSURfVkFMVUVfQ09NTUFfRVFVQUxfUkVHRVgiLCJ2YWxpZGF0ZUtleSIsImtleSIsInRlc3QiLCJ2YWxpZGF0ZVZhbHVlIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createTraceState = createTraceState;\nvar _tracestateImpl = __webpack_require__(/*! ./tracestate-impl */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction createTraceState(rawTraceState) {\n  return new _tracestateImpl.TraceStateImpl(rawTraceState);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvaW50ZXJuYWwvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBZUEsSUFBQUEsZUFBQSxHQUFBQyxtQkFBQTtBQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTyxTQUFTQyxnQkFBZ0JBLENBQUNDLGFBQWEsRUFBRTtFQUM1QyxPQUFPLElBQUlDLDhCQUFjLENBQUNELGFBQWEsQ0FBQztBQUM1QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS90cmFjZS9pbnRlcm5hbC91dGlscy5qcz80OWYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBUcmFjZVN0YXRlSW1wbCB9IGZyb20gJy4vdHJhY2VzdGF0ZS1pbXBsJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcmFjZVN0YXRlKHJhd1RyYWNlU3RhdGUpIHtcbiAgICByZXR1cm4gbmV3IFRyYWNlU3RhdGVJbXBsKHJhd1RyYWNlU3RhdGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIl90cmFjZXN0YXRlSW1wbCIsInJlcXVpcmUiLCJjcmVhdGVUcmFjZVN0YXRlIiwicmF3VHJhY2VTdGF0ZSIsIlRyYWNlU3RhdGVJbXBsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.INVALID_TRACEID = exports.INVALID_SPAN_CONTEXT = exports.INVALID_SPANID = void 0;\nvar _trace_flags = __webpack_require__(/*! ./trace_flags */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar INVALID_SPANID = exports.INVALID_SPANID = '0000000000000000';\nvar INVALID_TRACEID = exports.INVALID_TRACEID = '00000000000000000000000000000000';\nvar INVALID_SPAN_CONTEXT = exports.INVALID_SPAN_CONTEXT = {\n  traceId: INVALID_TRACEID,\n  spanId: INVALID_SPANID,\n  traceFlags: _trace_flags.TraceFlags.NONE\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvaW52YWxpZC1zcGFuLWNvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFlQSxJQUFBQSxZQUFBLEdBQUFDLG1CQUFBO0FBZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPLElBQUlDLGNBQWMsR0FBQUMsc0JBQUEsR0FBRyxrQkFBa0I7QUFDdkMsSUFBSUMsZUFBZSxHQUFBRCx1QkFBQSxHQUFHLGtDQUFrQztBQUN4RCxJQUFJRSxvQkFBb0IsR0FBQUYsNEJBQUEsR0FBRztFQUM5QkcsT0FBTyxFQUFFRixlQUFlO0VBQ3hCRyxNQUFNLEVBQUVMLGNBQWM7RUFDdEJNLFVBQVUsRUFBRUMsdUJBQVUsQ0FBQ0M7QUFDM0IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvYXBpL2J1aWxkL2VzbS90cmFjZS9pbnZhbGlkLXNwYW4tY29uc3RhbnRzLmpzPzM5ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IFRyYWNlRmxhZ3MgfSBmcm9tICcuL3RyYWNlX2ZsYWdzJztcbmV4cG9ydCB2YXIgSU5WQUxJRF9TUEFOSUQgPSAnMDAwMDAwMDAwMDAwMDAwMCc7XG5leHBvcnQgdmFyIElOVkFMSURfVFJBQ0VJRCA9ICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCc7XG5leHBvcnQgdmFyIElOVkFMSURfU1BBTl9DT05URVhUID0ge1xuICAgIHRyYWNlSWQ6IElOVkFMSURfVFJBQ0VJRCxcbiAgICBzcGFuSWQ6IElOVkFMSURfU1BBTklELFxuICAgIHRyYWNlRmxhZ3M6IFRyYWNlRmxhZ3MuTk9ORSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnZhbGlkLXNwYW4tY29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJfdHJhY2VfZmxhZ3MiLCJyZXF1aXJlIiwiSU5WQUxJRF9TUEFOSUQiLCJleHBvcnRzIiwiSU5WQUxJRF9UUkFDRUlEIiwiSU5WQUxJRF9TUEFOX0NPTlRFWFQiLCJ0cmFjZUlkIiwic3BhbklkIiwidHJhY2VGbGFncyIsIlRyYWNlRmxhZ3MiLCJOT05FIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SpanKind = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SpanKind;\n(function (SpanKind) {\n  /** Default value. Indicates that the span is used internally. */\n  SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind || (exports.SpanKind = SpanKind = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2Uvc3Bhbl9raW5kLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQUlBLFFBQVE7QUFDbkIsQ0FBQyxVQUFVQSxRQUFRLEVBQUU7RUFDakI7RUFDQUEsUUFBUSxDQUFDQSxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsVUFBVTtFQUMvQztBQUNKO0FBQ0E7QUFDQTtFQUNJQSxRQUFRLENBQUNBLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRO0VBQzNDO0FBQ0o7QUFDQTtBQUNBO0VBQ0lBLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVE7RUFDM0M7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJQSxRQUFRLENBQUNBLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxVQUFVO0VBQy9DO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSUEsUUFBUSxDQUFDQSxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsVUFBVTtBQUNuRCxDQUFDLEVBQUVBLFFBQVEsS0FBQUMsZ0JBQUEsR0FBS0QsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2Uvc3Bhbl9raW5kLmpzP2JiOGEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB2YXIgU3BhbktpbmQ7XG4oZnVuY3Rpb24gKFNwYW5LaW5kKSB7XG4gICAgLyoqIERlZmF1bHQgdmFsdWUuIEluZGljYXRlcyB0aGF0IHRoZSBzcGFuIGlzIHVzZWQgaW50ZXJuYWxseS4gKi9cbiAgICBTcGFuS2luZFtTcGFuS2luZFtcIklOVEVSTkFMXCJdID0gMF0gPSBcIklOVEVSTkFMXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHNwYW4gY292ZXJzIHNlcnZlci1zaWRlIGhhbmRsaW5nIG9mIGFuIFJQQyBvciBvdGhlclxuICAgICAqIHJlbW90ZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIFNwYW5LaW5kW1NwYW5LaW5kW1wiU0VSVkVSXCJdID0gMV0gPSBcIlNFUlZFUlwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IHRoZSBzcGFuIGNvdmVycyB0aGUgY2xpZW50LXNpZGUgd3JhcHBlciBhcm91bmQgYW4gUlBDIG9yXG4gICAgICogb3RoZXIgcmVtb3RlIHJlcXVlc3QuXG4gICAgICovXG4gICAgU3BhbktpbmRbU3BhbktpbmRbXCJDTElFTlRcIl0gPSAyXSA9IFwiQ0xJRU5UXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHNwYW4gZGVzY3JpYmVzIHByb2R1Y2VyIHNlbmRpbmcgYSBtZXNzYWdlIHRvIGFcbiAgICAgKiBicm9rZXIuIFVubGlrZSBjbGllbnQgYW5kIHNlcnZlciwgdGhlcmUgaXMgbm8gZGlyZWN0IGNyaXRpY2FsIHBhdGggbGF0ZW5jeVxuICAgICAqIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHByb2R1Y2VyIGFuZCBjb25zdW1lciBzcGFucy5cbiAgICAgKi9cbiAgICBTcGFuS2luZFtTcGFuS2luZFtcIlBST0RVQ0VSXCJdID0gM10gPSBcIlBST0RVQ0VSXCI7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIHNwYW4gZGVzY3JpYmVzIGNvbnN1bWVyIHJlY2VpdmluZyBhIG1lc3NhZ2UgZnJvbSBhXG4gICAgICogYnJva2VyLiBVbmxpa2UgY2xpZW50IGFuZCBzZXJ2ZXIsIHRoZXJlIGlzIG5vIGRpcmVjdCBjcml0aWNhbCBwYXRoIGxhdGVuY3lcbiAgICAgKiByZWxhdGlvbnNoaXAgYmV0d2VlbiBwcm9kdWNlciBhbmQgY29uc3VtZXIgc3BhbnMuXG4gICAgICovXG4gICAgU3BhbktpbmRbU3BhbktpbmRbXCJDT05TVU1FUlwiXSA9IDRdID0gXCJDT05TVU1FUlwiO1xufSkoU3BhbktpbmQgfHwgKFNwYW5LaW5kID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYW5fa2luZC5qcy5tYXAiXSwibmFtZXMiOlsiU3BhbktpbmQiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.isSpanContextValid = isSpanContextValid;\nexports.isValidSpanId = isValidSpanId;\nexports.isValidTraceId = isValidTraceId;\nexports.wrapSpanContext = wrapSpanContext;\nvar _invalidSpanConstants = __webpack_require__(/*! ./invalid-span-constants */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\nvar _NonRecordingSpan = __webpack_require__(/*! ./NonRecordingSpan */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nfunction isValidTraceId(traceId) {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== _invalidSpanConstants.INVALID_TRACEID;\n}\nfunction isValidSpanId(spanId) {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== _invalidSpanConstants.INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nfunction isSpanContextValid(spanContext) {\n  return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nfunction wrapSpanContext(spanContext) {\n  return new _NonRecordingSpan.NonRecordingSpan(spanContext);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2Uvc3BhbmNvbnRleHQtdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBZUEsSUFBQUEscUJBQUEsR0FBQUMsbUJBQUE7QUFDQSxJQUFBQyxpQkFBQSxHQUFBRCxtQkFBQTtBQWhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsSUFBSUUsbUJBQW1CLEdBQUcsbUJBQW1CO0FBQzdDLElBQUlDLGtCQUFrQixHQUFHLGlCQUFpQjtBQUNuQyxTQUFTQyxjQUFjQSxDQUFDQyxPQUFPLEVBQUU7RUFDcEMsT0FBT0gsbUJBQW1CLENBQUNJLElBQUksQ0FBQ0QsT0FBTyxDQUFDLElBQUlBLE9BQU8sS0FBS0UscUNBQWU7QUFDM0U7QUFDTyxTQUFTQyxhQUFhQSxDQUFDQyxNQUFNLEVBQUU7RUFDbEMsT0FBT04sa0JBQWtCLENBQUNHLElBQUksQ0FBQ0csTUFBTSxDQUFDLElBQUlBLE1BQU0sS0FBS0Msb0NBQWM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNDLGtCQUFrQkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQzVDLE9BQVFSLGNBQWMsQ0FBQ1EsV0FBVyxDQUFDUCxPQUFPLENBQUMsSUFBSUcsYUFBYSxDQUFDSSxXQUFXLENBQUNILE1BQU0sQ0FBQztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVNJLGVBQWVBLENBQUNELFdBQVcsRUFBRTtFQUN6QyxPQUFPLElBQUlFLGtDQUFnQixDQUFDRixXQUFXLENBQUM7QUFDNUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2Uvc3BhbmNvbnRleHQtdXRpbHMuanM/MjExMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgSU5WQUxJRF9TUEFOSUQsIElOVkFMSURfVFJBQ0VJRCB9IGZyb20gJy4vaW52YWxpZC1zcGFuLWNvbnN0YW50cyc7XG5pbXBvcnQgeyBOb25SZWNvcmRpbmdTcGFuIH0gZnJvbSAnLi9Ob25SZWNvcmRpbmdTcGFuJztcbnZhciBWQUxJRF9UUkFDRUlEX1JFR0VYID0gL14oWzAtOWEtZl17MzJ9KSQvaTtcbnZhciBWQUxJRF9TUEFOSURfUkVHRVggPSAvXlswLTlhLWZdezE2fSQvaTtcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkVHJhY2VJZCh0cmFjZUlkKSB7XG4gICAgcmV0dXJuIFZBTElEX1RSQUNFSURfUkVHRVgudGVzdCh0cmFjZUlkKSAmJiB0cmFjZUlkICE9PSBJTlZBTElEX1RSQUNFSUQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFNwYW5JZChzcGFuSWQpIHtcbiAgICByZXR1cm4gVkFMSURfU1BBTklEX1JFR0VYLnRlc3Qoc3BhbklkKSAmJiBzcGFuSWQgIT09IElOVkFMSURfU1BBTklEO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyB7QGxpbmsgU3BhbkNvbnRleHR9IGlzIHZhbGlkLlxuICogQHJldHVybiB0cnVlIGlmIHRoaXMge0BsaW5rIFNwYW5Db250ZXh0fSBpcyB2YWxpZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3BhbkNvbnRleHRWYWxpZChzcGFuQ29udGV4dCkge1xuICAgIHJldHVybiAoaXNWYWxpZFRyYWNlSWQoc3BhbkNvbnRleHQudHJhY2VJZCkgJiYgaXNWYWxpZFNwYW5JZChzcGFuQ29udGV4dC5zcGFuSWQpKTtcbn1cbi8qKlxuICogV3JhcCB0aGUgZ2l2ZW4ge0BsaW5rIFNwYW5Db250ZXh0fSBpbiBhIG5ldyBub24tcmVjb3JkaW5nIHtAbGluayBTcGFufVxuICpcbiAqIEBwYXJhbSBzcGFuQ29udGV4dCBzcGFuIGNvbnRleHQgdG8gYmUgd3JhcHBlZFxuICogQHJldHVybnMgYSBuZXcgbm9uLXJlY29yZGluZyB7QGxpbmsgU3Bhbn0gd2l0aCB0aGUgcHJvdmlkZWQgY29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcFNwYW5Db250ZXh0KHNwYW5Db250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBOb25SZWNvcmRpbmdTcGFuKHNwYW5Db250ZXh0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwYW5jb250ZXh0LXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJfaW52YWxpZFNwYW5Db25zdGFudHMiLCJyZXF1aXJlIiwiX05vblJlY29yZGluZ1NwYW4iLCJWQUxJRF9UUkFDRUlEX1JFR0VYIiwiVkFMSURfU1BBTklEX1JFR0VYIiwiaXNWYWxpZFRyYWNlSWQiLCJ0cmFjZUlkIiwidGVzdCIsIklOVkFMSURfVFJBQ0VJRCIsImlzVmFsaWRTcGFuSWQiLCJzcGFuSWQiLCJJTlZBTElEX1NQQU5JRCIsImlzU3BhbkNvbnRleHRWYWxpZCIsInNwYW5Db250ZXh0Iiwid3JhcFNwYW5Db250ZXh0IiwiTm9uUmVjb3JkaW5nU3BhbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/status.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/status.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SpanStatusCode = void 0;\n/**\n * An enumeration of status codes.\n */\nvar SpanStatusCode;\n(function (SpanStatusCode) {\n  /**\n   * The default status.\n   */\n  SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n  /**\n   * The operation contains an error.\n   */\n  SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (exports.SpanStatusCode = SpanStatusCode = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2Uvc3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNPLElBQUlBLGNBQWM7QUFDekIsQ0FBQyxVQUFVQSxjQUFjLEVBQUU7RUFDdkI7QUFDSjtBQUNBO0VBQ0lBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU87RUFDckQ7QUFDSjtBQUNBO0FBQ0E7RUFDSUEsY0FBYyxDQUFDQSxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSTtFQUMvQztBQUNKO0FBQ0E7RUFDSUEsY0FBYyxDQUFDQSxjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTztBQUN6RCxDQUFDLEVBQUVBLGNBQWMsS0FBQUMsc0JBQUEsR0FBS0QsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2Uvc3RhdHVzLmpzPzI3YjciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbiBlbnVtZXJhdGlvbiBvZiBzdGF0dXMgY29kZXMuXG4gKi9cbmV4cG9ydCB2YXIgU3BhblN0YXR1c0NvZGU7XG4oZnVuY3Rpb24gKFNwYW5TdGF0dXNDb2RlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgc3RhdHVzLlxuICAgICAqL1xuICAgIFNwYW5TdGF0dXNDb2RlW1NwYW5TdGF0dXNDb2RlW1wiVU5TRVRcIl0gPSAwXSA9IFwiVU5TRVRcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgb3BlcmF0aW9uIGhhcyBiZWVuIHZhbGlkYXRlZCBieSBhbiBBcHBsaWNhdGlvbiBkZXZlbG9wZXIgb3JcbiAgICAgKiBPcGVyYXRvciB0byBoYXZlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuXG4gICAgICovXG4gICAgU3BhblN0YXR1c0NvZGVbU3BhblN0YXR1c0NvZGVbXCJPS1wiXSA9IDFdID0gXCJPS1wiO1xuICAgIC8qKlxuICAgICAqIFRoZSBvcGVyYXRpb24gY29udGFpbnMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgU3BhblN0YXR1c0NvZGVbU3BhblN0YXR1c0NvZGVbXCJFUlJPUlwiXSA9IDJdID0gXCJFUlJPUlwiO1xufSkoU3BhblN0YXR1c0NvZGUgfHwgKFNwYW5TdGF0dXNDb2RlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXR1cy5qcy5tYXAiXSwibmFtZXMiOlsiU3BhblN0YXR1c0NvZGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/status.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TraceFlags = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TraceFlags;\n(function (TraceFlags) {\n  /** Represents no flag set. */\n  TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n  /** Bit to represent whether trace is sampled in trace flags. */\n  TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags || (exports.TraceFlags = TraceFlags = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdHJhY2UvdHJhY2VfZmxhZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBSUEsVUFBVTtBQUNyQixDQUFDLFVBQVVBLFVBQVUsRUFBRTtFQUNuQjtFQUNBQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNO0VBQzNDO0VBQ0FBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFNBQVM7QUFDckQsQ0FBQyxFQUFFQSxVQUFVLEtBQUFDLGtCQUFBLEdBQUtELFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9hcGkvYnVpbGQvZXNtL3RyYWNlL3RyYWNlX2ZsYWdzLmpzP2JkYzAiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmV4cG9ydCB2YXIgVHJhY2VGbGFncztcbihmdW5jdGlvbiAoVHJhY2VGbGFncykge1xuICAgIC8qKiBSZXByZXNlbnRzIG5vIGZsYWcgc2V0LiAqL1xuICAgIFRyYWNlRmxhZ3NbVHJhY2VGbGFnc1tcIk5PTkVcIl0gPSAwXSA9IFwiTk9ORVwiO1xuICAgIC8qKiBCaXQgdG8gcmVwcmVzZW50IHdoZXRoZXIgdHJhY2UgaXMgc2FtcGxlZCBpbiB0cmFjZSBmbGFncy4gKi9cbiAgICBUcmFjZUZsYWdzW1RyYWNlRmxhZ3NbXCJTQU1QTEVEXCJdID0gMV0gPSBcIlNBTVBMRURcIjtcbn0pKFRyYWNlRmxhZ3MgfHwgKFRyYWNlRmxhZ3MgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2VfZmxhZ3MuanMubWFwIl0sIm5hbWVzIjpbIlRyYWNlRmxhZ3MiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@opentelemetry/api/build/esm/version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/version.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.VERSION = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nvar VERSION = exports.VERSION = '1.9.0';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLElBQUlBLE9BQU8sR0FBQUMsZUFBQSxHQUFHLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2FwaS9idWlsZC9lc20vdmVyc2lvbi5qcz8zYTVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydCB2YXIgVkVSU0lPTiA9ICcxLjkuMCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJWRVJTSU9OIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@opentelemetry/api/build/esm/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/api.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/api.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dsn = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn) {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn, sdkInfo) {\n  const params = {\n    sentry_version: SENTRY_API_VERSION\n  };\n  if (dsn.publicKey) {\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    params.sentry_key = dsn.publicKey;\n  }\n  if (sdkInfo) {\n    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n  }\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel, sdkInfo) {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n  const dsn$1 = dsn.makeDsn(dsnLike);\n  if (!dsn$1) {\n    return '';\n  }\n  const endpoint = `${getBaseApiEndpoint(dsn$1)}embed/error-page/`;\n  let encodedOptions = `dsn=${dsn.dsnToString(dsn$1)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n    if (key === 'onClose') {\n      continue;\n    }\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key])}`;\n    }\n  }\n  return `${endpoint}?${encodedOptions}`;\n}\nexports.getEnvelopeEndpointWithUrlEncodedAuth = getEnvelopeEndpointWithUrlEncodedAuth;\nexports.getReportDialogEndpoint = getReportDialogEndpoint;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYXBpLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsR0FBRyxHQUFHQyxtQkFBTyxDQUFDLG1HQUFzQixDQUFDO0FBRTNDLE1BQU1DLGtCQUFrQixHQUFHLEdBQUc7O0FBRTlCO0FBQ0EsU0FBU0Msa0JBQWtCQSxDQUFDSCxHQUFHLEVBQUU7RUFDL0IsTUFBTUksUUFBUSxHQUFHSixHQUFHLENBQUNJLFFBQVEsR0FBSSxHQUFFSixHQUFHLENBQUNJLFFBQVMsR0FBRSxHQUFHLEVBQUU7RUFDdkQsTUFBTUMsSUFBSSxHQUFHTCxHQUFHLENBQUNLLElBQUksR0FBSSxJQUFHTCxHQUFHLENBQUNLLElBQUssRUFBQyxHQUFHLEVBQUU7RUFDM0MsT0FBUSxHQUFFRCxRQUFTLEtBQUlKLEdBQUcsQ0FBQ00sSUFBSyxHQUFFRCxJQUFLLEdBQUVMLEdBQUcsQ0FBQ08sSUFBSSxHQUFJLElBQUdQLEdBQUcsQ0FBQ08sSUFBSyxFQUFDLEdBQUcsRUFBRyxPQUFNO0FBQ2hGOztBQUVBO0FBQ0EsU0FBU0Msa0JBQWtCQSxDQUFDUixHQUFHLEVBQUU7RUFDL0IsT0FBUSxHQUFFRyxrQkFBa0IsQ0FBQ0gsR0FBRyxDQUFFLEdBQUVBLEdBQUcsQ0FBQ1MsU0FBVSxZQUFXO0FBQy9EOztBQUVBO0FBQ0EsU0FBU0MsWUFBWUEsQ0FBQ1YsR0FBRyxFQUFFVyxPQUFPLEVBQUU7RUFDbEMsTUFBTUMsTUFBTSxHQUFHO0lBQ2JDLGNBQWMsRUFBRVg7RUFDbEIsQ0FBQztFQUVELElBQUlGLEdBQUcsQ0FBQ2MsU0FBUyxFQUFFO0lBQ2pCO0lBQ0E7SUFDQUYsTUFBTSxDQUFDRyxVQUFVLEdBQUdmLEdBQUcsQ0FBQ2MsU0FBUztFQUNuQztFQUVBLElBQUlILE9BQU8sRUFBRTtJQUNYQyxNQUFNLENBQUNJLGFBQWEsR0FBSSxHQUFFTCxPQUFPLENBQUNNLElBQUssSUFBR04sT0FBTyxDQUFDTyxPQUFRLEVBQUM7RUFDN0Q7RUFFQSxPQUFPLElBQUlDLGVBQWUsQ0FBQ1AsTUFBTSxDQUFDLENBQUNRLFFBQVEsQ0FBQyxDQUFDO0FBQy9DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxxQ0FBcUNBLENBQUNyQixHQUFHLEVBQUVzQixNQUFNLEVBQUVYLE9BQU8sRUFBRTtFQUNuRSxPQUFPVyxNQUFNLEdBQUdBLE1BQU0sR0FBSSxHQUFFZCxrQkFBa0IsQ0FBQ1IsR0FBRyxDQUFFLElBQUdVLFlBQVksQ0FBQ1YsR0FBRyxFQUFFVyxPQUFPLENBQUUsRUFBQztBQUNyRjs7QUFFQTtBQUNBLFNBQVNZLHVCQUF1QkEsQ0FDOUJDLE9BQU8sRUFDUEMsYUFBYSxFQUdiO0VBQ0EsTUFBTUMsS0FBSyxHQUFHMUIsR0FBRyxDQUFDMkIsT0FBTyxDQUFDSCxPQUFPLENBQUM7RUFDbEMsSUFBSSxDQUFDRSxLQUFLLEVBQUU7SUFDVixPQUFPLEVBQUU7RUFDWDtFQUVBLE1BQU1FLFFBQVEsR0FBSSxHQUFFekIsa0JBQWtCLENBQUN1QixLQUFLLENBQUUsbUJBQWtCO0VBRWhFLElBQUlHLGNBQWMsR0FBSSxPQUFNN0IsR0FBRyxDQUFDOEIsV0FBVyxDQUFDSixLQUFLLENBQUUsRUFBQztFQUNwRCxLQUFLLE1BQU1LLEdBQUcsSUFBSU4sYUFBYSxFQUFFO0lBQy9CLElBQUlNLEdBQUcsS0FBSyxLQUFLLEVBQUU7TUFDakI7SUFDRjtJQUVBLElBQUlBLEdBQUcsS0FBSyxTQUFTLEVBQUU7TUFDckI7SUFDRjtJQUVBLElBQUlBLEdBQUcsS0FBSyxNQUFNLEVBQUU7TUFDbEIsTUFBTUMsSUFBSSxHQUFHUCxhQUFhLENBQUNPLElBQUk7TUFDL0IsSUFBSSxDQUFDQSxJQUFJLEVBQUU7UUFDVDtNQUNGO01BQ0EsSUFBSUEsSUFBSSxDQUFDZixJQUFJLEVBQUU7UUFDYlksY0FBYyxJQUFLLFNBQVFJLGtCQUFrQixDQUFDRCxJQUFJLENBQUNmLElBQUksQ0FBRSxFQUFDO01BQzVEO01BQ0EsSUFBSWUsSUFBSSxDQUFDRSxLQUFLLEVBQUU7UUFDZEwsY0FBYyxJQUFLLFVBQVNJLGtCQUFrQixDQUFDRCxJQUFJLENBQUNFLEtBQUssQ0FBRSxFQUFDO01BQzlEO0lBQ0YsQ0FBQyxNQUFNO01BQ0xMLGNBQWMsSUFBSyxJQUFHSSxrQkFBa0IsQ0FBQ0YsR0FBRyxDQUFFLElBQUdFLGtCQUFrQixDQUFDUixhQUFhLENBQUNNLEdBQUcsQ0FBRSxDQUFFLEVBQUM7SUFDNUY7RUFDRjtFQUVBLE9BQVEsR0FBRUgsUUFBUyxJQUFHQyxjQUFlLEVBQUM7QUFDeEM7QUFFQS9CLDZDQUE2QyxHQUFHdUIscUNBQXFDO0FBQ3JGdkIsK0JBQStCLEdBQUd5Qix1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYXBpLmpzPzJlNWMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZHNuID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9kc24uanMnKTtcblxuY29uc3QgU0VOVFJZX0FQSV9WRVJTSU9OID0gJzcnO1xuXG4vKiogUmV0dXJucyB0aGUgcHJlZml4IHRvIGNvbnN0cnVjdCBTZW50cnkgaW5nZXN0aW9uIEFQSSBlbmRwb2ludHMuICovXG5mdW5jdGlvbiBnZXRCYXNlQXBpRW5kcG9pbnQoZHNuKSB7XG4gIGNvbnN0IHByb3RvY29sID0gZHNuLnByb3RvY29sID8gYCR7ZHNuLnByb3RvY29sfTpgIDogJyc7XG4gIGNvbnN0IHBvcnQgPSBkc24ucG9ydCA/IGA6JHtkc24ucG9ydH1gIDogJyc7XG4gIHJldHVybiBgJHtwcm90b2NvbH0vLyR7ZHNuLmhvc3R9JHtwb3J0fSR7ZHNuLnBhdGggPyBgLyR7ZHNuLnBhdGh9YCA6ICcnfS9hcGkvYDtcbn1cblxuLyoqIFJldHVybnMgdGhlIGluZ2VzdCBBUEkgZW5kcG9pbnQgZm9yIHRhcmdldC4gKi9cbmZ1bmN0aW9uIF9nZXRJbmdlc3RFbmRwb2ludChkc24pIHtcbiAgcmV0dXJuIGAke2dldEJhc2VBcGlFbmRwb2ludChkc24pfSR7ZHNuLnByb2plY3RJZH0vZW52ZWxvcGUvYDtcbn1cblxuLyoqIFJldHVybnMgYSBVUkwtZW5jb2RlZCBzdHJpbmcgd2l0aCBhdXRoIGNvbmZpZyBzdWl0YWJsZSBmb3IgYSBxdWVyeSBzdHJpbmcuICovXG5mdW5jdGlvbiBfZW5jb2RlZEF1dGgoZHNuLCBzZGtJbmZvKSB7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBzZW50cnlfdmVyc2lvbjogU0VOVFJZX0FQSV9WRVJTSU9OLFxuICB9O1xuXG4gIGlmIChkc24ucHVibGljS2V5KSB7XG4gICAgLy8gV2Ugc2VuZCBvbmx5IHRoZSBtaW5pbXVtIHNldCBvZiByZXF1aXJlZCBpbmZvcm1hdGlvbi4gU2VlXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjU3Mi5cbiAgICBwYXJhbXMuc2VudHJ5X2tleSA9IGRzbi5wdWJsaWNLZXk7XG4gIH1cblxuICBpZiAoc2RrSW5mbykge1xuICAgIHBhcmFtcy5zZW50cnlfY2xpZW50ID0gYCR7c2RrSW5mby5uYW1lfS8ke3Nka0luZm8udmVyc2lvbn1gO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMocGFyYW1zKS50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVudmVsb3BlIGVuZHBvaW50IFVSTCB3aXRoIGF1dGggaW4gdGhlIHF1ZXJ5IHN0cmluZy5cbiAqXG4gKiBTZW5kaW5nIGF1dGggYXMgcGFydCBvZiB0aGUgcXVlcnkgc3RyaW5nIGFuZCBub3QgYXMgY3VzdG9tIEhUVFAgaGVhZGVycyBhdm9pZHMgQ09SUyBwcmVmbGlnaHQgcmVxdWVzdHMuXG4gKi9cbmZ1bmN0aW9uIGdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGgoZHNuLCB0dW5uZWwsIHNka0luZm8pIHtcbiAgcmV0dXJuIHR1bm5lbCA/IHR1bm5lbCA6IGAke19nZXRJbmdlc3RFbmRwb2ludChkc24pfT8ke19lbmNvZGVkQXV0aChkc24sIHNka0luZm8pfWA7XG59XG5cbi8qKiBSZXR1cm5zIHRoZSB1cmwgdG8gdGhlIHJlcG9ydCBkaWFsb2cgZW5kcG9pbnQuICovXG5mdW5jdGlvbiBnZXRSZXBvcnREaWFsb2dFbmRwb2ludChcbiAgZHNuTGlrZSxcbiAgZGlhbG9nT3B0aW9uc1xuXG4sXG4pIHtcbiAgY29uc3QgZHNuJDEgPSBkc24ubWFrZURzbihkc25MaWtlKTtcbiAgaWYgKCFkc24kMSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGNvbnN0IGVuZHBvaW50ID0gYCR7Z2V0QmFzZUFwaUVuZHBvaW50KGRzbiQxKX1lbWJlZC9lcnJvci1wYWdlL2A7XG5cbiAgbGV0IGVuY29kZWRPcHRpb25zID0gYGRzbj0ke2Rzbi5kc25Ub1N0cmluZyhkc24kMSl9YDtcbiAgZm9yIChjb25zdCBrZXkgaW4gZGlhbG9nT3B0aW9ucykge1xuICAgIGlmIChrZXkgPT09ICdkc24nKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnb25DbG9zZScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICd1c2VyJykge1xuICAgICAgY29uc3QgdXNlciA9IGRpYWxvZ09wdGlvbnMudXNlcjtcbiAgICAgIGlmICghdXNlcikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh1c2VyLm5hbWUpIHtcbiAgICAgICAgZW5jb2RlZE9wdGlvbnMgKz0gYCZuYW1lPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHVzZXIubmFtZSl9YDtcbiAgICAgIH1cbiAgICAgIGlmICh1c2VyLmVtYWlsKSB7XG4gICAgICAgIGVuY29kZWRPcHRpb25zICs9IGAmZW1haWw9JHtlbmNvZGVVUklDb21wb25lbnQodXNlci5lbWFpbCl9YDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RlZE9wdGlvbnMgKz0gYCYke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudChkaWFsb2dPcHRpb25zW2tleV0gKX1gO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBgJHtlbmRwb2ludH0/JHtlbmNvZGVkT3B0aW9uc31gO1xufVxuXG5leHBvcnRzLmdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGggPSBnZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoO1xuZXhwb3J0cy5nZXRSZXBvcnREaWFsb2dFbmRwb2ludCA9IGdldFJlcG9ydERpYWxvZ0VuZHBvaW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBpLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZHNuIiwicmVxdWlyZSIsIlNFTlRSWV9BUElfVkVSU0lPTiIsImdldEJhc2VBcGlFbmRwb2ludCIsInByb3RvY29sIiwicG9ydCIsImhvc3QiLCJwYXRoIiwiX2dldEluZ2VzdEVuZHBvaW50IiwicHJvamVjdElkIiwiX2VuY29kZWRBdXRoIiwic2RrSW5mbyIsInBhcmFtcyIsInNlbnRyeV92ZXJzaW9uIiwicHVibGljS2V5Iiwic2VudHJ5X2tleSIsInNlbnRyeV9jbGllbnQiLCJuYW1lIiwidmVyc2lvbiIsIlVSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nIiwiZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCIsInR1bm5lbCIsImdldFJlcG9ydERpYWxvZ0VuZHBvaW50IiwiZHNuTGlrZSIsImRpYWxvZ09wdGlvbnMiLCJkc24kMSIsIm1ha2VEc24iLCJlbmRwb2ludCIsImVuY29kZWRPcHRpb25zIiwiZHNuVG9TdHJpbmciLCJrZXkiLCJ1c2VyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZW1haWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/api.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/asyncContext/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst stackStrategy = __webpack_require__(/*! ./stackStrategy.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js\");\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nfunction setAsyncContextStrategy(strategy) {\n  // Get main carrier (global for every environment)\n  const registry = carrier.getMainCarrier();\n  const sentry = carrier.getSentryCarrier(registry);\n  sentry.acs = strategy;\n}\n\n/**\n * Get the current async context strategy.\n * If none has been setup, the default will be used.\n */\nfunction getAsyncContextStrategy(carrier$1) {\n  const sentry = carrier.getSentryCarrier(carrier$1);\n  if (sentry.acs) {\n    return sentry.acs;\n  }\n\n  // Otherwise, use the default one (stack)\n  return stackStrategy.getStackAsyncContextStrategy();\n}\nexports.getAsyncContextStrategy = getAsyncContextStrategy;\nexports.setAsyncContextStrategy = setAsyncContextStrategy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYXN5bmNDb250ZXh0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLG9GQUFlLENBQUM7QUFDeEMsTUFBTUMsYUFBYSxHQUFHRCxtQkFBTyxDQUFDLDRHQUFvQixDQUFDOztBQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsdUJBQXVCQSxDQUFDQyxRQUFRLEVBQUU7RUFDekM7RUFDQSxNQUFNQyxRQUFRLEdBQUdMLE9BQU8sQ0FBQ00sY0FBYyxDQUFDLENBQUM7RUFDekMsTUFBTUMsTUFBTSxHQUFHUCxPQUFPLENBQUNRLGdCQUFnQixDQUFDSCxRQUFRLENBQUM7RUFDakRFLE1BQU0sQ0FBQ0UsR0FBRyxHQUFHTCxRQUFRO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU00sdUJBQXVCQSxDQUFDQyxTQUFTLEVBQUU7RUFDMUMsTUFBTUosTUFBTSxHQUFHUCxPQUFPLENBQUNRLGdCQUFnQixDQUFDRyxTQUFTLENBQUM7RUFFbEQsSUFBSUosTUFBTSxDQUFDRSxHQUFHLEVBQUU7SUFDZCxPQUFPRixNQUFNLENBQUNFLEdBQUc7RUFDbkI7O0VBRUE7RUFDQSxPQUFPUCxhQUFhLENBQUNVLDRCQUE0QixDQUFDLENBQUM7QUFDckQ7QUFFQWQsK0JBQStCLEdBQUdZLHVCQUF1QjtBQUN6RFosK0JBQStCLEdBQUdLLHVCQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9hc3luY0NvbnRleHQvaW5kZXguanM/ZGMzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjYXJyaWVyID0gcmVxdWlyZSgnLi4vY2Fycmllci5qcycpO1xuY29uc3Qgc3RhY2tTdHJhdGVneSA9IHJlcXVpcmUoJy4vc3RhY2tTdHJhdGVneS5qcycpO1xuXG4vKipcbiAqIEBwcml2YXRlIFByaXZhdGUgQVBJIHdpdGggbm8gc2VtdmVyIGd1YXJhbnRlZXMhXG4gKlxuICogU2V0cyB0aGUgZ2xvYmFsIGFzeW5jIGNvbnRleHQgc3RyYXRlZ3lcbiAqL1xuZnVuY3Rpb24gc2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koc3RyYXRlZ3kpIHtcbiAgLy8gR2V0IG1haW4gY2FycmllciAoZ2xvYmFsIGZvciBldmVyeSBlbnZpcm9ubWVudClcbiAgY29uc3QgcmVnaXN0cnkgPSBjYXJyaWVyLmdldE1haW5DYXJyaWVyKCk7XG4gIGNvbnN0IHNlbnRyeSA9IGNhcnJpZXIuZ2V0U2VudHJ5Q2FycmllcihyZWdpc3RyeSk7XG4gIHNlbnRyeS5hY3MgPSBzdHJhdGVneTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgYXN5bmMgY29udGV4dCBzdHJhdGVneS5cbiAqIElmIG5vbmUgaGFzIGJlZW4gc2V0dXAsIHRoZSBkZWZhdWx0IHdpbGwgYmUgdXNlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koY2FycmllciQxKSB7XG4gIGNvbnN0IHNlbnRyeSA9IGNhcnJpZXIuZ2V0U2VudHJ5Q2FycmllcihjYXJyaWVyJDEpO1xuXG4gIGlmIChzZW50cnkuYWNzKSB7XG4gICAgcmV0dXJuIHNlbnRyeS5hY3M7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIHVzZSB0aGUgZGVmYXVsdCBvbmUgKHN0YWNrKVxuICByZXR1cm4gc3RhY2tTdHJhdGVneS5nZXRTdGFja0FzeW5jQ29udGV4dFN0cmF0ZWd5KCk7XG59XG5cbmV4cG9ydHMuZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kgPSBnZXRBc3luY0NvbnRleHRTdHJhdGVneTtcbmV4cG9ydHMuc2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kgPSBzZXRBc3luY0NvbnRleHRTdHJhdGVneTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2FycmllciIsInJlcXVpcmUiLCJzdGFja1N0cmF0ZWd5Iiwic2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kiLCJzdHJhdGVneSIsInJlZ2lzdHJ5IiwiZ2V0TWFpbkNhcnJpZXIiLCJzZW50cnkiLCJnZXRTZW50cnlDYXJyaWVyIiwiYWNzIiwiZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kiLCJjYXJyaWVyJDEiLCJnZXRTdGFja0FzeW5jQ29udGV4dFN0cmF0ZWd5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst defaultScopes = __webpack_require__(/*! ../defaultScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js\");\nconst scope = __webpack_require__(/*! ../scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst is = __webpack_require__(/*! ../utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\n\n/**\n * This is an object that holds a stack of scopes.\n */\nclass AsyncContextStack {\n  constructor(scope$1, isolationScope) {\n    let assignedScope;\n    if (!scope$1) {\n      assignedScope = new scope.Scope();\n    } else {\n      assignedScope = scope$1;\n    }\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new scope.Scope();\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    // scope stack for domains or the process\n    this._stack = [{\n      scope: assignedScope\n    }];\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Fork a scope for the stack.\n   */\n  withScope(callback) {\n    const scope = this._pushScope();\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      this._popScope();\n      throw e;\n    }\n    if (is.isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(res => {\n        this._popScope();\n        return res;\n      }, e => {\n        this._popScope();\n        throw e;\n      });\n    }\n    this._popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * Get the client of the stack.\n   */\n  getClient() {\n    return this.getStackTop().client;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   */\n  getScope() {\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * Get the isolation scope for the stack.\n   */\n  getIsolationScope() {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   */\n  getStackTop() {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * Push a scope to the stack.\n   */\n  _pushScope() {\n    // We want to clone the content of prev scope\n    const scope = this.getScope().clone();\n    this._stack.push({\n      client: this.getClient(),\n      scope\n    });\n    return scope;\n  }\n\n  /**\n   * Pop a scope from the stack.\n   */\n  _popScope() {\n    if (this._stack.length <= 1) return false;\n    return !!this._stack.pop();\n  }\n}\n\n/**\n * Get the global async context stack.\n * This will be removed during the v8 cycle and is only here to make migration easier.\n */\nfunction getAsyncContextStack() {\n  const registry = carrier.getMainCarrier();\n  const sentry = carrier.getSentryCarrier(registry);\n  return sentry.stack = sentry.stack || new AsyncContextStack(defaultScopes.getDefaultCurrentScope(), defaultScopes.getDefaultIsolationScope());\n}\nfunction withScope(callback) {\n  return getAsyncContextStack().withScope(callback);\n}\nfunction withSetScope(scope, callback) {\n  const stack = getAsyncContextStack();\n  return stack.withScope(() => {\n    stack.getStackTop().scope = scope;\n    return callback(scope);\n  });\n}\nfunction withIsolationScope(callback) {\n  return getAsyncContextStack().withScope(() => {\n    return callback(getAsyncContextStack().getIsolationScope());\n  });\n}\n\n/**\n * Get the stack-based async context strategy.\n */\nfunction getStackAsyncContextStrategy() {\n  return {\n    withIsolationScope,\n    withScope,\n    withSetScope,\n    withSetIsolationScope: (_isolationScope, callback) => {\n      return withIsolationScope(callback);\n    },\n    getCurrentScope: () => getAsyncContextStack().getScope(),\n    getIsolationScope: () => getAsyncContextStack().getIsolationScope()\n  };\n}\nexports.AsyncContextStack = AsyncContextStack;\nexports.getStackAsyncContextStrategy = getStackAsyncContextStrategy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/baseclient.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/baseclient.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/api.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\");\nconst integration = __webpack_require__(/*! ./integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst clientreport = __webpack_require__(/*! ./utils-hoist/clientreport.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js\");\nconst dsn = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst envelope$1 = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst error = __webpack_require__(/*! ./utils-hoist/error.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst syncpromise = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst parseSampleRate = __webpack_require__(/*! ./utils/parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\nconst prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nclass BaseClient {\n  /** Options passed to the SDK. */\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n\n  /** Array of set up integrations. */\n\n  /** Number of calls being processed */\n\n  /** Holds flushable  */\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  constructor(options) {\n    this._options = options;\n    this._integrations = {};\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n    if (options.dsn) {\n      this._dsn = dsn.makeDsn(options.dsn);\n    } else {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('No DSN provided, client will not send events.');\n    }\n    if (this._dsn) {\n      const url = api.getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options.tunnel, options._metadata ? options._metadata.sdk : undefined);\n      this._transport = options.transport({\n        tunnel: this._options.tunnel,\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url\n      });\n    }\n\n    // TODO(v9): Remove this deprecation warning\n    const tracingOptions = ['enableTracing', 'tracesSampleRate', 'tracesSampler'];\n    const undefinedOption = tracingOptions.find(option => option in options && options[option] == undefined);\n    if (undefinedOption) {\n      logger.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn(`[Sentry] Deprecation warning: \\`${undefinedOption}\\` is set to undefined, which leads to tracing being enabled. In v9, a value of \\`undefined\\` will result in tracing being disabled.`);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureException(exception, hint, scope) {\n    const eventId = misc.uuid4();\n\n    // ensure we haven't captured this very object before\n    if (misc.checkOrSetAlreadyCaught(exception)) {\n      debugBuild.DEBUG_BUILD && logger.logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint\n    };\n    this._process(this.eventFromException(exception, hintWithEventId).then(event => this._captureEvent(event, hintWithEventId, scope)));\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureMessage(message, level, hint, currentScope) {\n    const hintWithEventId = {\n      event_id: misc.uuid4(),\n      ...hint\n    };\n    const eventMessage = is.isParameterizedString(message) ? message : String(message);\n    const promisedEvent = is.isPrimitive(message) ? this.eventFromMessage(eventMessage, level, hintWithEventId) : this.eventFromException(message, hintWithEventId);\n    this._process(promisedEvent.then(event => this._captureEvent(event, hintWithEventId, currentScope)));\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureEvent(event, hint, currentScope) {\n    const eventId = misc.uuid4();\n\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && misc.checkOrSetAlreadyCaught(hint.originalException)) {\n      debugBuild.DEBUG_BUILD && logger.logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint\n    };\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanScope = sdkProcessingMetadata.capturedSpanScope;\n    this._process(this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope));\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureSession(session$1) {\n    if (!(typeof session$1.release === 'string')) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session$1);\n      // After sending, we set init false to indicate it's not the first occurrence\n      session.updateSession(session$1, {\n        init: false\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getDsn() {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getOptions() {\n    return this._options;\n  }\n\n  /**\n   * @see SdkMetadata\n   *\n   * @return The metadata of the SDK\n   */\n  getSdkMetadata() {\n    return this._options._metadata;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTransport() {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  flush(timeout) {\n    const transport = this._transport;\n    if (transport) {\n      this.emit('flush');\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return syncpromise.resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  close(timeout) {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      this.emit('close');\n      return result;\n    });\n  }\n\n  /** Get all installed event processors. */\n  getEventProcessors() {\n    return this._eventProcessors;\n  }\n\n  /** @inheritDoc */\n  addEventProcessor(eventProcessor) {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /** @inheritdoc */\n  init() {\n    if (this._isEnabled() ||\n    // Force integrations to be setup even if no DSN was set when we have\n    // Spotlight enabled. This is particularly important for browser as we\n    // don't support the `spotlight` option there and rely on the users\n    // adding the `spotlightBrowserIntegration()` to their integrations which\n    // wouldn't get initialized with the check below when there's no DSN set.\n    this._options.integrations.some(({\n      name\n    }) => name.startsWith('Spotlight'))) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n  getIntegrationByName(integrationName) {\n    return this._integrations[integrationName];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addIntegration(integration$1) {\n    const isAlreadyInstalled = this._integrations[integration$1.name];\n\n    // This hook takes care of only installing if not already installed\n    integration.setupIntegration(this, integration$1, this._integrations);\n    // Here we need to check manually to make sure to not run this multiple times\n    if (!isAlreadyInstalled) {\n      integration.afterSetupIntegrations(this, [integration$1]);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  sendEvent(event, hint = {}) {\n    this.emit('beforeSendEvent', event, hint);\n    let env = envelope.createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n    for (const attachment of hint.attachments || []) {\n      env = envelope$1.addItemToEnvelope(env, envelope$1.createAttachmentEnvelopeItem(attachment));\n    }\n    const promise = this.sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  sendSession(session) {\n    const env = envelope.createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(env);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  recordDroppedEvent(reason, category, eventOrCount) {\n    if (this._options.sendClientReports) {\n      // TODO v9: We do not need the `event` passed as third argument anymore, and can possibly remove this overload\n      // If event is passed as third argument, we assume this is a count of 1\n      const count = typeof eventOrCount === 'number' ? eventOrCount : 1;\n\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      debugBuild.DEBUG_BUILD && logger.logger.log(`Recording outcome: \"${key}\"${count > 1 ? ` (${count} times)` : ''}`);\n      this._outcomes[key] = (this._outcomes[key] || 0) + count;\n    }\n  }\n\n  // Keep on() & emit() signatures in sync with types' client.ts interface\n  /* eslint-disable @typescript-eslint/unified-signatures */\n\n  /** @inheritdoc */\n\n  /** @inheritdoc */\n  on(hook, callback) {\n    const hooks = this._hooks[hook] = this._hooks[hook] || [];\n\n    // @ts-expect-error We assume the types are correct\n    hooks.push(callback);\n\n    // This function returns a callback execution handler that, when invoked,\n    // deregisters a callback. This is crucial for managing instances where callbacks\n    // need to be unregistered to prevent self-referencing in callback closures,\n    // ensuring proper garbage collection.\n    return () => {\n      // @ts-expect-error We assume the types are correct\n      const cbIndex = hooks.indexOf(callback);\n      if (cbIndex > -1) {\n        hooks.splice(cbIndex, 1);\n      }\n    };\n  }\n\n  /** @inheritdoc */\n\n  /** @inheritdoc */\n  emit(hook, ...rest) {\n    const callbacks = this._hooks[hook];\n    if (callbacks) {\n      callbacks.forEach(callback => callback(...rest));\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n  sendEnvelope(envelope) {\n    this.emit('beforeEnvelope', envelope);\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        debugBuild.DEBUG_BUILD && logger.logger.error('Error while sending envelope:', reason);\n        return reason;\n      });\n    }\n    debugBuild.DEBUG_BUILD && logger.logger.error('Transport disabled');\n    return syncpromise.resolvedSyncPromise({});\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n  _setupIntegrations() {\n    const {\n      integrations\n    } = this._options;\n    this._integrations = integration.setupIntegrations(this, integrations);\n    integration.afterSetupIntegrations(this, integrations);\n  }\n\n  /** Updates existing session based on the provided event */\n  _updateSessionFromEvent(session$1, event) {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n    if (exceptions) {\n      errored = true;\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session$1.status === 'ok';\n    const shouldUpdateAndSend = sessionNonTerminal && session$1.errors === 0 || sessionNonTerminal && crashed;\n    if (shouldUpdateAndSend) {\n      session.updateSession(session$1, {\n        ...(crashed && {\n          status: 'crashed'\n        }),\n        errors: session$1.errors || Number(errored || crashed)\n      });\n      this.captureSession(session$1);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  _isClientDoneProcessing(timeout) {\n    return new syncpromise.SyncPromise(resolve => {\n      let ticked = 0;\n      const tick = 1;\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n  _isEnabled() {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  _prepareEvent(event, hint, currentScope = currentScopes.getCurrentScope(), isolationScope = currentScopes.getIsolationScope()) {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations.length > 0) {\n      hint.integrations = integrations;\n    }\n    this.emit('preprocessEvent', event, hint);\n    if (!event.type) {\n      isolationScope.setLastEventId(event.event_id || hint.event_id);\n    }\n    return prepareEvent.prepareEvent(options, event, hint, currentScope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n      evt.contexts = {\n        trace: currentScopes.getTraceContextFromScope(currentScope),\n        ...evt.contexts\n      };\n      const dynamicSamplingContext$1 = dynamicSamplingContext.getDynamicSamplingContextFromScope(this, currentScope);\n      evt.sdkProcessingMetadata = {\n        dynamicSamplingContext: dynamicSamplingContext$1,\n        ...evt.sdkProcessingMetadata\n      };\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  _captureEvent(event, hint = {}, scope) {\n    return this._processEvent(event, hint, scope).then(finalEvent => {\n      return finalEvent.event_id;\n    }, reason => {\n      if (debugBuild.DEBUG_BUILD) {\n        // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n        // control flow, log just the message (no stack) as a log-level log.\n        const sentryError = reason;\n        if (sentryError.logLevel === 'log') {\n          logger.logger.log(sentryError.message);\n        } else {\n          logger.logger.warn(sentryError);\n        }\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  _processEvent(event, hint, currentScope) {\n    const options = this.getOptions();\n    const {\n      sampleRate\n    } = options;\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : parseSampleRate.parseSampleRate(sampleRate);\n    if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error', event);\n      return syncpromise.rejectedSyncPromise(new error.SentryError(`Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`, 'log'));\n    }\n    const dataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanIsolationScope = sdkProcessingMetadata.capturedSpanIsolationScope;\n    return this._prepareEvent(event, hint, currentScope, capturedSpanIsolationScope).then(prepared => {\n      if (prepared === null) {\n        this.recordDroppedEvent('event_processor', dataCategory, event);\n        throw new error.SentryError('An event processor returned `null`, will not send event.', 'log');\n      }\n      const isInternalException = hint.data && hint.data.__sentry__ === true;\n      if (isInternalException) {\n        return prepared;\n      }\n      const result = processBeforeSend(this, options, prepared, hint);\n      return _validateBeforeSendResult(result, beforeSendLabel);\n    }).then(processedEvent => {\n      if (processedEvent === null) {\n        this.recordDroppedEvent('before_send', dataCategory, event);\n        if (isTransaction) {\n          const spans = event.spans || [];\n          // the transaction itself counts as one span, plus all the child spans that are added\n          const spanCount = 1 + spans.length;\n          this.recordDroppedEvent('before_send', 'span', spanCount);\n        }\n        throw new error.SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, 'log');\n      }\n      const session = currentScope && currentScope.getSession();\n      if (!isTransaction && session) {\n        this._updateSessionFromEvent(session, processedEvent);\n      }\n      if (isTransaction) {\n        const spanCountBefore = processedEvent.sdkProcessingMetadata && processedEvent.sdkProcessingMetadata.spanCountBeforeProcessing || 0;\n        const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;\n        const droppedSpanCount = spanCountBefore - spanCountAfter;\n        if (droppedSpanCount > 0) {\n          this.recordDroppedEvent('before_send', 'span', droppedSpanCount);\n        }\n      }\n\n      // None of the Sentry built event processor will update transaction name,\n      // so if the transaction name has been changed by an event processor, we know\n      // it has to come from custom event processor added by a user\n      const transactionInfo = processedEvent.transaction_info;\n      if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n        const source = 'custom';\n        processedEvent.transaction_info = {\n          ...transactionInfo,\n          source\n        };\n      }\n      this.sendEvent(processedEvent, hint);\n      return processedEvent;\n    }).then(null, reason => {\n      if (reason instanceof error.SentryError) {\n        throw reason;\n      }\n      this.captureException(reason, {\n        data: {\n          __sentry__: true\n        },\n        originalException: reason\n      });\n      throw new error.SentryError(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`);\n    });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  _process(promise) {\n    this._numProcessing++;\n    void promise.then(value => {\n      this._numProcessing--;\n      return value;\n    }, reason => {\n      this._numProcessing--;\n      return reason;\n    });\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  _clearOutcomes() {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.entries(outcomes).map(([key, quantity]) => {\n      const [reason, category] = key.split(':');\n      return {\n        reason,\n        category,\n        quantity\n      };\n    });\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  _flushOutcomes() {\n    debugBuild.DEBUG_BUILD && logger.logger.log('Flushing outcomes...');\n    const outcomes = this._clearOutcomes();\n    if (outcomes.length === 0) {\n      debugBuild.DEBUG_BUILD && logger.logger.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      debugBuild.DEBUG_BUILD && logger.logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n    debugBuild.DEBUG_BUILD && logger.logger.log('Sending outcomes:', outcomes);\n    const envelope = clientreport.createClientReportEnvelope(outcomes, this._options.tunnel && dsn.dsnToString(this._dsn));\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(beforeSendResult, beforeSendLabel) {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (is.isThenable(beforeSendResult)) {\n    return beforeSendResult.then(event => {\n      if (!is.isPlainObject(event) && event !== null) {\n        throw new error.SentryError(invalidValueError);\n      }\n      return event;\n    }, e => {\n      throw new error.SentryError(`${beforeSendLabel} rejected with ${e}`);\n    });\n  } else if (!is.isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw new error.SentryError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(client, options, event, hint) {\n  const {\n    beforeSend,\n    beforeSendTransaction,\n    beforeSendSpan\n  } = options;\n  if (isErrorEvent(event) && beforeSend) {\n    return beforeSend(event, hint);\n  }\n  if (isTransactionEvent(event)) {\n    if (event.spans && beforeSendSpan) {\n      const processedSpans = [];\n      for (const span of event.spans) {\n        const processedSpan = beforeSendSpan(span);\n        if (processedSpan) {\n          processedSpans.push(processedSpan);\n        } else {\n          spanUtils.showSpanDropWarning();\n          client.recordDroppedEvent('before_send', 'span');\n        }\n      }\n      event.spans = processedSpans;\n    }\n    if (beforeSendTransaction) {\n      if (event.spans) {\n        // We store the # of spans before processing in SDK metadata,\n        // so we can compare it afterwards to determine how many spans were dropped\n        const spanCountBefore = event.spans.length;\n        event.sdkProcessingMetadata = {\n          ...event.sdkProcessingMetadata,\n          spanCountBeforeProcessing: spanCountBefore\n        };\n      }\n      return beforeSendTransaction(event, hint);\n    }\n  }\n  return event;\n}\nfunction isErrorEvent(event) {\n  return event.type === undefined;\n}\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\nexports.BaseClient = BaseClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/baseclient.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/breadcrumbs.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst time = __webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nfunction addBreadcrumb(breadcrumb, hint) {\n  const client = currentScopes.getClient();\n  const isolationScope = currentScopes.getIsolationScope();\n  if (!client) return;\n  const {\n    beforeBreadcrumb = null,\n    maxBreadcrumbs = DEFAULT_BREADCRUMBS\n  } = client.getOptions();\n  if (maxBreadcrumbs <= 0) return;\n  const timestamp = time.dateTimestampInSeconds();\n  const mergedBreadcrumb = {\n    timestamp,\n    ...breadcrumb\n  };\n  const finalBreadcrumb = beforeBreadcrumb ? logger.consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;\n  if (finalBreadcrumb === null) return;\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\nexports.addBreadcrumb = addBreadcrumb;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvYnJlYWRjcnVtYnMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsK0ZBQW9CLENBQUM7QUFDbkQsTUFBTUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLHlHQUF5QixDQUFDO0FBQ2pELE1BQU1FLElBQUksR0FBR0YsbUJBQU8sQ0FBQyxxR0FBdUIsQ0FBQzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNRyxtQkFBbUIsR0FBRyxHQUFHOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxhQUFhQSxDQUFDQyxVQUFVLEVBQUVDLElBQUksRUFBRTtFQUN2QyxNQUFNQyxNQUFNLEdBQUdSLGFBQWEsQ0FBQ1MsU0FBUyxDQUFDLENBQUM7RUFDeEMsTUFBTUMsY0FBYyxHQUFHVixhQUFhLENBQUNXLGlCQUFpQixDQUFDLENBQUM7RUFFeEQsSUFBSSxDQUFDSCxNQUFNLEVBQUU7RUFFYixNQUFNO0lBQUVJLGdCQUFnQixHQUFHLElBQUk7SUFBRUMsY0FBYyxHQUFHVDtFQUFvQixDQUFDLEdBQUdJLE1BQU0sQ0FBQ00sVUFBVSxDQUFDLENBQUM7RUFFN0YsSUFBSUQsY0FBYyxJQUFJLENBQUMsRUFBRTtFQUV6QixNQUFNRSxTQUFTLEdBQUdaLElBQUksQ0FBQ2Esc0JBQXNCLENBQUMsQ0FBQztFQUMvQyxNQUFNQyxnQkFBZ0IsR0FBRztJQUFFRixTQUFTO0lBQUUsR0FBR1Q7RUFBVyxDQUFDO0VBQ3JELE1BQU1ZLGVBQWUsR0FBR04sZ0JBQWdCLEdBQ25DVixNQUFNLENBQUNpQixjQUFjLENBQUMsTUFBTVAsZ0JBQWdCLENBQUNLLGdCQUFnQixFQUFFVixJQUFJLENBQUMsQ0FBQyxHQUN0RVUsZ0JBQWdCO0VBRXBCLElBQUlDLGVBQWUsS0FBSyxJQUFJLEVBQUU7RUFFOUIsSUFBSVYsTUFBTSxDQUFDWSxJQUFJLEVBQUU7SUFDZlosTUFBTSxDQUFDWSxJQUFJLENBQUMscUJBQXFCLEVBQUVGLGVBQWUsRUFBRVgsSUFBSSxDQUFDO0VBQzNEO0VBRUFHLGNBQWMsQ0FBQ0wsYUFBYSxDQUFDYSxlQUFlLEVBQUVMLGNBQWMsQ0FBQztBQUMvRDtBQUVBZixxQkFBcUIsR0FBR08sYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9icmVhZGNydW1icy5qcz8wNDhjIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGN1cnJlbnRTY29wZXMgPSByZXF1aXJlKCcuL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvbG9nZ2VyLmpzJyk7XG5jb25zdCB0aW1lID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC90aW1lLmpzJyk7XG5cbi8qKlxuICogRGVmYXVsdCBtYXhpbXVtIG51bWJlciBvZiBicmVhZGNydW1icyBhZGRlZCB0byBhbiBldmVudC4gQ2FuIGJlIG92ZXJ3cml0dGVuXG4gKiB3aXRoIHtAbGluayBPcHRpb25zLm1heEJyZWFkY3J1bWJzfS5cbiAqL1xuY29uc3QgREVGQVVMVF9CUkVBRENSVU1CUyA9IDEwMDtcblxuLyoqXG4gKiBSZWNvcmRzIGEgbmV3IGJyZWFkY3J1bWIgd2hpY2ggd2lsbCBiZSBhdHRhY2hlZCB0byBmdXR1cmUgZXZlbnRzLlxuICpcbiAqIEJyZWFkY3J1bWJzIHdpbGwgYmUgYWRkZWQgdG8gc3Vic2VxdWVudCBldmVudHMgdG8gcHJvdmlkZSBtb3JlIGNvbnRleHQgb25cbiAqIHVzZXIncyBhY3Rpb25zIHByaW9yIHRvIGFuIGVycm9yIG9yIGNyYXNoLlxuICovXG5mdW5jdGlvbiBhZGRCcmVhZGNydW1iKGJyZWFkY3J1bWIsIGhpbnQpIHtcbiAgY29uc3QgY2xpZW50ID0gY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKTtcbiAgY29uc3QgaXNvbGF0aW9uU2NvcGUgPSBjdXJyZW50U2NvcGVzLmdldElzb2xhdGlvblNjb3BlKCk7XG5cbiAgaWYgKCFjbGllbnQpIHJldHVybjtcblxuICBjb25zdCB7IGJlZm9yZUJyZWFkY3J1bWIgPSBudWxsLCBtYXhCcmVhZGNydW1icyA9IERFRkFVTFRfQlJFQURDUlVNQlMgfSA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG5cbiAgaWYgKG1heEJyZWFkY3J1bWJzIDw9IDApIHJldHVybjtcblxuICBjb25zdCB0aW1lc3RhbXAgPSB0aW1lLmRhdGVUaW1lc3RhbXBJblNlY29uZHMoKTtcbiAgY29uc3QgbWVyZ2VkQnJlYWRjcnVtYiA9IHsgdGltZXN0YW1wLCAuLi5icmVhZGNydW1iIH07XG4gIGNvbnN0IGZpbmFsQnJlYWRjcnVtYiA9IGJlZm9yZUJyZWFkY3J1bWJcbiAgICA/IChsb2dnZXIuY29uc29sZVNhbmRib3goKCkgPT4gYmVmb3JlQnJlYWRjcnVtYihtZXJnZWRCcmVhZGNydW1iLCBoaW50KSkgKVxuICAgIDogbWVyZ2VkQnJlYWRjcnVtYjtcblxuICBpZiAoZmluYWxCcmVhZGNydW1iID09PSBudWxsKSByZXR1cm47XG5cbiAgaWYgKGNsaWVudC5lbWl0KSB7XG4gICAgY2xpZW50LmVtaXQoJ2JlZm9yZUFkZEJyZWFkY3J1bWInLCBmaW5hbEJyZWFkY3J1bWIsIGhpbnQpO1xuICB9XG5cbiAgaXNvbGF0aW9uU2NvcGUuYWRkQnJlYWRjcnVtYihmaW5hbEJyZWFkY3J1bWIsIG1heEJyZWFkY3J1bWJzKTtcbn1cblxuZXhwb3J0cy5hZGRCcmVhZGNydW1iID0gYWRkQnJlYWRjcnVtYjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyZWFkY3J1bWJzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3VycmVudFNjb3BlcyIsInJlcXVpcmUiLCJsb2dnZXIiLCJ0aW1lIiwiREVGQVVMVF9CUkVBRENSVU1CUyIsImFkZEJyZWFkY3J1bWIiLCJicmVhZGNydW1iIiwiaGludCIsImNsaWVudCIsImdldENsaWVudCIsImlzb2xhdGlvblNjb3BlIiwiZ2V0SXNvbGF0aW9uU2NvcGUiLCJiZWZvcmVCcmVhZGNydW1iIiwibWF4QnJlYWRjcnVtYnMiLCJnZXRPcHRpb25zIiwidGltZXN0YW1wIiwiZGF0ZVRpbWVzdGFtcEluU2Vjb25kcyIsIm1lcmdlZEJyZWFkY3J1bWIiLCJmaW5hbEJyZWFkY3J1bWIiLCJjb25zb2xlU2FuZGJveCIsImVtaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/carrier.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst version = __webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * An object that contains globally accessible properties and maintains a scope stack.\n * @hidden\n */\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  // This ensures a Sentry carrier exists\n  getSentryCarrier(worldwide.GLOBAL_OBJ);\n  return worldwide.GLOBAL_OBJ;\n}\n\n/** Will either get the existing sentry carrier, or create a new one. */\nfunction getSentryCarrier(carrier) {\n  const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n\n  // For now: First SDK that sets the .version property wins\n  __SENTRY__.version = __SENTRY__.version || version.SDK_VERSION;\n\n  // Intentionally populating and returning the version of \"this\" SDK instance\n  // rather than what's set in .version so that \"this\" SDK always gets its carrier\n  return __SENTRY__[version.SDK_VERSION] = __SENTRY__[version.SDK_VERSION] || {};\n}\nexports.getMainCarrier = getMainCarrier;\nexports.getSentryCarrier = getSentryCarrier;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY2Fycmllci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQywyR0FBMEIsQ0FBQztBQUNuRCxNQUFNQyxTQUFTLEdBQUdELG1CQUFPLENBQUMsK0dBQTRCLENBQUM7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsY0FBY0EsQ0FBQSxFQUFHO0VBQ3hCO0VBQ0FDLGdCQUFnQixDQUFDRixTQUFTLENBQUNHLFVBQVUsQ0FBQztFQUN0QyxPQUFPSCxTQUFTLENBQUNHLFVBQVU7QUFDN0I7O0FBRUE7QUFDQSxTQUFTRCxnQkFBZ0JBLENBQUNFLE9BQU8sRUFBRTtFQUNqQyxNQUFNQyxVQUFVLEdBQUlELE9BQU8sQ0FBQ0MsVUFBVSxHQUFHRCxPQUFPLENBQUNDLFVBQVUsSUFBSSxDQUFDLENBQUU7O0VBRWxFO0VBQ0FBLFVBQVUsQ0FBQ1AsT0FBTyxHQUFHTyxVQUFVLENBQUNQLE9BQU8sSUFBSUEsT0FBTyxDQUFDUSxXQUFXOztFQUU5RDtFQUNBO0VBQ0EsT0FBUUQsVUFBVSxDQUFDUCxPQUFPLENBQUNRLFdBQVcsQ0FBQyxHQUFHRCxVQUFVLENBQUNQLE9BQU8sQ0FBQ1EsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pGO0FBRUFWLHNCQUFzQixHQUFHSyxjQUFjO0FBQ3ZDTCx3QkFBd0IsR0FBR00sZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2NhcnJpZXIuanM/NmI2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB2ZXJzaW9uID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC92ZXJzaW9uLmpzJyk7XG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L3dvcmxkd2lkZS5qcycpO1xuXG4vKipcbiAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGdsb2JhbGx5IGFjY2Vzc2libGUgcHJvcGVydGllcyBhbmQgbWFpbnRhaW5zIGEgc2NvcGUgc3RhY2suXG4gKiBAaGlkZGVuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnbG9iYWwgc2hpbSByZWdpc3RyeS5cbiAqXG4gKiBGSVhNRTogVGhpcyBmdW5jdGlvbiBpcyBwcm9ibGVtYXRpYywgYmVjYXVzZSBkZXNwaXRlIGFsd2F5cyByZXR1cm5pbmcgYSB2YWxpZCBDYXJyaWVyLFxuICogaXQgaGFzIGFuIG9wdGlvbmFsIGBfX1NFTlRSWV9fYCBwcm9wZXJ0eSwgd2hpY2ggdGhlbiBpbiB0dXJuIHJlcXVpcmVzIHVzIHRvIGFsd2F5cyBwZXJmb3JtIGFuIHVubmVjZXNzYXJ5IGNoZWNrXG4gKiBhdCB0aGUgY2FsbC1zaXRlLiBXZSBhbHdheXMgYWNjZXNzIHRoZSBjYXJyaWVyIHRocm91Z2ggdGhpcyBmdW5jdGlvbiwgc28gd2UgY2FuIGd1YXJhbnRlZSB0aGF0IGBfX1NFTlRSWV9fYCBpcyB0aGVyZS5cbiAqKi9cbmZ1bmN0aW9uIGdldE1haW5DYXJyaWVyKCkge1xuICAvLyBUaGlzIGVuc3VyZXMgYSBTZW50cnkgY2FycmllciBleGlzdHNcbiAgZ2V0U2VudHJ5Q2Fycmllcih3b3JsZHdpZGUuR0xPQkFMX09CSik7XG4gIHJldHVybiB3b3JsZHdpZGUuR0xPQkFMX09CSjtcbn1cblxuLyoqIFdpbGwgZWl0aGVyIGdldCB0aGUgZXhpc3Rpbmcgc2VudHJ5IGNhcnJpZXIsIG9yIGNyZWF0ZSBhIG5ldyBvbmUuICovXG5mdW5jdGlvbiBnZXRTZW50cnlDYXJyaWVyKGNhcnJpZXIpIHtcbiAgY29uc3QgX19TRU5UUllfXyA9IChjYXJyaWVyLl9fU0VOVFJZX18gPSBjYXJyaWVyLl9fU0VOVFJZX18gfHwge30pO1xuXG4gIC8vIEZvciBub3c6IEZpcnN0IFNESyB0aGF0IHNldHMgdGhlIC52ZXJzaW9uIHByb3BlcnR5IHdpbnNcbiAgX19TRU5UUllfXy52ZXJzaW9uID0gX19TRU5UUllfXy52ZXJzaW9uIHx8IHZlcnNpb24uU0RLX1ZFUlNJT047XG5cbiAgLy8gSW50ZW50aW9uYWxseSBwb3B1bGF0aW5nIGFuZCByZXR1cm5pbmcgdGhlIHZlcnNpb24gb2YgXCJ0aGlzXCIgU0RLIGluc3RhbmNlXG4gIC8vIHJhdGhlciB0aGFuIHdoYXQncyBzZXQgaW4gLnZlcnNpb24gc28gdGhhdCBcInRoaXNcIiBTREsgYWx3YXlzIGdldHMgaXRzIGNhcnJpZXJcbiAgcmV0dXJuIChfX1NFTlRSWV9fW3ZlcnNpb24uU0RLX1ZFUlNJT05dID0gX19TRU5UUllfX1t2ZXJzaW9uLlNES19WRVJTSU9OXSB8fCB7fSk7XG59XG5cbmV4cG9ydHMuZ2V0TWFpbkNhcnJpZXIgPSBnZXRNYWluQ2FycmllcjtcbmV4cG9ydHMuZ2V0U2VudHJ5Q2FycmllciA9IGdldFNlbnRyeUNhcnJpZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXJyaWVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmVyc2lvbiIsInJlcXVpcmUiLCJ3b3JsZHdpZGUiLCJnZXRNYWluQ2FycmllciIsImdldFNlbnRyeUNhcnJpZXIiLCJHTE9CQUxfT0JKIiwiY2FycmllciIsIl9fU0VOVFJZX18iLCJTREtfVkVSU0lPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/checkin.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dsn = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst envelope = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * Create envelope from check in item.\n */\nfunction createCheckInEnvelope(checkIn, dynamicSamplingContext, metadata, tunnel, dsn$1) {\n  const headers = {\n    sent_at: new Date().toISOString()\n  };\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version\n    };\n  }\n  if (!!tunnel && !!dsn$1) {\n    headers.dsn = dsn.dsnToString(dsn$1);\n  }\n  if (dynamicSamplingContext) {\n    headers.trace = object.dropUndefinedKeys(dynamicSamplingContext);\n  }\n  const item = createCheckInEnvelopeItem(checkIn);\n  return envelope.createEnvelope(headers, [item]);\n}\nfunction createCheckInEnvelopeItem(checkIn) {\n  const checkInHeaders = {\n    type: 'check_in'\n  };\n  return [checkInHeaders, checkIn];\n}\nexports.createCheckInEnvelope = createCheckInEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY2hlY2tpbi5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLEdBQUcsR0FBR0MsbUJBQU8sQ0FBQyxtR0FBc0IsQ0FBQztBQUMzQyxNQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsNkdBQTJCLENBQUM7QUFDckQsTUFBTUUsTUFBTSxHQUFHRixtQkFBTyxDQUFDLHlHQUF5QixDQUFDOztBQUVqRDtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxxQkFBcUJBLENBQzVCQyxPQUFPLEVBQ1BDLHNCQUFzQixFQUN0QkMsUUFBUSxFQUNSQyxNQUFNLEVBQ05DLEtBQUssRUFDTDtFQUNBLE1BQU1DLE9BQU8sR0FBRztJQUNkQyxPQUFPLEVBQUUsSUFBSUMsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDO0VBQ2xDLENBQUM7RUFFRCxJQUFJTixRQUFRLElBQUlBLFFBQVEsQ0FBQ08sR0FBRyxFQUFFO0lBQzVCSixPQUFPLENBQUNJLEdBQUcsR0FBRztNQUNaQyxJQUFJLEVBQUVSLFFBQVEsQ0FBQ08sR0FBRyxDQUFDQyxJQUFJO01BQ3ZCQyxPQUFPLEVBQUVULFFBQVEsQ0FBQ08sR0FBRyxDQUFDRTtJQUN4QixDQUFDO0VBQ0g7RUFFQSxJQUFJLENBQUMsQ0FBQ1IsTUFBTSxJQUFJLENBQUMsQ0FBQ0MsS0FBSyxFQUFFO0lBQ3ZCQyxPQUFPLENBQUNWLEdBQUcsR0FBR0EsR0FBRyxDQUFDaUIsV0FBVyxDQUFDUixLQUFLLENBQUM7RUFDdEM7RUFFQSxJQUFJSCxzQkFBc0IsRUFBRTtJQUMxQkksT0FBTyxDQUFDUSxLQUFLLEdBQUdmLE1BQU0sQ0FBQ2dCLGlCQUFpQixDQUFDYixzQkFBc0IsQ0FBQztFQUNsRTtFQUVBLE1BQU1jLElBQUksR0FBR0MseUJBQXlCLENBQUNoQixPQUFPLENBQUM7RUFDL0MsT0FBT0gsUUFBUSxDQUFDb0IsY0FBYyxDQUFDWixPQUFPLEVBQUUsQ0FBQ1UsSUFBSSxDQUFDLENBQUM7QUFDakQ7QUFFQSxTQUFTQyx5QkFBeUJBLENBQUNoQixPQUFPLEVBQUU7RUFDMUMsTUFBTWtCLGNBQWMsR0FBRztJQUNyQkMsSUFBSSxFQUFFO0VBQ1IsQ0FBQztFQUNELE9BQU8sQ0FBQ0QsY0FBYyxFQUFFbEIsT0FBTyxDQUFDO0FBQ2xDO0FBRUFQLDZCQUE2QixHQUFHTSxxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY2hlY2tpbi5qcz9mODcyIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGRzbiA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvZHNuLmpzJyk7XG5jb25zdCBlbnZlbG9wZSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvZW52ZWxvcGUuanMnKTtcbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3Qvb2JqZWN0LmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGVudmVsb3BlIGZyb20gY2hlY2sgaW4gaXRlbS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2hlY2tJbkVudmVsb3BlKFxuICBjaGVja0luLFxuICBkeW5hbWljU2FtcGxpbmdDb250ZXh0LFxuICBtZXRhZGF0YSxcbiAgdHVubmVsLFxuICBkc24kMSxcbikge1xuICBjb25zdCBoZWFkZXJzID0ge1xuICAgIHNlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgfTtcblxuICBpZiAobWV0YWRhdGEgJiYgbWV0YWRhdGEuc2RrKSB7XG4gICAgaGVhZGVycy5zZGsgPSB7XG4gICAgICBuYW1lOiBtZXRhZGF0YS5zZGsubmFtZSxcbiAgICAgIHZlcnNpb246IG1ldGFkYXRhLnNkay52ZXJzaW9uLFxuICAgIH07XG4gIH1cblxuICBpZiAoISF0dW5uZWwgJiYgISFkc24kMSkge1xuICAgIGhlYWRlcnMuZHNuID0gZHNuLmRzblRvU3RyaW5nKGRzbiQxKTtcbiAgfVxuXG4gIGlmIChkeW5hbWljU2FtcGxpbmdDb250ZXh0KSB7XG4gICAgaGVhZGVycy50cmFjZSA9IG9iamVjdC5kcm9wVW5kZWZpbmVkS2V5cyhkeW5hbWljU2FtcGxpbmdDb250ZXh0KSA7XG4gIH1cblxuICBjb25zdCBpdGVtID0gY3JlYXRlQ2hlY2tJbkVudmVsb3BlSXRlbShjaGVja0luKTtcbiAgcmV0dXJuIGVudmVsb3BlLmNyZWF0ZUVudmVsb3BlKGhlYWRlcnMsIFtpdGVtXSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNoZWNrSW5FbnZlbG9wZUl0ZW0oY2hlY2tJbikge1xuICBjb25zdCBjaGVja0luSGVhZGVycyA9IHtcbiAgICB0eXBlOiAnY2hlY2tfaW4nLFxuICB9O1xuICByZXR1cm4gW2NoZWNrSW5IZWFkZXJzLCBjaGVja0luXTtcbn1cblxuZXhwb3J0cy5jcmVhdGVDaGVja0luRW52ZWxvcGUgPSBjcmVhdGVDaGVja0luRW52ZWxvcGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja2luLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZHNuIiwicmVxdWlyZSIsImVudmVsb3BlIiwib2JqZWN0IiwiY3JlYXRlQ2hlY2tJbkVudmVsb3BlIiwiY2hlY2tJbiIsImR5bmFtaWNTYW1wbGluZ0NvbnRleHQiLCJtZXRhZGF0YSIsInR1bm5lbCIsImRzbiQxIiwiaGVhZGVycyIsInNlbnRfYXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzZGsiLCJuYW1lIiwidmVyc2lvbiIsImRzblRvU3RyaW5nIiwidHJhY2UiLCJkcm9wVW5kZWZpbmVkS2V5cyIsIml0ZW0iLCJjcmVhdGVDaGVja0luRW52ZWxvcGVJdGVtIiwiY3JlYXRlRW52ZWxvcGUiLCJjaGVja0luSGVhZGVycyIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/constants.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/constants.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst DEFAULT_ENVIRONMENT = 'production';\nexports.DEFAULT_ENVIRONMENT = DEFAULT_ENVIRONMENT;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsbUJBQW1CLEdBQUcsWUFBWTtBQUV4Q0YsMkJBQTJCLEdBQUdFLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9jb25zdGFudHMuanM/NGZkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBERUZBVUxUX0VOVklST05NRU5UID0gJ3Byb2R1Y3Rpb24nO1xuXG5leHBvcnRzLkRFRkFVTFRfRU5WSVJPTk1FTlQgPSBERUZBVUxUX0VOVklST05NRU5UO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiREVGQVVMVF9FTlZJUk9OTUVOVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/currentScopes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst index = __webpack_require__(/*! ./asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ./carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst scope = __webpack_require__(/*! ./scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * Get the currently active scope.\n */\nfunction getCurrentScope() {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  return acs.getCurrentScope();\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */\nfunction getIsolationScope() {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  return acs.getIsolationScope();\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nfunction getGlobalScope() {\n  return worldwide.getGlobalSingleton('globalScope', () => new scope.Scope());\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */\n\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nfunction withScope(...rest) {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n    if (!scope) {\n      return acs.withScope(callback);\n    }\n    return acs.withSetScope(scope, callback);\n  }\n  return acs.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */\n\n/**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */\nfunction withIsolationScope(...rest) {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [isolationScope, callback] = rest;\n    if (!isolationScope) {\n      return acs.withIsolationScope(callback);\n    }\n    return acs.withSetIsolationScope(isolationScope, callback);\n  }\n  return acs.withIsolationScope(rest[0]);\n}\n\n/**\n * Get the currently active client.\n */\nfunction getClient() {\n  return getCurrentScope().getClient();\n}\n\n/**\n * Get a trace context for the given scope.\n */\nfunction getTraceContextFromScope(scope) {\n  const propagationContext = scope.getPropagationContext();\n\n  // TODO(v9): Use generateSpanId() instead of spanId\n  // eslint-disable-next-line deprecation/deprecation\n  const {\n    traceId,\n    spanId,\n    parentSpanId\n  } = propagationContext;\n  const traceContext = object.dropUndefinedKeys({\n    trace_id: traceId,\n    span_id: spanId,\n    parent_span_id: parentSpanId\n  });\n  return traceContext;\n}\nexports.getClient = getClient;\nexports.getCurrentScope = getCurrentScope;\nexports.getGlobalScope = getGlobalScope;\nexports.getIsolationScope = getIsolationScope;\nexports.getTraceContextFromScope = getTraceContextFromScope;\nexports.withIsolationScope = withIsolationScope;\nexports.withScope = withScope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvY3VycmVudFNjb3Blcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyx5R0FBeUIsQ0FBQztBQUNoRCxNQUFNQyxPQUFPLEdBQUdELG1CQUFPLENBQUMsbUZBQWMsQ0FBQztBQUN2QyxNQUFNRSxLQUFLLEdBQUdGLG1CQUFPLENBQUMsK0VBQVksQ0FBQztBQUNuQyxNQUFNRyxNQUFNLEdBQUdILG1CQUFPLENBQUMseUdBQXlCLENBQUM7QUFDakQsTUFBTUksU0FBUyxHQUFHSixtQkFBTyxDQUFDLCtHQUE0QixDQUFDOztBQUV2RDtBQUNBO0FBQ0E7QUFDQSxTQUFTSyxlQUFlQSxDQUFBLEVBQUc7RUFDekIsTUFBTUMsU0FBUyxHQUFHTCxPQUFPLENBQUNNLGNBQWMsQ0FBQyxDQUFDO0VBQzFDLE1BQU1DLEdBQUcsR0FBR1QsS0FBSyxDQUFDVSx1QkFBdUIsQ0FBQ0gsU0FBUyxDQUFDO0VBQ3BELE9BQU9FLEdBQUcsQ0FBQ0gsZUFBZSxDQUFDLENBQUM7QUFDOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTSyxpQkFBaUJBLENBQUEsRUFBRztFQUMzQixNQUFNSixTQUFTLEdBQUdMLE9BQU8sQ0FBQ00sY0FBYyxDQUFDLENBQUM7RUFDMUMsTUFBTUMsR0FBRyxHQUFHVCxLQUFLLENBQUNVLHVCQUF1QixDQUFDSCxTQUFTLENBQUM7RUFDcEQsT0FBT0UsR0FBRyxDQUFDRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsY0FBY0EsQ0FBQSxFQUFHO0VBQ3hCLE9BQU9QLFNBQVMsQ0FBQ1Esa0JBQWtCLENBQUMsYUFBYSxFQUFFLE1BQU0sSUFBSVYsS0FBSyxDQUFDVyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzdFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsU0FBU0EsQ0FDaEIsR0FBR0MsSUFBSSxFQUNQO0VBQ0EsTUFBTVQsU0FBUyxHQUFHTCxPQUFPLENBQUNNLGNBQWMsQ0FBQyxDQUFDO0VBQzFDLE1BQU1DLEdBQUcsR0FBR1QsS0FBSyxDQUFDVSx1QkFBdUIsQ0FBQ0gsU0FBUyxDQUFDOztFQUVwRDtFQUNBLElBQUlTLElBQUksQ0FBQ0MsTUFBTSxLQUFLLENBQUMsRUFBRTtJQUNyQixNQUFNLENBQUNkLEtBQUssRUFBRWUsUUFBUSxDQUFDLEdBQUdGLElBQUk7SUFFOUIsSUFBSSxDQUFDYixLQUFLLEVBQUU7TUFDVixPQUFPTSxHQUFHLENBQUNNLFNBQVMsQ0FBQ0csUUFBUSxDQUFDO0lBQ2hDO0lBRUEsT0FBT1QsR0FBRyxDQUFDVSxZQUFZLENBQUNoQixLQUFLLEVBQUVlLFFBQVEsQ0FBQztFQUMxQztFQUVBLE9BQU9ULEdBQUcsQ0FBQ00sU0FBUyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0ksa0JBQWtCQSxDQUN6QixHQUFHSixJQUFJLEVBRVA7RUFDQSxNQUFNVCxTQUFTLEdBQUdMLE9BQU8sQ0FBQ00sY0FBYyxDQUFDLENBQUM7RUFDMUMsTUFBTUMsR0FBRyxHQUFHVCxLQUFLLENBQUNVLHVCQUF1QixDQUFDSCxTQUFTLENBQUM7O0VBRXBEO0VBQ0EsSUFBSVMsSUFBSSxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQ3JCLE1BQU0sQ0FBQ0ksY0FBYyxFQUFFSCxRQUFRLENBQUMsR0FBR0YsSUFBSTtJQUV2QyxJQUFJLENBQUNLLGNBQWMsRUFBRTtNQUNuQixPQUFPWixHQUFHLENBQUNXLGtCQUFrQixDQUFDRixRQUFRLENBQUM7SUFDekM7SUFFQSxPQUFPVCxHQUFHLENBQUNhLHFCQUFxQixDQUFDRCxjQUFjLEVBQUVILFFBQVEsQ0FBQztFQUM1RDtFQUVBLE9BQU9ULEdBQUcsQ0FBQ1csa0JBQWtCLENBQUNKLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTTyxTQUFTQSxDQUFBLEVBQUc7RUFDbkIsT0FBT2pCLGVBQWUsQ0FBQyxDQUFDLENBQUNpQixTQUFTLENBQUMsQ0FBQztBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyx3QkFBd0JBLENBQUNyQixLQUFLLEVBQUU7RUFDdkMsTUFBTXNCLGtCQUFrQixHQUFHdEIsS0FBSyxDQUFDdUIscUJBQXFCLENBQUMsQ0FBQzs7RUFFeEQ7RUFDQTtFQUNBLE1BQU07SUFBRUMsT0FBTztJQUFFQyxNQUFNO0lBQUVDO0VBQWEsQ0FBQyxHQUFHSixrQkFBa0I7RUFFNUQsTUFBTUssWUFBWSxHQUFHMUIsTUFBTSxDQUFDMkIsaUJBQWlCLENBQUM7SUFDNUNDLFFBQVEsRUFBRUwsT0FBTztJQUNqQk0sT0FBTyxFQUFFTCxNQUFNO0lBQ2ZNLGNBQWMsRUFBRUw7RUFDbEIsQ0FBQyxDQUFDO0VBRUYsT0FBT0MsWUFBWTtBQUNyQjtBQUVBaEMsaUJBQWlCLEdBQUd5QixTQUFTO0FBQzdCekIsdUJBQXVCLEdBQUdRLGVBQWU7QUFDekNSLHNCQUFzQixHQUFHYyxjQUFjO0FBQ3ZDZCx5QkFBeUIsR0FBR2EsaUJBQWlCO0FBQzdDYixnQ0FBZ0MsR0FBRzBCLHdCQUF3QjtBQUMzRDFCLDBCQUEwQixHQUFHc0Isa0JBQWtCO0FBQy9DdEIsaUJBQWlCLEdBQUdpQixTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2N1cnJlbnRTY29wZXMuanM/NTk2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4vYXN5bmNDb250ZXh0L2luZGV4LmpzJyk7XG5jb25zdCBjYXJyaWVyID0gcmVxdWlyZSgnLi9jYXJyaWVyLmpzJyk7XG5jb25zdCBzY29wZSA9IHJlcXVpcmUoJy4vc2NvcGUuanMnKTtcbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3Qvb2JqZWN0LmpzJyk7XG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L3dvcmxkd2lkZS5qcycpO1xuXG4vKipcbiAqIEdldCB0aGUgY3VycmVudGx5IGFjdGl2ZSBzY29wZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q3VycmVudFNjb3BlKCkge1xuICBjb25zdCBjYXJyaWVyJDEgPSBjYXJyaWVyLmdldE1haW5DYXJyaWVyKCk7XG4gIGNvbnN0IGFjcyA9IGluZGV4LmdldEFzeW5jQ29udGV4dFN0cmF0ZWd5KGNhcnJpZXIkMSk7XG4gIHJldHVybiBhY3MuZ2V0Q3VycmVudFNjb3BlKCk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50bHkgYWN0aXZlIGlzb2xhdGlvbiBzY29wZS5cbiAqIFRoZSBpc29sYXRpb24gc2NvcGUgaXMgYWN0aXZlIGZvciB0aGUgY3VycmVudCBleGVjdXRpb24gY29udGV4dC5cbiAqL1xuZnVuY3Rpb24gZ2V0SXNvbGF0aW9uU2NvcGUoKSB7XG4gIGNvbnN0IGNhcnJpZXIkMSA9IGNhcnJpZXIuZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3QgYWNzID0gaW5kZXguZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koY2FycmllciQxKTtcbiAgcmV0dXJuIGFjcy5nZXRJc29sYXRpb25TY29wZSgpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgZ2xvYmFsIHNjb3BlLlxuICogVGhpcyBzY29wZSBpcyBhcHBsaWVkIHRvIF9hbGxfIGV2ZW50cy5cbiAqL1xuZnVuY3Rpb24gZ2V0R2xvYmFsU2NvcGUoKSB7XG4gIHJldHVybiB3b3JsZHdpZGUuZ2V0R2xvYmFsU2luZ2xldG9uKCdnbG9iYWxTY29wZScsICgpID0+IG5ldyBzY29wZS5TY29wZSgpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNjb3BlIHdpdGggYW5kIGV4ZWN1dGVzIHRoZSBnaXZlbiBvcGVyYXRpb24gd2l0aGluLlxuICogVGhlIHNjb3BlIGlzIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBvbmNlIHRoZSBvcGVyYXRpb25cbiAqIGZpbmlzaGVzIG9yIHRocm93cy5cbiAqL1xuXG4vKipcbiAqIEVpdGhlciBjcmVhdGVzIGEgbmV3IGFjdGl2ZSBzY29wZSwgb3Igc2V0cyB0aGUgZ2l2ZW4gc2NvcGUgYXMgYWN0aXZlIHNjb3BlIGluIHRoZSBnaXZlbiBjYWxsYmFjay5cbiAqL1xuZnVuY3Rpb24gd2l0aFNjb3BlKFxuICAuLi5yZXN0XG4pIHtcbiAgY29uc3QgY2FycmllciQxID0gY2Fycmllci5nZXRNYWluQ2FycmllcigpO1xuICBjb25zdCBhY3MgPSBpbmRleC5nZXRBc3luY0NvbnRleHRTdHJhdGVneShjYXJyaWVyJDEpO1xuXG4gIC8vIElmIGEgc2NvcGUgaXMgZGVmaW5lZCwgd2Ugd2FudCB0byBtYWtlIHRoaXMgdGhlIGFjdGl2ZSBzY29wZSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IG9uZVxuICBpZiAocmVzdC5sZW5ndGggPT09IDIpIHtcbiAgICBjb25zdCBbc2NvcGUsIGNhbGxiYWNrXSA9IHJlc3Q7XG5cbiAgICBpZiAoIXNjb3BlKSB7XG4gICAgICByZXR1cm4gYWNzLndpdGhTY29wZShjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjcy53aXRoU2V0U2NvcGUoc2NvcGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHJldHVybiBhY3Mud2l0aFNjb3BlKHJlc3RbMF0pO1xufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGZvcmsgdGhlIGN1cnJlbnQgaXNvbGF0aW9uIHNjb3BlIGFuZCB0aGUgY3VycmVudCBzY29wZSBiYXNlZCBvbiB0aGUgY3VycmVudCBhc3luYyBjb250ZXh0IHN0cmF0ZWd5LiBJZiBub1xuICogYXN5bmMgY29udGV4dCBzdHJhdGVneSBpcyBzZXQsIHRoZSBpc29sYXRpb24gc2NvcGUgYW5kIHRoZSBjdXJyZW50IHNjb3BlIHdpbGwgbm90IGJlIGZvcmtlZCAodGhpcyBpcyBjdXJyZW50bHkgdGhlXG4gKiBjYXNlLCBmb3IgZXhhbXBsZSwgaW4gdGhlIGJyb3dzZXIpLlxuICpcbiAqIFVzYWdlIG9mIHRoaXMgZnVuY3Rpb24gaW4gZW52aXJvbm1lbnRzIHdpdGhvdXQgYXN5bmMgY29udGV4dCBzdHJhdGVneSBpcyBkaXNjb3VyYWdlZCBhbmQgbWF5IGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvdXIuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCBmb3IgU2VudHJ5IFNESyBhbmQgU0RLIGludGVncmF0aW9uIGRldmVsb3BtZW50LiBJdCBpcyBub3QgcmVjb21tZW5kZWQgdG8gYmUgdXNlZCBpbiBcIm5vcm1hbFwiXG4gKiBhcHBsaWNhdGlvbnMgZGlyZWN0bHkgYmVjYXVzZSBpdCBjb21lcyB3aXRoIHBpdGZhbGxzLiBVc2UgYXQgeW91ciBvd24gcmlzayFcbiAqL1xuXG4vKipcbiAqIEVpdGhlciBjcmVhdGVzIGEgbmV3IGFjdGl2ZSBpc29sYXRpb24gc2NvcGUsIG9yIHNldHMgdGhlIGdpdmVuIGlzb2xhdGlvbiBzY29wZSBhcyBhY3RpdmUgc2NvcGUgaW4gdGhlIGdpdmVuIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiB3aXRoSXNvbGF0aW9uU2NvcGUoXG4gIC4uLnJlc3RcblxuKSB7XG4gIGNvbnN0IGNhcnJpZXIkMSA9IGNhcnJpZXIuZ2V0TWFpbkNhcnJpZXIoKTtcbiAgY29uc3QgYWNzID0gaW5kZXguZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3koY2FycmllciQxKTtcblxuICAvLyBJZiBhIHNjb3BlIGlzIGRlZmluZWQsIHdlIHdhbnQgdG8gbWFrZSB0aGlzIHRoZSBhY3RpdmUgc2NvcGUgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBvbmVcbiAgaWYgKHJlc3QubGVuZ3RoID09PSAyKSB7XG4gICAgY29uc3QgW2lzb2xhdGlvblNjb3BlLCBjYWxsYmFja10gPSByZXN0O1xuXG4gICAgaWYgKCFpc29sYXRpb25TY29wZSkge1xuICAgICAgcmV0dXJuIGFjcy53aXRoSXNvbGF0aW9uU2NvcGUoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Mud2l0aFNldElzb2xhdGlvblNjb3BlKGlzb2xhdGlvblNjb3BlLCBjYWxsYmFjayk7XG4gIH1cblxuICByZXR1cm4gYWNzLndpdGhJc29sYXRpb25TY29wZShyZXN0WzBdKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnRseSBhY3RpdmUgY2xpZW50LlxuICovXG5mdW5jdGlvbiBnZXRDbGllbnQoKSB7XG4gIHJldHVybiBnZXRDdXJyZW50U2NvcGUoKS5nZXRDbGllbnQoKTtcbn1cblxuLyoqXG4gKiBHZXQgYSB0cmFjZSBjb250ZXh0IGZvciB0aGUgZ2l2ZW4gc2NvcGUuXG4gKi9cbmZ1bmN0aW9uIGdldFRyYWNlQ29udGV4dEZyb21TY29wZShzY29wZSkge1xuICBjb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSBzY29wZS5nZXRQcm9wYWdhdGlvbkNvbnRleHQoKTtcblxuICAvLyBUT0RPKHY5KTogVXNlIGdlbmVyYXRlU3BhbklkKCkgaW5zdGVhZCBvZiBzcGFuSWRcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IHsgdHJhY2VJZCwgc3BhbklkLCBwYXJlbnRTcGFuSWQgfSA9IHByb3BhZ2F0aW9uQ29udGV4dDtcblxuICBjb25zdCB0cmFjZUNvbnRleHQgPSBvYmplY3QuZHJvcFVuZGVmaW5lZEtleXMoe1xuICAgIHRyYWNlX2lkOiB0cmFjZUlkLFxuICAgIHNwYW5faWQ6IHNwYW5JZCxcbiAgICBwYXJlbnRfc3Bhbl9pZDogcGFyZW50U3BhbklkLFxuICB9KTtcblxuICByZXR1cm4gdHJhY2VDb250ZXh0O1xufVxuXG5leHBvcnRzLmdldENsaWVudCA9IGdldENsaWVudDtcbmV4cG9ydHMuZ2V0Q3VycmVudFNjb3BlID0gZ2V0Q3VycmVudFNjb3BlO1xuZXhwb3J0cy5nZXRHbG9iYWxTY29wZSA9IGdldEdsb2JhbFNjb3BlO1xuZXhwb3J0cy5nZXRJc29sYXRpb25TY29wZSA9IGdldElzb2xhdGlvblNjb3BlO1xuZXhwb3J0cy5nZXRUcmFjZUNvbnRleHRGcm9tU2NvcGUgPSBnZXRUcmFjZUNvbnRleHRGcm9tU2NvcGU7XG5leHBvcnRzLndpdGhJc29sYXRpb25TY29wZSA9IHdpdGhJc29sYXRpb25TY29wZTtcbmV4cG9ydHMud2l0aFNjb3BlID0gd2l0aFNjb3BlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VycmVudFNjb3Blcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluZGV4IiwicmVxdWlyZSIsImNhcnJpZXIiLCJzY29wZSIsIm9iamVjdCIsIndvcmxkd2lkZSIsImdldEN1cnJlbnRTY29wZSIsImNhcnJpZXIkMSIsImdldE1haW5DYXJyaWVyIiwiYWNzIiwiZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kiLCJnZXRJc29sYXRpb25TY29wZSIsImdldEdsb2JhbFNjb3BlIiwiZ2V0R2xvYmFsU2luZ2xldG9uIiwiU2NvcGUiLCJ3aXRoU2NvcGUiLCJyZXN0IiwibGVuZ3RoIiwiY2FsbGJhY2siLCJ3aXRoU2V0U2NvcGUiLCJ3aXRoSXNvbGF0aW9uU2NvcGUiLCJpc29sYXRpb25TY29wZSIsIndpdGhTZXRJc29sYXRpb25TY29wZSIsImdldENsaWVudCIsImdldFRyYWNlQ29udGV4dEZyb21TY29wZSIsInByb3BhZ2F0aW9uQ29udGV4dCIsImdldFByb3BhZ2F0aW9uQ29udGV4dCIsInRyYWNlSWQiLCJzcGFuSWQiLCJwYXJlbnRTcGFuSWQiLCJ0cmFjZUNvbnRleHQiLCJkcm9wVW5kZWZpbmVkS2V5cyIsInRyYWNlX2lkIiwic3Bhbl9pZCIsInBhcmVudF9zcGFuX2lkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/debug-build.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nexports.DEBUG_BUILD = DEBUG_BUILD;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFdBQVcsR0FBSSxPQUFPQyxnQkFBZ0IsS0FBSyxXQUFXLElBQUlBLGdCQUFpQjtBQUVqRkgsbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZGVidWctYnVpbGQuanM/ZjAzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnRzLkRFQlVHX0JVSUxEID0gREVCVUdfQlVJTEQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/defaultScopes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst scope = __webpack_require__(/*! ./scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/** Get the default current scope. */\nfunction getDefaultCurrentScope() {\n  return worldwide.getGlobalSingleton('defaultCurrentScope', () => new scope.Scope());\n}\n\n/** Get the default isolation scope. */\nfunction getDefaultIsolationScope() {\n  return worldwide.getGlobalSingleton('defaultIsolationScope', () => new scope.Scope());\n}\nexports.getDefaultCurrentScope = getDefaultCurrentScope;\nexports.getDefaultIsolationScope = getDefaultIsolationScope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZGVmYXVsdFNjb3Blcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLEtBQUssR0FBR0MsbUJBQU8sQ0FBQywrRUFBWSxDQUFDO0FBQ25DLE1BQU1DLFNBQVMsR0FBR0QsbUJBQU8sQ0FBQywrR0FBNEIsQ0FBQzs7QUFFdkQ7QUFDQSxTQUFTRSxzQkFBc0JBLENBQUEsRUFBRztFQUNoQyxPQUFPRCxTQUFTLENBQUNFLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFLE1BQU0sSUFBSUosS0FBSyxDQUFDSyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3JGOztBQUVBO0FBQ0EsU0FBU0Msd0JBQXdCQSxDQUFBLEVBQUc7RUFDbEMsT0FBT0osU0FBUyxDQUFDRSxrQkFBa0IsQ0FBQyx1QkFBdUIsRUFBRSxNQUFNLElBQUlKLEtBQUssQ0FBQ0ssS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2RjtBQUVBUCw4QkFBOEIsR0FBR0ssc0JBQXNCO0FBQ3ZETCxnQ0FBZ0MsR0FBR1Esd0JBQXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2RlZmF1bHRTY29wZXMuanM/MTNiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBzY29wZSA9IHJlcXVpcmUoJy4vc2NvcGUuanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3Qvd29ybGR3aWRlLmpzJyk7XG5cbi8qKiBHZXQgdGhlIGRlZmF1bHQgY3VycmVudCBzY29wZS4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRDdXJyZW50U2NvcGUoKSB7XG4gIHJldHVybiB3b3JsZHdpZGUuZ2V0R2xvYmFsU2luZ2xldG9uKCdkZWZhdWx0Q3VycmVudFNjb3BlJywgKCkgPT4gbmV3IHNjb3BlLlNjb3BlKCkpO1xufVxuXG4vKiogR2V0IHRoZSBkZWZhdWx0IGlzb2xhdGlvbiBzY29wZS4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRJc29sYXRpb25TY29wZSgpIHtcbiAgcmV0dXJuIHdvcmxkd2lkZS5nZXRHbG9iYWxTaW5nbGV0b24oJ2RlZmF1bHRJc29sYXRpb25TY29wZScsICgpID0+IG5ldyBzY29wZS5TY29wZSgpKTtcbn1cblxuZXhwb3J0cy5nZXREZWZhdWx0Q3VycmVudFNjb3BlID0gZ2V0RGVmYXVsdEN1cnJlbnRTY29wZTtcbmV4cG9ydHMuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlID0gZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdFNjb3Blcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInNjb3BlIiwicmVxdWlyZSIsIndvcmxkd2lkZSIsImdldERlZmF1bHRDdXJyZW50U2NvcGUiLCJnZXRHbG9iYWxTaW5nbGV0b24iLCJTY29wZSIsImdldERlZmF1bHRJc29sYXRpb25TY29wZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/envelope.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst dsn = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst envelope = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\n__webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ./utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\n__webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nfunction createSessionEnvelope(session, dsn$1, metadata, tunnel) {\n  const sdkInfo = envelope.getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && {\n      sdk: sdkInfo\n    }),\n    ...(!!tunnel && dsn$1 && {\n      dsn: dsn.dsnToString(dsn$1)\n    })\n  };\n  const envelopeItem = 'aggregates' in session ? [{\n    type: 'sessions'\n  }, session] : [{\n    type: 'session'\n  }, session.toJSON()];\n  return envelope.createEnvelope(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nfunction createEventEnvelope(event, dsn, metadata, tunnel) {\n  const sdkInfo = envelope.getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjust a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n  const envelopeHeaders = envelope.createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n  const eventItem = [{\n    type: eventType\n  }, event];\n  return envelope.createEnvelope(envelopeHeaders, [eventItem]);\n}\n\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */\nfunction createSpanEnvelope(spans, client) {\n  function dscHasRequiredProps(dsc) {\n    return !!dsc.trace_id && !!dsc.public_key;\n  }\n\n  // For the moment we'll obtain the DSC from the first span in the array\n  // This might need to be changed if we permit sending multiple spans from\n  // different segments in one envelope\n  const dsc = dynamicSamplingContext.getDynamicSamplingContextFromSpan(spans[0]);\n  const dsn$1 = client && client.getDsn();\n  const tunnel = client && client.getOptions().tunnel;\n  const headers = {\n    sent_at: new Date().toISOString(),\n    ...(dscHasRequiredProps(dsc) && {\n      trace: dsc\n    }),\n    ...(!!tunnel && dsn$1 && {\n      dsn: dsn.dsnToString(dsn$1)\n    })\n  };\n  const beforeSendSpan = client && client.getOptions().beforeSendSpan;\n  const convertToSpanJSON = beforeSendSpan ? span => {\n    const spanJson = beforeSendSpan(spanUtils.spanToJSON(span));\n    if (!spanJson) {\n      spanUtils.showSpanDropWarning();\n    }\n    return spanJson;\n  } : span => spanUtils.spanToJSON(span);\n  const items = [];\n  for (const span of spans) {\n    const spanJson = convertToSpanJSON(span);\n    if (spanJson) {\n      items.push(envelope.createSpanEnvelopeItem(spanJson));\n    }\n  }\n  return envelope.createEnvelope(headers, items);\n}\nexports.createEventEnvelope = createEventEnvelope;\nexports.createSessionEnvelope = createSessionEnvelope;\nexports.createSpanEnvelope = createSpanEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/eventProcessors.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst syncpromise = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */\nfunction notifyEventProcessors(processors, event, hint, index = 0) {\n  return new syncpromise.SyncPromise((resolve, reject) => {\n    const processor = processors[index];\n    if (event === null || typeof processor !== 'function') {\n      resolve(event);\n    } else {\n      const result = processor({\n        ...event\n      }, hint);\n      debugBuild.DEBUG_BUILD && processor.id && result === null && logger.logger.log(`Event processor \"${processor.id}\" dropped event`);\n      if (is.isThenable(result)) {\n        void result.then(final => notifyEventProcessors(processors, final, hint, index + 1).then(resolve)).then(null, reject);\n      } else {\n        void notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n      }\n    }\n  });\n}\nexports.notifyEventProcessors = notifyEventProcessors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZXZlbnRQcm9jZXNzb3JzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLDJGQUFrQixDQUFDO0FBQzlDLE1BQU1DLEVBQUUsR0FBR0QsbUJBQU8sQ0FBQyxpR0FBcUIsQ0FBQztBQUN6QyxNQUFNRSxNQUFNLEdBQUdGLG1CQUFPLENBQUMseUdBQXlCLENBQUM7QUFDakQsTUFBTUcsV0FBVyxHQUFHSCxtQkFBTyxDQUFDLG1IQUE4QixDQUFDOztBQUUzRDtBQUNBO0FBQ0E7QUFDQSxTQUFTSSxxQkFBcUJBLENBQzVCQyxVQUFVLEVBQ1ZDLEtBQUssRUFDTEMsSUFBSSxFQUNKQyxLQUFLLEdBQUcsQ0FBQyxFQUNUO0VBQ0EsT0FBTyxJQUFJTCxXQUFXLENBQUNNLFdBQVcsQ0FBQyxDQUFDQyxPQUFPLEVBQUVDLE1BQU0sS0FBSztJQUN0RCxNQUFNQyxTQUFTLEdBQUdQLFVBQVUsQ0FBQ0csS0FBSyxDQUFDO0lBQ25DLElBQUlGLEtBQUssS0FBSyxJQUFJLElBQUksT0FBT00sU0FBUyxLQUFLLFVBQVUsRUFBRTtNQUNyREYsT0FBTyxDQUFDSixLQUFLLENBQUM7SUFDaEIsQ0FBQyxNQUFNO01BQ0wsTUFBTU8sTUFBTSxHQUFHRCxTQUFTLENBQUM7UUFBRSxHQUFHTjtNQUFNLENBQUMsRUFBRUMsSUFBSSxDQUFDO01BRTVDUixVQUFVLENBQUNlLFdBQVcsSUFBSUYsU0FBUyxDQUFDRyxFQUFFLElBQUlGLE1BQU0sS0FBSyxJQUFJLElBQUlYLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDYyxHQUFHLENBQUUsb0JBQW1CSixTQUFTLENBQUNHLEVBQUcsaUJBQWdCLENBQUM7TUFFakksSUFBSWQsRUFBRSxDQUFDZ0IsVUFBVSxDQUFDSixNQUFNLENBQUMsRUFBRTtRQUN6QixLQUFLQSxNQUFNLENBQ1JLLElBQUksQ0FBQ0MsS0FBSyxJQUFJZixxQkFBcUIsQ0FBQ0MsVUFBVSxFQUFFYyxLQUFLLEVBQUVaLElBQUksRUFBRUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDVSxJQUFJLENBQUNSLE9BQU8sQ0FBQyxDQUFDLENBQ3RGUSxJQUFJLENBQUMsSUFBSSxFQUFFUCxNQUFNLENBQUM7TUFDdkIsQ0FBQyxNQUFNO1FBQ0wsS0FBS1AscUJBQXFCLENBQUNDLFVBQVUsRUFBRVEsTUFBTSxFQUFFTixJQUFJLEVBQUVDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FDNURVLElBQUksQ0FBQ1IsT0FBTyxDQUFDLENBQ2JRLElBQUksQ0FBQyxJQUFJLEVBQUVQLE1BQU0sQ0FBQztNQUN2QjtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQWQsNkJBQTZCLEdBQUdPLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9ldmVudFByb2Nlc3NvcnMuanM/N2UyMSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgaXMgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2lzLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuY29uc3Qgc3luY3Byb21pc2UgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L3N5bmNwcm9taXNlLmpzJyk7XG5cbi8qKlxuICogUHJvY2VzcyBhbiBhcnJheSBvZiBldmVudCBwcm9jZXNzb3JzLCByZXR1cm5pbmcgdGhlIHByb2Nlc3NlZCBldmVudCAob3IgYG51bGxgIGlmIHRoZSBldmVudCB3YXMgZHJvcHBlZCkuXG4gKi9cbmZ1bmN0aW9uIG5vdGlmeUV2ZW50UHJvY2Vzc29ycyhcbiAgcHJvY2Vzc29ycyxcbiAgZXZlbnQsXG4gIGhpbnQsXG4gIGluZGV4ID0gMCxcbikge1xuICByZXR1cm4gbmV3IHN5bmNwcm9taXNlLlN5bmNQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBwcm9jZXNzb3IgPSBwcm9jZXNzb3JzW2luZGV4XTtcbiAgICBpZiAoZXZlbnQgPT09IG51bGwgfHwgdHlwZW9mIHByb2Nlc3NvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVzb2x2ZShldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHByb2Nlc3Nvcih7IC4uLmV2ZW50IH0sIGhpbnQpIDtcblxuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBwcm9jZXNzb3IuaWQgJiYgcmVzdWx0ID09PSBudWxsICYmIGxvZ2dlci5sb2dnZXIubG9nKGBFdmVudCBwcm9jZXNzb3IgXCIke3Byb2Nlc3Nvci5pZH1cIiBkcm9wcGVkIGV2ZW50YCk7XG5cbiAgICAgIGlmIChpcy5pc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgdm9pZCByZXN1bHRcbiAgICAgICAgICAudGhlbihmaW5hbCA9PiBub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgZmluYWwsIGhpbnQsIGluZGV4ICsgMSkudGhlbihyZXNvbHZlKSlcbiAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm9pZCBub3RpZnlFdmVudFByb2Nlc3NvcnMocHJvY2Vzc29ycywgcmVzdWx0LCBoaW50LCBpbmRleCArIDEpXG4gICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAudGhlbihudWxsLCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydHMubm90aWZ5RXZlbnRQcm9jZXNzb3JzID0gbm90aWZ5RXZlbnRQcm9jZXNzb3JzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRQcm9jZXNzb3JzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVidWdCdWlsZCIsInJlcXVpcmUiLCJpcyIsImxvZ2dlciIsInN5bmNwcm9taXNlIiwibm90aWZ5RXZlbnRQcm9jZXNzb3JzIiwicHJvY2Vzc29ycyIsImV2ZW50IiwiaGludCIsImluZGV4IiwiU3luY1Byb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicHJvY2Vzc29yIiwicmVzdWx0IiwiREVCVUdfQlVJTEQiLCJpZCIsImxvZyIsImlzVGhlbmFibGUiLCJ0aGVuIiwiZmluYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/exports.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/exports.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst time = __webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\");\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nfunction captureException(exception, hint) {\n  return currentScopes.getCurrentScope().captureException(exception, prepareEvent.parseEventHintOrCaptureContext(hint));\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */\nfunction captureMessage(message, captureContext) {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? {\n    captureContext\n  } : undefined;\n  return currentScopes.getCurrentScope().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */\nfunction captureEvent(event, hint) {\n  return currentScopes.getCurrentScope().captureEvent(event, hint);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\nfunction setContext(name, context) {\n  currentScopes.getIsolationScope().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nfunction setExtras(extras) {\n  currentScopes.getIsolationScope().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nfunction setExtra(key, extra) {\n  currentScopes.getIsolationScope().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nfunction setTags(tags) {\n  currentScopes.getIsolationScope().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nfunction setTag(key, value) {\n  currentScopes.getIsolationScope().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nfunction setUser(user) {\n  currentScopes.getIsolationScope().setUser(user);\n}\n\n/**\n * The last error event id of the isolation scope.\n *\n * Warning: This function really returns the last recorded error event id on the current\n * isolation scope. If you call this function after handling a certain error and another error\n * is captured in between, the last one is returned instead of the one you might expect.\n * Also, ids of events that were never sent to Sentry (for example because\n * they were dropped in `beforeSend`) could be returned.\n *\n * @returns The last event id of the isolation scope.\n */\nfunction lastEventId() {\n  return currentScopes.getIsolationScope().lastEventId();\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nfunction captureCheckIn(checkIn, upsertMonitorConfig) {\n  const scope = currentScopes.getCurrentScope();\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n  }\n  return misc.uuid4();\n}\n\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nfunction withMonitor(monitorSlug, callback, upsertMonitorConfig) {\n  const checkInId = captureCheckIn({\n    monitorSlug,\n    status: 'in_progress'\n  }, upsertMonitorConfig);\n  const now = time.timestampInSeconds();\n  function finishCheckIn(status) {\n    captureCheckIn({\n      monitorSlug,\n      status,\n      checkInId,\n      duration: time.timestampInSeconds() - now\n    });\n  }\n  return currentScopes.withIsolationScope(() => {\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = callback();\n    } catch (e) {\n      finishCheckIn('error');\n      throw e;\n    }\n    if (is.isThenable(maybePromiseResult)) {\n      Promise.resolve(maybePromiseResult).then(() => {\n        finishCheckIn('ok');\n      }, e => {\n        finishCheckIn('error');\n        throw e;\n      });\n    } else {\n      finishCheckIn('ok');\n    }\n    return maybePromiseResult;\n  });\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nasync function flush(timeout) {\n  const client = currentScopes.getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot flush events. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nasync function close(timeout) {\n  const client = currentScopes.getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Returns true if Sentry has been properly initialized.\n */\nfunction isInitialized() {\n  return !!currentScopes.getClient();\n}\n\n/** If the SDK is initialized & enabled. */\nfunction isEnabled() {\n  const client = currentScopes.getClient();\n  return !!client && client.getOptions().enabled !== false && !!client.getTransport();\n}\n\n/**\n * Add an event processor.\n * This will be added to the current isolation scope, ensuring any event that is processed in the current execution\n * context will have the processor applied.\n */\nfunction addEventProcessor(callback) {\n  currentScopes.getIsolationScope().addEventProcessor(callback);\n}\n\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */\nfunction startSession(context) {\n  const client = currentScopes.getClient();\n  const isolationScope = currentScopes.getIsolationScope();\n  const currentScope = currentScopes.getCurrentScope();\n  const {\n    release,\n    environment = constants.DEFAULT_ENVIRONMENT\n  } = client && client.getOptions() || {};\n\n  // Will fetch userAgent if called from browser sdk\n  const {\n    userAgent\n  } = worldwide.GLOBAL_OBJ.navigator || {};\n  const session$1 = session.makeSession({\n    release,\n    environment,\n    user: currentScope.getUser() || isolationScope.getUser(),\n    ...(userAgent && {\n      userAgent\n    }),\n    ...context\n  });\n\n  // End existing session if there's one\n  const currentSession = isolationScope.getSession();\n  if (currentSession && currentSession.status === 'ok') {\n    session.updateSession(currentSession, {\n      status: 'exited'\n    });\n  }\n  endSession();\n\n  // Afterwards we set the new session on the scope\n  isolationScope.setSession(session$1);\n\n  // TODO (v8): Remove this and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  currentScope.setSession(session$1);\n  return session$1;\n}\n\n/**\n * End the session on the current isolation scope.\n */\nfunction endSession() {\n  const isolationScope = currentScopes.getIsolationScope();\n  const currentScope = currentScopes.getCurrentScope();\n  const session$1 = currentScope.getSession() || isolationScope.getSession();\n  if (session$1) {\n    session.closeSession(session$1);\n  }\n  _sendSessionUpdate();\n\n  // the session is over; take it off of the scope\n  isolationScope.setSession();\n\n  // TODO (v8): Remove this and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  currentScope.setSession();\n}\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate() {\n  const isolationScope = currentScopes.getIsolationScope();\n  const currentScope = currentScopes.getCurrentScope();\n  const client = currentScopes.getClient();\n  // TODO (v8): Remove currentScope and only use the isolation scope(?).\n  // For v7 though, we can't \"soft-break\" people using getCurrentHub().getScope().setSession()\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session && client) {\n    client.captureSession(session);\n  }\n}\n\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */\nfunction captureSession(end = false) {\n  // both send the update and pull the session from the scope\n  if (end) {\n    endSession();\n    return;\n  }\n\n  // only send the update\n  _sendSessionUpdate();\n}\nexports.addEventProcessor = addEventProcessor;\nexports.captureCheckIn = captureCheckIn;\nexports.captureEvent = captureEvent;\nexports.captureException = captureException;\nexports.captureMessage = captureMessage;\nexports.captureSession = captureSession;\nexports.close = close;\nexports.endSession = endSession;\nexports.flush = flush;\nexports.isEnabled = isEnabled;\nexports.isInitialized = isInitialized;\nexports.lastEventId = lastEventId;\nexports.setContext = setContext;\nexports.setExtra = setExtra;\nexports.setExtras = setExtras;\nexports.setTag = setTag;\nexports.setTags = setTags;\nexports.setUser = setUser;\nexports.startSession = startSession;\nexports.withMonitor = withMonitor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/feedback.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/feedback.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * Send user feedback to Sentry.\n */\nfunction captureFeedback(params, hint = {}, scope = currentScopes.getCurrentScope()) {\n  const {\n    message,\n    name,\n    email,\n    url,\n    source,\n    associatedEventId,\n    tags\n  } = params;\n  const feedbackEvent = {\n    contexts: {\n      feedback: object.dropUndefinedKeys({\n        contact_email: email,\n        name,\n        message,\n        url,\n        source,\n        associated_event_id: associatedEventId\n      })\n    },\n    type: 'feedback',\n    level: 'info',\n    tags\n  };\n  const client = scope && scope.getClient() || currentScopes.getClient();\n  if (client) {\n    client.emit('beforeSendFeedback', feedbackEvent, hint);\n  }\n  const eventId = scope.captureEvent(feedbackEvent, hint);\n  return eventId;\n}\nexports.captureFeedback = captureFeedback;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZmVlZGJhY2suanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsK0ZBQW9CLENBQUM7QUFDbkQsTUFBTUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLHlHQUF5QixDQUFDOztBQUVqRDtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxlQUFlQSxDQUN0QkMsTUFBTSxFQUNOQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQ1RDLEtBQUssR0FBR04sYUFBYSxDQUFDTyxlQUFlLENBQUMsQ0FBQyxFQUN2QztFQUNBLE1BQU07SUFBRUMsT0FBTztJQUFFQyxJQUFJO0lBQUVDLEtBQUs7SUFBRUMsR0FBRztJQUFFQyxNQUFNO0lBQUVDLGlCQUFpQjtJQUFFQztFQUFLLENBQUMsR0FBR1YsTUFBTTtFQUU3RSxNQUFNVyxhQUFhLEdBQUc7SUFDcEJDLFFBQVEsRUFBRTtNQUNSQyxRQUFRLEVBQUVmLE1BQU0sQ0FBQ2dCLGlCQUFpQixDQUFDO1FBQ2pDQyxhQUFhLEVBQUVULEtBQUs7UUFDcEJELElBQUk7UUFDSkQsT0FBTztRQUNQRyxHQUFHO1FBQ0hDLE1BQU07UUFDTlEsbUJBQW1CLEVBQUVQO01BQ3ZCLENBQUM7SUFDSCxDQUFDO0lBQ0RRLElBQUksRUFBRSxVQUFVO0lBQ2hCQyxLQUFLLEVBQUUsTUFBTTtJQUNiUjtFQUNGLENBQUM7RUFFRCxNQUFNUyxNQUFNLEdBQUlqQixLQUFLLElBQUlBLEtBQUssQ0FBQ2tCLFNBQVMsQ0FBQyxDQUFDLElBQUt4QixhQUFhLENBQUN3QixTQUFTLENBQUMsQ0FBQztFQUV4RSxJQUFJRCxNQUFNLEVBQUU7SUFDVkEsTUFBTSxDQUFDRSxJQUFJLENBQUMsb0JBQW9CLEVBQUVWLGFBQWEsRUFBRVYsSUFBSSxDQUFDO0VBQ3hEO0VBRUEsTUFBTXFCLE9BQU8sR0FBR3BCLEtBQUssQ0FBQ3FCLFlBQVksQ0FBQ1osYUFBYSxFQUFFVixJQUFJLENBQUM7RUFFdkQsT0FBT3FCLE9BQU87QUFDaEI7QUFFQTVCLHVCQUF1QixHQUFHSyxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ZlZWRiYWNrLmpzPzI1ZjQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3Qgb2JqZWN0ID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9vYmplY3QuanMnKTtcblxuLyoqXG4gKiBTZW5kIHVzZXIgZmVlZGJhY2sgdG8gU2VudHJ5LlxuICovXG5mdW5jdGlvbiBjYXB0dXJlRmVlZGJhY2soXG4gIHBhcmFtcyxcbiAgaGludCA9IHt9LFxuICBzY29wZSA9IGN1cnJlbnRTY29wZXMuZ2V0Q3VycmVudFNjb3BlKCksXG4pIHtcbiAgY29uc3QgeyBtZXNzYWdlLCBuYW1lLCBlbWFpbCwgdXJsLCBzb3VyY2UsIGFzc29jaWF0ZWRFdmVudElkLCB0YWdzIH0gPSBwYXJhbXM7XG5cbiAgY29uc3QgZmVlZGJhY2tFdmVudCA9IHtcbiAgICBjb250ZXh0czoge1xuICAgICAgZmVlZGJhY2s6IG9iamVjdC5kcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgICAgIGNvbnRhY3RfZW1haWw6IGVtYWlsLFxuICAgICAgICBuYW1lLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICB1cmwsXG4gICAgICAgIHNvdXJjZSxcbiAgICAgICAgYXNzb2NpYXRlZF9ldmVudF9pZDogYXNzb2NpYXRlZEV2ZW50SWQsXG4gICAgICB9KSxcbiAgICB9LFxuICAgIHR5cGU6ICdmZWVkYmFjaycsXG4gICAgbGV2ZWw6ICdpbmZvJyxcbiAgICB0YWdzLFxuICB9O1xuXG4gIGNvbnN0IGNsaWVudCA9IChzY29wZSAmJiBzY29wZS5nZXRDbGllbnQoKSkgfHwgY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKTtcblxuICBpZiAoY2xpZW50KSB7XG4gICAgY2xpZW50LmVtaXQoJ2JlZm9yZVNlbmRGZWVkYmFjaycsIGZlZWRiYWNrRXZlbnQsIGhpbnQpO1xuICB9XG5cbiAgY29uc3QgZXZlbnRJZCA9IHNjb3BlLmNhcHR1cmVFdmVudChmZWVkYmFja0V2ZW50LCBoaW50KTtcblxuICByZXR1cm4gZXZlbnRJZDtcbn1cblxuZXhwb3J0cy5jYXB0dXJlRmVlZGJhY2sgPSBjYXB0dXJlRmVlZGJhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZWVkYmFjay5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImN1cnJlbnRTY29wZXMiLCJyZXF1aXJlIiwib2JqZWN0IiwiY2FwdHVyZUZlZWRiYWNrIiwicGFyYW1zIiwiaGludCIsInNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwibWVzc2FnZSIsIm5hbWUiLCJlbWFpbCIsInVybCIsInNvdXJjZSIsImFzc29jaWF0ZWRFdmVudElkIiwidGFncyIsImZlZWRiYWNrRXZlbnQiLCJjb250ZXh0cyIsImZlZWRiYWNrIiwiZHJvcFVuZGVmaW5lZEtleXMiLCJjb250YWN0X2VtYWlsIiwiYXNzb2NpYXRlZF9ldmVudF9pZCIsInR5cGUiLCJsZXZlbCIsImNsaWVudCIsImdldENsaWVudCIsImVtaXQiLCJldmVudElkIiwiY2FwdHVyZUV2ZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/feedback.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/fetch.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/fetch.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst semanticAttributes = __webpack_require__(/*! ./semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\n__webpack_require__(/*! ./tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\n__webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ./utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\n__webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n__webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\n__webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst url = __webpack_require__(/*! ./utils-hoist/url.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/url.js\");\nconst baggage = __webpack_require__(/*! ./utils-hoist/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\");\n__webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ./utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./tracing/sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst spanstatus = __webpack_require__(/*! ./tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst trace = __webpack_require__(/*! ./tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst traceData = __webpack_require__(/*! ./utils/traceData.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\");\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction instrumentFetchRequest(handlerData, shouldCreateSpan, shouldAttachHeaders, spans, spanOrigin = 'auto.http.browser') {\n  if (!handlerData.fetchData) {\n    return undefined;\n  }\n  const shouldCreateSpanResult = hasTracingEnabled.hasTracingEnabled() && shouldCreateSpan(handlerData.fetchData.url);\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n  const {\n    method,\n    url: url$1\n  } = handlerData.fetchData;\n  const fullUrl = getFullURL(url$1);\n  const host = fullUrl ? url.parseUrl(fullUrl).host : undefined;\n  const hasParent = !!spanUtils.getActiveSpan();\n  const span = shouldCreateSpanResult && hasParent ? trace.startInactiveSpan({\n    name: `${method} ${url$1}`,\n    attributes: {\n      url: url$1,\n      type: 'fetch',\n      'http.method': method,\n      'http.url': fullUrl,\n      'server.address': host,\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client'\n    }\n  }) : new sentryNonRecordingSpan.SentryNonRecordingSpan();\n  handlerData.fetchData.__span = span.spanContext().spanId;\n  spans[span.spanContext().spanId] = span;\n  if (shouldAttachHeaders(handlerData.fetchData.url)) {\n    const request = handlerData.args[0];\n    const options = handlerData.args[1] || {};\n    const headers = _addTracingHeadersToFetchRequest(request, options,\n    // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n    // we do not want to use the span as base for the trace headers,\n    // which means that the headers will be generated from the scope and the sampling decision is deferred\n    hasTracingEnabled.hasTracingEnabled() && hasParent ? span : undefined);\n    if (headers) {\n      // Ensure this is actually set, if no options have been passed previously\n      handlerData.args[1] = options;\n      options.headers = headers;\n    }\n  }\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n */\nfunction _addTracingHeadersToFetchRequest(request, fetchOptionsObj, span) {\n  const traceHeaders = traceData.getTraceData({\n    span\n  });\n  const sentryTrace = traceHeaders['sentry-trace'];\n  const baggage = traceHeaders.baggage;\n\n  // Nothing to do, when we return undefined here, the original headers will be used\n  if (!sentryTrace) {\n    return undefined;\n  }\n  const headers = fetchOptionsObj.headers || (isRequest(request) ? request.headers : undefined);\n  if (!headers) {\n    return {\n      ...traceHeaders\n    };\n  } else if (isHeaders(headers)) {\n    const newHeaders = new Headers(headers);\n    newHeaders.set('sentry-trace', sentryTrace);\n    if (baggage) {\n      const prevBaggageHeader = newHeaders.get('baggage');\n      if (prevBaggageHeader) {\n        const prevHeaderStrippedFromSentryBaggage = stripBaggageHeaderOfSentryBaggageValues(prevBaggageHeader);\n        newHeaders.set('baggage',\n        // If there are non-sentry entries (i.e. if the stripped string is non-empty/truthy) combine the stripped header and sentry baggage header\n        // otherwise just set the sentry baggage header\n        prevHeaderStrippedFromSentryBaggage ? `${prevHeaderStrippedFromSentryBaggage},${baggage}` : baggage);\n      } else {\n        newHeaders.set('baggage', baggage);\n      }\n    }\n    return newHeaders;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers\n    // Remove any existing sentry-trace headers\n    .filter(header => {\n      return !(Array.isArray(header) && header[0] === 'sentry-trace');\n    })\n    // Get rid of previous sentry baggage values in baggage header\n    .map(header => {\n      if (Array.isArray(header) && header[0] === 'baggage' && typeof header[1] === 'string') {\n        const [headerName, headerValue, ...rest] = header;\n        return [headerName, stripBaggageHeaderOfSentryBaggageValues(headerValue), ...rest];\n      } else {\n        return header;\n      }\n    }),\n    // Attach the new sentry-trace header\n    ['sentry-trace', sentryTrace]];\n    if (baggage) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push(['baggage', baggage]);\n    }\n    return newHeaders;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    let newBaggageHeaders = [];\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders = existingBaggageHeader.map(headerItem => typeof headerItem === 'string' ? stripBaggageHeaderOfSentryBaggageValues(headerItem) : headerItem).filter(headerItem => headerItem === '');\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(stripBaggageHeaderOfSentryBaggageValues(existingBaggageHeader));\n    }\n    if (baggage) {\n      newBaggageHeaders.push(baggage);\n    }\n    return {\n      ...headers,\n      'sentry-trace': sentryTrace,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined\n    };\n  }\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n *\n * @deprecated This function will not be exported anymore in v9.\n */\nfunction addTracingHeadersToFetchRequest(request, _client, _scope, fetchOptionsObj, span) {\n  return _addTracingHeadersToFetchRequest(request, fetchOptionsObj, span);\n}\nfunction getFullURL(url) {\n  try {\n    const parsed = new URL(url);\n    return parsed.href;\n  } catch (e) {\n    return undefined;\n  }\n}\nfunction endSpan(span, handlerData) {\n  if (handlerData.response) {\n    spanstatus.setHttpStatus(span, handlerData.response.status);\n    const contentLength = handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus({\n      code: spanstatus.SPAN_STATUS_ERROR,\n      message: 'internal_error'\n    });\n  }\n  span.end();\n}\nfunction stripBaggageHeaderOfSentryBaggageValues(baggageHeader) {\n  return baggageHeader.split(',')\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  .filter(baggageEntry => !baggageEntry.split('=')[0].startsWith(baggage.SENTRY_BAGGAGE_KEY_PREFIX)).join(',');\n}\nfunction isRequest(request) {\n  return typeof Request !== 'undefined' && is.isInstanceOf(request, Request);\n}\nfunction isHeaders(headers) {\n  return typeof Headers !== 'undefined' && is.isInstanceOf(headers, Headers);\n}\nexports.addTracingHeadersToFetchRequest = addTracingHeadersToFetchRequest;\nexports.instrumentFetchRequest = instrumentFetchRequest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/fetch.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/getCurrentHubShim.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/getCurrentHubShim.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst breadcrumbs = __webpack_require__(/*! ./breadcrumbs.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\n\n/**\n * This is for legacy reasons, and returns a proxy object instead of a hub to be used.\n *\n * @deprecated Use the methods directly from the top level Sentry API (e.g. `Sentry.withScope`)\n * For more information see our migration guide for\n * [replacing `getCurrentHub` and `Hub`](https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#deprecate-hub)\n * usage\n */\n// eslint-disable-next-line deprecation/deprecation\nfunction getCurrentHubShim() {\n  return {\n    bindClient(client) {\n      const scope = currentScopes.getCurrentScope();\n      scope.setClient(client);\n    },\n    withScope: currentScopes.withScope,\n    getClient: () => currentScopes.getClient(),\n    getScope: currentScopes.getCurrentScope,\n    getIsolationScope: currentScopes.getIsolationScope,\n    captureException: (exception, hint) => {\n      return currentScopes.getCurrentScope().captureException(exception, hint);\n    },\n    captureMessage: (message, level, hint) => {\n      return currentScopes.getCurrentScope().captureMessage(message, level, hint);\n    },\n    captureEvent: exports$1.captureEvent,\n    addBreadcrumb: breadcrumbs.addBreadcrumb,\n    setUser: exports$1.setUser,\n    setTags: exports$1.setTags,\n    setTag: exports$1.setTag,\n    setExtra: exports$1.setExtra,\n    setExtras: exports$1.setExtras,\n    setContext: exports$1.setContext,\n    getIntegration(integration) {\n      const client = currentScopes.getClient();\n      return client && client.getIntegrationByName(integration.id) || null;\n    },\n    startSession: exports$1.startSession,\n    endSession: exports$1.endSession,\n    captureSession(end) {\n      // both send the update and pull the session from the scope\n      if (end) {\n        return exports$1.endSession();\n      }\n\n      // only send the update\n      _sendSessionUpdate();\n    }\n  };\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n *\n * @deprecated Use the respective replacement method directly instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst getCurrentHub = getCurrentHubShim;\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate() {\n  const scope = currentScopes.getCurrentScope();\n  const client = currentScopes.getClient();\n  const session = scope.getSession();\n  if (client && session) {\n    client.captureSession(session);\n  }\n}\nexports.getCurrentHub = getCurrentHub;\nexports.getCurrentHubShim = getCurrentHubShim;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvZ2V0Q3VycmVudEh1YlNoaW0uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxXQUFXLEdBQUdDLG1CQUFPLENBQUMsMkZBQWtCLENBQUM7QUFDL0MsTUFBTUMsYUFBYSxHQUFHRCxtQkFBTyxDQUFDLCtGQUFvQixDQUFDO0FBQ25ELE1BQU1FLFNBQVMsR0FBR0YsbUJBQU8sQ0FBQyxtRkFBYyxDQUFDOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxpQkFBaUJBLENBQUEsRUFBRztFQUMzQixPQUFPO0lBQ0xDLFVBQVVBLENBQUNDLE1BQU0sRUFBRTtNQUNqQixNQUFNQyxLQUFLLEdBQUdMLGFBQWEsQ0FBQ00sZUFBZSxDQUFDLENBQUM7TUFDN0NELEtBQUssQ0FBQ0UsU0FBUyxDQUFDSCxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVESSxTQUFTLEVBQUVSLGFBQWEsQ0FBQ1EsU0FBUztJQUNsQ0MsU0FBUyxFQUFFQSxDQUFBLEtBQU1ULGFBQWEsQ0FBQ1MsU0FBUyxDQUFDLENBQUM7SUFDMUNDLFFBQVEsRUFBRVYsYUFBYSxDQUFDTSxlQUFlO0lBQ3ZDSyxpQkFBaUIsRUFBRVgsYUFBYSxDQUFDVyxpQkFBaUI7SUFDbERDLGdCQUFnQixFQUFFQSxDQUFDQyxTQUFTLEVBQUVDLElBQUksS0FBSztNQUNyQyxPQUFPZCxhQUFhLENBQUNNLGVBQWUsQ0FBQyxDQUFDLENBQUNNLGdCQUFnQixDQUFDQyxTQUFTLEVBQUVDLElBQUksQ0FBQztJQUMxRSxDQUFDO0lBQ0RDLGNBQWMsRUFBRUEsQ0FBQ0MsT0FBTyxFQUFFQyxLQUFLLEVBQUVILElBQUksS0FBSztNQUN4QyxPQUFPZCxhQUFhLENBQUNNLGVBQWUsQ0FBQyxDQUFDLENBQUNTLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFQyxLQUFLLEVBQUVILElBQUksQ0FBQztJQUM3RSxDQUFDO0lBQ0RJLFlBQVksRUFBRWpCLFNBQVMsQ0FBQ2lCLFlBQVk7SUFDcENDLGFBQWEsRUFBRXJCLFdBQVcsQ0FBQ3FCLGFBQWE7SUFDeENDLE9BQU8sRUFBRW5CLFNBQVMsQ0FBQ21CLE9BQU87SUFDMUJDLE9BQU8sRUFBRXBCLFNBQVMsQ0FBQ29CLE9BQU87SUFDMUJDLE1BQU0sRUFBRXJCLFNBQVMsQ0FBQ3FCLE1BQU07SUFDeEJDLFFBQVEsRUFBRXRCLFNBQVMsQ0FBQ3NCLFFBQVE7SUFDNUJDLFNBQVMsRUFBRXZCLFNBQVMsQ0FBQ3VCLFNBQVM7SUFDOUJDLFVBQVUsRUFBRXhCLFNBQVMsQ0FBQ3dCLFVBQVU7SUFFaENDLGNBQWNBLENBQUNDLFdBQVcsRUFBRTtNQUMxQixNQUFNdkIsTUFBTSxHQUFHSixhQUFhLENBQUNTLFNBQVMsQ0FBQyxDQUFDO01BQ3hDLE9BQVFMLE1BQU0sSUFBSUEsTUFBTSxDQUFDd0Isb0JBQW9CLENBQUNELFdBQVcsQ0FBQ0UsRUFBRSxDQUFDLElBQUssSUFBSTtJQUN4RSxDQUFDO0lBRURDLFlBQVksRUFBRTdCLFNBQVMsQ0FBQzZCLFlBQVk7SUFDcENDLFVBQVUsRUFBRTlCLFNBQVMsQ0FBQzhCLFVBQVU7SUFDaENDLGNBQWNBLENBQUNDLEdBQUcsRUFBRTtNQUNsQjtNQUNBLElBQUlBLEdBQUcsRUFBRTtRQUNQLE9BQU9oQyxTQUFTLENBQUM4QixVQUFVLENBQUMsQ0FBQztNQUMvQjs7TUFFQTtNQUNBRyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3RCO0VBQ0YsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsYUFBYSxHQUFHakMsaUJBQWlCOztBQUV2QztBQUNBO0FBQ0E7QUFDQSxTQUFTZ0Msa0JBQWtCQSxDQUFBLEVBQUc7RUFDNUIsTUFBTTdCLEtBQUssR0FBR0wsYUFBYSxDQUFDTSxlQUFlLENBQUMsQ0FBQztFQUM3QyxNQUFNRixNQUFNLEdBQUdKLGFBQWEsQ0FBQ1MsU0FBUyxDQUFDLENBQUM7RUFFeEMsTUFBTTJCLE9BQU8sR0FBRy9CLEtBQUssQ0FBQ2dDLFVBQVUsQ0FBQyxDQUFDO0VBQ2xDLElBQUlqQyxNQUFNLElBQUlnQyxPQUFPLEVBQUU7SUFDckJoQyxNQUFNLENBQUM0QixjQUFjLENBQUNJLE9BQU8sQ0FBQztFQUNoQztBQUNGO0FBRUF4QyxxQkFBcUIsR0FBR3VDLGFBQWE7QUFDckN2Qyx5QkFBeUIsR0FBR00saUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2dldEN1cnJlbnRIdWJTaGltLmpzP2VlMWYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgYnJlYWRjcnVtYnMgPSByZXF1aXJlKCcuL2JyZWFkY3J1bWJzLmpzJyk7XG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBleHBvcnRzJDEgPSByZXF1aXJlKCcuL2V4cG9ydHMuanMnKTtcblxuLyoqXG4gKiBUaGlzIGlzIGZvciBsZWdhY3kgcmVhc29ucywgYW5kIHJldHVybnMgYSBwcm94eSBvYmplY3QgaW5zdGVhZCBvZiBhIGh1YiB0byBiZSB1c2VkLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgbWV0aG9kcyBkaXJlY3RseSBmcm9tIHRoZSB0b3AgbGV2ZWwgU2VudHJ5IEFQSSAoZS5nLiBgU2VudHJ5LndpdGhTY29wZWApXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgb3VyIG1pZ3JhdGlvbiBndWlkZSBmb3JcbiAqIFtyZXBsYWNpbmcgYGdldEN1cnJlbnRIdWJgIGFuZCBgSHViYF0oaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9ibG9iL2RldmVsb3AvTUlHUkFUSU9OLm1kI2RlcHJlY2F0ZS1odWIpXG4gKiB1c2FnZVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbmZ1bmN0aW9uIGdldEN1cnJlbnRIdWJTaGltKCkge1xuICByZXR1cm4ge1xuICAgIGJpbmRDbGllbnQoY2xpZW50KSB7XG4gICAgICBjb25zdCBzY29wZSA9IGN1cnJlbnRTY29wZXMuZ2V0Q3VycmVudFNjb3BlKCk7XG4gICAgICBzY29wZS5zZXRDbGllbnQoY2xpZW50KTtcbiAgICB9LFxuXG4gICAgd2l0aFNjb3BlOiBjdXJyZW50U2NvcGVzLndpdGhTY29wZSxcbiAgICBnZXRDbGllbnQ6ICgpID0+IGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50KCkgLFxuICAgIGdldFNjb3BlOiBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSxcbiAgICBnZXRJc29sYXRpb25TY29wZTogY3VycmVudFNjb3Blcy5nZXRJc29sYXRpb25TY29wZSxcbiAgICBjYXB0dXJlRXhjZXB0aW9uOiAoZXhjZXB0aW9uLCBoaW50KSA9PiB7XG4gICAgICByZXR1cm4gY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGUoKS5jYXB0dXJlRXhjZXB0aW9uKGV4Y2VwdGlvbiwgaGludCk7XG4gICAgfSxcbiAgICBjYXB0dXJlTWVzc2FnZTogKG1lc3NhZ2UsIGxldmVsLCBoaW50KSA9PiB7XG4gICAgICByZXR1cm4gY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGUoKS5jYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBsZXZlbCwgaGludCk7XG4gICAgfSxcbiAgICBjYXB0dXJlRXZlbnQ6IGV4cG9ydHMkMS5jYXB0dXJlRXZlbnQsXG4gICAgYWRkQnJlYWRjcnVtYjogYnJlYWRjcnVtYnMuYWRkQnJlYWRjcnVtYixcbiAgICBzZXRVc2VyOiBleHBvcnRzJDEuc2V0VXNlcixcbiAgICBzZXRUYWdzOiBleHBvcnRzJDEuc2V0VGFncyxcbiAgICBzZXRUYWc6IGV4cG9ydHMkMS5zZXRUYWcsXG4gICAgc2V0RXh0cmE6IGV4cG9ydHMkMS5zZXRFeHRyYSxcbiAgICBzZXRFeHRyYXM6IGV4cG9ydHMkMS5zZXRFeHRyYXMsXG4gICAgc2V0Q29udGV4dDogZXhwb3J0cyQxLnNldENvbnRleHQsXG5cbiAgICBnZXRJbnRlZ3JhdGlvbihpbnRlZ3JhdGlvbikge1xuICAgICAgY29uc3QgY2xpZW50ID0gY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKTtcbiAgICAgIHJldHVybiAoY2xpZW50ICYmIGNsaWVudC5nZXRJbnRlZ3JhdGlvbkJ5TmFtZShpbnRlZ3JhdGlvbi5pZCkpIHx8IG51bGw7XG4gICAgfSxcblxuICAgIHN0YXJ0U2Vzc2lvbjogZXhwb3J0cyQxLnN0YXJ0U2Vzc2lvbixcbiAgICBlbmRTZXNzaW9uOiBleHBvcnRzJDEuZW5kU2Vzc2lvbixcbiAgICBjYXB0dXJlU2Vzc2lvbihlbmQpIHtcbiAgICAgIC8vIGJvdGggc2VuZCB0aGUgdXBkYXRlIGFuZCBwdWxsIHRoZSBzZXNzaW9uIGZyb20gdGhlIHNjb3BlXG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzJDEuZW5kU2Vzc2lvbigpO1xuICAgICAgfVxuXG4gICAgICAvLyBvbmx5IHNlbmQgdGhlIHVwZGF0ZVxuICAgICAgX3NlbmRTZXNzaW9uVXBkYXRlKCk7XG4gICAgfSxcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGh1YiBpbnN0YW5jZS5cbiAqXG4gKiBJZiBhIGh1YiBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgaW4gdGhlIGdsb2JhbCBjYXJyaWVyIGJ1dCB0aGlzIG1vZHVsZVxuICogY29udGFpbnMgYSBtb3JlIHJlY2VudCB2ZXJzaW9uLCBpdCByZXBsYWNlcyB0aGUgcmVnaXN0ZXJlZCB2ZXJzaW9uLlxuICogT3RoZXJ3aXNlLCB0aGUgY3VycmVudGx5IHJlZ2lzdGVyZWQgaHViIHdpbGwgYmUgcmV0dXJuZWQuXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSByZXNwZWN0aXZlIHJlcGxhY2VtZW50IG1ldGhvZCBkaXJlY3RseSBpbnN0ZWFkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbmNvbnN0IGdldEN1cnJlbnRIdWIgPSBnZXRDdXJyZW50SHViU2hpbTtcblxuLyoqXG4gKiBTZW5kcyB0aGUgY3VycmVudCBTZXNzaW9uIG9uIHRoZSBzY29wZVxuICovXG5mdW5jdGlvbiBfc2VuZFNlc3Npb25VcGRhdGUoKSB7XG4gIGNvbnN0IHNjb3BlID0gY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGUoKTtcbiAgY29uc3QgY2xpZW50ID0gY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKTtcblxuICBjb25zdCBzZXNzaW9uID0gc2NvcGUuZ2V0U2Vzc2lvbigpO1xuICBpZiAoY2xpZW50ICYmIHNlc3Npb24pIHtcbiAgICBjbGllbnQuY2FwdHVyZVNlc3Npb24oc2Vzc2lvbik7XG4gIH1cbn1cblxuZXhwb3J0cy5nZXRDdXJyZW50SHViID0gZ2V0Q3VycmVudEh1YjtcbmV4cG9ydHMuZ2V0Q3VycmVudEh1YlNoaW0gPSBnZXRDdXJyZW50SHViU2hpbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEN1cnJlbnRIdWJTaGltLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYnJlYWRjcnVtYnMiLCJyZXF1aXJlIiwiY3VycmVudFNjb3BlcyIsImV4cG9ydHMkMSIsImdldEN1cnJlbnRIdWJTaGltIiwiYmluZENsaWVudCIsImNsaWVudCIsInNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwic2V0Q2xpZW50Iiwid2l0aFNjb3BlIiwiZ2V0Q2xpZW50IiwiZ2V0U2NvcGUiLCJnZXRJc29sYXRpb25TY29wZSIsImNhcHR1cmVFeGNlcHRpb24iLCJleGNlcHRpb24iLCJoaW50IiwiY2FwdHVyZU1lc3NhZ2UiLCJtZXNzYWdlIiwibGV2ZWwiLCJjYXB0dXJlRXZlbnQiLCJhZGRCcmVhZGNydW1iIiwic2V0VXNlciIsInNldFRhZ3MiLCJzZXRUYWciLCJzZXRFeHRyYSIsInNldEV4dHJhcyIsInNldENvbnRleHQiLCJnZXRJbnRlZ3JhdGlvbiIsImludGVncmF0aW9uIiwiZ2V0SW50ZWdyYXRpb25CeU5hbWUiLCJpZCIsInN0YXJ0U2Vzc2lvbiIsImVuZFNlc3Npb24iLCJjYXB0dXJlU2Vzc2lvbiIsImVuZCIsIl9zZW5kU2Vzc2lvblVwZGF0ZSIsImdldEN1cnJlbnRIdWIiLCJzZXNzaW9uIiwiZ2V0U2Vzc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/getCurrentHubShim.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors = __webpack_require__(/*! ./tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\nconst utils = __webpack_require__(/*! ./tracing/utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\nconst hubextensions = __webpack_require__(/*! ./tracing/hubextensions.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/hubextensions.js\");\nconst idleSpan = __webpack_require__(/*! ./tracing/idleSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js\");\nconst sentrySpan = __webpack_require__(/*! ./tracing/sentrySpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./tracing/sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst spanstatus = __webpack_require__(/*! ./tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst trace = __webpack_require__(/*! ./tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst measurement = __webpack_require__(/*! ./tracing/measurement.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js\");\nconst sampling = __webpack_require__(/*! ./tracing/sampling.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js\");\nconst logSpans = __webpack_require__(/*! ./tracing/logSpans.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\");\nconst semanticAttributes = __webpack_require__(/*! ./semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst defaultScopes = __webpack_require__(/*! ./defaultScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/defaultScopes.js\");\nconst index = __webpack_require__(/*! ./asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ./carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst sessionflusher = __webpack_require__(/*! ./sessionflusher.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/sessionflusher.js\");\nconst scope = __webpack_require__(/*! ./scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst eventProcessors = __webpack_require__(/*! ./eventProcessors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/api.js\");\nconst baseclient = __webpack_require__(/*! ./baseclient.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/baseclient.js\");\nconst serverRuntimeClient = __webpack_require__(/*! ./server-runtime-client.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/server-runtime-client.js\");\nconst sdk = __webpack_require__(/*! ./sdk.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/sdk.js\");\nconst base = __webpack_require__(/*! ./transports/base.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/transports/base.js\");\nconst offline = __webpack_require__(/*! ./transports/offline.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/transports/offline.js\");\nconst multiplexed = __webpack_require__(/*! ./transports/multiplexed.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/transports/multiplexed.js\");\nconst integration = __webpack_require__(/*! ./integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst applyScopeDataToEvent = __webpack_require__(/*! ./utils/applyScopeDataToEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js\");\nconst prepareEvent = __webpack_require__(/*! ./utils/prepareEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\");\nconst checkin = __webpack_require__(/*! ./checkin.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ./utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst isSentryRequestUrl = __webpack_require__(/*! ./utils/isSentryRequestUrl.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js\");\nconst handleCallbackErrors = __webpack_require__(/*! ./utils/handleCallbackErrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\");\nconst parameterize = __webpack_require__(/*! ./utils/parameterize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parameterize.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst parseSampleRate = __webpack_require__(/*! ./utils/parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\nconst sdkMetadata = __webpack_require__(/*! ./utils/sdkMetadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js\");\nconst traceData = __webpack_require__(/*! ./utils/traceData.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\");\nconst meta = __webpack_require__(/*! ./utils/meta.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/meta.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst breadcrumbs = __webpack_require__(/*! ./breadcrumbs.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/breadcrumbs.js\");\nconst functiontostring = __webpack_require__(/*! ./integrations/functiontostring.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js\");\nconst inboundfilters = __webpack_require__(/*! ./integrations/inboundfilters.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js\");\nconst linkederrors = __webpack_require__(/*! ./integrations/linkederrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js\");\nconst metadata = __webpack_require__(/*! ./integrations/metadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/metadata.js\");\nconst requestdata = __webpack_require__(/*! ./integrations/requestdata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/requestdata.js\");\nconst captureconsole = __webpack_require__(/*! ./integrations/captureconsole.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js\");\nconst debug = __webpack_require__(/*! ./integrations/debug.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/debug.js\");\nconst dedupe = __webpack_require__(/*! ./integrations/dedupe.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/dedupe.js\");\nconst extraerrordata = __webpack_require__(/*! ./integrations/extraerrordata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js\");\nconst rewriteframes = __webpack_require__(/*! ./integrations/rewriteframes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js\");\nconst sessiontiming = __webpack_require__(/*! ./integrations/sessiontiming.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js\");\nconst zoderrors = __webpack_require__(/*! ./integrations/zoderrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js\");\nconst thirdPartyErrorsFilter = __webpack_require__(/*! ./integrations/third-party-errors-filter.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js\");\nconst exports$2 = __webpack_require__(/*! ./metrics/exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports.js\");\nconst profiling = __webpack_require__(/*! ./profiling.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/profiling.js\");\nconst exportsDefault = __webpack_require__(/*! ./metrics/exports-default.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports-default.js\");\nconst browserAggregator = __webpack_require__(/*! ./metrics/browser-aggregator.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js\");\nconst metricSummary = __webpack_require__(/*! ./metrics/metric-summary.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js\");\nconst fetch = __webpack_require__(/*! ./fetch.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/fetch.js\");\nconst trpc = __webpack_require__(/*! ./trpc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/trpc.js\");\nconst feedback = __webpack_require__(/*! ./feedback.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/feedback.js\");\nconst getCurrentHubShim = __webpack_require__(/*! ./getCurrentHubShim.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/getCurrentHubShim.js\");\nconst aggregateErrors = __webpack_require__(/*! ./utils-hoist/aggregate-errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js\");\nconst array = __webpack_require__(/*! ./utils-hoist/array.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/array.js\");\nconst breadcrumbLogLevel = __webpack_require__(/*! ./utils-hoist/breadcrumb-log-level.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/breadcrumb-log-level.js\");\nconst browser = __webpack_require__(/*! ./utils-hoist/browser.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/browser.js\");\nconst dsn = __webpack_require__(/*! ./utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst error = __webpack_require__(/*! ./utils-hoist/error.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js\");\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst console = __webpack_require__(/*! ./utils-hoist/instrument/console.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js\");\nconst fetch$1 = __webpack_require__(/*! ./utils-hoist/instrument/fetch.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/fetch.js\");\nconst globalError = __webpack_require__(/*! ./utils-hoist/instrument/globalError.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js\");\nconst globalUnhandledRejection = __webpack_require__(/*! ./utils-hoist/instrument/globalUnhandledRejection.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js\");\nconst handlers = __webpack_require__(/*! ./utils-hoist/instrument/handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst isBrowser = __webpack_require__(/*! ./utils-hoist/isBrowser.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/isBrowser.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst memo = __webpack_require__(/*! ./utils-hoist/memo.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/memo.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst node = __webpack_require__(/*! ./utils-hoist/node.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node.js\");\nconst normalize = __webpack_require__(/*! ./utils-hoist/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst path = __webpack_require__(/*! ./utils-hoist/path.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/path.js\");\nconst promisebuffer = __webpack_require__(/*! ./utils-hoist/promisebuffer.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js\");\nconst requestdata$1 = __webpack_require__(/*! ./utils-hoist/requestdata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js\");\nconst severity = __webpack_require__(/*! ./utils-hoist/severity.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/severity.js\");\nconst stacktrace = __webpack_require__(/*! ./utils-hoist/stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\nconst nodeStackTrace = __webpack_require__(/*! ./utils-hoist/node-stack-trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js\");\nconst string = __webpack_require__(/*! ./utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst supports = __webpack_require__(/*! ./utils-hoist/supports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/supports.js\");\nconst syncpromise = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst time = __webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst tracing = __webpack_require__(/*! ./utils-hoist/tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js\");\nconst env = __webpack_require__(/*! ./utils-hoist/env.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/env.js\");\nconst envelope$1 = __webpack_require__(/*! ./utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst clientreport = __webpack_require__(/*! ./utils-hoist/clientreport.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js\");\nconst ratelimit = __webpack_require__(/*! ./utils-hoist/ratelimit.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js\");\nconst baggage = __webpack_require__(/*! ./utils-hoist/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\");\nconst url = __webpack_require__(/*! ./utils-hoist/url.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/url.js\");\nconst cache = __webpack_require__(/*! ./utils-hoist/cache.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cache.js\");\nconst eventbuilder = __webpack_require__(/*! ./utils-hoist/eventbuilder.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js\");\nconst anr = __webpack_require__(/*! ./utils-hoist/anr.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/anr.js\");\nconst lru = __webpack_require__(/*! ./utils-hoist/lru.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/lru.js\");\nconst propagationContext = __webpack_require__(/*! ./utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst vercelWaitUntil = __webpack_require__(/*! ./utils-hoist/vercelWaitUntil.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vercelWaitUntil.js\");\nconst version = __webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\nconst debugIds = __webpack_require__(/*! ./utils-hoist/debug-ids.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js\");\nconst escapeStringForRegex = __webpack_require__(/*! ./utils-hoist/vendor/escapeStringForRegex.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/escapeStringForRegex.js\");\nconst supportsHistory = __webpack_require__(/*! ./utils-hoist/vendor/supportsHistory.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/supportsHistory.js\");\nconst _asyncNullishCoalesce = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_asyncNullishCoalesce.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncNullishCoalesce.js\");\nconst _asyncOptionalChain = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_asyncOptionalChain.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js\");\nconst _asyncOptionalChainDelete = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js\");\nconst _nullishCoalesce = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_nullishCoalesce.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js\");\nconst _optionalChain = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_optionalChain.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js\");\nconst _optionalChainDelete = __webpack_require__(/*! ./utils-hoist/buildPolyfills/_optionalChainDelete.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChainDelete.js\");\nexports.registerSpanErrorInstrumentation = errors.registerSpanErrorInstrumentation;\nexports.getCapturedScopesOnSpan = utils.getCapturedScopesOnSpan;\nexports.setCapturedScopesOnSpan = utils.setCapturedScopesOnSpan;\nexports.addTracingExtensions = hubextensions.addTracingExtensions;\nexports.TRACING_DEFAULTS = idleSpan.TRACING_DEFAULTS;\nexports.startIdleSpan = idleSpan.startIdleSpan;\nexports.SentrySpan = sentrySpan.SentrySpan;\nexports.SentryNonRecordingSpan = sentryNonRecordingSpan.SentryNonRecordingSpan;\nexports.SPAN_STATUS_ERROR = spanstatus.SPAN_STATUS_ERROR;\nexports.SPAN_STATUS_OK = spanstatus.SPAN_STATUS_OK;\nexports.SPAN_STATUS_UNSET = spanstatus.SPAN_STATUS_UNSET;\nexports.getSpanStatusFromHttpCode = spanstatus.getSpanStatusFromHttpCode;\nexports.setHttpStatus = spanstatus.setHttpStatus;\nexports.continueTrace = trace.continueTrace;\nexports.startInactiveSpan = trace.startInactiveSpan;\nexports.startNewTrace = trace.startNewTrace;\nexports.startSpan = trace.startSpan;\nexports.startSpanManual = trace.startSpanManual;\nexports.suppressTracing = trace.suppressTracing;\nexports.withActiveSpan = trace.withActiveSpan;\nexports.getDynamicSamplingContextFromClient = dynamicSamplingContext.getDynamicSamplingContextFromClient;\nexports.getDynamicSamplingContextFromScope = dynamicSamplingContext.getDynamicSamplingContextFromScope;\nexports.getDynamicSamplingContextFromSpan = dynamicSamplingContext.getDynamicSamplingContextFromSpan;\nexports.spanToBaggageHeader = dynamicSamplingContext.spanToBaggageHeader;\nexports.setMeasurement = measurement.setMeasurement;\nexports.timedEventsToMeasurements = measurement.timedEventsToMeasurements;\nexports.sampleSpan = sampling.sampleSpan;\nexports.logSpanEnd = logSpans.logSpanEnd;\nexports.logSpanStart = logSpans.logSpanStart;\nexports.SEMANTIC_ATTRIBUTE_CACHE_HIT = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_HIT;\nexports.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE;\nexports.SEMANTIC_ATTRIBUTE_CACHE_KEY = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_KEY;\nexports.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME;\nexports.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = semanticAttributes.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD;\nexports.SEMANTIC_ATTRIBUTE_PROFILE_ID = semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.SEMANTIC_ATTRIBUTE_URL_FULL = semanticAttributes.SEMANTIC_ATTRIBUTE_URL_FULL;\nexports.createEventEnvelope = envelope.createEventEnvelope;\nexports.createSessionEnvelope = envelope.createSessionEnvelope;\nexports.createSpanEnvelope = envelope.createSpanEnvelope;\nexports.addEventProcessor = exports$1.addEventProcessor;\nexports.captureCheckIn = exports$1.captureCheckIn;\nexports.captureEvent = exports$1.captureEvent;\nexports.captureException = exports$1.captureException;\nexports.captureMessage = exports$1.captureMessage;\nexports.captureSession = exports$1.captureSession;\nexports.close = exports$1.close;\nexports.endSession = exports$1.endSession;\nexports.flush = exports$1.flush;\nexports.isEnabled = exports$1.isEnabled;\nexports.isInitialized = exports$1.isInitialized;\nexports.lastEventId = exports$1.lastEventId;\nexports.setContext = exports$1.setContext;\nexports.setExtra = exports$1.setExtra;\nexports.setExtras = exports$1.setExtras;\nexports.setTag = exports$1.setTag;\nexports.setTags = exports$1.setTags;\nexports.setUser = exports$1.setUser;\nexports.startSession = exports$1.startSession;\nexports.withMonitor = exports$1.withMonitor;\nexports.getClient = currentScopes.getClient;\nexports.getCurrentScope = currentScopes.getCurrentScope;\nexports.getGlobalScope = currentScopes.getGlobalScope;\nexports.getIsolationScope = currentScopes.getIsolationScope;\nexports.getTraceContextFromScope = currentScopes.getTraceContextFromScope;\nexports.withIsolationScope = currentScopes.withIsolationScope;\nexports.withScope = currentScopes.withScope;\nexports.getDefaultCurrentScope = defaultScopes.getDefaultCurrentScope;\nexports.getDefaultIsolationScope = defaultScopes.getDefaultIsolationScope;\nexports.setAsyncContextStrategy = index.setAsyncContextStrategy;\nexports.getMainCarrier = carrier.getMainCarrier;\nexports.closeSession = session.closeSession;\nexports.makeSession = session.makeSession;\nexports.updateSession = session.updateSession;\nexports.SessionFlusher = sessionflusher.SessionFlusher;\nexports.Scope = scope.Scope;\nexports.notifyEventProcessors = eventProcessors.notifyEventProcessors;\nexports.getEnvelopeEndpointWithUrlEncodedAuth = api.getEnvelopeEndpointWithUrlEncodedAuth;\nexports.getReportDialogEndpoint = api.getReportDialogEndpoint;\nexports.BaseClient = baseclient.BaseClient;\nexports.ServerRuntimeClient = serverRuntimeClient.ServerRuntimeClient;\nexports.initAndBind = sdk.initAndBind;\nexports.setCurrentClient = sdk.setCurrentClient;\nexports.createTransport = base.createTransport;\nexports.makeOfflineTransport = offline.makeOfflineTransport;\nexports.makeMultiplexedTransport = multiplexed.makeMultiplexedTransport;\nexports.addIntegration = integration.addIntegration;\nexports.defineIntegration = integration.defineIntegration;\nexports.getIntegrationsToSetup = integration.getIntegrationsToSetup;\nexports.applyScopeDataToEvent = applyScopeDataToEvent.applyScopeDataToEvent;\nexports.mergeScopeData = applyScopeDataToEvent.mergeScopeData;\nexports.prepareEvent = prepareEvent.prepareEvent;\nexports.createCheckInEnvelope = checkin.createCheckInEnvelope;\nexports.hasTracingEnabled = hasTracingEnabled.hasTracingEnabled;\nexports.isSentryRequestUrl = isSentryRequestUrl.isSentryRequestUrl;\nexports.handleCallbackErrors = handleCallbackErrors.handleCallbackErrors;\nexports.parameterize = parameterize.parameterize;\nexports.addChildSpanToSpan = spanUtils.addChildSpanToSpan;\nexports.getActiveSpan = spanUtils.getActiveSpan;\nexports.getRootSpan = spanUtils.getRootSpan;\nexports.getSpanDescendants = spanUtils.getSpanDescendants;\nexports.getStatusMessage = spanUtils.getStatusMessage;\nexports.spanIsSampled = spanUtils.spanIsSampled;\nexports.spanTimeInputToSeconds = spanUtils.spanTimeInputToSeconds;\nexports.spanToJSON = spanUtils.spanToJSON;\nexports.spanToTraceContext = spanUtils.spanToTraceContext;\nexports.spanToTraceHeader = spanUtils.spanToTraceHeader;\nexports.updateSpanName = spanUtils.updateSpanName;\nexports.parseSampleRate = parseSampleRate.parseSampleRate;\nexports.applySdkMetadata = sdkMetadata.applySdkMetadata;\nexports.getTraceData = traceData.getTraceData;\nexports.getTraceMetaTags = meta.getTraceMetaTags;\nexports.DEFAULT_ENVIRONMENT = constants.DEFAULT_ENVIRONMENT;\nexports.addBreadcrumb = breadcrumbs.addBreadcrumb;\nexports.functionToStringIntegration = functiontostring.functionToStringIntegration;\nexports.inboundFiltersIntegration = inboundfilters.inboundFiltersIntegration;\nexports.linkedErrorsIntegration = linkederrors.linkedErrorsIntegration;\nexports.moduleMetadataIntegration = metadata.moduleMetadataIntegration;\nexports.requestDataIntegration = requestdata.requestDataIntegration;\nexports.captureConsoleIntegration = captureconsole.captureConsoleIntegration;\nexports.debugIntegration = debug.debugIntegration;\nexports.dedupeIntegration = dedupe.dedupeIntegration;\nexports.extraErrorDataIntegration = extraerrordata.extraErrorDataIntegration;\nexports.rewriteFramesIntegration = rewriteframes.rewriteFramesIntegration;\nexports.sessionTimingIntegration = sessiontiming.sessionTimingIntegration;\nexports.zodErrorsIntegration = zoderrors.zodErrorsIntegration;\nexports.thirdPartyErrorFilterIntegration = thirdPartyErrorsFilter.thirdPartyErrorFilterIntegration;\nexports.metrics = exports$2.metrics;\nexports.profiler = profiling.profiler;\nexports.metricsDefault = exportsDefault.metricsDefault;\nexports.BrowserMetricsAggregator = browserAggregator.BrowserMetricsAggregator;\nexports.getMetricSummaryJsonForSpan = metricSummary.getMetricSummaryJsonForSpan;\nexports.addTracingHeadersToFetchRequest = fetch.addTracingHeadersToFetchRequest;\nexports.instrumentFetchRequest = fetch.instrumentFetchRequest;\nexports.trpcMiddleware = trpc.trpcMiddleware;\nexports.captureFeedback = feedback.captureFeedback;\nexports.getCurrentHub = getCurrentHubShim.getCurrentHub;\nexports.getCurrentHubShim = getCurrentHubShim.getCurrentHubShim;\nexports.applyAggregateErrorsToEvent = aggregateErrors.applyAggregateErrorsToEvent;\nexports.flatten = array.flatten;\nexports.getBreadcrumbLogLevelFromHttpStatusCode = breadcrumbLogLevel.getBreadcrumbLogLevelFromHttpStatusCode;\nexports.getComponentName = browser.getComponentName;\nexports.getDomElement = browser.getDomElement;\nexports.getLocationHref = browser.getLocationHref;\nexports.htmlTreeAsString = browser.htmlTreeAsString;\nexports.dsnFromString = dsn.dsnFromString;\nexports.dsnToString = dsn.dsnToString;\nexports.makeDsn = dsn.makeDsn;\nexports.SentryError = error.SentryError;\nexports.GLOBAL_OBJ = worldwide.GLOBAL_OBJ;\nexports.getGlobalSingleton = worldwide.getGlobalSingleton;\nexports.addConsoleInstrumentationHandler = console.addConsoleInstrumentationHandler;\nexports.addFetchEndInstrumentationHandler = fetch$1.addFetchEndInstrumentationHandler;\nexports.addFetchInstrumentationHandler = fetch$1.addFetchInstrumentationHandler;\nexports.addGlobalErrorInstrumentationHandler = globalError.addGlobalErrorInstrumentationHandler;\nexports.addGlobalUnhandledRejectionInstrumentationHandler = globalUnhandledRejection.addGlobalUnhandledRejectionInstrumentationHandler;\nexports.addHandler = handlers.addHandler;\nexports.maybeInstrument = handlers.maybeInstrument;\nexports.resetInstrumentationHandlers = handlers.resetInstrumentationHandlers;\nexports.triggerHandlers = handlers.triggerHandlers;\nexports.isDOMError = is.isDOMError;\nexports.isDOMException = is.isDOMException;\nexports.isElement = is.isElement;\nexports.isError = is.isError;\nexports.isErrorEvent = is.isErrorEvent;\nexports.isEvent = is.isEvent;\nexports.isInstanceOf = is.isInstanceOf;\nexports.isParameterizedString = is.isParameterizedString;\nexports.isPlainObject = is.isPlainObject;\nexports.isPrimitive = is.isPrimitive;\nexports.isRegExp = is.isRegExp;\nexports.isString = is.isString;\nexports.isSyntheticEvent = is.isSyntheticEvent;\nexports.isThenable = is.isThenable;\nexports.isVueViewModel = is.isVueViewModel;\nexports.isBrowser = isBrowser.isBrowser;\nexports.CONSOLE_LEVELS = logger.CONSOLE_LEVELS;\nexports.consoleSandbox = logger.consoleSandbox;\nexports.logger = logger.logger;\nexports.originalConsoleMethods = logger.originalConsoleMethods;\nexports.memoBuilder = memo.memoBuilder;\nexports.addContextToFrame = misc.addContextToFrame;\nexports.addExceptionMechanism = misc.addExceptionMechanism;\nexports.addExceptionTypeValue = misc.addExceptionTypeValue;\nexports.arrayify = misc.arrayify;\nexports.checkOrSetAlreadyCaught = misc.checkOrSetAlreadyCaught;\nexports.getEventDescription = misc.getEventDescription;\nexports.parseSemver = misc.parseSemver;\nexports.uuid4 = misc.uuid4;\nexports.dynamicRequire = node.dynamicRequire;\nexports.isNodeEnv = node.isNodeEnv;\nexports.loadModule = node.loadModule;\nexports.normalize = normalize.normalize;\nexports.normalizeToSize = normalize.normalizeToSize;\nexports.normalizeUrlToBase = normalize.normalizeUrlToBase;\nexports.addNonEnumerableProperty = object.addNonEnumerableProperty;\nexports.convertToPlainObject = object.convertToPlainObject;\nexports.dropUndefinedKeys = object.dropUndefinedKeys;\nexports.extractExceptionKeysForMessage = object.extractExceptionKeysForMessage;\nexports.fill = object.fill;\nexports.getOriginalFunction = object.getOriginalFunction;\nexports.markFunctionWrapped = object.markFunctionWrapped;\nexports.objectify = object.objectify;\nexports.urlEncode = object.urlEncode;\nexports.basename = path.basename;\nexports.dirname = path.dirname;\nexports.isAbsolute = path.isAbsolute;\nexports.join = path.join;\nexports.normalizePath = path.normalizePath;\nexports.relative = path.relative;\nexports.resolve = path.resolve;\nexports.makePromiseBuffer = promisebuffer.makePromiseBuffer;\nexports.DEFAULT_USER_INCLUDES = requestdata$1.DEFAULT_USER_INCLUDES;\nexports.addNormalizedRequestDataToEvent = requestdata$1.addNormalizedRequestDataToEvent;\nexports.addRequestDataToEvent = requestdata$1.addRequestDataToEvent;\nexports.extractPathForTransaction = requestdata$1.extractPathForTransaction;\nexports.extractQueryParamsFromUrl = requestdata$1.extractQueryParamsFromUrl;\nexports.extractRequestData = requestdata$1.extractRequestData;\nexports.headersToDict = requestdata$1.headersToDict;\nexports.httpRequestToRequestData = requestdata$1.httpRequestToRequestData;\nexports.winterCGHeadersToDict = requestdata$1.winterCGHeadersToDict;\nexports.winterCGRequestToRequestData = requestdata$1.winterCGRequestToRequestData;\nexports.severityLevelFromString = severity.severityLevelFromString;\nexports.validSeverityLevels = severity.validSeverityLevels;\nexports.UNKNOWN_FUNCTION = stacktrace.UNKNOWN_FUNCTION;\nexports.createStackParser = stacktrace.createStackParser;\nexports.getFramesFromEvent = stacktrace.getFramesFromEvent;\nexports.getFunctionName = stacktrace.getFunctionName;\nexports.stackParserFromStackParserOptions = stacktrace.stackParserFromStackParserOptions;\nexports.stripSentryFramesAndReverse = stacktrace.stripSentryFramesAndReverse;\nexports.filenameIsInApp = nodeStackTrace.filenameIsInApp;\nexports.node = nodeStackTrace.node;\nexports.nodeStackLineParser = nodeStackTrace.nodeStackLineParser;\nexports.isMatchingPattern = string.isMatchingPattern;\nexports.safeJoin = string.safeJoin;\nexports.snipLine = string.snipLine;\nexports.stringMatchesSomePattern = string.stringMatchesSomePattern;\nexports.truncate = string.truncate;\nexports.isNativeFunction = supports.isNativeFunction;\nexports.supportsDOMError = supports.supportsDOMError;\nexports.supportsDOMException = supports.supportsDOMException;\nexports.supportsErrorEvent = supports.supportsErrorEvent;\nexports.supportsFetch = supports.supportsFetch;\nexports.supportsNativeFetch = supports.supportsNativeFetch;\nexports.supportsReferrerPolicy = supports.supportsReferrerPolicy;\nexports.supportsReportingObserver = supports.supportsReportingObserver;\nexports.SyncPromise = syncpromise.SyncPromise;\nexports.rejectedSyncPromise = syncpromise.rejectedSyncPromise;\nexports.resolvedSyncPromise = syncpromise.resolvedSyncPromise;\nObject.defineProperty(exports, \"_browserPerformanceTimeOriginMode\", ({\n  enumerable: true,\n  get: () => time._browserPerformanceTimeOriginMode\n}));\nexports.browserPerformanceTimeOrigin = time.browserPerformanceTimeOrigin;\nexports.dateTimestampInSeconds = time.dateTimestampInSeconds;\nexports.timestampInSeconds = time.timestampInSeconds;\nexports.TRACEPARENT_REGEXP = tracing.TRACEPARENT_REGEXP;\nexports.extractTraceparentData = tracing.extractTraceparentData;\nexports.generateSentryTraceHeader = tracing.generateSentryTraceHeader;\nexports.propagationContextFromHeaders = tracing.propagationContextFromHeaders;\nexports.getSDKSource = env.getSDKSource;\nexports.isBrowserBundle = env.isBrowserBundle;\nexports.addItemToEnvelope = envelope$1.addItemToEnvelope;\nexports.createAttachmentEnvelopeItem = envelope$1.createAttachmentEnvelopeItem;\nexports.createEnvelope = envelope$1.createEnvelope;\nexports.createEventEnvelopeHeaders = envelope$1.createEventEnvelopeHeaders;\nexports.createSpanEnvelopeItem = envelope$1.createSpanEnvelopeItem;\nexports.envelopeContainsItemType = envelope$1.envelopeContainsItemType;\nexports.envelopeItemTypeToDataCategory = envelope$1.envelopeItemTypeToDataCategory;\nexports.forEachEnvelopeItem = envelope$1.forEachEnvelopeItem;\nexports.getSdkMetadataForEnvelopeHeader = envelope$1.getSdkMetadataForEnvelopeHeader;\nexports.parseEnvelope = envelope$1.parseEnvelope;\nexports.serializeEnvelope = envelope$1.serializeEnvelope;\nexports.createClientReportEnvelope = clientreport.createClientReportEnvelope;\nexports.DEFAULT_RETRY_AFTER = ratelimit.DEFAULT_RETRY_AFTER;\nexports.disabledUntil = ratelimit.disabledUntil;\nexports.isRateLimited = ratelimit.isRateLimited;\nexports.parseRetryAfterHeader = ratelimit.parseRetryAfterHeader;\nexports.updateRateLimits = ratelimit.updateRateLimits;\nexports.BAGGAGE_HEADER_NAME = baggage.BAGGAGE_HEADER_NAME;\nexports.MAX_BAGGAGE_STRING_LENGTH = baggage.MAX_BAGGAGE_STRING_LENGTH;\nexports.SENTRY_BAGGAGE_KEY_PREFIX = baggage.SENTRY_BAGGAGE_KEY_PREFIX;\nexports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = baggage.SENTRY_BAGGAGE_KEY_PREFIX_REGEX;\nexports.baggageHeaderToDynamicSamplingContext = baggage.baggageHeaderToDynamicSamplingContext;\nexports.dynamicSamplingContextToSentryBaggageHeader = baggage.dynamicSamplingContextToSentryBaggageHeader;\nexports.parseBaggageHeader = baggage.parseBaggageHeader;\nexports.getNumberOfUrlSegments = url.getNumberOfUrlSegments;\nexports.getSanitizedUrlString = url.getSanitizedUrlString;\nexports.parseUrl = url.parseUrl;\nexports.stripUrlQueryAndFragment = url.stripUrlQueryAndFragment;\nexports.makeFifoCache = cache.makeFifoCache;\nexports.eventFromMessage = eventbuilder.eventFromMessage;\nexports.eventFromUnknownInput = eventbuilder.eventFromUnknownInput;\nexports.exceptionFromError = eventbuilder.exceptionFromError;\nexports.parseStackFrames = eventbuilder.parseStackFrames;\nexports.callFrameToStackFrame = anr.callFrameToStackFrame;\nexports.watchdogTimer = anr.watchdogTimer;\nexports.LRUMap = lru.LRUMap;\nexports.generatePropagationContext = propagationContext.generatePropagationContext;\nexports.generateSpanId = propagationContext.generateSpanId;\nexports.generateTraceId = propagationContext.generateTraceId;\nexports.vercelWaitUntil = vercelWaitUntil.vercelWaitUntil;\nexports.SDK_VERSION = version.SDK_VERSION;\nexports.getDebugImagesForResources = debugIds.getDebugImagesForResources;\nexports.getFilenameToDebugIdMap = debugIds.getFilenameToDebugIdMap;\nexports.escapeStringForRegex = escapeStringForRegex.escapeStringForRegex;\nexports.supportsHistory = supportsHistory.supportsHistory;\nexports._asyncNullishCoalesce = _asyncNullishCoalesce._asyncNullishCoalesce;\nexports._asyncOptionalChain = _asyncOptionalChain._asyncOptionalChain;\nexports._asyncOptionalChainDelete = _asyncOptionalChainDelete._asyncOptionalChainDelete;\nexports._nullishCoalesce = _nullishCoalesce._nullishCoalesce;\nexports._optionalChain = _optionalChain._optionalChain;\nexports._optionalChainDelete = _optionalChainDelete._optionalChainDelete;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxNQUFNLEdBQUdDLG1CQUFPLENBQUMsaUdBQXFCLENBQUM7QUFDN0MsTUFBTUMsS0FBSyxHQUFHRCxtQkFBTyxDQUFDLCtGQUFvQixDQUFDO0FBQzNDLE1BQU1FLGFBQWEsR0FBR0YsbUJBQU8sQ0FBQywrR0FBNEIsQ0FBQztBQUMzRCxNQUFNRyxRQUFRLEdBQUdILG1CQUFPLENBQUMscUdBQXVCLENBQUM7QUFDakQsTUFBTUksVUFBVSxHQUFHSixtQkFBTyxDQUFDLHlHQUF5QixDQUFDO0FBQ3JELE1BQU1LLHNCQUFzQixHQUFHTCxtQkFBTyxDQUFDLGlJQUFxQyxDQUFDO0FBQzdFLE1BQU1NLFVBQVUsR0FBR04sbUJBQU8sQ0FBQyx5R0FBeUIsQ0FBQztBQUNyRCxNQUFNTyxLQUFLLEdBQUdQLG1CQUFPLENBQUMsK0ZBQW9CLENBQUM7QUFDM0MsTUFBTVEsc0JBQXNCLEdBQUdSLG1CQUFPLENBQUMsaUlBQXFDLENBQUM7QUFDN0UsTUFBTVMsV0FBVyxHQUFHVCxtQkFBTyxDQUFDLDJHQUEwQixDQUFDO0FBQ3ZELE1BQU1VLFFBQVEsR0FBR1YsbUJBQU8sQ0FBQyxxR0FBdUIsQ0FBQztBQUNqRCxNQUFNVyxRQUFRLEdBQUdYLG1CQUFPLENBQUMscUdBQXVCLENBQUM7QUFDakQsTUFBTVksa0JBQWtCLEdBQUdaLG1CQUFPLENBQUMseUdBQXlCLENBQUM7QUFDN0QsTUFBTWEsUUFBUSxHQUFHYixtQkFBTyxDQUFDLHFGQUFlLENBQUM7QUFDekMsTUFBTWMsU0FBUyxHQUFHZCxtQkFBTyxDQUFDLG1GQUFjLENBQUM7QUFDekMsTUFBTWUsYUFBYSxHQUFHZixtQkFBTyxDQUFDLCtGQUFvQixDQUFDO0FBQ25ELE1BQU1nQixhQUFhLEdB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QUFDZ1QsYUFBYTtBQUN6QzdaLGNBQWMsR0FBRzhHLEdBQUcsQ0FBQ2dULE1BQU07QUFDM0I5WixrQ0FBa0MsR0FBRytHLGtCQUFrQixDQUFDZ1QsMEJBQTBCO0FBQ2xGL1osc0JBQXNCLEdBQUcrRyxrQkFBa0IsQ0FBQ2lULGNBQWM7QUFDMURoYSx1QkFBdUIsR0FBRytHLGtCQUFrQixDQUFDa1QsZUFBZTtBQUM1RGphLHVCQUF1QixHQUFHZ0gsZUFBZSxDQUFDQSxlQUFlO0FBQ3pEaEgsbUJBQW1CLEdBQUdpSCxPQUFPLENBQUNpVCxXQUFXO0FBQ3pDbGEsa0NBQWtDLEdBQUdrSCxRQUFRLENBQUNpVCwwQkFBMEI7QUFDeEVuYSwrQkFBK0IsR0FBR2tILFFBQVEsQ0FBQ2tULHVCQUF1QjtBQUNsRXBhLDRCQUE0QixHQUFHbUgsb0JBQW9CLENBQUNBLG9CQUFvQjtBQUN4RW5ILHVCQUF1QixHQUFHb0gsZUFBZSxDQUFDQSxlQUFlO0FBQ3pEcEgsNkJBQTZCLEdBQUdxSCxxQkFBcUIsQ0FBQ0EscUJBQXFCO0FBQzNFckgsMkJBQTJCLEdBQUdzSCxtQkFBbUIsQ0FBQ0EsbUJBQW1CO0FBQ3JFdEgsaUNBQWlDLEdBQUd1SCx5QkFBeUIsQ0FBQ0EseUJBQXlCO0FBQ3ZGdkgsd0JBQXdCLEdBQUd3SCxnQkFBZ0IsQ0FBQ0EsZ0JBQWdCO0FBQzVEeEgsc0JBQXNCLEdBQUd5SCxjQUFjLENBQUNBLGNBQWM7QUFDdER6SCw0QkFBNEIsR0FBRzBILG9CQUFvQixDQUFDQSxvQkFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW5kZXguanM/MzY0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBlcnJvcnMgPSByZXF1aXJlKCcuL3RyYWNpbmcvZXJyb3JzLmpzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdHJhY2luZy91dGlscy5qcycpO1xuY29uc3QgaHViZXh0ZW5zaW9ucyA9IHJlcXVpcmUoJy4vdHJhY2luZy9odWJleHRlbnNpb25zLmpzJyk7XG5jb25zdCBpZGxlU3BhbiA9IHJlcXVpcmUoJy4vdHJhY2luZy9pZGxlU3Bhbi5qcycpO1xuY29uc3Qgc2VudHJ5U3BhbiA9IHJlcXVpcmUoJy4vdHJhY2luZy9zZW50cnlTcGFuLmpzJyk7XG5jb25zdCBzZW50cnlOb25SZWNvcmRpbmdTcGFuID0gcmVxdWlyZSgnLi90cmFjaW5nL3NlbnRyeU5vblJlY29yZGluZ1NwYW4uanMnKTtcbmNvbnN0IHNwYW5zdGF0dXMgPSByZXF1aXJlKCcuL3RyYWNpbmcvc3BhbnN0YXR1cy5qcycpO1xuY29uc3QgdHJhY2UgPSByZXF1aXJlKCcuL3RyYWNpbmcvdHJhY2UuanMnKTtcbmNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSByZXF1aXJlKCcuL3RyYWNpbmcvZHluYW1pY1NhbXBsaW5nQ29udGV4dC5qcycpO1xuY29uc3QgbWVhc3VyZW1lbnQgPSByZXF1aXJlKCcuL3RyYWNpbmcvbWVhc3VyZW1lbnQuanMnKTtcbmNvbnN0IHNhbXBsaW5nID0gcmVxdWlyZSgnLi90cmFjaW5nL3NhbXBsaW5nLmpzJyk7XG5jb25zdCBsb2dTcGFucyA9IHJlcXVpcmUoJy4vdHJhY2luZy9sb2dTcGFucy5qcycpO1xuY29uc3Qgc2VtYW50aWNBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi9zZW1hbnRpY0F0dHJpYnV0ZXMuanMnKTtcbmNvbnN0IGVudmVsb3BlID0gcmVxdWlyZSgnLi9lbnZlbG9wZS5qcycpO1xuY29uc3QgZXhwb3J0cyQxID0gcmVxdWlyZSgnLi9leHBvcnRzLmpzJyk7XG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBkZWZhdWx0U2NvcGVzID0gcmVxdWlyZSgnLi9kZWZhdWx0U2NvcGVzLmpzJyk7XG5jb25zdCBpbmRleCA9IHJlcXVpcmUoJy4vYXN5bmNDb250ZXh0L2luZGV4LmpzJyk7XG5jb25zdCBjYXJyaWVyID0gcmVxdWlyZSgnLi9jYXJyaWVyLmpzJyk7XG5jb25zdCBzZXNzaW9uID0gcmVxdWlyZSgnLi9zZXNzaW9uLmpzJyk7XG5jb25zdCBzZXNzaW9uZmx1c2hlciA9IHJlcXVpcmUoJy4vc2Vzc2lvbmZsdXNoZXIuanMnKTtcbmNvbnN0IHNjb3BlID0gcmVxdWlyZSgnLi9zY29wZS5qcycpO1xuY29uc3QgZXZlbnRQcm9jZXNzb3JzID0gcmVxdWlyZSgnLi9ldmVudFByb2Nlc3NvcnMuanMnKTtcbmNvbnN0IGFwaSA9IHJlcXVpcmUoJy4vYXBpLmpzJyk7XG5jb25zdCBiYXNlY2xpZW50ID0gcmVxdWlyZSgnLi9iYXNlY2xpZW50LmpzJyk7XG5jb25zdCBzZXJ2ZXJSdW50aW1lQ2xpZW50ID0gcmVxdWlyZSgnLi9zZXJ2ZXItcnVudGltZS1jbGllbnQuanMnKTtcbmNvbnN0IHNkayA9IHJlcXVpcmUoJy4vc2RrLmpzJyk7XG5jb25zdCBiYXNlID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2Jhc2UuanMnKTtcbmNvbnN0IG9mZmxpbmUgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvb2ZmbGluZS5qcycpO1xuY29uc3QgbXVsdGlwbGV4ZWQgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvbXVsdGlwbGV4ZWQuanMnKTtcbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgYXBwbHlTY29wZURhdGFUb0V2ZW50ID0gcmVxdWlyZSgnLi91dGlscy9hcHBseVNjb3BlRGF0YVRvRXZlbnQuanMnKTtcbmNvbnN0IHByZXBhcmVFdmVudCA9IHJlcXVpcmUoJy4vdXRpbHMvcHJlcGFyZUV2ZW50LmpzJyk7XG5jb25zdCBjaGVja2luID0gcmVxdWlyZSgnLi9jaGVja2luLmpzJyk7XG5jb25zdCBoYXNUcmFjaW5nRW5hYmxlZCA9IHJlcXVpcmUoJy4vdXRpbHMvaGFzVHJhY2luZ0VuYWJsZWQuanMnKTtcbmNvbnN0IGlzU2VudHJ5UmVxdWVzdFVybCA9IHJlcXVpcmUoJy4vdXRpbHMvaXNTZW50cnlSZXF1ZXN0VXJsLmpzJyk7XG5jb25zdCBoYW5kbGVDYWxsYmFja0Vycm9ycyA9IHJlcXVpcmUoJy4vdXRpbHMvaGFuZGxlQ2FsbGJhY2tFcnJvcnMuanMnKTtcbmNvbnN0IHBhcmFtZXRlcml6ZSA9IHJlcXVpcmUoJy4vdXRpbHMvcGFyYW1ldGVyaXplLmpzJyk7XG5jb25zdCBzcGFuVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL3NwYW5VdGlscy5qcycpO1xuY29uc3QgcGFyc2VTYW1wbGVSYXRlID0gcmVxdWlyZSgnLi91dGlscy9wYXJzZVNhbXBsZVJhdGUuanMnKTtcbmNvbnN0IHNka01ldGFkYXRhID0gcmVxdWlyZSgnLi91dGlscy9zZGtNZXRhZGF0YS5qcycpO1xuY29uc3QgdHJhY2VEYXRhID0gcmVxdWlyZSgnLi91dGlscy90cmFjZURhdGEuanMnKTtcbmNvbnN0IG1ldGEgPSByZXF1aXJlKCcuL3V0aWxzL21ldGEuanMnKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzLmpzJyk7XG5jb25zdCBicmVhZGNydW1icyA9IHJlcXVpcmUoJy4vYnJlYWRjcnVtYnMuanMnKTtcbmNvbnN0IGZ1bmN0aW9udG9zdHJpbmcgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9mdW5jdGlvbnRvc3RyaW5nLmpzJyk7XG5jb25zdCBpbmJvdW5kZmlsdGVycyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2luYm91bmRmaWx0ZXJzLmpzJyk7XG5jb25zdCBsaW5rZWRlcnJvcnMgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9saW5rZWRlcnJvcnMuanMnKTtcbmNvbnN0IG1ldGFkYXRhID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvbWV0YWRhdGEuanMnKTtcbmNvbnN0IHJlcXVlc3RkYXRhID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvcmVxdWVzdGRhdGEuanMnKTtcbmNvbnN0IGNhcHR1cmVjb25zb2xlID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvY2FwdHVyZWNvbnNvbGUuanMnKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnLi9pbnRlZ3JhdGlvbnMvZGVidWcuanMnKTtcbmNvbnN0IGRlZHVwZSA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL2RlZHVwZS5qcycpO1xuY29uc3QgZXh0cmFlcnJvcmRhdGEgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9leHRyYWVycm9yZGF0YS5qcycpO1xuY29uc3QgcmV3cml0ZWZyYW1lcyA9IHJlcXVpcmUoJy4vaW50ZWdyYXRpb25zL3Jld3JpdGVmcmFtZXMuanMnKTtcbmNvbnN0IHNlc3Npb250aW1pbmcgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy9zZXNzaW9udGltaW5nLmpzJyk7XG5jb25zdCB6b2RlcnJvcnMgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy96b2RlcnJvcnMuanMnKTtcbmNvbnN0IHRoaXJkUGFydHlFcnJvcnNGaWx0ZXIgPSByZXF1aXJlKCcuL2ludGVncmF0aW9ucy90aGlyZC1wYXJ0eS1lcnJvcnMtZmlsdGVyLmpzJyk7XG5jb25zdCBleHBvcnRzJDIgPSByZXF1aXJlKCcuL21ldHJpY3MvZXhwb3J0cy5qcycpO1xuY29uc3QgcHJvZmlsaW5nID0gcmVxdWlyZSgnLi9wcm9maWxpbmcuanMnKTtcbmNvbnN0IGV4cG9ydHNEZWZhdWx0ID0gcmVxdWlyZSgnLi9tZXRyaWNzL2V4cG9ydHMtZGVmYXVsdC5qcycpO1xuY29uc3QgYnJvd3NlckFnZ3JlZ2F0b3IgPSByZXF1aXJlKCcuL21ldHJpY3MvYnJvd3Nlci1hZ2dyZWdhdG9yLmpzJyk7XG5jb25zdCBtZXRyaWNTdW1tYXJ5ID0gcmVxdWlyZSgnLi9tZXRyaWNzL21ldHJpYy1zdW1tYXJ5LmpzJyk7XG5jb25zdCBmZXRjaCA9IHJlcXVpcmUoJy4vZmV0Y2guanMnKTtcbmNvbnN0IHRycGMgPSByZXF1aXJlKCcuL3RycGMuanMnKTtcbmNvbnN0IGZlZWRiYWNrID0gcmVxdWlyZSgnLi9mZWVkYmFjay5qcycpO1xuY29uc3QgZ2V0Q3VycmVudEh1YlNoaW0gPSByZXF1aXJlKCcuL2dldEN1cnJlbnRIdWJTaGltLmpzJyk7XG5jb25zdCBhZ2dyZWdhdGVFcnJvcnMgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2FnZ3JlZ2F0ZS1lcnJvcnMuanMnKTtcbmNvbnN0IGFycmF5ID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9hcnJheS5qcycpO1xuY29uc3QgYnJlYWRjcnVtYkxvZ0xldmVsID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9icmVhZGNydW1iLWxvZy1sZXZlbC5qcycpO1xuY29uc3QgYnJvd3NlciA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvYnJvd3Nlci5qcycpO1xuY29uc3QgZHNuID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9kc24uanMnKTtcbmNvbnN0IGVycm9yID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9lcnJvci5qcycpO1xuY29uc3Qgd29ybGR3aWRlID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC93b3JsZHdpZGUuanMnKTtcbmNvbnN0IGNvbnNvbGUgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2luc3RydW1lbnQvY29uc29sZS5qcycpO1xuY29uc3QgZmV0Y2gkMSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9mZXRjaC5qcycpO1xuY29uc3QgZ2xvYmFsRXJyb3IgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2luc3RydW1lbnQvZ2xvYmFsRXJyb3IuanMnKTtcbmNvbnN0IGdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbiA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9nbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uanMnKTtcbmNvbnN0IGhhbmRsZXJzID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9pbnN0cnVtZW50L2hhbmRsZXJzLmpzJyk7XG5jb25zdCBpcyA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvaXMuanMnKTtcbmNvbnN0IGlzQnJvd3NlciA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvaXNCcm93c2VyLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuY29uc3QgbWVtbyA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvbWVtby5qcycpO1xuY29uc3QgbWlzYyA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvbWlzYy5qcycpO1xuY29uc3Qgbm9kZSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3Qvbm9kZS5qcycpO1xuY29uc3Qgbm9ybWFsaXplID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9ub3JtYWxpemUuanMnKTtcbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3Qvb2JqZWN0LmpzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9wYXRoLmpzJyk7XG5jb25zdCBwcm9taXNlYnVmZmVyID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9wcm9taXNlYnVmZmVyLmpzJyk7XG5jb25zdCByZXF1ZXN0ZGF0YSQxID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9yZXF1ZXN0ZGF0YS5qcycpO1xuY29uc3Qgc2V2ZXJpdHkgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L3NldmVyaXR5LmpzJyk7XG5jb25zdCBzdGFja3RyYWNlID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9zdGFja3RyYWNlLmpzJyk7XG5jb25zdCBub2RlU3RhY2tUcmFjZSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3Qvbm9kZS1zdGFjay10cmFjZS5qcycpO1xuY29uc3Qgc3RyaW5nID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9zdHJpbmcuanMnKTtcbmNvbnN0IHN1cHBvcnRzID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9zdXBwb3J0cy5qcycpO1xuY29uc3Qgc3luY3Byb21pc2UgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L3N5bmNwcm9taXNlLmpzJyk7XG5jb25zdCB0aW1lID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC90aW1lLmpzJyk7XG5jb25zdCB0cmFjaW5nID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC90cmFjaW5nLmpzJyk7XG5jb25zdCBlbnYgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2Vudi5qcycpO1xuY29uc3QgZW52ZWxvcGUkMSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvZW52ZWxvcGUuanMnKTtcbmNvbnN0IGNsaWVudHJlcG9ydCA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvY2xpZW50cmVwb3J0LmpzJyk7XG5jb25zdCByYXRlbGltaXQgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L3JhdGVsaW1pdC5qcycpO1xuY29uc3QgYmFnZ2FnZSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvYmFnZ2FnZS5qcycpO1xuY29uc3QgdXJsID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC91cmwuanMnKTtcbmNvbnN0IGNhY2hlID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9jYWNoZS5qcycpO1xuY29uc3QgZXZlbnRidWlsZGVyID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9ldmVudGJ1aWxkZXIuanMnKTtcbmNvbnN0IGFuciA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvYW5yLmpzJyk7XG5jb25zdCBscnUgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2xydS5qcycpO1xuY29uc3QgcHJvcGFnYXRpb25Db250ZXh0ID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9wcm9wYWdhdGlvbkNvbnRleHQuanMnKTtcbmNvbnN0IHZlcmNlbFdhaXRVbnRpbCA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvdmVyY2VsV2FpdFVudGlsLmpzJyk7XG5jb25zdCB2ZXJzaW9uID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC92ZXJzaW9uLmpzJyk7XG5jb25zdCBkZWJ1Z0lkcyA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvZGVidWctaWRzLmpzJyk7XG5jb25zdCBlc2NhcGVTdHJpbmdGb3JSZWdleCA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvdmVuZG9yL2VzY2FwZVN0cmluZ0ZvclJlZ2V4LmpzJyk7XG5jb25zdCBzdXBwb3J0c0hpc3RvcnkgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L3ZlbmRvci9zdXBwb3J0c0hpc3RvcnkuanMnKTtcbmNvbnN0IF9hc3luY051bGxpc2hDb2FsZXNjZSA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jTnVsbGlzaENvYWxlc2NlLmpzJyk7XG5jb25zdCBfYXN5bmNPcHRpb25hbENoYWluID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9idWlsZFBvbHlmaWxscy9fYXN5bmNPcHRpb25hbENoYWluLmpzJyk7XG5jb25zdCBfYXN5bmNPcHRpb25hbENoYWluRGVsZXRlID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9idWlsZFBvbHlmaWxscy9fYXN5bmNPcHRpb25hbENoYWluRGVsZXRlLmpzJyk7XG5jb25zdCBfbnVsbGlzaENvYWxlc2NlID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9idWlsZFBvbHlmaWxscy9fbnVsbGlzaENvYWxlc2NlLmpzJyk7XG5jb25zdCBfb3B0aW9uYWxDaGFpbiA9IHJlcXVpcmUoJy4vdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX29wdGlvbmFsQ2hhaW4uanMnKTtcbmNvbnN0IF9vcHRpb25hbENoYWluRGVsZXRlID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9idWlsZFBvbHlmaWxscy9fb3B0aW9uYWxDaGFpbkRlbGV0ZS5qcycpO1xuXG5cblxuZXhwb3J0cy5yZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbiA9IGVycm9ycy5yZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbjtcbmV4cG9ydHMuZ2V0Q2FwdHVyZWRTY29wZXNPblNwYW4gPSB1dGlscy5nZXRDYXB0dXJlZFNjb3Blc09uU3BhbjtcbmV4cG9ydHMuc2V0Q2FwdHVyZWRTY29wZXNPblNwYW4gPSB1dGlscy5zZXRDYXB0dXJlZFNjb3Blc09uU3BhbjtcbmV4cG9ydHMuYWRkVHJhY2luZ0V4dGVuc2lvbnMgPSBodWJleHRlbnNpb25zLmFkZFRyYWNpbmdFeHRlbnNpb25zO1xuZXhwb3J0cy5UUkFDSU5HX0RFRkFVTFRTID0gaWRsZVNwYW4uVFJBQ0lOR19ERUZBVUxUUztcbmV4cG9ydHMuc3RhcnRJZGxlU3BhbiA9IGlkbGVTcGFuLnN0YXJ0SWRsZVNwYW47XG5leHBvcnRzLlNlbnRyeVNwYW4gPSBzZW50cnlTcGFuLlNlbnRyeVNwYW47XG5leHBvcnRzLlNlbnRyeU5vblJlY29yZGluZ1NwYW4gPSBzZW50cnlOb25SZWNvcmRpbmdTcGFuLlNlbnRyeU5vblJlY29yZGluZ1NwYW47XG5leHBvcnRzLlNQQU5fU1RBVFVTX0VSUk9SID0gc3BhbnN0YXR1cy5TUEFOX1NUQVRVU19FUlJPUjtcbmV4cG9ydHMuU1BBTl9TVEFUVVNfT0sgPSBzcGFuc3RhdHVzLlNQQU5fU1RBVFVTX09LO1xuZXhwb3J0cy5TUEFOX1NUQVRVU19VTlNFVCA9IHNwYW5zdGF0dXMuU1BBTl9TVEFUVVNfVU5TRVQ7XG5leHBvcnRzLmdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUgPSBzcGFuc3RhdHVzLmdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGU7XG5leHBvcnRzLnNldEh0dHBTdGF0dXMgPSBzcGFuc3RhdHVzLnNldEh0dHBTdGF0dXM7XG5leHBvcnRzLmNvbnRpbnVlVHJhY2UgPSB0cmFjZS5jb250aW51ZVRyYWNlO1xuZXhwb3J0cy5zdGFydEluYWN0aXZlU3BhbiA9IHRyYWNlLnN0YXJ0SW5hY3RpdmVTcGFuO1xuZXhwb3J0cy5zdGFydE5ld1RyYWNlID0gdHJhY2Uuc3RhcnROZXdUcmFjZTtcbmV4cG9ydHMuc3RhcnRTcGFuID0gdHJhY2Uuc3RhcnRTcGFuO1xuZXhwb3J0cy5zdGFydFNwYW5NYW51YWwgPSB0cmFjZS5zdGFydFNwYW5NYW51YWw7XG5leHBvcnRzLnN1cHByZXNzVHJhY2luZyA9IHRyYWNlLnN1cHByZXNzVHJhY2luZztcbmV4cG9ydHMud2l0aEFjdGl2ZVNwYW4gPSB0cmFjZS53aXRoQWN0aXZlU3BhbjtcbmV4cG9ydHMuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21DbGllbnQgPSBkeW5hbWljU2FtcGxpbmdDb250ZXh0LmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tQ2xpZW50O1xuZXhwb3J0cy5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNjb3BlID0gZHluYW1pY1NhbXBsaW5nQ29udGV4dC5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNjb3BlO1xuZXhwb3J0cy5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4gPSBkeW5hbWljU2FtcGxpbmdDb250ZXh0LmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbjtcbmV4cG9ydHMuc3BhblRvQmFnZ2FnZUhlYWRlciA9IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQuc3BhblRvQmFnZ2FnZUhlYWRlcjtcbmV4cG9ydHMuc2V0TWVhc3VyZW1lbnQgPSBtZWFzdXJlbWVudC5zZXRNZWFzdXJlbWVudDtcbmV4cG9ydHMudGltZWRFdmVudHNUb01lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50LnRpbWVkRXZlbnRzVG9NZWFzdXJlbWVudHM7XG5leHBvcnRzLnNhbXBsZVNwYW4gPSBzYW1wbGluZy5zYW1wbGVTcGFuO1xuZXhwb3J0cy5sb2dTcGFuRW5kID0gbG9nU3BhbnMubG9nU3BhbkVuZDtcbmV4cG9ydHMubG9nU3BhblN0YXJ0ID0gbG9nU3BhbnMubG9nU3BhblN0YXJ0O1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElUID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQ7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUgPSBzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0lURU1fU0laRTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWSA9IHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfRVhDTFVTSVZFX1RJTUUgPSBzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX0VYQ0xVU0lWRV9USU1FO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfSFRUUF9SRVFVRVNUX01FVEhPRCA9IHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfSFRUUF9SRVFVRVNUX01FVEhPRDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQgPSBzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQ7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfQ1VTVE9NX1NQQU5fTkFNRSA9IHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUU7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfSURMRV9TUEFOX0ZJTklTSF9SRUFTT04gPSBzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9JRExFX1NQQU5fRklOSVNIX1JFQVNPTjtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9VTklUID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9WQUxVRSA9IHNlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1A7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEU7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFID0gc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfVVJMX0ZVTEwgPSBzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1VSTF9GVUxMO1xuZXhwb3J0cy5jcmVhdGVFdmVudEVudmVsb3BlID0gZW52ZWxvcGUuY3JlYXRlRXZlbnRFbnZlbG9wZTtcbmV4cG9ydHMuY3JlYXRlU2Vzc2lvbkVudmVsb3BlID0gZW52ZWxvcGUuY3JlYXRlU2Vzc2lvbkVudmVsb3BlO1xuZXhwb3J0cy5jcmVhdGVTcGFuRW52ZWxvcGUgPSBlbnZlbG9wZS5jcmVhdGVTcGFuRW52ZWxvcGU7XG5leHBvcnRzLmFkZEV2ZW50UHJvY2Vzc29yID0gZXhwb3J0cyQxLmFkZEV2ZW50UHJvY2Vzc29yO1xuZXhwb3J0cy5jYXB0dXJlQ2hlY2tJbiA9IGV4cG9ydHMkMS5jYXB0dXJlQ2hlY2tJbjtcbmV4cG9ydHMuY2FwdHVyZUV2ZW50ID0gZXhwb3J0cyQxLmNhcHR1cmVFdmVudDtcbmV4cG9ydHMuY2FwdHVyZUV4Y2VwdGlvbiA9IGV4cG9ydHMkMS5jYXB0dXJlRXhjZXB0aW9uO1xuZXhwb3J0cy5jYXB0dXJlTWVzc2FnZSA9IGV4cG9ydHMkMS5jYXB0dXJlTWVzc2FnZTtcbmV4cG9ydHMuY2FwdHVyZVNlc3Npb24gPSBleHBvcnRzJDEuY2FwdHVyZVNlc3Npb247XG5leHBvcnRzLmNsb3NlID0gZXhwb3J0cyQxLmNsb3NlO1xuZXhwb3J0cy5lbmRTZXNzaW9uID0gZXhwb3J0cyQxLmVuZFNlc3Npb247XG5leHBvcnRzLmZsdXNoID0gZXhwb3J0cyQxLmZsdXNoO1xuZXhwb3J0cy5pc0VuYWJsZWQgPSBleHBvcnRzJDEuaXNFbmFibGVkO1xuZXhwb3J0cy5pc0luaXRpYWxpemVkID0gZXhwb3J0cyQxLmlzSW5pdGlhbGl6ZWQ7XG5leHBvcnRzLmxhc3RFdmVudElkID0gZXhwb3J0cyQxLmxhc3RFdmVudElkO1xuZXhwb3J0cy5zZXRDb250ZXh0ID0gZXhwb3J0cyQxLnNldENvbnRleHQ7XG5leHBvcnRzLnNldEV4dHJhID0gZXhwb3J0cyQxLnNldEV4dHJhO1xuZXhwb3J0cy5zZXRFeHRyYXMgPSBleHBvcnRzJDEuc2V0RXh0cmFzO1xuZXhwb3J0cy5zZXRUYWcgPSBleHBvcnRzJDEuc2V0VGFnO1xuZXhwb3J0cy5zZXRUYWdzID0gZXhwb3J0cyQxLnNldFRhZ3M7XG5leHBvcnRzLnNldFVzZXIgPSBleHBvcnRzJDEuc2V0VXNlcjtcbmV4cG9ydHMuc3RhcnRTZXNzaW9uID0gZXhwb3J0cyQxLnN0YXJ0U2Vzc2lvbjtcbmV4cG9ydHMud2l0aE1vbml0b3IgPSBleHBvcnRzJDEud2l0aE1vbml0b3I7XG5leHBvcnRzLmdldENsaWVudCA9IGN1cnJlbnRTY29wZXMuZ2V0Q2xpZW50O1xuZXhwb3J0cy5nZXRDdXJyZW50U2NvcGUgPSBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZTtcbmV4cG9ydHMuZ2V0R2xvYmFsU2NvcGUgPSBjdXJyZW50U2NvcGVzLmdldEdsb2JhbFNjb3BlO1xuZXhwb3J0cy5nZXRJc29sYXRpb25TY29wZSA9IGN1cnJlbnRTY29wZXMuZ2V0SXNvbGF0aW9uU2NvcGU7XG5leHBvcnRzLmdldFRyYWNlQ29udGV4dEZyb21TY29wZSA9IGN1cnJlbnRTY29wZXMuZ2V0VHJhY2VDb250ZXh0RnJvbVNjb3BlO1xuZXhwb3J0cy53aXRoSXNvbGF0aW9uU2NvcGUgPSBjdXJyZW50U2NvcGVzLndpdGhJc29sYXRpb25TY29wZTtcbmV4cG9ydHMud2l0aFNjb3BlID0gY3VycmVudFNjb3Blcy53aXRoU2NvcGU7XG5leHBvcnRzLmdldERlZmF1bHRDdXJyZW50U2NvcGUgPSBkZWZhdWx0U2NvcGVzLmdldERlZmF1bHRDdXJyZW50U2NvcGU7XG5leHBvcnRzLmdldERlZmF1bHRJc29sYXRpb25TY29wZSA9IGRlZmF1bHRTY29wZXMuZ2V0RGVmYXVsdElzb2xhdGlvblNjb3BlO1xuZXhwb3J0cy5zZXRBc3luY0NvbnRleHRTdHJhdGVneSA9IGluZGV4LnNldEFzeW5jQ29udGV4dFN0cmF0ZWd5O1xuZXhwb3J0cy5nZXRNYWluQ2FycmllciA9IGNhcnJpZXIuZ2V0TWFpbkNhcnJpZXI7XG5leHBvcnRzLmNsb3NlU2Vzc2lvbiA9IHNlc3Npb24uY2xvc2VTZXNzaW9uO1xuZXhwb3J0cy5tYWtlU2Vzc2lvbiA9IHNlc3Npb24ubWFrZVNlc3Npb247XG5leHBvcnRzLnVwZGF0ZVNlc3Npb24gPSBzZXNzaW9uLnVwZGF0ZVNlc3Npb247XG5leHBvcnRzLlNlc3Npb25GbHVzaGVyID0gc2Vzc2lvbmZsdXNoZXIuU2Vzc2lvbkZsdXNoZXI7XG5leHBvcnRzLlNjb3BlID0gc2NvcGUuU2NvcGU7XG5leHBvcnRzLm5vdGlmeUV2ZW50UHJvY2Vzc29ycyA9IGV2ZW50UHJvY2Vzc29ycy5ub3RpZnlFdmVudFByb2Nlc3NvcnM7XG5leHBvcnRzLmdldEVudmVsb3BlRW5kcG9pbnRXaXRoVXJsRW5jb2RlZEF1dGggPSBhcGkuZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aDtcbmV4cG9ydHMuZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQgPSBhcGkuZ2V0UmVwb3J0RGlhbG9nRW5kcG9pbnQ7XG5leHBvcnRzLkJhc2VDbGllbnQgPSBiYXNlY2xpZW50LkJhc2VDbGllbnQ7XG5leHBvcnRzLlNlcnZlclJ1bnRpbWVDbGllbnQgPSBzZXJ2ZXJSdW50aW1lQ2xpZW50LlNlcnZlclJ1bnRpbWVDbGllbnQ7XG5leHBvcnRzLmluaXRBbmRCaW5kID0gc2RrLmluaXRBbmRCaW5kO1xuZXhwb3J0cy5zZXRDdXJyZW50Q2xpZW50ID0gc2RrLnNldEN1cnJlbnRDbGllbnQ7XG5leHBvcnRzLmNyZWF0ZVRyYW5zcG9ydCA9IGJhc2UuY3JlYXRlVHJhbnNwb3J0O1xuZXhwb3J0cy5tYWtlT2ZmbGluZVRyYW5zcG9ydCA9IG9mZmxpbmUubWFrZU9mZmxpbmVUcmFuc3BvcnQ7XG5leHBvcnRzLm1ha2VNdWx0aXBsZXhlZFRyYW5zcG9ydCA9IG11bHRpcGxleGVkLm1ha2VNdWx0aXBsZXhlZFRyYW5zcG9ydDtcbmV4cG9ydHMuYWRkSW50ZWdyYXRpb24gPSBpbnRlZ3JhdGlvbi5hZGRJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuZGVmaW5lSW50ZWdyYXRpb24gPSBpbnRlZ3JhdGlvbi5kZWZpbmVJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuZ2V0SW50ZWdyYXRpb25zVG9TZXR1cCA9IGludGVncmF0aW9uLmdldEludGVncmF0aW9uc1RvU2V0dXA7XG5leHBvcnRzLmFwcGx5U2NvcGVEYXRhVG9FdmVudCA9IGFwcGx5U2NvcGVEYXRhVG9FdmVudC5hcHBseVNjb3BlRGF0YVRvRXZlbnQ7XG5leHBvcnRzLm1lcmdlU2NvcGVEYXRhID0gYXBwbHlTY29wZURhdGFUb0V2ZW50Lm1lcmdlU2NvcGVEYXRhO1xuZXhwb3J0cy5wcmVwYXJlRXZlbnQgPSBwcmVwYXJlRXZlbnQucHJlcGFyZUV2ZW50O1xuZXhwb3J0cy5jcmVhdGVDaGVja0luRW52ZWxvcGUgPSBjaGVja2luLmNyZWF0ZUNoZWNrSW5FbnZlbG9wZTtcbmV4cG9ydHMuaGFzVHJhY2luZ0VuYWJsZWQgPSBoYXNUcmFjaW5nRW5hYmxlZC5oYXNUcmFjaW5nRW5hYmxlZDtcbmV4cG9ydHMuaXNTZW50cnlSZXF1ZXN0VXJsID0gaXNTZW50cnlSZXF1ZXN0VXJsLmlzU2VudHJ5UmVxdWVzdFVybDtcbmV4cG9ydHMuaGFuZGxlQ2FsbGJhY2tFcnJvcnMgPSBoYW5kbGVDYWxsYmFja0Vycm9ycy5oYW5kbGVDYWxsYmFja0Vycm9ycztcbmV4cG9ydHMucGFyYW1ldGVyaXplID0gcGFyYW1ldGVyaXplLnBhcmFtZXRlcml6ZTtcbmV4cG9ydHMuYWRkQ2hpbGRTcGFuVG9TcGFuID0gc3BhblV0aWxzLmFkZENoaWxkU3BhblRvU3BhbjtcbmV4cG9ydHMuZ2V0QWN0aXZlU3BhbiA9IHNwYW5VdGlscy5nZXRBY3RpdmVTcGFuO1xuZXhwb3J0cy5nZXRSb290U3BhbiA9IHNwYW5VdGlscy5nZXRSb290U3BhbjtcbmV4cG9ydHMuZ2V0U3BhbkRlc2NlbmRhbnRzID0gc3BhblV0aWxzLmdldFNwYW5EZXNjZW5kYW50cztcbmV4cG9ydHMuZ2V0U3RhdHVzTWVzc2FnZSA9IHNwYW5VdGlscy5nZXRTdGF0dXNNZXNzYWdlO1xuZXhwb3J0cy5zcGFuSXNTYW1wbGVkID0gc3BhblV0aWxzLnNwYW5Jc1NhbXBsZWQ7XG5leHBvcnRzLnNwYW5UaW1lSW5wdXRUb1NlY29uZHMgPSBzcGFuVXRpbHMuc3BhblRpbWVJbnB1dFRvU2Vjb25kcztcbmV4cG9ydHMuc3BhblRvSlNPTiA9IHNwYW5VdGlscy5zcGFuVG9KU09OO1xuZXhwb3J0cy5zcGFuVG9UcmFjZUNvbnRleHQgPSBzcGFuVXRpbHMuc3BhblRvVHJhY2VDb250ZXh0O1xuZXhwb3J0cy5zcGFuVG9UcmFjZUhlYWRlciA9IHNwYW5VdGlscy5zcGFuVG9UcmFjZUhlYWRlcjtcbmV4cG9ydHMudXBkYXRlU3Bhbk5hbWUgPSBzcGFuVXRpbHMudXBkYXRlU3Bhbk5hbWU7XG5leHBvcnRzLnBhcnNlU2FtcGxlUmF0ZSA9IHBhcnNlU2FtcGxlUmF0ZS5wYXJzZVNhbXBsZVJhdGU7XG5leHBvcnRzLmFwcGx5U2RrTWV0YWRhdGEgPSBzZGtNZXRhZGF0YS5hcHBseVNka01ldGFkYXRhO1xuZXhwb3J0cy5nZXRUcmFjZURhdGEgPSB0cmFjZURhdGEuZ2V0VHJhY2VEYXRhO1xuZXhwb3J0cy5nZXRUcmFjZU1ldGFUYWdzID0gbWV0YS5nZXRUcmFjZU1ldGFUYWdzO1xuZXhwb3J0cy5ERUZBVUxUX0VOVklST05NRU5UID0gY29uc3RhbnRzLkRFRkFVTFRfRU5WSVJPTk1FTlQ7XG5leHBvcnRzLmFkZEJyZWFkY3J1bWIgPSBicmVhZGNydW1icy5hZGRCcmVhZGNydW1iO1xuZXhwb3J0cy5mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24gPSBmdW5jdGlvbnRvc3RyaW5nLmZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuaW5ib3VuZEZpbHRlcnNJbnRlZ3JhdGlvbiA9IGluYm91bmRmaWx0ZXJzLmluYm91bmRGaWx0ZXJzSW50ZWdyYXRpb247XG5leHBvcnRzLmxpbmtlZEVycm9yc0ludGVncmF0aW9uID0gbGlua2VkZXJyb3JzLmxpbmtlZEVycm9yc0ludGVncmF0aW9uO1xuZXhwb3J0cy5tb2R1bGVNZXRhZGF0YUludGVncmF0aW9uID0gbWV0YWRhdGEubW9kdWxlTWV0YWRhdGFJbnRlZ3JhdGlvbjtcbmV4cG9ydHMucmVxdWVzdERhdGFJbnRlZ3JhdGlvbiA9IHJlcXVlc3RkYXRhLnJlcXVlc3REYXRhSW50ZWdyYXRpb247XG5leHBvcnRzLmNhcHR1cmVDb25zb2xlSW50ZWdyYXRpb24gPSBjYXB0dXJlY29uc29sZS5jYXB0dXJlQ29uc29sZUludGVncmF0aW9uO1xuZXhwb3J0cy5kZWJ1Z0ludGVncmF0aW9uID0gZGVidWcuZGVidWdJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuZGVkdXBlSW50ZWdyYXRpb24gPSBkZWR1cGUuZGVkdXBlSW50ZWdyYXRpb247XG5leHBvcnRzLmV4dHJhRXJyb3JEYXRhSW50ZWdyYXRpb24gPSBleHRyYWVycm9yZGF0YS5leHRyYUVycm9yRGF0YUludGVncmF0aW9uO1xuZXhwb3J0cy5yZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24gPSByZXdyaXRlZnJhbWVzLnJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbjtcbmV4cG9ydHMuc2Vzc2lvblRpbWluZ0ludGVncmF0aW9uID0gc2Vzc2lvbnRpbWluZy5zZXNzaW9uVGltaW5nSW50ZWdyYXRpb247XG5leHBvcnRzLnpvZEVycm9yc0ludGVncmF0aW9uID0gem9kZXJyb3JzLnpvZEVycm9yc0ludGVncmF0aW9uO1xuZXhwb3J0cy50aGlyZFBhcnR5RXJyb3JGaWx0ZXJJbnRlZ3JhdGlvbiA9IHRoaXJkUGFydHlFcnJvcnNGaWx0ZXIudGhpcmRQYXJ0eUVycm9yRmlsdGVySW50ZWdyYXRpb247XG5leHBvcnRzLm1ldHJpY3MgPSBleHBvcnRzJDIubWV0cmljcztcbmV4cG9ydHMucHJvZmlsZXIgPSBwcm9maWxpbmcucHJvZmlsZXI7XG5leHBvcnRzLm1ldHJpY3NEZWZhdWx0ID0gZXhwb3J0c0RlZmF1bHQubWV0cmljc0RlZmF1bHQ7XG5leHBvcnRzLkJyb3dzZXJNZXRyaWNzQWdncmVnYXRvciA9IGJyb3dzZXJBZ2dyZWdhdG9yLkJyb3dzZXJNZXRyaWNzQWdncmVnYXRvcjtcbmV4cG9ydHMuZ2V0TWV0cmljU3VtbWFyeUpzb25Gb3JTcGFuID0gbWV0cmljU3VtbWFyeS5nZXRNZXRyaWNTdW1tYXJ5SnNvbkZvclNwYW47XG5leHBvcnRzLmFkZFRyYWNpbmdIZWFkZXJzVG9GZXRjaFJlcXVlc3QgPSBmZXRjaC5hZGRUcmFjaW5nSGVhZGVyc1RvRmV0Y2hSZXF1ZXN0O1xuZXhwb3J0cy5pbnN0cnVtZW50RmV0Y2hSZXF1ZXN0ID0gZmV0Y2guaW5zdHJ1bWVudEZldGNoUmVxdWVzdDtcbmV4cG9ydHMudHJwY01pZGRsZXdhcmUgPSB0cnBjLnRycGNNaWRkbGV3YXJlO1xuZXhwb3J0cy5jYXB0dXJlRmVlZGJhY2sgPSBmZWVkYmFjay5jYXB0dXJlRmVlZGJhY2s7XG5leHBvcnRzLmdldEN1cnJlbnRIdWIgPSBnZXRDdXJyZW50SHViU2hpbS5nZXRDdXJyZW50SHViO1xuZXhwb3J0cy5nZXRDdXJyZW50SHViU2hpbSA9IGdldEN1cnJlbnRIdWJTaGltLmdldEN1cnJlbnRIdWJTaGltO1xuZXhwb3J0cy5hcHBseUFnZ3JlZ2F0ZUVycm9yc1RvRXZlbnQgPSBhZ2dyZWdhdGVFcnJvcnMuYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50O1xuZXhwb3J0cy5mbGF0dGVuID0gYXJyYXkuZmxhdHRlbjtcbmV4cG9ydHMuZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlID0gYnJlYWRjcnVtYkxvZ0xldmVsLmdldEJyZWFkY3J1bWJMb2dMZXZlbEZyb21IdHRwU3RhdHVzQ29kZTtcbmV4cG9ydHMuZ2V0Q29tcG9uZW50TmFtZSA9IGJyb3dzZXIuZ2V0Q29tcG9uZW50TmFtZTtcbmV4cG9ydHMuZ2V0RG9tRWxlbWVudCA9IGJyb3dzZXIuZ2V0RG9tRWxlbWVudDtcbmV4cG9ydHMuZ2V0TG9jYXRpb25IcmVmID0gYnJvd3Nlci5nZXRMb2NhdGlvbkhyZWY7XG5leHBvcnRzLmh0bWxUcmVlQXNTdHJpbmcgPSBicm93c2VyLmh0bWxUcmVlQXNTdHJpbmc7XG5leHBvcnRzLmRzbkZyb21TdHJpbmcgPSBkc24uZHNuRnJvbVN0cmluZztcbmV4cG9ydHMuZHNuVG9TdHJpbmcgPSBkc24uZHNuVG9TdHJpbmc7XG5leHBvcnRzLm1ha2VEc24gPSBkc24ubWFrZURzbjtcbmV4cG9ydHMuU2VudHJ5RXJyb3IgPSBlcnJvci5TZW50cnlFcnJvcjtcbmV4cG9ydHMuR0xPQkFMX09CSiA9IHdvcmxkd2lkZS5HTE9CQUxfT0JKO1xuZXhwb3J0cy5nZXRHbG9iYWxTaW5nbGV0b24gPSB3b3JsZHdpZGUuZ2V0R2xvYmFsU2luZ2xldG9uO1xuZXhwb3J0cy5hZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlciA9IGNvbnNvbGUuYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXI7XG5leHBvcnRzLmFkZEZldGNoRW5kSW5zdHJ1bWVudGF0aW9uSGFuZGxlciA9IGZldGNoJDEuYWRkRmV0Y2hFbmRJbnN0cnVtZW50YXRpb25IYW5kbGVyO1xuZXhwb3J0cy5hZGRGZXRjaEluc3RydW1lbnRhdGlvbkhhbmRsZXIgPSBmZXRjaCQxLmFkZEZldGNoSW5zdHJ1bWVudGF0aW9uSGFuZGxlcjtcbmV4cG9ydHMuYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyID0gZ2xvYmFsRXJyb3IuYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyO1xuZXhwb3J0cy5hZGRHbG9iYWxVbmhhbmRsZWRSZWplY3Rpb25JbnN0cnVtZW50YXRpb25IYW5kbGVyID0gZ2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uLmFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXI7XG5leHBvcnRzLmFkZEhhbmRsZXIgPSBoYW5kbGVycy5hZGRIYW5kbGVyO1xuZXhwb3J0cy5tYXliZUluc3RydW1lbnQgPSBoYW5kbGVycy5tYXliZUluc3RydW1lbnQ7XG5leHBvcnRzLnJlc2V0SW5zdHJ1bWVudGF0aW9uSGFuZGxlcnMgPSBoYW5kbGVycy5yZXNldEluc3RydW1lbnRhdGlvbkhhbmRsZXJzO1xuZXhwb3J0cy50cmlnZ2VySGFuZGxlcnMgPSBoYW5kbGVycy50cmlnZ2VySGFuZGxlcnM7XG5leHBvcnRzLmlzRE9NRXJyb3IgPSBpcy5pc0RPTUVycm9yO1xuZXhwb3J0cy5pc0RPTUV4Y2VwdGlvbiA9IGlzLmlzRE9NRXhjZXB0aW9uO1xuZXhwb3J0cy5pc0VsZW1lbnQgPSBpcy5pc0VsZW1lbnQ7XG5leHBvcnRzLmlzRXJyb3IgPSBpcy5pc0Vycm9yO1xuZXhwb3J0cy5pc0Vycm9yRXZlbnQgPSBpcy5pc0Vycm9yRXZlbnQ7XG5leHBvcnRzLmlzRXZlbnQgPSBpcy5pc0V2ZW50O1xuZXhwb3J0cy5pc0luc3RhbmNlT2YgPSBpcy5pc0luc3RhbmNlT2Y7XG5leHBvcnRzLmlzUGFyYW1ldGVyaXplZFN0cmluZyA9IGlzLmlzUGFyYW1ldGVyaXplZFN0cmluZztcbmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGlzLmlzUGxhaW5PYmplY3Q7XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXMuaXNQcmltaXRpdmU7XG5leHBvcnRzLmlzUmVnRXhwID0gaXMuaXNSZWdFeHA7XG5leHBvcnRzLmlzU3RyaW5nID0gaXMuaXNTdHJpbmc7XG5leHBvcnRzLmlzU3ludGhldGljRXZlbnQgPSBpcy5pc1N5bnRoZXRpY0V2ZW50O1xuZXhwb3J0cy5pc1RoZW5hYmxlID0gaXMuaXNUaGVuYWJsZTtcbmV4cG9ydHMuaXNWdWVWaWV3TW9kZWwgPSBpcy5pc1Z1ZVZpZXdNb2RlbDtcbmV4cG9ydHMuaXNCcm93c2VyID0gaXNCcm93c2VyLmlzQnJvd3NlcjtcbmV4cG9ydHMuQ09OU09MRV9MRVZFTFMgPSBsb2dnZXIuQ09OU09MRV9MRVZFTFM7XG5leHBvcnRzLmNvbnNvbGVTYW5kYm94ID0gbG9nZ2VyLmNvbnNvbGVTYW5kYm94O1xuZXhwb3J0cy5sb2dnZXIgPSBsb2dnZXIubG9nZ2VyO1xuZXhwb3J0cy5vcmlnaW5hbENvbnNvbGVNZXRob2RzID0gbG9nZ2VyLm9yaWdpbmFsQ29uc29sZU1ldGhvZHM7XG5leHBvcnRzLm1lbW9CdWlsZGVyID0gbWVtby5tZW1vQnVpbGRlcjtcbmV4cG9ydHMuYWRkQ29udGV4dFRvRnJhbWUgPSBtaXNjLmFkZENvbnRleHRUb0ZyYW1lO1xuZXhwb3J0cy5hZGRFeGNlcHRpb25NZWNoYW5pc20gPSBtaXNjLmFkZEV4Y2VwdGlvbk1lY2hhbmlzbTtcbmV4cG9ydHMuYWRkRXhjZXB0aW9uVHlwZVZhbHVlID0gbWlzYy5hZGRFeGNlcHRpb25UeXBlVmFsdWU7XG5leHBvcnRzLmFycmF5aWZ5ID0gbWlzYy5hcnJheWlmeTtcbmV4cG9ydHMuY2hlY2tPclNldEFscmVhZHlDYXVnaHQgPSBtaXNjLmNoZWNrT3JTZXRBbHJlYWR5Q2F1Z2h0O1xuZXhwb3J0cy5nZXRFdmVudERlc2NyaXB0aW9uID0gbWlzYy5nZXRFdmVudERlc2NyaXB0aW9uO1xuZXhwb3J0cy5wYXJzZVNlbXZlciA9IG1pc2MucGFyc2VTZW12ZXI7XG5leHBvcnRzLnV1aWQ0ID0gbWlzYy51dWlkNDtcbmV4cG9ydHMuZHluYW1pY1JlcXVpcmUgPSBub2RlLmR5bmFtaWNSZXF1aXJlO1xuZXhwb3J0cy5pc05vZGVFbnYgPSBub2RlLmlzTm9kZUVudjtcbmV4cG9ydHMubG9hZE1vZHVsZSA9IG5vZGUubG9hZE1vZHVsZTtcbmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplLm5vcm1hbGl6ZTtcbmV4cG9ydHMubm9ybWFsaXplVG9TaXplID0gbm9ybWFsaXplLm5vcm1hbGl6ZVRvU2l6ZTtcbmV4cG9ydHMubm9ybWFsaXplVXJsVG9CYXNlID0gbm9ybWFsaXplLm5vcm1hbGl6ZVVybFRvQmFzZTtcbmV4cG9ydHMuYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gb2JqZWN0LmFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eTtcbmV4cG9ydHMuY29udmVydFRvUGxhaW5PYmplY3QgPSBvYmplY3QuY29udmVydFRvUGxhaW5PYmplY3Q7XG5leHBvcnRzLmRyb3BVbmRlZmluZWRLZXlzID0gb2JqZWN0LmRyb3BVbmRlZmluZWRLZXlzO1xuZXhwb3J0cy5leHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UgPSBvYmplY3QuZXh0cmFjdEV4Y2VwdGlvbktleXNGb3JNZXNzYWdlO1xuZXhwb3J0cy5maWxsID0gb2JqZWN0LmZpbGw7XG5leHBvcnRzLmdldE9yaWdpbmFsRnVuY3Rpb24gPSBvYmplY3QuZ2V0T3JpZ2luYWxGdW5jdGlvbjtcbmV4cG9ydHMubWFya0Z1bmN0aW9uV3JhcHBlZCA9IG9iamVjdC5tYXJrRnVuY3Rpb25XcmFwcGVkO1xuZXhwb3J0cy5vYmplY3RpZnkgPSBvYmplY3Qub2JqZWN0aWZ5O1xuZXhwb3J0cy51cmxFbmNvZGUgPSBvYmplY3QudXJsRW5jb2RlO1xuZXhwb3J0cy5iYXNlbmFtZSA9IHBhdGguYmFzZW5hbWU7XG5leHBvcnRzLmRpcm5hbWUgPSBwYXRoLmRpcm5hbWU7XG5leHBvcnRzLmlzQWJzb2x1dGUgPSBwYXRoLmlzQWJzb2x1dGU7XG5leHBvcnRzLmpvaW4gPSBwYXRoLmpvaW47XG5leHBvcnRzLm5vcm1hbGl6ZVBhdGggPSBwYXRoLm5vcm1hbGl6ZVBhdGg7XG5leHBvcnRzLnJlbGF0aXZlID0gcGF0aC5yZWxhdGl2ZTtcbmV4cG9ydHMucmVzb2x2ZSA9IHBhdGgucmVzb2x2ZTtcbmV4cG9ydHMubWFrZVByb21pc2VCdWZmZXIgPSBwcm9taXNlYnVmZmVyLm1ha2VQcm9taXNlQnVmZmVyO1xuZXhwb3J0cy5ERUZBVUxUX1VTRVJfSU5DTFVERVMgPSByZXF1ZXN0ZGF0YSQxLkRFRkFVTFRfVVNFUl9JTkNMVURFUztcbmV4cG9ydHMuYWRkTm9ybWFsaXplZFJlcXVlc3REYXRhVG9FdmVudCA9IHJlcXVlc3RkYXRhJDEuYWRkTm9ybWFsaXplZFJlcXVlc3REYXRhVG9FdmVudDtcbmV4cG9ydHMuYWRkUmVxdWVzdERhdGFUb0V2ZW50ID0gcmVxdWVzdGRhdGEkMS5hZGRSZXF1ZXN0RGF0YVRvRXZlbnQ7XG5leHBvcnRzLmV4dHJhY3RQYXRoRm9yVHJhbnNhY3Rpb24gPSByZXF1ZXN0ZGF0YSQxLmV4dHJhY3RQYXRoRm9yVHJhbnNhY3Rpb247XG5leHBvcnRzLmV4dHJhY3RRdWVyeVBhcmFtc0Zyb21VcmwgPSByZXF1ZXN0ZGF0YSQxLmV4dHJhY3RRdWVyeVBhcmFtc0Zyb21Vcmw7XG5leHBvcnRzLmV4dHJhY3RSZXF1ZXN0RGF0YSA9IHJlcXVlc3RkYXRhJDEuZXh0cmFjdFJlcXVlc3REYXRhO1xuZXhwb3J0cy5oZWFkZXJzVG9EaWN0ID0gcmVxdWVzdGRhdGEkMS5oZWFkZXJzVG9EaWN0O1xuZXhwb3J0cy5odHRwUmVxdWVzdFRvUmVxdWVzdERhdGEgPSByZXF1ZXN0ZGF0YSQxLmh0dHBSZXF1ZXN0VG9SZXF1ZXN0RGF0YTtcbmV4cG9ydHMud2ludGVyQ0dIZWFkZXJzVG9EaWN0ID0gcmVxdWVzdGRhdGEkMS53aW50ZXJDR0hlYWRlcnNUb0RpY3Q7XG5leHBvcnRzLndpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGEgPSByZXF1ZXN0ZGF0YSQxLndpbnRlckNHUmVxdWVzdFRvUmVxdWVzdERhdGE7XG5leHBvcnRzLnNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nID0gc2V2ZXJpdHkuc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmc7XG5leHBvcnRzLnZhbGlkU2V2ZXJpdHlMZXZlbHMgPSBzZXZlcml0eS52YWxpZFNldmVyaXR5TGV2ZWxzO1xuZXhwb3J0cy5VTktOT1dOX0ZVTkNUSU9OID0gc3RhY2t0cmFjZS5VTktOT1dOX0ZVTkNUSU9OO1xuZXhwb3J0cy5jcmVhdGVTdGFja1BhcnNlciA9IHN0YWNrdHJhY2UuY3JlYXRlU3RhY2tQYXJzZXI7XG5leHBvcnRzLmdldEZyYW1lc0Zyb21FdmVudCA9IHN0YWNrdHJhY2UuZ2V0RnJhbWVzRnJvbUV2ZW50O1xuZXhwb3J0cy5nZXRGdW5jdGlvbk5hbWUgPSBzdGFja3RyYWNlLmdldEZ1bmN0aW9uTmFtZTtcbmV4cG9ydHMuc3RhY2tQYXJzZXJGcm9tU3RhY2tQYXJzZXJPcHRpb25zID0gc3RhY2t0cmFjZS5zdGFja1BhcnNlckZyb21TdGFja1BhcnNlck9wdGlvbnM7XG5leHBvcnRzLnN0cmlwU2VudHJ5RnJhbWVzQW5kUmV2ZXJzZSA9IHN0YWNrdHJhY2Uuc3RyaXBTZW50cnlGcmFtZXNBbmRSZXZlcnNlO1xuZXhwb3J0cy5maWxlbmFtZUlzSW5BcHAgPSBub2RlU3RhY2tUcmFjZS5maWxlbmFtZUlzSW5BcHA7XG5leHBvcnRzLm5vZGUgPSBub2RlU3RhY2tUcmFjZS5ub2RlO1xuZXhwb3J0cy5ub2RlU3RhY2tMaW5lUGFyc2VyID0gbm9kZVN0YWNrVHJhY2Uubm9kZVN0YWNrTGluZVBhcnNlcjtcbmV4cG9ydHMuaXNNYXRjaGluZ1BhdHRlcm4gPSBzdHJpbmcuaXNNYXRjaGluZ1BhdHRlcm47XG5leHBvcnRzLnNhZmVKb2luID0gc3RyaW5nLnNhZmVKb2luO1xuZXhwb3J0cy5zbmlwTGluZSA9IHN0cmluZy5zbmlwTGluZTtcbmV4cG9ydHMuc3RyaW5nTWF0Y2hlc1NvbWVQYXR0ZXJuID0gc3RyaW5nLnN0cmluZ01hdGNoZXNTb21lUGF0dGVybjtcbmV4cG9ydHMudHJ1bmNhdGUgPSBzdHJpbmcudHJ1bmNhdGU7XG5leHBvcnRzLmlzTmF0aXZlRnVuY3Rpb24gPSBzdXBwb3J0cy5pc05hdGl2ZUZ1bmN0aW9uO1xuZXhwb3J0cy5zdXBwb3J0c0RPTUVycm9yID0gc3VwcG9ydHMuc3VwcG9ydHNET01FcnJvcjtcbmV4cG9ydHMuc3VwcG9ydHNET01FeGNlcHRpb24gPSBzdXBwb3J0cy5zdXBwb3J0c0RPTUV4Y2VwdGlvbjtcbmV4cG9ydHMuc3VwcG9ydHNFcnJvckV2ZW50ID0gc3VwcG9ydHMuc3VwcG9ydHNFcnJvckV2ZW50O1xuZXhwb3J0cy5zdXBwb3J0c0ZldGNoID0gc3VwcG9ydHMuc3VwcG9ydHNGZXRjaDtcbmV4cG9ydHMuc3VwcG9ydHNOYXRpdmVGZXRjaCA9IHN1cHBvcnRzLnN1cHBvcnRzTmF0aXZlRmV0Y2g7XG5leHBvcnRzLnN1cHBvcnRzUmVmZXJyZXJQb2xpY3kgPSBzdXBwb3J0cy5zdXBwb3J0c1JlZmVycmVyUG9saWN5O1xuZXhwb3J0cy5zdXBwb3J0c1JlcG9ydGluZ09ic2VydmVyID0gc3VwcG9ydHMuc3VwcG9ydHNSZXBvcnRpbmdPYnNlcnZlcjtcbmV4cG9ydHMuU3luY1Byb21pc2UgPSBzeW5jcHJvbWlzZS5TeW5jUHJvbWlzZTtcbmV4cG9ydHMucmVqZWN0ZWRTeW5jUHJvbWlzZSA9IHN5bmNwcm9taXNlLnJlamVjdGVkU3luY1Byb21pc2U7XG5leHBvcnRzLnJlc29sdmVkU3luY1Byb21pc2UgPSBzeW5jcHJvbWlzZS5yZXNvbHZlZFN5bmNQcm9taXNlO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX2Jyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW5Nb2RlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiAoKSA9PiB0aW1lLl9icm93c2VyUGVyZm9ybWFuY2VUaW1lT3JpZ2luTW9kZVxufSk7XG5leHBvcnRzLmJyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW4gPSB0aW1lLmJyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW47XG5leHBvcnRzLmRhdGVUaW1lc3RhbXBJblNlY29uZHMgPSB0aW1lLmRhdGVUaW1lc3RhbXBJblNlY29uZHM7XG5leHBvcnRzLnRpbWVzdGFtcEluU2Vjb25kcyA9IHRpbWUudGltZXN0YW1wSW5TZWNvbmRzO1xuZXhwb3J0cy5UUkFDRVBBUkVOVF9SRUdFWFAgPSB0cmFjaW5nLlRSQUNFUEFSRU5UX1JFR0VYUDtcbmV4cG9ydHMuZXh0cmFjdFRyYWNlcGFyZW50RGF0YSA9IHRyYWNpbmcuZXh0cmFjdFRyYWNlcGFyZW50RGF0YTtcbmV4cG9ydHMuZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlciA9IHRyYWNpbmcuZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlcjtcbmV4cG9ydHMucHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnMgPSB0cmFjaW5nLnByb3BhZ2F0aW9uQ29udGV4dEZyb21IZWFkZXJzO1xuZXhwb3J0cy5nZXRTREtTb3VyY2UgPSBlbnYuZ2V0U0RLU291cmNlO1xuZXhwb3J0cy5pc0Jyb3dzZXJCdW5kbGUgPSBlbnYuaXNCcm93c2VyQnVuZGxlO1xuZXhwb3J0cy5hZGRJdGVtVG9FbnZlbG9wZSA9IGVudmVsb3BlJDEuYWRkSXRlbVRvRW52ZWxvcGU7XG5leHBvcnRzLmNyZWF0ZUF0dGFjaG1lbnRFbnZlbG9wZUl0ZW0gPSBlbnZlbG9wZSQxLmNyZWF0ZUF0dGFjaG1lbnRFbnZlbG9wZUl0ZW07XG5leHBvcnRzLmNyZWF0ZUVudmVsb3BlID0gZW52ZWxvcGUkMS5jcmVhdGVFbnZlbG9wZTtcbmV4cG9ydHMuY3JlYXRlRXZlbnRFbnZlbG9wZUhlYWRlcnMgPSBlbnZlbG9wZSQxLmNyZWF0ZUV2ZW50RW52ZWxvcGVIZWFkZXJzO1xuZXhwb3J0cy5jcmVhdGVTcGFuRW52ZWxvcGVJdGVtID0gZW52ZWxvcGUkMS5jcmVhdGVTcGFuRW52ZWxvcGVJdGVtO1xuZXhwb3J0cy5lbnZlbG9wZUNvbnRhaW5zSXRlbVR5cGUgPSBlbnZlbG9wZSQxLmVudmVsb3BlQ29udGFpbnNJdGVtVHlwZTtcbmV4cG9ydHMuZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5ID0gZW52ZWxvcGUkMS5lbnZlbG9wZUl0ZW1UeXBlVG9EYXRhQ2F0ZWdvcnk7XG5leHBvcnRzLmZvckVhY2hFbnZlbG9wZUl0ZW0gPSBlbnZlbG9wZSQxLmZvckVhY2hFbnZlbG9wZUl0ZW07XG5leHBvcnRzLmdldFNka01ldGFkYXRhRm9yRW52ZWxvcGVIZWFkZXIgPSBlbnZlbG9wZSQxLmdldFNka01ldGFkYXRhRm9yRW52ZWxvcGVIZWFkZXI7XG5leHBvcnRzLnBhcnNlRW52ZWxvcGUgPSBlbnZlbG9wZSQxLnBhcnNlRW52ZWxvcGU7XG5leHBvcnRzLnNlcmlhbGl6ZUVudmVsb3BlID0gZW52ZWxvcGUkMS5zZXJpYWxpemVFbnZlbG9wZTtcbmV4cG9ydHMuY3JlYXRlQ2xpZW50UmVwb3J0RW52ZWxvcGUgPSBjbGllbnRyZXBvcnQuY3JlYXRlQ2xpZW50UmVwb3J0RW52ZWxvcGU7XG5leHBvcnRzLkRFRkFVTFRfUkVUUllfQUZURVIgPSByYXRlbGltaXQuREVGQVVMVF9SRVRSWV9BRlRFUjtcbmV4cG9ydHMuZGlzYWJsZWRVbnRpbCA9IHJhdGVsaW1pdC5kaXNhYmxlZFVudGlsO1xuZXhwb3J0cy5pc1JhdGVMaW1pdGVkID0gcmF0ZWxpbWl0LmlzUmF0ZUxpbWl0ZWQ7XG5leHBvcnRzLnBhcnNlUmV0cnlBZnRlckhlYWRlciA9IHJhdGVsaW1pdC5wYXJzZVJldHJ5QWZ0ZXJIZWFkZXI7XG5leHBvcnRzLnVwZGF0ZVJhdGVMaW1pdHMgPSByYXRlbGltaXQudXBkYXRlUmF0ZUxpbWl0cztcbmV4cG9ydHMuQkFHR0FHRV9IRUFERVJfTkFNRSA9IGJhZ2dhZ2UuQkFHR0FHRV9IRUFERVJfTkFNRTtcbmV4cG9ydHMuTUFYX0JBR0dBR0VfU1RSSU5HX0xFTkdUSCA9IGJhZ2dhZ2UuTUFYX0JBR0dBR0VfU1RSSU5HX0xFTkdUSDtcbmV4cG9ydHMuU0VOVFJZX0JBR0dBR0VfS0VZX1BSRUZJWCA9IGJhZ2dhZ2UuU0VOVFJZX0JBR0dBR0VfS0VZX1BSRUZJWDtcbmV4cG9ydHMuU0VOVFJZX0JBR0dBR0VfS0VZX1BSRUZJWF9SRUdFWCA9IGJhZ2dhZ2UuU0VOVFJZX0JBR0dBR0VfS0VZX1BSRUZJWF9SRUdFWDtcbmV4cG9ydHMuYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dCA9IGJhZ2dhZ2UuYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dDtcbmV4cG9ydHMuZHluYW1pY1NhbXBsaW5nQ29udGV4dFRvU2VudHJ5QmFnZ2FnZUhlYWRlciA9IGJhZ2dhZ2UuZHluYW1pY1NhbXBsaW5nQ29udGV4dFRvU2VudHJ5QmFnZ2FnZUhlYWRlcjtcbmV4cG9ydHMucGFyc2VCYWdnYWdlSGVhZGVyID0gYmFnZ2FnZS5wYXJzZUJhZ2dhZ2VIZWFkZXI7XG5leHBvcnRzLmdldE51bWJlck9mVXJsU2VnbWVudHMgPSB1cmwuZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cztcbmV4cG9ydHMuZ2V0U2FuaXRpemVkVXJsU3RyaW5nID0gdXJsLmdldFNhbml0aXplZFVybFN0cmluZztcbmV4cG9ydHMucGFyc2VVcmwgPSB1cmwucGFyc2VVcmw7XG5leHBvcnRzLnN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudCA9IHVybC5zdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQ7XG5leHBvcnRzLm1ha2VGaWZvQ2FjaGUgPSBjYWNoZS5tYWtlRmlmb0NhY2hlO1xuZXhwb3J0cy5ldmVudEZyb21NZXNzYWdlID0gZXZlbnRidWlsZGVyLmV2ZW50RnJvbU1lc3NhZ2U7XG5leHBvcnRzLmV2ZW50RnJvbVVua25vd25JbnB1dCA9IGV2ZW50YnVpbGRlci5ldmVudEZyb21Vbmtub3duSW5wdXQ7XG5leHBvcnRzLmV4Y2VwdGlvbkZyb21FcnJvciA9IGV2ZW50YnVpbGRlci5leGNlcHRpb25Gcm9tRXJyb3I7XG5leHBvcnRzLnBhcnNlU3RhY2tGcmFtZXMgPSBldmVudGJ1aWxkZXIucGFyc2VTdGFja0ZyYW1lcztcbmV4cG9ydHMuY2FsbEZyYW1lVG9TdGFja0ZyYW1lID0gYW5yLmNhbGxGcmFtZVRvU3RhY2tGcmFtZTtcbmV4cG9ydHMud2F0Y2hkb2dUaW1lciA9IGFuci53YXRjaGRvZ1RpbWVyO1xuZXhwb3J0cy5MUlVNYXAgPSBscnUuTFJVTWFwO1xuZXhwb3J0cy5nZW5lcmF0ZVByb3BhZ2F0aW9uQ29udGV4dCA9IHByb3BhZ2F0aW9uQ29udGV4dC5nZW5lcmF0ZVByb3BhZ2F0aW9uQ29udGV4dDtcbmV4cG9ydHMuZ2VuZXJhdGVTcGFuSWQgPSBwcm9wYWdhdGlvbkNvbnRleHQuZ2VuZXJhdGVTcGFuSWQ7XG5leHBvcnRzLmdlbmVyYXRlVHJhY2VJZCA9IHByb3BhZ2F0aW9uQ29udGV4dC5nZW5lcmF0ZVRyYWNlSWQ7XG5leHBvcnRzLnZlcmNlbFdhaXRVbnRpbCA9IHZlcmNlbFdhaXRVbnRpbC52ZXJjZWxXYWl0VW50aWw7XG5leHBvcnRzLlNES19WRVJTSU9OID0gdmVyc2lvbi5TREtfVkVSU0lPTjtcbmV4cG9ydHMuZ2V0RGVidWdJbWFnZXNGb3JSZXNvdXJjZXMgPSBkZWJ1Z0lkcy5nZXREZWJ1Z0ltYWdlc0ZvclJlc291cmNlcztcbmV4cG9ydHMuZ2V0RmlsZW5hbWVUb0RlYnVnSWRNYXAgPSBkZWJ1Z0lkcy5nZXRGaWxlbmFtZVRvRGVidWdJZE1hcDtcbmV4cG9ydHMuZXNjYXBlU3RyaW5nRm9yUmVnZXggPSBlc2NhcGVTdHJpbmdGb3JSZWdleC5lc2NhcGVTdHJpbmdGb3JSZWdleDtcbmV4cG9ydHMuc3VwcG9ydHNIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5LnN1cHBvcnRzSGlzdG9yeTtcbmV4cG9ydHMuX2FzeW5jTnVsbGlzaENvYWxlc2NlID0gX2FzeW5jTnVsbGlzaENvYWxlc2NlLl9hc3luY051bGxpc2hDb2FsZXNjZTtcbmV4cG9ydHMuX2FzeW5jT3B0aW9uYWxDaGFpbiA9IF9hc3luY09wdGlvbmFsQ2hhaW4uX2FzeW5jT3B0aW9uYWxDaGFpbjtcbmV4cG9ydHMuX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZSA9IF9hc3luY09wdGlvbmFsQ2hhaW5EZWxldGUuX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZTtcbmV4cG9ydHMuX251bGxpc2hDb2FsZXNjZSA9IF9udWxsaXNoQ29hbGVzY2UuX251bGxpc2hDb2FsZXNjZTtcbmV4cG9ydHMuX29wdGlvbmFsQ2hhaW4gPSBfb3B0aW9uYWxDaGFpbi5fb3B0aW9uYWxDaGFpbjtcbmV4cG9ydHMuX29wdGlvbmFsQ2hhaW5EZWxldGUgPSBfb3B0aW9uYWxDaGFpbkRlbGV0ZS5fb3B0aW9uYWxDaGFpbkRlbGV0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXJyb3JzIiwicmVxdWlyZSIsInV0aWxzIiwiaHViZXh0ZW5zaW9ucyIsImlkbGVTcGFuIiwic2VudHJ5U3BhbiIsInNlbnRyeU5vblJlY29yZGluZ1NwYW4iLCJzcGFuc3RhdHVzIiwidHJhY2UiLCJkeW5hbWljU2FtcGxpbmdDb250ZXh0IiwibWVhc3VyZW1lbnQiLCJzYW1wbGluZyIsImxvZ1NwYW5zIiwic2VtYW50aWNBdHRyaWJ1dGVzIiwiZW52ZWxvcGUiLCJleHBvcnRzJDEiLCJjdXJyZW50U2NvcGVzIiwiZGVmYXVsdFNjb3BlcyIsImluZGV4IiwiY2FycmllciIsInNlc3Npb24iLCJzZXNzaW9uZmx1c2hlciIsInNjb3BlIiwiZXZlbnRQcm9jZXNzb3JzIiwiYXBpIiwiYmFzZWNsaWVudCIsInNlcnZlclJ1bnRpbWVDbGllbnQiLCJzZGsiLCJiYXNlIiwib2ZmbGluZSIsIm11bHRpcGxleGVkIiwiaW50ZWdyYXRpb24iLCJhcHBseVNjb3BlRGF0YVRvRXZlbnQiLCJwcmVwYXJlRXZlbnQiLCJjaGVja2luIiwiaGFzVHJhY2luZ0VuYWJsZWQiLCJpc1NlbnRyeVJlcXVlc3RVcmwiLCJoYW5kbGVDYWxsYmFja0Vycm9ycyIsInBhcmFtZXRlcml6ZSIsInNwYW5VdGlscyIsInBhcnNlU2FtcGxlUmF0ZSIsInNka01ldGFkYXRhIiwidHJhY2VEYXRhIiwibWV0YSIsImNvbnN0YW50cyIsImJyZWFkY3J1bWJzIiwiZnVuY3Rpb250b3N0cmluZyIsImluYm91bmRmaWx0ZXJzIiwibGlua2VkZXJyb3JzIiwibWV0YWRhdGEiLCJyZXF1ZXN0ZGF0YSIsImNhcHR1cmVjb25zb2xlIiwiZGVidWciLCJkZWR1cGUiLCJleHRyYWVycm9yZGF0YSIsInJld3JpdGVmcmFtZXMiLCJzZXNzaW9udGltaW5nIiwiem9kZXJyb3JzIiwidGhpcmRQYXJ0eUVycm9yc0ZpbHRlciIsImV4cG9ydHMkMiIsInByb2ZpbGluZyIsImV4cG9ydHNEZWZhdWx0IiwiYnJvd3NlckFnZ3JlZ2F0b3IiLCJtZXRyaWNTdW1tYXJ5IiwiZmV0Y2giLCJ0cnBjIiwiZmVlZGJhY2siLCJnZXRDdXJyZW50SHViU2hpbSIsImFnZ3JlZ2F0ZUVycm9ycyIsImFycmF5IiwiYnJlYWRjcnVtYkxvZ0xldmVsIiwiYnJvd3NlciIsImRzbiIsImVycm9yIiwid29ybGR3aWRlIiwiY29uc29sZSIsImZldGNoJDEiLCJnbG9iYWxFcnJvciIsImdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbiIsImhhbmRsZXJzIiwiaXMiLCJpc0Jyb3dzZXIiLCJsb2dnZXIiLCJtZW1vIiwibWlzYyIsIm5vZGUiLCJub3JtYWxpemUiLCJvYmplY3QiLCJwYXRoIiwicHJvbWlzZWJ1ZmZlciIsInJlcXVlc3RkYXRhJDEiLCJzZXZlcml0eSIsInN0YWNrdHJhY2UiLCJub2RlU3RhY2tUcmFjZSIsInN0cmluZyIsInN1cHBvcnRzIiwic3luY3Byb21pc2UiLCJ0aW1lIiwidHJhY2luZyIsImVudiIsImVudmVsb3BlJDEiLCJjbGllbnRyZXBvcnQiLCJyYXRlbGltaXQiLCJiYWdnYWdlIiwidXJsIiwiY2FjaGUiLCJldmVudGJ1aWxkZXIiLCJhbnIiLCJscnUiLCJwcm9wYWdhdGlvbkNvbnRleHQiLCJ2ZXJjZWxXYWl0VW50aWwiLCJ2ZXJzaW9uIiwiZGVidWdJZHMiLCJlc2NhcGVTdHJpbmdGb3JSZWdleCIsInN1cHBvcnRzSGlzdG9yeSIsIl9hc3luY051bGxpc2hDb2FsZXNjZSIsIl9hc3luY09wdGlvbmFsQ2hhaW4iLCJfYXN5bmNPcHRpb25hbENoYWluRGVsZXRlIiwiX251bGxpc2hDb2FsZXNjZSIsIl9vcHRpb25hbENoYWluIiwiX29wdGlvbmFsQ2hhaW5EZWxldGUiLCJyZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbiIsImdldENhcHR1cmVkU2NvcGVzT25TcGFuIiwic2V0Q2FwdHVyZWRTY29wZXNPblNwYW4iLCJhZGRUcmFjaW5nRXh0ZW5zaW9ucyIsIlRSQUNJTkdfREVGQVVMVFMiLCJzdGFydElkbGVTcGFuIiwiU2VudHJ5U3BhbiIsIlNlbnRyeU5vblJlY29yZGluZ1NwYW4iLCJTUEFOX1NUQVRVU19FUlJPUiIsIlNQQU5fU1RBVFVTX09LIiwiU1BBTl9TVEFUVVNfVU5TRVQiLCJnZXRTcGFuU3RhdHVzRnJvbUh0dHBDb2RlIiwic2V0SHR0cFN0YXR1cyIsImNvbnRpbnVlVHJhY2UiLCJzdGFydEluYWN0aXZlU3BhbiIsInN0YXJ0TmV3VHJhY2UiLCJzdGFydFNwYW4iLCJzdGFydFNwYW5NYW51YWwiLCJzdXBwcmVzc1RyYWNpbmciLCJ3aXRoQWN0aXZlU3BhbiIsImdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tQ2xpZW50IiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TY29wZSIsImdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbiIsInNwYW5Ub0JhZ2dhZ2VIZWFkZXIiLCJzZXRNZWFzdXJlbWVudCIsInRpbWVkRXZlbnRzVG9NZWFzdXJlbWVudHMiLCJzYW1wbGVTcGFuIiwibG9nU3BhbkVuZCIsImxvZ1NwYW5TdGFydCIsIlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQiLCJTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSVRFTV9TSVpFIiwiU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWSIsIlNFTUFOVElDX0FUVFJJQlVURV9FWENMVVNJVkVfVElNRSIsIlNFTUFOVElDX0FUVFJJQlVURV9IVFRQX1JFUVVFU1RfTUVUSE9EIiwiU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0lETEVfU1BBTl9GSU5JU0hfUkVBU09OIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9VTklUIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9WQUxVRSIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRSIsIlNFTUFOVElDX0FUVFJJQlVURV9VUkxfRlVMTCIsImNyZWF0ZUV2ZW50RW52ZWxvcGUiLCJjcmVhdGVTZXNzaW9uRW52ZWxvcGUiLCJjcmVhdGVTcGFuRW52ZWxvcGUiLCJhZGRFdmVudFByb2Nlc3NvciIsImNhcHR1cmVDaGVja0luIiwiY2FwdHVyZUV2ZW50IiwiY2FwdHVyZUV4Y2VwdGlvbiIsImNhcHR1cmVNZXNzYWdlIiwiY2FwdHVyZVNlc3Npb24iLCJjbG9zZSIsImVuZFNlc3Npb24iLCJmbHVzaCIsImlzRW5hYmxlZCIsImlzSW5pdGlhbGl6ZWQiLCJsYXN0RXZlbnRJZCIsInNldENvbnRleHQiLCJzZXRFeHRyYSIsInNldEV4dHJhcyIsInNldFRhZyIsInNldFRhZ3MiLCJzZXRVc2VyIiwic3RhcnRTZXNzaW9uIiwid2l0aE1vbml0b3IiLCJnZXRDbGllbnQiLCJnZXRDdXJyZW50U2NvcGUiLCJnZXRHbG9iYWxTY29wZSIsImdldElzb2xhdGlvblNjb3BlIiwiZ2V0VHJhY2VDb250ZXh0RnJvbVNjb3BlIiwid2l0aElzb2xhdGlvblNjb3BlIiwid2l0aFNjb3BlIiwiZ2V0RGVmYXVsdEN1cnJlbnRTY29wZSIsImdldERlZmF1bHRJc29sYXRpb25TY29wZSIsInNldEFzeW5jQ29udGV4dFN0cmF0ZWd5IiwiZ2V0TWFpbkNhcnJpZXIiLCJjbG9zZVNlc3Npb24iLCJtYWtlU2Vzc2lvbiIsInVwZGF0ZVNlc3Npb24iLCJTZXNzaW9uRmx1c2hlciIsIlNjb3BlIiwibm90aWZ5RXZlbnRQcm9jZXNzb3JzIiwiZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCIsImdldFJlcG9ydERpYWxvZ0VuZHBvaW50IiwiQmFzZUNsaWVudCIsIlNlcnZlclJ1bnRpbWVDbGllbnQiLCJpbml0QW5kQmluZCIsInNldEN1cnJlbnRDbGllbnQiLCJjcmVhdGVUcmFuc3BvcnQiLCJtYWtlT2ZmbGluZVRyYW5zcG9ydCIsIm1ha2VNdWx0aXBsZXhlZFRyYW5zcG9ydCIsImFkZEludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iLCJnZXRJbnRlZ3JhdGlvbnNUb1NldHVwIiwibWVyZ2VTY29wZURhdGEiLCJjcmVhdGVDaGVja0luRW52ZWxvcGUiLCJhZGRDaGlsZFNwYW5Ub1NwYW4iLCJnZXRBY3RpdmVTcGFuIiwiZ2V0Um9vdFNwYW4iLCJnZXRTcGFuRGVzY2VuZGFudHMiLCJnZXRTdGF0dXNNZXNzYWdlIiwic3BhbklzU2FtcGxlZCIsInNwYW5UaW1lSW5wdXRUb1NlY29uZHMiLCJzcGFuVG9KU09OIiwic3BhblRvVHJhY2VDb250ZXh0Iiwic3BhblRvVHJhY2VIZWFkZXIiLCJ1cGRhdGVTcGFuTmFtZSIsImFwcGx5U2RrTWV0YWRhdGEiLCJnZXRUcmFjZURhdGEiLCJnZXRUcmFjZU1ldGFUYWdzIiwiREVGQVVMVF9FTlZJUk9OTUVOVCIsImFkZEJyZWFkY3J1bWIiLCJmdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24iLCJpbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uIiwibGlua2VkRXJyb3JzSW50ZWdyYXRpb24iLCJtb2R1bGVNZXRhZGF0YUludGVncmF0aW9uIiwicmVxdWVzdERhdGFJbnRlZ3JhdGlvbiIsImNhcHR1cmVDb25zb2xlSW50ZWdyYXRpb24iLCJkZWJ1Z0ludGVncmF0aW9uIiwiZGVkdXBlSW50ZWdyYXRpb24iLCJleHRyYUVycm9yRGF0YUludGVncmF0aW9uIiwicmV3cml0ZUZyYW1lc0ludGVncmF0aW9uIiwic2Vzc2lvblRpbWluZ0ludGVncmF0aW9uIiwiem9kRXJyb3JzSW50ZWdyYXRpb24iLCJ0aGlyZFBhcnR5RXJyb3JGaWx0ZXJJbnRlZ3JhdGlvbiIsIm1ldHJpY3MiLCJwcm9maWxlciIsIm1ldHJpY3NEZWZhdWx0IiwiQnJvd3Nlck1ldHJpY3NBZ2dyZWdhdG9yIiwiZ2V0TWV0cmljU3VtbWFyeUpzb25Gb3JTcGFuIiwiYWRkVHJhY2luZ0hlYWRlcnNUb0ZldGNoUmVxdWVzdCIsImluc3RydW1lbnRGZXRjaFJlcXVlc3QiLCJ0cnBjTWlkZGxld2FyZSIsImNhcHR1cmVGZWVkYmFjayIsImdldEN1cnJlbnRIdWIiLCJhcHBseUFnZ3JlZ2F0ZUVycm9yc1RvRXZlbnQiLCJmbGF0dGVuIiwiZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlIiwiZ2V0Q29tcG9uZW50TmFtZSIsImdldERvbUVsZW1lbnQiLCJnZXRMb2NhdGlvbkhyZWYiLCJodG1sVHJlZUFzU3RyaW5nIiwiZHNuRnJvbVN0cmluZyIsImRzblRvU3RyaW5nIiwibWFrZURzbiIsIlNlbnRyeUVycm9yIiwiR0xPQkFMX09CSiIsImdldEdsb2JhbFNpbmdsZXRvbiIsImFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiYWRkRmV0Y2hFbmRJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiYWRkRmV0Y2hJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImFkZEhhbmRsZXIiLCJtYXliZUluc3RydW1lbnQiLCJyZXNldEluc3RydW1lbnRhdGlvbkhhbmRsZXJzIiwidHJpZ2dlckhhbmRsZXJzIiwiaXNET01FcnJvciIsImlzRE9NRXhjZXB0aW9uIiwiaXNFbGVtZW50IiwiaXNFcnJvciIsImlzRXJyb3JFdmVudCIsImlzRXZlbnQiLCJpc0luc3RhbmNlT2YiLCJpc1BhcmFtZXRlcml6ZWRTdHJpbmciLCJpc1BsYWluT2JqZWN0IiwiaXNQcmltaXRpdmUiLCJpc1JlZ0V4cCIsImlzU3RyaW5nIiwiaXNTeW50aGV0aWNFdmVudCIsImlzVGhlbmFibGUiLCJpc1Z1ZVZpZXdNb2RlbCIsIkNPTlNPTEVfTEVWRUxTIiwiY29uc29sZVNhbmRib3giLCJvcmlnaW5hbENvbnNvbGVNZXRob2RzIiwibWVtb0J1aWxkZXIiLCJhZGRDb250ZXh0VG9GcmFtZSIsImFkZEV4Y2VwdGlvbk1lY2hhbmlzbSIsImFkZEV4Y2VwdGlvblR5cGVWYWx1ZSIsImFycmF5aWZ5IiwiY2hlY2tPclNldEFscmVhZHlDYXVnaHQiLCJnZXRFdmVudERlc2NyaXB0aW9uIiwicGFyc2VTZW12ZXIiLCJ1dWlkNCIsImR5bmFtaWNSZXF1aXJlIiwiaXNOb2RlRW52IiwibG9hZE1vZHVsZSIsIm5vcm1hbGl6ZVRvU2l6ZSIsIm5vcm1hbGl6ZVVybFRvQmFzZSIsImFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSIsImNvbnZlcnRUb1BsYWluT2JqZWN0IiwiZHJvcFVuZGVmaW5lZEtleXMiLCJleHRyYWN0RXhjZXB0aW9uS2V5c0Zvck1lc3NhZ2UiLCJmaWxsIiwiZ2V0T3JpZ2luYWxGdW5jdGlvbiIsIm1hcmtGdW5jdGlvbldyYXBwZWQiLCJvYmplY3RpZnkiLCJ1cmxFbmNvZGUiLCJiYXNlbmFtZSIsImRpcm5hbWUiLCJpc0Fic29sdXRlIiwiam9pbiIsIm5vcm1hbGl6ZVBhdGgiLCJyZWxhdGl2ZSIsInJlc29sdmUiLCJtYWtlUHJvbWlzZUJ1ZmZlciIsIkRFRkFVTFRfVVNFUl9JTkNMVURFUyIsImFkZE5vcm1hbGl6ZWRSZXF1ZXN0RGF0YVRvRXZlbnQiLCJhZGRSZXF1ZXN0RGF0YVRvRXZlbnQiLCJleHRyYWN0UGF0aEZvclRyYW5zYWN0aW9uIiwiZXh0cmFjdFF1ZXJ5UGFyYW1zRnJvbVVybCIsImV4dHJhY3RSZXF1ZXN0RGF0YSIsImhlYWRlcnNUb0RpY3QiLCJodHRwUmVxdWVzdFRvUmVxdWVzdERhdGEiLCJ3aW50ZXJDR0hlYWRlcnNUb0RpY3QiLCJ3aW50ZXJDR1JlcXVlc3RUb1JlcXVlc3REYXRhIiwic2V2ZXJpdHlMZXZlbEZyb21TdHJpbmciLCJ2YWxpZFNldmVyaXR5TGV2ZWxzIiwiVU5LTk9XTl9GVU5DVElPTiIsImNyZWF0ZVN0YWNrUGFyc2VyIiwiZ2V0RnJhbWVzRnJvbUV2ZW50IiwiZ2V0RnVuY3Rpb25OYW1lIiwic3RhY2tQYXJzZXJGcm9tU3RhY2tQYXJzZXJPcHRpb25zIiwic3RyaXBTZW50cnlGcmFtZXNBbmRSZXZlcnNlIiwiZmlsZW5hbWVJc0luQXBwIiwibm9kZVN0YWNrTGluZVBhcnNlciIsImlzTWF0Y2hpbmdQYXR0ZXJuIiwic2FmZUpvaW4iLCJzbmlwTGluZSIsInN0cmluZ01hdGNoZXNTb21lUGF0dGVybiIsInRydW5jYXRlIiwiaXNOYXRpdmVGdW5jdGlvbiIsInN1cHBvcnRzRE9NRXJyb3IiLCJzdXBwb3J0c0RPTUV4Y2VwdGlvbiIsInN1cHBvcnRzRXJyb3JFdmVudCIsInN1cHBvcnRzRmV0Y2giLCJzdXBwb3J0c05hdGl2ZUZldGNoIiwic3VwcG9ydHNSZWZlcnJlclBvbGljeSIsInN1cHBvcnRzUmVwb3J0aW5nT2JzZXJ2ZXIiLCJTeW5jUHJvbWlzZSIsInJlamVjdGVkU3luY1Byb21pc2UiLCJyZXNvbHZlZFN5bmNQcm9taXNlIiwiZW51bWVyYWJsZSIsImdldCIsIl9icm93c2VyUGVyZm9ybWFuY2VUaW1lT3JpZ2luTW9kZSIsImJyb3dzZXJQZXJmb3JtYW5jZVRpbWVPcmlnaW4iLCJkYXRlVGltZXN0YW1wSW5TZWNvbmRzIiwidGltZXN0YW1wSW5TZWNvbmRzIiwiVFJBQ0VQQVJFTlRfUkVHRVhQIiwiZXh0cmFjdFRyYWNlcGFyZW50RGF0YSIsImdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIiLCJwcm9wYWdhdGlvbkNvbnRleHRGcm9tSGVhZGVycyIsImdldFNES1NvdXJjZSIsImlzQnJvd3NlckJ1bmRsZSIsImFkZEl0ZW1Ub0VudmVsb3BlIiwiY3JlYXRlQXR0YWNobWVudEVudmVsb3BlSXRlbSIsImNyZWF0ZUVudmVsb3BlIiwiY3JlYXRlRXZlbnRFbnZlbG9wZUhlYWRlcnMiLCJjcmVhdGVTcGFuRW52ZWxvcGVJdGVtIiwiZW52ZWxvcGVDb250YWluc0l0ZW1UeXBlIiwiZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5IiwiZm9yRWFjaEVudmVsb3BlSXRlbSIsImdldFNka01ldGFkYXRhRm9yRW52ZWxvcGVIZWFkZXIiLCJwYXJzZUVudmVsb3BlIiwic2VyaWFsaXplRW52ZWxvcGUiLCJjcmVhdGVDbGllbnRSZXBvcnRFbnZlbG9wZSIsIkRFRkFVTFRfUkVUUllfQUZURVIiLCJkaXNhYmxlZFVudGlsIiwiaXNSYXRlTGltaXRlZCIsInBhcnNlUmV0cnlBZnRlckhlYWRlciIsInVwZGF0ZVJhdGVMaW1pdHMiLCJCQUdHQUdFX0hFQURFUl9OQU1FIiwiTUFYX0JBR0dBR0VfU1RSSU5HX0xFTkdUSCIsIlNFTlRSWV9CQUdHQUdFX0tFWV9QUkVGSVgiLCJTRU5UUllfQkFHR0FHRV9LRVlfUFJFRklYX1JFR0VYIiwiYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dCIsImR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIiLCJwYXJzZUJhZ2dhZ2VIZWFkZXIiLCJnZXROdW1iZXJPZlVybFNlZ21lbnRzIiwiZ2V0U2FuaXRpemVkVXJsU3RyaW5nIiwicGFyc2VVcmwiLCJzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQiLCJtYWtlRmlmb0NhY2hlIiwiZXZlbnRGcm9tTWVzc2FnZSIsImV2ZW50RnJvbVVua25vd25JbnB1dCIsImV4Y2VwdGlvbkZyb21FcnJvciIsInBhcnNlU3RhY2tGcmFtZXMiLCJjYWxsRnJhbWVUb1N0YWNrRnJhbWUiLCJ3YXRjaGRvZ1RpbWVyIiwiTFJVTWFwIiwiZ2VuZXJhdGVQcm9wYWdhdGlvbkNvbnRleHQiLCJnZW5lcmF0ZVNwYW5JZCIsImdlbmVyYXRlVHJhY2VJZCIsIlNES19WRVJTSU9OIiwiZ2V0RGVidWdJbWFnZXNGb3JSZXNvdXJjZXMiLCJnZXRGaWxlbmFtZVRvRGVidWdJZE1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integration.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integration.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst installedIntegrations = [];\n\n/** Map of integrations assigned to a client */\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preserve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations) {\n  const integrationsByName = {};\n  integrations.forEach(currentInstance => {\n    const {\n      name\n    } = currentInstance;\n    const existingInstance = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n    integrationsByName[name] = currentInstance;\n  });\n  return Object.values(integrationsByName);\n}\n\n/** Gets integrations to install */\nfunction getIntegrationsToSetup(options) {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach(integration => {\n    integration.isDefaultInstance = true;\n  });\n  let integrations;\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    const resolvedUserIntegrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [resolvedUserIntegrations];\n  } else {\n    integrations = defaultIntegrations;\n  }\n  const finalIntegrations = filterDuplicates(integrations);\n\n  // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or\n  // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event\n  // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore\n  // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.\n  const debugIndex = finalIntegrations.findIndex(integration => integration.name === 'Debug');\n  if (debugIndex > -1) {\n    const [debugInstance] = finalIntegrations.splice(debugIndex, 1);\n    finalIntegrations.push(debugInstance);\n  }\n  return finalIntegrations;\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nfunction setupIntegrations(client, integrations) {\n  const integrationIndex = {};\n  integrations.forEach(integration => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n  return integrationIndex;\n}\n\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */\nfunction afterSetupIntegrations(client, integrations) {\n  for (const integration of integrations) {\n    // guard against empty provided integrations\n    if (integration && integration.afterAllSetup) {\n      integration.afterAllSetup(client);\n    }\n  }\n}\n\n/** Setup a single integration.  */\nfunction setupIntegration(client, integration, integrationIndex) {\n  if (integrationIndex[integration.name]) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === 'function') {\n    integration.setupOnce();\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n  if (typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration);\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n  if (typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration);\n    const processor = Object.assign((event, hint) => callback(event, hint, client), {\n      id: integration.name\n    });\n    client.addEventProcessor(processor);\n  }\n  debugBuild.DEBUG_BUILD && logger.logger.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current scope's client. */\nfunction addIntegration(integration) {\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n  client.addIntegration(integration);\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nfunction defineIntegration(fn) {\n  return fn;\n}\nexports.addIntegration = addIntegration;\nexports.afterSetupIntegrations = afterSetupIntegrations;\nexports.defineIntegration = defineIntegration;\nexports.getIntegrationsToSetup = getIntegrationsToSetup;\nexports.installedIntegrations = installedIntegrations;\nexports.setupIntegration = setupIntegration;\nexports.setupIntegrations = setupIntegrations;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst console = __webpack_require__(/*! ../utils-hoist/instrument/console.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst misc = __webpack_require__(/*! ../utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst severity = __webpack_require__(/*! ../utils-hoist/severity.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/severity.js\");\nconst string = __webpack_require__(/*! ../utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst worldwide = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst INTEGRATION_NAME = 'CaptureConsole';\nconst _captureConsoleIntegration = (options = {}) => {\n  const levels = options.levels || logger.CONSOLE_LEVELS;\n  // TODO(v9): Flip default value to `true`\n  const handled = !!options.handled;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!('console' in worldwide.GLOBAL_OBJ)) {\n        return;\n      }\n      console.addConsoleInstrumentationHandler(({\n        args,\n        level\n      }) => {\n        if (currentScopes.getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n        consoleHandler(args, level, handled);\n      });\n    }\n  };\n};\n\n/**\n * Send Console API calls as Sentry Events.\n */\nconst captureConsoleIntegration = integration.defineIntegration(_captureConsoleIntegration);\nfunction consoleHandler(args, level, handled) {\n  const captureContext = {\n    level: severity.severityLevelFromString(level),\n    extra: {\n      arguments: args\n    }\n  };\n  currentScopes.withScope(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n      misc.addExceptionMechanism(event, {\n        handled,\n        type: 'console'\n      });\n      return event;\n    });\n    if (level === 'assert') {\n      if (!args[0]) {\n        const message = `Assertion failed: ${string.safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n        scope.setExtra('arguments', args.slice(1));\n        exports$1.captureMessage(message, captureContext);\n      }\n      return;\n    }\n    const error = args.find(arg => arg instanceof Error);\n    if (error) {\n      exports$1.captureException(error, captureContext);\n      return;\n    }\n    const message = string.safeJoin(args, ' ');\n    exports$1.captureMessage(message, captureContext);\n  });\n}\nexports.captureConsoleIntegration = captureConsoleIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NhcHR1cmVjb25zb2xlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLGdHQUFxQixDQUFDO0FBQ3BELE1BQU1DLFNBQVMsR0FBR0QsbUJBQU8sQ0FBQyxvRkFBZSxDQUFDO0FBQzFDLE1BQU1FLFdBQVcsR0FBR0YsbUJBQU8sQ0FBQyw0RkFBbUIsQ0FBQztBQUNoRCxNQUFNRyxPQUFPLEdBQUdILG1CQUFPLENBQUMsa0lBQXNDLENBQUM7QUFDL0QsTUFBTUksTUFBTSxHQUFHSixtQkFBTyxDQUFDLDBHQUEwQixDQUFDO0FBQ2xELE1BQU1LLElBQUksR0FBR0wsbUJBQU8sQ0FBQyxzR0FBd0IsQ0FBQztBQUM5QyxNQUFNTSxRQUFRLEdBQUdOLG1CQUFPLENBQUMsOEdBQTRCLENBQUM7QUFDdEQsTUFBTU8sTUFBTSxHQUFHUCxtQkFBTyxDQUFDLDBHQUEwQixDQUFDO0FBQ2xELE1BQU1RLFNBQVMsR0FBR1IsbUJBQU8sQ0FBQyxnSEFBNkIsQ0FBQztBQUV4RCxNQUFNUyxnQkFBZ0IsR0FBRyxnQkFBZ0I7QUFFekMsTUFBTUMsMEJBQTBCLEdBQUlBLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSztFQUNwRCxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQ0MsTUFBTSxJQUFJUixNQUFNLENBQUNTLGNBQWM7RUFDdEQ7RUFDQSxNQUFNQyxPQUFPLEdBQUcsQ0FBQyxDQUFDSCxPQUFPLENBQUNHLE9BQU87RUFFakMsT0FBTztJQUNMQyxJQUFJLEVBQUVOLGdCQUFnQjtJQUN0Qk8sS0FBS0EsQ0FBQ0MsTUFBTSxFQUFFO01BQ1osSUFBSSxFQUFFLFNBQVMsSUFBSVQsU0FBUyxDQUFDVSxVQUFVLENBQUMsRUFBRTtRQUN4QztNQUNGO01BRUFmLE9BQU8sQ0FBQ2dCLGdDQUFnQyxDQUFDLENBQUM7UUFBRUMsSUFBSTtRQUFFQztNQUFNLENBQUMsS0FBSztRQUM1RCxJQUFJdEIsYUFBYSxDQUFDdUIsU0FBUyxDQUFDLENBQUMsS0FBS0wsTUFBTSxJQUFJLENBQUNMLE1BQU0sQ0FBQ1csUUFBUSxDQUFDRixLQUFLLENBQUMsRUFBRTtVQUNuRTtRQUNGO1FBRUFHLGNBQWMsQ0FBQ0osSUFBSSxFQUFFQyxLQUFLLEVBQUVQLE9BQU8sQ0FBQztNQUN0QyxDQUFDLENBQUM7SUFDSjtFQUNGLENBQUM7QUFDSCxDQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLE1BQU1XLHlCQUF5QixHQUFHdkIsV0FBVyxDQUFDd0IsaUJBQWlCLENBQUNoQiwwQkFBMEIsQ0FBQztBQUUzRixTQUFTYyxjQUFjQSxDQUFDSixJQUFJLEVBQUVDLEtBQUssRUFBRVAsT0FBTyxFQUFFO0VBQzVDLE1BQU1hLGNBQWMsR0FBRztJQUNyQk4sS0FBSyxFQUFFZixRQUFRLENBQUNzQix1QkFBdUIsQ0FBQ1AsS0FBSyxDQUFDO0lBQzlDUSxLQUFLLEVBQUU7TUFDTEMsU0FBUyxFQUFFVjtJQUNiO0VBQ0YsQ0FBQztFQUVEckIsYUFBYSxDQUFDZ0MsU0FBUyxDQUFDQyxLQUFLLElBQUk7SUFDL0JBLEtBQUssQ0FBQ0MsaUJBQWlCLENBQUNDLEtBQUssSUFBSTtNQUMvQkEsS0FBSyxDQUFDOUIsTUFBTSxHQUFHLFNBQVM7TUFFeEJDLElBQUksQ0FBQzhCLHFCQUFxQixDQUFDRCxLQUFLLEVBQUU7UUFDaENwQixPQUFPO1FBQ1BzQixJQUFJLEVBQUU7TUFDUixDQUFDLENBQUM7TUFFRixPQUFPRixLQUFLO0lBQ2QsQ0FBQyxDQUFDO0lBRUYsSUFBSWIsS0FBSyxLQUFLLFFBQVEsRUFBRTtNQUN0QixJQUFJLENBQUNELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNaLE1BQU1pQixPQUFPLEdBQUkscUJBQW9COUIsTUFBTSxDQUFDK0IsUUFBUSxDQUFDbEIsSUFBSSxDQUFDbUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLGdCQUFpQixFQUFDO1FBQzlGUCxLQUFLLENBQUNRLFFBQVEsQ0FBQyxXQUFXLEVBQUVwQixJQUFJLENBQUNtQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUN0QyxTQUFTLENBQUN3QyxjQUFjLENBQUNKLE9BQU8sRUFBRVYsY0FBYyxDQUFDO01BQ25EO01BQ0E7SUFDRjtJQUVBLE1BQU1lLEtBQUssR0FBR3RCLElBQUksQ0FBQ3VCLElBQUksQ0FBQ0MsR0FBRyxJQUFJQSxHQUFHLFlBQVlDLEtBQUssQ0FBQztJQUNwRCxJQUFJSCxLQUFLLEVBQUU7TUFDVHpDLFNBQVMsQ0FBQzZDLGdCQUFnQixDQUFDSixLQUFLLEVBQUVmLGNBQWMsQ0FBQztNQUNqRDtJQUNGO0lBRUEsTUFBTVUsT0FBTyxHQUFHOUIsTUFBTSxDQUFDK0IsUUFBUSxDQUFDbEIsSUFBSSxFQUFFLEdBQUcsQ0FBQztJQUMxQ25CLFNBQVMsQ0FBQ3dDLGNBQWMsQ0FBQ0osT0FBTyxFQUFFVixjQUFjLENBQUM7RUFDbkQsQ0FBQyxDQUFDO0FBQ0o7QUFFQTlCLGlDQUFpQyxHQUFHNEIseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9jYXB0dXJlY29uc29sZS5qcz9mMzZiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGN1cnJlbnRTY29wZXMgPSByZXF1aXJlKCcuLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBleHBvcnRzJDEgPSByZXF1aXJlKCcuLi9leHBvcnRzLmpzJyk7XG5jb25zdCBpbnRlZ3JhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9uLmpzJyk7XG5jb25zdCBjb25zb2xlID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9jb25zb2xlLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnKTtcbmNvbnN0IG1pc2MgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9taXNjLmpzJyk7XG5jb25zdCBzZXZlcml0eSA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L3NldmVyaXR5LmpzJyk7XG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9zdHJpbmcuanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L3dvcmxkd2lkZS5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0NhcHR1cmVDb25zb2xlJztcblxuY29uc3QgX2NhcHR1cmVDb25zb2xlSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBsZXZlbHMgPSBvcHRpb25zLmxldmVscyB8fCBsb2dnZXIuQ09OU09MRV9MRVZFTFM7XG4gIC8vIFRPRE8odjkpOiBGbGlwIGRlZmF1bHQgdmFsdWUgdG8gYHRydWVgXG4gIGNvbnN0IGhhbmRsZWQgPSAhIW9wdGlvbnMuaGFuZGxlZDtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBpZiAoISgnY29uc29sZScgaW4gd29ybGR3aWRlLkdMT0JBTF9PQkopKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5hZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlcigoeyBhcmdzLCBsZXZlbCB9KSA9PiB7XG4gICAgICAgIGlmIChjdXJyZW50U2NvcGVzLmdldENsaWVudCgpICE9PSBjbGllbnQgfHwgIWxldmVscy5pbmNsdWRlcyhsZXZlbCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlSGFuZGxlcihhcmdzLCBsZXZlbCwgaGFuZGxlZCk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIFNlbmQgQ29uc29sZSBBUEkgY2FsbHMgYXMgU2VudHJ5IEV2ZW50cy5cbiAqL1xuY29uc3QgY2FwdHVyZUNvbnNvbGVJbnRlZ3JhdGlvbiA9IGludGVncmF0aW9uLmRlZmluZUludGVncmF0aW9uKF9jYXB0dXJlQ29uc29sZUludGVncmF0aW9uKTtcblxuZnVuY3Rpb24gY29uc29sZUhhbmRsZXIoYXJncywgbGV2ZWwsIGhhbmRsZWQpIHtcbiAgY29uc3QgY2FwdHVyZUNvbnRleHQgPSB7XG4gICAgbGV2ZWw6IHNldmVyaXR5LnNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nKGxldmVsKSxcbiAgICBleHRyYToge1xuICAgICAgYXJndW1lbnRzOiBhcmdzLFxuICAgIH0sXG4gIH07XG5cbiAgY3VycmVudFNjb3Blcy53aXRoU2NvcGUoc2NvcGUgPT4ge1xuICAgIHNjb3BlLmFkZEV2ZW50UHJvY2Vzc29yKGV2ZW50ID0+IHtcbiAgICAgIGV2ZW50LmxvZ2dlciA9ICdjb25zb2xlJztcblxuICAgICAgbWlzYy5hZGRFeGNlcHRpb25NZWNoYW5pc20oZXZlbnQsIHtcbiAgICAgICAgaGFuZGxlZCxcbiAgICAgICAgdHlwZTogJ2NvbnNvbGUnLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9KTtcblxuICAgIGlmIChsZXZlbCA9PT0gJ2Fzc2VydCcpIHtcbiAgICAgIGlmICghYXJnc1swXSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYEFzc2VydGlvbiBmYWlsZWQ6ICR7c3RyaW5nLnNhZmVKb2luKGFyZ3Muc2xpY2UoMSksICcgJykgfHwgJ2NvbnNvbGUuYXNzZXJ0J31gO1xuICAgICAgICBzY29wZS5zZXRFeHRyYSgnYXJndW1lbnRzJywgYXJncy5zbGljZSgxKSk7XG4gICAgICAgIGV4cG9ydHMkMS5jYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBjYXB0dXJlQ29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3IgPSBhcmdzLmZpbmQoYXJnID0+IGFyZyBpbnN0YW5jZW9mIEVycm9yKTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGV4cG9ydHMkMS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCBjYXB0dXJlQ29udGV4dCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IHN0cmluZy5zYWZlSm9pbihhcmdzLCAnICcpO1xuICAgIGV4cG9ydHMkMS5jYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBjYXB0dXJlQ29udGV4dCk7XG4gIH0pO1xufVxuXG5leHBvcnRzLmNhcHR1cmVDb25zb2xlSW50ZWdyYXRpb24gPSBjYXB0dXJlQ29uc29sZUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FwdHVyZWNvbnNvbGUuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjdXJyZW50U2NvcGVzIiwicmVxdWlyZSIsImV4cG9ydHMkMSIsImludGVncmF0aW9uIiwiY29uc29sZSIsImxvZ2dlciIsIm1pc2MiLCJzZXZlcml0eSIsInN0cmluZyIsIndvcmxkd2lkZSIsIklOVEVHUkFUSU9OX05BTUUiLCJfY2FwdHVyZUNvbnNvbGVJbnRlZ3JhdGlvbiIsIm9wdGlvbnMiLCJsZXZlbHMiLCJDT05TT0xFX0xFVkVMUyIsImhhbmRsZWQiLCJuYW1lIiwic2V0dXAiLCJjbGllbnQiLCJHTE9CQUxfT0JKIiwiYWRkQ29uc29sZUluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJhcmdzIiwibGV2ZWwiLCJnZXRDbGllbnQiLCJpbmNsdWRlcyIsImNvbnNvbGVIYW5kbGVyIiwiY2FwdHVyZUNvbnNvbGVJbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIiwiY2FwdHVyZUNvbnRleHQiLCJzZXZlcml0eUxldmVsRnJvbVN0cmluZyIsImV4dHJhIiwiYXJndW1lbnRzIiwid2l0aFNjb3BlIiwic2NvcGUiLCJhZGRFdmVudFByb2Nlc3NvciIsImV2ZW50IiwiYWRkRXhjZXB0aW9uTWVjaGFuaXNtIiwidHlwZSIsIm1lc3NhZ2UiLCJzYWZlSm9pbiIsInNsaWNlIiwic2V0RXh0cmEiLCJjYXB0dXJlTWVzc2FnZSIsImVycm9yIiwiZmluZCIsImFyZyIsIkVycm9yIiwiY2FwdHVyZUV4Y2VwdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/captureconsole.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/debug.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/debug.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst INTEGRATION_NAME = 'Debug';\nconst _debugIntegration = (options = {}) => {\n  const _options = {\n    debugger: false,\n    stringify: false,\n    ...options\n  };\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      client.on('beforeSendEvent', (event, hint) => {\n        if (_options.debugger) {\n          // eslint-disable-next-line no-debugger\n          debugger;\n        }\n\n        /* eslint-disable no-console */\n        logger.consoleSandbox(() => {\n          if (_options.stringify) {\n            console.log(JSON.stringify(event, null, 2));\n            if (hint && Object.keys(hint).length) {\n              console.log(JSON.stringify(hint, null, 2));\n            }\n          } else {\n            console.log(event);\n            if (hint && Object.keys(hint).length) {\n              console.log(hint);\n            }\n          }\n        });\n        /* eslint-enable no-console */\n      });\n    }\n  };\n};\n\n/**\n * Integration to debug sent Sentry events.\n * This integration should not be used in production.\n *\n * @deprecated This integration is deprecated and will be removed in the next major version of the SDK.\n * To log outgoing events, use [Hook Options](https://docs.sentry.io/platforms/javascript/configuration/options/#hooks) (`beforeSend`, `beforeSendTransaction`, ...).\n */\nconst debugIntegration = integration.defineIntegration(_debugIntegration);\nexports.debugIntegration = debugIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2RlYnVnLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsV0FBVyxHQUFHQyxtQkFBTyxDQUFDLDRGQUFtQixDQUFDO0FBQ2hELE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUVsRCxNQUFNRSxnQkFBZ0IsR0FBRyxPQUFPO0FBRWhDLE1BQU1DLGlCQUFpQixHQUFJQSxDQUFDQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEtBQUs7RUFDM0MsTUFBTUMsUUFBUSxHQUFHO0lBQ2ZDLFFBQVEsRUFBRSxLQUFLO0lBQ2ZDLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLEdBQUdIO0VBQ0wsQ0FBQztFQUVELE9BQU87SUFDTEksSUFBSSxFQUFFTixnQkFBZ0I7SUFDdEJPLEtBQUtBLENBQUNDLE1BQU0sRUFBRTtNQUNaQSxNQUFNLENBQUNDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDQyxLQUFLLEVBQUVDLElBQUksS0FBSztRQUM1QyxJQUFJUixRQUFRLENBQUNDLFFBQVEsRUFBRTtVQUNyQjtVQUNBO1FBQ0Y7O1FBRUE7UUFDQUwsTUFBTSxDQUFDYSxjQUFjLENBQUMsTUFBTTtVQUMxQixJQUFJVCxRQUFRLENBQUNFLFNBQVMsRUFBRTtZQUN0QlEsT0FBTyxDQUFDQyxHQUFHLENBQUNDLElBQUksQ0FBQ1YsU0FBUyxDQUFDSyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzNDLElBQUlDLElBQUksSUFBSWxCLE1BQU0sQ0FBQ3VCLElBQUksQ0FBQ0wsSUFBSSxDQUFDLENBQUNNLE1BQU0sRUFBRTtjQUNwQ0osT0FBTyxDQUFDQyxHQUFHLENBQUNDLElBQUksQ0FBQ1YsU0FBUyxDQUFDTSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzVDO1VBQ0YsQ0FBQyxNQUFNO1lBQ0xFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSixLQUFLLENBQUM7WUFDbEIsSUFBSUMsSUFBSSxJQUFJbEIsTUFBTSxDQUFDdUIsSUFBSSxDQUFDTCxJQUFJLENBQUMsQ0FBQ00sTUFBTSxFQUFFO2NBQ3BDSixPQUFPLENBQUNDLEdBQUcsQ0FBQ0gsSUFBSSxDQUFDO1lBQ25CO1VBQ0Y7UUFDRixDQUFDLENBQUM7UUFDRjtNQUNGLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNTyxnQkFBZ0IsR0FBR3JCLFdBQVcsQ0FBQ3NCLGlCQUFpQixDQUFDbEIsaUJBQWlCLENBQUM7QUFFekVOLHdCQUF3QixHQUFHdUIsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9kZWJ1Zy5qcz8wNmQzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24uanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0RlYnVnJztcblxuY29uc3QgX2RlYnVnSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBfb3B0aW9ucyA9IHtcbiAgICBkZWJ1Z2dlcjogZmFsc2UsXG4gICAgc3RyaW5naWZ5OiBmYWxzZSxcbiAgICAuLi5vcHRpb25zLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGNsaWVudC5vbignYmVmb3JlU2VuZEV2ZW50JywgKGV2ZW50LCBoaW50KSA9PiB7XG4gICAgICAgIGlmIChfb3B0aW9ucy5kZWJ1Z2dlcikge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgICAgICBsb2dnZXIuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgICAgIGlmIChfb3B0aW9ucy5zdHJpbmdpZnkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGV2ZW50LCBudWxsLCAyKSk7XG4gICAgICAgICAgICBpZiAoaGludCAmJiBPYmplY3Qua2V5cyhoaW50KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoaGludCwgbnVsbCwgMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhldmVudCk7XG4gICAgICAgICAgICBpZiAoaGludCAmJiBPYmplY3Qua2V5cyhoaW50KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coaGludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIEludGVncmF0aW9uIHRvIGRlYnVnIHNlbnQgU2VudHJ5IGV2ZW50cy5cbiAqIFRoaXMgaW50ZWdyYXRpb24gc2hvdWxkIG5vdCBiZSB1c2VkIGluIHByb2R1Y3Rpb24uXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBpbnRlZ3JhdGlvbiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiB0aGUgU0RLLlxuICogVG8gbG9nIG91dGdvaW5nIGV2ZW50cywgdXNlIFtIb29rIE9wdGlvbnNdKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvY29uZmlndXJhdGlvbi9vcHRpb25zLyNob29rcykgKGBiZWZvcmVTZW5kYCwgYGJlZm9yZVNlbmRUcmFuc2FjdGlvbmAsIC4uLikuXG4gKi9cbmNvbnN0IGRlYnVnSW50ZWdyYXRpb24gPSBpbnRlZ3JhdGlvbi5kZWZpbmVJbnRlZ3JhdGlvbihfZGVidWdJbnRlZ3JhdGlvbik7XG5cbmV4cG9ydHMuZGVidWdJbnRlZ3JhdGlvbiA9IGRlYnVnSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImludGVncmF0aW9uIiwicmVxdWlyZSIsImxvZ2dlciIsIklOVEVHUkFUSU9OX05BTUUiLCJfZGVidWdJbnRlZ3JhdGlvbiIsIm9wdGlvbnMiLCJfb3B0aW9ucyIsImRlYnVnZ2VyIiwic3RyaW5naWZ5IiwibmFtZSIsInNldHVwIiwiY2xpZW50Iiwib24iLCJldmVudCIsImhpbnQiLCJjb25zb2xlU2FuZGJveCIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwia2V5cyIsImxlbmd0aCIsImRlYnVnSW50ZWdyYXRpb24iLCJkZWZpbmVJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/debug.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/dedupe.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/dedupe.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst stacktrace = __webpack_require__(/*! ../utils-hoist/stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\nconst INTEGRATION_NAME = 'Dedupe';\nconst _dedupeIntegration = () => {\n  let previousEvent;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          debugBuild.DEBUG_BUILD && logger.logger.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch (_oO) {} // eslint-disable-line no-empty\n\n      return previousEvent = currentEvent;\n    }\n  };\n};\n\n/**\n * Deduplication filter.\n */\nconst dedupeIntegration = integration.defineIntegration(_dedupeIntegration);\n\n/** only exported for tests. */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  return false;\n}\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n  if (!previousException || !currentException) {\n    return false;\n  }\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  let currentFrames = stacktrace.getFramesFromEvent(currentEvent);\n  let previousFrames = stacktrace.getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n  currentFrames = currentFrames;\n  previousFrames = previousFrames;\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameA = previousFrames[i];\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameB = currentFrames[i];\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint;\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\nexports._shouldDropEvent = _shouldDropEvent;\nexports.dedupeIntegration = dedupeIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/dedupe.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst is = __webpack_require__(/*! ../utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst normalize = __webpack_require__(/*! ../utils-hoist/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst string = __webpack_require__(/*! ../utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst INTEGRATION_NAME = 'ExtraErrorData';\n\n/**\n * Extract additional data for from original exceptions.\n */\nconst _extraErrorDataIntegration = (options = {}) => {\n  const {\n    depth = 3,\n    captureErrorCause = true\n  } = options;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, hint, client) {\n      const {\n        maxValueLength = 250\n      } = client.getOptions();\n      return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause, maxValueLength);\n    }\n  };\n};\nconst extraErrorDataIntegration = integration.defineIntegration(_extraErrorDataIntegration);\nfunction _enhanceEventWithErrorData(event, hint = {}, depth, captureErrorCause, maxValueLength) {\n  if (!hint.originalException || !is.isError(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = hint.originalException.name || hint.originalException.constructor.name;\n  const errorData = _extractErrorData(hint.originalException, captureErrorCause, maxValueLength);\n  if (errorData) {\n    const contexts = {\n      ...event.contexts\n    };\n    const normalizedErrorData = normalize.normalize(errorData, depth);\n    if (is.isPlainObject(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      object.addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n    return {\n      ...event,\n      contexts\n    };\n  }\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(error, captureErrorCause, maxValueLength) {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber', 'toJSON'];\n    const extraErrorInfo = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = is.isError(value) || typeof value === 'string' ? string.truncate(`${value}`, maxValueLength) : value;\n    }\n\n    // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n    if (captureErrorCause && error.cause !== undefined) {\n      extraErrorInfo.cause = is.isError(error.cause) ? error.cause.toString() : error.cause;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON();\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = is.isError(value) ? value.toString() : value;\n      }\n    }\n    return extraErrorInfo;\n  } catch (oO) {\n    debugBuild.DEBUG_BUILD && logger.logger.error('Unable to extract extra data from the Error object:', oO);\n  }\n  return null;\n}\nexports.extraErrorDataIntegration = extraErrorDataIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nlet originalFunctionToString;\nconst INTEGRATION_NAME = 'FunctionToString';\nconst SETUP_CLIENTS = new WeakMap();\nconst _functionToStringIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        Function.prototype.toString = function (...args) {\n          const originalFunction = object.getOriginalFunction(this);\n          const context = SETUP_CLIENTS.has(currentScopes.getClient()) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch (e) {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    }\n  };\n};\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nconst functionToStringIntegration = integration.defineIntegration(_functionToStringIntegration);\nexports.functionToStringIntegration = functionToStringIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2Z1bmN0aW9udG9zdHJpbmcuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsZ0dBQXFCLENBQUM7QUFDcEQsTUFBTUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLDRGQUFtQixDQUFDO0FBQ2hELE1BQU1FLE1BQU0sR0FBR0YsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUVsRCxJQUFJRyx3QkFBd0I7QUFFNUIsTUFBTUMsZ0JBQWdCLEdBQUcsa0JBQWtCO0FBRTNDLE1BQU1DLGFBQWEsR0FBRyxJQUFJQyxPQUFPLENBQUMsQ0FBQztBQUVuQyxNQUFNQyw0QkFBNEIsR0FBSUEsQ0FBQSxLQUFNO0VBQzFDLE9BQU87SUFDTEMsSUFBSSxFQUFFSixnQkFBZ0I7SUFDdEJLLFNBQVNBLENBQUEsRUFBRztNQUNWO01BQ0FOLHdCQUF3QixHQUFHTyxRQUFRLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUTs7TUFFdEQ7TUFDQTtNQUNBLElBQUk7UUFDRkYsUUFBUSxDQUFDQyxTQUFTLENBQUNDLFFBQVEsR0FBRyxVQUFXLEdBQUdDLElBQUksRUFBRTtVQUNoRCxNQUFNQyxnQkFBZ0IsR0FBR1osTUFBTSxDQUFDYSxtQkFBbUIsQ0FBQyxJQUFJLENBQUM7VUFDekQsTUFBTUMsT0FBTyxHQUNYWCxhQUFhLENBQUNZLEdBQUcsQ0FBQ2xCLGFBQWEsQ0FBQ21CLFNBQVMsQ0FBQyxDQUFFLENBQUMsSUFBSUosZ0JBQWdCLEtBQUtLLFNBQVMsR0FBR0wsZ0JBQWdCLEdBQUcsSUFBSTtVQUMzRyxPQUFPWCx3QkFBd0IsQ0FBQ2lCLEtBQUssQ0FBQ0osT0FBTyxFQUFFSCxJQUFJLENBQUM7UUFDdEQsQ0FBQztNQUNILENBQUMsQ0FBQyxPQUFPUSxDQUFDLEVBQUU7UUFDVjtNQUFBO0lBRUosQ0FBQztJQUNEQyxLQUFLQSxDQUFDQyxNQUFNLEVBQUU7TUFDWmxCLGFBQWEsQ0FBQ21CLEdBQUcsQ0FBQ0QsTUFBTSxFQUFFLElBQUksQ0FBQztJQUNqQztFQUNGLENBQUM7QUFDSCxDQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNRSwyQkFBMkIsR0FBR3hCLFdBQVcsQ0FBQ3lCLGlCQUFpQixDQUFDbkIsNEJBQTRCLENBQUM7QUFFL0ZWLG1DQUFtQyxHQUFHNEIsMkJBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9mdW5jdGlvbnRvc3RyaW5nLmpzPzFjYjgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4uL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24uanMnKTtcbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L29iamVjdC5qcycpO1xuXG5sZXQgb3JpZ2luYWxGdW5jdGlvblRvU3RyaW5nO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ0Z1bmN0aW9uVG9TdHJpbmcnO1xuXG5jb25zdCBTRVRVUF9DTElFTlRTID0gbmV3IFdlYWtNYXAoKTtcblxuY29uc3QgX2Z1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICBvcmlnaW5hbEZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG5cbiAgICAgIC8vIGludHJpbnNpY3MgKGxpa2UgRnVuY3Rpb24ucHJvdG90eXBlKSBtaWdodCBiZSBpbW11dGFibGUgaW4gc29tZSBlbnZpcm9ubWVudHNcbiAgICAgIC8vIGUuZy4gTm9kZSB3aXRoIC0tZnJvemVuLWludHJpbnNpY3MsIFhTIChhbiBlbWJlZGRlZCBKYXZhU2NyaXB0IGVuZ2luZSkgb3IgU0VTIChhIEphdmFTY3JpcHQgcHJvcG9zYWwpXG4gICAgICB0cnkge1xuICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoIC4uLmFyZ3MpIHtcbiAgICAgICAgICBjb25zdCBvcmlnaW5hbEZ1bmN0aW9uID0gb2JqZWN0LmdldE9yaWdpbmFsRnVuY3Rpb24odGhpcyk7XG4gICAgICAgICAgY29uc3QgY29udGV4dCA9XG4gICAgICAgICAgICBTRVRVUF9DTElFTlRTLmhhcyhjdXJyZW50U2NvcGVzLmdldENsaWVudCgpICkgJiYgb3JpZ2luYWxGdW5jdGlvbiAhPT0gdW5kZWZpbmVkID8gb3JpZ2luYWxGdW5jdGlvbiA6IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaWdub3JlIGVycm9ycyBoZXJlLCBqdXN0IGRvbid0IHBhdGNoIHRoaXNcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgU0VUVVBfQ0xJRU5UUy5zZXQoY2xpZW50LCB0cnVlKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG4vKipcbiAqIFBhdGNoIHRvU3RyaW5nIGNhbGxzIHRvIHJldHVybiBwcm9wZXIgbmFtZSBmb3Igd3JhcHBlZCBmdW5jdGlvbnMuXG4gKlxuICogYGBganNcbiAqIFNlbnRyeS5pbml0KHtcbiAqICAgaW50ZWdyYXRpb25zOiBbXG4gKiAgICAgZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uKCksXG4gKiAgIF0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5jb25zdCBmdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24gPSBpbnRlZ3JhdGlvbi5kZWZpbmVJbnRlZ3JhdGlvbihfZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24gPSBmdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbnRvc3RyaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3VycmVudFNjb3BlcyIsInJlcXVpcmUiLCJpbnRlZ3JhdGlvbiIsIm9iamVjdCIsIm9yaWdpbmFsRnVuY3Rpb25Ub1N0cmluZyIsIklOVEVHUkFUSU9OX05BTUUiLCJTRVRVUF9DTElFTlRTIiwiV2Vha01hcCIsIl9mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24iLCJuYW1lIiwic2V0dXBPbmNlIiwiRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImFyZ3MiLCJvcmlnaW5hbEZ1bmN0aW9uIiwiZ2V0T3JpZ2luYWxGdW5jdGlvbiIsImNvbnRleHQiLCJoYXMiLCJnZXRDbGllbnQiLCJ1bmRlZmluZWQiLCJhcHBseSIsImUiLCJzZXR1cCIsImNsaWVudCIsInNldCIsImZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/functiontostring.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst misc = __webpack_require__(/*! ../utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst string = __webpack_require__(/*! ../utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/, /^ResizeObserver loop completed with undelivered notifications.$/,\n// The browser logs this when a ResizeObserver handler takes a bit longer. Usually this is not an actual issue though. It indicates slowness.\n/^Cannot redefine property: googletag$/,\n// This is thrown when google tag manager is used in combination with an ad blocker\n\"undefined is not an object (evaluating 'a.L')\",\n// Random error that happens but not actionable or noticeable to end-users.\n'can\\'t redefine non-configurable property \"solana\"',\n// Probably a browser extension or custom browser (Brave) throwing this error\n\"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\",\n// Error thrown by GTM, seemingly not affecting end-users\n\"Can't find variable: _AutofillCallbackHandler\",\n// Unactionable error in instagram webview https://developers.facebook.com/community/threads/320013549791141/\n/^Non-Error promise rejection captured with value: Object Not Found Matching Id:\\d+, MethodName:simulateEvent, ParamCount:\\d+$/ // unactionable error from CEFSharp, a .NET library that embeds chromium in .NET apps\n];\n\n/** Options for the InboundFilters integration */\n\nconst INTEGRATION_NAME = 'InboundFilters';\nconst _inboundFiltersIntegration = (options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const clientOptions = client.getOptions();\n      const mergedOptions = _mergeOptions(options, clientOptions);\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    }\n  };\n};\nconst inboundFiltersIntegration = integration.defineIntegration(_inboundFiltersIntegration);\nfunction _mergeOptions(internalOptions = {}, clientOptions = {}) {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [...(internalOptions.ignoreErrors || []), ...(clientOptions.ignoreErrors || []), ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS)],\n    ignoreTransactions: [...(internalOptions.ignoreTransactions || []), ...(clientOptions.ignoreTransactions || [])],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true\n  };\n}\nfunction _shouldDropEvent(event, options) {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${misc.getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${misc.getEventDescription(event)}`);\n    return true;\n  }\n  if (_isUselessError(event)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${misc.getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${misc.getEventDescription(event)}`);\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${misc.getEventDescription(event)}.\\nUrl: ${_getEventFilterUrl(event)}`);\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${misc.getEventDescription(event)}.\\nUrl: ${_getEventFilterUrl(event)}`);\n    return true;\n  }\n  return false;\n}\nfunction _isIgnoredError(event, ignoreErrors) {\n  // If event.type, this is not an error\n  if (event.type || !ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n  return _getPossibleEventMessages(event).some(message => string.stringMatchesSomePattern(message, ignoreErrors));\n}\nfunction _isIgnoredTransaction(event, ignoreTransactions) {\n  if (event.type !== 'transaction' || !ignoreTransactions || !ignoreTransactions.length) {\n    return false;\n  }\n  const name = event.transaction;\n  return name ? string.stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\nfunction _isDeniedUrl(event, denyUrls) {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : string.stringMatchesSomePattern(url, denyUrls);\n}\nfunction _isAllowedUrl(event, allowUrls) {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : string.stringMatchesSomePattern(url, allowUrls);\n}\nfunction _getPossibleEventMessages(event) {\n  const possibleMessages = [];\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n  let lastException;\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    lastException = event.exception.values[event.exception.values.length - 1];\n  } catch (e) {\n    // try catching to save bundle size checking existence of variables\n  }\n  if (lastException) {\n    if (lastException.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  }\n  return possibleMessages;\n}\nfunction _isSentryError(event) {\n  try {\n    // @ts-expect-error can't be a sentry error if undefined\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\nfunction _getLastValidUrl(frames = []) {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n  return null;\n}\nfunction _getEventFilterUrl(event) {\n  try {\n    let frames;\n    try {\n      // @ts-expect-error we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    debugBuild.DEBUG_BUILD && logger.logger.error(`Cannot extract url for event ${misc.getEventDescription(event)}`);\n    return null;\n  }\n}\nfunction _isUselessError(event) {\n  if (event.type) {\n    // event is not an error\n    return false;\n  }\n\n  // We only want to consider events for dropping that actually have recorded exception values.\n  if (!event.exception || !event.exception.values || event.exception.values.length === 0) {\n    return false;\n  }\n  return (\n    // No top-level message\n    !event.message &&\n    // There are no exception values that have a stacktrace, a non-generic-Error type or value\n    !event.exception.values.some(value => value.stacktrace || value.type && value.type !== 'Error' || value.value)\n  );\n}\nexports.inboundFiltersIntegration = inboundFiltersIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst aggregateErrors = __webpack_require__(/*! ../utils-hoist/aggregate-errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js\");\nconst eventbuilder = __webpack_require__(/*! ../utils-hoist/eventbuilder.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js\");\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\nconst INTEGRATION_NAME = 'LinkedErrors';\nconst _linkedErrorsIntegration = (options = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n      aggregateErrors.applyAggregateErrorsToEvent(eventbuilder.exceptionFromError, options.stackParser, options.maxValueLength, key, limit, event, hint);\n    }\n  };\n};\nconst linkedErrorsIntegration = integration.defineIntegration(_linkedErrorsIntegration);\nexports.linkedErrorsIntegration = linkedErrorsIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xpbmtlZGVycm9ycy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyw0RkFBbUIsQ0FBQztBQUNoRCxNQUFNQyxlQUFlLEdBQUdELG1CQUFPLENBQUMsOEhBQW9DLENBQUM7QUFDckUsTUFBTUUsWUFBWSxHQUFHRixtQkFBTyxDQUFDLHNIQUFnQyxDQUFDO0FBRTlELE1BQU1HLFdBQVcsR0FBRyxPQUFPO0FBQzNCLE1BQU1DLGFBQWEsR0FBRyxDQUFDO0FBRXZCLE1BQU1DLGdCQUFnQixHQUFHLGNBQWM7QUFFdkMsTUFBTUMsd0JBQXdCLEdBQUlBLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUMsS0FBSztFQUNsRCxNQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQ0MsS0FBSyxJQUFJSixhQUFhO0VBQzVDLE1BQU1LLEdBQUcsR0FBR0YsT0FBTyxDQUFDRSxHQUFHLElBQUlOLFdBQVc7RUFFdEMsT0FBTztJQUNMTyxJQUFJLEVBQUVMLGdCQUFnQjtJQUN0Qk0sZUFBZUEsQ0FBQ0MsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtNQUNuQyxNQUFNUCxPQUFPLEdBQUdPLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLENBQUM7TUFFbkNkLGVBQWUsQ0FBQ2UsMkJBQTJCLENBQ3pDZCxZQUFZLENBQUNlLGtCQUFrQixFQUMvQlYsT0FBTyxDQUFDVyxXQUFXLEVBQ25CWCxPQUFPLENBQUNZLGNBQWMsRUFDdEJWLEdBQUcsRUFDSEQsS0FBSyxFQUNMSSxLQUFLLEVBQ0xDLElBQ0YsQ0FBQztJQUNIO0VBQ0YsQ0FBQztBQUNILENBQUU7QUFFRixNQUFNTyx1QkFBdUIsR0FBR3JCLFdBQVcsQ0FBQ3NCLGlCQUFpQixDQUFDZix3QkFBd0IsQ0FBQztBQUV2RlQsK0JBQStCLEdBQUd1Qix1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xpbmtlZGVycm9ycy5qcz8wOWRkIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24uanMnKTtcbmNvbnN0IGFnZ3JlZ2F0ZUVycm9ycyA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2FnZ3JlZ2F0ZS1lcnJvcnMuanMnKTtcbmNvbnN0IGV2ZW50YnVpbGRlciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2V2ZW50YnVpbGRlci5qcycpO1xuXG5jb25zdCBERUZBVUxUX0tFWSA9ICdjYXVzZSc7XG5jb25zdCBERUZBVUxUX0xJTUlUID0gNTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdMaW5rZWRFcnJvcnMnO1xuXG5jb25zdCBfbGlua2VkRXJyb3JzSW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBsaW1pdCA9IG9wdGlvbnMubGltaXQgfHwgREVGQVVMVF9MSU1JVDtcbiAgY29uc3Qga2V5ID0gb3B0aW9ucy5rZXkgfHwgREVGQVVMVF9LRVk7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHByZXByb2Nlc3NFdmVudChldmVudCwgaGludCwgY2xpZW50KSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gY2xpZW50LmdldE9wdGlvbnMoKTtcblxuICAgICAgYWdncmVnYXRlRXJyb3JzLmFwcGx5QWdncmVnYXRlRXJyb3JzVG9FdmVudChcbiAgICAgICAgZXZlbnRidWlsZGVyLmV4Y2VwdGlvbkZyb21FcnJvcixcbiAgICAgICAgb3B0aW9ucy5zdGFja1BhcnNlcixcbiAgICAgICAgb3B0aW9ucy5tYXhWYWx1ZUxlbmd0aCxcbiAgICAgICAga2V5LFxuICAgICAgICBsaW1pdCxcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGhpbnQsXG4gICAgICApO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmNvbnN0IGxpbmtlZEVycm9yc0ludGVncmF0aW9uID0gaW50ZWdyYXRpb24uZGVmaW5lSW50ZWdyYXRpb24oX2xpbmtlZEVycm9yc0ludGVncmF0aW9uKTtcblxuZXhwb3J0cy5saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbiA9IGxpbmtlZEVycm9yc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlua2VkZXJyb3JzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW50ZWdyYXRpb24iLCJyZXF1aXJlIiwiYWdncmVnYXRlRXJyb3JzIiwiZXZlbnRidWlsZGVyIiwiREVGQVVMVF9LRVkiLCJERUZBVUxUX0xJTUlUIiwiSU5URUdSQVRJT05fTkFNRSIsIl9saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbiIsIm9wdGlvbnMiLCJsaW1pdCIsImtleSIsIm5hbWUiLCJwcmVwcm9jZXNzRXZlbnQiLCJldmVudCIsImhpbnQiLCJjbGllbnQiLCJnZXRPcHRpb25zIiwiYXBwbHlBZ2dyZWdhdGVFcnJvcnNUb0V2ZW50IiwiZXhjZXB0aW9uRnJvbUVycm9yIiwic3RhY2tQYXJzZXIiLCJtYXhWYWx1ZUxlbmd0aCIsImxpbmtlZEVycm9yc0ludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/linkederrors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/metadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/metadata.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst metadata = __webpack_require__(/*! ../metadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\n\n/**\n * Adds module metadata to stack frames.\n *\n * Metadata can be injected by the Sentry bundler plugins using the `moduleMetadata` config option.\n *\n * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events\n * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams\n * our sources\n */\nconst moduleMetadataIntegration = integration.defineIntegration(() => {\n  return {\n    name: 'ModuleMetadata',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      client.on('beforeEnvelope', envelope$1 => {\n        envelope.forEachEnvelopeItem(envelope$1, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? item[1] : undefined;\n            if (event) {\n              metadata.stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n        const stackParser = client.getOptions().stackParser;\n        metadata.addMetadataToStackFrames(stackParser, event);\n      });\n    }\n  };\n});\nexports.moduleMetadataIntegration = moduleMetadataIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL21ldGFkYXRhLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsV0FBVyxHQUFHQyxtQkFBTyxDQUFDLDRGQUFtQixDQUFDO0FBQ2hELE1BQU1DLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyxzRkFBZ0IsQ0FBQztBQUMxQyxNQUFNRSxRQUFRLEdBQUdGLG1CQUFPLENBQUMsOEdBQTRCLENBQUM7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1HLHlCQUF5QixHQUFHSixXQUFXLENBQUNLLGlCQUFpQixDQUFDLE1BQU07RUFDcEUsT0FBTztJQUNMQyxJQUFJLEVBQUUsZ0JBQWdCO0lBQ3RCQyxLQUFLQSxDQUFDQyxNQUFNLEVBQUU7TUFDWjtNQUNBQSxNQUFNLENBQUNDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRUMsVUFBVSxJQUFJO1FBQ3hDUCxRQUFRLENBQUNRLG1CQUFtQixDQUFDRCxVQUFVLEVBQUUsQ0FBQ0UsSUFBSSxFQUFFQyxJQUFJLEtBQUs7VUFDdkQsSUFBSUEsSUFBSSxLQUFLLE9BQU8sRUFBRTtZQUNwQixNQUFNQyxLQUFLLEdBQUdDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSixJQUFJLENBQUMsR0FBSUEsSUFBSSxDQUFHLENBQUMsQ0FBQyxHQUFHSyxTQUFTO1lBRTFELElBQUlILEtBQUssRUFBRTtjQUNUWixRQUFRLENBQUNnQiw0QkFBNEIsQ0FBQ0osS0FBSyxDQUFDO2NBQzVDRixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUdFLEtBQUs7WUFDakI7VUFDRjtRQUNGLENBQUMsQ0FBQztNQUNKLENBQUMsQ0FBQztNQUVGTixNQUFNLENBQUNDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRUssS0FBSyxJQUFJO1FBQ3ZDO1FBQ0EsSUFBSUEsS0FBSyxDQUFDRCxJQUFJLEVBQUU7VUFDZDtRQUNGO1FBRUEsTUFBTU0sV0FBVyxHQUFHWCxNQUFNLENBQUNZLFVBQVUsQ0FBQyxDQUFDLENBQUNELFdBQVc7UUFDbkRqQixRQUFRLENBQUNtQix3QkFBd0IsQ0FBQ0YsV0FBVyxFQUFFTCxLQUFLLENBQUM7TUFDdkQsQ0FBQyxDQUFDO0lBQ0o7RUFDRixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUZoQixpQ0FBaUMsR0FBR00seUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9tZXRhZGF0YS5qcz9mMDlmIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGludGVncmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb24uanMnKTtcbmNvbnN0IG1ldGFkYXRhID0gcmVxdWlyZSgnLi4vbWV0YWRhdGEuanMnKTtcbmNvbnN0IGVudmVsb3BlID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvZW52ZWxvcGUuanMnKTtcblxuLyoqXG4gKiBBZGRzIG1vZHVsZSBtZXRhZGF0YSB0byBzdGFjayBmcmFtZXMuXG4gKlxuICogTWV0YWRhdGEgY2FuIGJlIGluamVjdGVkIGJ5IHRoZSBTZW50cnkgYnVuZGxlciBwbHVnaW5zIHVzaW5nIHRoZSBgbW9kdWxlTWV0YWRhdGFgIGNvbmZpZyBvcHRpb24uXG4gKlxuICogV2hlbiB0aGlzIGludGVncmF0aW9uIGlzIGFkZGVkLCB0aGUgbWV0YWRhdGEgcGFzc2VkIHRvIHRoZSBidW5kbGVyIHBsdWdpbiBpcyBhZGRlZCB0byB0aGUgc3RhY2sgZnJhbWVzIG9mIGFsbCBldmVudHNcbiAqIHVuZGVyIHRoZSBgbW9kdWxlX21ldGFkYXRhYCBwcm9wZXJ0eS4gVGhpcyBjYW4gYmUgdXNlZCB0byBoZWxwIGluIHRhZ2dpbmcgb3Igcm91dGluZyBvZiBldmVudHMgZnJvbSBkaWZmZXJlbnQgdGVhbXNcbiAqIG91ciBzb3VyY2VzXG4gKi9cbmNvbnN0IG1vZHVsZU1ldGFkYXRhSW50ZWdyYXRpb24gPSBpbnRlZ3JhdGlvbi5kZWZpbmVJbnRlZ3JhdGlvbigoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ01vZHVsZU1ldGFkYXRhJyxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gc3RyaXAgbWV0YWRhdGEgZnJvbSBzdGFjayBmcmFtZXMgYmVmb3JlIHNlbmRpbmcgdGhlbSB0byBTZW50cnkgc2luY2UgdGhlc2UgYXJlIGNsaWVudCBzaWRlIG9ubHkuXG4gICAgICBjbGllbnQub24oJ2JlZm9yZUVudmVsb3BlJywgZW52ZWxvcGUkMSA9PiB7XG4gICAgICAgIGVudmVsb3BlLmZvckVhY2hFbnZlbG9wZUl0ZW0oZW52ZWxvcGUkMSwgKGl0ZW0sIHR5cGUpID0+IHtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2V2ZW50Jykge1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gKGl0ZW0gKVsxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLnN0cmlwTWV0YWRhdGFGcm9tU3RhY2tGcmFtZXMoZXZlbnQpO1xuICAgICAgICAgICAgICBpdGVtWzFdID0gZXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBjbGllbnQub24oJ2FwcGx5RnJhbWVNZXRhZGF0YScsIGV2ZW50ID0+IHtcbiAgICAgICAgLy8gT25seSBhcHBseSBzdGFjayBmcmFtZSBtZXRhZGF0YSB0byBlcnJvciBldmVudHNcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGFja1BhcnNlciA9IGNsaWVudC5nZXRPcHRpb25zKCkuc3RhY2tQYXJzZXI7XG4gICAgICAgIG1ldGFkYXRhLmFkZE1ldGFkYXRhVG9TdGFja0ZyYW1lcyhzdGFja1BhcnNlciwgZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn0pO1xuXG5leHBvcnRzLm1vZHVsZU1ldGFkYXRhSW50ZWdyYXRpb24gPSBtb2R1bGVNZXRhZGF0YUludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0YWRhdGEuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnRlZ3JhdGlvbiIsInJlcXVpcmUiLCJtZXRhZGF0YSIsImVudmVsb3BlIiwibW9kdWxlTWV0YWRhdGFJbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIiwibmFtZSIsInNldHVwIiwiY2xpZW50Iiwib24iLCJlbnZlbG9wZSQxIiwiZm9yRWFjaEVudmVsb3BlSXRlbSIsIml0ZW0iLCJ0eXBlIiwiZXZlbnQiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJzdHJpcE1ldGFkYXRhRnJvbVN0YWNrRnJhbWVzIiwic3RhY2tQYXJzZXIiLCJnZXRPcHRpb25zIiwiYWRkTWV0YWRhdGFUb1N0YWNrRnJhbWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/metadata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/requestdata.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/requestdata.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst requestdata = __webpack_require__(/*! ../utils-hoist/requestdata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js\");\nconst DEFAULT_OPTIONS = {\n  include: {\n    cookies: true,\n    data: true,\n    headers: true,\n    ip: false,\n    query_string: true,\n    url: true,\n    user: {\n      id: true,\n      username: true,\n      email: true\n    }\n  },\n  transactionNamingScheme: 'methodPath'\n};\nconst INTEGRATION_NAME = 'RequestData';\nconst _requestDataIntegration = (options = {}) => {\n  const _options = {\n    ...DEFAULT_OPTIONS,\n    ...options,\n    include: {\n      ...DEFAULT_OPTIONS.include,\n      ...options.include,\n      user: options.include && typeof options.include.user === 'boolean' ? options.include.user : {\n        ...DEFAULT_OPTIONS.include.user,\n        // Unclear why TS still thinks `options.include.user` could be a boolean at this point\n        ...(options.include || {}).user\n      }\n    }\n  };\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      // Note: In the long run, most of the logic here should probably move into the request data utility functions. For\n      // the moment it lives here, though, until https://github.com/getsentry/sentry-javascript/issues/5718 is addressed.\n      // (TL;DR: Those functions touch many parts of the repo in many different ways, and need to be cleaned up. Once\n      // that's happened, it will be easier to add this logic in without worrying about unexpected side effects.)\n\n      const {\n        sdkProcessingMetadata = {}\n      } = event;\n      const {\n        request,\n        normalizedRequest\n      } = sdkProcessingMetadata;\n      const addRequestDataOptions = convertReqDataIntegrationOptsToAddReqDataOpts(_options);\n\n      // If this is set, it takes precedence over the plain request object\n      if (normalizedRequest) {\n        // Some other data is not available in standard HTTP requests, but can sometimes be augmented by e.g. Express or Next.js\n        const ipAddress = request ? request.ip || request.socket && request.socket.remoteAddress : undefined;\n        const user = request ? request.user : undefined;\n        requestdata.addNormalizedRequestDataToEvent(event, normalizedRequest, {\n          ipAddress,\n          user\n        }, addRequestDataOptions);\n        return event;\n      }\n\n      // TODO(v9): Eventually we can remove this fallback branch and only rely on the normalizedRequest above\n      if (!request) {\n        return event;\n      }\n\n      // eslint-disable-next-line deprecation/deprecation\n      return requestdata.addRequestDataToEvent(event, request, addRequestDataOptions);\n    }\n  };\n};\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nconst requestDataIntegration = integration.defineIntegration(_requestDataIntegration);\n\n/** Convert this integration's options to match what `addRequestDataToEvent` expects */\n/** TODO: Can possibly be deleted once https://github.com/getsentry/sentry-javascript/issues/5718 is fixed */\nfunction convertReqDataIntegrationOptsToAddReqDataOpts(integrationOptions) {\n  const {\n    // eslint-disable-next-line deprecation/deprecation\n    transactionNamingScheme,\n    include: {\n      ip,\n      user,\n      ...requestOptions\n    }\n  } = integrationOptions;\n  const requestIncludeKeys = ['method'];\n  for (const [key, value] of Object.entries(requestOptions)) {\n    if (value) {\n      requestIncludeKeys.push(key);\n    }\n  }\n  let addReqDataUserOpt;\n  if (user === undefined) {\n    addReqDataUserOpt = true;\n  } else if (typeof user === 'boolean') {\n    addReqDataUserOpt = user;\n  } else {\n    const userIncludeKeys = [];\n    for (const [key, value] of Object.entries(user)) {\n      if (value) {\n        userIncludeKeys.push(key);\n      }\n    }\n    addReqDataUserOpt = userIncludeKeys;\n  }\n  return {\n    include: {\n      ip,\n      user: addReqDataUserOpt,\n      request: requestIncludeKeys.length !== 0 ? requestIncludeKeys : undefined,\n      transaction: transactionNamingScheme\n    }\n  };\n}\nexports.requestDataIntegration = requestDataIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/requestdata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst path = __webpack_require__(/*! ../utils-hoist/path.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/path.js\");\nconst worldwide = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst INTEGRATION_NAME = 'RewriteFrames';\n\n/**\n * Rewrite event frames paths.\n */\nconst rewriteFramesIntegration = integration.defineIntegration((options = {}) => {\n  const root = options.root;\n  const prefix = options.prefix || 'app:///';\n  const isBrowser = 'window' in worldwide.GLOBAL_OBJ && worldwide.GLOBAL_OBJ.window !== undefined;\n  const iteratee = options.iteratee || generateIteratee({\n    isBrowser,\n    root,\n    prefix\n  });\n\n  /** Process an exception event. */\n  function _processExceptionsEvent(event) {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception.values.map(value => ({\n            ...value,\n            ...(value.stacktrace && {\n              stacktrace: _processStacktrace(value.stacktrace)\n            })\n          }))\n        }\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** Process a stack trace. */\n  function _processStacktrace(stacktrace) {\n    return {\n      ...stacktrace,\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(f => iteratee(f))\n    };\n  }\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent) {\n      let processedEvent = originalEvent;\n      if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n        processedEvent = _processExceptionsEvent(processedEvent);\n      }\n      return processedEvent;\n    }\n  };\n});\n\n/**\n * Exported only for tests.\n */\nfunction generateIteratee({\n  isBrowser,\n  root,\n  prefix\n}) {\n  return frame => {\n    if (!frame.filename) {\n      return frame;\n    }\n\n    // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\\`\n    const isWindowsFrame = /^[a-zA-Z]:\\\\/.test(frame.filename) ||\n    // or the presence of a backslash without a forward slash (which are not allowed on Windows)\n    frame.filename.includes('\\\\') && !frame.filename.includes('/');\n\n    // Check if the frame filename begins with `/`\n    const startsWithSlash = /^\\//.test(frame.filename);\n    if (isBrowser) {\n      if (root) {\n        const oldFilename = frame.filename;\n        if (oldFilename.indexOf(root) === 0) {\n          frame.filename = oldFilename.replace(root, prefix);\n        }\n      }\n    } else {\n      if (isWindowsFrame || startsWithSlash) {\n        const filename = isWindowsFrame ? frame.filename.replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix\n        .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n        const base = root ? path.relative(root, filename) : path.basename(filename);\n        frame.filename = `${prefix}${base}`;\n      }\n    }\n    return frame;\n  };\n}\nexports.generateIteratee = generateIteratee;\nexports.rewriteFramesIntegration = rewriteFramesIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst INTEGRATION_NAME = 'SessionTiming';\nconst _sessionTimingIntegration = () => {\n  const startTime = time.timestampInSeconds() * 1000;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      const now = time.timestampInSeconds() * 1000;\n      return {\n        ...event,\n        extra: {\n          ...event.extra,\n          ['session:start']: startTime,\n          ['session:duration']: now - startTime,\n          ['session:end']: now\n        }\n      };\n    }\n  };\n};\n\n/**\n * This function adds duration since the sessionTimingIntegration was initialized\n * till the time event was sent.\n *\n * @deprecated This integration is deprecated and will be removed in the next major version of the SDK.\n * To capture session durations alongside events, use [Context](https://docs.sentry.io/platforms/javascript/enriching-events/context/) (`Sentry.setContext()`).\n */\nconst sessionTimingIntegration = integration.defineIntegration(_sessionTimingIntegration);\nexports.sessionTimingIntegration = sessionTimingIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Nlc3Npb250aW1pbmcuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxXQUFXLEdBQUdDLG1CQUFPLENBQUMsNEZBQW1CLENBQUM7QUFDaEQsTUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLHNHQUF3QixDQUFDO0FBRTlDLE1BQU1FLGdCQUFnQixHQUFHLGVBQWU7QUFFeEMsTUFBTUMseUJBQXlCLEdBQUlBLENBQUEsS0FBTTtFQUN2QyxNQUFNQyxTQUFTLEdBQUdILElBQUksQ0FBQ0ksa0JBQWtCLENBQUMsQ0FBQyxHQUFHLElBQUk7RUFFbEQsT0FBTztJQUNMQyxJQUFJLEVBQUVKLGdCQUFnQjtJQUN0QkssWUFBWUEsQ0FBQ0MsS0FBSyxFQUFFO01BQ2xCLE1BQU1DLEdBQUcsR0FBR1IsSUFBSSxDQUFDSSxrQkFBa0IsQ0FBQyxDQUFDLEdBQUcsSUFBSTtNQUU1QyxPQUFPO1FBQ0wsR0FBR0csS0FBSztRQUNSRSxLQUFLLEVBQUU7VUFDTCxHQUFHRixLQUFLLENBQUNFLEtBQUs7VUFDZCxDQUFDLGVBQWUsR0FBR04sU0FBUztVQUM1QixDQUFDLGtCQUFrQixHQUFHSyxHQUFHLEdBQUdMLFNBQVM7VUFDckMsQ0FBQyxhQUFhLEdBQUdLO1FBQ25CO01BQ0YsQ0FBQztJQUNIO0VBQ0YsQ0FBQztBQUNILENBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNRSx3QkFBd0IsR0FBR1osV0FBVyxDQUFDYSxpQkFBaUIsQ0FBQ1QseUJBQXlCLENBQUM7QUFFekZOLGdDQUFnQyxHQUFHYyx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Nlc3Npb250aW1pbmcuanM/M2E3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpbnRlZ3JhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9uLmpzJyk7XG5jb25zdCB0aW1lID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvdGltZS5qcycpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Nlc3Npb25UaW1pbmcnO1xuXG5jb25zdCBfc2Vzc2lvblRpbWluZ0ludGVncmF0aW9uID0gKCgpID0+IHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gdGltZS50aW1lc3RhbXBJblNlY29uZHMoKSAqIDEwMDA7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHByb2Nlc3NFdmVudChldmVudCkge1xuICAgICAgY29uc3Qgbm93ID0gdGltZS50aW1lc3RhbXBJblNlY29uZHMoKSAqIDEwMDA7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICBleHRyYToge1xuICAgICAgICAgIC4uLmV2ZW50LmV4dHJhLFxuICAgICAgICAgIFsnc2Vzc2lvbjpzdGFydCddOiBzdGFydFRpbWUsXG4gICAgICAgICAgWydzZXNzaW9uOmR1cmF0aW9uJ106IG5vdyAtIHN0YXJ0VGltZSxcbiAgICAgICAgICBbJ3Nlc3Npb246ZW5kJ106IG5vdyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFkZHMgZHVyYXRpb24gc2luY2UgdGhlIHNlc3Npb25UaW1pbmdJbnRlZ3JhdGlvbiB3YXMgaW5pdGlhbGl6ZWRcbiAqIHRpbGwgdGhlIHRpbWUgZXZlbnQgd2FzIHNlbnQuXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBpbnRlZ3JhdGlvbiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiB0aGUgU0RLLlxuICogVG8gY2FwdHVyZSBzZXNzaW9uIGR1cmF0aW9ucyBhbG9uZ3NpZGUgZXZlbnRzLCB1c2UgW0NvbnRleHRdKGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZW5yaWNoaW5nLWV2ZW50cy9jb250ZXh0LykgKGBTZW50cnkuc2V0Q29udGV4dCgpYCkuXG4gKi9cbmNvbnN0IHNlc3Npb25UaW1pbmdJbnRlZ3JhdGlvbiA9IGludGVncmF0aW9uLmRlZmluZUludGVncmF0aW9uKF9zZXNzaW9uVGltaW5nSW50ZWdyYXRpb24pO1xuXG5leHBvcnRzLnNlc3Npb25UaW1pbmdJbnRlZ3JhdGlvbiA9IHNlc3Npb25UaW1pbmdJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlc3Npb250aW1pbmcuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnRlZ3JhdGlvbiIsInJlcXVpcmUiLCJ0aW1lIiwiSU5URUdSQVRJT05fTkFNRSIsIl9zZXNzaW9uVGltaW5nSW50ZWdyYXRpb24iLCJzdGFydFRpbWUiLCJ0aW1lc3RhbXBJblNlY29uZHMiLCJuYW1lIiwicHJvY2Vzc0V2ZW50IiwiZXZlbnQiLCJub3ciLCJleHRyYSIsInNlc3Npb25UaW1pbmdJbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst metadata = __webpack_require__(/*! ../metadata.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst stacktrace = __webpack_require__(/*! ../utils-hoist/stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\n\n/**\n * This integration allows you to filter out, or tag error events that do not come from user code marked with a bundle key via the Sentry bundler plugins.\n */\nconst thirdPartyErrorFilterIntegration = integration.defineIntegration(options => {\n  return {\n    name: 'ThirdPartyErrorsFilter',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      // TODO(lforst): Move this cleanup logic into a more central place in the SDK.\n      client.on('beforeEnvelope', envelope$1 => {\n        envelope.forEachEnvelopeItem(envelope$1, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? item[1] : undefined;\n            if (event) {\n              metadata.stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n        const stackParser = client.getOptions().stackParser;\n        metadata.addMetadataToStackFrames(stackParser, event);\n      });\n    },\n    processEvent(event) {\n      const frameKeys = getBundleKeysForAllFramesWithFilenames(event);\n      if (frameKeys) {\n        const arrayMethod = options.behaviour === 'drop-error-if-contains-third-party-frames' || options.behaviour === 'apply-tag-if-contains-third-party-frames' ? 'some' : 'every';\n        const behaviourApplies = frameKeys[arrayMethod](keys => !keys.some(key => options.filterKeys.includes(key)));\n        if (behaviourApplies) {\n          const shouldDrop = options.behaviour === 'drop-error-if-contains-third-party-frames' || options.behaviour === 'drop-error-if-exclusively-contains-third-party-frames';\n          if (shouldDrop) {\n            return null;\n          } else {\n            event.tags = {\n              ...event.tags,\n              third_party_code: true\n            };\n          }\n        }\n      }\n      return event;\n    }\n  };\n});\nfunction getBundleKeysForAllFramesWithFilenames(event) {\n  const frames = stacktrace.getFramesFromEvent(event);\n  if (!frames) {\n    return undefined;\n  }\n  return frames\n  // Exclude frames without a filename since these are likely native code or built-ins\n  .filter(frame => !!frame.filename).map(frame => {\n    if (frame.module_metadata) {\n      return Object.keys(frame.module_metadata).filter(key => key.startsWith(BUNDLER_PLUGIN_APP_KEY_PREFIX)).map(key => key.slice(BUNDLER_PLUGIN_APP_KEY_PREFIX.length));\n    }\n    return [];\n  });\n}\nconst BUNDLER_PLUGIN_APP_KEY_PREFIX = '_sentryBundlerPluginAppKey:';\nexports.thirdPartyErrorFilterIntegration = thirdPartyErrorFilterIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst integration = __webpack_require__(/*! ../integration.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/integration.js\");\nconst is = __webpack_require__(/*! ../utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst string = __webpack_require__(/*! ../utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst DEFAULT_LIMIT = 10;\nconst INTEGRATION_NAME = 'ZodErrors';\n\n// Simplified ZodIssue type definition\n\nfunction originalExceptionIsZodError(originalException) {\n  return is.isError(originalException) && originalException.name === 'ZodError' && Array.isArray(originalException.errors);\n}\n\n/**\n * Formats child objects or arrays to a string\n * That is preserved when sent to Sentry\n */\nfunction formatIssueTitle(issue) {\n  return {\n    ...issue,\n    path: 'path' in issue && Array.isArray(issue.path) ? issue.path.join('.') : undefined,\n    keys: 'keys' in issue ? JSON.stringify(issue.keys) : undefined,\n    unionErrors: 'unionErrors' in issue ? JSON.stringify(issue.unionErrors) : undefined\n  };\n}\n\n/**\n * Zod error message is a stringified version of ZodError.issues\n * This doesn't display well in the Sentry UI. Replace it with something shorter.\n */\nfunction formatIssueMessage(zodError) {\n  const errorKeyMap = new Set();\n  for (const iss of zodError.issues) {\n    if (iss.path && iss.path[0]) {\n      errorKeyMap.add(iss.path[0]);\n    }\n  }\n  const errorKeys = Array.from(errorKeyMap);\n  return `Failed to validate keys: ${string.truncate(errorKeys.join(', '), 100)}`;\n}\n\n/**\n * Applies ZodError issues to an event extras and replaces the error message\n */\nfunction applyZodErrorsToEvent(limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !hint.originalException || !originalExceptionIsZodError(hint.originalException) || hint.originalException.issues.length === 0) {\n    return event;\n  }\n  return {\n    ...event,\n    exception: {\n      ...event.exception,\n      values: [{\n        ...event.exception.values[0],\n        value: formatIssueMessage(hint.originalException)\n      }, ...event.exception.values.slice(1)]\n    },\n    extra: {\n      ...event.extra,\n      'zoderror.issues': hint.originalException.errors.slice(0, limit).map(formatIssueTitle)\n    }\n  };\n}\nconst _zodErrorsIntegration = (options = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(originalEvent, hint) {\n      const processedEvent = applyZodErrorsToEvent(limit, originalEvent, hint);\n      return processedEvent;\n    }\n  };\n};\nconst zodErrorsIntegration = integration.defineIntegration(_zodErrorsIntegration);\nexports.applyZodErrorsToEvent = applyZodErrorsToEvent;\nexports.zodErrorsIntegration = zodErrorsIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/integrations/zoderrors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metadata.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ./utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/** Keys are source filename/url, values are metadata objects. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst filenameMetadataMap = new Map();\n/** Set of stack strings that have already been parsed. */\nconst parsedStacks = new Set();\nfunction ensureMetadataStacksAreParsed(parser) {\n  if (!worldwide.GLOBAL_OBJ._sentryModuleMetadata) {\n    return;\n  }\n  for (const stack of Object.keys(worldwide.GLOBAL_OBJ._sentryModuleMetadata)) {\n    const metadata = worldwide.GLOBAL_OBJ._sentryModuleMetadata[stack];\n    if (parsedStacks.has(stack)) {\n      continue;\n    }\n\n    // Ensure this stack doesn't get parsed again\n    parsedStacks.add(stack);\n    const frames = parser(stack);\n\n    // Go through the frames starting from the top of the stack and find the first one with a filename\n    for (const frame of frames.reverse()) {\n      if (frame.filename) {\n        // Save the metadata for this filename\n        filenameMetadataMap.set(frame.filename, metadata);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Retrieve metadata for a specific JavaScript file URL.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadataForUrl(parser, filename) {\n  ensureMetadataStacksAreParsed(parser);\n  return filenameMetadataMap.get(filename);\n}\n\n/**\n * Adds metadata to stack frames.\n *\n * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.\n */\nfunction addMetadataToStackFrames(parser, event) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n      for (const frame of exception.stacktrace.frames || []) {\n        if (!frame.filename || frame.module_metadata) {\n          continue;\n        }\n        const metadata = getMetadataForUrl(parser, frame.filename);\n        if (metadata) {\n          frame.module_metadata = metadata;\n        }\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Strips metadata from stack frames.\n */\nfunction stripMetadataFromStackFrames(event) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      if (!exception.stacktrace) {\n        return;\n      }\n      for (const frame of exception.stacktrace.frames || []) {\n        delete frame.module_metadata;\n      }\n    });\n  } catch (_) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\nexports.addMetadataToStackFrames = addMetadataToStackFrames;\nexports.getMetadataForUrl = getMetadataForUrl;\nexports.stripMetadataFromStackFrames = stripMetadataFromStackFrames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxTQUFTLEdBQUdDLG1CQUFPLENBQUMsK0dBQTRCLENBQUM7O0FBRXZEO0FBQ0E7QUFDQSxNQUFNQyxtQkFBbUIsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztBQUNyQztBQUNBLE1BQU1DLFlBQVksR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztBQUU5QixTQUFTQyw2QkFBNkJBLENBQUNDLE1BQU0sRUFBRTtFQUM3QyxJQUFJLENBQUNQLFNBQVMsQ0FBQ1EsVUFBVSxDQUFDQyxxQkFBcUIsRUFBRTtJQUMvQztFQUNGO0VBRUEsS0FBSyxNQUFNQyxLQUFLLElBQUlkLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDWCxTQUFTLENBQUNRLFVBQVUsQ0FBQ0MscUJBQXFCLENBQUMsRUFBRTtJQUMzRSxNQUFNRyxRQUFRLEdBQUdaLFNBQVMsQ0FBQ1EsVUFBVSxDQUFDQyxxQkFBcUIsQ0FBQ0MsS0FBSyxDQUFDO0lBRWxFLElBQUlOLFlBQVksQ0FBQ1MsR0FBRyxDQUFDSCxLQUFLLENBQUMsRUFBRTtNQUMzQjtJQUNGOztJQUVBO0lBQ0FOLFlBQVksQ0FBQ1UsR0FBRyxDQUFDSixLQUFLLENBQUM7SUFFdkIsTUFBTUssTUFBTSxHQUFHUixNQUFNLENBQUNHLEtBQUssQ0FBQzs7SUFFNUI7SUFDQSxLQUFLLE1BQU1NLEtBQUssSUFBSUQsTUFBTSxDQUFDRSxPQUFPLENBQUMsQ0FBQyxFQUFFO01BQ3BDLElBQUlELEtBQUssQ0FBQ0UsUUFBUSxFQUFFO1FBQ2xCO1FBQ0FoQixtQkFBbUIsQ0FBQ2lCLEdBQUcsQ0FBQ0gsS0FBSyxDQUFDRSxRQUFRLEVBQUVOLFFBQVEsQ0FBQztRQUNqRDtNQUNGO0lBQ0Y7RUFDRjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNRLGlCQUFpQkEsQ0FBQ2IsTUFBTSxFQUFFVyxRQUFRLEVBQUU7RUFDM0NaLDZCQUE2QixDQUFDQyxNQUFNLENBQUM7RUFDckMsT0FBT0wsbUJBQW1CLENBQUNtQixHQUFHLENBQUNILFFBQVEsQ0FBQztBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ksd0JBQXdCQSxDQUFDZixNQUFNLEVBQUVnQixLQUFLLEVBQUU7RUFDL0MsSUFBSTtJQUNGO0lBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0YsU0FBUyxJQUFJO01BQzFDLElBQUksQ0FBQ0EsU0FBUyxDQUFDRyxVQUFVLEVBQUU7UUFDekI7TUFDRjtNQUVBLEtBQUssTUFBTVgsS0FBSyxJQUFJUSxTQUFTLENBQUNHLFVBQVUsQ0FBQ1osTUFBTSxJQUFJLEVBQUUsRUFBRTtRQUNyRCxJQUFJLENBQUNDLEtBQUssQ0FBQ0UsUUFBUSxJQUFJRixLQUFLLENBQUNZLGVBQWUsRUFBRTtVQUM1QztRQUNGO1FBRUEsTUFBTWhCLFFBQVEsR0FBR1EsaUJBQWlCLENBQUNiLE1BQU0sRUFBRVMsS0FBSyxDQUFDRSxRQUFRLENBQUM7UUFFMUQsSUFBSU4sUUFBUSxFQUFFO1VBQ1pJLEtBQUssQ0FBQ1ksZUFBZSxHQUFHaEIsUUFBUTtRQUNsQztNQUNGO0lBQ0YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDLE9BQU9pQixDQUFDLEVBQUU7SUFDVjtFQUFBO0FBRUo7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsNEJBQTRCQSxDQUFDUCxLQUFLLEVBQUU7RUFDM0MsSUFBSTtJQUNGO0lBQ0FBLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ0YsU0FBUyxJQUFJO01BQzFDLElBQUksQ0FBQ0EsU0FBUyxDQUFDRyxVQUFVLEVBQUU7UUFDekI7TUFDRjtNQUVBLEtBQUssTUFBTVgsS0FBSyxJQUFJUSxTQUFTLENBQUNHLFVBQVUsQ0FBQ1osTUFBTSxJQUFJLEVBQUUsRUFBRTtRQUNyRCxPQUFPQyxLQUFLLENBQUNZLGVBQWU7TUFDOUI7SUFDRixDQUFDLENBQUM7RUFDSixDQUFDLENBQUMsT0FBT0MsQ0FBQyxFQUFFO0lBQ1Y7RUFBQTtBQUVKO0FBRUEvQixnQ0FBZ0MsR0FBR3dCLHdCQUF3QjtBQUMzRHhCLHlCQUF5QixHQUFHc0IsaUJBQWlCO0FBQzdDdEIsb0NBQW9DLEdBQUdnQyw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0YWRhdGEuanM/ZmQ2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L3dvcmxkd2lkZS5qcycpO1xuXG4vKiogS2V5cyBhcmUgc291cmNlIGZpbGVuYW1lL3VybCwgdmFsdWVzIGFyZSBtZXRhZGF0YSBvYmplY3RzLiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNvbnN0IGZpbGVuYW1lTWV0YWRhdGFNYXAgPSBuZXcgTWFwKCk7XG4vKiogU2V0IG9mIHN0YWNrIHN0cmluZ3MgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBwYXJzZWQuICovXG5jb25zdCBwYXJzZWRTdGFja3MgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIGVuc3VyZU1ldGFkYXRhU3RhY2tzQXJlUGFyc2VkKHBhcnNlcikge1xuICBpZiAoIXdvcmxkd2lkZS5HTE9CQUxfT0JKLl9zZW50cnlNb2R1bGVNZXRhZGF0YSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAoY29uc3Qgc3RhY2sgb2YgT2JqZWN0LmtleXMod29ybGR3aWRlLkdMT0JBTF9PQkouX3NlbnRyeU1vZHVsZU1ldGFkYXRhKSkge1xuICAgIGNvbnN0IG1ldGFkYXRhID0gd29ybGR3aWRlLkdMT0JBTF9PQkouX3NlbnRyeU1vZHVsZU1ldGFkYXRhW3N0YWNrXTtcblxuICAgIGlmIChwYXJzZWRTdGFja3MuaGFzKHN0YWNrKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHRoaXMgc3RhY2sgZG9lc24ndCBnZXQgcGFyc2VkIGFnYWluXG4gICAgcGFyc2VkU3RhY2tzLmFkZChzdGFjayk7XG5cbiAgICBjb25zdCBmcmFtZXMgPSBwYXJzZXIoc3RhY2spO1xuXG4gICAgLy8gR28gdGhyb3VnaCB0aGUgZnJhbWVzIHN0YXJ0aW5nIGZyb20gdGhlIHRvcCBvZiB0aGUgc3RhY2sgYW5kIGZpbmQgdGhlIGZpcnN0IG9uZSB3aXRoIGEgZmlsZW5hbWVcbiAgICBmb3IgKGNvbnN0IGZyYW1lIG9mIGZyYW1lcy5yZXZlcnNlKCkpIHtcbiAgICAgIGlmIChmcmFtZS5maWxlbmFtZSkge1xuICAgICAgICAvLyBTYXZlIHRoZSBtZXRhZGF0YSBmb3IgdGhpcyBmaWxlbmFtZVxuICAgICAgICBmaWxlbmFtZU1ldGFkYXRhTWFwLnNldChmcmFtZS5maWxlbmFtZSwgbWV0YWRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXRyaWV2ZSBtZXRhZGF0YSBmb3IgYSBzcGVjaWZpYyBKYXZhU2NyaXB0IGZpbGUgVVJMLlxuICpcbiAqIE1ldGFkYXRhIGlzIGluamVjdGVkIGJ5IHRoZSBTZW50cnkgYnVuZGxlciBwbHVnaW5zIHVzaW5nIHRoZSBgX2V4cGVyaW1lbnRzLm1vZHVsZU1ldGFkYXRhYCBjb25maWcgb3B0aW9uLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZ2V0TWV0YWRhdGFGb3JVcmwocGFyc2VyLCBmaWxlbmFtZSkge1xuICBlbnN1cmVNZXRhZGF0YVN0YWNrc0FyZVBhcnNlZChwYXJzZXIpO1xuICByZXR1cm4gZmlsZW5hbWVNZXRhZGF0YU1hcC5nZXQoZmlsZW5hbWUpO1xufVxuXG4vKipcbiAqIEFkZHMgbWV0YWRhdGEgdG8gc3RhY2sgZnJhbWVzLlxuICpcbiAqIE1ldGFkYXRhIGlzIGluamVjdGVkIGJ5IHRoZSBTZW50cnkgYnVuZGxlciBwbHVnaW5zIHVzaW5nIHRoZSBgX2V4cGVyaW1lbnRzLm1vZHVsZU1ldGFkYXRhYCBjb25maWcgb3B0aW9uLlxuICovXG5mdW5jdGlvbiBhZGRNZXRhZGF0YVRvU3RhY2tGcmFtZXMocGFyc2VyLCBldmVudCkge1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgZXZlbnQuZXhjZXB0aW9uLnZhbHVlcy5mb3JFYWNoKGV4Y2VwdGlvbiA9PiB7XG4gICAgICBpZiAoIWV4Y2VwdGlvbi5zdGFja3RyYWNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBmcmFtZSBvZiBleGNlcHRpb24uc3RhY2t0cmFjZS5mcmFtZXMgfHwgW10pIHtcbiAgICAgICAgaWYgKCFmcmFtZS5maWxlbmFtZSB8fCBmcmFtZS5tb2R1bGVfbWV0YWRhdGEpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gZ2V0TWV0YWRhdGFGb3JVcmwocGFyc2VyLCBmcmFtZS5maWxlbmFtZSk7XG5cbiAgICAgICAgaWYgKG1ldGFkYXRhKSB7XG4gICAgICAgICAgZnJhbWUubW9kdWxlX21ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge1xuICAgIC8vIFRvIHNhdmUgYnVuZGxlIHNpemUgd2UncmUganVzdCB0cnkgY2F0Y2hpbmcgaGVyZSBpbnN0ZWFkIG9mIGNoZWNraW5nIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFsbCB0aGUgZGlmZmVyZW50IG9iamVjdHMuXG4gIH1cbn1cblxuLyoqXG4gKiBTdHJpcHMgbWV0YWRhdGEgZnJvbSBzdGFjayBmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIHN0cmlwTWV0YWRhdGFGcm9tU3RhY2tGcmFtZXMoZXZlbnQpIHtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMuZm9yRWFjaChleGNlcHRpb24gPT4ge1xuICAgICAgaWYgKCFleGNlcHRpb24uc3RhY2t0cmFjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgZnJhbWUgb2YgZXhjZXB0aW9uLnN0YWNrdHJhY2UuZnJhbWVzIHx8IFtdKSB7XG4gICAgICAgIGRlbGV0ZSBmcmFtZS5tb2R1bGVfbWV0YWRhdGE7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICAvLyBUbyBzYXZlIGJ1bmRsZSBzaXplIHdlJ3JlIGp1c3QgdHJ5IGNhdGNoaW5nIGhlcmUgaW5zdGVhZCBvZiBjaGVja2luZyBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBhbGwgdGhlIGRpZmZlcmVudCBvYmplY3RzLlxuICB9XG59XG5cbmV4cG9ydHMuYWRkTWV0YWRhdGFUb1N0YWNrRnJhbWVzID0gYWRkTWV0YWRhdGFUb1N0YWNrRnJhbWVzO1xuZXhwb3J0cy5nZXRNZXRhZGF0YUZvclVybCA9IGdldE1ldGFkYXRhRm9yVXJsO1xuZXhwb3J0cy5zdHJpcE1ldGFkYXRhRnJvbVN0YWNrRnJhbWVzID0gc3RyaXBNZXRhZGF0YUZyb21TdGFja0ZyYW1lcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGFkYXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwid29ybGR3aWRlIiwicmVxdWlyZSIsImZpbGVuYW1lTWV0YWRhdGFNYXAiLCJNYXAiLCJwYXJzZWRTdGFja3MiLCJTZXQiLCJlbnN1cmVNZXRhZGF0YVN0YWNrc0FyZVBhcnNlZCIsInBhcnNlciIsIkdMT0JBTF9PQkoiLCJfc2VudHJ5TW9kdWxlTWV0YWRhdGEiLCJzdGFjayIsImtleXMiLCJtZXRhZGF0YSIsImhhcyIsImFkZCIsImZyYW1lcyIsImZyYW1lIiwicmV2ZXJzZSIsImZpbGVuYW1lIiwic2V0IiwiZ2V0TWV0YWRhdGFGb3JVcmwiLCJnZXQiLCJhZGRNZXRhZGF0YVRvU3RhY2tGcmFtZXMiLCJldmVudCIsImV4Y2VwdGlvbiIsInZhbHVlcyIsImZvckVhY2giLCJzdGFja3RyYWNlIiwibW9kdWxlX21ldGFkYXRhIiwiXyIsInN0cmlwTWV0YWRhdGFGcm9tU3RhY2tGcmFtZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metadata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/aggregator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/aggregator.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/envelope.js\");\nconst instance = __webpack_require__(/*! ./instance.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/instance.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js\");\n\n/**\n * A metrics aggregator that aggregates metrics in memory and flushes them periodically.\n */\nclass MetricsAggregator {\n  // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets\n  // when the aggregator is garbage collected.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n\n  // Different metrics have different weights. We use this to limit the number of metrics\n  // that we store in memory.\n\n  // We adjust the type here to add the `unref()` part, as setInterval can technically return a number or a NodeJS.Timer\n\n  // SDKs are required to shift the flush interval by random() * rollup_in_seconds.\n  // That shift is determined once per startup to create jittering.\n\n  // An SDK is required to perform force flushing ahead of scheduled time if the memory\n  // pressure is too high. There is no rule for this other than that SDKs should be tracking\n  // abstract aggregation complexity (eg: a counter only carries a single float, whereas a\n  // distribution is a float per emission).\n  //\n  // Force flush is used on either shutdown, flush() or when we exceed the max weight.\n\n  constructor(_client) {\n    this._client = _client;\n    this._buckets = new Map();\n    this._bucketsTotalWeight = 0;\n    this._interval = setInterval(() => this._flush(), constants.DEFAULT_FLUSH_INTERVAL);\n    if (this._interval.unref) {\n      this._interval.unref();\n    }\n    this._flushShift = Math.floor(Math.random() * constants.DEFAULT_FLUSH_INTERVAL / 1000);\n    this._forceFlush = false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  add(metricType, unsanitizedName, value, unsanitizedUnit = 'none', unsanitizedTags = {}, maybeFloatTimestamp = time.timestampInSeconds()) {\n    const timestamp = Math.floor(maybeFloatTimestamp);\n    const name = utils.sanitizeMetricKey(unsanitizedName);\n    const tags = utils.sanitizeTags(unsanitizedTags);\n    const unit = utils.sanitizeUnit(unsanitizedUnit);\n    const bucketKey = utils.getBucketKey(metricType, name, unit, tags);\n    let bucketItem = this._buckets.get(bucketKey);\n    // If this is a set metric, we need to calculate the delta from the previous weight.\n    const previousWeight = bucketItem && metricType === constants.SET_METRIC_TYPE ? bucketItem.metric.weight : 0;\n    if (bucketItem) {\n      bucketItem.metric.add(value);\n      // TODO(abhi): Do we need this check?\n      if (bucketItem.timestamp < timestamp) {\n        bucketItem.timestamp = timestamp;\n      }\n    } else {\n      bucketItem = {\n        // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.\n        metric: new instance.METRIC_MAP[metricType](value),\n        timestamp,\n        metricType,\n        name,\n        unit,\n        tags\n      };\n      this._buckets.set(bucketKey, bucketItem);\n    }\n\n    // If value is a string, it's a set metric so calculate the delta from the previous weight.\n    const val = typeof value === 'string' ? bucketItem.metric.weight - previousWeight : value;\n    spanUtils.updateMetricSummaryOnActiveSpan(metricType, name, val, unit, unsanitizedTags, bucketKey);\n\n    // We need to keep track of the total weight of the buckets so that we can\n    // flush them when we exceed the max weight.\n    this._bucketsTotalWeight += bucketItem.metric.weight;\n    if (this._bucketsTotalWeight >= constants.MAX_WEIGHT) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Flushes the current metrics to the transport via the transport.\n   */\n  flush() {\n    this._forceFlush = true;\n    this._flush();\n  }\n\n  /**\n   * Shuts down metrics aggregator and clears all metrics.\n   */\n  close() {\n    this._forceFlush = true;\n    clearInterval(this._interval);\n    this._flush();\n  }\n\n  /**\n   * Flushes the buckets according to the internal state of the aggregator.\n   * If it is a force flush, which happens on shutdown, it will flush all buckets.\n   * Otherwise, it will only flush buckets that are older than the flush interval,\n   * and according to the flush shift.\n   *\n   * This function mutates `_forceFlush` and `_bucketsTotalWeight` properties.\n   */\n  _flush() {\n    // TODO(@anonrig): Add Atomics for locking to avoid having force flush and regular flush\n    // running at the same time.\n    // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\n\n    // This path eliminates the need for checking for timestamps since we're forcing a flush.\n    // Remember to reset the flag, or it will always flush all metrics.\n    if (this._forceFlush) {\n      this._forceFlush = false;\n      this._bucketsTotalWeight = 0;\n      this._captureMetrics(this._buckets);\n      this._buckets.clear();\n      return;\n    }\n    const cutoffSeconds = Math.floor(time.timestampInSeconds()) - constants.DEFAULT_FLUSH_INTERVAL / 1000 - this._flushShift;\n    // TODO(@anonrig): Optimization opportunity.\n    // Convert this map to an array and store key in the bucketItem.\n    const flushedBuckets = new Map();\n    for (const [key, bucket] of this._buckets) {\n      if (bucket.timestamp <= cutoffSeconds) {\n        flushedBuckets.set(key, bucket);\n        this._bucketsTotalWeight -= bucket.metric.weight;\n      }\n    }\n    for (const [key] of flushedBuckets) {\n      this._buckets.delete(key);\n    }\n    this._captureMetrics(flushedBuckets);\n  }\n\n  /**\n   * Only captures a subset of the buckets passed to this function.\n   * @param flushedBuckets\n   */\n  _captureMetrics(flushedBuckets) {\n    if (flushedBuckets.size > 0) {\n      // TODO(@anonrig): Optimization opportunity.\n      // This copy operation can be avoided if we store the key in the bucketItem.\n      const buckets = Array.from(flushedBuckets).map(([, bucketItem]) => bucketItem);\n      envelope.captureAggregateMetrics(this._client, buckets);\n    }\n  }\n}\nexports.MetricsAggregator = MetricsAggregator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/aggregator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js\");\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/envelope.js\");\nconst instance = __webpack_require__(/*! ./instance.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/instance.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js\");\n\n/**\n * A simple metrics aggregator that aggregates metrics in memory and flushes them periodically.\n * Default flush interval is 5 seconds.\n *\n * @experimental This API is experimental and might change in the future.\n */\nclass BrowserMetricsAggregator {\n  // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets\n  // when the aggregator is garbage collected.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n\n  constructor(_client) {\n    this._client = _client;\n    this._buckets = new Map();\n    this._interval = setInterval(() => this.flush(), constants.DEFAULT_BROWSER_FLUSH_INTERVAL);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  add(metricType, unsanitizedName, value, unsanitizedUnit = 'none', unsanitizedTags = {}, maybeFloatTimestamp = time.timestampInSeconds()) {\n    const timestamp = Math.floor(maybeFloatTimestamp);\n    const name = utils.sanitizeMetricKey(unsanitizedName);\n    const tags = utils.sanitizeTags(unsanitizedTags);\n    const unit = utils.sanitizeUnit(unsanitizedUnit);\n    const bucketKey = utils.getBucketKey(metricType, name, unit, tags);\n    let bucketItem = this._buckets.get(bucketKey);\n    // If this is a set metric, we need to calculate the delta from the previous weight.\n    const previousWeight = bucketItem && metricType === constants.SET_METRIC_TYPE ? bucketItem.metric.weight : 0;\n    if (bucketItem) {\n      bucketItem.metric.add(value);\n      // TODO(abhi): Do we need this check?\n      if (bucketItem.timestamp < timestamp) {\n        bucketItem.timestamp = timestamp;\n      }\n    } else {\n      bucketItem = {\n        // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.\n        metric: new instance.METRIC_MAP[metricType](value),\n        timestamp,\n        metricType,\n        name,\n        unit,\n        tags\n      };\n      this._buckets.set(bucketKey, bucketItem);\n    }\n\n    // If value is a string, it's a set metric so calculate the delta from the previous weight.\n    const val = typeof value === 'string' ? bucketItem.metric.weight - previousWeight : value;\n    spanUtils.updateMetricSummaryOnActiveSpan(metricType, name, val, unit, unsanitizedTags, bucketKey);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  flush() {\n    // short circuit if buckets are empty.\n    if (this._buckets.size === 0) {\n      return;\n    }\n    const metricBuckets = Array.from(this._buckets.values());\n    envelope.captureAggregateMetrics(this._client, metricBuckets);\n    this._buckets.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  close() {\n    clearInterval(this._interval);\n    this.flush();\n  }\n}\nexports.BrowserMetricsAggregator = BrowserMetricsAggregator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst COUNTER_METRIC_TYPE = 'c';\nconst GAUGE_METRIC_TYPE = 'g';\nconst SET_METRIC_TYPE = 's';\nconst DISTRIBUTION_METRIC_TYPE = 'd';\n\n/**\n * This does not match spec in https://develop.sentry.dev/sdk/metrics\n * but was chosen to optimize for the most common case in browser environments.\n */\nconst DEFAULT_BROWSER_FLUSH_INTERVAL = 5000;\n\n/**\n * SDKs are required to bucket into 10 second intervals (rollup in seconds)\n * which is the current lower bound of metric accuracy.\n */\nconst DEFAULT_FLUSH_INTERVAL = 10000;\n\n/**\n * The maximum number of metrics that should be stored in memory.\n */\nconst MAX_WEIGHT = 10000;\nexports.COUNTER_METRIC_TYPE = COUNTER_METRIC_TYPE;\nexports.DEFAULT_BROWSER_FLUSH_INTERVAL = DEFAULT_BROWSER_FLUSH_INTERVAL;\nexports.DEFAULT_FLUSH_INTERVAL = DEFAULT_FLUSH_INTERVAL;\nexports.DISTRIBUTION_METRIC_TYPE = DISTRIBUTION_METRIC_TYPE;\nexports.GAUGE_METRIC_TYPE = GAUGE_METRIC_TYPE;\nexports.MAX_WEIGHT = MAX_WEIGHT;\nexports.SET_METRIC_TYPE = SET_METRIC_TYPE;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxtQkFBbUIsR0FBRyxHQUFHO0FBQy9CLE1BQU1DLGlCQUFpQixHQUFHLEdBQUc7QUFDN0IsTUFBTUMsZUFBZSxHQUFHLEdBQUc7QUFDM0IsTUFBTUMsd0JBQXdCLEdBQUcsR0FBRzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyw4QkFBOEIsR0FBRyxJQUFJOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLHNCQUFzQixHQUFHLEtBQUs7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFVBQVUsR0FBRyxLQUFLO0FBRXhCUiwyQkFBMkIsR0FBR0UsbUJBQW1CO0FBQ2pERixzQ0FBc0MsR0FBR00sOEJBQThCO0FBQ3ZFTiw4QkFBOEIsR0FBR08sc0JBQXNCO0FBQ3ZEUCxnQ0FBZ0MsR0FBR0ssd0JBQXdCO0FBQzNETCx5QkFBeUIsR0FBR0csaUJBQWlCO0FBQzdDSCxrQkFBa0IsR0FBR1EsVUFBVTtBQUMvQlIsdUJBQXVCLEdBQUdJLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9jb25zdGFudHMuanM/ZDcyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBDT1VOVEVSX01FVFJJQ19UWVBFID0gJ2MnIDtcbmNvbnN0IEdBVUdFX01FVFJJQ19UWVBFID0gJ2cnIDtcbmNvbnN0IFNFVF9NRVRSSUNfVFlQRSA9ICdzJyA7XG5jb25zdCBESVNUUklCVVRJT05fTUVUUklDX1RZUEUgPSAnZCcgO1xuXG4vKipcbiAqIFRoaXMgZG9lcyBub3QgbWF0Y2ggc3BlYyBpbiBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvbWV0cmljc1xuICogYnV0IHdhcyBjaG9zZW4gdG8gb3B0aW1pemUgZm9yIHRoZSBtb3N0IGNvbW1vbiBjYXNlIGluIGJyb3dzZXIgZW52aXJvbm1lbnRzLlxuICovXG5jb25zdCBERUZBVUxUX0JST1dTRVJfRkxVU0hfSU5URVJWQUwgPSA1MDAwO1xuXG4vKipcbiAqIFNES3MgYXJlIHJlcXVpcmVkIHRvIGJ1Y2tldCBpbnRvIDEwIHNlY29uZCBpbnRlcnZhbHMgKHJvbGx1cCBpbiBzZWNvbmRzKVxuICogd2hpY2ggaXMgdGhlIGN1cnJlbnQgbG93ZXIgYm91bmQgb2YgbWV0cmljIGFjY3VyYWN5LlxuICovXG5jb25zdCBERUZBVUxUX0ZMVVNIX0lOVEVSVkFMID0gMTAwMDA7XG5cbi8qKlxuICogVGhlIG1heGltdW0gbnVtYmVyIG9mIG1ldHJpY3MgdGhhdCBzaG91bGQgYmUgc3RvcmVkIGluIG1lbW9yeS5cbiAqL1xuY29uc3QgTUFYX1dFSUdIVCA9IDEwMDAwO1xuXG5leHBvcnRzLkNPVU5URVJfTUVUUklDX1RZUEUgPSBDT1VOVEVSX01FVFJJQ19UWVBFO1xuZXhwb3J0cy5ERUZBVUxUX0JST1dTRVJfRkxVU0hfSU5URVJWQUwgPSBERUZBVUxUX0JST1dTRVJfRkxVU0hfSU5URVJWQUw7XG5leHBvcnRzLkRFRkFVTFRfRkxVU0hfSU5URVJWQUwgPSBERUZBVUxUX0ZMVVNIX0lOVEVSVkFMO1xuZXhwb3J0cy5ESVNUUklCVVRJT05fTUVUUklDX1RZUEUgPSBESVNUUklCVVRJT05fTUVUUklDX1RZUEU7XG5leHBvcnRzLkdBVUdFX01FVFJJQ19UWVBFID0gR0FVR0VfTUVUUklDX1RZUEU7XG5leHBvcnRzLk1BWF9XRUlHSFQgPSBNQVhfV0VJR0hUO1xuZXhwb3J0cy5TRVRfTUVUUklDX1RZUEUgPSBTRVRfTUVUUklDX1RZUEU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDT1VOVEVSX01FVFJJQ19UWVBFIiwiR0FVR0VfTUVUUklDX1RZUEUiLCJTRVRfTUVUUklDX1RZUEUiLCJESVNUUklCVVRJT05fTUVUUklDX1RZUEUiLCJERUZBVUxUX0JST1dTRVJfRkxVU0hfSU5URVJWQUwiLCJERUZBVUxUX0ZMVVNIX0lOVEVSVkFMIiwiTUFYX1dFSUdIVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/envelope.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/envelope.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dsn = __webpack_require__(/*! ../utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js\");\n\n/**\n * Captures aggregated metrics to the supplied client.\n */\nfunction captureAggregateMetrics(client, metricBucketItems) {\n  logger.logger.log(`Flushing aggregated metrics, number of metrics: ${metricBucketItems.length}`);\n  const dsn = client.getDsn();\n  const metadata = client.getSdkMetadata();\n  const tunnel = client.getOptions().tunnel;\n  const metricsEnvelope = createMetricEnvelope(metricBucketItems, dsn, metadata, tunnel);\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(metricsEnvelope);\n}\n\n/**\n * Create envelope from a metric aggregate.\n */\nfunction createMetricEnvelope(metricBucketItems, dsn$1, metadata, tunnel) {\n  const headers = {\n    sent_at: new Date().toISOString()\n  };\n  if (metadata && metadata.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version\n    };\n  }\n  if (!!tunnel && dsn$1) {\n    headers.dsn = dsn.dsnToString(dsn$1);\n  }\n  const item = createMetricEnvelopeItem(metricBucketItems);\n  return envelope.createEnvelope(headers, [item]);\n}\nfunction createMetricEnvelopeItem(metricBucketItems) {\n  const payload = utils.serializeMetricBuckets(metricBucketItems);\n  const metricHeaders = {\n    type: 'statsd',\n    length: payload.length\n  };\n  return [metricHeaders, payload];\n}\nexports.captureAggregateMetrics = captureAggregateMetrics;\nexports.createMetricEnvelope = createMetricEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9lbnZlbG9wZS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLEdBQUcsR0FBR0MsbUJBQU8sQ0FBQyxvR0FBdUIsQ0FBQztBQUM1QyxNQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsOEdBQTRCLENBQUM7QUFDdEQsTUFBTUUsTUFBTSxHQUFHRixtQkFBTyxDQUFDLDBHQUEwQixDQUFDO0FBQ2xELE1BQU1HLEtBQUssR0FBR0gsbUJBQU8sQ0FBQyx1RkFBWSxDQUFDOztBQUVuQztBQUNBO0FBQ0E7QUFDQSxTQUFTSSx1QkFBdUJBLENBQUNDLE1BQU0sRUFBRUMsaUJBQWlCLEVBQUU7RUFDMURKLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDSyxHQUFHLENBQUUsbURBQWtERCxpQkFBaUIsQ0FBQ0UsTUFBTyxFQUFDLENBQUM7RUFDaEcsTUFBTVQsR0FBRyxHQUFHTSxNQUFNLENBQUNJLE1BQU0sQ0FBQyxDQUFDO0VBQzNCLE1BQU1DLFFBQVEsR0FBR0wsTUFBTSxDQUFDTSxjQUFjLENBQUMsQ0FBQztFQUN4QyxNQUFNQyxNQUFNLEdBQUdQLE1BQU0sQ0FBQ1EsVUFBVSxDQUFDLENBQUMsQ0FBQ0QsTUFBTTtFQUV6QyxNQUFNRSxlQUFlLEdBQUdDLG9CQUFvQixDQUFDVCxpQkFBaUIsRUFBRVAsR0FBRyxFQUFFVyxRQUFRLEVBQUVFLE1BQU0sQ0FBQzs7RUFFdEY7RUFDQTtFQUNBUCxNQUFNLENBQUNXLFlBQVksQ0FBQ0YsZUFBZSxDQUFDO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLG9CQUFvQkEsQ0FDM0JULGlCQUFpQixFQUNqQlcsS0FBSyxFQUNMUCxRQUFRLEVBQ1JFLE1BQU0sRUFDTjtFQUNBLE1BQU1NLE9BQU8sR0FBRztJQUNkQyxPQUFPLEVBQUUsSUFBSUMsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDO0VBQ2xDLENBQUM7RUFFRCxJQUFJWCxRQUFRLElBQUlBLFFBQVEsQ0FBQ1ksR0FBRyxFQUFFO0lBQzVCSixPQUFPLENBQUNJLEdBQUcsR0FBRztNQUNaQyxJQUFJLEVBQUViLFFBQVEsQ0FBQ1ksR0FBRyxDQUFDQyxJQUFJO01BQ3ZCQyxPQUFPLEVBQUVkLFFBQVEsQ0FBQ1ksR0FBRyxDQUFDRTtJQUN4QixDQUFDO0VBQ0g7RUFFQSxJQUFJLENBQUMsQ0FBQ1osTUFBTSxJQUFJSyxLQUFLLEVBQUU7SUFDckJDLE9BQU8sQ0FBQ25CLEdBQUcsR0FBR0EsR0FBRyxDQUFDMEIsV0FBVyxDQUFDUixLQUFLLENBQUM7RUFDdEM7RUFFQSxNQUFNUyxJQUFJLEdBQUdDLHdCQUF3QixDQUFDckIsaUJBQWlCLENBQUM7RUFDeEQsT0FBT0wsUUFBUSxDQUFDMkIsY0FBYyxDQUFDVixPQUFPLEVBQUUsQ0FBQ1EsSUFBSSxDQUFDLENBQUM7QUFDakQ7QUFFQSxTQUFTQyx3QkFBd0JBLENBQUNyQixpQkFBaUIsRUFBRTtFQUNuRCxNQUFNdUIsT0FBTyxHQUFHMUIsS0FBSyxDQUFDMkIsc0JBQXNCLENBQUN4QixpQkFBaUIsQ0FBQztFQUMvRCxNQUFNeUIsYUFBYSxHQUFHO0lBQ3BCQyxJQUFJLEVBQUUsUUFBUTtJQUNkeEIsTUFBTSxFQUFFcUIsT0FBTyxDQUFDckI7RUFDbEIsQ0FBQztFQUNELE9BQU8sQ0FBQ3VCLGFBQWEsRUFBRUYsT0FBTyxDQUFDO0FBQ2pDO0FBRUFoQywrQkFBK0IsR0FBR08sdUJBQXVCO0FBQ3pEUCw0QkFBNEIsR0FBR2tCLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9tZXRyaWNzL2VudmVsb3BlLmpzP2RlOWIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZHNuID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvZHNuLmpzJyk7XG5jb25zdCBlbnZlbG9wZSA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2VudmVsb3BlLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscy5qcycpO1xuXG4vKipcbiAqIENhcHR1cmVzIGFnZ3JlZ2F0ZWQgbWV0cmljcyB0byB0aGUgc3VwcGxpZWQgY2xpZW50LlxuICovXG5mdW5jdGlvbiBjYXB0dXJlQWdncmVnYXRlTWV0cmljcyhjbGllbnQsIG1ldHJpY0J1Y2tldEl0ZW1zKSB7XG4gIGxvZ2dlci5sb2dnZXIubG9nKGBGbHVzaGluZyBhZ2dyZWdhdGVkIG1ldHJpY3MsIG51bWJlciBvZiBtZXRyaWNzOiAke21ldHJpY0J1Y2tldEl0ZW1zLmxlbmd0aH1gKTtcbiAgY29uc3QgZHNuID0gY2xpZW50LmdldERzbigpO1xuICBjb25zdCBtZXRhZGF0YSA9IGNsaWVudC5nZXRTZGtNZXRhZGF0YSgpO1xuICBjb25zdCB0dW5uZWwgPSBjbGllbnQuZ2V0T3B0aW9ucygpLnR1bm5lbDtcblxuICBjb25zdCBtZXRyaWNzRW52ZWxvcGUgPSBjcmVhdGVNZXRyaWNFbnZlbG9wZShtZXRyaWNCdWNrZXRJdGVtcywgZHNuLCBtZXRhZGF0YSwgdHVubmVsKTtcblxuICAvLyBzZW5kRW52ZWxvcGUgc2hvdWxkIG5vdCB0aHJvd1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXG4gIGNsaWVudC5zZW5kRW52ZWxvcGUobWV0cmljc0VudmVsb3BlKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgZW52ZWxvcGUgZnJvbSBhIG1ldHJpYyBhZ2dyZWdhdGUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1ldHJpY0VudmVsb3BlKFxuICBtZXRyaWNCdWNrZXRJdGVtcyxcbiAgZHNuJDEsXG4gIG1ldGFkYXRhLFxuICB0dW5uZWwsXG4pIHtcbiAgY29uc3QgaGVhZGVycyA9IHtcbiAgICBzZW50X2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gIH07XG5cbiAgaWYgKG1ldGFkYXRhICYmIG1ldGFkYXRhLnNkaykge1xuICAgIGhlYWRlcnMuc2RrID0ge1xuICAgICAgbmFtZTogbWV0YWRhdGEuc2RrLm5hbWUsXG4gICAgICB2ZXJzaW9uOiBtZXRhZGF0YS5zZGsudmVyc2lvbixcbiAgICB9O1xuICB9XG5cbiAgaWYgKCEhdHVubmVsICYmIGRzbiQxKSB7XG4gICAgaGVhZGVycy5kc24gPSBkc24uZHNuVG9TdHJpbmcoZHNuJDEpO1xuICB9XG5cbiAgY29uc3QgaXRlbSA9IGNyZWF0ZU1ldHJpY0VudmVsb3BlSXRlbShtZXRyaWNCdWNrZXRJdGVtcyk7XG4gIHJldHVybiBlbnZlbG9wZS5jcmVhdGVFbnZlbG9wZShoZWFkZXJzLCBbaXRlbV0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNZXRyaWNFbnZlbG9wZUl0ZW0obWV0cmljQnVja2V0SXRlbXMpIHtcbiAgY29uc3QgcGF5bG9hZCA9IHV0aWxzLnNlcmlhbGl6ZU1ldHJpY0J1Y2tldHMobWV0cmljQnVja2V0SXRlbXMpO1xuICBjb25zdCBtZXRyaWNIZWFkZXJzID0ge1xuICAgIHR5cGU6ICdzdGF0c2QnLFxuICAgIGxlbmd0aDogcGF5bG9hZC5sZW5ndGgsXG4gIH07XG4gIHJldHVybiBbbWV0cmljSGVhZGVycywgcGF5bG9hZF07XG59XG5cbmV4cG9ydHMuY2FwdHVyZUFnZ3JlZ2F0ZU1ldHJpY3MgPSBjYXB0dXJlQWdncmVnYXRlTWV0cmljcztcbmV4cG9ydHMuY3JlYXRlTWV0cmljRW52ZWxvcGUgPSBjcmVhdGVNZXRyaWNFbnZlbG9wZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudmVsb3BlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZHNuIiwicmVxdWlyZSIsImVudmVsb3BlIiwibG9nZ2VyIiwidXRpbHMiLCJjYXB0dXJlQWdncmVnYXRlTWV0cmljcyIsImNsaWVudCIsIm1ldHJpY0J1Y2tldEl0ZW1zIiwibG9nIiwibGVuZ3RoIiwiZ2V0RHNuIiwibWV0YWRhdGEiLCJnZXRTZGtNZXRhZGF0YSIsInR1bm5lbCIsImdldE9wdGlvbnMiLCJtZXRyaWNzRW52ZWxvcGUiLCJjcmVhdGVNZXRyaWNFbnZlbG9wZSIsInNlbmRFbnZlbG9wZSIsImRzbiQxIiwiaGVhZGVycyIsInNlbnRfYXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzZGsiLCJuYW1lIiwidmVyc2lvbiIsImRzblRvU3RyaW5nIiwiaXRlbSIsImNyZWF0ZU1ldHJpY0VudmVsb3BlSXRlbSIsImNyZWF0ZUVudmVsb3BlIiwicGF5bG9hZCIsInNlcmlhbGl6ZU1ldHJpY0J1Y2tldHMiLCJtZXRyaWNIZWFkZXJzIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/envelope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports-default.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/exports-default.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst aggregator = __webpack_require__(/*! ./aggregator.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/aggregator.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports.js\");\n\n/**\n * Adds a value to a counter metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction increment(name, value = 1, data) {\n  // eslint-disable-next-line deprecation/deprecation\n  exports$1.metrics.increment(aggregator.MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a distribution metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction distribution(name, value, data) {\n  // eslint-disable-next-line deprecation/deprecation\n  exports$1.metrics.distribution(aggregator.MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a set metric. Value must be a string or integer.\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction set(name, value, data) {\n  // eslint-disable-next-line deprecation/deprecation\n  exports$1.metrics.set(aggregator.MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a value to a gauge metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction gauge(name, value, data) {\n  // eslint-disable-next-line deprecation/deprecation\n  exports$1.metrics.gauge(aggregator.MetricsAggregator, name, value, data);\n}\n\n/**\n * Adds a timing metric.\n * The metric is added as a distribution metric.\n *\n * You can either directly capture a numeric `value`, or wrap a callback function in `timing`.\n * In the latter case, the duration of the callback execution will be captured as a span & a metric.\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\n\nfunction timing(name, value, unit = 'second', data) {\n  // eslint-disable-next-line deprecation/deprecation\n  return exports$1.metrics.timing(aggregator.MetricsAggregator, name, value, unit, data);\n}\n\n/**\n * Returns the metrics aggregator for a given client.\n */\nfunction getMetricsAggregatorForClient(client) {\n  // eslint-disable-next-line deprecation/deprecation\n  return exports$1.metrics.getMetricsAggregatorForClient(client, aggregator.MetricsAggregator);\n}\n\n/**\n * The metrics API is used to capture custom metrics in Sentry.\n *\n * @deprecated The Sentry metrics beta has ended. This export will be removed in a future release.\n */\nconst metricsDefault = {\n  increment,\n  distribution,\n  set,\n  gauge,\n  timing,\n  /**\n   * @ignore This is for internal use only.\n   */\n  getMetricsAggregatorForClient\n};\nexports.metricsDefault = metricsDefault;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9leHBvcnRzLWRlZmF1bHQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxVQUFVLEdBQUdDLG1CQUFPLENBQUMsaUdBQWlCLENBQUM7QUFDN0MsTUFBTUMsU0FBUyxHQUFHRCxtQkFBTyxDQUFDLDJGQUFjLENBQUM7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxTQUFTQSxDQUFDQyxJQUFJLEVBQUVMLEtBQUssR0FBRyxDQUFDLEVBQUVNLElBQUksRUFBRTtFQUN4QztFQUNBSCxTQUFTLENBQUNJLE9BQU8sQ0FBQ0gsU0FBUyxDQUFDSCxVQUFVLENBQUNPLGlCQUFpQixFQUFFSCxJQUFJLEVBQUVMLEtBQUssRUFBRU0sSUFBSSxDQUFDO0FBQzlFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxZQUFZQSxDQUFDSixJQUFJLEVBQUVMLEtBQUssRUFBRU0sSUFBSSxFQUFFO0VBQ3ZDO0VBQ0FILFNBQVMsQ0FBQ0ksT0FBTyxDQUFDRSxZQUFZLENBQUNSLFVBQVUsQ0FBQ08saUJBQWlCLEVBQUVILElBQUksRUFBRUwsS0FBSyxFQUFFTSxJQUFJLENBQUM7QUFDakY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNJLEdBQUdBLENBQUNMLElBQUksRUFBRUwsS0FBSyxFQUFFTSxJQUFJLEVBQUU7RUFDOUI7RUFDQUgsU0FBUyxDQUFDSSxPQUFPLENBQUNHLEdBQUcsQ0FBQ1QsVUFBVSxDQUFDTyxpQkFBaUIsRUFBRUgsSUFBSSxFQUFFTCxLQUFLLEVBQUVNLElBQUksQ0FBQztBQUN4RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ssS0FBS0EsQ0FBQ04sSUFBSSxFQUFFTCxLQUFLLEVBQUVNLElBQUksRUFBRTtFQUNoQztFQUNBSCxTQUFTLENBQUNJLE9BQU8sQ0FBQ0ksS0FBSyxDQUFDVixVQUFVLENBQUNPLGlCQUFpQixFQUFFSCxJQUFJLEVBQUVMLEtBQUssRUFBRU0sSUFBSSxDQUFDO0FBQzFFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTTSxNQUFNQSxDQUNiUCxJQUFJLEVBQ0pMLEtBQUssRUFDTGEsSUFBSSxHQUFHLFFBQVEsRUFDZlAsSUFBSSxFQUNKO0VBQ0E7RUFDQSxPQUFPSCxTQUFTLENBQUNJLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDWCxVQUFVLENBQUNPLGlCQUFpQixFQUFFSCxJQUFJLEVBQUVMLEtBQUssRUFBRWEsSUFBSSxFQUFFUCxJQUFJLENBQUM7QUFDeEY7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU1EsNkJBQTZCQSxDQUFDQyxNQUFNLEVBQUU7RUFDN0M7RUFDQSxPQUFPWixTQUFTLENBQUNJLE9BQU8sQ0FBQ08sNkJBQTZCLENBQUNDLE1BQU0sRUFBRWQsVUFBVSxDQUFDTyxpQkFBaUIsQ0FBQztBQUM5Rjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTVEsY0FBYyxHQUVqQjtFQUNEWixTQUFTO0VBQ1RLLFlBQVk7RUFDWkMsR0FBRztFQUNIQyxLQUFLO0VBQ0xDLE1BQU07RUFDTjtBQUNGO0FBQ0E7RUFDRUU7QUFDRixDQUFDO0FBRURmLHNCQUFzQixHQUFHaUIsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9tZXRyaWNzL2V4cG9ydHMtZGVmYXVsdC5qcz8wNDRmIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGFnZ3JlZ2F0b3IgPSByZXF1aXJlKCcuL2FnZ3JlZ2F0b3IuanMnKTtcbmNvbnN0IGV4cG9ydHMkMSA9IHJlcXVpcmUoJy4vZXhwb3J0cy5qcycpO1xuXG4vKipcbiAqIEFkZHMgYSB2YWx1ZSB0byBhIGNvdW50ZXIgbWV0cmljXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhlIFNlbnRyeSBtZXRyaWNzIGJldGEgaGFzIGVuZGVkLiBUaGlzIG1ldGhvZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cbiAqL1xuZnVuY3Rpb24gaW5jcmVtZW50KG5hbWUsIHZhbHVlID0gMSwgZGF0YSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgZXhwb3J0cyQxLm1ldHJpY3MuaW5jcmVtZW50KGFnZ3JlZ2F0b3IuTWV0cmljc0FnZ3JlZ2F0b3IsIG5hbWUsIHZhbHVlLCBkYXRhKTtcbn1cblxuLyoqXG4gKiBBZGRzIGEgdmFsdWUgdG8gYSBkaXN0cmlidXRpb24gbWV0cmljXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhlIFNlbnRyeSBtZXRyaWNzIGJldGEgaGFzIGVuZGVkLiBUaGlzIG1ldGhvZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cbiAqL1xuZnVuY3Rpb24gZGlzdHJpYnV0aW9uKG5hbWUsIHZhbHVlLCBkYXRhKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICBleHBvcnRzJDEubWV0cmljcy5kaXN0cmlidXRpb24oYWdncmVnYXRvci5NZXRyaWNzQWdncmVnYXRvciwgbmFtZSwgdmFsdWUsIGRhdGEpO1xufVxuXG4vKipcbiAqIEFkZHMgYSB2YWx1ZSB0byBhIHNldCBtZXRyaWMuIFZhbHVlIG11c3QgYmUgYSBzdHJpbmcgb3IgaW50ZWdlci5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGUgU2VudHJ5IG1ldHJpY3MgYmV0YSBoYXMgZW5kZWQuIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuICovXG5mdW5jdGlvbiBzZXQobmFtZSwgdmFsdWUsIGRhdGEpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGV4cG9ydHMkMS5tZXRyaWNzLnNldChhZ2dyZWdhdG9yLk1ldHJpY3NBZ2dyZWdhdG9yLCBuYW1lLCB2YWx1ZSwgZGF0YSk7XG59XG5cbi8qKlxuICogQWRkcyBhIHZhbHVlIHRvIGEgZ2F1Z2UgbWV0cmljXG4gKlxuICogQGRlcHJlY2F0ZWQgVGhlIFNlbnRyeSBtZXRyaWNzIGJldGEgaGFzIGVuZGVkLiBUaGlzIG1ldGhvZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cbiAqL1xuZnVuY3Rpb24gZ2F1Z2UobmFtZSwgdmFsdWUsIGRhdGEpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGV4cG9ydHMkMS5tZXRyaWNzLmdhdWdlKGFnZ3JlZ2F0b3IuTWV0cmljc0FnZ3JlZ2F0b3IsIG5hbWUsIHZhbHVlLCBkYXRhKTtcbn1cblxuLyoqXG4gKiBBZGRzIGEgdGltaW5nIG1ldHJpYy5cbiAqIFRoZSBtZXRyaWMgaXMgYWRkZWQgYXMgYSBkaXN0cmlidXRpb24gbWV0cmljLlxuICpcbiAqIFlvdSBjYW4gZWl0aGVyIGRpcmVjdGx5IGNhcHR1cmUgYSBudW1lcmljIGB2YWx1ZWAsIG9yIHdyYXAgYSBjYWxsYmFjayBmdW5jdGlvbiBpbiBgdGltaW5nYC5cbiAqIEluIHRoZSBsYXR0ZXIgY2FzZSwgdGhlIGR1cmF0aW9uIG9mIHRoZSBjYWxsYmFjayBleGVjdXRpb24gd2lsbCBiZSBjYXB0dXJlZCBhcyBhIHNwYW4gJiBhIG1ldHJpYy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGUgU2VudHJ5IG1ldHJpY3MgYmV0YSBoYXMgZW5kZWQuIFRoaXMgbWV0aG9kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuICovXG5cbmZ1bmN0aW9uIHRpbWluZyhcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHVuaXQgPSAnc2Vjb25kJyxcbiAgZGF0YSxcbikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgcmV0dXJuIGV4cG9ydHMkMS5tZXRyaWNzLnRpbWluZyhhZ2dyZWdhdG9yLk1ldHJpY3NBZ2dyZWdhdG9yLCBuYW1lLCB2YWx1ZSwgdW5pdCwgZGF0YSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbWV0cmljcyBhZ2dyZWdhdG9yIGZvciBhIGdpdmVuIGNsaWVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWV0cmljc0FnZ3JlZ2F0b3JGb3JDbGllbnQoY2xpZW50KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICByZXR1cm4gZXhwb3J0cyQxLm1ldHJpY3MuZ2V0TWV0cmljc0FnZ3JlZ2F0b3JGb3JDbGllbnQoY2xpZW50LCBhZ2dyZWdhdG9yLk1ldHJpY3NBZ2dyZWdhdG9yKTtcbn1cblxuLyoqXG4gKiBUaGUgbWV0cmljcyBBUEkgaXMgdXNlZCB0byBjYXB0dXJlIGN1c3RvbSBtZXRyaWNzIGluIFNlbnRyeS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGUgU2VudHJ5IG1ldHJpY3MgYmV0YSBoYXMgZW5kZWQuIFRoaXMgZXhwb3J0IHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuICovXG5jb25zdCBtZXRyaWNzRGVmYXVsdFxuXG4gPSB7XG4gIGluY3JlbWVudCxcbiAgZGlzdHJpYnV0aW9uLFxuICBzZXQsXG4gIGdhdWdlLFxuICB0aW1pbmcsXG4gIC8qKlxuICAgKiBAaWdub3JlIFRoaXMgaXMgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgKi9cbiAgZ2V0TWV0cmljc0FnZ3JlZ2F0b3JGb3JDbGllbnQsXG59O1xuXG5leHBvcnRzLm1ldHJpY3NEZWZhdWx0ID0gbWV0cmljc0RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBvcnRzLWRlZmF1bHQuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhZ2dyZWdhdG9yIiwicmVxdWlyZSIsImV4cG9ydHMkMSIsImluY3JlbWVudCIsIm5hbWUiLCJkYXRhIiwibWV0cmljcyIsIk1ldHJpY3NBZ2dyZWdhdG9yIiwiZGlzdHJpYnV0aW9uIiwic2V0IiwiZ2F1Z2UiLCJ0aW1pbmciLCJ1bml0IiwiZ2V0TWV0cmljc0FnZ3JlZ2F0b3JGb3JDbGllbnQiLCJjbGllbnQiLCJtZXRyaWNzRGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports-default.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/exports.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\n__webpack_require__(/*! ../tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\nconst worldwide = __webpack_require__(/*! ../utils-hoist/worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n__webpack_require__(/*! ../utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst trace = __webpack_require__(/*! ../tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst handleCallbackErrors = __webpack_require__(/*! ../utils/handleCallbackErrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js\");\n\n/**\n * Gets the metrics aggregator for a given client.\n * @param client The client for which to get the metrics aggregator.\n * @param Aggregator Optional metrics aggregator class to use to create an aggregator if one does not exist.\n */\nfunction getMetricsAggregatorForClient(client, Aggregator) {\n  const globalMetricsAggregators = worldwide.getGlobalSingleton('globalMetricsAggregators', () => new WeakMap());\n  const aggregator = globalMetricsAggregators.get(client);\n  if (aggregator) {\n    return aggregator;\n  }\n  const newAggregator = new Aggregator(client);\n  client.on('flush', () => newAggregator.flush());\n  client.on('close', () => newAggregator.close());\n  globalMetricsAggregators.set(client, newAggregator);\n  return newAggregator;\n}\nfunction addToMetricsAggregator(Aggregator, metricType, name, value, data = {}) {\n  const client = data.client || currentScopes.getClient();\n  if (!client) {\n    return;\n  }\n  const span = spanUtils.getActiveSpan();\n  const rootSpan = span ? spanUtils.getRootSpan(span) : undefined;\n  const transactionName = rootSpan && spanUtils.spanToJSON(rootSpan).description;\n  const {\n    unit,\n    tags,\n    timestamp\n  } = data;\n  const {\n    release,\n    environment\n  } = client.getOptions();\n  const metricTags = {};\n  if (release) {\n    metricTags.release = release;\n  }\n  if (environment) {\n    metricTags.environment = environment;\n  }\n  if (transactionName) {\n    metricTags.transaction = transactionName;\n  }\n  debugBuild.DEBUG_BUILD && logger.logger.log(`Adding value of ${value} to ${metricType} metric ${name}`);\n  const aggregator = getMetricsAggregatorForClient(client, Aggregator);\n  aggregator.add(metricType, name, value, unit, {\n    ...metricTags,\n    ...tags\n  }, timestamp);\n}\n\n/**\n * Adds a value to a counter metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction increment(aggregator, name, value = 1, data) {\n  addToMetricsAggregator(aggregator, constants.COUNTER_METRIC_TYPE, name, ensureNumber(value), data);\n}\n\n/**\n * Adds a value to a distribution metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction distribution(aggregator, name, value, data) {\n  addToMetricsAggregator(aggregator, constants.DISTRIBUTION_METRIC_TYPE, name, ensureNumber(value), data);\n}\n\n/**\n * Adds a timing metric.\n * The metric is added as a distribution metric.\n *\n * You can either directly capture a numeric `value`, or wrap a callback function in `timing`.\n * In the latter case, the duration of the callback execution will be captured as a span & a metric.\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction timing(aggregator, name, value, unit = 'second', data) {\n  // callback form\n  if (typeof value === 'function') {\n    const startTime = time.timestampInSeconds();\n    return trace.startSpanManual({\n      op: 'metrics.timing',\n      name,\n      startTime,\n      onlyIfParent: true\n    }, span => {\n      return handleCallbackErrors.handleCallbackErrors(() => value(), () => {\n        // no special error handling necessary\n      }, () => {\n        const endTime = time.timestampInSeconds();\n        const timeDiff = endTime - startTime;\n        // eslint-disable-next-line deprecation/deprecation\n        distribution(aggregator, name, timeDiff, {\n          ...data,\n          unit: 'second'\n        });\n        span.end(endTime);\n      });\n    });\n  }\n\n  // value form\n  // eslint-disable-next-line deprecation/deprecation\n  distribution(aggregator, name, value, {\n    ...data,\n    unit\n  });\n}\n\n/**\n * Adds a value to a set metric. Value must be a string or integer.\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction set(aggregator, name, value, data) {\n  addToMetricsAggregator(aggregator, constants.SET_METRIC_TYPE, name, value, data);\n}\n\n/**\n * Adds a value to a gauge metric\n *\n * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.\n */\nfunction gauge(aggregator, name, value, data) {\n  addToMetricsAggregator(aggregator, constants.GAUGE_METRIC_TYPE, name, ensureNumber(value), data);\n}\n\n/**\n * The metrics API is used to capture custom metrics in Sentry.\n *\n * @deprecated The Sentry metrics beta has ended. This export will be removed in a future release.\n */\nconst metrics = {\n  increment,\n  distribution,\n  set,\n  gauge,\n  timing,\n  /**\n   * @ignore This is for internal use only.\n   */\n  getMetricsAggregatorForClient\n};\n\n// Although this is typed to be a number, we try to handle strings as well here\nfunction ensureNumber(number) {\n  return typeof number === 'string' ? parseInt(number) : number;\n}\nexports.metrics = metrics;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/exports.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/instance.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/instance.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/constants.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js\");\n\n/**\n * A metric instance representing a counter.\n */\nclass CounterMetric {\n  constructor(_value) {\n    this._value = _value;\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return 1;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._value += value;\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return `${this._value}`;\n  }\n}\n\n/**\n * A metric instance representing a gauge.\n */\nclass GaugeMetric {\n  constructor(value) {\n    this._last = value;\n    this._min = value;\n    this._max = value;\n    this._sum = value;\n    this._count = 1;\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return 5;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._last = value;\n    if (value < this._min) {\n      this._min = value;\n    }\n    if (value > this._max) {\n      this._max = value;\n    }\n    this._sum += value;\n    this._count++;\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return `${this._last}:${this._min}:${this._max}:${this._sum}:${this._count}`;\n  }\n}\n\n/**\n * A metric instance representing a distribution.\n */\nclass DistributionMetric {\n  constructor(first) {\n    this._value = [first];\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return this._value.length;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._value.push(value);\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return this._value.join(':');\n  }\n}\n\n/**\n * A metric instance representing a set.\n */\nclass SetMetric {\n  constructor(first) {\n    this.first = first;\n    this._value = new Set([first]);\n  }\n\n  /** @inheritDoc */\n  get weight() {\n    return this._value.size;\n  }\n\n  /** @inheritdoc */\n  add(value) {\n    this._value.add(value);\n  }\n\n  /** @inheritdoc */\n  toString() {\n    return Array.from(this._value).map(val => typeof val === 'string' ? utils.simpleHash(val) : val).join(':');\n  }\n}\nconst METRIC_MAP = {\n  [constants.COUNTER_METRIC_TYPE]: CounterMetric,\n  [constants.GAUGE_METRIC_TYPE]: GaugeMetric,\n  [constants.DISTRIBUTION_METRIC_TYPE]: DistributionMetric,\n  [constants.SET_METRIC_TYPE]: SetMetric\n};\nexports.CounterMetric = CounterMetric;\nexports.DistributionMetric = DistributionMetric;\nexports.GaugeMetric = GaugeMetric;\nexports.METRIC_MAP = METRIC_MAP;\nexports.SetMetric = SetMetric;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9pbnN0YW5jZS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQywrRkFBZ0IsQ0FBQztBQUMzQyxNQUFNQyxLQUFLLEdBQUdELG1CQUFPLENBQUMsdUZBQVksQ0FBQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0EsTUFBTUUsYUFBYSxDQUFFO0VBQ2xCQyxXQUFXQSxDQUFFQyxNQUFNLEVBQUU7SUFBQyxJQUFJLENBQUNBLE1BQU0sR0FBR0EsTUFBTTtFQUFDOztFQUU1QztFQUNDLElBQUlDLE1BQU1BLENBQUEsRUFBRztJQUNaLE9BQU8sQ0FBQztFQUNWOztFQUVBO0VBQ0NDLEdBQUdBLENBQUNSLEtBQUssRUFBRTtJQUNWLElBQUksQ0FBQ00sTUFBTSxJQUFJTixLQUFLO0VBQ3RCOztFQUVBO0VBQ0NTLFFBQVFBLENBQUEsRUFBRztJQUNWLE9BQVEsR0FBRSxJQUFJLENBQUNILE1BQU8sRUFBQztFQUN6QjtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU1JLFdBQVcsQ0FBRTtFQUVoQkwsV0FBV0EsQ0FBQ0wsS0FBSyxFQUFFO0lBQ2xCLElBQUksQ0FBQ1csS0FBSyxHQUFHWCxLQUFLO0lBQ2xCLElBQUksQ0FBQ1ksSUFBSSxHQUFHWixLQUFLO0lBQ2pCLElBQUksQ0FBQ2EsSUFBSSxHQUFHYixLQUFLO0lBQ2pCLElBQUksQ0FBQ2MsSUFBSSxHQUFHZCxLQUFLO0lBQ2pCLElBQUksQ0FBQ2UsTUFBTSxHQUFHLENBQUM7RUFDakI7O0VBRUE7RUFDQyxJQUFJUixNQUFNQSxDQUFBLEVBQUc7SUFDWixPQUFPLENBQUM7RUFDVjs7RUFFQTtFQUNDQyxHQUFHQSxDQUFDUixLQUFLLEVBQUU7SUFDVixJQUFJLENBQUNXLEtBQUssR0FBR1gsS0FBSztJQUNsQixJQUFJQSxLQUFLLEdBQUcsSUFBSSxDQUFDWSxJQUFJLEVBQUU7TUFDckIsSUFBSSxDQUFDQSxJQUFJLEdBQUdaLEtBQUs7SUFDbkI7SUFDQSxJQUFJQSxLQUFLLEdBQUcsSUFBSSxDQUFDYSxJQUFJLEVBQUU7TUFDckIsSUFBSSxDQUFDQSxJQUFJLEdBQUdiLEtBQUs7SUFDbkI7SUFDQSxJQUFJLENBQUNjLElBQUksSUFBSWQsS0FBSztJQUNsQixJQUFJLENBQUNlLE1BQU0sRUFBRTtFQUNmOztFQUVBO0VBQ0NOLFFBQVFBLENBQUEsRUFBRztJQUNWLE9BQVEsR0FBRSxJQUFJLENBQUNFLEtBQU0sSUFBRyxJQUFJLENBQUNDLElBQUssSUFBRyxJQUFJLENBQUNDLElBQUssSUFBRyxJQUFJLENBQUNDLElBQUssSUFBRyxJQUFJLENBQUNDLE1BQU8sRUFBQztFQUM5RTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGtCQUFrQixDQUFFO0VBRXZCWCxXQUFXQSxDQUFDWSxLQUFLLEVBQUU7SUFDbEIsSUFBSSxDQUFDWCxNQUFNLEdBQUcsQ0FBQ1csS0FBSyxDQUFDO0VBQ3ZCOztFQUVBO0VBQ0MsSUFBSVYsTUFBTUEsQ0FBQSxFQUFHO0lBQ1osT0FBTyxJQUFJLENBQUNELE1BQU0sQ0FBQ1ksTUFBTTtFQUMzQjs7RUFFQTtFQUNDVixHQUFHQSxDQUFDUixLQUFLLEVBQUU7SUFDVixJQUFJLENBQUNNLE1BQU0sQ0FBQ2EsSUFBSSxDQUFDbkIsS0FBSyxDQUFDO0VBQ3pCOztFQUVBO0VBQ0NTLFFBQVFBLENBQUEsRUFBRztJQUNWLE9BQU8sSUFBSSxDQUFDSCxNQUFNLENBQUNjLElBQUksQ0FBQyxHQUFHLENBQUM7RUFDOUI7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxTQUFTLENBQUU7RUFFZGhCLFdBQVdBLENBQUVZLEtBQUssRUFBRTtJQUFDLElBQUksQ0FBQ0EsS0FBSyxHQUFHQSxLQUFLO0lBQ3RDLElBQUksQ0FBQ1gsTUFBTSxHQUFHLElBQUlnQixHQUFHLENBQUMsQ0FBQ0wsS0FBSyxDQUFDLENBQUM7RUFDaEM7O0VBRUE7RUFDQyxJQUFJVixNQUFNQSxDQUFBLEVBQUc7SUFDWixPQUFPLElBQUksQ0FBQ0QsTUFBTSxDQUFDaUIsSUFBSTtFQUN6Qjs7RUFFQTtFQUNDZixHQUFHQSxDQUFDUixLQUFLLEVBQUU7SUFDVixJQUFJLENBQUNNLE1BQU0sQ0FBQ0UsR0FBRyxDQUFDUixLQUFLLENBQUM7RUFDeEI7O0VBRUE7RUFDQ1MsUUFBUUEsQ0FBQSxFQUFHO0lBQ1YsT0FBT2UsS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDbkIsTUFBTSxDQUFDLENBQzNCb0IsR0FBRyxDQUFDQyxHQUFHLElBQUssT0FBT0EsR0FBRyxLQUFLLFFBQVEsR0FBR3hCLEtBQUssQ0FBQ3lCLFVBQVUsQ0FBQ0QsR0FBRyxDQUFDLEdBQUdBLEdBQUksQ0FBQyxDQUNuRVAsSUFBSSxDQUFDLEdBQUcsQ0FBQztFQUNkO0FBQ0Y7QUFFQSxNQUFNUyxVQUFVLEdBQUc7RUFDakIsQ0FBQzVCLFNBQVMsQ0FBQzZCLG1CQUFtQixHQUFHMUIsYUFBYTtFQUM5QyxDQUFDSCxTQUFTLENBQUM4QixpQkFBaUIsR0FBR3JCLFdBQVc7RUFDMUMsQ0FBQ1QsU0FBUyxDQUFDK0Isd0JBQXdCLEdBQUdoQixrQkFBa0I7RUFDeEQsQ0FBQ2YsU0FBUyxDQUFDZ0MsZUFBZSxHQUFHWjtBQUMvQixDQUFDO0FBRUR0QixxQkFBcUIsR0FBR0ssYUFBYTtBQUNyQ0wsMEJBQTBCLEdBQUdpQixrQkFBa0I7QUFDL0NqQixtQkFBbUIsR0FBR1csV0FBVztBQUNqQ1gsa0JBQWtCLEdBQUc4QixVQUFVO0FBQy9COUIsaUJBQWlCLEdBQUdzQixTQUFTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL21ldHJpY3MvaW5zdGFuY2UuanM/M2Q4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cy5qcycpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XG5cbi8qKlxuICogQSBtZXRyaWMgaW5zdGFuY2UgcmVwcmVzZW50aW5nIGEgY291bnRlci5cbiAqL1xuY2xhc3MgQ291bnRlck1ldHJpYyAge1xuICAgY29uc3RydWN0b3IoIF92YWx1ZSkge3RoaXMuX3ZhbHVlID0gX3ZhbHVlO31cblxuICAvKiogQGluaGVyaXREb2MgKi9cbiAgIGdldCB3ZWlnaHQoKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGFkZCh2YWx1ZSkge1xuICAgIHRoaXMuX3ZhbHVlICs9IHZhbHVlO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5fdmFsdWV9YDtcbiAgfVxufVxuXG4vKipcbiAqIEEgbWV0cmljIGluc3RhbmNlIHJlcHJlc2VudGluZyBhIGdhdWdlLlxuICovXG5jbGFzcyBHYXVnZU1ldHJpYyAge1xuXG4gICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHRoaXMuX2xhc3QgPSB2YWx1ZTtcbiAgICB0aGlzLl9taW4gPSB2YWx1ZTtcbiAgICB0aGlzLl9tYXggPSB2YWx1ZTtcbiAgICB0aGlzLl9zdW0gPSB2YWx1ZTtcbiAgICB0aGlzLl9jb3VudCA9IDE7XG4gIH1cblxuICAvKiogQGluaGVyaXREb2MgKi9cbiAgIGdldCB3ZWlnaHQoKSB7XG4gICAgcmV0dXJuIDU7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGFkZCh2YWx1ZSkge1xuICAgIHRoaXMuX2xhc3QgPSB2YWx1ZTtcbiAgICBpZiAodmFsdWUgPCB0aGlzLl9taW4pIHtcbiAgICAgIHRoaXMuX21pbiA9IHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPiB0aGlzLl9tYXgpIHtcbiAgICAgIHRoaXMuX21heCA9IHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLl9zdW0gKz0gdmFsdWU7XG4gICAgdGhpcy5fY291bnQrKztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMuX2xhc3R9OiR7dGhpcy5fbWlufToke3RoaXMuX21heH06JHt0aGlzLl9zdW19OiR7dGhpcy5fY291bnR9YDtcbiAgfVxufVxuXG4vKipcbiAqIEEgbWV0cmljIGluc3RhbmNlIHJlcHJlc2VudGluZyBhIGRpc3RyaWJ1dGlvbi5cbiAqL1xuY2xhc3MgRGlzdHJpYnV0aW9uTWV0cmljICB7XG5cbiAgIGNvbnN0cnVjdG9yKGZpcnN0KSB7XG4gICAgdGhpcy5fdmFsdWUgPSBbZmlyc3RdO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0RG9jICovXG4gICBnZXQgd2VpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZS5sZW5ndGg7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGFkZCh2YWx1ZSkge1xuICAgIHRoaXMuX3ZhbHVlLnB1c2godmFsdWUpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUuam9pbignOicpO1xuICB9XG59XG5cbi8qKlxuICogQSBtZXRyaWMgaW5zdGFuY2UgcmVwcmVzZW50aW5nIGEgc2V0LlxuICovXG5jbGFzcyBTZXRNZXRyaWMgIHtcblxuICAgY29uc3RydWN0b3IoIGZpcnN0KSB7dGhpcy5maXJzdCA9IGZpcnN0O1xuICAgIHRoaXMuX3ZhbHVlID0gbmV3IFNldChbZmlyc3RdKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdERvYyAqL1xuICAgZ2V0IHdlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUuc2l6ZTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgYWRkKHZhbHVlKSB7XG4gICAgdGhpcy5fdmFsdWUuYWRkKHZhbHVlKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5fdmFsdWUpXG4gICAgICAubWFwKHZhbCA9PiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyB1dGlscy5zaW1wbGVIYXNoKHZhbCkgOiB2YWwpKVxuICAgICAgLmpvaW4oJzonKTtcbiAgfVxufVxuXG5jb25zdCBNRVRSSUNfTUFQID0ge1xuICBbY29uc3RhbnRzLkNPVU5URVJfTUVUUklDX1RZUEVdOiBDb3VudGVyTWV0cmljLFxuICBbY29uc3RhbnRzLkdBVUdFX01FVFJJQ19UWVBFXTogR2F1Z2VNZXRyaWMsXG4gIFtjb25zdGFudHMuRElTVFJJQlVUSU9OX01FVFJJQ19UWVBFXTogRGlzdHJpYnV0aW9uTWV0cmljLFxuICBbY29uc3RhbnRzLlNFVF9NRVRSSUNfVFlQRV06IFNldE1ldHJpYyxcbn07XG5cbmV4cG9ydHMuQ291bnRlck1ldHJpYyA9IENvdW50ZXJNZXRyaWM7XG5leHBvcnRzLkRpc3RyaWJ1dGlvbk1ldHJpYyA9IERpc3RyaWJ1dGlvbk1ldHJpYztcbmV4cG9ydHMuR2F1Z2VNZXRyaWMgPSBHYXVnZU1ldHJpYztcbmV4cG9ydHMuTUVUUklDX01BUCA9IE1FVFJJQ19NQVA7XG5leHBvcnRzLlNldE1ldHJpYyA9IFNldE1ldHJpYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RhbmNlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29uc3RhbnRzIiwicmVxdWlyZSIsInV0aWxzIiwiQ291bnRlck1ldHJpYyIsImNvbnN0cnVjdG9yIiwiX3ZhbHVlIiwid2VpZ2h0IiwiYWRkIiwidG9TdHJpbmciLCJHYXVnZU1ldHJpYyIsIl9sYXN0IiwiX21pbiIsIl9tYXgiLCJfc3VtIiwiX2NvdW50IiwiRGlzdHJpYnV0aW9uTWV0cmljIiwiZmlyc3QiLCJsZW5ndGgiLCJwdXNoIiwiam9pbiIsIlNldE1ldHJpYyIsIlNldCIsInNpemUiLCJBcnJheSIsImZyb20iLCJtYXAiLCJ2YWwiLCJzaW1wbGVIYXNoIiwiTUVUUklDX01BUCIsIkNPVU5URVJfTUVUUklDX1RZUEUiLCJHQVVHRV9NRVRSSUNfVFlQRSIsIkRJU1RSSUJVVElPTl9NRVRSSUNfVFlQRSIsIlNFVF9NRVRSSUNfVFlQRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/instance.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * key: bucketKey\n * value: [exportKey, MetricSummary]\n */\n\nconst METRICS_SPAN_FIELD = '_sentryMetrics';\n\n/**\n * Fetches the metric summary if it exists for the passed span\n */\nfunction getMetricSummaryJsonForSpan(span) {\n  const storage = span[METRICS_SPAN_FIELD];\n  if (!storage) {\n    return undefined;\n  }\n  const output = {};\n  for (const [, [exportKey, summary]] of storage) {\n    const arr = output[exportKey] || (output[exportKey] = []);\n    arr.push(object.dropUndefinedKeys(summary));\n  }\n  return output;\n}\n\n/**\n * Updates the metric summary on a span.\n */\nfunction updateMetricSummaryOnSpan(span, metricType, sanitizedName, value, unit, tags, bucketKey) {\n  const existingStorage = span[METRICS_SPAN_FIELD];\n  const storage = existingStorage || (span[METRICS_SPAN_FIELD] = new Map());\n  const exportKey = `${metricType}:${sanitizedName}@${unit}`;\n  const bucketItem = storage.get(bucketKey);\n  if (bucketItem) {\n    const [, summary] = bucketItem;\n    storage.set(bucketKey, [exportKey, {\n      min: Math.min(summary.min, value),\n      max: Math.max(summary.max, value),\n      count: summary.count += 1,\n      sum: summary.sum += value,\n      tags: summary.tags\n    }]);\n  } else {\n    storage.set(bucketKey, [exportKey, {\n      min: value,\n      max: value,\n      count: 1,\n      sum: value,\n      tags\n    }]);\n  }\n}\nexports.getMetricSummaryJsonForSpan = getMetricSummaryJsonForSpan;\nexports.updateMetricSummaryOnSpan = updateMetricSummaryOnSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9tZXRyaWMtc3VtbWFyeS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQzs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUMsa0JBQWtCLEdBQUcsZ0JBQWdCOztBQUUzQztBQUNBO0FBQ0E7QUFDQSxTQUFTQywyQkFBMkJBLENBQUNDLElBQUksRUFBRTtFQUN6QyxNQUFNQyxPQUFPLEdBQUlELElBQUksQ0FBR0Ysa0JBQWtCLENBQUM7RUFFM0MsSUFBSSxDQUFDRyxPQUFPLEVBQUU7SUFDWixPQUFPQyxTQUFTO0VBQ2xCO0VBQ0EsTUFBTUMsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUVqQixLQUFLLE1BQU0sR0FBRyxDQUFDQyxTQUFTLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLElBQUlKLE9BQU8sRUFBRTtJQUM5QyxNQUFNSyxHQUFHLEdBQUdILE1BQU0sQ0FBQ0MsU0FBUyxDQUFDLEtBQUtELE1BQU0sQ0FBQ0MsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3pERSxHQUFHLENBQUNDLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxpQkFBaUIsQ0FBQ0gsT0FBTyxDQUFDLENBQUM7RUFDN0M7RUFFQSxPQUFPRixNQUFNO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU00seUJBQXlCQSxDQUNoQ1QsSUFBSSxFQUNKVSxVQUFVLEVBQ1ZDLGFBQWEsRUFDYmhCLEtBQUssRUFDTGlCLElBQUksRUFDSkMsSUFBSSxFQUNKQyxTQUFTLEVBQ1Q7RUFDQSxNQUFNQyxlQUFlLEdBQUlmLElBQUksQ0FBR0Ysa0JBQWtCLENBQUM7RUFDbkQsTUFBTUcsT0FBTyxHQUNYYyxlQUFlLEtBQ2JmLElBQUksQ0FBR0Ysa0JBQWtCLENBQUMsR0FBRyxJQUFJa0IsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUUzQyxNQUFNWixTQUFTLEdBQUksR0FBRU0sVUFBVyxJQUFHQyxhQUFjLElBQUdDLElBQUssRUFBQztFQUMxRCxNQUFNSyxVQUFVLEdBQUdoQixPQUFPLENBQUNpQixHQUFHLENBQUNKLFNBQVMsQ0FBQztFQUV6QyxJQUFJRyxVQUFVLEVBQUU7SUFDZCxNQUFNLEdBQUdaLE9BQU8sQ0FBQyxHQUFHWSxVQUFVO0lBQzlCaEIsT0FBTyxDQUFDa0IsR0FBRyxDQUFDTCxTQUFTLEVBQUUsQ0FDckJWLFNBQVMsRUFDVDtNQUNFZ0IsR0FBRyxFQUFFQyxJQUFJLENBQUNELEdBQUcsQ0FBQ2YsT0FBTyxDQUFDZSxHQUFHLEVBQUV6QixLQUFLLENBQUM7TUFDakMyQixHQUFHLEVBQUVELElBQUksQ0FBQ0MsR0FBRyxDQUFDakIsT0FBTyxDQUFDaUIsR0FBRyxFQUFFM0IsS0FBSyxDQUFDO01BQ2pDNEIsS0FBSyxFQUFHbEIsT0FBTyxDQUFDa0IsS0FBSyxJQUFJLENBQUU7TUFDM0JDLEdBQUcsRUFBR25CLE9BQU8sQ0FBQ21CLEdBQUcsSUFBSTdCLEtBQU07TUFDM0JrQixJQUFJLEVBQUVSLE9BQU8sQ0FBQ1E7SUFDaEIsQ0FBQyxDQUNGLENBQUM7RUFDSixDQUFDLE1BQU07SUFDTFosT0FBTyxDQUFDa0IsR0FBRyxDQUFDTCxTQUFTLEVBQUUsQ0FDckJWLFNBQVMsRUFDVDtNQUNFZ0IsR0FBRyxFQUFFekIsS0FBSztNQUNWMkIsR0FBRyxFQUFFM0IsS0FBSztNQUNWNEIsS0FBSyxFQUFFLENBQUM7TUFDUkMsR0FBRyxFQUFFN0IsS0FBSztNQUNWa0I7SUFDRixDQUFDLENBQ0YsQ0FBQztFQUNKO0FBQ0Y7QUFFQW5CLG1DQUFtQyxHQUFHSywyQkFBMkI7QUFDakVMLGlDQUFpQyxHQUFHZSx5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvbWV0cmljcy9tZXRyaWMtc3VtbWFyeS5qcz8wNDFiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L29iamVjdC5qcycpO1xuXG4vKipcbiAqIGtleTogYnVja2V0S2V5XG4gKiB2YWx1ZTogW2V4cG9ydEtleSwgTWV0cmljU3VtbWFyeV1cbiAqL1xuXG5jb25zdCBNRVRSSUNTX1NQQU5fRklFTEQgPSAnX3NlbnRyeU1ldHJpY3MnO1xuXG4vKipcbiAqIEZldGNoZXMgdGhlIG1ldHJpYyBzdW1tYXJ5IGlmIGl0IGV4aXN0cyBmb3IgdGhlIHBhc3NlZCBzcGFuXG4gKi9cbmZ1bmN0aW9uIGdldE1ldHJpY1N1bW1hcnlKc29uRm9yU3BhbihzcGFuKSB7XG4gIGNvbnN0IHN0b3JhZ2UgPSAoc3BhbiApW01FVFJJQ1NfU1BBTl9GSUVMRF07XG5cbiAgaWYgKCFzdG9yYWdlKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBjb25zdCBvdXRwdXQgPSB7fTtcblxuICBmb3IgKGNvbnN0IFssIFtleHBvcnRLZXksIHN1bW1hcnldXSBvZiBzdG9yYWdlKSB7XG4gICAgY29uc3QgYXJyID0gb3V0cHV0W2V4cG9ydEtleV0gfHwgKG91dHB1dFtleHBvcnRLZXldID0gW10pO1xuICAgIGFyci5wdXNoKG9iamVjdC5kcm9wVW5kZWZpbmVkS2V5cyhzdW1tYXJ5KSk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIG1ldHJpYyBzdW1tYXJ5IG9uIGEgc3Bhbi5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlTWV0cmljU3VtbWFyeU9uU3BhbihcbiAgc3BhbixcbiAgbWV0cmljVHlwZSxcbiAgc2FuaXRpemVkTmFtZSxcbiAgdmFsdWUsXG4gIHVuaXQsXG4gIHRhZ3MsXG4gIGJ1Y2tldEtleSxcbikge1xuICBjb25zdCBleGlzdGluZ1N0b3JhZ2UgPSAoc3BhbiApW01FVFJJQ1NfU1BBTl9GSUVMRF07XG4gIGNvbnN0IHN0b3JhZ2UgPVxuICAgIGV4aXN0aW5nU3RvcmFnZSB8fFxuICAgICgoc3BhbiApW01FVFJJQ1NfU1BBTl9GSUVMRF0gPSBuZXcgTWFwKCkpO1xuXG4gIGNvbnN0IGV4cG9ydEtleSA9IGAke21ldHJpY1R5cGV9OiR7c2FuaXRpemVkTmFtZX1AJHt1bml0fWA7XG4gIGNvbnN0IGJ1Y2tldEl0ZW0gPSBzdG9yYWdlLmdldChidWNrZXRLZXkpO1xuXG4gIGlmIChidWNrZXRJdGVtKSB7XG4gICAgY29uc3QgWywgc3VtbWFyeV0gPSBidWNrZXRJdGVtO1xuICAgIHN0b3JhZ2Uuc2V0KGJ1Y2tldEtleSwgW1xuICAgICAgZXhwb3J0S2V5LFxuICAgICAge1xuICAgICAgICBtaW46IE1hdGgubWluKHN1bW1hcnkubWluLCB2YWx1ZSksXG4gICAgICAgIG1heDogTWF0aC5tYXgoc3VtbWFyeS5tYXgsIHZhbHVlKSxcbiAgICAgICAgY291bnQ6IChzdW1tYXJ5LmNvdW50ICs9IDEpLFxuICAgICAgICBzdW06IChzdW1tYXJ5LnN1bSArPSB2YWx1ZSksXG4gICAgICAgIHRhZ3M6IHN1bW1hcnkudGFncyxcbiAgICAgIH0sXG4gICAgXSk7XG4gIH0gZWxzZSB7XG4gICAgc3RvcmFnZS5zZXQoYnVja2V0S2V5LCBbXG4gICAgICBleHBvcnRLZXksXG4gICAgICB7XG4gICAgICAgIG1pbjogdmFsdWUsXG4gICAgICAgIG1heDogdmFsdWUsXG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBzdW06IHZhbHVlLFxuICAgICAgICB0YWdzLFxuICAgICAgfSxcbiAgICBdKTtcbiAgfVxufVxuXG5leHBvcnRzLmdldE1ldHJpY1N1bW1hcnlKc29uRm9yU3BhbiA9IGdldE1ldHJpY1N1bW1hcnlKc29uRm9yU3BhbjtcbmV4cG9ydHMudXBkYXRlTWV0cmljU3VtbWFyeU9uU3BhbiA9IHVwZGF0ZU1ldHJpY1N1bW1hcnlPblNwYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRyaWMtc3VtbWFyeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm9iamVjdCIsInJlcXVpcmUiLCJNRVRSSUNTX1NQQU5fRklFTEQiLCJnZXRNZXRyaWNTdW1tYXJ5SnNvbkZvclNwYW4iLCJzcGFuIiwic3RvcmFnZSIsInVuZGVmaW5lZCIsIm91dHB1dCIsImV4cG9ydEtleSIsInN1bW1hcnkiLCJhcnIiLCJwdXNoIiwiZHJvcFVuZGVmaW5lZEtleXMiLCJ1cGRhdGVNZXRyaWNTdW1tYXJ5T25TcGFuIiwibWV0cmljVHlwZSIsInNhbml0aXplZE5hbWUiLCJ1bml0IiwidGFncyIsImJ1Y2tldEtleSIsImV4aXN0aW5nU3RvcmFnZSIsIk1hcCIsImJ1Y2tldEl0ZW0iLCJnZXQiLCJzZXQiLCJtaW4iLCJNYXRoIiwibWF4IiwiY291bnQiLCJzdW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/metrics/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * Generate bucket key from metric properties.\n */\nfunction getBucketKey(metricType, name, unit, tags) {\n  const stringifiedTags = Object.entries(object.dropUndefinedKeys(tags)).sort((a, b) => a[0].localeCompare(b[0]));\n  return `${metricType}${name}${unit}${stringifiedTags}`;\n}\n\n/* eslint-disable no-bitwise */\n/**\n * Simple hash function for strings.\n */\nfunction simpleHash(s) {\n  let rv = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n    rv = (rv << 5) - rv + c;\n    rv &= rv;\n  }\n  return rv >>> 0;\n}\n/* eslint-enable no-bitwise */\n\n/**\n * Serialize metrics buckets into a string based on statsd format.\n *\n * Example of format:\n * metric.name@second:1:1.2|d|#a:value,b:anothervalue|T12345677\n * Segments:\n * name: metric.name\n * unit: second\n * value: [1, 1.2]\n * type of metric: d (distribution)\n * tags: { a: value, b: anothervalue }\n * timestamp: 12345677\n */\nfunction serializeMetricBuckets(metricBucketItems) {\n  let out = '';\n  for (const item of metricBucketItems) {\n    const tagEntries = Object.entries(item.tags);\n    const maybeTags = tagEntries.length > 0 ? `|#${tagEntries.map(([key, value]) => `${key}:${value}`).join(',')}` : '';\n    out += `${item.name}@${item.unit}:${item.metric}|${item.metricType}${maybeTags}|T${item.timestamp}\\n`;\n  }\n  return out;\n}\n\n/**\n * Sanitizes units\n *\n * These Regex's are straight from the normalisation docs:\n * https://develop.sentry.dev/sdk/metrics/#normalization\n */\nfunction sanitizeUnit(unit) {\n  return unit.replace(/[^\\w]+/gi, '_');\n}\n\n/**\n * Sanitizes metric keys\n *\n * These Regex's are straight from the normalisation docs:\n * https://develop.sentry.dev/sdk/metrics/#normalization\n */\nfunction sanitizeMetricKey(key) {\n  return key.replace(/[^\\w\\-.]+/gi, '_');\n}\n\n/**\n * Sanitizes metric keys\n *\n * These Regex's are straight from the normalisation docs:\n * https://develop.sentry.dev/sdk/metrics/#normalization\n */\nfunction sanitizeTagKey(key) {\n  return key.replace(/[^\\w\\-./]+/gi, '');\n}\n\n/**\n * These Regex's are straight from the normalisation docs:\n * https://develop.sentry.dev/sdk/metrics/#normalization\n */\nconst tagValueReplacements = [['\\n', '\\\\n'], ['\\r', '\\\\r'], ['\\t', '\\\\t'], ['\\\\', '\\\\\\\\'], ['|', '\\\\u{7c}'], [',', '\\\\u{2c}']];\nfunction getCharOrReplacement(input) {\n  for (const [search, replacement] of tagValueReplacements) {\n    if (input === search) {\n      return replacement;\n    }\n  }\n  return input;\n}\nfunction sanitizeTagValue(value) {\n  return [...value].reduce((acc, char) => acc + getCharOrReplacement(char), '');\n}\n\n/**\n * Sanitizes tags.\n */\nfunction sanitizeTags(unsanitizedTags) {\n  const tags = {};\n  for (const key in unsanitizedTags) {\n    if (Object.prototype.hasOwnProperty.call(unsanitizedTags, key)) {\n      const sanitizedKey = sanitizeTagKey(key);\n      tags[sanitizedKey] = sanitizeTagValue(String(unsanitizedTags[key]));\n    }\n  }\n  return tags;\n}\nexports.getBucketKey = getBucketKey;\nexports.sanitizeMetricKey = sanitizeMetricKey;\nexports.sanitizeTags = sanitizeTags;\nexports.sanitizeUnit = sanitizeUnit;\nexports.serializeMetricBuckets = serializeMetricBuckets;\nexports.simpleHash = simpleHash;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/metrics/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/profiling.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/profiling.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nfunction isProfilingIntegrationWithProfiler(integration) {\n  return !!integration && typeof integration['_profiler'] !== 'undefined' && typeof integration['_profiler']['start'] === 'function' && typeof integration['_profiler']['stop'] === 'function';\n}\n/**\n * Starts the Sentry continuous profiler.\n * This mode is exclusive with the transaction profiler and will only work if the profilesSampleRate is set to a falsy value.\n * In continuous profiling mode, the profiler will keep reporting profile chunks to Sentry until it is stopped, which allows for continuous profiling of the application.\n */\nfunction startProfiler() {\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n  const integration = client.getIntegrationByName('ProfilingIntegration');\n  if (!integration) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('ProfilingIntegration is not available');\n    return;\n  }\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n  integration._profiler.start();\n}\n\n/**\n * Stops the Sentry continuous profiler.\n * Calls to stop will stop the profiler and flush the currently collected profile data to Sentry.\n */\nfunction stopProfiler() {\n  const client = currentScopes.getClient();\n  if (!client) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n  const integration = client.getIntegrationByName('ProfilingIntegration');\n  if (!integration) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('ProfilingIntegration is not available');\n    return;\n  }\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n  integration._profiler.stop();\n}\nconst profiler = {\n  startProfiler,\n  stopProfiler\n};\nexports.profiler = profiler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvcHJvZmlsaW5nLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLCtGQUFvQixDQUFDO0FBQ25ELE1BQU1DLFVBQVUsR0FBR0QsbUJBQU8sQ0FBQywyRkFBa0IsQ0FBQztBQUM5QyxNQUFNRSxNQUFNLEdBQUdGLG1CQUFPLENBQUMseUdBQXlCLENBQUM7QUFFakQsU0FBU0csa0NBQWtDQSxDQUN6Q0MsV0FBVyxFQUNYO0VBQ0EsT0FDRSxDQUFDLENBQUNBLFdBQVcsSUFDYixPQUFPQSxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssV0FBVyxJQUMvQyxPQUFPQSxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssVUFBVSxJQUN2RCxPQUFPQSxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssVUFBVTtBQUUxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxhQUFhQSxDQUFBLEVBQUc7RUFDdkIsTUFBTUMsTUFBTSxHQUFHUCxhQUFhLENBQUNRLFNBQVMsQ0FBQyxDQUFDO0VBQ3hDLElBQUksQ0FBQ0QsTUFBTSxFQUFFO0lBQ1hMLFVBQVUsQ0FBQ08sV0FBVyxJQUFJTixNQUFNLENBQUNBLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0lBQ3BHO0VBQ0Y7RUFFQSxNQUFNTCxXQUFXLEdBQUdFLE1BQU0sQ0FBQ0ksb0JBQW9CLENBQUMsc0JBQXNCLENBQUM7RUFFdkUsSUFBSSxDQUFDTixXQUFXLEVBQUU7SUFDaEJILFVBQVUsQ0FBQ08sV0FBVyxJQUFJTixNQUFNLENBQUNBLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLHVDQUF1QyxDQUFDO0lBQ3JGO0VBQ0Y7RUFFQSxJQUFJLENBQUNOLGtDQUFrQyxDQUFDQyxXQUFXLENBQUMsRUFBRTtJQUNwREgsVUFBVSxDQUFDTyxXQUFXLElBQUlOLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDTyxJQUFJLENBQUMscURBQXFELENBQUM7SUFDbkc7RUFDRjtFQUVBTCxXQUFXLENBQUNPLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLENBQUM7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxZQUFZQSxDQUFBLEVBQUc7RUFDdEIsTUFBTVAsTUFBTSxHQUFHUCxhQUFhLENBQUNRLFNBQVMsQ0FBQyxDQUFDO0VBQ3hDLElBQUksQ0FBQ0QsTUFBTSxFQUFFO0lBQ1hMLFVBQVUsQ0FBQ08sV0FBVyxJQUFJTixNQUFNLENBQUNBLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0lBQ3BHO0VBQ0Y7RUFFQSxNQUFNTCxXQUFXLEdBQUdFLE1BQU0sQ0FBQ0ksb0JBQW9CLENBQUMsc0JBQXNCLENBQUM7RUFDdkUsSUFBSSxDQUFDTixXQUFXLEVBQUU7SUFDaEJILFVBQVUsQ0FBQ08sV0FBVyxJQUFJTixNQUFNLENBQUNBLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLHVDQUF1QyxDQUFDO0lBQ3JGO0VBQ0Y7RUFFQSxJQUFJLENBQUNOLGtDQUFrQyxDQUFDQyxXQUFXLENBQUMsRUFBRTtJQUNwREgsVUFBVSxDQUFDTyxXQUFXLElBQUlOLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDTyxJQUFJLENBQUMscURBQXFELENBQUM7SUFDbkc7RUFDRjtFQUVBTCxXQUFXLENBQUNPLFNBQVMsQ0FBQ0csSUFBSSxDQUFDLENBQUM7QUFDOUI7QUFFQSxNQUFNQyxRQUFRLEdBQUc7RUFDZlYsYUFBYTtFQUNiUTtBQUNGLENBQUM7QUFFRGhCLGdCQUFnQixHQUFHa0IsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9wcm9maWxpbmcuanM/ZjE4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi9jdXJyZW50U2NvcGVzLmpzJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi91dGlscy1ob2lzdC9sb2dnZXIuanMnKTtcblxuZnVuY3Rpb24gaXNQcm9maWxpbmdJbnRlZ3JhdGlvbldpdGhQcm9maWxlcihcbiAgaW50ZWdyYXRpb24sXG4pIHtcbiAgcmV0dXJuIChcbiAgICAhIWludGVncmF0aW9uICYmXG4gICAgdHlwZW9mIGludGVncmF0aW9uWydfcHJvZmlsZXInXSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgaW50ZWdyYXRpb25bJ19wcm9maWxlciddWydzdGFydCddID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIGludGVncmF0aW9uWydfcHJvZmlsZXInXVsnc3RvcCddID09PSAnZnVuY3Rpb24nXG4gICk7XG59XG4vKipcbiAqIFN0YXJ0cyB0aGUgU2VudHJ5IGNvbnRpbnVvdXMgcHJvZmlsZXIuXG4gKiBUaGlzIG1vZGUgaXMgZXhjbHVzaXZlIHdpdGggdGhlIHRyYW5zYWN0aW9uIHByb2ZpbGVyIGFuZCB3aWxsIG9ubHkgd29yayBpZiB0aGUgcHJvZmlsZXNTYW1wbGVSYXRlIGlzIHNldCB0byBhIGZhbHN5IHZhbHVlLlxuICogSW4gY29udGludW91cyBwcm9maWxpbmcgbW9kZSwgdGhlIHByb2ZpbGVyIHdpbGwga2VlcCByZXBvcnRpbmcgcHJvZmlsZSBjaHVua3MgdG8gU2VudHJ5IHVudGlsIGl0IGlzIHN0b3BwZWQsIHdoaWNoIGFsbG93cyBmb3IgY29udGludW91cyBwcm9maWxpbmcgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICovXG5mdW5jdGlvbiBzdGFydFByb2ZpbGVyKCkge1xuICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuICBpZiAoIWNsaWVudCkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZ2dlci53YXJuKCdObyBTZW50cnkgY2xpZW50IGF2YWlsYWJsZSwgcHJvZmlsaW5nIGlzIG5vdCBzdGFydGVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaW50ZWdyYXRpb24gPSBjbGllbnQuZ2V0SW50ZWdyYXRpb25CeU5hbWUoJ1Byb2ZpbGluZ0ludGVncmF0aW9uJyk7XG5cbiAgaWYgKCFpbnRlZ3JhdGlvbikge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZ2dlci53YXJuKCdQcm9maWxpbmdJbnRlZ3JhdGlvbiBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFpc1Byb2ZpbGluZ0ludGVncmF0aW9uV2l0aFByb2ZpbGVyKGludGVncmF0aW9uKSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZ2dlci53YXJuKCdQcm9maWxlciBpcyBub3QgYXZhaWxhYmxlIG9uIHByb2ZpbGluZyBpbnRlZ3JhdGlvbi4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpbnRlZ3JhdGlvbi5fcHJvZmlsZXIuc3RhcnQoKTtcbn1cblxuLyoqXG4gKiBTdG9wcyB0aGUgU2VudHJ5IGNvbnRpbnVvdXMgcHJvZmlsZXIuXG4gKiBDYWxscyB0byBzdG9wIHdpbGwgc3RvcCB0aGUgcHJvZmlsZXIgYW5kIGZsdXNoIHRoZSBjdXJyZW50bHkgY29sbGVjdGVkIHByb2ZpbGUgZGF0YSB0byBTZW50cnkuXG4gKi9cbmZ1bmN0aW9uIHN0b3BQcm9maWxlcigpIHtcbiAgY29uc3QgY2xpZW50ID0gY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKTtcbiAgaWYgKCFjbGllbnQpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2dnZXIud2FybignTm8gU2VudHJ5IGNsaWVudCBhdmFpbGFibGUsIHByb2ZpbGluZyBpcyBub3Qgc3RhcnRlZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGludGVncmF0aW9uID0gY2xpZW50LmdldEludGVncmF0aW9uQnlOYW1lKCdQcm9maWxpbmdJbnRlZ3JhdGlvbicpO1xuICBpZiAoIWludGVncmF0aW9uKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nZ2VyLndhcm4oJ1Byb2ZpbGluZ0ludGVncmF0aW9uIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWlzUHJvZmlsaW5nSW50ZWdyYXRpb25XaXRoUHJvZmlsZXIoaW50ZWdyYXRpb24pKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nZ2VyLndhcm4oJ1Byb2ZpbGVyIGlzIG5vdCBhdmFpbGFibGUgb24gcHJvZmlsaW5nIGludGVncmF0aW9uLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGludGVncmF0aW9uLl9wcm9maWxlci5zdG9wKCk7XG59XG5cbmNvbnN0IHByb2ZpbGVyID0ge1xuICBzdGFydFByb2ZpbGVyLFxuICBzdG9wUHJvZmlsZXIsXG59O1xuXG5leHBvcnRzLnByb2ZpbGVyID0gcHJvZmlsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9maWxpbmcuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjdXJyZW50U2NvcGVzIiwicmVxdWlyZSIsImRlYnVnQnVpbGQiLCJsb2dnZXIiLCJpc1Byb2ZpbGluZ0ludGVncmF0aW9uV2l0aFByb2ZpbGVyIiwiaW50ZWdyYXRpb24iLCJzdGFydFByb2ZpbGVyIiwiY2xpZW50IiwiZ2V0Q2xpZW50IiwiREVCVUdfQlVJTEQiLCJ3YXJuIiwiZ2V0SW50ZWdyYXRpb25CeU5hbWUiLCJfcHJvZmlsZXIiLCJzdGFydCIsInN0b3BQcm9maWxlciIsInN0b3AiLCJwcm9maWxlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/profiling.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/scope.js":
/*!******************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/scope.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst session = __webpack_require__(/*! ./session.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/session.js\");\nconst is = __webpack_require__(/*! ./utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst propagationContext = __webpack_require__(/*! ./utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst time = __webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst merge = __webpack_require__(/*! ./utils/merge.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js\");\nconst spanOnScope = __webpack_require__(/*! ./utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information.\n */\nclass ScopeClass {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called during event processing. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /** Propagation Context for distributed tracing */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n\n  /** Session */\n\n  /** Request Mode Session Status */\n  // eslint-disable-next-line deprecation/deprecation\n\n  /** The client on this scope */\n\n  /** Contains the last event id of a captured event.  */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: propagationContext.generateTraceId(),\n      spanId: propagationContext.generateSpanId()\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clone() {\n    const newScope = new ScopeClass();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = {\n      ...this._tags\n    };\n    newScope._extra = {\n      ...this._extra\n    };\n    newScope._contexts = {\n      ...this._contexts\n    };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values]\n      };\n    }\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._requestSession = this._requestSession;\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = {\n      ...this._sdkProcessingMetadata\n    };\n    newScope._propagationContext = {\n      ...this._propagationContext\n    };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n    spanOnScope._setSpanForScope(newScope, spanOnScope._getSpanForScope(this));\n    return newScope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setClient(client) {\n    this._client = client;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setLastEventId(lastEventId) {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getClient() {\n    return this._client;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  lastEventId() {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addScopeListener(callback) {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addEventProcessor(callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setUser(user) {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined\n    };\n    if (this._session) {\n      session.updateSession(this._session, {\n        user\n      });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getUser() {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  getRequestSession() {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  setRequestSession(requestSession) {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTags(tags) {\n    this._tags = {\n      ...this._tags,\n      ...tags\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTag(key, value) {\n    this._tags = {\n      ...this._tags,\n      [key]: value\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtras(extras) {\n    this._extra = {\n      ...this._extra,\n      ...extras\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtra(key, extra) {\n    this._extra = {\n      ...this._extra,\n      [key]: extra\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setFingerprint(fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setLevel(level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTransactionName(name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setSession(session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getSession() {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  update(captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n    const [scopeInstance, requestSession] = scopeToMerge instanceof Scope ?\n    // eslint-disable-next-line deprecation/deprecation\n    [scopeToMerge.getScopeData(), scopeToMerge.getRequestSession()] : is.isPlainObject(scopeToMerge) ? [captureContext, captureContext.requestSession] : [];\n    const {\n      tags,\n      extra,\n      user,\n      contexts,\n      level,\n      fingerprint = [],\n      propagationContext\n    } = scopeInstance || {};\n    this._tags = {\n      ...this._tags,\n      ...tags\n    };\n    this._extra = {\n      ...this._extra,\n      ...extra\n    };\n    this._contexts = {\n      ...this._contexts,\n      ...contexts\n    };\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n    if (level) {\n      this._level = level;\n    }\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n    if (requestSession) {\n      this._requestSession = requestSession;\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clear() {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._session = undefined;\n    spanOnScope._setSpanForScope(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({\n      traceId: propagationContext.generateTraceId()\n    });\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n    const mergedBreadcrumb = {\n      timestamp: time.dateTimestampInSeconds(),\n      ...breadcrumb\n    };\n    const breadcrumbs = this._breadcrumbs;\n    breadcrumbs.push(mergedBreadcrumb);\n    this._breadcrumbs = breadcrumbs.length > maxCrumbs ? breadcrumbs.slice(-maxCrumbs) : breadcrumbs;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getLastBreadcrumb() {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clearBreadcrumbs() {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addAttachment(attachment) {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  clearAttachments() {\n    this._attachments = [];\n    return this;\n  }\n\n  /** @inheritDoc */\n  getScopeData() {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: spanOnScope._getSpanForScope(this)\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setSDKProcessingMetadata(newData) {\n    this._sdkProcessingMetadata = merge.merge(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setPropagationContext(context) {\n    this._propagationContext = {\n      // eslint-disable-next-line deprecation/deprecation\n      spanId: propagationContext.generateSpanId(),\n      ...context\n    };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getPropagationContext() {\n    return this._propagationContext;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureException(exception, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : misc.uuid4();\n    if (!this._client) {\n      logger.logger.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n    const syntheticException = new Error('Sentry syntheticException');\n    this._client.captureException(exception, {\n      originalException: exception,\n      syntheticException,\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureMessage(message, level, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : misc.uuid4();\n    if (!this._client) {\n      logger.logger.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n    const syntheticException = new Error(message);\n    this._client.captureMessage(message, level, {\n      originalException: message,\n      syntheticException,\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureEvent(event, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : misc.uuid4();\n    if (!this._client) {\n      logger.logger.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n    this._client.captureEvent(event, {\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  _notifyScopeListeners() {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n\n/**\n * Holds additional event information.\n */\nconst Scope = ScopeClass;\n\n/**\n * Holds additional event information.\n */\n\nexports.Scope = Scope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/sdk.js":
/*!****************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/sdk.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      logger.logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      logger.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = currentScopes.getCurrentScope();\n  scope.update(options.initialScope);\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  client.init();\n  return client;\n}\n\n/**\n * Make the given client the current client.\n */\nfunction setCurrentClient(client) {\n  currentScopes.getCurrentScope().setClient(client);\n}\nexports.initAndBind = initAndBind;\nexports.setCurrentClient = setCurrentClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvc2RrLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLCtGQUFvQixDQUFDO0FBQ25ELE1BQU1DLFVBQVUsR0FBR0QsbUJBQU8sQ0FBQywyRkFBa0IsQ0FBQztBQUM5QyxNQUFNRSxNQUFNLEdBQUdGLG1CQUFPLENBQUMseUdBQXlCLENBQUM7O0FBRWpEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0csV0FBV0EsQ0FDbEJDLFdBQVcsRUFDWEMsT0FBTyxFQUNQO0VBQ0EsSUFBSUEsT0FBTyxDQUFDQyxLQUFLLEtBQUssSUFBSSxFQUFFO0lBQzFCLElBQUlMLFVBQVUsQ0FBQ00sV0FBVyxFQUFFO01BQzFCTCxNQUFNLENBQUNBLE1BQU0sQ0FBQ00sTUFBTSxDQUFDLENBQUM7SUFDeEIsQ0FBQyxNQUFNO01BQ0w7TUFDQU4sTUFBTSxDQUFDTyxjQUFjLENBQUMsTUFBTTtRQUMxQjtRQUNBQyxPQUFPLENBQUNDLElBQUksQ0FBQyw4RUFBOEUsQ0FBQztNQUM5RixDQUFDLENBQUM7SUFDSjtFQUNGO0VBQ0EsTUFBTUMsS0FBSyxHQUFHYixhQUFhLENBQUNjLGVBQWUsQ0FBQyxDQUFDO0VBQzdDRCxLQUFLLENBQUNFLE1BQU0sQ0FBQ1QsT0FBTyxDQUFDVSxZQUFZLENBQUM7RUFFbEMsTUFBTUMsTUFBTSxHQUFHLElBQUlaLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDO0VBQ3ZDWSxnQkFBZ0IsQ0FBQ0QsTUFBTSxDQUFDO0VBQ3hCQSxNQUFNLENBQUNFLElBQUksQ0FBQyxDQUFDO0VBQ2IsT0FBT0YsTUFBTTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGdCQUFnQkEsQ0FBQ0QsTUFBTSxFQUFFO0VBQ2hDakIsYUFBYSxDQUFDYyxlQUFlLENBQUMsQ0FBQyxDQUFDTSxTQUFTLENBQUNILE1BQU0sQ0FBQztBQUNuRDtBQUVBbkIsbUJBQW1CLEdBQUdNLFdBQVc7QUFDakNOLHdCQUF3QixHQUFHb0IsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3Nkay5qcz80YjBjIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGN1cnJlbnRTY29wZXMgPSByZXF1aXJlKCcuL2N1cnJlbnRTY29wZXMuanMnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuL3V0aWxzLWhvaXN0L2xvZ2dlci5qcycpO1xuXG4vKiogQSBjbGFzcyBvYmplY3QgdGhhdCBjYW4gaW5zdGFudGlhdGUgQ2xpZW50IG9iamVjdHMuICovXG5cbi8qKlxuICogSW50ZXJuYWwgZnVuY3Rpb24gdG8gY3JlYXRlIGEgbmV3IFNESyBjbGllbnQgaW5zdGFuY2UuIFRoZSBjbGllbnQgaXNcbiAqIGluc3RhbGxlZCBhbmQgdGhlbiBib3VuZCB0byB0aGUgY3VycmVudCBzY29wZS5cbiAqXG4gKiBAcGFyYW0gY2xpZW50Q2xhc3MgVGhlIGNsaWVudCBjbGFzcyB0byBpbnN0YW50aWF0ZS5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgY2xpZW50LlxuICovXG5mdW5jdGlvbiBpbml0QW5kQmluZChcbiAgY2xpZW50Q2xhc3MsXG4gIG9wdGlvbnMsXG4pIHtcbiAgaWYgKG9wdGlvbnMuZGVidWcgPT09IHRydWUpIHtcbiAgICBpZiAoZGVidWdCdWlsZC5ERUJVR19CVUlMRCkge1xuICAgICAgbG9nZ2VyLmxvZ2dlci5lbmFibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXNlIGBjb25zb2xlLndhcm5gIHJhdGhlciB0aGFuIGBsb2dnZXIud2FybmAgc2luY2UgYnkgbm9uLWRlYnVnIGJ1bmRsZXMgaGF2ZSBhbGwgYGxvZ2dlci54YCBzdGF0ZW1lbnRzIHN0cmlwcGVkXG4gICAgICBsb2dnZXIuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ1tTZW50cnldIENhbm5vdCBpbml0aWFsaXplIFNESyB3aXRoIGBkZWJ1Z2Agb3B0aW9uIHVzaW5nIGEgbm9uLWRlYnVnIGJ1bmRsZS4nKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBjb25zdCBzY29wZSA9IGN1cnJlbnRTY29wZXMuZ2V0Q3VycmVudFNjb3BlKCk7XG4gIHNjb3BlLnVwZGF0ZShvcHRpb25zLmluaXRpYWxTY29wZSk7XG5cbiAgY29uc3QgY2xpZW50ID0gbmV3IGNsaWVudENsYXNzKG9wdGlvbnMpO1xuICBzZXRDdXJyZW50Q2xpZW50KGNsaWVudCk7XG4gIGNsaWVudC5pbml0KCk7XG4gIHJldHVybiBjbGllbnQ7XG59XG5cbi8qKlxuICogTWFrZSB0aGUgZ2l2ZW4gY2xpZW50IHRoZSBjdXJyZW50IGNsaWVudC5cbiAqL1xuZnVuY3Rpb24gc2V0Q3VycmVudENsaWVudChjbGllbnQpIHtcbiAgY3VycmVudFNjb3Blcy5nZXRDdXJyZW50U2NvcGUoKS5zZXRDbGllbnQoY2xpZW50KTtcbn1cblxuZXhwb3J0cy5pbml0QW5kQmluZCA9IGluaXRBbmRCaW5kO1xuZXhwb3J0cy5zZXRDdXJyZW50Q2xpZW50ID0gc2V0Q3VycmVudENsaWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNkay5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImN1cnJlbnRTY29wZXMiLCJyZXF1aXJlIiwiZGVidWdCdWlsZCIsImxvZ2dlciIsImluaXRBbmRCaW5kIiwiY2xpZW50Q2xhc3MiLCJvcHRpb25zIiwiZGVidWciLCJERUJVR19CVUlMRCIsImVuYWJsZSIsImNvbnNvbGVTYW5kYm94IiwiY29uc29sZSIsIndhcm4iLCJzY29wZSIsImdldEN1cnJlbnRTY29wZSIsInVwZGF0ZSIsImluaXRpYWxTY29wZSIsImNsaWVudCIsInNldEN1cnJlbnRDbGllbnQiLCJpbml0Iiwic2V0Q2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/sdk.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/semanticAttributes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Use this attribute to represent the sample rate used for a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n\n/**\n * Use this attribute to represent the origin of a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';\n\n/** The reason why an idle span finished. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason';\n\n/** The unit of a measurement, which may be stored as a TimedEvent. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit';\n\n/** The value of a measurement, which may be stored as a TimedEvent. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value';\n\n/**\n * A custom span name set by users guaranteed to be taken over any automatically\n * inferred name. This attribute is removed before the span is sent.\n *\n * @internal only meant for internal SDK usage\n * @hidden\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name';\n\n/**\n * The id of the profile that this span occurred in.\n */\nconst SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id';\nconst SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time';\nconst SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit';\nconst SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key';\nconst SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size';\n\n/** TODO: Remove these once we update to latest semantic conventions */\nconst SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method';\nconst SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full';\nexports.SEMANTIC_ATTRIBUTE_CACHE_HIT = SEMANTIC_ATTRIBUTE_CACHE_HIT;\nexports.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE;\nexports.SEMANTIC_ATTRIBUTE_CACHE_KEY = SEMANTIC_ATTRIBUTE_CACHE_KEY;\nexports.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME;\nexports.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD;\nexports.SEMANTIC_ATTRIBUTE_PROFILE_ID = SEMANTIC_ATTRIBUTE_PROFILE_ID;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.SEMANTIC_ATTRIBUTE_URL_FULL = SEMANTIC_ATTRIBUTE_URL_FULL;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvc2VtYW50aWNBdHRyaWJ1dGVzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxnQ0FBZ0MsR0FBRyxlQUFlOztBQUV4RDtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxxQ0FBcUMsR0FBRyxvQkFBb0I7O0FBRWxFO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLDRCQUE0QixHQUFHLFdBQVc7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLGdDQUFnQyxHQUFHLGVBQWU7O0FBRXhEO0FBQ0EsTUFBTUMsaURBQWlELEdBQUcsZ0NBQWdDOztBQUUxRjtBQUNBLE1BQU1DLDBDQUEwQyxHQUFHLHlCQUF5Qjs7QUFFNUU7QUFDQSxNQUFNQywyQ0FBMkMsR0FBRywwQkFBMEI7O0FBRTlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsMENBQTBDLEdBQUcseUJBQXlCOztBQUU1RTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyw2QkFBNkIsR0FBRyxtQkFBbUI7QUFFekQsTUFBTUMsaUNBQWlDLEdBQUcsdUJBQXVCO0FBRWpFLE1BQU1DLDRCQUE0QixHQUFHLFdBQVc7QUFFaEQsTUFBTUMsNEJBQTRCLEdBQUcsV0FBVztBQUVoRCxNQUFNQyxrQ0FBa0MsR0FBRyxpQkFBaUI7O0FBRTVEO0FBQ0EsTUFBTUMsc0NBQXNDLEdBQUcscUJBQXFCO0FBQ3BFLE1BQU1DLDJCQUEyQixHQUFHLFVBQVU7QUFFOUNoQixvQ0FBb0MsR0FBR1ksNEJBQTRCO0FBQ25FWiwwQ0FBMEMsR0FBR2Msa0NBQWtDO0FBQy9FZCxvQ0FBb0MsR0FBR2EsNEJBQTRCO0FBQ25FYix5Q0FBeUMsR0FBR1csaUNBQWlDO0FBQzdFWCw4Q0FBOEMsR0FBR2Usc0NBQXNDO0FBQ3ZGZixxQ0FBcUMsR0FBR1UsNkJBQTZCO0FBQ3JFVixrREFBa0QsR0FBR1MsMENBQTBDO0FBQy9GVCx5REFBeUQsR0FBR00saURBQWlEO0FBQzdHTixrREFBa0QsR0FBR08sMENBQTBDO0FBQy9GUCxtREFBbUQsR0FBR1EsMkNBQTJDO0FBQ2pHUixvQ0FBb0MsR0FBR0ksNEJBQTRCO0FBQ25FSix3Q0FBd0MsR0FBR0ssZ0NBQWdDO0FBQzNFTCw2Q0FBNkMsR0FBR0cscUNBQXFDO0FBQ3JGSCx3Q0FBd0MsR0FBR0UsZ0NBQWdDO0FBQzNFRixtQ0FBbUMsR0FBR2dCLDJCQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy9zZW1hbnRpY0F0dHJpYnV0ZXMuanM/ZjFiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFVzZSB0aGlzIGF0dHJpYnV0ZSB0byByZXByZXNlbnQgdGhlIHNvdXJjZSBvZiBhIHNwYW4uXG4gKiBTaG91bGQgYmUgb25lIG9mOiBjdXN0b20sIHVybCwgcm91dGUsIHZpZXcsIGNvbXBvbmVudCwgdGFzaywgdW5rbm93blxuICpcbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UgPSAnc2VudHJ5LnNvdXJjZSc7XG5cbi8qKlxuICogVXNlIHRoaXMgYXR0cmlidXRlIHRvIHJlcHJlc2VudCB0aGUgc2FtcGxlIHJhdGUgdXNlZCBmb3IgYSBzcGFuLlxuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFID0gJ3NlbnRyeS5zYW1wbGVfcmF0ZSc7XG5cbi8qKlxuICogVXNlIHRoaXMgYXR0cmlidXRlIHRvIHJlcHJlc2VudCB0aGUgb3BlcmF0aW9uIG9mIGEgc3Bhbi5cbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCA9ICdzZW50cnkub3AnO1xuXG4vKipcbiAqIFVzZSB0aGlzIGF0dHJpYnV0ZSB0byByZXByZXNlbnQgdGhlIG9yaWdpbiBvZiBhIHNwYW4uXG4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOID0gJ3NlbnRyeS5vcmlnaW4nO1xuXG4vKiogVGhlIHJlYXNvbiB3aHkgYW4gaWRsZSBzcGFuIGZpbmlzaGVkLiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9JRExFX1NQQU5fRklOSVNIX1JFQVNPTiA9ICdzZW50cnkuaWRsZV9zcGFuX2ZpbmlzaF9yZWFzb24nO1xuXG4vKiogVGhlIHVuaXQgb2YgYSBtZWFzdXJlbWVudCwgd2hpY2ggbWF5IGJlIHN0b3JlZCBhcyBhIFRpbWVkRXZlbnQuICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1VOSVQgPSAnc2VudHJ5Lm1lYXN1cmVtZW50X3VuaXQnO1xuXG4vKiogVGhlIHZhbHVlIG9mIGEgbWVhc3VyZW1lbnQsIHdoaWNoIG1heSBiZSBzdG9yZWQgYXMgYSBUaW1lZEV2ZW50LiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9WQUxVRSA9ICdzZW50cnkubWVhc3VyZW1lbnRfdmFsdWUnO1xuXG4vKipcbiAqIEEgY3VzdG9tIHNwYW4gbmFtZSBzZXQgYnkgdXNlcnMgZ3VhcmFudGVlZCB0byBiZSB0YWtlbiBvdmVyIGFueSBhdXRvbWF0aWNhbGx5XG4gKiBpbmZlcnJlZCBuYW1lLiBUaGlzIGF0dHJpYnV0ZSBpcyByZW1vdmVkIGJlZm9yZSB0aGUgc3BhbiBpcyBzZW50LlxuICpcbiAqIEBpbnRlcm5hbCBvbmx5IG1lYW50IGZvciBpbnRlcm5hbCBTREsgdXNhZ2VcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9DVVNUT01fU1BBTl9OQU1FID0gJ3NlbnRyeS5jdXN0b21fc3Bhbl9uYW1lJztcblxuLyoqXG4gKiBUaGUgaWQgb2YgdGhlIHByb2ZpbGUgdGhhdCB0aGlzIHNwYW4gb2NjdXJyZWQgaW4uXG4gKi9cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9QUk9GSUxFX0lEID0gJ3NlbnRyeS5wcm9maWxlX2lkJztcblxuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX0VYQ0xVU0lWRV9USU1FID0gJ3NlbnRyeS5leGNsdXNpdmVfdGltZSc7XG5cbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQgPSAnY2FjaGUuaGl0JztcblxuY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWSA9ICdjYWNoZS5rZXknO1xuXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSVRFTV9TSVpFID0gJ2NhY2hlLml0ZW1fc2l6ZSc7XG5cbi8qKiBUT0RPOiBSZW1vdmUgdGhlc2Ugb25jZSB3ZSB1cGRhdGUgdG8gbGF0ZXN0IHNlbWFudGljIGNvbnZlbnRpb25zICovXG5jb25zdCBTRU1BTlRJQ19BVFRSSUJVVEVfSFRUUF9SRVFVRVNUX01FVEhPRCA9ICdodHRwLnJlcXVlc3QubWV0aG9kJztcbmNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9VUkxfRlVMTCA9ICd1cmwuZnVsbCc7XG5cbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0hJVCA9IFNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9ISVQ7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUgPSBTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSVRFTV9TSVpFO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfS0VZID0gU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWTtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX0VYQ0xVU0lWRV9USU1FID0gU0VNQU5USUNfQVRUUklCVVRFX0VYQ0xVU0lWRV9USU1FO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfSFRUUF9SRVFVRVNUX01FVEhPRCA9IFNFTUFOVElDX0FUVFJJQlVURV9IVFRQX1JFUVVFU1RfTUVUSE9EO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfUFJPRklMRV9JRCA9IFNFTUFOVElDX0FUVFJJQlVURV9QUk9GSUxFX0lEO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUUgPSBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUU7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfSURMRV9TUEFOX0ZJTklTSF9SRUFTT04gPSBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0lETEVfU1BBTl9GSU5JU0hfUkVBU09OO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1VOSVQgPSBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1VOSVQ7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVkFMVUUgPSBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFO1xuZXhwb3J0cy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QID0gU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUDtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4gPSBTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTjtcbmV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURSA9IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEU7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFID0gU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0U7XG5leHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9VUkxfRlVMTCA9IFNFTUFOVElDX0FUVFJJQlVURV9VUkxfRlVMTDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbWFudGljQXR0cmlidXRlcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURSIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfSURMRV9TUEFOX0ZJTklTSF9SRUFTT04iLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1VOSVQiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9DVVNUT01fU1BBTl9OQU1FIiwiU0VNQU5USUNfQVRUUklCVVRFX1BST0ZJTEVfSUQiLCJTRU1BTlRJQ19BVFRSSUJVVEVfRVhDTFVTSVZFX1RJTUUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfQ0FDSEVfSElUIiwiU0VNQU5USUNfQVRUUklCVVRFX0NBQ0hFX0tFWSIsIlNFTUFOVElDX0FUVFJJQlVURV9DQUNIRV9JVEVNX1NJWkUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfSFRUUF9SRVFVRVNUX01FVEhPRCIsIlNFTUFOVElDX0FUVFJJQlVURV9VUkxfRlVMTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/server-runtime-client.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/server-runtime-client.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst baseclient = __webpack_require__(/*! ./baseclient.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/baseclient.js\");\nconst checkin = __webpack_require__(/*! ./checkin.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/checkin.js\");\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst sessionflusher = __webpack_require__(/*! ./sessionflusher.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/sessionflusher.js\");\nconst errors = __webpack_require__(/*! ./tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\n__webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ./utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n__webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanOnScope = __webpack_require__(/*! ./utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\nconst spanUtils = __webpack_require__(/*! ./utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst syncpromise = __webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst eventbuilder = __webpack_require__(/*! ./utils-hoist/eventbuilder.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nclass ServerRuntimeClient extends baseclient.BaseClient {\n  // eslint-disable-next-line deprecation/deprecation\n\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  constructor(options) {\n    // Server clients always support tracing\n    errors.registerSpanErrorInstrumentation();\n    super(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  eventFromException(exception, hint) {\n    const event = eventbuilder.eventFromUnknownInput(this, this._options.stackParser, exception, hint);\n    event.level = 'error';\n    return syncpromise.resolvedSyncPromise(event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  eventFromMessage(message, level = 'info', hint) {\n    return syncpromise.resolvedSyncPromise(eventbuilder.eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureException(exception, hint, scope) {\n    // Check if `_sessionFlusher` exists because it is initialized (defined) only when the `autoSessionTracking` is enabled.\n    // The expectation is that session aggregates are only sent when `autoSessionTracking` is enabled.\n    // TODO(v9): Our goal in the future is to not have the `autoSessionTracking` option and instead rely on integrations doing the creation and sending of sessions. We will not have a central kill-switch for sessions.\n    // TODO(v9): This should move into the httpIntegration.\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._options.autoSessionTracking && this._sessionFlusher) {\n      // eslint-disable-next-line deprecation/deprecation\n      const requestSession = currentScopes.getIsolationScope().getRequestSession();\n\n      // Necessary checks to ensure this is code block is executed only within a request\n      // Should override the status only if `requestSession.status` is `Ok`, which is its initial stage\n      if (requestSession && requestSession.status === 'ok') {\n        requestSession.status = 'errored';\n      }\n    }\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureEvent(event, hint, scope) {\n    // Check if `_sessionFlusher` exists because it is initialized only when the `autoSessionTracking` is enabled.\n    // The expectation is that session aggregates are only sent when `autoSessionTracking` is enabled.\n    // TODO(v9): Our goal in the future is to not have the `autoSessionTracking` option and instead rely on integrations doing the creation and sending of sessions. We will not have a central kill-switch for sessions.\n    // TODO(v9): This should move into the httpIntegration.\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._options.autoSessionTracking && this._sessionFlusher) {\n      const eventType = event.type || 'exception';\n      const isException = eventType === 'exception' && event.exception && event.exception.values && event.exception.values.length > 0;\n\n      // If the event is of type Exception, then a request session should be captured\n      if (isException) {\n        // eslint-disable-next-line deprecation/deprecation\n        const requestSession = currentScopes.getIsolationScope().getRequestSession();\n\n        // Ensure that this is happening within the bounds of a request, and make sure not to override\n        // Session Status if Errored / Crashed\n        if (requestSession && requestSession.status === 'ok') {\n          requestSession.status = 'errored';\n        }\n      }\n    }\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   *\n   * @inheritdoc\n   */\n  close(timeout) {\n    if (this._sessionFlusher) {\n      this._sessionFlusher.close();\n    }\n    return super.close(timeout);\n  }\n\n  /**\n   * Initializes an instance of SessionFlusher on the client which will aggregate and periodically flush session data.\n   *\n   * NOTICE: This method will implicitly create an interval that is periodically called.\n   * To clean up this resources, call `.close()` when you no longer intend to use the client.\n   * Not doing so will result in a memory leak.\n   */\n  initSessionFlusher() {\n    const {\n      release,\n      environment\n    } = this._options;\n    if (!release) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot initialize an instance of SessionFlusher if no release is provided!');\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      this._sessionFlusher = new sessionflusher.SessionFlusher(this, {\n        release,\n        environment\n      });\n    }\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  captureCheckIn(checkIn, monitorConfig, scope) {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : misc.uuid4();\n    if (!this._isEnabled()) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('SDK not enabled, will not capture checkin.');\n      return id;\n    }\n    const options = this.getOptions();\n    const {\n      release,\n      environment,\n      tunnel\n    } = options;\n    const serializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment\n    };\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n        failure_issue_threshold: monitorConfig.failureIssueThreshold,\n        recovery_threshold: monitorConfig.recoveryThreshold\n      };\n    }\n    const [dynamicSamplingContext, traceContext] = this._getTraceInfoFromScope(scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext\n      };\n    }\n    const envelope = checkin.createCheckInEnvelope(serializedCheckIn, dynamicSamplingContext, this.getSdkMetadata(), tunnel, this.getDsn());\n    debugBuild.DEBUG_BUILD && logger.logger.info('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n    return id;\n  }\n\n  /**\n   * Method responsible for capturing/ending a request session by calling `incrementSessionStatusCount` to increment\n   * appropriate session aggregates bucket\n   *\n   * @deprecated This method should not be used or extended. It's functionality will move into the `httpIntegration` and not be part of any public API.\n   */\n  _captureRequestSession() {\n    if (!this._sessionFlusher) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('Discarded request mode session because autoSessionTracking option was disabled');\n    } else {\n      this._sessionFlusher.incrementSessionStatusCount();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _prepareEvent(event, hint, scope, isolationScope) {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: (event.contexts || {}).runtime || this._options.runtime\n      };\n    }\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n    return super._prepareEvent(event, hint, scope, isolationScope);\n  }\n\n  /** Extract trace information from scope */\n  _getTraceInfoFromScope(scope) {\n    if (!scope) {\n      return [undefined, undefined];\n    }\n    const span = spanOnScope._getSpanForScope(scope);\n    const traceContext = span ? spanUtils.spanToTraceContext(span) : currentScopes.getTraceContextFromScope(scope);\n    const dynamicSamplingContext$1 = span ? dynamicSamplingContext.getDynamicSamplingContextFromSpan(span) : dynamicSamplingContext.getDynamicSamplingContextFromScope(this, scope);\n    return [dynamicSamplingContext$1, traceContext];\n  }\n}\nexports.ServerRuntimeClient = ServerRuntimeClient;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/server-runtime-client.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/session.js":
/*!********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/session.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n__webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ./utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\n__webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst time = __webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst misc = __webpack_require__(/*! ./utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\n__webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = time.timestampInSeconds();\n  const session = {\n    sid: misc.uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session)\n  };\n  if (context) {\n    updateSession(session, context);\n  }\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nfunction updateSession(session, context = {}) {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n  session.timestamp = context.timestamp || time.timestampInSeconds();\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : misc.uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nfunction closeSession(session, status) {\n  let context = {};\n  if (status) {\n    context = {\n      status\n    };\n  } else if (session.status === 'ok') {\n    context = {\n      status: 'exited'\n    };\n  }\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session) {\n  return object.dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent\n    }\n  });\n}\nexports.closeSession = closeSession;\nexports.makeSession = makeSession;\nexports.updateSession = updateSession;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/session.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/sessionflusher.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/sessionflusher.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst object = __webpack_require__(/*! ./utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * @deprecated `SessionFlusher` is deprecated and will be removed in the next major version of the SDK.\n */\n// TODO(v9): The goal for the SessionFlusher is to become a stupidly simple mechanism to aggregate \"Sessions\" (actually \"RequestSessions\"). It should probably live directly inside the Http integration/instrumentation.\n// eslint-disable-next-line deprecation/deprecation\nclass SessionFlusher {\n  // We adjust the type here to add the `unref()` part, as setInterval can technically return a number or a NodeJS.Timer\n\n  constructor(client, attrs) {\n    this._client = client;\n    this.flushTimeout = 60;\n    this._pendingAggregates = new Map();\n    this._isEnabled = true;\n\n    // Call to setInterval, so that flush is called every 60 seconds.\n    this._intervalId = setInterval(() => this.flush(), this.flushTimeout * 1000);\n    if (this._intervalId.unref) {\n      this._intervalId.unref();\n    }\n    this._sessionAttrs = attrs;\n  }\n\n  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */\n  flush() {\n    const sessionAggregates = this.getSessionAggregates();\n    if (sessionAggregates.aggregates.length === 0) {\n      return;\n    }\n    this._pendingAggregates = new Map();\n    this._client.sendSession(sessionAggregates);\n  }\n\n  /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n  getSessionAggregates() {\n    const aggregates = Array.from(this._pendingAggregates.values());\n    const sessionAggregates = {\n      attrs: this._sessionAttrs,\n      aggregates\n    };\n    return object.dropUndefinedKeys(sessionAggregates);\n  }\n\n  /** JSDoc */\n  close() {\n    clearInterval(this._intervalId);\n    this._isEnabled = false;\n    this.flush();\n  }\n\n  /**\n   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n   * `_incrementSessionStatusCount` along with the start date\n   */\n  incrementSessionStatusCount() {\n    if (!this._isEnabled) {\n      return;\n    }\n    const isolationScope = currentScopes.getIsolationScope();\n    // eslint-disable-next-line deprecation/deprecation\n    const requestSession = isolationScope.getRequestSession();\n    if (requestSession && requestSession.status) {\n      this._incrementSessionStatusCount(requestSession.status, new Date());\n      // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n      // case captureRequestSession is called more than once to prevent double count\n      // eslint-disable-next-line deprecation/deprecation\n      isolationScope.setRequestSession(undefined);\n      /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n    }\n  }\n\n  /**\n   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n   * the session received\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  _incrementSessionStatusCount(status, date) {\n    // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n    const sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n\n    // corresponds to aggregated sessions in one specific minute bucket\n    // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n    let aggregationCounts = this._pendingAggregates.get(sessionStartedTrunc);\n    if (!aggregationCounts) {\n      aggregationCounts = {\n        started: new Date(sessionStartedTrunc).toISOString()\n      };\n      this._pendingAggregates.set(sessionStartedTrunc, aggregationCounts);\n    }\n    switch (status) {\n      case 'errored':\n        aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n        return aggregationCounts.errored;\n      case 'ok':\n        aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n        return aggregationCounts.exited;\n      default:\n        aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n        return aggregationCounts.crashed;\n    }\n  }\n}\nexports.SessionFlusher = SessionFlusher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/sessionflusher.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst constants = __webpack_require__(/*! ../constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst baggage = __webpack_require__(/*! ../utils-hoist/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * If you change this value, also update the terser plugin config to\n * avoid minification of the object property!\n */\nconst FROZEN_DSC_FIELD = '_frozenDsc';\n\n/**\n * Freeze the given DSC on the given span.\n */\nfunction freezeDscOnSpan(span, dsc) {\n  const spanWithMaybeDsc = span;\n  object.addNonEnumerableProperty(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n}\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nfunction getDynamicSamplingContextFromClient(trace_id, client) {\n  const options = client.getOptions();\n  const {\n    publicKey: public_key\n  } = client.getDsn() || {};\n  const dsc = object.dropUndefinedKeys({\n    environment: options.environment || constants.DEFAULT_ENVIRONMENT,\n    release: options.release,\n    public_key,\n    trace_id\n  });\n  client.emit('createDsc', dsc);\n  return dsc;\n}\n\n/**\n * Get the dynamic sampling context for the currently active scopes.\n */\nfunction getDynamicSamplingContextFromScope(client, scope) {\n  const propagationContext = scope.getPropagationContext();\n  return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n}\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nfunction getDynamicSamplingContextFromSpan(span) {\n  const client = currentScopes.getClient();\n  if (!client) {\n    return {};\n  }\n  const rootSpan = spanUtils.getRootSpan(span);\n\n  // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n  const frozenDsc = rootSpan[FROZEN_DSC_FIELD];\n  if (frozenDsc) {\n    return frozenDsc;\n  }\n\n  // For OpenTelemetry, we freeze the DSC on the trace state\n  const traceState = rootSpan.spanContext().traceState;\n  const traceStateDsc = traceState && traceState.get('sentry.dsc');\n\n  // If the span has a DSC, we want it to take precedence\n  const dscOnTraceState = traceStateDsc && baggage.baggageHeaderToDynamicSamplingContext(traceStateDsc);\n  if (dscOnTraceState) {\n    return dscOnTraceState;\n  }\n\n  // Else, we generate it from the span\n  const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n  const jsonSpan = spanUtils.spanToJSON(rootSpan);\n  const attributes = jsonSpan.data || {};\n  const maybeSampleRate = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  if (maybeSampleRate != null) {\n    dsc.sample_rate = `${maybeSampleRate}`;\n  }\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const source = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  const name = jsonSpan.description;\n  if (source !== 'url' && name) {\n    dsc.transaction = name;\n  }\n\n  // How can we even land here with hasTracingEnabled() returning false?\n  // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n  // So we end up with an active span that is not sampled (neither positively nor negatively)\n  if (hasTracingEnabled.hasTracingEnabled()) {\n    dsc.sampled = String(spanUtils.spanIsSampled(rootSpan));\n  }\n  client.emit('createDsc', dsc, rootSpan);\n  return dsc;\n}\n\n/**\n * Convert a Span to a baggage header.\n */\nfunction spanToBaggageHeader(span) {\n  const dsc = getDynamicSamplingContextFromSpan(span);\n  return baggage.dynamicSamplingContextToSentryBaggageHeader(dsc);\n}\nexports.freezeDscOnSpan = freezeDscOnSpan;\nexports.getDynamicSamplingContextFromClient = getDynamicSamplingContextFromClient;\nexports.getDynamicSamplingContextFromScope = getDynamicSamplingContextFromScope;\nexports.getDynamicSamplingContextFromSpan = getDynamicSamplingContextFromSpan;\nexports.spanToBaggageHeader = spanToBaggageHeader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/errors.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst globalError = __webpack_require__(/*! ../utils-hoist/instrument/globalError.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js\");\nconst globalUnhandledRejection = __webpack_require__(/*! ../utils-hoist/instrument/globalUnhandledRejection.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst spanstatus = __webpack_require__(/*! ./spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nlet errorsInstrumented = false;\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nfunction registerSpanErrorInstrumentation() {\n  if (errorsInstrumented) {\n    return;\n  }\n  errorsInstrumented = true;\n  globalError.addGlobalErrorInstrumentationHandler(errorCallback);\n  globalUnhandledRejection.addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active root span as failed\n */\nfunction errorCallback() {\n  const activeSpan = spanUtils.getActiveSpan();\n  const rootSpan = activeSpan && spanUtils.getRootSpan(activeSpan);\n  if (rootSpan) {\n    const message = 'internal_error';\n    debugBuild.DEBUG_BUILD && logger.logger.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n    rootSpan.setStatus({\n      code: spanstatus.SPAN_STATUS_ERROR,\n      message\n    });\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\nexports.registerSpanErrorInstrumentation = registerSpanErrorInstrumentation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxVQUFVLEdBQUdDLG1CQUFPLENBQUMsNEZBQW1CLENBQUM7QUFDL0MsTUFBTUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLDBJQUEwQyxDQUFDO0FBQ3ZFLE1BQU1FLHdCQUF3QixHQUFHRixtQkFBTyxDQUFDLG9LQUF1RCxDQUFDO0FBQ2pHLE1BQU1HLE1BQU0sR0FBR0gsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUNsRCxNQUFNSSxTQUFTLEdBQUdKLG1CQUFPLENBQUMsb0dBQXVCLENBQUM7QUFDbEQsTUFBTUssVUFBVSxHQUFHTCxtQkFBTyxDQUFDLGlHQUFpQixDQUFDO0FBRTdDLElBQUlNLGtCQUFrQixHQUFHLEtBQUs7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGdDQUFnQ0EsQ0FBQSxFQUFHO0VBQzFDLElBQUlELGtCQUFrQixFQUFFO0lBQ3RCO0VBQ0Y7RUFFQUEsa0JBQWtCLEdBQUcsSUFBSTtFQUN6QkwsV0FBVyxDQUFDTyxvQ0FBb0MsQ0FBQ0MsYUFBYSxDQUFDO0VBQy9EUCx3QkFBd0IsQ0FBQ1EsaURBQWlELENBQUNELGFBQWEsQ0FBQztBQUMzRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxhQUFhQSxDQUFBLEVBQUc7RUFDdkIsTUFBTUUsVUFBVSxHQUFHUCxTQUFTLENBQUNRLGFBQWEsQ0FBQyxDQUFDO0VBQzVDLE1BQU1DLFFBQVEsR0FBR0YsVUFBVSxJQUFJUCxTQUFTLENBQUNVLFdBQVcsQ0FBQ0gsVUFBVSxDQUFDO0VBQ2hFLElBQUlFLFFBQVEsRUFBRTtJQUNaLE1BQU1FLE9BQU8sR0FBRyxnQkFBZ0I7SUFDaENoQixVQUFVLENBQUNpQixXQUFXLElBQUliLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDYyxHQUFHLENBQUUsd0JBQXVCRixPQUFRLDJCQUEwQixDQUFDO0lBQ3ZHRixRQUFRLENBQUNLLFNBQVMsQ0FBQztNQUFFQyxJQUFJLEVBQUVkLFVBQVUsQ0FBQ2UsaUJBQWlCO01BQUVMO0lBQVEsQ0FBQyxDQUFDO0VBQ3JFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBTixhQUFhLENBQUNZLEdBQUcsR0FBRyw2QkFBNkI7QUFFakR4Qix3Q0FBd0MsR0FBR1UsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3RyYWNpbmcvZXJyb3JzLmpzPzUyMjAiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBnbG9iYWxFcnJvciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2luc3RydW1lbnQvZ2xvYmFsRXJyb3IuanMnKTtcbmNvbnN0IGdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbiA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2luc3RydW1lbnQvZ2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnKTtcbmNvbnN0IHNwYW5VdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3NwYW5VdGlscy5qcycpO1xuY29uc3Qgc3BhbnN0YXR1cyA9IHJlcXVpcmUoJy4vc3BhbnN0YXR1cy5qcycpO1xuXG5sZXQgZXJyb3JzSW5zdHJ1bWVudGVkID0gZmFsc2U7XG5cbi8qKlxuICogRW5zdXJlIHRoYXQgZ2xvYmFsIGVycm9ycyBhdXRvbWF0aWNhbGx5IHNldCB0aGUgYWN0aXZlIHNwYW4gc3RhdHVzLlxuICovXG5mdW5jdGlvbiByZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbigpIHtcbiAgaWYgKGVycm9yc0luc3RydW1lbnRlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVycm9yc0luc3RydW1lbnRlZCA9IHRydWU7XG4gIGdsb2JhbEVycm9yLmFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlcihlcnJvckNhbGxiYWNrKTtcbiAgZ2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uLmFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXIoZXJyb3JDYWxsYmFjayk7XG59XG5cbi8qKlxuICogSWYgYW4gZXJyb3Igb3IgdW5oYW5kbGVkIHByb21pc2Ugb2NjdXJzLCB3ZSBtYXJrIHRoZSBhY3RpdmUgcm9vdCBzcGFuIGFzIGZhaWxlZFxuICovXG5mdW5jdGlvbiBlcnJvckNhbGxiYWNrKCkge1xuICBjb25zdCBhY3RpdmVTcGFuID0gc3BhblV0aWxzLmdldEFjdGl2ZVNwYW4oKTtcbiAgY29uc3Qgcm9vdFNwYW4gPSBhY3RpdmVTcGFuICYmIHNwYW5VdGlscy5nZXRSb290U3BhbihhY3RpdmVTcGFuKTtcbiAgaWYgKHJvb3RTcGFuKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9ICdpbnRlcm5hbF9lcnJvcic7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nZ2VyLmxvZyhgW1RyYWNpbmddIFJvb3Qgc3BhbjogJHttZXNzYWdlfSAtPiBHbG9iYWwgZXJyb3Igb2NjdXJyZWRgKTtcbiAgICByb290U3Bhbi5zZXRTdGF0dXMoeyBjb2RlOiBzcGFuc3RhdHVzLlNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlIH0pO1xuICB9XG59XG5cbi8vIFRoZSBmdW5jdGlvbiBuYW1lIHdpbGwgYmUgbG9zdCB3aGVuIGJ1bmRsaW5nIGJ1dCB3ZSBuZWVkIHRvIGJlIGFibGUgdG8gaWRlbnRpZnkgdGhpcyBsaXN0ZW5lciBsYXRlciB0byBtYWludGFpbiB0aGVcbi8vIG5vZGUuanMgZGVmYXVsdCBleGl0IGJlaGF2aW91clxuZXJyb3JDYWxsYmFjay50YWcgPSAnc2VudHJ5X3RyYWNpbmdFcnJvckNhbGxiYWNrJztcblxuZXhwb3J0cy5yZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbiA9IHJlZ2lzdGVyU3BhbkVycm9ySW5zdHJ1bWVudGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVidWdCdWlsZCIsInJlcXVpcmUiLCJnbG9iYWxFcnJvciIsImdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbiIsImxvZ2dlciIsInNwYW5VdGlscyIsInNwYW5zdGF0dXMiLCJlcnJvcnNJbnN0cnVtZW50ZWQiLCJyZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbiIsImFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImVycm9yQ2FsbGJhY2siLCJhZGRHbG9iYWxVbmhhbmRsZWRSZWplY3Rpb25JbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiYWN0aXZlU3BhbiIsImdldEFjdGl2ZVNwYW4iLCJyb290U3BhbiIsImdldFJvb3RTcGFuIiwibWVzc2FnZSIsIkRFQlVHX0JVSUxEIiwibG9nIiwic2V0U3RhdHVzIiwiY29kZSIsIlNQQU5fU1RBVFVTX0VSUk9SIiwidGFnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/hubextensions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/hubextensions.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors = __webpack_require__(/*! ./errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\n\n/**\n * @deprecated Use `registerSpanErrorInstrumentation()` instead. In v9, this function will be removed. Note that you don't need to call this in Node-based SDKs or when using `browserTracingIntegration`.\n */\nfunction addTracingExtensions() {\n  errors.registerSpanErrorInstrumentation();\n}\nexports.addTracingExtensions = addTracingExtensions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9odWJleHRlbnNpb25zLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLHlGQUFhLENBQUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLG9CQUFvQkEsQ0FBQSxFQUFHO0VBQzlCRixNQUFNLENBQUNHLGdDQUFnQyxDQUFDLENBQUM7QUFDM0M7QUFFQUwsNEJBQTRCLEdBQUdJLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cmFjaW5nL2h1YmV4dGVuc2lvbnMuanM/YzhiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycy5qcycpO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBgcmVnaXN0ZXJTcGFuRXJyb3JJbnN0cnVtZW50YXRpb24oKWAgaW5zdGVhZC4gSW4gdjksIHRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkLiBOb3RlIHRoYXQgeW91IGRvbid0IG5lZWQgdG8gY2FsbCB0aGlzIGluIE5vZGUtYmFzZWQgU0RLcyBvciB3aGVuIHVzaW5nIGBicm93c2VyVHJhY2luZ0ludGVncmF0aW9uYC5cbiAqL1xuZnVuY3Rpb24gYWRkVHJhY2luZ0V4dGVuc2lvbnMoKSB7XG4gIGVycm9ycy5yZWdpc3RlclNwYW5FcnJvckluc3RydW1lbnRhdGlvbigpO1xufVxuXG5leHBvcnRzLmFkZFRyYWNpbmdFeHRlbnNpb25zID0gYWRkVHJhY2luZ0V4dGVuc2lvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odWJleHRlbnNpb25zLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXJyb3JzIiwicmVxdWlyZSIsImFkZFRyYWNpbmdFeHRlbnNpb25zIiwicmVnaXN0ZXJTcGFuRXJyb3JJbnN0cnVtZW50YXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/hubextensions.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst spanOnScope = __webpack_require__(/*! ../utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst spanstatus = __webpack_require__(/*! ./spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst trace = __webpack_require__(/*! ./trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst TRACING_DEFAULTS = {\n  idleTimeout: 1000,\n  finalTimeout: 30000,\n  childSpanTimeout: 15000\n};\nconst FINISH_REASON_HEARTBEAT_FAILED = 'heartbeatFailed';\nconst FINISH_REASON_IDLE_TIMEOUT = 'idleTimeout';\nconst FINISH_REASON_FINAL_TIMEOUT = 'finalTimeout';\nconst FINISH_REASON_EXTERNAL_FINISH = 'externalFinish';\n\n/**\n * An idle span is a span that automatically finishes. It does this by tracking child spans as activities.\n * An idle span is always the active span.\n */\nfunction startIdleSpan(startSpanOptions, options = {}) {\n  // Activities store a list of active spans\n  const activities = new Map();\n\n  // We should not use heartbeat if we finished a span\n  let _finished = false;\n\n  // Timer that tracks idleTimeout\n  let _idleTimeoutID;\n\n  // The reason why the span was finished\n  let _finishReason = FINISH_REASON_EXTERNAL_FINISH;\n  let _autoFinishAllowed = !options.disableAutoFinish;\n  const _cleanupHooks = [];\n  const {\n    idleTimeout = TRACING_DEFAULTS.idleTimeout,\n    finalTimeout = TRACING_DEFAULTS.finalTimeout,\n    childSpanTimeout = TRACING_DEFAULTS.childSpanTimeout,\n    beforeSpanEnd\n  } = options;\n  const client = currentScopes.getClient();\n  if (!client || !hasTracingEnabled.hasTracingEnabled()) {\n    return new sentryNonRecordingSpan.SentryNonRecordingSpan();\n  }\n  const scope = currentScopes.getCurrentScope();\n  const previousActiveSpan = spanUtils.getActiveSpan();\n  const span = _startIdleSpan(startSpanOptions);\n\n  // We patch span.end to ensure we can run some things before the span is ended\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  span.end = new Proxy(span.end, {\n    apply(target, thisArg, args) {\n      if (beforeSpanEnd) {\n        beforeSpanEnd(span);\n      }\n\n      // Just ensuring that this keeps working, even if we ever have more arguments here\n      const [definedEndTimestamp, ...rest] = args;\n      const timestamp = definedEndTimestamp || time.timestampInSeconds();\n      const spanEndTimestamp = spanUtils.spanTimeInputToSeconds(timestamp);\n\n      // Ensure we end with the last span timestamp, if possible\n      const spans = spanUtils.getSpanDescendants(span).filter(child => child !== span);\n\n      // If we have no spans, we just end, nothing else to do here\n      if (!spans.length) {\n        onIdleSpanEnded(spanEndTimestamp);\n        return Reflect.apply(target, thisArg, [spanEndTimestamp, ...rest]);\n      }\n      const childEndTimestamps = spans.map(span => spanUtils.spanToJSON(span).timestamp).filter(timestamp => !!timestamp);\n      const latestSpanEndTimestamp = childEndTimestamps.length ? Math.max(...childEndTimestamps) : undefined;\n\n      // In reality this should always exist here, but type-wise it may be undefined...\n      const spanStartTimestamp = spanUtils.spanToJSON(span).start_timestamp;\n\n      // The final endTimestamp should:\n      // * Never be before the span start timestamp\n      // * Be the latestSpanEndTimestamp, if there is one, and it is smaller than the passed span end timestamp\n      // * Otherwise be the passed end timestamp\n      // Final timestamp can never be after finalTimeout\n      const endTimestamp = Math.min(spanStartTimestamp ? spanStartTimestamp + finalTimeout / 1000 : Infinity, Math.max(spanStartTimestamp || -Infinity, Math.min(spanEndTimestamp, latestSpanEndTimestamp || Infinity)));\n      onIdleSpanEnded(endTimestamp);\n      return Reflect.apply(target, thisArg, [endTimestamp, ...rest]);\n    }\n  });\n\n  /**\n   * Cancels the existing idle timeout, if there is one.\n   */\n  function _cancelIdleTimeout() {\n    if (_idleTimeoutID) {\n      clearTimeout(_idleTimeoutID);\n      _idleTimeoutID = undefined;\n    }\n  }\n\n  /**\n   * Restarts idle timeout, if there is no running idle timeout it will start one.\n   */\n  function _restartIdleTimeout(endTimestamp) {\n    _cancelIdleTimeout();\n    _idleTimeoutID = setTimeout(() => {\n      if (!_finished && activities.size === 0 && _autoFinishAllowed) {\n        _finishReason = FINISH_REASON_IDLE_TIMEOUT;\n        span.end(endTimestamp);\n      }\n    }, idleTimeout);\n  }\n\n  /**\n   * Restarts child span timeout, if there is none running it will start one.\n   */\n  function _restartChildSpanTimeout(endTimestamp) {\n    _idleTimeoutID = setTimeout(() => {\n      if (!_finished && _autoFinishAllowed) {\n        _finishReason = FINISH_REASON_HEARTBEAT_FAILED;\n        span.end(endTimestamp);\n      }\n    }, childSpanTimeout);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  function _pushActivity(spanId) {\n    _cancelIdleTimeout();\n    activities.set(spanId, true);\n    const endTimestamp = time.timestampInSeconds();\n    // We need to add the timeout here to have the real endtimestamp of the idle span\n    // Remember timestampInSeconds is in seconds, timeout is in ms\n    _restartChildSpanTimeout(endTimestamp + childSpanTimeout / 1000);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  function _popActivity(spanId) {\n    if (activities.has(spanId)) {\n      activities.delete(spanId);\n    }\n    if (activities.size === 0) {\n      const endTimestamp = time.timestampInSeconds();\n      // We need to add the timeout here to have the real endtimestamp of the idle span\n      // Remember timestampInSeconds is in seconds, timeout is in ms\n      _restartIdleTimeout(endTimestamp + idleTimeout / 1000);\n    }\n  }\n  function onIdleSpanEnded(endTimestamp) {\n    _finished = true;\n    activities.clear();\n    _cleanupHooks.forEach(cleanup => cleanup());\n    spanOnScope._setSpanForScope(scope, previousActiveSpan);\n    const spanJSON = spanUtils.spanToJSON(span);\n    const {\n      start_timestamp: startTimestamp\n    } = spanJSON;\n    // This should never happen, but to make TS happy...\n    if (!startTimestamp) {\n      return;\n    }\n    const attributes = spanJSON.data || {};\n    if (!attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON]) {\n      span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, _finishReason);\n    }\n    logger.logger.log(`[Tracing] Idle span \"${spanJSON.op}\" finished`);\n    const childSpans = spanUtils.getSpanDescendants(span).filter(child => child !== span);\n    let discardedSpans = 0;\n    childSpans.forEach(childSpan => {\n      // We cancel all pending spans with status \"cancelled\" to indicate the idle span was finished early\n      if (childSpan.isRecording()) {\n        childSpan.setStatus({\n          code: spanstatus.SPAN_STATUS_ERROR,\n          message: 'cancelled'\n        });\n        childSpan.end(endTimestamp);\n        debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Cancelling span since span ended early', JSON.stringify(childSpan, undefined, 2));\n      }\n      const childSpanJSON = spanUtils.spanToJSON(childSpan);\n      const {\n        timestamp: childEndTimestamp = 0,\n        start_timestamp: childStartTimestamp = 0\n      } = childSpanJSON;\n      const spanStartedBeforeIdleSpanEnd = childStartTimestamp <= endTimestamp;\n\n      // Add a delta with idle timeout so that we prevent false positives\n      const timeoutWithMarginOfError = (finalTimeout + idleTimeout) / 1000;\n      const spanEndedBeforeFinalTimeout = childEndTimestamp - childStartTimestamp <= timeoutWithMarginOfError;\n      if (debugBuild.DEBUG_BUILD) {\n        const stringifiedSpan = JSON.stringify(childSpan, undefined, 2);\n        if (!spanStartedBeforeIdleSpanEnd) {\n          logger.logger.log('[Tracing] Discarding span since it happened after idle span was finished', stringifiedSpan);\n        } else if (!spanEndedBeforeFinalTimeout) {\n          logger.logger.log('[Tracing] Discarding span since it finished after idle span final timeout', stringifiedSpan);\n        }\n      }\n      if (!spanEndedBeforeFinalTimeout || !spanStartedBeforeIdleSpanEnd) {\n        spanUtils.removeChildSpanFromSpan(span, childSpan);\n        discardedSpans++;\n      }\n    });\n    if (discardedSpans > 0) {\n      span.setAttribute('sentry.idle_span_discarded_spans', discardedSpans);\n    }\n  }\n  _cleanupHooks.push(client.on('spanStart', startedSpan => {\n    // If we already finished the idle span,\n    // or if this is the idle span itself being started,\n    // or if the started span has already been closed,\n    // we don't care about it for activity\n    if (_finished || startedSpan === span || !!spanUtils.spanToJSON(startedSpan).timestamp) {\n      return;\n    }\n    const allSpans = spanUtils.getSpanDescendants(span);\n\n    // If the span that was just started is a child of the idle span, we should track it\n    if (allSpans.includes(startedSpan)) {\n      _pushActivity(startedSpan.spanContext().spanId);\n    }\n  }));\n  _cleanupHooks.push(client.on('spanEnd', endedSpan => {\n    if (_finished) {\n      return;\n    }\n    _popActivity(endedSpan.spanContext().spanId);\n  }));\n  _cleanupHooks.push(client.on('idleSpanEnableAutoFinish', spanToAllowAutoFinish => {\n    if (spanToAllowAutoFinish === span) {\n      _autoFinishAllowed = true;\n      _restartIdleTimeout();\n      if (activities.size) {\n        _restartChildSpanTimeout();\n      }\n    }\n  }));\n\n  // We only start the initial idle timeout if we are not delaying the auto finish\n  if (!options.disableAutoFinish) {\n    _restartIdleTimeout();\n  }\n  setTimeout(() => {\n    if (!_finished) {\n      span.setStatus({\n        code: spanstatus.SPAN_STATUS_ERROR,\n        message: 'deadline_exceeded'\n      });\n      _finishReason = FINISH_REASON_FINAL_TIMEOUT;\n      span.end();\n    }\n  }, finalTimeout);\n  return span;\n}\nfunction _startIdleSpan(options) {\n  const span = trace.startInactiveSpan(options);\n  spanOnScope._setSpanForScope(currentScopes.getCurrentScope(), span);\n  debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Started span is an idle span');\n  return span;\n}\nexports.TRACING_DEFAULTS = TRACING_DEFAULTS;\nexports.startIdleSpan = startIdleSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/idleSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/logSpans.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Print a log message for a started span.\n */\nfunction logSpanStart(span) {\n  if (!debugBuild.DEBUG_BUILD) return;\n  const {\n    description = '< unknown name >',\n    op = '< unknown op >',\n    parent_span_id: parentSpanId\n  } = spanUtils.spanToJSON(span);\n  const {\n    spanId\n  } = span.spanContext();\n  const sampled = spanUtils.spanIsSampled(span);\n  const rootSpan = spanUtils.getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n  const infoParts = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n  if (!isRootSpan) {\n    const {\n      op,\n      description\n    } = spanUtils.spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n  logger.logger.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nfunction logSpanEnd(span) {\n  if (!debugBuild.DEBUG_BUILD) return;\n  const {\n    description = '< unknown name >',\n    op = '< unknown op >'\n  } = spanUtils.spanToJSON(span);\n  const {\n    spanId\n  } = span.spanContext();\n  const rootSpan = spanUtils.getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  logger.logger.log(msg);\n}\nexports.logSpanEnd = logSpanEnd;\nexports.logSpanStart = logSpanStart;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9sb2dTcGFucy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyw0RkFBbUIsQ0FBQztBQUMvQyxNQUFNQyxNQUFNLEdBQUdELG1CQUFPLENBQUMsMEdBQTBCLENBQUM7QUFDbEQsTUFBTUUsU0FBUyxHQUFHRixtQkFBTyxDQUFDLG9HQUF1QixDQUFDOztBQUVsRDtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxZQUFZQSxDQUFDQyxJQUFJLEVBQUU7RUFDMUIsSUFBSSxDQUFDTCxVQUFVLENBQUNNLFdBQVcsRUFBRTtFQUU3QixNQUFNO0lBQUVDLFdBQVcsR0FBRyxrQkFBa0I7SUFBRUMsRUFBRSxHQUFHLGdCQUFnQjtJQUFFQyxjQUFjLEVBQUVDO0VBQWEsQ0FBQyxHQUFHUCxTQUFTLENBQUNRLFVBQVUsQ0FBQ04sSUFBSSxDQUFDO0VBQzVILE1BQU07SUFBRU87RUFBTyxDQUFDLEdBQUdQLElBQUksQ0FBQ1EsV0FBVyxDQUFDLENBQUM7RUFFckMsTUFBTUMsT0FBTyxHQUFHWCxTQUFTLENBQUNZLGFBQWEsQ0FBQ1YsSUFBSSxDQUFDO0VBQzdDLE1BQU1XLFFBQVEsR0FBR2IsU0FBUyxDQUFDYyxXQUFXLENBQUNaLElBQUksQ0FBQztFQUM1QyxNQUFNYSxVQUFVLEdBQUdGLFFBQVEsS0FBS1gsSUFBSTtFQUVwQyxNQUFNYyxNQUFNLEdBQUksc0JBQXFCTCxPQUFPLEdBQUcsU0FBUyxHQUFHLFdBQVksSUFBR0ksVUFBVSxHQUFHLE9BQU8sR0FBRyxFQUFHLE1BQUs7RUFFekcsTUFBTUUsU0FBUyxHQUFHLENBQUUsT0FBTVosRUFBRyxFQUFDLEVBQUcsU0FBUUQsV0FBWSxFQUFDLEVBQUcsT0FBTUssTUFBTyxFQUFDLENBQUM7RUFFeEUsSUFBSUYsWUFBWSxFQUFFO0lBQ2hCVSxTQUFTLENBQUNDLElBQUksQ0FBRSxjQUFhWCxZQUFhLEVBQUMsQ0FBQztFQUM5QztFQUVBLElBQUksQ0FBQ1EsVUFBVSxFQUFFO0lBQ2YsTUFBTTtNQUFFVixFQUFFO01BQUVEO0lBQVksQ0FBQyxHQUFHSixTQUFTLENBQUNRLFVBQVUsQ0FBQ0ssUUFBUSxDQUFDO0lBQzFESSxTQUFTLENBQUNDLElBQUksQ0FBRSxZQUFXTCxRQUFRLENBQUNILFdBQVcsQ0FBQyxDQUFDLENBQUNELE1BQU8sRUFBQyxDQUFDO0lBQzNELElBQUlKLEVBQUUsRUFBRTtNQUNOWSxTQUFTLENBQUNDLElBQUksQ0FBRSxZQUFXYixFQUFHLEVBQUMsQ0FBQztJQUNsQztJQUNBLElBQUlELFdBQVcsRUFBRTtNQUNmYSxTQUFTLENBQUNDLElBQUksQ0FBRSxxQkFBb0JkLFdBQVksRUFBQyxDQUFDO0lBQ3BEO0VBQ0Y7RUFFQUwsTUFBTSxDQUFDQSxNQUFNLENBQUNvQixHQUFHLENBQUUsR0FBRUgsTUFBTztBQUM5QixJQUFJQyxTQUFTLENBQUNHLElBQUksQ0FBQyxNQUFNLENBQUUsRUFBQyxDQUFDO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFVBQVVBLENBQUNuQixJQUFJLEVBQUU7RUFDeEIsSUFBSSxDQUFDTCxVQUFVLENBQUNNLFdBQVcsRUFBRTtFQUU3QixNQUFNO0lBQUVDLFdBQVcsR0FBRyxrQkFBa0I7SUFBRUMsRUFBRSxHQUFHO0VBQWlCLENBQUMsR0FBR0wsU0FBUyxDQUFDUSxVQUFVLENBQUNOLElBQUksQ0FBQztFQUM5RixNQUFNO0lBQUVPO0VBQU8sQ0FBQyxHQUFHUCxJQUFJLENBQUNRLFdBQVcsQ0FBQyxDQUFDO0VBQ3JDLE1BQU1HLFFBQVEsR0FBR2IsU0FBUyxDQUFDYyxXQUFXLENBQUNaLElBQUksQ0FBQztFQUM1QyxNQUFNYSxVQUFVLEdBQUdGLFFBQVEsS0FBS1gsSUFBSTtFQUVwQyxNQUFNb0IsR0FBRyxHQUFJLHdCQUF1QmpCLEVBQUcsS0FBSVUsVUFBVSxHQUFHLE9BQU8sR0FBRyxFQUFHLFNBQVFYLFdBQVksYUFBWUssTUFBTyxFQUFDO0VBQzdHVixNQUFNLENBQUNBLE1BQU0sQ0FBQ29CLEdBQUcsQ0FBQ0csR0FBRyxDQUFDO0FBQ3hCO0FBRUEzQixrQkFBa0IsR0FBRzBCLFVBQVU7QUFDL0IxQixvQkFBb0IsR0FBR00sWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cmFjaW5nL2xvZ1NwYW5zLmpzPzZjMWEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnKTtcbmNvbnN0IHNwYW5VdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3NwYW5VdGlscy5qcycpO1xuXG4vKipcbiAqIFByaW50IGEgbG9nIG1lc3NhZ2UgZm9yIGEgc3RhcnRlZCBzcGFuLlxuICovXG5mdW5jdGlvbiBsb2dTcGFuU3RhcnQoc3Bhbikge1xuICBpZiAoIWRlYnVnQnVpbGQuREVCVUdfQlVJTEQpIHJldHVybjtcblxuICBjb25zdCB7IGRlc2NyaXB0aW9uID0gJzwgdW5rbm93biBuYW1lID4nLCBvcCA9ICc8IHVua25vd24gb3AgPicsIHBhcmVudF9zcGFuX2lkOiBwYXJlbnRTcGFuSWQgfSA9IHNwYW5VdGlscy5zcGFuVG9KU09OKHNwYW4pO1xuICBjb25zdCB7IHNwYW5JZCB9ID0gc3Bhbi5zcGFuQ29udGV4dCgpO1xuXG4gIGNvbnN0IHNhbXBsZWQgPSBzcGFuVXRpbHMuc3BhbklzU2FtcGxlZChzcGFuKTtcbiAgY29uc3Qgcm9vdFNwYW4gPSBzcGFuVXRpbHMuZ2V0Um9vdFNwYW4oc3Bhbik7XG4gIGNvbnN0IGlzUm9vdFNwYW4gPSByb290U3BhbiA9PT0gc3BhbjtcblxuICBjb25zdCBoZWFkZXIgPSBgW1RyYWNpbmddIFN0YXJ0aW5nICR7c2FtcGxlZCA/ICdzYW1wbGVkJyA6ICd1bnNhbXBsZWQnfSAke2lzUm9vdFNwYW4gPyAncm9vdCAnIDogJyd9c3BhbmA7XG5cbiAgY29uc3QgaW5mb1BhcnRzID0gW2BvcDogJHtvcH1gLCBgbmFtZTogJHtkZXNjcmlwdGlvbn1gLCBgSUQ6ICR7c3BhbklkfWBdO1xuXG4gIGlmIChwYXJlbnRTcGFuSWQpIHtcbiAgICBpbmZvUGFydHMucHVzaChgcGFyZW50IElEOiAke3BhcmVudFNwYW5JZH1gKTtcbiAgfVxuXG4gIGlmICghaXNSb290U3Bhbikge1xuICAgIGNvbnN0IHsgb3AsIGRlc2NyaXB0aW9uIH0gPSBzcGFuVXRpbHMuc3BhblRvSlNPTihyb290U3Bhbik7XG4gICAgaW5mb1BhcnRzLnB1c2goYHJvb3QgSUQ6ICR7cm9vdFNwYW4uc3BhbkNvbnRleHQoKS5zcGFuSWR9YCk7XG4gICAgaWYgKG9wKSB7XG4gICAgICBpbmZvUGFydHMucHVzaChgcm9vdCBvcDogJHtvcH1gKTtcbiAgICB9XG4gICAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgICBpbmZvUGFydHMucHVzaChgcm9vdCBkZXNjcmlwdGlvbjogJHtkZXNjcmlwdGlvbn1gKTtcbiAgICB9XG4gIH1cblxuICBsb2dnZXIubG9nZ2VyLmxvZyhgJHtoZWFkZXJ9XG4gICR7aW5mb1BhcnRzLmpvaW4oJ1xcbiAgJyl9YCk7XG59XG5cbi8qKlxuICogUHJpbnQgYSBsb2cgbWVzc2FnZSBmb3IgYW4gZW5kZWQgc3Bhbi5cbiAqL1xuZnVuY3Rpb24gbG9nU3BhbkVuZChzcGFuKSB7XG4gIGlmICghZGVidWdCdWlsZC5ERUJVR19CVUlMRCkgcmV0dXJuO1xuXG4gIGNvbnN0IHsgZGVzY3JpcHRpb24gPSAnPCB1bmtub3duIG5hbWUgPicsIG9wID0gJzwgdW5rbm93biBvcCA+JyB9ID0gc3BhblV0aWxzLnNwYW5Ub0pTT04oc3Bhbik7XG4gIGNvbnN0IHsgc3BhbklkIH0gPSBzcGFuLnNwYW5Db250ZXh0KCk7XG4gIGNvbnN0IHJvb3RTcGFuID0gc3BhblV0aWxzLmdldFJvb3RTcGFuKHNwYW4pO1xuICBjb25zdCBpc1Jvb3RTcGFuID0gcm9vdFNwYW4gPT09IHNwYW47XG5cbiAgY29uc3QgbXNnID0gYFtUcmFjaW5nXSBGaW5pc2hpbmcgXCIke29wfVwiICR7aXNSb290U3BhbiA/ICdyb290ICcgOiAnJ31zcGFuIFwiJHtkZXNjcmlwdGlvbn1cIiB3aXRoIElEICR7c3BhbklkfWA7XG4gIGxvZ2dlci5sb2dnZXIubG9nKG1zZyk7XG59XG5cbmV4cG9ydHMubG9nU3BhbkVuZCA9IGxvZ1NwYW5FbmQ7XG5leHBvcnRzLmxvZ1NwYW5TdGFydCA9IGxvZ1NwYW5TdGFydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ1NwYW5zLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVidWdCdWlsZCIsInJlcXVpcmUiLCJsb2dnZXIiLCJzcGFuVXRpbHMiLCJsb2dTcGFuU3RhcnQiLCJzcGFuIiwiREVCVUdfQlVJTEQiLCJkZXNjcmlwdGlvbiIsIm9wIiwicGFyZW50X3NwYW5faWQiLCJwYXJlbnRTcGFuSWQiLCJzcGFuVG9KU09OIiwic3BhbklkIiwic3BhbkNvbnRleHQiLCJzYW1wbGVkIiwic3BhbklzU2FtcGxlZCIsInJvb3RTcGFuIiwiZ2V0Um9vdFNwYW4iLCJpc1Jvb3RTcGFuIiwiaGVhZGVyIiwiaW5mb1BhcnRzIiwicHVzaCIsImxvZyIsImpvaW4iLCJsb2dTcGFuRW5kIiwibXNnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/measurement.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nfunction setMeasurement(name, value, unit, activeSpan = spanUtils.getActiveSpan()) {\n  const rootSpan = activeSpan && spanUtils.getRootSpan(activeSpan);\n  if (rootSpan) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nfunction timedEventsToMeasurements(events) {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n  const measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT];\n    const value = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE];\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = {\n        value,\n        unit\n      };\n    }\n  });\n  return measurements;\n}\nexports.setMeasurement = setMeasurement;\nexports.timedEventsToMeasurements = timedEventsToMeasurements;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9tZWFzdXJlbWVudC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyw0RkFBbUIsQ0FBQztBQUMvQyxNQUFNQyxrQkFBa0IsR0FBR0QsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUM5RCxNQUFNRSxNQUFNLEdBQUdGLG1CQUFPLENBQUMsMEdBQTBCLENBQUM7QUFDbEQsTUFBTUcsU0FBUyxHQUFHSCxtQkFBTyxDQUFDLG9HQUF1QixDQUFDOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNJLGNBQWNBLENBQUNDLElBQUksRUFBRVAsS0FBSyxFQUFFUSxJQUFJLEVBQUVDLFVBQVUsR0FBR0osU0FBUyxDQUFDSyxhQUFhLENBQUMsQ0FBQyxFQUFFO0VBQ2pGLE1BQU1DLFFBQVEsR0FBR0YsVUFBVSxJQUFJSixTQUFTLENBQUNPLFdBQVcsQ0FBQ0gsVUFBVSxDQUFDO0VBRWhFLElBQUlFLFFBQVEsRUFBRTtJQUNaVixVQUFVLENBQUNZLFdBQVcsSUFBSVQsTUFBTSxDQUFDQSxNQUFNLENBQUNVLEdBQUcsQ0FBRSxtREFBa0RQLElBQUssTUFBS1AsS0FBTSxJQUFHUSxJQUFLLEVBQUMsQ0FBQztJQUN6SEcsUUFBUSxDQUFDSSxRQUFRLENBQUNSLElBQUksRUFBRTtNQUN0QixDQUFDSixrQkFBa0IsQ0FBQ2EsMkNBQTJDLEdBQUdoQixLQUFLO01BQ3ZFLENBQUNHLGtCQUFrQixDQUFDYywwQ0FBMEMsR0FBR1Q7SUFDbkUsQ0FBQyxDQUFDO0VBQ0o7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTVSx5QkFBeUJBLENBQUNDLE1BQU0sRUFBRTtFQUN6QyxJQUFJLENBQUNBLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0lBQ2xDLE9BQU9DLFNBQVM7RUFDbEI7RUFFQSxNQUFNQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0VBQ3ZCSCxNQUFNLENBQUNJLE9BQU8sQ0FBQ0MsS0FBSyxJQUFJO0lBQ3RCLE1BQU1DLFVBQVUsR0FBR0QsS0FBSyxDQUFDQyxVQUFVLElBQUksQ0FBQyxDQUFDO0lBQ3pDLE1BQU1qQixJQUFJLEdBQUdpQixVQUFVLENBQUN0QixrQkFBa0IsQ0FBQ2MsMENBQTBDLENBQUM7SUFDdEYsTUFBTWpCLEtBQUssR0FBR3lCLFVBQVUsQ0FBQ3RCLGtCQUFrQixDQUFDYSwyQ0FBMkMsQ0FBQztJQUV4RixJQUFJLE9BQU9SLElBQUksS0FBSyxRQUFRLElBQUksT0FBT1IsS0FBSyxLQUFLLFFBQVEsRUFBRTtNQUN6RHNCLFlBQVksQ0FBQ0UsS0FBSyxDQUFDakIsSUFBSSxDQUFDLEdBQUc7UUFBRVAsS0FBSztRQUFFUTtNQUFLLENBQUM7SUFDNUM7RUFDRixDQUFDLENBQUM7RUFFRixPQUFPYyxZQUFZO0FBQ3JCO0FBRUF2QixzQkFBc0IsR0FBR08sY0FBYztBQUN2Q1AsaUNBQWlDLEdBQUdtQix5QkFBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9tZWFzdXJlbWVudC5qcz9jNWM3Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuY29uc3Qgc2VtYW50aWNBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi4vc2VtYW50aWNBdHRyaWJ1dGVzLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnKTtcbmNvbnN0IHNwYW5VdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3NwYW5VdGlscy5qcycpO1xuXG4vKipcbiAqIEFkZHMgYSBtZWFzdXJlbWVudCB0byB0aGUgYWN0aXZlIHRyYW5zYWN0aW9uIG9uIHRoZSBjdXJyZW50IGdsb2JhbCBzY29wZS4gWW91IGNhbiBvcHRpb25hbGx5IHBhc3MgaW4gYSBkaWZmZXJlbnQgc3BhblxuICogYXMgdGhlIDR0aCBwYXJhbWV0ZXIuXG4gKi9cbmZ1bmN0aW9uIHNldE1lYXN1cmVtZW50KG5hbWUsIHZhbHVlLCB1bml0LCBhY3RpdmVTcGFuID0gc3BhblV0aWxzLmdldEFjdGl2ZVNwYW4oKSkge1xuICBjb25zdCByb290U3BhbiA9IGFjdGl2ZVNwYW4gJiYgc3BhblV0aWxzLmdldFJvb3RTcGFuKGFjdGl2ZVNwYW4pO1xuXG4gIGlmIChyb290U3Bhbikge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZ2dlci5sb2coYFtNZWFzdXJlbWVudF0gU2V0dGluZyBtZWFzdXJlbWVudCBvbiByb290IHNwYW46ICR7bmFtZX0gPSAke3ZhbHVlfSAke3VuaXR9YCk7XG4gICAgcm9vdFNwYW4uYWRkRXZlbnQobmFtZSwge1xuICAgICAgW3NlbWFudGljQXR0cmlidXRlcy5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX01FQVNVUkVNRU5UX1ZBTFVFXTogdmFsdWUsXG4gICAgICBbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVF06IHVuaXQgLFxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQ29udmVydCB0aW1lZCBldmVudHMgdG8gbWVhc3VyZW1lbnRzLlxuICovXG5mdW5jdGlvbiB0aW1lZEV2ZW50c1RvTWVhc3VyZW1lbnRzKGV2ZW50cykge1xuICBpZiAoIWV2ZW50cyB8fCBldmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IG1lYXN1cmVtZW50cyA9IHt9O1xuICBldmVudHMuZm9yRWFjaChldmVudCA9PiB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IGV2ZW50LmF0dHJpYnV0ZXMgfHwge307XG4gICAgY29uc3QgdW5pdCA9IGF0dHJpYnV0ZXNbc2VtYW50aWNBdHRyaWJ1dGVzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVF0gO1xuICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1tzZW1hbnRpY0F0dHJpYnV0ZXMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9WQUxVRV0gO1xuXG4gICAgaWYgKHR5cGVvZiB1bml0ID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICBtZWFzdXJlbWVudHNbZXZlbnQubmFtZV0gPSB7IHZhbHVlLCB1bml0IH07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbWVhc3VyZW1lbnRzO1xufVxuXG5leHBvcnRzLnNldE1lYXN1cmVtZW50ID0gc2V0TWVhc3VyZW1lbnQ7XG5leHBvcnRzLnRpbWVkRXZlbnRzVG9NZWFzdXJlbWVudHMgPSB0aW1lZEV2ZW50c1RvTWVhc3VyZW1lbnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVhc3VyZW1lbnQuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWJ1Z0J1aWxkIiwicmVxdWlyZSIsInNlbWFudGljQXR0cmlidXRlcyIsImxvZ2dlciIsInNwYW5VdGlscyIsInNldE1lYXN1cmVtZW50IiwibmFtZSIsInVuaXQiLCJhY3RpdmVTcGFuIiwiZ2V0QWN0aXZlU3BhbiIsInJvb3RTcGFuIiwiZ2V0Um9vdFNwYW4iLCJERUJVR19CVUlMRCIsImxvZyIsImFkZEV2ZW50IiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9NRUFTVVJFTUVOVF9WQUxVRSIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfTUVBU1VSRU1FTlRfVU5JVCIsInRpbWVkRXZlbnRzVG9NZWFzdXJlbWVudHMiLCJldmVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJtZWFzdXJlbWVudHMiLCJmb3JFYWNoIiwiZXZlbnQiLCJhdHRyaWJ1dGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/sampling.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst parseSampleRate = __webpack_require__(/*! ../utils/parseSampleRate.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\");\n\n/**\n * Makes a sampling decision for the given options.\n *\n * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n */\nfunction sampleSpan(options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled.hasTracingEnabled(options)) {\n    return [false];\n  }\n\n  // Casting this from unknown, as the type of `sdkProcessingMetadata` is only changed in v9 and `normalizedRequest` is set in SentryHttpInstrumentation\n  const normalizedRequest = currentScopes.getIsolationScope().getScopeData().sdkProcessingMetadata.normalizedRequest;\n  const enhancedSamplingContext = {\n    ...samplingContext,\n    normalizedRequest: samplingContext.normalizedRequest || normalizedRequest\n  };\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(enhancedSamplingContext);\n  } else if (enhancedSamplingContext.parentSampled !== undefined) {\n    sampleRate = enhancedSamplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n  } else {\n    // When `enableTracing === true`, we use a sample rate of 100%\n    sampleRate = 1;\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n  // (The only valid values are booleans or numbers between 0 and 1.)\n  const parsedSampleRate = parseSampleRate.parseSampleRate(sampleRate);\n  if (parsedSampleRate === undefined) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    return [false];\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!parsedSampleRate) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`[Tracing] Discarding transaction because ${typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'}`);\n    return [false, parsedSampleRate];\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  const shouldSample = Math.random() < parsedSampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!shouldSample) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(sampleRate)})`);\n    return [false, parsedSampleRate];\n  }\n  return [true, parsedSampleRate];\n}\nexports.sampleSpan = sampleSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst propagationContext = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * A Sentry Span that is non-recording, meaning it will not be sent to Sentry.\n */\nclass SentryNonRecordingSpan {\n  constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || propagationContext.generateTraceId();\n    this._spanId = spanContext.spanId || propagationContext.generateSpanId();\n  }\n\n  /** @inheritdoc */\n  spanContext() {\n    return {\n      spanId: this._spanId,\n      traceId: this._traceId,\n      traceFlags: spanUtils.TRACE_FLAG_NONE\n    };\n  }\n\n  /** @inheritdoc */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  end(_timestamp) {}\n\n  /** @inheritdoc */\n  setAttribute(_key, _value) {\n    return this;\n  }\n\n  /** @inheritdoc */\n  setAttributes(_values) {\n    return this;\n  }\n\n  /** @inheritdoc */\n  setStatus(_status) {\n    return this;\n  }\n\n  /** @inheritdoc */\n  updateName(_name) {\n    return this;\n  }\n\n  /** @inheritdoc */\n  isRecording() {\n    return false;\n  }\n\n  /** @inheritdoc */\n  addEvent(_name, _attributesOrStartTime, _startTime) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  addLink(_link) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  addLinks(_links) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  recordException(_exception, _time) {\n    // noop\n  }\n}\nexports.SentryNonRecordingSpan = SentryNonRecordingSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9zZW50cnlOb25SZWNvcmRpbmdTcGFuLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsa0JBQWtCLEdBQUdDLG1CQUFPLENBQUMsa0lBQXNDLENBQUM7QUFDMUUsTUFBTUMsU0FBUyxHQUFHRCxtQkFBTyxDQUFDLG9HQUF1QixDQUFDOztBQUVsRDtBQUNBO0FBQ0E7QUFDQSxNQUFNRSxzQkFBc0IsQ0FBRTtFQUUzQkMsV0FBV0EsQ0FBQ0MsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzdCLElBQUksQ0FBQ0MsUUFBUSxHQUFHRCxXQUFXLENBQUNFLE9BQU8sSUFBSVAsa0JBQWtCLENBQUNRLGVBQWUsQ0FBQyxDQUFDO0lBQzNFLElBQUksQ0FBQ0MsT0FBTyxHQUFHSixXQUFXLENBQUNLLE1BQU0sSUFBSVYsa0JBQWtCLENBQUNXLGNBQWMsQ0FBQyxDQUFDO0VBQzFFOztFQUVBO0VBQ0NOLFdBQVdBLENBQUEsRUFBRztJQUNiLE9BQU87TUFDTEssTUFBTSxFQUFFLElBQUksQ0FBQ0QsT0FBTztNQUNwQkYsT0FBTyxFQUFFLElBQUksQ0FBQ0QsUUFBUTtNQUN0Qk0sVUFBVSxFQUFFVixTQUFTLENBQUNXO0lBQ3hCLENBQUM7RUFDSDs7RUFFQTtFQUNBO0VBQ0NDLEdBQUdBLENBQUNDLFVBQVUsRUFBRSxDQUFDOztFQUVsQjtFQUNDQyxZQUFZQSxDQUFDQyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtJQUMxQixPQUFPLElBQUk7RUFDYjs7RUFFQTtFQUNDQyxhQUFhQSxDQUFDQyxPQUFPLEVBQUU7SUFDdEIsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7RUFDQ0MsU0FBU0EsQ0FBQ0MsT0FBTyxFQUFFO0lBQ2xCLE9BQU8sSUFBSTtFQUNiOztFQUVBO0VBQ0NDLFVBQVVBLENBQUNDLEtBQUssRUFBRTtJQUNqQixPQUFPLElBQUk7RUFDYjs7RUFFQTtFQUNDQyxXQUFXQSxDQUFBLEVBQUc7SUFDYixPQUFPLEtBQUs7RUFDZDs7RUFFQTtFQUNDQyxRQUFRQSxDQUNQRixLQUFLLEVBQ0xHLHNCQUFzQixFQUN0QkMsVUFBVSxFQUNWO0lBQ0EsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDR0MsT0FBT0EsQ0FBQ0MsS0FBSyxFQUFFO0lBQ2QsT0FBTyxJQUFJO0VBQ2I7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDR0MsUUFBUUEsQ0FBQ0MsTUFBTSxFQUFFO0lBQ2hCLE9BQU8sSUFBSTtFQUNiOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0dDLGVBQWVBLENBQUNDLFVBQVUsRUFBRUMsS0FBSyxFQUFFO0lBQ2xDO0VBQUE7QUFFSjtBQUVBckMsOEJBQThCLEdBQUdLLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy90cmFjaW5nL3NlbnRyeU5vblJlY29yZGluZ1NwYW4uanM/MWE3MiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9wcm9wYWdhdGlvbkNvbnRleHQuanMnKTtcbmNvbnN0IHNwYW5VdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3NwYW5VdGlscy5qcycpO1xuXG4vKipcbiAqIEEgU2VudHJ5IFNwYW4gdGhhdCBpcyBub24tcmVjb3JkaW5nLCBtZWFuaW5nIGl0IHdpbGwgbm90IGJlIHNlbnQgdG8gU2VudHJ5LlxuICovXG5jbGFzcyBTZW50cnlOb25SZWNvcmRpbmdTcGFuICB7XG5cbiAgIGNvbnN0cnVjdG9yKHNwYW5Db250ZXh0ID0ge30pIHtcbiAgICB0aGlzLl90cmFjZUlkID0gc3BhbkNvbnRleHQudHJhY2VJZCB8fCBwcm9wYWdhdGlvbkNvbnRleHQuZ2VuZXJhdGVUcmFjZUlkKCk7XG4gICAgdGhpcy5fc3BhbklkID0gc3BhbkNvbnRleHQuc3BhbklkIHx8IHByb3BhZ2F0aW9uQ29udGV4dC5nZW5lcmF0ZVNwYW5JZCgpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBzcGFuQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3BhbklkOiB0aGlzLl9zcGFuSWQsXG4gICAgICB0cmFjZUlkOiB0aGlzLl90cmFjZUlkLFxuICAgICAgdHJhY2VGbGFnczogc3BhblV0aWxzLlRSQUNFX0ZMQUdfTk9ORSxcbiAgICB9O1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgIGVuZChfdGltZXN0YW1wKSB7fVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgc2V0QXR0cmlidXRlKF9rZXksIF92YWx1ZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBzZXRBdHRyaWJ1dGVzKF92YWx1ZXMpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgc2V0U3RhdHVzKF9zdGF0dXMpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICAgdXBkYXRlTmFtZShfbmFtZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gICBpc1JlY29yZGluZygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgIGFkZEV2ZW50KFxuICAgIF9uYW1lLFxuICAgIF9hdHRyaWJ1dGVzT3JTdGFydFRpbWUsXG4gICAgX3N0YXJ0VGltZSxcbiAgKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBzaG91bGQgZ2VuZXJhbGx5IG5vdCBiZSB1c2VkLFxuICAgKiBidXQgd2UgbmVlZCBpdCBmb3IgYmVpbmcgY29tcGxpYW50IHdpdGggdGhlIE9URUwgU3BhbiBpbnRlcmZhY2UuXG4gICAqXG4gICAqIEBoaWRkZW5cbiAgICogQGludGVybmFsXG4gICAqL1xuICAgYWRkTGluayhfbGluaykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgc2hvdWxkIGdlbmVyYWxseSBub3QgYmUgdXNlZCxcbiAgICogYnV0IHdlIG5lZWQgaXQgZm9yIGJlaW5nIGNvbXBsaWFudCB3aXRoIHRoZSBPVEVMIFNwYW4gaW50ZXJmYWNlLlxuICAgKlxuICAgKiBAaGlkZGVuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgIGFkZExpbmtzKF9saW5rcykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgc2hvdWxkIGdlbmVyYWxseSBub3QgYmUgdXNlZCxcbiAgICogYnV0IHdlIG5lZWQgaXQgZm9yIGJlaW5nIGNvbXBsaWFudCB3aXRoIHRoZSBPVEVMIFNwYW4gaW50ZXJmYWNlLlxuICAgKlxuICAgKiBAaGlkZGVuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgIHJlY29yZEV4Y2VwdGlvbihfZXhjZXB0aW9uLCBfdGltZSkge1xuICAgIC8vIG5vb3BcbiAgfVxufVxuXG5leHBvcnRzLlNlbnRyeU5vblJlY29yZGluZ1NwYW4gPSBTZW50cnlOb25SZWNvcmRpbmdTcGFuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VudHJ5Tm9uUmVjb3JkaW5nU3Bhbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInByb3BhZ2F0aW9uQ29udGV4dCIsInJlcXVpcmUiLCJzcGFuVXRpbHMiLCJTZW50cnlOb25SZWNvcmRpbmdTcGFuIiwiY29uc3RydWN0b3IiLCJzcGFuQ29udGV4dCIsIl90cmFjZUlkIiwidHJhY2VJZCIsImdlbmVyYXRlVHJhY2VJZCIsIl9zcGFuSWQiLCJzcGFuSWQiLCJnZW5lcmF0ZVNwYW5JZCIsInRyYWNlRmxhZ3MiLCJUUkFDRV9GTEFHX05PTkUiLCJlbmQiLCJfdGltZXN0YW1wIiwic2V0QXR0cmlidXRlIiwiX2tleSIsIl92YWx1ZSIsInNldEF0dHJpYnV0ZXMiLCJfdmFsdWVzIiwic2V0U3RhdHVzIiwiX3N0YXR1cyIsInVwZGF0ZU5hbWUiLCJfbmFtZSIsImlzUmVjb3JkaW5nIiwiYWRkRXZlbnQiLCJfYXR0cmlidXRlc09yU3RhcnRUaW1lIiwiX3N0YXJ0VGltZSIsImFkZExpbmsiLCJfbGluayIsImFkZExpbmtzIiwiX2xpbmtzIiwicmVjb3JkRXhjZXB0aW9uIiwiX2V4Y2VwdGlvbiIsIl90aW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst envelope = __webpack_require__(/*! ../envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/envelope.js\");\nconst metricSummary = __webpack_require__(/*! ../metrics/metric-summary.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst propagationContext = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst logSpans = __webpack_require__(/*! ./logSpans.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\");\nconst measurement = __webpack_require__(/*! ./measurement.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/measurement.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\nconst MAX_SPAN_COUNT = 1000;\n\n/**\n * Span contains all data about a span\n */\nclass SentrySpan {\n  /** Epoch timestamp in seconds when the span started. */\n\n  /** Epoch timestamp in seconds when the span ended. */\n\n  /** Internal keeper of the status */\n\n  /** The timed events added to this span. */\n\n  /** if true, treat span as a standalone span (not part of a transaction) */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startSpan()`\n   * or other span methods.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || propagationContext.generateTraceId();\n    this._spanId = spanContext.spanId || propagationContext.generateSpanId();\n    this._startTime = spanContext.startTimestamp || time.timestampInSeconds();\n    this._attributes = {};\n    this.setAttributes({\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes\n    });\n    this._name = spanContext.name;\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n    this._events = [];\n    this._isStandaloneSpan = spanContext.isStandalone;\n\n    // If the span is already ended, ensure we finalize the span immediately\n    if (this._endTime) {\n      this._onSpanEnded();\n    }\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  addLink(_link) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  addLinks(_links) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n  recordException(_exception, _time) {\n    // noop\n  }\n\n  /** @inheritdoc */\n  spanContext() {\n    const {\n      _spanId: spanId,\n      _traceId: traceId,\n      _sampled: sampled\n    } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? spanUtils.TRACE_FLAG_SAMPLED : spanUtils.TRACE_FLAG_NONE\n    };\n  }\n\n  /** @inheritdoc */\n  setAttribute(key, value) {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n    return this;\n  }\n\n  /** @inheritdoc */\n  setAttributes(attributes) {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for browser tracing where we want to adjust the start time afterwards.\n   * USE THIS WITH CAUTION!\n   *\n   * @hidden\n   * @internal\n   */\n  updateStartTime(timeInput) {\n    this._startTime = spanUtils.spanTimeInputToSeconds(timeInput);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setStatus(value) {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateName(name) {\n    this._name = name;\n    this.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom');\n    return this;\n  }\n\n  /** @inheritdoc */\n  end(endTimestamp) {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n    this._endTime = spanUtils.spanTimeInputToSeconds(endTimestamp);\n    logSpans.logSpanEnd(this);\n    this._onSpanEnded();\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n  getSpanJSON() {\n    return object.dropUndefinedKeys({\n      data: this._attributes,\n      description: this._name,\n      op: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: spanUtils.getStatusMessage(this._status),\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],\n      _metrics_summary: metricSummary.getMetricSummaryJsonForSpan(this),\n      profile_id: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID],\n      exclusive_time: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME],\n      measurements: measurement.timedEventsToMeasurements(this._events),\n      is_segment: this._isStandaloneSpan && spanUtils.getRootSpan(this) === this || undefined,\n      segment_id: this._isStandaloneSpan ? spanUtils.getRootSpan(this).spanContext().spanId : undefined\n    });\n  }\n\n  /** @inheritdoc */\n  isRecording() {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  addEvent(name, attributesOrStartTime, startTime) {\n    debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Adding an event to span:', name);\n    const time$1 = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || time.timestampInSeconds();\n    const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};\n    const event = {\n      name,\n      time: spanUtils.spanTimeInputToSeconds(time$1),\n      attributes\n    };\n    this._events.push(event);\n    return this;\n  }\n\n  /**\n   * This method should generally not be used,\n   * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.\n   * USE THIS WITH CAUTION!\n   * @internal\n   * @hidden\n   * @experimental\n   */\n  isStandaloneSpan() {\n    return !!this._isStandaloneSpan;\n  }\n\n  /** Emit `spanEnd` when the span is ended. */\n  _onSpanEnded() {\n    const client = currentScopes.getClient();\n    if (client) {\n      client.emit('spanEnd', this);\n    }\n\n    // A segment span is basically the root span of a local span tree.\n    // So for now, this is either what we previously refer to as the root span,\n    // or a standalone span.\n    const isSegmentSpan = this._isStandaloneSpan || this === spanUtils.getRootSpan(this);\n    if (!isSegmentSpan) {\n      return;\n    }\n\n    // if this is a standalone span, we send it immediately\n    if (this._isStandaloneSpan) {\n      if (this._sampled) {\n        sendSpanEnvelope(envelope.createSpanEnvelope([this], client));\n      } else {\n        debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'span');\n        }\n      }\n      return;\n    }\n    const transactionEvent = this._convertSpanToTransaction();\n    if (transactionEvent) {\n      const scope = utils.getCapturedScopesOnSpan(this).scope || currentScopes.getCurrentScope();\n      scope.captureEvent(transactionEvent);\n    }\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n  _convertSpanToTransaction() {\n    // We can only convert finished spans\n    if (!isFullFinishedSpan(spanUtils.spanToJSON(this))) {\n      return undefined;\n    }\n    if (!this._name) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n    const {\n      scope: capturedSpanScope,\n      isolationScope: capturedSpanIsolationScope\n    } = utils.getCapturedScopesOnSpan(this);\n    const scope = capturedSpanScope || currentScopes.getCurrentScope();\n    const client = scope.getClient() || currentScopes.getClient();\n    if (this._sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n      return undefined;\n    }\n\n    // The transaction span itself as well as any potential standalone spans should be filtered out\n    const finishedSpans = spanUtils.getSpanDescendants(this).filter(span => span !== this && !isStandaloneSpan(span));\n    const spans = finishedSpans.map(span => spanUtils.spanToJSON(span)).filter(isFullFinishedSpan);\n    const source = this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    // remove internal root span attributes we don't need to send.\n    /* eslint-disable @typescript-eslint/no-dynamic-delete */\n    delete this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    spans.forEach(span => {\n      span.data && delete span.data[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    });\n    // eslint-enabled-next-line @typescript-eslint/no-dynamic-delete\n\n    const transaction = {\n      contexts: {\n        trace: spanUtils.spanToTransactionTraceContext(this)\n      },\n      spans:\n      // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here\n      // we do not use spans anymore after this point\n      spans.length > MAX_SPAN_COUNT ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT) : spans,\n      start_timestamp: this._startTime,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        ...object.dropUndefinedKeys({\n          dynamicSamplingContext: dynamicSamplingContext.getDynamicSamplingContextFromSpan(this)\n        })\n      },\n      _metrics_summary: metricSummary.getMetricSummaryJsonForSpan(this),\n      ...(source && {\n        transaction_info: {\n          source\n        }\n      })\n    };\n    const measurements = measurement.timedEventsToMeasurements(this._events);\n    const hasMeasurements = measurements && Object.keys(measurements).length;\n    if (hasMeasurements) {\n      debugBuild.DEBUG_BUILD && logger.logger.log('[Measurements] Adding measurements to transaction event', JSON.stringify(measurements, undefined, 2));\n      transaction.measurements = measurements;\n    }\n    return transaction;\n  }\n}\nfunction isSpanTimeInput(value) {\n  return value && typeof value === 'number' || value instanceof Date || Array.isArray(value);\n}\n\n// We want to filter out any incomplete SpanJSON objects\nfunction isFullFinishedSpan(input) {\n  return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;\n}\n\n/** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */\nfunction isStandaloneSpan(span) {\n  return span instanceof SentrySpan && span.isStandaloneSpan();\n}\n\n/**\n * Sends a `SpanEnvelope`.\n *\n * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,\n * the envelope will not be sent either.\n */\nfunction sendSpanEnvelope(envelope) {\n  const client = currentScopes.getClient();\n  if (!client) {\n    return;\n  }\n  const spanItems = envelope[1];\n  if (!spanItems || spanItems.length === 0) {\n    client.recordDroppedEvent('before_send', 'span');\n    return;\n  }\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\nexports.SentrySpan = SentrySpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst SPAN_STATUS_UNSET = 0;\nconst SPAN_STATUS_OK = 1;\nconst SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nfunction getSpanStatusFromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return {\n      code: SPAN_STATUS_OK\n    };\n  }\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'unauthenticated'\n        };\n      case 403:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'permission_denied'\n        };\n      case 404:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'not_found'\n        };\n      case 409:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'already_exists'\n        };\n      case 413:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'failed_precondition'\n        };\n      case 429:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'resource_exhausted'\n        };\n      case 499:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'cancelled'\n        };\n      default:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'invalid_argument'\n        };\n    }\n  }\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'unimplemented'\n        };\n      case 503:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'unavailable'\n        };\n      case 504:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'deadline_exceeded'\n        };\n      default:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'internal_error'\n        };\n    }\n  }\n  return {\n    code: SPAN_STATUS_ERROR,\n    message: 'unknown_error'\n  };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nfunction setHttpStatus(span, httpStatus) {\n  span.setAttribute('http.response.status_code', httpStatus);\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\nexports.SPAN_STATUS_ERROR = SPAN_STATUS_ERROR;\nexports.SPAN_STATUS_OK = SPAN_STATUS_OK;\nexports.SPAN_STATUS_UNSET = SPAN_STATUS_UNSET;\nexports.getSpanStatusFromHttpCode = getSpanStatusFromHttpCode;\nexports.setHttpStatus = setHttpStatus;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9zcGFuc3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsaUJBQWlCLEdBQUcsQ0FBQztBQUMzQixNQUFNQyxjQUFjLEdBQUcsQ0FBQztBQUN4QixNQUFNQyxpQkFBaUIsR0FBRyxDQUFDOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLHlCQUF5QkEsQ0FBQ0MsVUFBVSxFQUFFO0VBQzdDLElBQUlBLFVBQVUsR0FBRyxHQUFHLElBQUlBLFVBQVUsSUFBSSxHQUFHLEVBQUU7SUFDekMsT0FBTztNQUFFQyxJQUFJLEVBQUVKO0lBQWUsQ0FBQztFQUNqQztFQUVBLElBQUlHLFVBQVUsSUFBSSxHQUFHLElBQUlBLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDekMsUUFBUUEsVUFBVTtNQUNoQixLQUFLLEdBQUc7UUFDTixPQUFPO1VBQUVDLElBQUksRUFBRUgsaUJBQWlCO1VBQUVJLE9BQU8sRUFBRTtRQUFrQixDQUFDO01BQ2hFLEtBQUssR0FBRztRQUNOLE9BQU87VUFBRUQsSUFBSSxFQUFFSCxpQkFBaUI7VUFBRUksT0FBTyxFQUFFO1FBQW9CLENBQUM7TUFDbEUsS0FBSyxHQUFHO1FBQ04sT0FBTztVQUFFRCxJQUFJLEVBQUVILGlCQUFpQjtVQUFFSSxPQUFPLEVBQUU7UUFBWSxDQUFDO01BQzFELEtBQUssR0FBRztRQUNOLE9BQU87VUFBRUQsSUFBSSxFQUFFSCxpQkFBaUI7VUFBRUksT0FBTyxFQUFFO1FBQWlCLENBQUM7TUFDL0QsS0FBSyxHQUFHO1FBQ04sT0FBTztVQUFFRCxJQUFJLEVBQUVILGlCQUFpQjtVQUFFSSxPQUFPLEVBQUU7UUFBc0IsQ0FBQztNQUNwRSxLQUFLLEdBQUc7UUFDTixPQUFPO1VBQUVELElBQUksRUFBRUgsaUJBQWlCO1VBQUVJLE9BQU8sRUFBRTtRQUFxQixDQUFDO01BQ25FLEtBQUssR0FBRztRQUNOLE9BQU87VUFBRUQsSUFBSSxFQUFFSCxpQkFBaUI7VUFBRUksT0FBTyxFQUFFO1FBQVksQ0FBQztNQUMxRDtRQUNFLE9BQU87VUFBRUQsSUFBSSxFQUFFSCxpQkFBaUI7VUFBRUksT0FBTyxFQUFFO1FBQW1CLENBQUM7SUFDbkU7RUFDRjtFQUVBLElBQUlGLFVBQVUsSUFBSSxHQUFHLElBQUlBLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDekMsUUFBUUEsVUFBVTtNQUNoQixLQUFLLEdBQUc7UUFDTixPQUFPO1VBQUVDLElBQUksRUFBRUgsaUJBQWlCO1VBQUVJLE9BQU8sRUFBRTtRQUFnQixDQUFDO01BQzlELEtBQUssR0FBRztRQUNOLE9BQU87VUFBRUQsSUFBSSxFQUFFSCxpQkFBaUI7VUFBRUksT0FBTyxFQUFFO1FBQWMsQ0FBQztNQUM1RCxLQUFLLEdBQUc7UUFDTixPQUFPO1VBQUVELElBQUksRUFBRUgsaUJBQWlCO1VBQUVJLE9BQU8sRUFBRTtRQUFvQixDQUFDO01BQ2xFO1FBQ0UsT0FBTztVQUFFRCxJQUFJLEVBQUVILGlCQUFpQjtVQUFFSSxPQUFPLEVBQUU7UUFBaUIsQ0FBQztJQUNqRTtFQUNGO0VBRUEsT0FBTztJQUFFRCxJQUFJLEVBQUVILGlCQUFpQjtJQUFFSSxPQUFPLEVBQUU7RUFBZ0IsQ0FBQztBQUM5RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGFBQWFBLENBQUNDLElBQUksRUFBRUosVUFBVSxFQUFFO0VBQ3ZDSSxJQUFJLENBQUNDLFlBQVksQ0FBQywyQkFBMkIsRUFBRUwsVUFBVSxDQUFDO0VBRTFELE1BQU1NLFVBQVUsR0FBR1AseUJBQXlCLENBQUNDLFVBQVUsQ0FBQztFQUN4RCxJQUFJTSxVQUFVLENBQUNKLE9BQU8sS0FBSyxlQUFlLEVBQUU7SUFDMUNFLElBQUksQ0FBQ0csU0FBUyxDQUFDRCxVQUFVLENBQUM7RUFDNUI7QUFDRjtBQUVBWix5QkFBeUIsR0FBR0ksaUJBQWlCO0FBQzdDSixzQkFBc0IsR0FBR0csY0FBYztBQUN2Q0gseUJBQXlCLEdBQUdFLGlCQUFpQjtBQUM3Q0YsaUNBQWlDLEdBQUdLLHlCQUF5QjtBQUM3REwscUJBQXFCLEdBQUdTLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy9zcGFuc3RhdHVzLmpzPzgwZTIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgU1BBTl9TVEFUVVNfVU5TRVQgPSAwO1xuY29uc3QgU1BBTl9TVEFUVVNfT0sgPSAxO1xuY29uc3QgU1BBTl9TVEFUVVNfRVJST1IgPSAyO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgSFRUUCBzdGF0dXMgY29kZSBpbnRvIGEgc2VudHJ5IHN0YXR1cyB3aXRoIGEgbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0gaHR0cFN0YXR1cyBUaGUgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZS5cbiAqIEByZXR1cm5zIFRoZSBzcGFuIHN0YXR1cyBvciB1bmtub3duX2Vycm9yLlxuICovXG4vLyBodHRwczovL2RldmVsb3Auc2VudHJ5LmRldi9zZGsvZXZlbnQtcGF5bG9hZHMvc3Bhbi9cbmZ1bmN0aW9uIGdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUoaHR0cFN0YXR1cykge1xuICBpZiAoaHR0cFN0YXR1cyA8IDQwMCAmJiBodHRwU3RhdHVzID49IDEwMCkge1xuICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX09LIH07XG4gIH1cblxuICBpZiAoaHR0cFN0YXR1cyA+PSA0MDAgJiYgaHR0cFN0YXR1cyA8IDUwMCkge1xuICAgIHN3aXRjaCAoaHR0cFN0YXR1cykge1xuICAgICAgY2FzZSA0MDE6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAndW5hdXRoZW50aWNhdGVkJyB9O1xuICAgICAgY2FzZSA0MDM6XG4gICAgICAgIHJldHVybiB7IGNvZGU6IFNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAncGVybWlzc2lvbl9kZW5pZWQnIH07XG4gICAgICBjYXNlIDQwNDpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdub3RfZm91bmQnIH07XG4gICAgICBjYXNlIDQwOTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdhbHJlYWR5X2V4aXN0cycgfTtcbiAgICAgIGNhc2UgNDEzOlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ZhaWxlZF9wcmVjb25kaXRpb24nIH07XG4gICAgICBjYXNlIDQyOTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdyZXNvdXJjZV9leGhhdXN0ZWQnIH07XG4gICAgICBjYXNlIDQ5OTpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdjYW5jZWxsZWQnIH07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2ludmFsaWRfYXJndW1lbnQnIH07XG4gICAgfVxuICB9XG5cbiAgaWYgKGh0dHBTdGF0dXMgPj0gNTAwICYmIGh0dHBTdGF0dXMgPCA2MDApIHtcbiAgICBzd2l0Y2ggKGh0dHBTdGF0dXMpIHtcbiAgICAgIGNhc2UgNTAxOlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3VuaW1wbGVtZW50ZWQnIH07XG4gICAgICBjYXNlIDUwMzpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICd1bmF2YWlsYWJsZScgfTtcbiAgICAgIGNhc2UgNTA0OlxuICAgICAgICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ2RlYWRsaW5lX2V4Y2VlZGVkJyB9O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHsgY29kZTogU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICdpbnRlcm5hbF9lcnJvcicgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBjb2RlOiBTUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogJ3Vua25vd25fZXJyb3InIH07XG59XG5cbi8qKlxuICogU2V0cyB0aGUgSHR0cCBzdGF0dXMgYXR0cmlidXRlcyBvbiB0aGUgY3VycmVudCBzcGFuIGJhc2VkIG9uIHRoZSBodHRwIGNvZGUuXG4gKiBBZGRpdGlvbmFsbHksIHRoZSBzcGFuJ3Mgc3RhdHVzIGlzIHVwZGF0ZWQsIGRlcGVuZGluZyBvbiB0aGUgaHR0cCBjb2RlLlxuICovXG5mdW5jdGlvbiBzZXRIdHRwU3RhdHVzKHNwYW4sIGh0dHBTdGF0dXMpIHtcbiAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2h0dHAucmVzcG9uc2Uuc3RhdHVzX2NvZGUnLCBodHRwU3RhdHVzKTtcblxuICBjb25zdCBzcGFuU3RhdHVzID0gZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZShodHRwU3RhdHVzKTtcbiAgaWYgKHNwYW5TdGF0dXMubWVzc2FnZSAhPT0gJ3Vua25vd25fZXJyb3InKSB7XG4gICAgc3Bhbi5zZXRTdGF0dXMoc3BhblN0YXR1cyk7XG4gIH1cbn1cblxuZXhwb3J0cy5TUEFOX1NUQVRVU19FUlJPUiA9IFNQQU5fU1RBVFVTX0VSUk9SO1xuZXhwb3J0cy5TUEFOX1NUQVRVU19PSyA9IFNQQU5fU1RBVFVTX09LO1xuZXhwb3J0cy5TUEFOX1NUQVRVU19VTlNFVCA9IFNQQU5fU1RBVFVTX1VOU0VUO1xuZXhwb3J0cy5nZXRTcGFuU3RhdHVzRnJvbUh0dHBDb2RlID0gZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZTtcbmV4cG9ydHMuc2V0SHR0cFN0YXR1cyA9IHNldEh0dHBTdGF0dXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGFuc3RhdHVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU1BBTl9TVEFUVVNfVU5TRVQiLCJTUEFOX1NUQVRVU19PSyIsIlNQQU5fU1RBVFVTX0VSUk9SIiwiZ2V0U3BhblN0YXR1c0Zyb21IdHRwQ29kZSIsImh0dHBTdGF0dXMiLCJjb2RlIiwibWVzc2FnZSIsInNldEh0dHBTdGF0dXMiLCJzcGFuIiwic2V0QXR0cmlidXRlIiwic3BhblN0YXR1cyIsInNldFN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/trace.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst index = __webpack_require__(/*! ../asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst propagationContext = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst tracing = __webpack_require__(/*! ../utils-hoist/tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js\");\nconst handleCallbackErrors = __webpack_require__(/*! ../utils/handleCallbackErrors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\");\nconst hasTracingEnabled = __webpack_require__(/*! ../utils/hasTracingEnabled.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\");\nconst spanOnScope = __webpack_require__(/*! ../utils/spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\nconst spanUtils = __webpack_require__(/*! ../utils/spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ./dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst logSpans = __webpack_require__(/*! ./logSpans.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/logSpans.js\");\nconst sampling = __webpack_require__(/*! ./sampling.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sampling.js\");\nconst sentryNonRecordingSpan = __webpack_require__(/*! ./sentryNonRecordingSpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js\");\nconst sentrySpan = __webpack_require__(/*! ./sentrySpan.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js\");\nconst spanstatus = __webpack_require__(/*! ./spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\");\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n  const spanArguments = parseSentrySpanArguments(options);\n  const {\n    forceTransaction,\n    parentSpan: customParentSpan\n  } = options;\n  return currentScopes.withScope(options.scope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n    return wrapper(() => {\n      const scope = currentScopes.getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan ? new sentryNonRecordingSpan.SentryNonRecordingSpan() : createChildOrRootSpan({\n        parentSpan,\n        spanArguments,\n        forceTransaction,\n        scope\n      });\n      spanOnScope._setSpanForScope(scope, activeSpan);\n      return handleCallbackErrors.handleCallbackErrors(() => callback(activeSpan), () => {\n        // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n        const {\n          status\n        } = spanUtils.spanToJSON(activeSpan);\n        if (activeSpan.isRecording() && (!status || status === 'ok')) {\n          activeSpan.setStatus({\n            code: spanstatus.SPAN_STATUS_ERROR,\n            message: 'internal_error'\n          });\n        }\n      }, () => activeSpan.end());\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n  const spanArguments = parseSentrySpanArguments(options);\n  const {\n    forceTransaction,\n    parentSpan: customParentSpan\n  } = options;\n  return currentScopes.withScope(options.scope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n    return wrapper(() => {\n      const scope = currentScopes.getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan ? new sentryNonRecordingSpan.SentryNonRecordingSpan() : createChildOrRootSpan({\n        parentSpan,\n        spanArguments,\n        forceTransaction,\n        scope\n      });\n      spanOnScope._setSpanForScope(scope, activeSpan);\n      function finishAndSetSpan() {\n        activeSpan.end();\n      }\n      return handleCallbackErrors.handleCallbackErrors(() => callback(activeSpan, finishAndSetSpan), () => {\n        // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n        const {\n          status\n        } = spanUtils.spanToJSON(activeSpan);\n        if (activeSpan.isRecording() && (!status || status === 'ok')) {\n          activeSpan.setStatus({\n            code: spanstatus.SPAN_STATUS_ERROR,\n            message: 'internal_error'\n          });\n        }\n      });\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n  const spanArguments = parseSentrySpanArguments(options);\n  const {\n    forceTransaction,\n    parentSpan: customParentSpan\n  } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope ? callback => currentScopes.withScope(options.scope, callback) : customParentSpan !== undefined ? callback => withActiveSpan(customParentSpan, callback) : callback => callback();\n  return wrapper(() => {\n    const scope = currentScopes.getCurrentScope();\n    const parentSpan = getParentSpan(scope);\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n    if (shouldSkipSpan) {\n      return new sentryNonRecordingSpan.SentryNonRecordingSpan();\n    }\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nconst continueTrace = (options, callback) => {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n  const {\n    sentryTrace,\n    baggage\n  } = options;\n  return currentScopes.withScope(scope => {\n    const propagationContext = tracing.propagationContextFromHeaders(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n  return currentScopes.withScope(scope => {\n    spanOnScope._setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const acs = getAcs();\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n  return currentScopes.withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      [SUPPRESS_TRACING_KEY]: true\n    });\n    return callback();\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nfunction startNewTrace(callback) {\n  return currentScopes.withScope(scope => {\n    scope.setPropagationContext({\n      traceId: propagationContext.generateTraceId()\n    });\n    debugBuild.DEBUG_BUILD && logger.logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope\n}) {\n  if (!hasTracingEnabled.hasTracingEnabled()) {\n    return new sentryNonRecordingSpan.SentryNonRecordingSpan();\n  }\n  const isolationScope = currentScopes.getIsolationScope();\n  let span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    spanUtils.addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = dynamicSamplingContext.getDynamicSamplingContextFromSpan(parentSpan);\n    const {\n      traceId,\n      spanId: parentSpanId\n    } = parentSpan.spanContext();\n    const parentSampled = spanUtils.spanIsSampled(parentSpan);\n    span = _startRootSpan({\n      traceId,\n      parentSpanId,\n      ...spanArguments\n    }, scope, parentSampled);\n    dynamicSamplingContext.freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext()\n    };\n    span = _startRootSpan({\n      traceId,\n      parentSpanId,\n      ...spanArguments\n    }, scope, parentSampled);\n    if (dsc) {\n      dynamicSamplingContext.freezeDscOnSpan(span, dsc);\n    }\n  }\n  logSpans.logSpanStart(span);\n  utils.setCapturedScopesOnSpan(span, scope, isolationScope);\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options) {\n  const exp = options.experimental || {};\n  const initialCtx = {\n    isStandalone: exp.standalone,\n    ...options\n  };\n  if (options.startTime) {\n    const ctx = {\n      ...initialCtx\n    };\n    ctx.startTimestamp = spanUtils.spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n  return initialCtx;\n}\nfunction getAcs() {\n  const carrier$1 = carrier.getMainCarrier();\n  return index.getAsyncContextStrategy(carrier$1);\n}\nfunction _startRootSpan(spanArguments, scope, parentSampled) {\n  const client = currentScopes.getClient();\n  const options = client && client.getOptions() || {};\n  const {\n    name = '',\n    attributes\n  } = spanArguments;\n  const [sampled, sampleRate] = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? [false] : sampling.sampleSpan(options, {\n    name,\n    parentSampled,\n    attributes,\n    transactionContext: {\n      name,\n      parentSampled\n    }\n  });\n  const rootSpan = new sentrySpan.SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      ...spanArguments.attributes\n    },\n    sampled\n  });\n  if (sampleRate !== undefined) {\n    rootSpan.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, sampleRate);\n  }\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan, scope, spanArguments) {\n  const {\n    spanId,\n    traceId\n  } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanUtils.spanIsSampled(parentSpan);\n  const childSpan = sampled ? new sentrySpan.SentrySpan({\n    ...spanArguments,\n    parentSpanId: spanId,\n    traceId,\n    sampled\n  }) : new sentryNonRecordingSpan.SentryNonRecordingSpan({\n    traceId\n  });\n  spanUtils.addChildSpanToSpan(parentSpan, childSpan);\n  const client = currentScopes.getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n  return childSpan;\n}\nfunction getParentSpan(scope) {\n  const span = spanOnScope._getSpanForScope(scope);\n  if (!span) {\n    return undefined;\n  }\n  const client = currentScopes.getClient();\n  const options = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return spanUtils.getRootSpan(span);\n  }\n  return span;\n}\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined ? callback => {\n    return withActiveSpan(parentSpan, callback);\n  } : callback => callback();\n}\nexports.continueTrace = continueTrace;\nexports.startInactiveSpan = startInactiveSpan;\nexports.startNewTrace = startNewTrace;\nexports.startSpan = startSpan;\nexports.startSpanManual = startSpanManual;\nexports.suppressTracing = suppressTracing;\nexports.withActiveSpan = withActiveSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/tracing/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nfunction setCapturedScopesOnSpan(span, scope, isolationScope) {\n  if (span) {\n    object.addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    object.addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nfunction getCapturedScopesOnSpan(span) {\n  return {\n    scope: span[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: span[ISOLATION_SCOPE_ON_START_SPAN_FIELD]\n  };\n}\nexports.getCapturedScopesOnSpan = getCapturedScopesOnSpan;\nexports.setCapturedScopesOnSpan = setCapturedScopesOnSpan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy91dGlscy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQztBQUVsRCxNQUFNQyx5QkFBeUIsR0FBRyxjQUFjO0FBQ2hELE1BQU1DLG1DQUFtQyxHQUFHLHVCQUF1Qjs7QUFFbkU7QUFDQSxTQUFTQyx1QkFBdUJBLENBQUNDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxjQUFjLEVBQUU7RUFDNUQsSUFBSUYsSUFBSSxFQUFFO0lBQ1JMLE1BQU0sQ0FBQ1Esd0JBQXdCLENBQUNILElBQUksRUFBRUYsbUNBQW1DLEVBQUVJLGNBQWMsQ0FBQztJQUMxRlAsTUFBTSxDQUFDUSx3QkFBd0IsQ0FBQ0gsSUFBSSxFQUFFSCx5QkFBeUIsRUFBRUksS0FBSyxDQUFDO0VBQ3pFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0csdUJBQXVCQSxDQUFDSixJQUFJLEVBQUU7RUFDckMsT0FBTztJQUNMQyxLQUFLLEVBQUdELElBQUksQ0FBR0gseUJBQXlCLENBQUM7SUFDekNLLGNBQWMsRUFBR0YsSUFBSSxDQUFHRixtQ0FBbUM7RUFDN0QsQ0FBQztBQUNIO0FBRUFMLCtCQUErQixHQUFHVyx1QkFBdUI7QUFDekRYLCtCQUErQixHQUFHTSx1QkFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhY2luZy91dGlscy5qcz9jZDQzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L29iamVjdC5qcycpO1xuXG5jb25zdCBTQ09QRV9PTl9TVEFSVF9TUEFOX0ZJRUxEID0gJ19zZW50cnlTY29wZSc7XG5jb25zdCBJU09MQVRJT05fU0NPUEVfT05fU1RBUlRfU1BBTl9GSUVMRCA9ICdfc2VudHJ5SXNvbGF0aW9uU2NvcGUnO1xuXG4vKiogU3RvcmUgdGhlIHNjb3BlICYgaXNvbGF0aW9uIHNjb3BlIGZvciBhIHNwYW4sIHdoaWNoIGNhbiB0aGUgYmUgdXNlZCB3aGVuIGl0IGlzIGZpbmlzaGVkLiAqL1xuZnVuY3Rpb24gc2V0Q2FwdHVyZWRTY29wZXNPblNwYW4oc3Bhbiwgc2NvcGUsIGlzb2xhdGlvblNjb3BlKSB7XG4gIGlmIChzcGFuKSB7XG4gICAgb2JqZWN0LmFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eShzcGFuLCBJU09MQVRJT05fU0NPUEVfT05fU1RBUlRfU1BBTl9GSUVMRCwgaXNvbGF0aW9uU2NvcGUpO1xuICAgIG9iamVjdC5hZGROb25FbnVtZXJhYmxlUHJvcGVydHkoc3BhbiwgU0NPUEVfT05fU1RBUlRfU1BBTl9GSUVMRCwgc2NvcGUpO1xuICB9XG59XG5cbi8qKlxuICogR3JhYnMgdGhlIHNjb3BlIGFuZCBpc29sYXRpb24gc2NvcGUgb2ZmIGEgc3BhbiB0aGF0IHdlcmUgYWN0aXZlIHdoZW4gdGhlIHNwYW4gd2FzIHN0YXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGdldENhcHR1cmVkU2NvcGVzT25TcGFuKHNwYW4pIHtcbiAgcmV0dXJuIHtcbiAgICBzY29wZTogKHNwYW4gKVtTQ09QRV9PTl9TVEFSVF9TUEFOX0ZJRUxEXSxcbiAgICBpc29sYXRpb25TY29wZTogKHNwYW4gKVtJU09MQVRJT05fU0NPUEVfT05fU1RBUlRfU1BBTl9GSUVMRF0sXG4gIH07XG59XG5cbmV4cG9ydHMuZ2V0Q2FwdHVyZWRTY29wZXNPblNwYW4gPSBnZXRDYXB0dXJlZFNjb3Blc09uU3BhbjtcbmV4cG9ydHMuc2V0Q2FwdHVyZWRTY29wZXNPblNwYW4gPSBzZXRDYXB0dXJlZFNjb3Blc09uU3Bhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwib2JqZWN0IiwicmVxdWlyZSIsIlNDT1BFX09OX1NUQVJUX1NQQU5fRklFTEQiLCJJU09MQVRJT05fU0NPUEVfT05fU1RBUlRfU1BBTl9GSUVMRCIsInNldENhcHR1cmVkU2NvcGVzT25TcGFuIiwic3BhbiIsInNjb3BlIiwiaXNvbGF0aW9uU2NvcGUiLCJhZGROb25FbnVtZXJhYmxlUHJvcGVydHkiLCJnZXRDYXB0dXJlZFNjb3Blc09uU3BhbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/tracing/utils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/transports/base.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/transports/base.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst error = __webpack_require__(/*! ../utils-hoist/error.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst promisebuffer = __webpack_require__(/*! ../utils-hoist/promisebuffer.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js\");\nconst ratelimit = __webpack_require__(/*! ../utils-hoist/ratelimit.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js\");\nconst syncpromise = __webpack_require__(/*! ../utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nfunction createTransport(options, makeRequest, buffer = promisebuffer.makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE)) {\n  let rateLimits = {};\n  const flush = timeout => buffer.drain(timeout);\n  function send(envelope$1) {\n    const filteredEnvelopeItems = [];\n\n    // Drop rate limited items from envelope\n    envelope.forEachEnvelopeItem(envelope$1, (item, type) => {\n      const dataCategory = envelope.envelopeItemTypeToDataCategory(type);\n      if (ratelimit.isRateLimited(rateLimits, dataCategory)) {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return syncpromise.resolvedSyncPromise({});\n    }\n    const filteredEnvelope = envelope.createEnvelope(envelope$1[0], filteredEnvelopeItems);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = reason => {\n      envelope.forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelope.envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n    const requestTask = () => makeRequest({\n      body: envelope.serializeEnvelope(filteredEnvelope)\n    }).then(response => {\n      // We don't want to throw on NOK responses, but we want to at least log them\n      if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n        debugBuild.DEBUG_BUILD && logger.logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n      }\n      rateLimits = ratelimit.updateRateLimits(rateLimits, response);\n      return response;\n    }, error => {\n      recordEnvelopeLoss('network_error');\n      throw error;\n    });\n    return buffer.add(requestTask).then(result => result, error$1 => {\n      if (error$1 instanceof error.SentryError) {\n        debugBuild.DEBUG_BUILD && logger.logger.error('Skipped sending event because buffer is full.');\n        recordEnvelopeLoss('queue_overflow');\n        return syncpromise.resolvedSyncPromise({});\n      } else {\n        throw error$1;\n      }\n    });\n  }\n  return {\n    send,\n    flush\n  };\n}\nfunction getEventForEnvelopeItem(item, type) {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n  return Array.isArray(item) ? item[1] : undefined;\n}\nexports.DEFAULT_TRANSPORT_BUFFER_SIZE = DEFAULT_TRANSPORT_BUFFER_SIZE;\nexports.createTransport = createTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhbnNwb3J0cy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLDRGQUFtQixDQUFDO0FBQy9DLE1BQU1DLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyw4R0FBNEIsQ0FBQztBQUN0RCxNQUFNRSxLQUFLLEdBQUdGLG1CQUFPLENBQUMsd0dBQXlCLENBQUM7QUFDaEQsTUFBTUcsTUFBTSxHQUFHSCxtQkFBTyxDQUFDLDBHQUEwQixDQUFDO0FBQ2xELE1BQU1JLGFBQWEsR0FBR0osbUJBQU8sQ0FBQyx3SEFBaUMsQ0FBQztBQUNoRSxNQUFNSyxTQUFTLEdBQUdMLG1CQUFPLENBQUMsZ0hBQTZCLENBQUM7QUFDeEQsTUFBTU0sV0FBVyxHQUFHTixtQkFBTyxDQUFDLG9IQUErQixDQUFDO0FBRTVELE1BQU1PLDZCQUE2QixHQUFHLEVBQUU7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGVBQWVBLENBQ3RCQyxPQUFPLEVBQ1BDLFdBQVcsRUFDWEMsTUFBTSxHQUFHUCxhQUFhLENBQUNRLGlCQUFpQixDQUN0Q0gsT0FBTyxDQUFDSSxVQUFVLElBQUlOLDZCQUN4QixDQUFDLEVBQ0Q7RUFDQSxJQUFJTyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0VBQ25CLE1BQU1DLEtBQUssR0FBSUMsT0FBTyxJQUFLTCxNQUFNLENBQUNNLEtBQUssQ0FBQ0QsT0FBTyxDQUFDO0VBRWhELFNBQVNFLElBQUlBLENBQUNDLFVBQVUsRUFBRTtJQUN4QixNQUFNQyxxQkFBcUIsR0FBRyxFQUFFOztJQUVoQztJQUNBbkIsUUFBUSxDQUFDb0IsbUJBQW1CLENBQUNGLFVBQVUsRUFBRSxDQUFDRyxJQUFJLEVBQUVDLElBQUksS0FBSztNQUN2RCxNQUFN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T0FBTyxJQUFJQSxJQUFJLEtBQUssYUFBYSxFQUFFO0lBQzlDLE9BQU9vQixTQUFTO0VBQ2xCO0VBRUEsT0FBT1EsS0FBSyxDQUFDQyxPQUFPLENBQUM5QixJQUFJLENBQUMsR0FBSUEsSUFBSSxDQUFHLENBQUMsQ0FBQyxHQUFHcUIsU0FBUztBQUNyRDtBQUVBOUMscUNBQXFDLEdBQUdVLDZCQUE2QjtBQUNyRVYsdUJBQXVCLEdBQUdXLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhbnNwb3J0cy9iYXNlLmpzPzZkMDgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBlbnZlbG9wZSA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2VudmVsb3BlLmpzJyk7XG5jb25zdCBlcnJvciA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2Vycm9yLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnKTtcbmNvbnN0IHByb21pc2VidWZmZXIgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9wcm9taXNlYnVmZmVyLmpzJyk7XG5jb25zdCByYXRlbGltaXQgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9yYXRlbGltaXQuanMnKTtcbmNvbnN0IHN5bmNwcm9taXNlID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3Qvc3luY3Byb21pc2UuanMnKTtcblxuY29uc3QgREVGQVVMVF9UUkFOU1BPUlRfQlVGRkVSX1NJWkUgPSA2NDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGEgU2VudHJ5IGBUcmFuc3BvcnRgXG4gKlxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEBwYXJhbSBtYWtlUmVxdWVzdFxuICovXG5mdW5jdGlvbiBjcmVhdGVUcmFuc3BvcnQoXG4gIG9wdGlvbnMsXG4gIG1ha2VSZXF1ZXN0LFxuICBidWZmZXIgPSBwcm9taXNlYnVmZmVyLm1ha2VQcm9taXNlQnVmZmVyKFxuICAgIG9wdGlvbnMuYnVmZmVyU2l6ZSB8fCBERUZBVUxUX1RSQU5TUE9SVF9CVUZGRVJfU0laRSxcbiAgKSxcbikge1xuICBsZXQgcmF0ZUxpbWl0cyA9IHt9O1xuICBjb25zdCBmbHVzaCA9ICh0aW1lb3V0KSA9PiBidWZmZXIuZHJhaW4odGltZW91dCk7XG5cbiAgZnVuY3Rpb24gc2VuZChlbnZlbG9wZSQxKSB7XG4gICAgY29uc3QgZmlsdGVyZWRFbnZlbG9wZUl0ZW1zID0gW107XG5cbiAgICAvLyBEcm9wIHJhdGUgbGltaXRlZCBpdGVtcyBmcm9tIGVudmVsb3BlXG4gICAgZW52ZWxvcGUuZm9yRWFjaEVudmVsb3BlSXRlbShlbnZlbG9wZSQxLCAoaXRlbSwgdHlwZSkgPT4ge1xuICAgICAgY29uc3QgZGF0YUNhdGVnb3J5ID0gZW52ZWxvcGUuZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5KHR5cGUpO1xuICAgICAgaWYgKHJhdGVsaW1pdC5pc1JhdGVMaW1pdGVkKHJhdGVMaW1pdHMsIGRhdGFDYXRlZ29yeSkpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBnZXRFdmVudEZvckVudmVsb3BlSXRlbShpdGVtLCB0eXBlKTtcbiAgICAgICAgb3B0aW9ucy5yZWNvcmREcm9wcGVkRXZlbnQoJ3JhdGVsaW1pdF9iYWNrb2ZmJywgZGF0YUNhdGVnb3J5LCBldmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWx0ZXJlZEVudmVsb3BlSXRlbXMucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFNraXAgc2VuZGluZyBpZiBlbnZlbG9wZSBpcyBlbXB0eSBhZnRlciBmaWx0ZXJpbmcgb3V0IHJhdGUgbGltaXRlZCBldmVudHNcbiAgICBpZiAoZmlsdGVyZWRFbnZlbG9wZUl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHN5bmNwcm9taXNlLnJlc29sdmVkU3luY1Byb21pc2Uoe30pO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbHRlcmVkRW52ZWxvcGUgPSBlbnZlbG9wZS5jcmVhdGVFbnZlbG9wZShlbnZlbG9wZSQxWzBdLCBmaWx0ZXJlZEVudmVsb3BlSXRlbXMgKTtcblxuICAgIC8vIENyZWF0ZXMgY2xpZW50IHJlcG9ydCBmb3IgZWFjaCBpdGVtIGluIGFuIGVudmVsb3BlXG4gICAgY29uc3QgcmVjb3JkRW52ZWxvcGVMb3NzID0gKHJlYXNvbikgPT4ge1xuICAgICAgZW52ZWxvcGUuZm9yRWFjaEVudmVsb3BlSXRlbShmaWx0ZXJlZEVudmVsb3BlLCAoaXRlbSwgdHlwZSkgPT4ge1xuICAgICAgICBjb25zdCBldmVudCA9IGdldEV2ZW50Rm9yRW52ZWxvcGVJdGVtKGl0ZW0sIHR5cGUpO1xuICAgICAgICBvcHRpb25zLnJlY29yZERyb3BwZWRFdmVudChyZWFzb24sIGVudmVsb3BlLmVudmVsb3BlSXRlbVR5cGVUb0RhdGFDYXRlZ29yeSh0eXBlKSwgZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHJlcXVlc3RUYXNrID0gKCkgPT5cbiAgICAgIG1ha2VSZXF1ZXN0KHsgYm9keTogZW52ZWxvcGUuc2VyaWFsaXplRW52ZWxvcGUoZmlsdGVyZWRFbnZlbG9wZSkgfSkudGhlbihcbiAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gdGhyb3cgb24gTk9LIHJlc3BvbnNlcywgYnV0IHdlIHdhbnQgdG8gYXQgbGVhc3QgbG9nIHRoZW1cbiAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gdW5kZWZpbmVkICYmIChyZXNwb25zZS5zdGF0dXNDb2RlIDwgMjAwIHx8IHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gMzAwKSkge1xuICAgICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBsb2dnZXIubG9nZ2VyLndhcm4oYFNlbnRyeSByZXNwb25kZWQgd2l0aCBzdGF0dXMgY29kZSAke3Jlc3BvbnNlLnN0YXR1c0NvZGV9IHRvIHNlbnQgZXZlbnQuYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmF0ZUxpbWl0cyA9IHJhdGVsaW1pdC51cGRhdGVSYXRlTGltaXRzKHJhdGVMaW1pdHMsIHJlc3BvbnNlKTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICByZWNvcmRFbnZlbG9wZUxvc3MoJ25ldHdvcmtfZXJyb3InKTtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICByZXR1cm4gYnVmZmVyLmFkZChyZXF1ZXN0VGFzaykudGhlbihcbiAgICAgIHJlc3VsdCA9PiByZXN1bHQsXG4gICAgICBlcnJvciQxID0+IHtcbiAgICAgICAgaWYgKGVycm9yJDEgaW5zdGFuY2VvZiBlcnJvci5TZW50cnlFcnJvcikge1xuICAgICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgbG9nZ2VyLmxvZ2dlci5lcnJvcignU2tpcHBlZCBzZW5kaW5nIGV2ZW50IGJlY2F1c2UgYnVmZmVyIGlzIGZ1bGwuJyk7XG4gICAgICAgICAgcmVjb3JkRW52ZWxvcGVMb3NzKCdxdWV1ZV9vdmVyZmxvdycpO1xuICAgICAgICAgIHJldHVybiBzeW5jcHJvbWlzZS5yZXNvbHZlZFN5bmNQcm9taXNlKHt9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBlcnJvciQxO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNlbmQsXG4gICAgZmx1c2gsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50Rm9yRW52ZWxvcGVJdGVtKGl0ZW0sIHR5cGUpIHtcbiAgaWYgKHR5cGUgIT09ICdldmVudCcgJiYgdHlwZSAhPT0gJ3RyYW5zYWN0aW9uJykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gQXJyYXkuaXNBcnJheShpdGVtKSA/IChpdGVtIClbMV0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydHMuREVGQVVMVF9UUkFOU1BPUlRfQlVGRkVSX1NJWkUgPSBERUZBVUxUX1RSQU5TUE9SVF9CVUZGRVJfU0laRTtcbmV4cG9ydHMuY3JlYXRlVHJhbnNwb3J0ID0gY3JlYXRlVHJhbnNwb3J0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlYnVnQnVpbGQiLCJyZXF1aXJlIiwiZW52ZWxvcGUiLCJlcnJvciIsImxvZ2dlciIsInByb21pc2VidWZmZXIiLCJyYXRlbGltaXQiLCJzeW5jcHJvbWlzZSIsIkRFRkFVTFRfVFJBTlNQT1JUX0JVRkZFUl9TSVpFIiwiY3JlYXRlVHJhbnNwb3J0Iiwib3B0aW9ucyIsIm1ha2VSZXF1ZXN0IiwiYnVmZmVyIiwibWFrZVByb21pc2VCdWZmZXIiLCJidWZmZXJTaXplIiwicmF0ZUxpbWl0cyIsImZsdXNoIiwidGltZW91dCIsImRyYWluIiwic2VuZCIsImVudmVsb3BlJDEiLCJmaWx0ZXJlZEVudmVsb3BlSXRlbXMiLCJmb3JFYWNoRW52ZWxvcGVJdGVtIiwiaXRlbSIsInR5cGUiLCJkYXRhQ2F0ZWdvcnkiLCJlbnZlbG9wZUl0ZW1UeXBlVG9EYXRhQ2F0ZWdvcnkiLCJpc1JhdGVMaW1pdGVkIiwiZXZlbnQiLCJnZXRFdmVudEZvckVudmVsb3BlSXRlbSIsInJlY29yZERyb3BwZWRFdmVudCIsInB1c2giLCJsZW5ndGgiLCJyZXNvbHZlZFN5bmNQcm9taXNlIiwiZmlsdGVyZWRFbnZlbG9wZSIsImNyZWF0ZUVudmVsb3BlIiwicmVjb3JkRW52ZWxvcGVMb3NzIiwicmVhc29uIiwicmVxdWVzdFRhc2siLCJib2R5Iiwic2VyaWFsaXplRW52ZWxvcGUiLCJ0aGVuIiwicmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwidW5kZWZpbmVkIiwiREVCVUdfQlVJTEQiLCJ3YXJuIiwidXBkYXRlUmF0ZUxpbWl0cyIsImFkZCIsInJlc3VsdCIsImVycm9yJDEiLCJTZW50cnlFcnJvciIsIkFycmF5IiwiaXNBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/transports/base.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/transports/multiplexed.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/transports/multiplexed.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst api = __webpack_require__(/*! ../api.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/api.js\");\nconst dsn = __webpack_require__(/*! ../utils-hoist/dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\n\n/**\n * Gets an event from an envelope.\n *\n * This is only exported for use in the tests\n */\nfunction eventFromEnvelope(env, types) {\n  let event;\n  envelope.forEachEnvelopeItem(env, (item, type) => {\n    if (types.includes(type)) {\n      event = Array.isArray(item) ? item[1] : undefined;\n    }\n    // bail out if we found an event\n    return !!event;\n  });\n  return event;\n}\n\n/**\n * Creates a transport that overrides the release on all events.\n */\nfunction makeOverrideReleaseTransport(createTransport, release) {\n  return options => {\n    const transport = createTransport(options);\n    return {\n      ...transport,\n      send: async envelope => {\n        const event = eventFromEnvelope(envelope, ['event', 'transaction', 'profile', 'replay_event']);\n        if (event) {\n          event.release = release;\n        }\n        return transport.send(envelope);\n      }\n    };\n  };\n}\n\n/** Overrides the DSN in the envelope header  */\nfunction overrideDsn(envelope$1, dsn) {\n  return envelope.createEnvelope(dsn ? {\n    ...envelope$1[0],\n    dsn\n  } : envelope$1[0], envelope$1[1]);\n}\n\n/**\n * Creates a transport that can send events to different DSNs depending on the envelope contents.\n */\nfunction makeMultiplexedTransport(createTransport, matcher) {\n  return options => {\n    const fallbackTransport = createTransport(options);\n    const otherTransports = new Map();\n    function getTransport(dsn$1, release) {\n      // We create a transport for every unique dsn/release combination as there may be code from multiple releases in\n      // use at the same time\n      const key = release ? `${dsn$1}:${release}` : dsn$1;\n      let transport = otherTransports.get(key);\n      if (!transport) {\n        const validatedDsn = dsn.dsnFromString(dsn$1);\n        if (!validatedDsn) {\n          return undefined;\n        }\n        const url = api.getEnvelopeEndpointWithUrlEncodedAuth(validatedDsn, options.tunnel);\n        transport = release ? makeOverrideReleaseTransport(createTransport, release)({\n          ...options,\n          url\n        }) : createTransport({\n          ...options,\n          url\n        });\n        otherTransports.set(key, transport);\n      }\n      return [dsn$1, transport];\n    }\n    async function send(envelope) {\n      function getEvent(types) {\n        const eventTypes = types && types.length ? types : ['event'];\n        return eventFromEnvelope(envelope, eventTypes);\n      }\n      const transports = matcher({\n        envelope,\n        getEvent\n      }).map(result => {\n        if (typeof result === 'string') {\n          return getTransport(result, undefined);\n        } else {\n          return getTransport(result.dsn, result.release);\n        }\n      }).filter(t => !!t);\n\n      // If we have no transports to send to, use the fallback transport\n      // Don't override the DSN in the header for the fallback transport. '' is falsy\n      const transportsWithFallback = transports.length ? transports : [['', fallbackTransport]];\n      const results = await Promise.all(transportsWithFallback.map(([dsn, transport]) => transport.send(overrideDsn(envelope, dsn))));\n      return results[0];\n    }\n    async function flush(timeout) {\n      const allTransports = [...otherTransports.values(), fallbackTransport];\n      const results = await Promise.all(allTransports.map(transport => transport.flush(timeout)));\n      return results.every(r => r);\n    }\n    return {\n      send,\n      flush\n    };\n  };\n}\nexports.eventFromEnvelope = eventFromEnvelope;\nexports.makeMultiplexedTransport = makeMultiplexedTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdHJhbnNwb3J0cy9tdWx0aXBsZXhlZC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLEdBQUcsR0FBR0MsbUJBQU8sQ0FBQyw0RUFBVyxDQUFDO0FBQ2hDLE1BQU1DLEdBQUcsR0FBR0QsbUJBQU8sQ0FBQyxvR0FBdUIsQ0FBQztBQUM1QyxNQUFNRSxRQUFRLEdBQUdGLG1CQUFPLENBQUMsOEdBQTRCLENBQUM7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxpQkFBaUJBLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxFQUFFO0VBQ3JDLElBQUlDLEtBQUs7RUFFVEosUUFBUSxDQUFDSyxtQkFBbUIsQ0FBQ0gsR0FBRyxFQUFFLENBQUNJLElBQUksRUFBRUMsSUFBSSxLQUFLO0lBQ2hELElBQUlKLEtBQUssQ0FBQ0ssUUFBUSxDQUFDRCxJQUFJLENBQUMsRUFBRTtNQUN4QkgsS0FBSyxHQUFHSyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0osSUFBSSxDQUFDLEdBQUlBLElBQUksQ0FBRyxDQUFDLENBQUMsR0FBR0ssU0FBUztJQUN0RDtJQUNBO0lBQ0EsT0FBTyxDQUFDLENBQUNQLEtBQUs7RUFDaEIsQ0FBQyxDQUFDO0VBRUYsT0FBT0EsS0FBSztBQUNkOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNRLDRCQUE0QkEsQ0FDbkNDLGVBQWUsRUFDZkMsT0FBTyxFQUNQO0VBQ0EsT0FBT0MsT0FBTyxJQUFJO0lBQ2hCLE1BQU1DLFNBQVMsR0FBR0gsZUFBZSxDQUFDRSxPQUFPLENBQUM7SUFFMUMsT0FBTztNQUNMLEdBQUdDLFNBQVM7TUFDWkMsSUFBSSxFQUFFLE1BQU9qQixRQUFRLElBQUs7UUFDeEIsTUFBTUksS0FBSyxHQUFHSCxpQkFBaUIsQ0FBQ0QsUUFBUSxFQUFFLENBQUMs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VUFBVSxDQUFDRCxNQUFNLEdBQUdDLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFaEIsaUJBQWlCLENBQUMsQ0FBQztNQUV6RixNQUFNc0IsT0FBTyxHQUFJLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBRyxDQUNoQ0gsc0JBQXNCLENBQUNKLEdBQUcsQ0FBQyxDQUFDLENBQUN6QyxHQUFHLEVBQUVpQixTQUFTLENBQUMsS0FBS0EsU0FBUyxDQUFDQyxJQUFJLENBQUNDLFdBQVcsQ0FBQ2xCLFFBQVEsRUFBRUQsR0FBRyxDQUFDLENBQUMsQ0FDN0YsQ0FBRTtNQUVGLE9BQU84QyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25CO0lBRUEsZUFBZUcsS0FBS0EsQ0FBQ0MsT0FBTyxFQUFFO01BQzVCLE1BQU1DLGFBQWEsR0FBRyxDQUFDLEdBQUcxQixlQUFlLENBQUMyQixNQUFNLENBQUMsQ0FBQyxFQUFFNUIsaUJBQWlCLENBQUM7TUFDdEUsTUFBTXNCLE9BQU8sR0FBRyxNQUFNQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0csYUFBYSxDQUFDVixHQUFHLENBQUN4QixTQUFTLElBQUlBLFNBQVMsQ0FBQ2dDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUMsQ0FBQztNQUMzRixPQUFPSixPQUFPLENBQUNPLEtBQUssQ0FBQ0MsQ0FBQyxJQUFJQSxDQUFDLENBQUM7SUFDOUI7SUFFQSxPQUFPO01BQ0xwQyxJQUFJO01BQ0orQjtJQUNGLENBQUM7RUFDSCxDQUFDO0FBQ0g7QUFFQXJELHlCQUF5QixHQUFHTSxpQkFBaUI7QUFDN0NOLGdDQUFnQyxHQUFHMEIsd0JBQXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3RyYW5zcG9ydHMvbXVsdGlwbGV4ZWQuanM/OTQ5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBhcGkgPSByZXF1aXJlKCcuLi9hcGkuanMnKTtcbmNvbnN0IGRzbiA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2Rzbi5qcycpO1xuY29uc3QgZW52ZWxvcGUgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9lbnZlbG9wZS5qcycpO1xuXG4vKipcbiAqIEdldHMgYW4gZXZlbnQgZnJvbSBhbiBlbnZlbG9wZS5cbiAqXG4gKiBUaGlzIGlzIG9ubHkgZXhwb3J0ZWQgZm9yIHVzZSBpbiB0aGUgdGVzdHNcbiAqL1xuZnVuY3Rpb24gZXZlbnRGcm9tRW52ZWxvcGUoZW52LCB0eXBlcykge1xuICBsZXQgZXZlbnQ7XG5cbiAgZW52ZWxvcGUuZm9yRWFjaEVudmVsb3BlSXRlbShlbnYsIChpdGVtLCB0eXBlKSA9PiB7XG4gICAgaWYgKHR5cGVzLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgICBldmVudCA9IEFycmF5LmlzQXJyYXkoaXRlbSkgPyAoaXRlbSApWzFdIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBiYWlsIG91dCBpZiB3ZSBmb3VuZCBhbiBldmVudFxuICAgIHJldHVybiAhIWV2ZW50O1xuICB9KTtcblxuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRyYW5zcG9ydCB0aGF0IG92ZXJyaWRlcyB0aGUgcmVsZWFzZSBvbiBhbGwgZXZlbnRzLlxuICovXG5mdW5jdGlvbiBtYWtlT3ZlcnJpZGVSZWxlYXNlVHJhbnNwb3J0KFxuICBjcmVhdGVUcmFuc3BvcnQsXG4gIHJlbGVhc2UsXG4pIHtcbiAgcmV0dXJuIG9wdGlvbnMgPT4ge1xuICAgIGNvbnN0IHRyYW5zcG9ydCA9IGNyZWF0ZVRyYW5zcG9ydChvcHRpb25zKTtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi50cmFuc3BvcnQsXG4gICAgICBzZW5kOiBhc3luYyAoZW52ZWxvcGUpID0+IHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBldmVudEZyb21FbnZlbG9wZShlbnZlbG9wZSwgWydldmVudCcsICd0cmFuc2FjdGlvbicsICdwcm9maWxlJywgJ3JlcGxheV9ldmVudCddKTtcblxuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5yZWxlYXNlID0gcmVsZWFzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhbnNwb3J0LnNlbmQoZW52ZWxvcGUpO1xuICAgICAgfSxcbiAgICB9O1xuICB9O1xufVxuXG4vKiogT3ZlcnJpZGVzIHRoZSBEU04gaW4gdGhlIGVudmVsb3BlIGhlYWRlciAgKi9cbmZ1bmN0aW9uIG92ZXJyaWRlRHNuKGVudmVsb3BlJDEsIGRzbikge1xuICByZXR1cm4gZW52ZWxvcGUuY3JlYXRlRW52ZWxvcGUoXG4gICAgZHNuXG4gICAgICA/IHtcbiAgICAgICAgICAuLi5lbnZlbG9wZSQxWzBdLFxuICAgICAgICAgIGRzbixcbiAgICAgICAgfVxuICAgICAgOiBlbnZlbG9wZSQxWzBdLFxuICAgIGVudmVsb3BlJDFbMV0sXG4gICk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRyYW5zcG9ydCB0aGF0IGNhbiBzZW5kIGV2ZW50cyB0byBkaWZmZXJlbnQgRFNOcyBkZXBlbmRpbmcgb24gdGhlIGVudmVsb3BlIGNvbnRlbnRzLlxuICovXG5mdW5jdGlvbiBtYWtlTXVsdGlwbGV4ZWRUcmFuc3BvcnQoXG4gIGNyZWF0ZVRyYW5zcG9ydCxcbiAgbWF0Y2hlcixcbikge1xuICByZXR1cm4gb3B0aW9ucyA9PiB7XG4gICAgY29uc3QgZmFsbGJhY2tUcmFuc3BvcnQgPSBjcmVhdGVUcmFuc3BvcnQob3B0aW9ucyk7XG4gICAgY29uc3Qgb3RoZXJUcmFuc3BvcnRzID0gbmV3IE1hcCgpO1xuXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNwb3J0KGRzbiQxLCByZWxlYXNlKSB7XG4gICAgICAvLyBXZSBjcmVhdGUgYSB0cmFuc3BvcnQgZm9yIGV2ZXJ5IHVuaXF1ZSBkc24vcmVsZWFzZSBjb21iaW5hdGlvbiBhcyB0aGVyZSBtYXkgYmUgY29kZSBmcm9tIG11bHRpcGxlIHJlbGVhc2VzIGluXG4gICAgICAvLyB1c2UgYXQgdGhlIHNhbWUgdGltZVxuICAgICAgY29uc3Qga2V5ID0gcmVsZWFzZSA/IGAke2RzbiQxfToke3JlbGVhc2V9YCA6IGRzbiQxO1xuXG4gICAgICBsZXQgdHJhbnNwb3J0ID0gb3RoZXJUcmFuc3BvcnRzLmdldChrZXkpO1xuXG4gICAgICBpZiAoIXRyYW5zcG9ydCkge1xuICAgICAgICBjb25zdCB2YWxpZGF0ZWREc24gPSBkc24uZHNuRnJvbVN0cmluZyhkc24kMSk7XG4gICAgICAgIGlmICghdmFsaWRhdGVkRHNuKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cmwgPSBhcGkuZ2V0RW52ZWxvcGVFbmRwb2ludFdpdGhVcmxFbmNvZGVkQXV0aCh2YWxpZGF0ZWREc24sIG9wdGlvbnMudHVubmVsKTtcblxuICAgICAgICB0cmFuc3BvcnQgPSByZWxlYXNlXG4gICAgICAgICAgPyBtYWtlT3ZlcnJpZGVSZWxlYXNlVHJhbnNwb3J0KGNyZWF0ZVRyYW5zcG9ydCwgcmVsZWFzZSkoeyAuLi5vcHRpb25zLCB1cmwgfSlcbiAgICAgICAgICA6IGNyZWF0ZVRyYW5zcG9ydCh7IC4uLm9wdGlvbnMsIHVybCB9KTtcblxuICAgICAgICBvdGhlclRyYW5zcG9ydHMuc2V0KGtleSwgdHJhbnNwb3J0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtkc24kMSwgdHJhbnNwb3J0XTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBzZW5kKGVudmVsb3BlKSB7XG4gICAgICBmdW5jdGlvbiBnZXRFdmVudCh0eXBlcykge1xuICAgICAgICBjb25zdCBldmVudFR5cGVzID0gdHlwZXMgJiYgdHlwZXMubGVuZ3RoID8gdHlwZXMgOiBbJ2V2ZW50J107XG4gICAgICAgIHJldHVybiBldmVudEZyb21FbnZlbG9wZShlbnZlbG9wZSwgZXZlbnRUeXBlcyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyYW5zcG9ydHMgPSBtYXRjaGVyKHsgZW52ZWxvcGUsIGdldEV2ZW50IH0pXG4gICAgICAgIC5tYXAocmVzdWx0ID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRUcmFuc3BvcnQocmVzdWx0LCB1bmRlZmluZWQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0VHJhbnNwb3J0KHJlc3VsdC5kc24sIHJlc3VsdC5yZWxlYXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5maWx0ZXIoKHQpID0+ICEhdCk7XG5cbiAgICAgIC8vIElmIHdlIGhhdmUgbm8gdHJhbnNwb3J0cyB0byBzZW5kIHRvLCB1c2UgdGhlIGZhbGxiYWNrIHRyYW5zcG9ydFxuICAgICAgLy8gRG9uJ3Qgb3ZlcnJpZGUgdGhlIERTTiBpbiB0aGUgaGVhZGVyIGZvciB0aGUgZmFsbGJhY2sgdHJhbnNwb3J0LiAnJyBpcyBmYWxzeVxuICAgICAgY29uc3QgdHJhbnNwb3J0c1dpdGhGYWxsYmFjayA9IHRyYW5zcG9ydHMubGVuZ3RoID8gdHJhbnNwb3J0cyA6IFtbJycsIGZhbGxiYWNrVHJhbnNwb3J0XV07XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSAoYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIHRyYW5zcG9ydHNXaXRoRmFsbGJhY2subWFwKChbZHNuLCB0cmFuc3BvcnRdKSA9PiB0cmFuc3BvcnQuc2VuZChvdmVycmlkZURzbihlbnZlbG9wZSwgZHNuKSkpLFxuICAgICAgKSkgO1xuXG4gICAgICByZXR1cm4gcmVzdWx0c1swXTtcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBmbHVzaCh0aW1lb3V0KSB7XG4gICAgICBjb25zdCBhbGxUcmFuc3BvcnRzID0gWy4uLm90aGVyVHJhbnNwb3J0cy52YWx1ZXMoKSwgZmFsbGJhY2tUcmFuc3BvcnRdO1xuICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKGFsbFRyYW5zcG9ydHMubWFwKHRyYW5zcG9ydCA9PiB0cmFuc3BvcnQuZmx1c2godGltZW91dCkpKTtcbiAgICAgIHJldHVybiByZXN1bHRzLmV2ZXJ5KHIgPT4gcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbmQsXG4gICAgICBmbHVzaCxcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnRzLmV2ZW50RnJvbUVudmVsb3BlID0gZXZlbnRGcm9tRW52ZWxvcGU7XG5leHBvcnRzLm1ha2VNdWx0aXBsZXhlZFRyYW5zcG9ydCA9IG1ha2VNdWx0aXBsZXhlZFRyYW5zcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpcGxleGVkLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXBpIiwicmVxdWlyZSIsImRzbiIsImVudmVsb3BlIiwiZXZlbnRGcm9tRW52ZWxvcGUiLCJlbnYiLCJ0eXBlcyIsImV2ZW50IiwiZm9yRWFjaEVudmVsb3BlSXRlbSIsIml0ZW0iLCJ0eXBlIiwiaW5jbHVkZXMiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJtYWtlT3ZlcnJpZGVSZWxlYXNlVHJhbnNwb3J0IiwiY3JlYXRlVHJhbnNwb3J0IiwicmVsZWFzZSIsIm9wdGlvbnMiLCJ0cmFuc3BvcnQiLCJzZW5kIiwib3ZlcnJpZGVEc24iLCJlbnZlbG9wZSQxIiwiY3JlYXRlRW52ZWxvcGUiLCJtYWtlTXVsdGlwbGV4ZWRUcmFuc3BvcnQiLCJtYXRjaGVyIiwiZmFsbGJhY2tUcmFuc3BvcnQiLCJvdGhlclRyYW5zcG9ydHMiLCJNYXAiLCJnZXRUcmFuc3BvcnQiLCJkc24kMSIsImtleSIsImdldCIsInZhbGlkYXRlZERzbiIsImRzbkZyb21TdHJpbmciLCJ1cmwiLCJnZXRFbnZlbG9wZUVuZHBvaW50V2l0aFVybEVuY29kZWRBdXRoIiwidHVubmVsIiwic2V0IiwiZ2V0RXZlbnQiLCJldmVudFR5cGVzIiwibGVuZ3RoIiwidHJhbnNwb3J0cyIsIm1hcCIsInJlc3VsdCIsImZpbHRlciIsInQiLCJ0cmFuc3BvcnRzV2l0aEZhbGxiYWNrIiwicmVzdWx0cyIsIlByb21pc2UiLCJhbGwiLCJmbHVzaCIsInRpbWVvdXQiLCJhbGxUcmFuc3BvcnRzIiwidmFsdWVzIiwiZXZlcnkiLCJyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/transports/multiplexed.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/transports/offline.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/transports/offline.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst envelope = __webpack_require__(/*! ../utils-hoist/envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst ratelimit = __webpack_require__(/*! ../utils-hoist/ratelimit.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js\");\nconst MIN_DELAY = 100; // 100 ms\nconst START_DELAY = 5000; // 5 seconds\nconst MAX_DELAY = 3.6e6; // 1 hour\n\n/**\n * Wraps a transport and stores and retries events when they fail to send.\n *\n * @param createTransport The transport to wrap.\n */\nfunction makeOfflineTransport(createTransport) {\n  function log(...args) {\n    debugBuild.DEBUG_BUILD && logger.logger.info('[Offline]:', ...args);\n  }\n  return options => {\n    const transport = createTransport(options);\n    if (!options.createStore) {\n      throw new Error('No `createStore` function was provided');\n    }\n    const store = options.createStore(options);\n    let retryDelay = START_DELAY;\n    let flushTimer;\n    function shouldQueue(env, error, retryDelay) {\n      // We want to drop client reports because they can be generated when we retry sending events while offline.\n      if (envelope.envelopeContainsItemType(env, ['client_report'])) {\n        return false;\n      }\n      if (options.shouldStore) {\n        return options.shouldStore(env, error, retryDelay);\n      }\n      return true;\n    }\n    function flushIn(delay) {\n      if (flushTimer) {\n        clearTimeout(flushTimer);\n      }\n      flushTimer = setTimeout(async () => {\n        flushTimer = undefined;\n        const found = await store.shift();\n        if (found) {\n          log('Attempting to send previously queued event');\n\n          // We should to update the sent_at timestamp to the current time.\n          found[0].sent_at = new Date().toISOString();\n          void send(found, true).catch(e => {\n            log('Failed to retry sending', e);\n          });\n        }\n      }, delay);\n\n      // We need to unref the timer in node.js, otherwise the node process never exit.\n      if (typeof flushTimer !== 'number' && flushTimer.unref) {\n        flushTimer.unref();\n      }\n    }\n    function flushWithBackOff() {\n      if (flushTimer) {\n        return;\n      }\n      flushIn(retryDelay);\n      retryDelay = Math.min(retryDelay * 2, MAX_DELAY);\n    }\n    async function send(envelope$1, isRetry = false) {\n      // We queue all replay envelopes to avoid multiple replay envelopes being sent at the same time. If one fails, we\n      // need to retry them in order.\n      if (!isRetry && envelope.envelopeContainsItemType(envelope$1, ['replay_event', 'replay_recording'])) {\n        await store.push(envelope$1);\n        flushIn(MIN_DELAY);\n        return {};\n      }\n      try {\n        const result = await transport.send(envelope$1);\n        let delay = MIN_DELAY;\n        if (result) {\n          // If there's a retry-after header, use that as the next delay.\n          if (result.headers && result.headers['retry-after']) {\n            delay = ratelimit.parseRetryAfterHeader(result.headers['retry-after']);\n          } else if (result.headers && result.headers['x-sentry-rate-limits']) {\n            delay = 60000; // 60 seconds\n          } // If we have a server error, return now so we don't flush the queue.\n          else if ((result.statusCode || 0) >= 400) {\n            return result;\n          }\n        }\n        flushIn(delay);\n        retryDelay = START_DELAY;\n        return result;\n      } catch (e) {\n        if (await shouldQueue(envelope$1, e, retryDelay)) {\n          // If this envelope was a retry, we want to add it to the front of the queue so it's retried again first.\n          if (isRetry) {\n            await store.unshift(envelope$1);\n          } else {\n            await store.push(envelope$1);\n          }\n          flushWithBackOff();\n          log('Error sending. Event queued.', e);\n          return {};\n        } else {\n          throw e;\n        }\n      }\n    }\n    if (options.flushAtStartup) {\n      flushWithBackOff();\n    }\n    return {\n      send,\n      flush: timeout => {\n        // If there's no timeout, we should attempt to flush the offline queue.\n        if (timeout === undefined) {\n          retryDelay = START_DELAY;\n          flushIn(MIN_DELAY);\n        }\n        return transport.flush(timeout);\n      }\n    };\n  };\n}\nexports.MIN_DELAY = MIN_DELAY;\nexports.START_DELAY = START_DELAY;\nexports.makeOfflineTransport = makeOfflineTransport;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/transports/offline.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/trpc.js":
/*!*****************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/trpc.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ./currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ./exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\nconst semanticAttributes = __webpack_require__(/*! ./semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\n__webpack_require__(/*! ./tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\n__webpack_require__(/*! ./utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ./utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\n__webpack_require__(/*! ./utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n__webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\n__webpack_require__(/*! ./utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst normalize = __webpack_require__(/*! ./utils-hoist/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\n__webpack_require__(/*! ./utils-hoist/syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\nconst trace = __webpack_require__(/*! ./tracing/trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/trace.js\");\nconst trpcCaptureContext = {\n  mechanism: {\n    handled: false,\n    data: {\n      function: 'trpcMiddleware'\n    }\n  }\n};\nfunction captureIfError(nextResult) {\n  // TODO: Set span status based on what TRPCError was encountered\n  if (typeof nextResult === 'object' && nextResult !== null && 'ok' in nextResult && !nextResult.ok && 'error' in nextResult) {\n    exports$1.captureException(nextResult.error, trpcCaptureContext);\n  }\n}\n\n/**\n * Sentry tRPC middleware that captures errors and creates spans for tRPC procedures.\n */\nfunction trpcMiddleware(options = {}) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return async function (opts) {\n    const {\n      path,\n      type,\n      next,\n      rawInput,\n      getRawInput\n    } = opts;\n    const client = currentScopes.getClient();\n    const clientOptions = client && client.getOptions();\n    const trpcContext = {\n      procedure_path: path,\n      procedure_type: type\n    };\n    if (options.attachRpcInput !== undefined ? options.attachRpcInput : clientOptions && clientOptions.sendDefaultPii) {\n      if (rawInput !== undefined) {\n        trpcContext.input = normalize.normalize(rawInput);\n      }\n      if (getRawInput !== undefined && typeof getRawInput === 'function') {\n        try {\n          const rawRes = await getRawInput();\n          trpcContext.input = normalize.normalize(rawRes);\n        } catch (err) {\n          // noop\n        }\n      }\n    }\n    return currentScopes.withScope(scope => {\n      scope.setContext('trpc', trpcContext);\n      return trace.startSpanManual({\n        name: `trpc/${path}`,\n        op: 'rpc.server',\n        attributes: {\n          [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n          [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.rpc.trpc'\n        }\n      }, async span => {\n        try {\n          const nextResult = await next();\n          captureIfError(nextResult);\n          span.end();\n          return nextResult;\n        } catch (e) {\n          exports$1.captureException(e, trpcCaptureContext);\n          span.end();\n          throw e;\n        }\n      });\n    });\n  };\n}\nexports.trpcMiddleware = trpcMiddleware;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/trpc.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nfunction applyAggregateErrorsToEvent(exceptionFromErrorImplementation, parser, maxValueLimit = 250, key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !is.isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException = event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = truncateAggregateExceptions(aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, hint.originalException, key, event.exception.values, originalException, 0), maxValueLimit);\n  }\n}\nfunction aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error, key, prevExceptions, exception, exceptionId) {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (is.isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error[key], key, [newException, ...newExceptions], newException, newExceptionId);\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (is.isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, childError, key, [newException, ...newExceptions], newException, newExceptionId);\n      }\n    });\n  }\n  return newExceptions;\n}\nfunction applyExceptionGroupFieldsForParentException(exception, exceptionId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || {\n    type: 'generic',\n    handled: true\n  };\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && {\n      is_exception_group: true\n    }),\n    exception_id: exceptionId\n  };\n}\nfunction applyExceptionGroupFieldsForChildException(exception, source, exceptionId, parentId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || {\n    type: 'generic',\n    handled: true\n  };\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId\n  };\n}\n\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */\nfunction truncateAggregateExceptions(exceptions, maxValueLength) {\n  return exceptions.map(exception => {\n    if (exception.value) {\n      exception.value = string.truncate(exception.value, maxValueLength);\n    }\n    return exception;\n  });\n}\nexports.applyAggregateErrorsToEvent = applyAggregateErrorsToEvent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/anr.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/anr.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst nodeStackTrace = __webpack_require__(/*! ./node-stack-trace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\n\n/**\n * A node.js watchdog timer\n * @param pollInterval The interval that we expect to get polled at\n * @param anrThreshold The threshold for when we consider ANR\n * @param callback The callback to call for ANR\n * @returns An object with `poll` and `enabled` functions {@link WatchdogReturn}\n */\nfunction watchdogTimer(createTimer, pollInterval, anrThreshold, callback) {\n  const timer = createTimer();\n  let triggered = false;\n  let enabled = true;\n  setInterval(() => {\n    const diffMs = timer.getTimeMs();\n    if (triggered === false && diffMs > pollInterval + anrThreshold) {\n      triggered = true;\n      if (enabled) {\n        callback();\n      }\n    }\n    if (diffMs < pollInterval + anrThreshold) {\n      triggered = false;\n    }\n  }, 20);\n  return {\n    poll: () => {\n      timer.reset();\n    },\n    enabled: state => {\n      enabled = state;\n    }\n  };\n}\n\n// types copied from inspector.d.ts\n\n/**\n * Converts Debugger.CallFrame to Sentry StackFrame\n */\nfunction callFrameToStackFrame(frame, url, getModuleFromFilename) {\n  const filename = url ? url.replace(/^file:\\/\\//, '') : undefined;\n\n  // CallFrame row/col are 0 based, whereas StackFrame are 1 based\n  const colno = frame.location.columnNumber ? frame.location.columnNumber + 1 : undefined;\n  const lineno = frame.location.lineNumber ? frame.location.lineNumber + 1 : undefined;\n  return object.dropUndefinedKeys({\n    filename,\n    module: getModuleFromFilename(filename),\n    function: frame.functionName || stacktrace.UNKNOWN_FUNCTION,\n    colno,\n    lineno,\n    in_app: filename ? nodeStackTrace.filenameIsInApp(filename) : undefined\n  });\n}\nexports.callFrameToStackFrame = callFrameToStackFrame;\nexports.watchdogTimer = watchdogTimer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYW5yLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsY0FBYyxHQUFHQyxtQkFBTyxDQUFDLGlIQUF1QixDQUFDO0FBQ3ZELE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyw2RkFBYSxDQUFDO0FBQ3JDLE1BQU1FLFVBQVUsR0FBR0YsbUJBQU8sQ0FBQyxxR0FBaUIsQ0FBQzs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxhQUFhQSxDQUNwQkMsV0FBVyxFQUNYQyxZQUFZLEVBQ1pDLFlBQVksRUFDWkMsUUFBUSxFQUNSO0VBQ0EsTUFBTUMsS0FBSyxHQUFHSixXQUFXLENBQUMsQ0FBQztFQUMzQixJQUFJSyxTQUFTLEdBQUcsS0FBSztFQUNyQixJQUFJQyxPQUFPLEdBQUcsSUFBSTtFQUVsQkMsV0FBVyxDQUFDLE1BQU07SUFDaEIsTUFBTUMsTUFBTSxHQUFHSixLQUFLLENBQUNLLFNBQVMsQ0FBQyxDQUFDO0lBRWhDLElBQUlKLFNBQVMsS0FBSyxLQUFLLElBQUlHLE1BQU0sR0FBR1AsWUFBWSxHQUFHQyxZQUFZLEVBQUU7TUFDL0RHLFNBQVMsR0FBRyxJQUFJO01BQ2hCLElBQUlDLE9BQU8sRUFBRTtRQUNYSCxRQUFRLENBQUMsQ0FBQztNQUNaO0lBQ0Y7SUFFQSxJQUFJSyxNQUFNLEdBQUdQLFlBQVksR0FBR0MsWUFBWSxFQUFFO01BQ3hDRyxTQUFTLEdBQUcsS0FBSztJQUNuQjtFQUNGLENBQUMsRUFBRSxFQUFFLENBQUM7RUFFTixPQUFPO0lBQ0xLLElBQUksRUFBRUEsQ0FBQSxLQUFNO01BQ1ZOLEtBQUssQ0FBQ08sS0FBSyxDQUFDLENBQUM7SUFDZixDQUFDO0lBQ0RMLE9BQU8sRUFBR00sS0FBSyxJQUFLO01BQ2xCTixPQUFPLEdBQUdNLEtBQUs7SUFDakI7RUFDRixDQUFDO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0MscUJBQXFCQSxDQUM1QkMsS0FBSyxFQUNMQyxHQUFHLEVBQ0hDLHFCQUFxQixFQUNyQjtFQUNBLE1BQU1DLFFBQVEsR0FBR0YsR0FBRyxHQUFHQSxHQUFHLENBQUNHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLEdBQUdDLFNBQVM7O0VBRWhFO0VBQ0EsTUFBTUMsS0FBSyxHQUFHTixLQUFLLENBQUNPLFFBQVEsQ0FBQ0MsWUFBWSxHQUFHUixLQUFLLENBQUNPLFFBQVEsQ0FBQ0MsWUFBWSxHQUFHLENBQUMsR0FBR0gsU0FBUztFQUN2RixNQUFNSSxNQUFNLEdBQUdULEtBQUssQ0FBQ08sUUFBUSxDQUFDRyxVQUFVLEdBQUdWLEtBQUssQ0FBQ08sUUFBUSxDQUFDRyxVQUFVLEdBQUcsQ0FBQyxHQUFHTCxTQUFTO0VBRXBGLE9BQU90QixNQUFNLENBQUM0QixpQkFBaUIsQ0FBQztJQUM5QlIsUUFBUTtJQUNSUyxNQUFNLEVBQUVWLHFCQUFxQixDQUFDQyxRQUFRLENBQUM7SUFDdkNVLFFBQVEsRUFBRWIsS0FBSyxDQUFDYyxZQUFZLElBQUk5QixVQUFVLENBQUMrQixnQkFBZ0I7SUFDM0RULEtBQUs7SUFDTEcsTUFBTTtJQUNOTyxNQUFNLEVBQUViLFFBQVEsR0FBR3RCLGNBQWMsQ0FBQ29DLGVBQWUsQ0FBQ2QsUUFBUSxDQUFDLEdBQUdFO0VBQ2hFLENBQUMsQ0FBQztBQUNKO0FBRUExQiw2QkFBNkIsR0FBR29CLHFCQUFxQjtBQUNyRHBCLHFCQUFxQixHQUFHTSxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2Fuci5qcz81YjE4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG5vZGVTdGFja1RyYWNlID0gcmVxdWlyZSgnLi9ub2RlLXN0YWNrLXRyYWNlLmpzJyk7XG5jb25zdCBvYmplY3QgPSByZXF1aXJlKCcuL29iamVjdC5qcycpO1xuY29uc3Qgc3RhY2t0cmFjZSA9IHJlcXVpcmUoJy4vc3RhY2t0cmFjZS5qcycpO1xuXG4vKipcbiAqIEEgbm9kZS5qcyB3YXRjaGRvZyB0aW1lclxuICogQHBhcmFtIHBvbGxJbnRlcnZhbCBUaGUgaW50ZXJ2YWwgdGhhdCB3ZSBleHBlY3QgdG8gZ2V0IHBvbGxlZCBhdFxuICogQHBhcmFtIGFuclRocmVzaG9sZCBUaGUgdGhyZXNob2xkIGZvciB3aGVuIHdlIGNvbnNpZGVyIEFOUlxuICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBjYWxsIGZvciBBTlJcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIGBwb2xsYCBhbmQgYGVuYWJsZWRgIGZ1bmN0aW9ucyB7QGxpbmsgV2F0Y2hkb2dSZXR1cm59XG4gKi9cbmZ1bmN0aW9uIHdhdGNoZG9nVGltZXIoXG4gIGNyZWF0ZVRpbWVyLFxuICBwb2xsSW50ZXJ2YWwsXG4gIGFuclRocmVzaG9sZCxcbiAgY2FsbGJhY2ssXG4pIHtcbiAgY29uc3QgdGltZXIgPSBjcmVhdGVUaW1lcigpO1xuICBsZXQgdHJpZ2dlcmVkID0gZmFsc2U7XG4gIGxldCBlbmFibGVkID0gdHJ1ZTtcblxuICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgY29uc3QgZGlmZk1zID0gdGltZXIuZ2V0VGltZU1zKCk7XG5cbiAgICBpZiAodHJpZ2dlcmVkID09PSBmYWxzZSAmJiBkaWZmTXMgPiBwb2xsSW50ZXJ2YWwgKyBhbnJUaHJlc2hvbGQpIHtcbiAgICAgIHRyaWdnZXJlZCA9IHRydWU7XG4gICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaWZmTXMgPCBwb2xsSW50ZXJ2YWwgKyBhbnJUaHJlc2hvbGQpIHtcbiAgICAgIHRyaWdnZXJlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwgMjApO1xuXG4gIHJldHVybiB7XG4gICAgcG9sbDogKCkgPT4ge1xuICAgICAgdGltZXIucmVzZXQoKTtcbiAgICB9LFxuICAgIGVuYWJsZWQ6IChzdGF0ZSkgPT4ge1xuICAgICAgZW5hYmxlZCA9IHN0YXRlO1xuICAgIH0sXG4gIH07XG59XG5cbi8vIHR5cGVzIGNvcGllZCBmcm9tIGluc3BlY3Rvci5kLnRzXG5cbi8qKlxuICogQ29udmVydHMgRGVidWdnZXIuQ2FsbEZyYW1lIHRvIFNlbnRyeSBTdGFja0ZyYW1lXG4gKi9cbmZ1bmN0aW9uIGNhbGxGcmFtZVRvU3RhY2tGcmFtZShcbiAgZnJhbWUsXG4gIHVybCxcbiAgZ2V0TW9kdWxlRnJvbUZpbGVuYW1lLFxuKSB7XG4gIGNvbnN0IGZpbGVuYW1lID0gdXJsID8gdXJsLnJlcGxhY2UoL15maWxlOlxcL1xcLy8sICcnKSA6IHVuZGVmaW5lZDtcblxuICAvLyBDYWxsRnJhbWUgcm93L2NvbCBhcmUgMCBiYXNlZCwgd2hlcmVhcyBTdGFja0ZyYW1lIGFyZSAxIGJhc2VkXG4gIGNvbnN0IGNvbG5vID0gZnJhbWUubG9jYXRpb24uY29sdW1uTnVtYmVyID8gZnJhbWUubG9jYXRpb24uY29sdW1uTnVtYmVyICsgMSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgbGluZW5vID0gZnJhbWUubG9jYXRpb24ubGluZU51bWJlciA/IGZyYW1lLmxvY2F0aW9uLmxpbmVOdW1iZXIgKyAxIDogdW5kZWZpbmVkO1xuXG4gIHJldHVybiBvYmplY3QuZHJvcFVuZGVmaW5lZEtleXMoe1xuICAgIGZpbGVuYW1lLFxuICAgIG1vZHVsZTogZ2V0TW9kdWxlRnJvbUZpbGVuYW1lKGZpbGVuYW1lKSxcbiAgICBmdW5jdGlvbjogZnJhbWUuZnVuY3Rpb25OYW1lIHx8IHN0YWNrdHJhY2UuVU5LTk9XTl9GVU5DVElPTixcbiAgICBjb2xubyxcbiAgICBsaW5lbm8sXG4gICAgaW5fYXBwOiBmaWxlbmFtZSA/IG5vZGVTdGFja1RyYWNlLmZpbGVuYW1lSXNJbkFwcChmaWxlbmFtZSkgOiB1bmRlZmluZWQsXG4gIH0pO1xufVxuXG5leHBvcnRzLmNhbGxGcmFtZVRvU3RhY2tGcmFtZSA9IGNhbGxGcmFtZVRvU3RhY2tGcmFtZTtcbmV4cG9ydHMud2F0Y2hkb2dUaW1lciA9IHdhdGNoZG9nVGltZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbnIuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJub2RlU3RhY2tUcmFjZSIsInJlcXVpcmUiLCJvYmplY3QiLCJzdGFja3RyYWNlIiwid2F0Y2hkb2dUaW1lciIsImNyZWF0ZVRpbWVyIiwicG9sbEludGVydmFsIiwiYW5yVGhyZXNob2xkIiwiY2FsbGJhY2siLCJ0aW1lciIsInRyaWdnZXJlZCIsImVuYWJsZWQiLCJzZXRJbnRlcnZhbCIsImRpZmZNcyIsImdldFRpbWVNcyIsInBvbGwiLCJyZXNldCIsInN0YXRlIiwiY2FsbEZyYW1lVG9TdGFja0ZyYW1lIiwiZnJhbWUiLCJ1cmwiLCJnZXRNb2R1bGVGcm9tRmlsZW5hbWUiLCJmaWxlbmFtZSIsInJlcGxhY2UiLCJ1bmRlZmluZWQiLCJjb2xubyIsImxvY2F0aW9uIiwiY29sdW1uTnVtYmVyIiwibGluZW5vIiwibGluZU51bWJlciIsImRyb3BVbmRlZmluZWRLZXlzIiwibW9kdWxlIiwiZnVuY3Rpb24iLCJmdW5jdGlvbk5hbWUiLCJVTktOT1dOX0ZVTkNUSU9OIiwiaW5fYXBwIiwiZmlsZW5hbWVJc0luQXBwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/anr.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/array.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/array.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** Flattens a multi-dimensional array\n *\n * @deprecated This function is deprecated and will be removed in the next major version.\n */\nfunction flatten(input) {\n  const result = [];\n  const flattenHelper = input => {\n    input.forEach(el => {\n      if (Array.isArray(el)) {\n        flattenHelper(el);\n      } else {\n        result.push(el);\n      }\n    });\n  };\n  flattenHelper(input);\n  return result;\n}\nexports.flatten = flatten;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxPQUFPQSxDQUFDQyxLQUFLLEVBQUU7RUFDdEIsTUFBTUMsTUFBTSxHQUFHLEVBQUU7RUFFakIsTUFBTUMsYUFBYSxHQUFJRixLQUFLLElBQUs7SUFDL0JBLEtBQUssQ0FBQ0csT0FBTyxDQUFFQyxFQUFFLElBQUs7TUFDcEIsSUFBSUMsS0FBSyxDQUFDQyxPQUFPLENBQUNGLEVBQUUsQ0FBQyxFQUFFO1FBQ3JCRixhQUFhLENBQUNFLEVBQUcsQ0FBQztNQUNwQixDQUFDLE1BQU07UUFDTEgsTUFBTSxDQUFDTSxJQUFJLENBQUNILEVBQUcsQ0FBQztNQUNsQjtJQUNGLENBQUMsQ0FBQztFQUNKLENBQUM7RUFFREYsYUFBYSxDQUFDRixLQUFLLENBQUM7RUFDcEIsT0FBT0MsTUFBTTtBQUNmO0FBRUFKLGVBQWUsR0FBR0UsT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9hcnJheS5qcz8xODdmIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKiBGbGF0dGVucyBhIG11bHRpLWRpbWVuc2lvbmFsIGFycmF5XG4gKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gZmxhdHRlbihpbnB1dCkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcblxuICBjb25zdCBmbGF0dGVuSGVscGVyID0gKGlucHV0KSA9PiB7XG4gICAgaW5wdXQuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSkge1xuICAgICAgICBmbGF0dGVuSGVscGVyKGVsICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQucHVzaChlbCApO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGZsYXR0ZW5IZWxwZXIoaW5wdXQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnRzLmZsYXR0ZW4gPSBmbGF0dGVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyYXkuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmbGF0dGVuIiwiaW5wdXQiLCJyZXN1bHQiLCJmbGF0dGVuSGVscGVyIiwiZm9yRWFjaCIsImVsIiwiQXJyYXkiLCJpc0FycmF5IiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/array.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n\n/**\n * @deprecated Use a `\"baggage\"` string directly\n */\nconst BAGGAGE_HEADER_NAME = 'baggage';\nconst SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nconst MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nfunction baggageHeaderToDynamicSamplingContext(\n// Very liberal definition of what any incoming header might look like\nbaggageHeader) {\n  const baggageObject = parseBaggageHeader(baggageHeader);\n  if (!baggageObject) {\n    return undefined;\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nfunction dynamicSamplingContextToSentryBaggageHeader(\n// this also takes undefined for convenience and bundle size in other places\ndynamicSamplingContext) {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce((acc, [dscKey, dscValue]) => {\n    if (dscValue) {\n      acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n    }\n    return acc;\n  }, {});\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Take a baggage header and parse it into an object.\n */\nfunction parseBaggageHeader(baggageHeader) {\n  if (!baggageHeader || !is.isString(baggageHeader) && !Array.isArray(baggageHeader)) {\n    return undefined;\n  }\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    return baggageHeader.reduce((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      Object.entries(currBaggageObject).forEach(([key, value]) => {\n        acc[key] = value;\n      });\n      return acc;\n    }, {});\n  }\n  return baggageHeaderToObject(baggageHeader);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader) {\n  return baggageHeader.split(',').map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim()))).reduce((acc, [key, value]) => {\n    if (key && value) {\n      acc[key] = value;\n    }\n    return acc;\n  }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object) {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn(`Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`);\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\nexports.BAGGAGE_HEADER_NAME = BAGGAGE_HEADER_NAME;\nexports.MAX_BAGGAGE_STRING_LENGTH = MAX_BAGGAGE_STRING_LENGTH;\nexports.SENTRY_BAGGAGE_KEY_PREFIX = SENTRY_BAGGAGE_KEY_PREFIX;\nexports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = SENTRY_BAGGAGE_KEY_PREFIX_REGEX;\nexports.baggageHeaderToDynamicSamplingContext = baggageHeaderToDynamicSamplingContext;\nexports.dynamicSamplingContextToSentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader;\nexports.parseBaggageHeader = parseBaggageHeader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/breadcrumb-log-level.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/breadcrumb-log-level.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Determine a breadcrumb's log level (only `warning` or `error`) based on an HTTP status code.\n */\nfunction getBreadcrumbLogLevelFromHttpStatusCode(statusCode) {\n  // NOTE: undefined defaults to 'info' in Sentry\n  if (statusCode === undefined) {\n    return undefined;\n  } else if (statusCode >= 400 && statusCode < 500) {\n    return 'warning';\n  } else if (statusCode >= 500) {\n    return 'error';\n  } else {\n    return undefined;\n  }\n}\nexports.getBreadcrumbLogLevelFromHttpStatusCode = getBreadcrumbLogLevelFromHttpStatusCode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnJlYWRjcnVtYi1sb2ctbGV2ZWwuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsdUNBQXVDQSxDQUFDQyxVQUFVLEVBQUU7RUFDM0Q7RUFDQSxJQUFJQSxVQUFVLEtBQUtDLFNBQVMsRUFBRTtJQUM1QixPQUFPQSxTQUFTO0VBQ2xCLENBQUMsTUFBTSxJQUFJRCxVQUFVLElBQUksR0FBRyxJQUFJQSxVQUFVLEdBQUcsR0FBRyxFQUFFO0lBQ2hELE9BQU8sU0FBUztFQUNsQixDQUFDLE1BQU0sSUFBSUEsVUFBVSxJQUFJLEdBQUcsRUFBRTtJQUM1QixPQUFPLE9BQU87RUFDaEIsQ0FBQyxNQUFNO0lBQ0wsT0FBT0MsU0FBUztFQUNsQjtBQUNGO0FBRUFKLCtDQUErQyxHQUFHRSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnJlYWRjcnVtYi1sb2ctbGV2ZWwuanM/ZjUzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIERldGVybWluZSBhIGJyZWFkY3J1bWIncyBsb2cgbGV2ZWwgKG9ubHkgYHdhcm5pbmdgIG9yIGBlcnJvcmApIGJhc2VkIG9uIGFuIEhUVFAgc3RhdHVzIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEJyZWFkY3J1bWJMb2dMZXZlbEZyb21IdHRwU3RhdHVzQ29kZShzdGF0dXNDb2RlKSB7XG4gIC8vIE5PVEU6IHVuZGVmaW5lZCBkZWZhdWx0cyB0byAnaW5mbycgaW4gU2VudHJ5XG4gIGlmIChzdGF0dXNDb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKHN0YXR1c0NvZGUgPj0gNDAwICYmIHN0YXR1c0NvZGUgPCA1MDApIHtcbiAgICByZXR1cm4gJ3dhcm5pbmcnO1xuICB9IGVsc2UgaWYgKHN0YXR1c0NvZGUgPj0gNTAwKSB7XG4gICAgcmV0dXJuICdlcnJvcic7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnRzLmdldEJyZWFkY3J1bWJMb2dMZXZlbEZyb21IdHRwU3RhdHVzQ29kZSA9IGdldEJyZWFkY3J1bWJMb2dMZXZlbEZyb21IdHRwU3RhdHVzQ29kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyZWFkY3J1bWItbG9nLWxldmVsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlIiwic3RhdHVzQ29kZSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/breadcrumb-log-level.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/browser.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/browser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst WINDOW = worldwide.GLOBAL_OBJ;\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction htmlTreeAsString(elem, options = {}) {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n        break;\n      }\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  const elem = el;\n  const out = [];\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)]) : null;\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n    const className = elem.className;\n    if (className && is.isString(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nfunction getLocationHref() {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existence of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n *\n * @deprecated This method is deprecated and will be removed in the next major version.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector);\n  }\n  return null;\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nfunction getComponentName(elem) {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n  let currentElem = elem;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n    currentElem = currentElem.parentNode;\n  }\n  return null;\n}\nexports.getComponentName = getComponentName;\nexports.getDomElement = getDomElement;\nexports.getLocationHref = getLocationHref;\nexports.htmlTreeAsString = htmlTreeAsString;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLEVBQUUsR0FBR0MsbUJBQU8sQ0FBQyxxRkFBUyxDQUFDO0FBQzdCLE1BQU1DLFNBQVMsR0FBR0QsbUJBQU8sQ0FBQyxtR0FBZ0IsQ0FBQztBQUUzQyxNQUFNRSxNQUFNLEdBQUdELFNBQVMsQ0FBQ0UsVUFBVTtBQUVuQyxNQUFNQyx5QkFBeUIsR0FBRyxFQUFFOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxnQkFBZ0JBLENBQ3ZCQyxJQUFJLEVBQ0pDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFDWjtFQUNBLElBQUksQ0FBQ0QsSUFBSSxFQUFFO0lBQ1QsT0FBTyxXQUFXO0VBQ3BCOztFQUVBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSTtJQUNGLElBQUlFLFdBQVcsR0FBR0YsSUFBSTtJQUN0QixNQUFNRyxtQkFBbUIsR0FBRyxDQUFDO0lBQzdCLE1BQU1DLEdBQUcsR0FBRyxFQUFFO0lBQ2QsSUFBSUMsTUFBTSxHQUFHLENBQUM7SUFDZCxJQUFJQyxHQUFHLEdBQUcsQ0FBQztJQUNYLE1BQU1DLFNBQVMsR0FBRyxLQUFLO0lBQ3ZCLE1BQU1DLFNBQVMsR0FBR0QsU0FBUyxDQUFDRSxNQUFNO0lBQ2xDLElBQUlDLE9BQU87SUFDWCxNQUFNQyxRQUFRLEdBQUdDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDWixPQUFPLENBQUMsR0FBR0EsT0FBTyxHQUFHQSxPQUFPLENBQUNVLFFBQVE7SUFDcEUsTUFBTUcsZUFBZSxHQUFJLENBQUNGLEtBQUssQ0FBQ0MsT0FBTyxDQUFDWixPQUFPLENBQUMsSUFBSUEsT0FBTyxDQUFDYSxlQUFlLElBQUtoQix5QkFBeUI7SUFFekcsT0FBT0ksV0FB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QUFDbEQsSUFBSSxFQUFFO0VBQzlCO0VBQ0EsSUFBSSxDQUFDSixNQUFNLENBQUMyQixXQUFXLEVBQUU7SUFDdkIsT0FBTyxJQUFJO0VBQ2I7RUFFQSxJQUFJckIsV0FBVyxHQUFHRixJQUFJO0VBQ3RCLE1BQU1HLG1CQUFtQixHQUFHLENBQUM7RUFDN0IsS0FBSyxJQUFJZ0QsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHaEQsbUJBQW1CLEVBQUVnRCxDQUFDLEVBQUUsRUFBRTtJQUM1QyxJQUFJLENBQUNqRCxXQUFXLEVBQUU7TUFDaEIsT0FBTyxJQUFJO0lBQ2I7SUFFQSxJQUFJQSxXQUFXLFlBQVlxQixXQUFXLEVBQUU7TUFDdEMsSUFBSXJCLFdBQVcsQ0FBQ3NCLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1FBQzFDLE9BQU90QixXQUFXLENBQUNzQixPQUFPLENBQUMsaUJBQWlCLENBQUM7TUFDL0M7TUFDQSxJQUFJdEIsV0FBVyxDQUFDc0IsT0FBTyxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQ3hDLE9BQU90QixXQUFXLENBQUNzQixPQUFPLENBQUMsZUFBZSxDQUFDO01BQzdDO0lBQ0Y7SUFFQXRCLFdBQVcsR0FBR0EsV0FBVyxDQUFDZSxVQUFVO0VBQ3RDO0VBRUEsT0FBTyxJQUFJO0FBQ2I7QUFFQTFCLHdCQUF3QixHQUFHMkQsZ0JBQWdCO0FBQzNDM0QscUJBQXFCLEdBQUd3RCxhQUFhO0FBQ3JDeEQsdUJBQXVCLEdBQUdtRCxlQUFlO0FBQ3pDbkQsd0JBQXdCLEdBQUdRLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9icm93c2VyLmpzPzcxZjIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaXMgPSByZXF1aXJlKCcuL2lzLmpzJyk7XG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3dvcmxkd2lkZS5qcycpO1xuXG5jb25zdCBXSU5ET1cgPSB3b3JsZHdpZGUuR0xPQkFMX09CSiA7XG5cbmNvbnN0IERFRkFVTFRfTUFYX1NUUklOR19MRU5HVEggPSA4MDtcblxuLyoqXG4gKiBHaXZlbiBhIGNoaWxkIERPTSBlbGVtZW50LCByZXR1cm5zIGEgcXVlcnktc2VsZWN0b3Igc3RhdGVtZW50IGRlc2NyaWJpbmcgdGhhdFxuICogYW5kIGl0cyBhbmNlc3RvcnNcbiAqIGUuZy4gW0hUTUxFbGVtZW50XSA9PiBib2R5ID4gZGl2ID4gaW5wdXQjZm9vLmJ0bltuYW1lPWJhel1cbiAqIEByZXR1cm5zIGdlbmVyYXRlZCBET00gcGF0aFxuICovXG5mdW5jdGlvbiBodG1sVHJlZUFzU3RyaW5nKFxuICBlbGVtLFxuICBvcHRpb25zID0ge30sXG4pIHtcbiAgaWYgKCFlbGVtKSB7XG4gICAgcmV0dXJuICc8dW5rbm93bj4nO1xuICB9XG5cbiAgLy8gdHJ5L2NhdGNoIGJvdGg6XG4gIC8vIC0gYWNjZXNzaW5nIGV2ZW50LnRhcmdldCAoc2VlIGdldHNlbnRyeS9yYXZlbi1qcyM4MzgsICM3NjgpXG4gIC8vIC0gYGh0bWxUcmVlQXNTdHJpbmdgIGJlY2F1c2UgaXQncyBjb21wbGV4LCBhbmQganVzdCBhY2Nlc3NpbmcgdGhlIERPTSBpbmNvcnJlY3RseVxuICAvLyAtIGNhbiB0aHJvdyBhbiBleGNlcHRpb24gaW4gc29tZSBjaXJjdW1zdGFuY2VzLlxuICB0cnkge1xuICAgIGxldCBjdXJyZW50RWxlbSA9IGVsZW0gO1xuICAgIGNvbnN0IE1BWF9UUkFWRVJTRV9IRUlHSFQgPSA1O1xuICAgIGNvbnN0IG91dCA9IFtdO1xuICAgIGxldCBoZWlnaHQgPSAwO1xuICAgIGxldCBsZW4gPSAwO1xuICAgIGNvbnN0IHNlcGFyYXRvciA9ICcgPiAnO1xuICAgIGNvbnN0IHNlcExlbmd0aCA9IHNlcGFyYXRvci5sZW5ndGg7XG4gICAgbGV0IG5leHRTdHI7XG4gICAgY29uc3Qga2V5QXR0cnMgPSBBcnJheS5pc0FycmF5KG9wdGlvbnMpID8gb3B0aW9ucyA6IG9wdGlvbnMua2V5QXR0cnM7XG4gICAgY29uc3QgbWF4U3RyaW5nTGVuZ3RoID0gKCFBcnJheS5pc0FycmF5KG9wdGlvbnMpICYmIG9wdGlvbnMubWF4U3RyaW5nTGVuZ3RoKSB8fCBERUZBVUxUX01BWF9TVFJJTkdfTEVOR1RIO1xuXG4gICAgd2hpbGUgKGN1cnJlbnRFbGVtICYmIGhlaWdodCsrIDwgTUFYX1RSQVZFUlNFX0hFSUdIVCkge1xuICAgICAgbmV4dFN0ciA9IF9odG1sRWxlbWVudEFzU3RyaW5nKGN1cnJlbnRFbGVtLCBrZXlBdHRycyk7XG4gICAgICAvLyBiYWlsIG91dCBpZlxuICAgICAgLy8gLSBuZXh0U3RyIGlzIHRoZSAnaHRtbCcgZWxlbWVudFxuICAgICAgLy8gLSB0aGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgdGhhdCB3b3VsZCBiZSBjcmVhdGVkIGV4Y2VlZHMgbWF4U3RyaW5nTGVuZ3RoXG4gICAgICAvLyAgIChpZ25vcmUgdGhpcyBsaW1pdCBpZiB3ZSBhcmUgb24gdGhlIGZpcnN0IGl0ZXJhdGlvbilcbiAgICAgIGlmIChuZXh0U3RyID09PSAnaHRtbCcgfHwgKGhlaWdodCA+IDEgJiYgbGVuICsgb3V0Lmxlbmd0aCAqIHNlcExlbmd0aCArIG5leHRTdHIubGVuZ3RoID49IG1heFN0cmluZ0xlbmd0aCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIG91dC5wdXNoKG5leHRTdHIpO1xuXG4gICAgICBsZW4gKz0gbmV4dFN0ci5sZW5ndGg7XG4gICAgICBjdXJyZW50RWxlbSA9IGN1cnJlbnRFbGVtLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5yZXZlcnNlKCkuam9pbihzZXBhcmF0b3IpO1xuICB9IGNhdGNoIChfb08pIHtcbiAgICByZXR1cm4gJzx1bmtub3duPic7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2ltcGxlLCBxdWVyeS1zZWxlY3RvciByZXByZXNlbnRhdGlvbiBvZiBhIERPTSBlbGVtZW50XG4gKiBlLmcuIFtIVE1MRWxlbWVudF0gPT4gaW5wdXQjZm9vLmJ0bltuYW1lPWJhel1cbiAqIEByZXR1cm5zIGdlbmVyYXRlZCBET00gcGF0aFxuICovXG5mdW5jdGlvbiBfaHRtbEVsZW1lbnRBc1N0cmluZyhlbCwga2V5QXR0cnMpIHtcbiAgY29uc3QgZWxlbSA9IGVsXG5cbjtcblxuICBjb25zdCBvdXQgPSBbXTtcblxuICBpZiAoIWVsZW0gfHwgIWVsZW0udGFnTmFtZSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgV0lORE9XIGhhcyBIVE1MRWxlbWVudFxuICBpZiAoV0lORE9XLkhUTUxFbGVtZW50KSB7XG4gICAgLy8gSWYgdXNpbmcgdGhlIGNvbXBvbmVudCBuYW1lIGFubm90YXRpb24gcGx1Z2luLCB0aGlzIHZhbHVlIG1heSBiZSBhdmFpbGFibGUgb24gdGhlIERPTSBub2RlXG4gICAgaWYgKGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiBlbGVtLmRhdGFzZXQpIHtcbiAgICAgIGlmIChlbGVtLmRhdGFzZXRbJ3NlbnRyeUNvbXBvbmVudCddKSB7XG4gICAgICAgIHJldHVybiBlbGVtLmRhdGFzZXRbJ3NlbnRyeUNvbXBvbmVudCddO1xuICAgICAgfVxuICAgICAgaWYgKGVsZW0uZGF0YXNldFsnc2VudHJ5RWxlbWVudCddKSB7XG4gICAgICAgIHJldHVybiBlbGVtLmRhdGFzZXRbJ3NlbnRyeUVsZW1lbnQnXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvdXQucHVzaChlbGVtLnRhZ05hbWUudG9Mb3dlckNhc2UoKSk7XG5cbiAgLy8gUGFpcnMgb2YgYXR0cmlidXRlIGtleXMgZGVmaW5lZCBpbiBgc2VyaWFsaXplQXR0cmlidXRlYCBhbmQgdGhlaXIgdmFsdWVzIG9uIGVsZW1lbnQuXG4gIGNvbnN0IGtleUF0dHJQYWlycyA9XG4gICAga2V5QXR0cnMgJiYga2V5QXR0cnMubGVuZ3RoXG4gICAgICA/IGtleUF0dHJzLmZpbHRlcihrZXlBdHRyID0+IGVsZW0uZ2V0QXR0cmlidXRlKGtleUF0dHIpKS5tYXAoa2V5QXR0ciA9PiBba2V5QXR0ciwgZWxlbS5nZXRBdHRyaWJ1dGUoa2V5QXR0cildKVxuICAgICAgOiBudWxsO1xuXG4gIGlmIChrZXlBdHRyUGFpcnMgJiYga2V5QXR0clBhaXJzLmxlbmd0aCkge1xuICAgIGtleUF0dHJQYWlycy5mb3JFYWNoKGtleUF0dHJQYWlyID0+IHtcbiAgICAgIG91dC5wdXNoKGBbJHtrZXlBdHRyUGFpclswXX09XCIke2tleUF0dHJQYWlyWzFdfVwiXWApO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmIChlbGVtLmlkKSB7XG4gICAgICBvdXQucHVzaChgIyR7ZWxlbS5pZH1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBjbGFzc05hbWUgPSBlbGVtLmNsYXNzTmFtZTtcbiAgICBpZiAoY2xhc3NOYW1lICYmIGlzLmlzU3RyaW5nKGNsYXNzTmFtZSkpIHtcbiAgICAgIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWUuc3BsaXQoL1xccysvKTtcbiAgICAgIGZvciAoY29uc3QgYyBvZiBjbGFzc2VzKSB7XG4gICAgICAgIG91dC5wdXNoKGAuJHtjfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBhbGxvd2VkQXR0cnMgPSBbJ2FyaWEtbGFiZWwnLCAndHlwZScsICduYW1lJywgJ3RpdGxlJywgJ2FsdCddO1xuICBmb3IgKGNvbnN0IGsgb2YgYWxsb3dlZEF0dHJzKSB7XG4gICAgY29uc3QgYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKGspO1xuICAgIGlmIChhdHRyKSB7XG4gICAgICBvdXQucHVzaChgWyR7a309XCIke2F0dHJ9XCJdYCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dC5qb2luKCcnKTtcbn1cblxuLyoqXG4gKiBBIHNhZmUgZm9ybSBvZiBsb2NhdGlvbi5ocmVmXG4gKi9cbmZ1bmN0aW9uIGdldExvY2F0aW9uSHJlZigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gV0lORE9XLmRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG4gIH0gY2F0Y2ggKG9PKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyBhIERPTSBlbGVtZW50IGJ5IHVzaW5nIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IuXG4gKlxuICogVGhpcyB3cmFwcGVyIHdpbGwgZmlyc3QgY2hlY2sgZm9yIHRoZSBleGlzdGVuY2Ugb2YgdGhlIGZ1bmN0aW9uIGJlZm9yZVxuICogYWN0dWFsbHkgY2FsbGluZyBpdCBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gdGFrZSBjYXJlIG9mIHRoaXMgY2hlY2ssXG4gKiBldmVyeSB0aW1lIHdlIHdhbnQgdG8gYWNjZXNzIHRoZSBET00uXG4gKlxuICogUmVhc29uOiBET00vcXVlcnlTZWxlY3RvciBpcyBub3QgYXZhaWxhYmxlIGluIGFsbCBlbnZpcm9ubWVudHMuXG4gKlxuICogV2UgaGF2ZSB0byBjYXN0IHRvIGFueSBiZWNhdXNlIHV0aWxzIGNhbiBiZSBjb25zdW1lZCBieSBhIHZhcmlldHkgb2YgZW52aXJvbm1lbnRzLFxuICogYW5kIHdlIGRvbid0IHdhbnQgdG8gYnJlYWsgVFMgdXNlcnMuIElmIHlvdSBrbm93IHdoYXQgZWxlbWVudCB3aWxsIGJlIHNlbGVjdGVkIGJ5XG4gKiBgZG9jdW1lbnQucXVlcnlTZWxlY3RvcmAsIHNwZWNpZnkgaXQgYXMgcGFydCBvZiB0aGUgZ2VuZXJpYyBjYWxsLiBGb3IgZXhhbXBsZSxcbiAqIGBjb25zdCBlbGVtZW50ID0gZ2V0RG9tRWxlbWVudDxFbGVtZW50Pignc2VsZWN0b3InKTtgXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIHRoZSBzZWxlY3RvciBzdHJpbmcgcGFzc2VkIG9uIHRvIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JcbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIG1ldGhvZCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGdldERvbUVsZW1lbnQoc2VsZWN0b3IpIHtcbiAgaWYgKFdJTkRPVy5kb2N1bWVudCAmJiBXSU5ET1cuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcikge1xuICAgIHJldHVybiBXSU5ET1cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgRE9NIGVsZW1lbnQsIHRyYXZlcnNlcyB1cCB0aGUgdHJlZSB1bnRpbCBpdCBmaW5kcyB0aGUgZmlyc3QgYW5jZXN0b3Igbm9kZVxuICogdGhhdCBoYXMgdGhlIGBkYXRhLXNlbnRyeS1jb21wb25lbnRgIG9yIGBkYXRhLXNlbnRyeS1lbGVtZW50YCBhdHRyaWJ1dGUgd2l0aCBgZGF0YS1zZW50cnktY29tcG9uZW50YCB0YWtpbmdcbiAqIHByZWNlZGVuY2UuIFRoaXMgYXR0cmlidXRlIGlzIGFkZGVkIGF0IGJ1aWxkLXRpbWUgYnkgcHJvamVjdHMgdGhhdCBoYXZlIHRoZSBjb21wb25lbnQgbmFtZSBhbm5vdGF0aW9uIHBsdWdpbiBpbnN0YWxsZWQuXG4gKlxuICogQHJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvbXBvbmVudCBmb3IgdGhlIHByb3ZpZGVkIERPTSBlbGVtZW50LCBvciBgbnVsbGAgaWYgbm90IGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUoZWxlbSkge1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIFdJTkRPVyBoYXMgSFRNTEVsZW1lbnRcbiAgaWYgKCFXSU5ET1cuSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBjdXJyZW50RWxlbSA9IGVsZW0gO1xuICBjb25zdCBNQVhfVFJBVkVSU0VfSEVJR0hUID0gNTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBNQVhfVFJBVkVSU0VfSEVJR0hUOyBpKyspIHtcbiAgICBpZiAoIWN1cnJlbnRFbGVtKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgaWYgKGN1cnJlbnRFbGVtLmRhdGFzZXRbJ3NlbnRyeUNvbXBvbmVudCddKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50RWxlbS5kYXRhc2V0WydzZW50cnlDb21wb25lbnQnXTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50RWxlbS5kYXRhc2V0WydzZW50cnlFbGVtZW50J10pIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRFbGVtLmRhdGFzZXRbJ3NlbnRyeUVsZW1lbnQnXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjdXJyZW50RWxlbSA9IGN1cnJlbnRFbGVtLnBhcmVudE5vZGU7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0cy5nZXRDb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZTtcbmV4cG9ydHMuZ2V0RG9tRWxlbWVudCA9IGdldERvbUVsZW1lbnQ7XG5leHBvcnRzLmdldExvY2F0aW9uSHJlZiA9IGdldExvY2F0aW9uSHJlZjtcbmV4cG9ydHMuaHRtbFRyZWVBc1N0cmluZyA9IGh0bWxUcmVlQXNTdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXMiLCJyZXF1aXJlIiwid29ybGR3aWRlIiwiV0lORE9XIiwiR0xPQkFMX09CSiIsIkRFRkFVTFRfTUFYX1NUUklOR19MRU5HVEgiLCJodG1sVHJlZUFzU3RyaW5nIiwiZWxlbSIsIm9wdGlvbnMiLCJjdXJyZW50RWxlbSIsIk1BWF9UUkFWRVJTRV9IRUlHSFQiLCJvdXQiLCJoZWlnaHQiLCJsZW4iLCJzZXBhcmF0b3IiLCJzZXBMZW5ndGgiLCJsZW5ndGgiLCJuZXh0U3RyIiwia2V5QXR0cnMiLCJBcnJheSIsImlzQXJyYXkiLCJtYXhTdHJpbmdMZW5ndGgiLCJfaHRtbEVsZW1lbnRBc1N0cmluZyIsInB1c2giLCJwYXJlbnROb2RlIiwicmV2ZXJzZSIsImpvaW4iLCJfb08iLCJlbCIsInRhZ05hbWUiLCJIVE1MRWxlbWVudCIsImRhdGFzZXQiLCJ0b0xvd2VyQ2FzZSIsImtleUF0dHJQYWlycyIsImZpbHRlciIsImtleUF0dHIiLCJnZXRBdHRyaWJ1dGUiLCJtYXAiLCJmb3JFYWNoIiwia2V5QXR0clBhaXIiLCJpZCIsImNsYXNzTmFtZSIsImlzU3RyaW5nIiwiY2xhc3NlcyIsInNwbGl0IiwiYyIsImFsbG93ZWRBdHRycyIsImsiLCJhdHRyIiwiZ2V0TG9jYXRpb25IcmVmIiwiZG9jdW1lbnQiLCJsb2NhdGlvbiIsImhyZWYiLCJvTyIsImdldERvbUVsZW1lbnQiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRDb21wb25lbnROYW1lIiwiaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/browser.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncNullishCoalesce.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncNullishCoalesce.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst _nullishCoalesce = __webpack_require__(/*! ./_nullishCoalesce.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js\");\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the\n * result of an async operation.\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nasync function _asyncNullishCoalesce(lhs, rhsFn) {\n  return _nullishCoalesce._nullishCoalesce(lhs, rhsFn);\n}\n\n// Sucrase version:\n// async function _asyncNullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return await rhsFn();\n//   }\n// }\n\nexports._asyncNullishCoalesce = _asyncNullishCoalesce;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jTnVsbGlzaENvYWxlc2NlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsZ0JBQWdCLEdBQUdDLG1CQUFPLENBQUMsZ0lBQXVCLENBQUM7O0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlQyxxQkFBcUJBLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxFQUFFO0VBQy9DLE9BQU9KLGdCQUFnQixDQUFDQSxnQkFBZ0IsQ0FBQ0csR0FBRyxFQUFFQyxLQUFLLENBQUM7QUFDdEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQU4sNkJBQTZCLEdBQUdJLHFCQUFxQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9idWlsZFBvbHlmaWxscy9fYXN5bmNOdWxsaXNoQ29hbGVzY2UuanM/NjkyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBfbnVsbGlzaENvYWxlc2NlID0gcmVxdWlyZSgnLi9fbnVsbGlzaENvYWxlc2NlLmpzJyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL3RyZWUvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5ZlxuLy9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IHZhcmlvdXMgY29udHJpYnV0b3JzIChzZWUgQVVUSE9SUylcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG5cbi8qKlxuICogUG9seWZpbGwgZm9yIHRoZSBudWxsaXNoIGNvYWxlc2Npbmcgb3BlcmF0b3IgKGA/P2ApLCB3aGVuIHVzZWQgaW4gc2l0dWF0aW9ucyB3aGVyZSBhdCBsZWFzdCBvbmUgb2YgdGhlIHZhbHVlcyBpcyB0aGVcbiAqIHJlc3VsdCBvZiBhbiBhc3luYyBvcGVyYXRpb24uXG4gKlxuICogTm90ZSB0aGF0IHRoZSBSSFMgaXMgd3JhcHBlZCBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgaWYgaXQncyBhIGNvbXB1dGVkIHZhbHVlLCB0aGF0IGV2YWx1YXRpb24gd29uJ3QgaGFwcGVuIHVubGVzcyB0aGVcbiAqIExIUyBldmFsdWF0ZXMgdG8gYSBudWxsaXNoIHZhbHVlLCB0byBtaW1pYyB0aGUgb3BlcmF0b3IncyBzaG9ydC1jaXJjdWl0aW5nIGJlaGF2aW9yLlxuICpcbiAqIEFkYXB0ZWQgZnJvbSBTdWNyYXNlIChodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZSlcbiAqXG4gKiBAcGFyYW0gbGhzIFRoZSB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvbiB0byB0aGUgbGVmdCBvZiB0aGUgYD8/YFxuICogQHBhcmFtIHJoc0ZuIEEgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSB2YWx1ZSBvZiB0aGUgZXhwcmVzc2lvbiB0byB0aGUgcmlnaHQgb2YgdGhlIGA/P2BcbiAqIEByZXR1cm5zIFRoZSBMSFMgdmFsdWUsIHVubGVzcyBpdCdzIGBudWxsYCBvciBgdW5kZWZpbmVkYCwgaW4gd2hpY2ggY2FzZSwgdGhlIFJIUyB2YWx1ZVxuICovXG5hc3luYyBmdW5jdGlvbiBfYXN5bmNOdWxsaXNoQ29hbGVzY2UobGhzLCByaHNGbikge1xuICByZXR1cm4gX251bGxpc2hDb2FsZXNjZS5fbnVsbGlzaENvYWxlc2NlKGxocywgcmhzRm4pO1xufVxuXG4vLyBTdWNyYXNlIHZlcnNpb246XG4vLyBhc3luYyBmdW5jdGlvbiBfYXN5bmNOdWxsaXNoQ29hbGVzY2UobGhzLCByaHNGbikge1xuLy8gICBpZiAobGhzICE9IG51bGwpIHtcbi8vICAgICByZXR1cm4gbGhzO1xuLy8gICB9IGVsc2Uge1xuLy8gICAgIHJldHVybiBhd2FpdCByaHNGbigpO1xuLy8gICB9XG4vLyB9XG5cbmV4cG9ydHMuX2FzeW5jTnVsbGlzaENvYWxlc2NlID0gX2FzeW5jTnVsbGlzaENvYWxlc2NlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2FzeW5jTnVsbGlzaENvYWxlc2NlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX251bGxpc2hDb2FsZXNjZSIsInJlcXVpcmUiLCJfYXN5bmNOdWxsaXNoQ29hbGVzY2UiLCJsaHMiLCJyaHNGbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncNullishCoalesce.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, for situations in which at least one part of the expression is async.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nasync function _asyncOptionalChain(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = await fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = await fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Sucrase version:\n// async function _asyncOptionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = await fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = await fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n\nexports._asyncOptionalChain = _asyncOptionalChain;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jT3B0aW9uYWxDaGFpbi5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWVDLG1CQUFtQkEsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3RDLElBQUlDLGFBQWEsR0FBR0MsU0FBUztFQUM3QixJQUFJSixLQUFLLEdBQUdFLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDbEIsSUFBSUcsQ0FBQyxHQUFHLENBQUM7RUFDVCxPQUFPQSxDQUFDLEdBQUdILEdBQUcsQ0FBQ0ksTUFBTSxFQUFFO0lBQ3JCLE1BQU1DLEVBQUUsR0FBR0wsR0FBRyxDQUFDRyxDQUFDLENBQUM7SUFDakIsTUFBTUcsRUFBRSxHQUFHTixHQUFHLENBQUNHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckJBLENBQUMsSUFBSSxDQUFDO0lBQ047SUFDQSxJQUFJLENBQUNFLEVBQUUsS0FBSyxnQkFBZ0IsSUFBSUEsRUFBRSxLQUFLLGNBQWMsS0FBS1AsS0FBSyxJQUFJLElBQUksRUFBRTtNQUN2RTtNQUNBO0lBQ0Y7SUFDQSxJQUFJTyxFQUFFLEtBQUssUUFBUSxJQUFJQSxFQUFFLEtBQUssZ0JBQWdCLEVBQUU7TUFDOUNKLGFBQWEsR0FBR0gsS0FBSztNQUNyQkEsS0FBSyxHQUFHLE1BQU1RLEVBQUUsQ0FBQ1IsS0FBSyxDQUFDO0lBQ3pCLENBQUMsTUFBTSxJQUFJTyxFQUFFLEtBQUssTUFBTSxJQUFJQSxFQUFFLEtBQUssY0FBYyxFQUFFO01BQ2pEUCxLQUFLLEdBQUcsTUFBTVEsRUFBRSxDQUFDLENBQUMsR0FBR0MsSUFBSSxLQUFNVCxLQUFLLENBQUdVLElBQUksQ0FBQ1AsYUFBYSxFQUFFLEdBQUdNLElBQUksQ0FBQyxDQUFDO01BQ3BFTixhQUFhLEdBQUdDLFNBQVM7SUFDM0I7RUFDRjtFQUNBLE9BQU9KLEtBQUs7QUFDZDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUQsMkJBQTJCLEdBQUdFLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9idWlsZFBvbHlmaWxscy9fYXN5bmNPcHRpb25hbENoYWluLmpzP2I3MzAiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBQb2x5ZmlsbCBmb3IgdGhlIG9wdGlvbmFsIGNoYWluIG9wZXJhdG9yLCBgPy5gLCBnaXZlbiBwcmV2aW91cyBjb252ZXJzaW9uIG9mIHRoZSBleHByZXNzaW9uIGludG8gYW4gYXJyYXkgb2YgdmFsdWVzLFxuICogZGVzY3JpcHRvcnMsIGFuZCBmdW5jdGlvbnMsIGZvciBzaXR1YXRpb25zIGluIHdoaWNoIGF0IGxlYXN0IG9uZSBwYXJ0IG9mIHRoZSBleHByZXNzaW9uIGlzIGFzeW5jLlxuICpcbiAqIEFkYXB0ZWQgZnJvbSBTdWNyYXNlIChodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZSkgU2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZS9ibG9iLzI2NTg4Nzg2ODk2NjkxN2YzYjkyNGNlMzhkZmFkMDFmYmFiMTMyOWYvc3JjL3RyYW5zZm9ybWVycy9PcHRpb25hbENoYWluaW5nTnVsbGlzaFRyYW5zZm9ybWVyLnRzI0wxNVxuICpcbiAqIEBwYXJhbSBvcHMgQXJyYXkgcmVzdWx0IG9mIGV4cHJlc3Npb24gY29udmVyc2lvblxuICogQHJldHVybnMgVGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIF9hc3luY09wdGlvbmFsQ2hhaW4ob3BzKSB7XG4gIGxldCBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuICBsZXQgdmFsdWUgPSBvcHNbMF07XG4gIGxldCBpID0gMTtcbiAgd2hpbGUgKGkgPCBvcHMubGVuZ3RoKSB7XG4gICAgY29uc3Qgb3AgPSBvcHNbaV0gO1xuICAgIGNvbnN0IGZuID0gb3BzW2kgKyAxXSA7XG4gICAgaSArPSAyO1xuICAgIC8vIGJ5IGNoZWNraW5nIGZvciBsb29zZSBlcXVhbGl0eSB0byBgbnVsbGAsIHdlIGNhdGNoIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIGlmICgob3AgPT09ICdvcHRpb25hbEFjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAvLyByZWFsbHkgd2UncmUgbWVhbmluZyB0byByZXR1cm4gYHVuZGVmaW5lZGAgYXMgYW4gYWN0dWFsIHZhbHVlIGhlcmUsIGJ1dCBpdCBzYXZlcyBieXRlcyBub3QgdG8gd3JpdGUgaXRcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wID09PSAnYWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJykge1xuICAgICAgbGFzdEFjY2Vzc0xIUyA9IHZhbHVlO1xuICAgICAgdmFsdWUgPSBhd2FpdCBmbih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChvcCA9PT0gJ2NhbGwnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykge1xuICAgICAgdmFsdWUgPSBhd2FpdCBmbigoLi4uYXJncykgPT4gKHZhbHVlICkuY2FsbChsYXN0QWNjZXNzTEhTLCAuLi5hcmdzKSk7XG4gICAgICBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvbjpcbi8vIGFzeW5jIGZ1bmN0aW9uIF9hc3luY09wdGlvbmFsQ2hhaW4ob3BzKSB7XG4vLyAgIGxldCBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuLy8gICBsZXQgdmFsdWUgPSBvcHNbMF07XG4vLyAgIGxldCBpID0gMTtcbi8vICAgd2hpbGUgKGkgPCBvcHMubGVuZ3RoKSB7XG4vLyAgICAgY29uc3Qgb3AgPSBvcHNbaV07XG4vLyAgICAgY29uc3QgZm4gPSBvcHNbaSArIDFdO1xuLy8gICAgIGkgKz0gMjtcbi8vICAgICBpZiAoKG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgJiYgdmFsdWUgPT0gbnVsbCkge1xuLy8gICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbi8vICAgICB9XG4vLyAgICAgaWYgKG9wID09PSAnYWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJykge1xuLy8gICAgICAgbGFzdEFjY2Vzc0xIUyA9IHZhbHVlO1xuLy8gICAgICAgdmFsdWUgPSBhd2FpdCBmbih2YWx1ZSk7XG4vLyAgICAgfSBlbHNlIGlmIChvcCA9PT0gJ2NhbGwnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykge1xuLy8gICAgICAgdmFsdWUgPSBhd2FpdCBmbigoLi4uYXJncykgPT4gdmFsdWUuY2FsbChsYXN0QWNjZXNzTEhTLCAuLi5hcmdzKSk7XG4vLyAgICAgICBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gICByZXR1cm4gdmFsdWU7XG4vLyB9XG5cbmV4cG9ydHMuX2FzeW5jT3B0aW9uYWxDaGFpbiA9IF9hc3luY09wdGlvbmFsQ2hhaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fYXN5bmNPcHRpb25hbENoYWluLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2FzeW5jT3B0aW9uYWxDaGFpbiIsIm9wcyIsImxhc3RBY2Nlc3NMSFMiLCJ1bmRlZmluZWQiLCJpIiwibGVuZ3RoIiwib3AiLCJmbiIsImFyZ3MiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst _asyncOptionalChain = __webpack_require__(/*! ./_asyncOptionalChain.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js\");\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, in cases where the value of the expression is to be deleted.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable\n * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which\n * case `false`.\n */\nasync function _asyncOptionalChainDelete(ops) {\n  const result = await _asyncOptionalChain._asyncOptionalChain(ops);\n  // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,\n  // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in\n  // which case we return whatever the `delete` returned, which will be a boolean.\n  return result == null ? true : result;\n}\n\n// Sucrase version:\n// async function asyncOptionalChainDelete(ops) {\n//   const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);\n//   return result == null ? true : result;\n// }\n\nexports._asyncOptionalChainDelete = _asyncOptionalChainDelete;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLG1CQUFtQixHQUFHQyxtQkFBTyxDQUFDLHNJQUEwQixDQUFDOztBQUUvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWVDLHlCQUF5QkEsQ0FBQ0MsR0FBRyxFQUFFO0VBQzVDLE1BQU1DLE1BQU0sR0FBSSxNQUFNSixtQkFBbUIsQ0FBQ0EsbUJBQW1CLENBQUNHLEdBQUcsQ0FBRTtFQUNuRTtFQUNBO0VBQ0E7RUFDQSxPQUFPQyxNQUFNLElBQUksSUFBSSxHQUFHLElBQUksR0FBSUEsTUFBUTtBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBTixpQ0FBaUMsR0FBR0kseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2J1aWxkUG9seWZpbGxzL19hc3luY09wdGlvbmFsQ2hhaW5EZWxldGUuanM/MzgyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBfYXN5bmNPcHRpb25hbENoYWluID0gcmVxdWlyZSgnLi9fYXN5bmNPcHRpb25hbENoYWluLmpzJyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL3RyZWUvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5ZlxuLy9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IHZhcmlvdXMgY29udHJpYnV0b3JzIChzZWUgQVVUSE9SUylcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG5cbi8qKlxuICogUG9seWZpbGwgZm9yIHRoZSBvcHRpb25hbCBjaGFpbiBvcGVyYXRvciwgYD8uYCwgZ2l2ZW4gcHJldmlvdXMgY29udmVyc2lvbiBvZiB0aGUgZXhwcmVzc2lvbiBpbnRvIGFuIGFycmF5IG9mIHZhbHVlcyxcbiAqIGRlc2NyaXB0b3JzLCBhbmQgZnVuY3Rpb25zLCBpbiBjYXNlcyB3aGVyZSB0aGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gaXMgdG8gYmUgZGVsZXRlZC5cbiAqXG4gKiBBZGFwdGVkIGZyb20gU3VjcmFzZSAoaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UpIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2FsYW5ncGllcmNlL3N1Y3Jhc2UvYmxvYi8yNjU4ODc4Njg5NjY5MTdmM2I5MjRjZTM4ZGZhZDAxZmJhYjEzMjlmL3NyYy90cmFuc2Zvcm1lcnMvT3B0aW9uYWxDaGFpbmluZ051bGxpc2hUcmFuc2Zvcm1lci50cyNMMTVcbiAqXG4gKiBAcGFyYW0gb3BzIEFycmF5IHJlc3VsdCBvZiBleHByZXNzaW9uIGNvbnZlcnNpb25cbiAqIEByZXR1cm5zIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBkZWxldGVgIG9wZXJhdG9yOiBgdHJ1ZWAsIHVubGVzcyB0aGUgZGVsZXRpb24gdGFyZ2V0IGlzIGFuIG93biwgbm9uLWNvbmZpZ3VyYWJsZVxuICogcHJvcGVydHkgKG9uZSB3aGljaCBjYW4ndCBiZSBkZWxldGVkIG9yIHR1cm5lZCBpbnRvIGFuIGFjY2Vzc29yLCBhbmQgd2hvc2UgZW51bWVyYWJpbGl0eSBjYW4ndCBiZSBjaGFuZ2VkKSwgaW4gd2hpY2hcbiAqIGNhc2UgYGZhbHNlYC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZShvcHMpIHtcbiAgY29uc3QgcmVzdWx0ID0gKGF3YWl0IF9hc3luY09wdGlvbmFsQ2hhaW4uX2FzeW5jT3B0aW9uYWxDaGFpbihvcHMpKSA7XG4gIC8vIElmIGByZXN1bHRgIGlzIGBudWxsYCwgaXQgbWVhbnMgd2UgZGlkbid0IGdldCB0byB0aGUgZW5kIG9mIHRoZSBjaGFpbiBhbmQgc28gbm90aGluZyB3YXMgZGVsZXRlZCAoaW4gd2hpY2ggY2FzZSxcbiAgLy8gcmV0dXJuIGB0cnVlYCBzaW5jZSB0aGF0J3Mgd2hhdCBgZGVsZXRlYCBkb2VzIHdoZW4gaXQgbm8tb3BzKS4gSWYgaXQncyBub24tbnVsbCwgd2Uga25vdyB0aGUgZGVsZXRlIGhhcHBlbmVkLCBpblxuICAvLyB3aGljaCBjYXNlIHdlIHJldHVybiB3aGF0ZXZlciB0aGUgYGRlbGV0ZWAgcmV0dXJuZWQsIHdoaWNoIHdpbGwgYmUgYSBib29sZWFuLlxuICByZXR1cm4gcmVzdWx0ID09IG51bGwgPyB0cnVlIDogKHJlc3VsdCApO1xufVxuXG4vLyBTdWNyYXNlIHZlcnNpb246XG4vLyBhc3luYyBmdW5jdGlvbiBhc3luY09wdGlvbmFsQ2hhaW5EZWxldGUob3BzKSB7XG4vLyAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IEFTWU5DX09QVElPTkFMX0NIQUlOX05BTUUob3BzKTtcbi8vICAgcmV0dXJuIHJlc3VsdCA9PSBudWxsID8gdHJ1ZSA6IHJlc3VsdDtcbi8vIH1cblxuZXhwb3J0cy5fYXN5bmNPcHRpb25hbENoYWluRGVsZXRlID0gX2FzeW5jT3B0aW9uYWxDaGFpbkRlbGV0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9hc3luY09wdGlvbmFsQ2hhaW5EZWxldGUuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfYXN5bmNPcHRpb25hbENoYWluIiwicmVxdWlyZSIsIl9hc3luY09wdGlvbmFsQ2hhaW5EZWxldGUiLCJvcHMiLCJyZXN1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * Polyfill for the nullish coalescing operator (`??`).\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\nfunction _nullishCoalesce(lhs, rhsFn) {\n  // by checking for loose equality to `null`, we catch both `null` and `undefined`\n  return lhs != null ? lhs : rhsFn();\n}\n\n// Sucrase version:\n// function _nullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return rhsFn();\n//   }\n// }\n\nexports._nullishCoalesce = _nullishCoalesce;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX251bGxpc2hDb2FsZXNjZS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLEVBQUU7RUFDcEM7RUFDQSxPQUFPRCxHQUFHLElBQUksSUFBSSxHQUFHQSxHQUFHLEdBQUdDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFKLHdCQUF3QixHQUFHRSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX251bGxpc2hDb2FsZXNjZS5qcz8wZTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL3RyZWUvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5ZlxuLy9cbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IHZhcmlvdXMgY29udHJpYnV0b3JzIChzZWUgQVVUSE9SUylcbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4vLyBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbi8vIFNPRlRXQVJFLlxuXG4vKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgbnVsbGlzaCBjb2FsZXNjaW5nIG9wZXJhdG9yIChgPz9gKS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIFJIUyBpcyB3cmFwcGVkIGluIGEgZnVuY3Rpb24gc28gdGhhdCBpZiBpdCdzIGEgY29tcHV0ZWQgdmFsdWUsIHRoYXQgZXZhbHVhdGlvbiB3b24ndCBoYXBwZW4gdW5sZXNzIHRoZVxuICogTEhTIGV2YWx1YXRlcyB0byBhIG51bGxpc2ggdmFsdWUsIHRvIG1pbWljIHRoZSBvcGVyYXRvcidzIHNob3J0LWNpcmN1aXRpbmcgYmVoYXZpb3IuXG4gKlxuICogQWRhcHRlZCBmcm9tIFN1Y3Jhc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlKVxuICpcbiAqIEBwYXJhbSBsaHMgVGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIHRvIHRoZSBsZWZ0IG9mIHRoZSBgPz9gXG4gKiBAcGFyYW0gcmhzRm4gQSBmdW5jdGlvbiByZXR1cm5pbmcgdGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIHRvIHRoZSByaWdodCBvZiB0aGUgYD8/YFxuICogQHJldHVybnMgVGhlIExIUyB2YWx1ZSwgdW5sZXNzIGl0J3MgYG51bGxgIG9yIGB1bmRlZmluZWRgLCBpbiB3aGljaCBjYXNlLCB0aGUgUkhTIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIF9udWxsaXNoQ29hbGVzY2UobGhzLCByaHNGbikge1xuICAvLyBieSBjaGVja2luZyBmb3IgbG9vc2UgZXF1YWxpdHkgdG8gYG51bGxgLCB3ZSBjYXRjaCBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgcmV0dXJuIGxocyAhPSBudWxsID8gbGhzIDogcmhzRm4oKTtcbn1cblxuLy8gU3VjcmFzZSB2ZXJzaW9uOlxuLy8gZnVuY3Rpb24gX251bGxpc2hDb2FsZXNjZShsaHMsIHJoc0ZuKSB7XG4vLyAgIGlmIChsaHMgIT0gbnVsbCkge1xuLy8gICAgIHJldHVybiBsaHM7XG4vLyAgIH0gZWxzZSB7XG4vLyAgICAgcmV0dXJuIHJoc0ZuKCk7XG4vLyAgIH1cbi8vIH1cblxuZXhwb3J0cy5fbnVsbGlzaENvYWxlc2NlID0gX251bGxpc2hDb2FsZXNjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9udWxsaXNoQ29hbGVzY2UuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfbnVsbGlzaENvYWxlc2NlIiwibGhzIiwicmhzRm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nfunction _optionalChain(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n\nexports._optionalChain = _optionalChain;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX29wdGlvbmFsQ2hhaW4uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxjQUFjQSxDQUFDQyxHQUFHLEVBQUU7RUFDM0IsSUFBSUMsYUFBYSxHQUFHQyxTQUFTO0VBQzdCLElBQUlKLEtBQUssR0FBR0UsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNsQixJQUFJRyxDQUFDLEdBQUcsQ0FBQztFQUNULE9BQU9BLENBQUMsR0FBR0gsR0FBRyxDQUFDSSxNQUFNLEVBQUU7SUFDckIsTUFBTUMsRUFBRSxHQUFHTCxHQUFHLENBQUNHLENBQUMsQ0FBQztJQUNqQixNQUFNRyxFQUFFLEdBQUdOLEdBQUcsQ0FBQ0csQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQkEsQ0FBQyxJQUFJLENBQUM7SUFDTjtJQUNBLElBQUksQ0FBQ0UsRUFBRSxLQUFLLGdCQUFnQixJQUFJQSxFQUFFLEtBQUssY0FBYyxLQUFLUCxLQUFLLElBQUksSUFBSSxFQUFFO01BQ3ZFO01BQ0E7SUFDRjtJQUNBLElBQUlPLEVBQUUsS0FBSyxRQUFRLElBQUlBLEVBQUUsS0FBSyxnQkFBZ0IsRUFBRTtNQUM5Q0osYUFBYSxHQUFHSCxLQUFLO01BQ3JCQSxLQUFLLEdBQUdRLEVBQUUsQ0FBQ1IsS0FBSyxDQUFDO0lBQ25CLENBQUMsTUFBTSxJQUFJTyxFQUFFLEtBQUssTUFBTSxJQUFJQSxFQUFFLEtBQUssY0FBYyxFQUFFO01BQ2pEUCxLQUFLLEdBQUdRLEVBQUUsQ0FBQyxDQUFDLEdBQUdDLElBQUksS0FBTVQsS0FBSyxDQUFHVSxJQUFJLENBQUNQLGFBQWEsRUFBRSxHQUFHTSxJQUFJLENBQUMsQ0FBQztNQUM5RE4sYUFBYSxHQUFHQyxTQUFTO0lBQzNCO0VBQ0Y7RUFDQSxPQUFPSixLQUFLO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFELHNCQUFzQixHQUFHRSxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2J1aWxkUG9seWZpbGxzL19vcHRpb25hbENoYWluLmpzP2JkMTYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBQb2x5ZmlsbCBmb3IgdGhlIG9wdGlvbmFsIGNoYWluIG9wZXJhdG9yLCBgPy5gLCBnaXZlbiBwcmV2aW91cyBjb252ZXJzaW9uIG9mIHRoZSBleHByZXNzaW9uIGludG8gYW4gYXJyYXkgb2YgdmFsdWVzLFxuICogZGVzY3JpcHRvcnMsIGFuZCBmdW5jdGlvbnMuXG4gKlxuICogQWRhcHRlZCBmcm9tIFN1Y3Jhc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlKVxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL2Jsb2IvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5Zi9zcmMvdHJhbnNmb3JtZXJzL09wdGlvbmFsQ2hhaW5pbmdOdWxsaXNoVHJhbnNmb3JtZXIudHMjTDE1XG4gKlxuICogQHBhcmFtIG9wcyBBcnJheSByZXN1bHQgb2YgZXhwcmVzc2lvbiBjb252ZXJzaW9uXG4gKiBAcmV0dXJucyBUaGUgdmFsdWUgb2YgdGhlIGV4cHJlc3Npb25cbiAqL1xuZnVuY3Rpb24gX29wdGlvbmFsQ2hhaW4ob3BzKSB7XG4gIGxldCBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuICBsZXQgdmFsdWUgPSBvcHNbMF07XG4gIGxldCBpID0gMTtcbiAgd2hpbGUgKGkgPCBvcHMubGVuZ3RoKSB7XG4gICAgY29uc3Qgb3AgPSBvcHNbaV0gO1xuICAgIGNvbnN0IGZuID0gb3BzW2kgKyAxXSA7XG4gICAgaSArPSAyO1xuICAgIC8vIGJ5IGNoZWNraW5nIGZvciBsb29zZSBlcXVhbGl0eSB0byBgbnVsbGAsIHdlIGNhdGNoIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIGlmICgob3AgPT09ICdvcHRpb25hbEFjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAvLyByZWFsbHkgd2UncmUgbWVhbmluZyB0byByZXR1cm4gYHVuZGVmaW5lZGAgYXMgYW4gYWN0dWFsIHZhbHVlIGhlcmUsIGJ1dCBpdCBzYXZlcyBieXRlcyBub3QgdG8gd3JpdGUgaXRcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wID09PSAnYWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJykge1xuICAgICAgbGFzdEFjY2Vzc0xIUyA9IHZhbHVlO1xuICAgICAgdmFsdWUgPSBmbih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChvcCA9PT0gJ2NhbGwnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykge1xuICAgICAgdmFsdWUgPSBmbigoLi4uYXJncykgPT4gKHZhbHVlICkuY2FsbChsYXN0QWNjZXNzTEhTLCAuLi5hcmdzKSk7XG4gICAgICBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvblxuLy8gZnVuY3Rpb24gX29wdGlvbmFsQ2hhaW4ob3BzKSB7XG4vLyAgIGxldCBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuLy8gICBsZXQgdmFsdWUgPSBvcHNbMF07XG4vLyAgIGxldCBpID0gMTtcbi8vICAgd2hpbGUgKGkgPCBvcHMubGVuZ3RoKSB7XG4vLyAgICAgY29uc3Qgb3AgPSBvcHNbaV07XG4vLyAgICAgY29uc3QgZm4gPSBvcHNbaSArIDFdO1xuLy8gICAgIGkgKz0gMjtcbi8vICAgICBpZiAoKG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgJiYgdmFsdWUgPT0gbnVsbCkge1xuLy8gICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbi8vICAgICB9XG4vLyAgICAgaWYgKG9wID09PSAnYWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJykge1xuLy8gICAgICAgbGFzdEFjY2Vzc0xIUyA9IHZhbHVlO1xuLy8gICAgICAgdmFsdWUgPSBmbih2YWx1ZSk7XG4vLyAgICAgfSBlbHNlIGlmIChvcCA9PT0gJ2NhbGwnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykge1xuLy8gICAgICAgdmFsdWUgPSBmbigoLi4uYXJncykgPT4gdmFsdWUuY2FsbChsYXN0QWNjZXNzTEhTLCAuLi5hcmdzKSk7XG4vLyAgICAgICBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gICByZXR1cm4gdmFsdWU7XG4vLyB9XG5cbmV4cG9ydHMuX29wdGlvbmFsQ2hhaW4gPSBfb3B0aW9uYWxDaGFpbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9vcHRpb25hbENoYWluLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX29wdGlvbmFsQ2hhaW4iLCJvcHMiLCJsYXN0QWNjZXNzTEhTIiwidW5kZWZpbmVkIiwiaSIsImxlbmd0aCIsIm9wIiwiZm4iLCJhcmdzIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChainDelete.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChainDelete.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst _optionalChain = __webpack_require__(/*! ./_optionalChain.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js\");\n\n// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2012-2018 various contributors (see AUTHORS)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, in cases where the value of the expression is to be deleted.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable\n * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which\n * case `false`.\n */\nfunction _optionalChainDelete(ops) {\n  const result = _optionalChain._optionalChain(ops);\n  // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,\n  // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in\n  // which case we return whatever the `delete` returned, which will be a boolean.\n  return result == null ? true : result;\n}\n\n// Sucrase version:\n// function _optionalChainDelete(ops) {\n//   const result = _optionalChain(ops);\n//   // by checking for loose equality to `null`, we catch both `null` and `undefined`\n//   return result == null ? true : result;\n// }\n\nexports._optionalChainDelete = _optionalChainDelete;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvYnVpbGRQb2x5ZmlsbHMvX29wdGlvbmFsQ2hhaW5EZWxldGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxjQUFjLEdBQUdDLG1CQUFPLENBQUMsNEhBQXFCLENBQUM7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Msb0JBQW9CQSxDQUFDQyxHQUFHLEVBQUU7RUFDakMsTUFBTUMsTUFBTSxHQUFHSixjQUFjLENBQUNBLGNBQWMsQ0FBQ0csR0FBRyxDQUFDO0VBQ2pEO0VBQ0E7RUFDQTtFQUNBLE9BQU9DLE1BQU0sSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHQSxNQUFNO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQU4sNEJBQTRCLEdBQUdJLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9idWlsZFBvbHlmaWxscy9fb3B0aW9uYWxDaGFpbkRlbGV0ZS5qcz82NGEwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IF9vcHRpb25hbENoYWluID0gcmVxdWlyZSgnLi9fb3B0aW9uYWxDaGFpbi5qcycpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYWxhbmdwaWVyY2Uvc3VjcmFzZS90cmVlLzI2NTg4Nzg2ODk2NjkxN2YzYjkyNGNlMzhkZmFkMDFmYmFiMTMyOWZcbi8vXG4vLyBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCB2YXJpb3VzIGNvbnRyaWJ1dG9ycyAoc2VlIEFVVEhPUlMpXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuLy8gY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4vLyBTT0ZUV0FSRS5cblxuXG4vKipcbiAqIFBvbHlmaWxsIGZvciB0aGUgb3B0aW9uYWwgY2hhaW4gb3BlcmF0b3IsIGA/LmAsIGdpdmVuIHByZXZpb3VzIGNvbnZlcnNpb24gb2YgdGhlIGV4cHJlc3Npb24gaW50byBhbiBhcnJheSBvZiB2YWx1ZXMsXG4gKiBkZXNjcmlwdG9ycywgYW5kIGZ1bmN0aW9ucywgaW4gY2FzZXMgd2hlcmUgdGhlIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIGlzIHRvIGJlIGRlbGV0ZWQuXG4gKlxuICogQWRhcHRlZCBmcm9tIFN1Y3Jhc2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlKSBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGFuZ3BpZXJjZS9zdWNyYXNlL2Jsb2IvMjY1ODg3ODY4OTY2OTE3ZjNiOTI0Y2UzOGRmYWQwMWZiYWIxMzI5Zi9zcmMvdHJhbnNmb3JtZXJzL09wdGlvbmFsQ2hhaW5pbmdOdWxsaXNoVHJhbnNmb3JtZXIudHMjTDE1XG4gKlxuICogQHBhcmFtIG9wcyBBcnJheSByZXN1bHQgb2YgZXhwcmVzc2lvbiBjb252ZXJzaW9uXG4gKiBAcmV0dXJucyBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgZGVsZXRlYCBvcGVyYXRvcjogYHRydWVgLCB1bmxlc3MgdGhlIGRlbGV0aW9uIHRhcmdldCBpcyBhbiBvd24sIG5vbi1jb25maWd1cmFibGVcbiAqIHByb3BlcnR5IChvbmUgd2hpY2ggY2FuJ3QgYmUgZGVsZXRlZCBvciB0dXJuZWQgaW50byBhbiBhY2Nlc3NvciwgYW5kIHdob3NlIGVudW1lcmFiaWxpdHkgY2FuJ3QgYmUgY2hhbmdlZCksIGluIHdoaWNoXG4gKiBjYXNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIF9vcHRpb25hbENoYWluRGVsZXRlKG9wcykge1xuICBjb25zdCByZXN1bHQgPSBfb3B0aW9uYWxDaGFpbi5fb3B0aW9uYWxDaGFpbihvcHMpIDtcbiAgLy8gSWYgYHJlc3VsdGAgaXMgYG51bGxgLCBpdCBtZWFucyB3ZSBkaWRuJ3QgZ2V0IHRvIHRoZSBlbmQgb2YgdGhlIGNoYWluIGFuZCBzbyBub3RoaW5nIHdhcyBkZWxldGVkIChpbiB3aGljaCBjYXNlLFxuICAvLyByZXR1cm4gYHRydWVgIHNpbmNlIHRoYXQncyB3aGF0IGBkZWxldGVgIGRvZXMgd2hlbiBpdCBuby1vcHMpLiBJZiBpdCdzIG5vbi1udWxsLCB3ZSBrbm93IHRoZSBkZWxldGUgaGFwcGVuZWQsIGluXG4gIC8vIHdoaWNoIGNhc2Ugd2UgcmV0dXJuIHdoYXRldmVyIHRoZSBgZGVsZXRlYCByZXR1cm5lZCwgd2hpY2ggd2lsbCBiZSBhIGJvb2xlYW4uXG4gIHJldHVybiByZXN1bHQgPT0gbnVsbCA/IHRydWUgOiByZXN1bHQ7XG59XG5cbi8vIFN1Y3Jhc2UgdmVyc2lvbjpcbi8vIGZ1bmN0aW9uIF9vcHRpb25hbENoYWluRGVsZXRlKG9wcykge1xuLy8gICBjb25zdCByZXN1bHQgPSBfb3B0aW9uYWxDaGFpbihvcHMpO1xuLy8gICAvLyBieSBjaGVja2luZyBmb3IgbG9vc2UgZXF1YWxpdHkgdG8gYG51bGxgLCB3ZSBjYXRjaCBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbi8vICAgcmV0dXJuIHJlc3VsdCA9PSBudWxsID8gdHJ1ZSA6IHJlc3VsdDtcbi8vIH1cblxuZXhwb3J0cy5fb3B0aW9uYWxDaGFpbkRlbGV0ZSA9IF9vcHRpb25hbENoYWluRGVsZXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X29wdGlvbmFsQ2hhaW5EZWxldGUuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfb3B0aW9uYWxDaGFpbiIsInJlcXVpcmUiLCJfb3B0aW9uYWxDaGFpbkRlbGV0ZSIsIm9wcyIsInJlc3VsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChainDelete.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cache.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/cache.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Creates a cache that evicts keys in fifo order\n * @param size {Number}\n *\n * @deprecated This function is deprecated and will be removed in the next major version.\n */\nfunction makeFifoCache(size) {\n  // Maintain a fifo queue of keys, we cannot rely on Object.keys as the browser may not support it.\n  let evictionOrder = [];\n  let cache = {};\n  return {\n    add(key, value) {\n      while (evictionOrder.length >= size) {\n        // shift is O(n) but this is small size and only happens if we are\n        // exceeding the cache size so it should be fine.\n        const evictCandidate = evictionOrder.shift();\n        if (evictCandidate !== undefined) {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete cache[evictCandidate];\n        }\n      }\n\n      // in case we have a collision, delete the old key.\n      if (cache[key]) {\n        this.delete(key);\n      }\n      evictionOrder.push(key);\n      cache[key] = value;\n    },\n    clear() {\n      cache = {};\n      evictionOrder = [];\n    },\n    get(key) {\n      return cache[key];\n    },\n    size() {\n      return evictionOrder.length;\n    },\n    // Delete cache key and return true if it existed, false otherwise.\n    delete(key) {\n      if (!cache[key]) {\n        return false;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete cache[key];\n      for (let i = 0; i < evictionOrder.length; i++) {\n        if (evictionOrder[i] === key) {\n          evictionOrder.splice(i, 1);\n          break;\n        }\n      }\n      return true;\n    }\n  };\n}\nexports.makeFifoCache = makeFifoCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvY2FjaGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsYUFBYUEsQ0FDcEJDLElBQUksRUFHTDtFQUNDO0VBQ0EsSUFBSUMsYUFBYSxHQUFHLEVBQUU7RUFDdEIsSUFBSUMsS0FBSyxHQUFHLENBQUMsQ0FBQztFQUVkLE9BQU87SUFDTEMsR0FBR0EsQ0FBQ0MsR0FBRyxFQUFFTixLQUFLLEVBQUU7TUFDZCxPQUFPRyxhQUFhLENBQUNJLE1BQU0sSUFBSUwsSUFBSSxFQUFFO1FBQ25DO1FBQ0E7UUFDQSxNQUFNTSxjQUFjLEdBQUdMLGFBQWEsQ0FBQ00sS0FBSyxDQUFDLENBQUM7UUFFNUMsSUFBSUQsY0FBYyxLQUFLRSxTQUFTLEVBQUU7VUFDaEM7VUFDQSxPQUFPTixLQUFLLENBQUNJLGNBQWMsQ0FBQztRQUM5QjtNQUNGOztNQUVBO01BQ0EsSUFBSUosS0FBSyxDQUFDRSxHQUFHLENBQUMsRUFBRTtRQUNkLElBQUksQ0FBQ0ssTUFBTSxDQUFDTCxHQUFHLENBQUM7TUFDbEI7TUFFQUgsYUFBYSxDQUFDUyxJQUFJLENBQUNOLEdBQUcsQ0FBQztNQUN2QkYsS0FBSyxDQUFDRSxHQUFHLENBQUMsR0FBR04sS0FBSztJQUNwQixDQUFDO0lBQ0RhLEtBQUtBLENBQUEsRUFBRztNQUNOVCxLQUFLLEdBQUcsQ0FBQyxDQUFDO01BQ1ZELGFBQWEsR0FBRyxFQUFFO0lBQ3BCLENBQUM7SUFDRFcsR0FBR0EsQ0FBQ1IsR0FBRyxFQUFFO01BQ1AsT0FBT0YsS0FBSyxDQUFDRSxHQUFHLENBQUM7SUFDbkIsQ0FBQztJQUNESixJQUFJQSxDQUFBLEVBQUc7TUFDTCxPQUFPQyxhQUFhLENBQUNJLE1BQU07SUFDN0IsQ0FBQztJQUNEO0lBQ0FJLE1BQU1BLENBQUNMLEdBQUcsRUFBRTtNQUNWLElBQUksQ0FBQ0YsS0FBSyxDQUFDRSxHQUFHLENBQUMsRUFBRTtRQUNmLE9BQU8sS0FBSztNQUNkOztNQUVBO01BQ0EsT0FBT0YsS0FBSyxDQUFDRSxHQUFHLENBQUM7TUFFakIsS0FBSyxJQUFJUyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdaLGFBQWEsQ0FBQ0ksTUFBTSxFQUFFUSxDQUFDLEVBQUUsRUFBRTtRQUM3QyxJQUFJWixhQUFhLENBQUNZLENBQUMsQ0FBQyxLQUFLVCxHQUFHLEVBQUU7VUFDNUJILGFBQWEsQ0FBQ2EsTUFBTSxDQUFDRCxDQUFDLEVBQUUsQ0FBQyxDQUFDO1VBQzFCO1FBQ0Y7TUFDRjtNQUVBLE9BQU8sSUFBSTtJQUNiO0VBQ0YsQ0FBQztBQUNIO0FBRUFoQixxQkFBcUIsR0FBR0UsYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9jYWNoZS5qcz8xOTYzIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNhY2hlIHRoYXQgZXZpY3RzIGtleXMgaW4gZmlmbyBvcmRlclxuICogQHBhcmFtIHNpemUge051bWJlcn1cbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBtYWtlRmlmb0NhY2hlKFxuICBzaXplLFxuKVxuXG4ge1xuICAvLyBNYWludGFpbiBhIGZpZm8gcXVldWUgb2Yga2V5cywgd2UgY2Fubm90IHJlbHkgb24gT2JqZWN0LmtleXMgYXMgdGhlIGJyb3dzZXIgbWF5IG5vdCBzdXBwb3J0IGl0LlxuICBsZXQgZXZpY3Rpb25PcmRlciA9IFtdO1xuICBsZXQgY2FjaGUgPSB7fTtcblxuICByZXR1cm4ge1xuICAgIGFkZChrZXksIHZhbHVlKSB7XG4gICAgICB3aGlsZSAoZXZpY3Rpb25PcmRlci5sZW5ndGggPj0gc2l6ZSkge1xuICAgICAgICAvLyBzaGlmdCBpcyBPKG4pIGJ1dCB0aGlzIGlzIHNtYWxsIHNpemUgYW5kIG9ubHkgaGFwcGVucyBpZiB3ZSBhcmVcbiAgICAgICAgLy8gZXhjZWVkaW5nIHRoZSBjYWNoZSBzaXplIHNvIGl0IHNob3VsZCBiZSBmaW5lLlxuICAgICAgICBjb25zdCBldmljdENhbmRpZGF0ZSA9IGV2aWN0aW9uT3JkZXIuc2hpZnQoKTtcblxuICAgICAgICBpZiAoZXZpY3RDYW5kaWRhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGVcbiAgICAgICAgICBkZWxldGUgY2FjaGVbZXZpY3RDYW5kaWRhdGVdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGluIGNhc2Ugd2UgaGF2ZSBhIGNvbGxpc2lvbiwgZGVsZXRlIHRoZSBvbGQga2V5LlxuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdGhpcy5kZWxldGUoa2V5KTtcbiAgICAgIH1cblxuICAgICAgZXZpY3Rpb25PcmRlci5wdXNoKGtleSk7XG4gICAgICBjYWNoZVtrZXldID0gdmFsdWU7XG4gICAgfSxcbiAgICBjbGVhcigpIHtcbiAgICAgIGNhY2hlID0ge307XG4gICAgICBldmljdGlvbk9yZGVyID0gW107XG4gICAgfSxcbiAgICBnZXQoa2V5KSB7XG4gICAgICByZXR1cm4gY2FjaGVba2V5XTtcbiAgICB9LFxuICAgIHNpemUoKSB7XG4gICAgICByZXR1cm4gZXZpY3Rpb25PcmRlci5sZW5ndGg7XG4gICAgfSxcbiAgICAvLyBEZWxldGUgY2FjaGUga2V5IGFuZCByZXR1cm4gdHJ1ZSBpZiBpdCBleGlzdGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgaWYgKCFjYWNoZVtrZXldKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgICAgZGVsZXRlIGNhY2hlW2tleV07XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZpY3Rpb25PcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZXZpY3Rpb25PcmRlcltpXSA9PT0ga2V5KSB7XG4gICAgICAgICAgZXZpY3Rpb25PcmRlci5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0cy5tYWtlRmlmb0NhY2hlID0gbWFrZUZpZm9DYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWFrZUZpZm9DYWNoZSIsInNpemUiLCJldmljdGlvbk9yZGVyIiwiY2FjaGUiLCJhZGQiLCJrZXkiLCJsZW5ndGgiLCJldmljdENhbmRpZGF0ZSIsInNoaWZ0IiwidW5kZWZpbmVkIiwiZGVsZXRlIiwicHVzaCIsImNsZWFyIiwiZ2V0IiwiaSIsInNwbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cache.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst envelope = __webpack_require__(/*! ./envelope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\");\nconst time = __webpack_require__(/*! ./time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nfunction createClientReportEnvelope(discarded_events, dsn, timestamp) {\n  const clientReportItem = [{\n    type: 'client_report'\n  }, {\n    timestamp: timestamp || time.dateTimestampInSeconds(),\n    discarded_events\n  }];\n  return envelope.createEnvelope(dsn ? {\n    dsn\n  } : {}, [clientReportItem]);\n}\nexports.createClientReportEnvelope = createClientReportEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvY2xpZW50cmVwb3J0LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsUUFBUSxHQUFHQyxtQkFBTyxDQUFDLGlHQUFlLENBQUM7QUFDekMsTUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLHlGQUFXLENBQUM7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSwwQkFBMEJBLENBQ2pDQyxnQkFBZ0IsRUFDaEJDLEdBQUcsRUFDSEMsU0FBUyxFQUNUO0VBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsQ0FDdkI7SUFBRUMsSUFBSSxFQUFFO0VBQWdCLENBQUMsRUFDekI7SUFDRUYsU0FBUyxFQUFFQSxTQUFTLElBQUlKLElBQUksQ0FBQ08sc0JBQXNCLENBQUMsQ0FBQztJQUNyREw7RUFDRixDQUFDLENBQ0Y7RUFDRCxPQUFPSixRQUFRLENBQUNVLGNBQWMsQ0FBQ0wsR0FBRyxHQUFHO0lBQUVBO0VBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUNFLGdCQUFnQixDQUFDLENBQUM7QUFDeEU7QUFFQVQsa0NBQWtDLEdBQUdLLDBCQUEwQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9jbGllbnRyZXBvcnQuanM/M2RmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBlbnZlbG9wZSA9IHJlcXVpcmUoJy4vZW52ZWxvcGUuanMnKTtcbmNvbnN0IHRpbWUgPSByZXF1aXJlKCcuL3RpbWUuanMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGNsaWVudCByZXBvcnQgZW52ZWxvcGVcbiAqIEBwYXJhbSBkaXNjYXJkZWRfZXZlbnRzIEFuIGFycmF5IG9mIGRpc2NhcmQgZXZlbnRzXG4gKiBAcGFyYW0gZHNuIEEgRFNOIHRoYXQgY2FuIGJlIHNldCBvbiB0aGUgaGVhZGVyLiBPcHRpb25hbC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2xpZW50UmVwb3J0RW52ZWxvcGUoXG4gIGRpc2NhcmRlZF9ldmVudHMsXG4gIGRzbixcbiAgdGltZXN0YW1wLFxuKSB7XG4gIGNvbnN0IGNsaWVudFJlcG9ydEl0ZW0gPSBbXG4gICAgeyB0eXBlOiAnY2xpZW50X3JlcG9ydCcgfSxcbiAgICB7XG4gICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCB8fCB0aW1lLmRhdGVUaW1lc3RhbXBJblNlY29uZHMoKSxcbiAgICAgIGRpc2NhcmRlZF9ldmVudHMsXG4gICAgfSxcbiAgXTtcbiAgcmV0dXJuIGVudmVsb3BlLmNyZWF0ZUVudmVsb3BlKGRzbiA/IHsgZHNuIH0gOiB7fSwgW2NsaWVudFJlcG9ydEl0ZW1dKTtcbn1cblxuZXhwb3J0cy5jcmVhdGVDbGllbnRSZXBvcnRFbnZlbG9wZSA9IGNyZWF0ZUNsaWVudFJlcG9ydEVudmVsb3BlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50cmVwb3J0LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW52ZWxvcGUiLCJyZXF1aXJlIiwidGltZSIsImNyZWF0ZUNsaWVudFJlcG9ydEVudmVsb3BlIiwiZGlzY2FyZGVkX2V2ZW50cyIsImRzbiIsInRpbWVzdGFtcCIsImNsaWVudFJlcG9ydEl0ZW0iLCJ0eXBlIiwiZGF0ZVRpbWVzdGFtcEluU2Vjb25kcyIsImNyZWF0ZUVudmVsb3BlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cookie.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/cookie.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.\n * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js\n * It had the following license:\n *\n * (The MIT License)\n *\n * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>\n * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Parses a cookie string\n */\nfunction parseCookie(str) {\n  const obj = {};\n  let index = 0;\n  while (index < str.length) {\n    const eqIdx = str.indexOf('=', index);\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break;\n    }\n    let endIdx = str.indexOf(';', index);\n    if (endIdx === -1) {\n      endIdx = str.length;\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1;\n      continue;\n    }\n    const key = str.slice(index, eqIdx).trim();\n\n    // only assign once\n    if (undefined === obj[key]) {\n      let val = str.slice(eqIdx + 1, endIdx).trim();\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1);\n      }\n      try {\n        obj[key] = val.indexOf('%') !== -1 ? decodeURIComponent(val) : val;\n      } catch (e) {\n        obj[key] = val;\n      }\n    }\n    index = endIdx + 1;\n  }\n  return obj;\n}\nexports.parseCookie = parseCookie;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvY29va2llLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsV0FBV0EsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3hCLE1BQU1DLEdBQUcsR0FBRyxDQUFDLENBQUM7RUFDZCxJQUFJQyxLQUFLLEdBQUcsQ0FBQztFQUViLE9BQU9BLEtBQUssR0FBR0YsR0FBRyxDQUFDRyxNQUFNLEVBQUU7SUFDekIsTUFBTUMsS0FBSyxHQUFHSixHQUFHLENBQUNLLE9BQU8sQ0FBQyxHQUFHLEVBQUVILEtBQUssQ0FBQzs7SUFFckM7SUFDQSxJQUFJRSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7TUFDaEI7SUFDRjtJQUVBLElBQUlFLE1BQU0sR0FBR04sR0FBRyxDQUFDSyxPQUFPLENBQUMsR0FBRyxFQUFFSCxLQUFLLENBQUM7SUFFcEMsSUFBSUksTUFBTSxLQUFLLENBQUMsQ0FBQyxFQUFFO01BQ2pCQSxNQUFNLEdBQUdOLEdBQUcsQ0FBQ0csTUFBTTtJQUNyQixDQUFDLE1BQU0sSUFBSUcsTUFBTSxHQUFHRixLQUFLLEVBQUU7TUFDekI7TUFDQUYsS0FBSyxHQUFHRixHQUFHLENBQUNPLFdBQVcsQ0FBQyxHQUFHLEVBQUVILEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO01BQzNDO0lBQ0Y7SUFFQSxNQUFNSSxHQUFHLEdBQUdSLEdBQUcsQ0FBQ1MsS0FBSyxDQUFDUCxLQUFLLEVBQUVFLEtBQUssQ0FBQyxDQUFDTSxJQUFJLENBQUMsQ0FBQzs7SUFFMUM7SUFDQSxJQUFJQyxTQUFTLEtBQUtWLEdBQUcsQ0FBQ08sR0FBRyxDQUFDLEVBQUU7TUFDMUIsSUFBSUksR0FBRyxHQUFHWixHQUFHLENBQUNTLEtBQUssQ0FBQ0wsS0FBSyxHQUFHLENBQUMsRUFBRUUsTUFBTSxDQUFDLENBQUNJLElBQUksQ0FBQyxDQUFDOztNQUU3QztNQUNBLElBQUlFLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUM5QkQsR0FBRyxHQUFHQSxHQUFHLENBQUNILEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDeEI7TUFFQSxJQUFJO1FBQ0ZSLEdBQUcsQ0FBQ08sR0FBRyxDQUFDLEdBQUdJLEdBQUcsQ0FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHUyxrQkFBa0IsQ0FBQ0YsR0FBRyxDQUFDLEdBQUdBLEdBQUc7TUFDcEUsQ0FBQyxDQUFDLE9BQU9HLENBQUMsRUFBRTtRQUNWZCxHQUFHLENBQUNPLEdBQUcsQ0FBQyxHQUFHSSxHQUFHO01BQ2hCO0lBQ0Y7SUFFQVYsS0FBSyxHQUFHSSxNQUFNLEdBQUcsQ0FBQztFQUNwQjtFQUVBLE9BQU9MLEdBQUc7QUFDWjtBQUVBSixtQkFBbUIsR0FBR0UsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9jb29raWUuanM/NTZiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSBjb3BpZWQgZnJvbSB0aGUgJ2Nvb2tpZWAgbW9kdWxlIGF0IHYwLjUuMCBhbmQgd2FzIHNpbXBsaWZpZWQgZm9yIG91ciB1c2UgY2FzZS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qc2h0dHAvY29va2llL2Jsb2IvYTBjODQxNDdhYWI2MjY2YmRiMzk5NmNmNDA2MmU5MzkwN2MwYjBmYy9pbmRleC5qc1xuICogSXQgaGFkIHRoZSBmb2xsb3dpbmcgbGljZW5zZTpcbiAqXG4gKiAoVGhlIE1JVCBMaWNlbnNlKVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE0IFJvbWFuIFNodHlsbWFuIDxzaHR5bG1hbkBnbWFpbC5jb20+XG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb24gPGRvdWdAc29tZXRoaW5nZG91Zy5jb20+XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4gKiBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiAqICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiAqIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4gKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4gKiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuICogQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcbiAqIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4gKiBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG4vKipcbiAqIFBhcnNlcyBhIGNvb2tpZSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gcGFyc2VDb29raWUoc3RyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBsZXQgaW5kZXggPSAwO1xuXG4gIHdoaWxlIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBjb25zdCBlcUlkeCA9IHN0ci5pbmRleE9mKCc9JywgaW5kZXgpO1xuXG4gICAgLy8gbm8gbW9yZSBjb29raWUgcGFpcnNcbiAgICBpZiAoZXFJZHggPT09IC0xKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBsZXQgZW5kSWR4ID0gc3RyLmluZGV4T2YoJzsnLCBpbmRleCk7XG5cbiAgICBpZiAoZW5kSWR4ID09PSAtMSkge1xuICAgICAgZW5kSWR4ID0gc3RyLmxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKGVuZElkeCA8IGVxSWR4KSB7XG4gICAgICAvLyBiYWNrdHJhY2sgb24gcHJpb3Igc2VtaWNvbG9uXG4gICAgICBpbmRleCA9IHN0ci5sYXN0SW5kZXhPZignOycsIGVxSWR4IC0gMSkgKyAxO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3Qga2V5ID0gc3RyLnNsaWNlKGluZGV4LCBlcUlkeCkudHJpbSgpO1xuXG4gICAgLy8gb25seSBhc3NpZ24gb25jZVxuICAgIGlmICh1bmRlZmluZWQgPT09IG9ialtrZXldKSB7XG4gICAgICBsZXQgdmFsID0gc3RyLnNsaWNlKGVxSWR4ICsgMSwgZW5kSWR4KS50cmltKCk7XG5cbiAgICAgIC8vIHF1b3RlZCB2YWx1ZXNcbiAgICAgIGlmICh2YWwuY2hhckNvZGVBdCgwKSA9PT0gMHgyMikge1xuICAgICAgICB2YWwgPSB2YWwuc2xpY2UoMSwgLTEpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBvYmpba2V5XSA9IHZhbC5pbmRleE9mKCclJykgIT09IC0xID8gZGVjb2RlVVJJQ29tcG9uZW50KHZhbCkgOiB2YWw7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluZGV4ID0gZW5kSWR4ICsgMTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydHMucGFyc2VDb29raWUgPSBwYXJzZUNvb2tpZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvb2tpZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBhcnNlQ29va2llIiwic3RyIiwib2JqIiwiaW5kZXgiLCJsZW5ndGgiLCJlcUlkeCIsImluZGV4T2YiLCJlbmRJZHgiLCJsYXN0SW5kZXhPZiIsImtleSIsInNsaWNlIiwidHJpbSIsInVuZGVmaW5lZCIsInZhbCIsImNoYXJDb2RlQXQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cookie.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nexports.DEBUG_BUILD = DEBUG_BUILD;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFdBQVcsR0FBSSxPQUFPQyxnQkFBZ0IsS0FBSyxXQUFXLElBQUlBLGdCQUFpQjtBQUVqRkgsbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZGVidWctYnVpbGQuanM/MWRjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnRzLkRFQlVHX0JVSUxEID0gREVCVUdfQlVJTEQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nlet parsedStackResults;\nlet lastKeysCount;\nlet cachedFilenameDebugIds;\n\n/**\n * Returns a map of filenames to debug identifiers.\n */\nfunction getFilenameToDebugIdMap(stackParser) {\n  const debugIdMap = worldwide.GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return {};\n  }\n  const debugIdKeys = Object.keys(debugIdMap);\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n    return cachedFilenameDebugIds;\n  }\n  lastKeysCount = debugIdKeys.length;\n\n  // Build a map of filename -> debug_id.\n  cachedFilenameDebugIds = debugIdKeys.reduce((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n    const result = parsedStackResults[stackKey];\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame && stackFrame.filename;\n        const debugId = debugIdMap[stackKey];\n        if (filename && debugId) {\n          acc[filename] = debugId;\n          parsedStackResults[stackKey] = [filename, debugId];\n          break;\n        }\n      }\n    }\n    return acc;\n  }, {});\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nfunction getDebugImagesForResources(stackParser, resource_paths) {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n  const images = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path]\n      });\n    }\n  }\n  return images;\n}\nexports.getDebugImagesForResources = getDebugImagesForResources;\nexports.getFilenameToDebugIdMap = getFilenameToDebugIdMap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZGVidWctaWRzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsU0FBUyxHQUFHQyxtQkFBTyxDQUFDLG1HQUFnQixDQUFDO0FBRTNDLElBQUlDLGtCQUFrQjtBQUN0QixJQUFJQyxhQUFhO0FBQ2pCLElBQUlDLHNCQUFzQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsdUJBQXVCQSxDQUFDQyxXQUFXLEVBQUU7RUFDNUMsTUFBTUMsVUFBVSxHQUFHUCxTQUFTLENBQUNRLFVBQVUsQ0FBQ0MsZUFBZTtFQUN2RCxJQUFJLENBQUNGLFVBQVUsRUFBRTtJQUNmLE9BQU8sQ0FBQyxDQUFDO0VBQ1g7RUFFQSxNQUFNRyxXQUFXLEdBQUdkLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDSixVQUFVLENBQUM7O0VBRTNDO0VBQ0E7RUFDQSxJQUFJSCxzQkFBc0IsSUFBSU0sV0FBVyxDQUFDRSxNQUFNLEtBQUtULGFBQWEsRUFBRTtJQUNsRSxPQUFPQyxzQkFBc0I7RUFDL0I7RUFFQUQsYUFBYSxHQUFHTyxXQUFXLENBQUNFLE1BQU07O0VBRWxDO0VBQ0FSLHNCQUFzQixHQUFHTSxXQUFXLENBQUNHLE1BQU0sQ0FBQyxDQUFDQyxHQUFHLEVBQUVDLFFBQVEsS0FBSztJQUM3RCxJQUFJLENBQUNiLGtCQUFrQixFQUFFO01BQ3ZCQSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7SUFDekI7SUFFQSxNQUFNYyxNQUFNLEdBQUdkLGtCQUFrQixDQUFDYSxRQUFRLENBQUM7SUFFM0MsSUFBSUMsTUFBTSxFQUFFO01BQ1ZGLEdBQUcsQ0FBQ0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUdBLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDNUIsQ0FBQyxNQUFNO01BQ0wsTUFBTUMsV0FBVyxHQUFHWCxXQUFXLENBQUNTLFFBQVEsQ0FBQztNQUV6QyxLQUFLLElBQUlHLENBQUMsR0FBR0QsV0FBVyxDQUFDTCxNQUFNLEdBQUcsQ0FBQyxFQUFFTSxDQUFDLElBQUksQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRTtRQUNoRCxNQUFNQyxVQUFVLEdBQUdGLFdBQVcsQ0FBQ0MsQ0FBQyxDQUFDO1FBQ2pDLE1BQU1FLFFBQVEsR0FBR0QsVUFBVSxJQUFJQSxVQUFVLENBQUNDLFFBQVE7UUFDbEQsTUFBTUMsT0FBTyxHQUFHZCxVQUFVLENBQUNRLFFBQVEsQ0FBQztRQUVwQyxJQUFJSyxRQUFRLElBQUlDLE9BQU8sRUFBRTtVQUN2QlAsR0FBRyxDQUFDTSxRQUFRLENBQUMsR0FBR0MsT0FBTztVQUN2Qm5CLGtCQUFrQixDQUFDYSxRQUFRLENBQUMsR0FBRyxDQUFDSyxRQUFRLEVBQUVDLE9BQU8sQ0FBQztVQUNsRDtRQUNGO01BQ0Y7SUFDRjtJQUVBLE9BQU9QLEdBQUc7RUFDWixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFFTixPQUFPVixzQkFBc0I7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBU2tCLDBCQUEwQkEsQ0FDakNoQixXQUFXLEVBQ1hpQixjQUFjLEVBQ2Q7RUFDQSxNQUFNQyxrQkFBa0IsR0FBR25CLHVCQUF1QixDQUFDQyxXQUFXLENBQUM7RUFFL0QsSUFBSSxDQUFDa0Isa0JBQWtCLEVBQUU7SUFDdkIsT0FBTyxFQUFFO0VBQ1g7RUFFQSxNQUFNQyxNQUFNLEdBQUcsRUFBRTtFQUNqQixLQUFLLE1BQU1DLElBQUksSUFBSUgsY0FBYyxFQUFFO0lBQ2pDLElBQUlHLElBQUksSUFBSUYsa0JBQWtCLENBQUNFLElBQUksQ0FBQyxFQUFFO01BQ3BDRCxNQUFNLENBQUNFLElBQUksQ0FBQztRQUNWQyxJQUFJLEVBQUUsV0FBVztRQUNqQkMsU0FBUyxFQUFFSCxJQUFJO1FBQ2ZJLFFBQVEsRUFBRU4sa0JBQWtCLENBQUNFLElBQUk7TUFDbkMsQ0FBQyxDQUFDO0lBQ0o7RUFDRjtFQUVBLE9BQU9ELE1BQU07QUFDZjtBQUVBM0Isa0NBQWtDLEdBQUd3QiwwQkFBMEI7QUFDL0R4QiwrQkFBK0IsR0FBR08sdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2RlYnVnLWlkcy5qcz83YWIwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4vd29ybGR3aWRlLmpzJyk7XG5cbmxldCBwYXJzZWRTdGFja1Jlc3VsdHM7XG5sZXQgbGFzdEtleXNDb3VudDtcbmxldCBjYWNoZWRGaWxlbmFtZURlYnVnSWRzO1xuXG4vKipcbiAqIFJldHVybnMgYSBtYXAgb2YgZmlsZW5hbWVzIHRvIGRlYnVnIGlkZW50aWZpZXJzLlxuICovXG5mdW5jdGlvbiBnZXRGaWxlbmFtZVRvRGVidWdJZE1hcChzdGFja1BhcnNlcikge1xuICBjb25zdCBkZWJ1Z0lkTWFwID0gd29ybGR3aWRlLkdMT0JBTF9PQkouX3NlbnRyeURlYnVnSWRzO1xuICBpZiAoIWRlYnVnSWRNYXApIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCBkZWJ1Z0lkS2V5cyA9IE9iamVjdC5rZXlzKGRlYnVnSWRNYXApO1xuXG4gIC8vIElmIHRoZSBjb3VudCBvZiByZWdpc3RlcmVkIGdsb2JhbHMgaGFzbid0IGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgY2FsbCwgd2VcbiAgLy8gY2FuIGp1c3QgcmV0dXJuIHRoZSBjYWNoZWQgcmVzdWx0LlxuICBpZiAoY2FjaGVkRmlsZW5hbWVEZWJ1Z0lkcyAmJiBkZWJ1Z0lkS2V5cy5sZW5ndGggPT09IGxhc3RLZXlzQ291bnQpIHtcbiAgICByZXR1cm4gY2FjaGVkRmlsZW5hbWVEZWJ1Z0lkcztcbiAgfVxuXG4gIGxhc3RLZXlzQ291bnQgPSBkZWJ1Z0lkS2V5cy5sZW5ndGg7XG5cbiAgLy8gQnVpbGQgYSBtYXAgb2YgZmlsZW5hbWUgLT4gZGVidWdfaWQuXG4gIGNhY2hlZEZpbGVuYW1lRGVidWdJZHMgPSBkZWJ1Z0lkS2V5cy5yZWR1Y2UoKGFjYywgc3RhY2tLZXkpID0+IHtcbiAgICBpZiAoIXBhcnNlZFN0YWNrUmVzdWx0cykge1xuICAgICAgcGFyc2VkU3RhY2tSZXN1bHRzID0ge307XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gcGFyc2VkU3RhY2tSZXN1bHRzW3N0YWNrS2V5XTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGFjY1tyZXN1bHRbMF1dID0gcmVzdWx0WzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYXJzZWRTdGFjayA9IHN0YWNrUGFyc2VyKHN0YWNrS2V5KTtcblxuICAgICAgZm9yIChsZXQgaSA9IHBhcnNlZFN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IHN0YWNrRnJhbWUgPSBwYXJzZWRTdGFja1tpXTtcbiAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBzdGFja0ZyYW1lICYmIHN0YWNrRnJhbWUuZmlsZW5hbWU7XG4gICAgICAgIGNvbnN0IGRlYnVnSWQgPSBkZWJ1Z0lkTWFwW3N0YWNrS2V5XTtcblxuICAgICAgICBpZiAoZmlsZW5hbWUgJiYgZGVidWdJZCkge1xuICAgICAgICAgIGFjY1tmaWxlbmFtZV0gPSBkZWJ1Z0lkO1xuICAgICAgICAgIHBhcnNlZFN0YWNrUmVzdWx0c1tzdGFja0tleV0gPSBbZmlsZW5hbWUsIGRlYnVnSWRdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIHJldHVybiBjYWNoZWRGaWxlbmFtZURlYnVnSWRzO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBsaXN0IG9mIGRlYnVnIGltYWdlcyBmb3IgdGhlIGdpdmVuIHJlc291cmNlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RGVidWdJbWFnZXNGb3JSZXNvdXJjZXMoXG4gIHN0YWNrUGFyc2VyLFxuICByZXNvdXJjZV9wYXRocyxcbikge1xuICBjb25zdCBmaWxlbmFtZURlYnVnSWRNYXAgPSBnZXRGaWxlbmFtZVRvRGVidWdJZE1hcChzdGFja1BhcnNlcik7XG5cbiAgaWYgKCFmaWxlbmFtZURlYnVnSWRNYXApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCBpbWFnZXMgPSBbXTtcbiAgZm9yIChjb25zdCBwYXRoIG9mIHJlc291cmNlX3BhdGhzKSB7XG4gICAgaWYgKHBhdGggJiYgZmlsZW5hbWVEZWJ1Z0lkTWFwW3BhdGhdKSB7XG4gICAgICBpbWFnZXMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdzb3VyY2VtYXAnLFxuICAgICAgICBjb2RlX2ZpbGU6IHBhdGgsXG4gICAgICAgIGRlYnVnX2lkOiBmaWxlbmFtZURlYnVnSWRNYXBbcGF0aF0gLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGltYWdlcztcbn1cblxuZXhwb3J0cy5nZXREZWJ1Z0ltYWdlc0ZvclJlc291cmNlcyA9IGdldERlYnVnSW1hZ2VzRm9yUmVzb3VyY2VzO1xuZXhwb3J0cy5nZXRGaWxlbmFtZVRvRGVidWdJZE1hcCA9IGdldEZpbGVuYW1lVG9EZWJ1Z0lkTWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctaWRzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwid29ybGR3aWRlIiwicmVxdWlyZSIsInBhcnNlZFN0YWNrUmVzdWx0cyIsImxhc3RLZXlzQ291bnQiLCJjYWNoZWRGaWxlbmFtZURlYnVnSWRzIiwiZ2V0RmlsZW5hbWVUb0RlYnVnSWRNYXAiLCJzdGFja1BhcnNlciIsImRlYnVnSWRNYXAiLCJHTE9CQUxfT0JKIiwiX3NlbnRyeURlYnVnSWRzIiwiZGVidWdJZEtleXMiLCJrZXlzIiwibGVuZ3RoIiwicmVkdWNlIiwiYWNjIiwic3RhY2tLZXkiLCJyZXN1bHQiLCJwYXJzZWRTdGFjayIsImkiLCJzdGFja0ZyYW1lIiwiZmlsZW5hbWUiLCJkZWJ1Z0lkIiwiZ2V0RGVidWdJbWFnZXNGb3JSZXNvdXJjZXMiLCJyZXNvdXJjZV9wYXRocyIsImZpbGVuYW1lRGVidWdJZE1hcCIsImltYWdlcyIsInBhdGgiLCJwdXNoIiwidHlwZSIsImNvZGVfZmlsZSIsImRlYnVnX2lkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ./logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nfunction dsnToString(dsn, withPassword = false) {\n  const {\n    host,\n    path,\n    pass,\n    port,\n    projectId,\n    protocol,\n    publicKey\n  } = dsn;\n  return `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` + `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`;\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nfunction dsnFromString(str) {\n  const match = DSN_REGEX.exec(str);\n  if (!match) {\n    // This should be logged to the console\n    logger.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop();\n  }\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n  return dsnFromComponents({\n    host,\n    pass,\n    path,\n    projectId,\n    port,\n    protocol: protocol,\n    publicKey\n  });\n}\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId\n  };\n}\nfunction validateDsn(dsn) {\n  if (!debugBuild.DEBUG_BUILD) {\n    return true;\n  }\n  const {\n    port,\n    projectId,\n    protocol\n  } = dsn;\n  const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n  if (!projectId.match(/^\\d+$/)) {\n    logger.logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n  if (!isValidProtocol(protocol)) {\n    logger.logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nfunction makeDsn(from) {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\nexports.dsnFromString = dsnFromString;\nexports.dsnToString = dsnToString;\nexports.makeDsn = makeDsn;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZHNuLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHVHQUFrQixDQUFDO0FBQzlDLE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyw2RkFBYSxDQUFDOztBQUVyQztBQUNBLE1BQU1FLFNBQVMsR0FBRyxpRUFBaUU7QUFFbkYsU0FBU0MsZUFBZUEsQ0FBQ0MsUUFBUSxFQUFFO0VBQ2pDLE9BQU9BLFFBQVEsS0FBSyxNQUFNLElBQUlBLFFBQVEsS0FBSyxPQUFPO0FBQ3BEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFdBQVdBLENBQUNDLEdBQUcsRUFBRUMsWUFBWSxHQUFHLEtBQUssRUFBRTtFQUM5QyxNQUFNO0lBQUVDLElBQUk7SUFBRUMsSUFBSTtJQUFFQyxJQUFJO0lBQUVDLElBQUk7SUFBRUMsU0FBUztJQUFFUixRQUFRO0lBQUVTO0VBQVUsQ0FBQyxHQUFHUCxHQUFHO0VBQ3RFLE9BQ0csR0FBRUYsUUFBUyxNQUFLUyxTQUFVLEdBQUVOLFlBQVksSUFBSUcsSUFBSSxHQUFJLElBQUdBLElBQUssRUFBQyxHQUFHLEVBQUcsRUFBQyxHQUNwRSxJQUFHRixJQUFLLEdBQUVHLElBQUksR0FBSSxJQUFHQSxJQUFLLEVBQUMsR0FBRyxFQUFHLElBQUdGLElBQUksR0FBSSxHQUFFQSxJQUFLLEdBQUUsR0FBR0EsSUFBSyxHQUFFRyxTQUFVLEVBQUM7QUFFL0U7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsYUFBYUEsQ0FBQ0MsR0FBRyxFQUFFO0VBQzFCLE1BQU1DLEtBQUssR0FBR2QsU0FBUyxDQUFDZSxJQUFJLENBQUNGLEdBQUcsQ0FB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QUFNLENBQUNtQixLQUFLLENBQUUseUNBQXdDUixTQUFVLEVBQUMsQ0FBQztJQUN6RSxPQUFPLEtBQUs7RUFDZDtFQUVBLElBQUksQ0FBQ1QsZUFBZSxDQUFDQyxRQUFRLENBQUMsRUFBRTtJQUM5QkgsTUFBTSxDQUFDQSxNQUFNLENBQUNtQixLQUFLLENBQUUsd0NBQXVDaEIsUUFBUyxFQUFDLENBQUM7SUFDdkUsT0FBTyxLQUFLO0VBQ2Q7RUFFQSxJQUFJTyxJQUFJLElBQUkwQixLQUFLLENBQUNDLFFBQVEsQ0FBQzNCLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3JDVixNQUFNLENBQUNBLE1BQU0sQ0FBQ21CLEtBQUssQ0FBRSxvQ0FBbUNULElBQUssRUFBQyxDQUFDO0lBQy9ELE9BQU8sS0FBSztFQUNkO0VBRUEsT0FBTyxJQUFJO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTNEIsT0FBT0EsQ0FBQ0MsSUFBSSxFQUFFO0VBQ3JCLE1BQU1WLFVBQVUsR0FBRyxPQUFPVSxJQUFJLEtBQUssUUFBUSxHQUFHMUIsYUFBYSxDQUFDMEIsSUFBSSxDQUFDLEdBQUdYLGlCQUFpQixDQUFDVyxJQUFJLENBQUM7RUFDM0YsSUFBSSxDQUFDVixVQUFVLElBQUksQ0FBQ0MsV0FBVyxDQUFDRCxVQUFVLENBQUMsRUFBRTtJQUMzQyxPQUFPVCxTQUFTO0VBQ2xCO0VBQ0EsT0FBT1MsVUFBVTtBQUNuQjtBQUVBakMscUJBQXFCLEdBQUdpQixhQUFhO0FBQ3JDakIsbUJBQW1CLEdBQUdRLFdBQVc7QUFDakNSLGVBQWUsR0FBRzBDLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZHNuLmpzPzk2MTgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4vbG9nZ2VyLmpzJyk7XG5cbi8qKiBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byBwYXJzZSBhIERzbi4gKi9cbmNvbnN0IERTTl9SRUdFWCA9IC9eKD86KFxcdyspOilcXC9cXC8oPzooXFx3KykoPzo6KFxcdyspPyk/QCkoW1xcdy4tXSspKD86OihcXGQrKSk/XFwvKC4rKS87XG5cbmZ1bmN0aW9uIGlzVmFsaWRQcm90b2NvbChwcm90b2NvbCkge1xuICByZXR1cm4gcHJvdG9jb2wgPT09ICdodHRwJyB8fCBwcm90b2NvbCA9PT0gJ2h0dHBzJztcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEc24uXG4gKlxuICogQnkgZGVmYXVsdCwgdGhpcyB3aWxsIHJlbmRlciB0aGUgcHVibGljIHJlcHJlc2VudGF0aW9uIHdpdGhvdXQgdGhlIHBhc3N3b3JkXG4gKiBjb21wb25lbnQuIFRvIGdldCB0aGUgZGVwcmVjYXRlZCBwcml2YXRlIHJlcHJlc2VudGF0aW9uLCBzZXQgYHdpdGhQYXNzd29yZGBcbiAqIHRvIHRydWUuXG4gKlxuICogQHBhcmFtIHdpdGhQYXNzd29yZCBXaGVuIHNldCB0byB0cnVlLCB0aGUgcGFzc3dvcmQgd2lsbCBiZSBpbmNsdWRlZC5cbiAqL1xuZnVuY3Rpb24gZHNuVG9TdHJpbmcoZHNuLCB3aXRoUGFzc3dvcmQgPSBmYWxzZSkge1xuICBjb25zdCB7IGhvc3QsIHBhdGgsIHBhc3MsIHBvcnQsIHByb2plY3RJZCwgcHJvdG9jb2wsIHB1YmxpY0tleSB9ID0gZHNuO1xuICByZXR1cm4gKFxuICAgIGAke3Byb3RvY29sfTovLyR7cHVibGljS2V5fSR7d2l0aFBhc3N3b3JkICYmIHBhc3MgPyBgOiR7cGFzc31gIDogJyd9YCArXG4gICAgYEAke2hvc3R9JHtwb3J0ID8gYDoke3BvcnR9YCA6ICcnfS8ke3BhdGggPyBgJHtwYXRofS9gIDogcGF0aH0ke3Byb2plY3RJZH1gXG4gICk7XG59XG5cbi8qKlxuICogUGFyc2VzIGEgRHNuIGZyb20gYSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHN0ciBBIERzbiBhcyBzdHJpbmdcbiAqIEByZXR1cm5zIERzbiBhcyBEc25Db21wb25lbnRzIG9yIHVuZGVmaW5lZCBpZiBAcGFyYW0gc3RyIGlzIG5vdCBhIHZhbGlkIERTTiBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZHNuRnJvbVN0cmluZyhzdHIpIHtcbiAgY29uc3QgbWF0Y2ggPSBEU05fUkVHRVguZXhlYyhzdHIpO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBiZSBsb2dnZWQgdG8gdGhlIGNvbnNvbGVcbiAgICBsb2dnZXIuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEludmFsaWQgU2VudHJ5IERzbjogJHtzdHJ9YCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IFtwcm90b2NvbCwgcHVibGljS2V5LCBwYXNzID0gJycsIGhvc3QgPSAnJywgcG9ydCA9ICcnLCBsYXN0UGF0aCA9ICcnXSA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGF0aCA9ICcnO1xuICBsZXQgcHJvamVjdElkID0gbGFzdFBhdGg7XG5cbiAgY29uc3Qgc3BsaXQgPSBwcm9qZWN0SWQuc3BsaXQoJy8nKTtcbiAgaWYgKHNwbGl0Lmxlbmd0aCA+IDEpIHtcbiAgICBwYXRoID0gc3BsaXQuc2xpY2UoMCwgLTEpLmpvaW4oJy8nKTtcbiAgICBwcm9qZWN0SWQgPSBzcGxpdC5wb3AoKSA7XG4gIH1cblxuICBpZiAocHJvamVjdElkKSB7XG4gICAgY29uc3QgcHJvamVjdE1hdGNoID0gcHJvamVjdElkLm1hdGNoKC9eXFxkKy8pO1xuICAgIGlmIChwcm9qZWN0TWF0Y2gpIHtcbiAgICAgIHByb2plY3RJZCA9IHByb2plY3RNYXRjaFswXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZHNuRnJvbUNvbXBvbmVudHMoeyBob3N0LCBwYXNzLCBwYXRoLCBwcm9qZWN0SWQsIHBvcnQsIHByb3RvY29sOiBwcm90b2NvbCAsIHB1YmxpY0tleSB9KTtcbn1cblxuZnVuY3Rpb24gZHNuRnJvbUNvbXBvbmVudHMoY29tcG9uZW50cykge1xuICByZXR1cm4ge1xuICAgIHByb3RvY29sOiBjb21wb25lbnRzLnByb3RvY29sLFxuICAgIHB1YmxpY0tleTogY29tcG9uZW50cy5wdWJsaWNLZXkgfHwgJycsXG4gICAgcGFzczogY29tcG9uZW50cy5wYXNzIHx8ICcnLFxuICAgIGhvc3Q6IGNvbXBvbmVudHMuaG9zdCxcbiAgICBwb3J0OiBjb21wb25lbnRzLnBvcnQgfHwgJycsXG4gICAgcGF0aDogY29tcG9uZW50cy5wYXRoIHx8ICcnLFxuICAgIHByb2plY3RJZDogY29tcG9uZW50cy5wcm9qZWN0SWQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRHNuKGRzbikge1xuICBpZiAoIWRlYnVnQnVpbGQuREVCVUdfQlVJTEQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHsgcG9ydCwgcHJvamVjdElkLCBwcm90b2NvbCB9ID0gZHNuO1xuXG4gIGNvbnN0IHJlcXVpcmVkQ29tcG9uZW50cyA9IFsncHJvdG9jb2wnLCAncHVibGljS2V5JywgJ2hvc3QnLCAncHJvamVjdElkJ107XG4gIGNvbnN0IGhhc01pc3NpbmdSZXF1aXJlZENvbXBvbmVudCA9IHJlcXVpcmVkQ29tcG9uZW50cy5maW5kKGNvbXBvbmVudCA9PiB7XG4gICAgaWYgKCFkc25bY29tcG9uZW50XSkge1xuICAgICAgbG9nZ2VyLmxvZ2dlci5lcnJvcihgSW52YWxpZCBTZW50cnkgRHNuOiAke2NvbXBvbmVudH0gbWlzc2luZ2ApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG5cbiAgaWYgKGhhc01pc3NpbmdSZXF1aXJlZENvbXBvbmVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghcHJvamVjdElkLm1hdGNoKC9eXFxkKyQvKSkge1xuICAgIGxvZ2dlci5sb2dnZXIuZXJyb3IoYEludmFsaWQgU2VudHJ5IERzbjogSW52YWxpZCBwcm9qZWN0SWQgJHtwcm9qZWN0SWR9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCFpc1ZhbGlkUHJvdG9jb2wocHJvdG9jb2wpKSB7XG4gICAgbG9nZ2VyLmxvZ2dlci5lcnJvcihgSW52YWxpZCBTZW50cnkgRHNuOiBJbnZhbGlkIHByb3RvY29sICR7cHJvdG9jb2x9YCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHBvcnQgJiYgaXNOYU4ocGFyc2VJbnQocG9ydCwgMTApKSkge1xuICAgIGxvZ2dlci5sb2dnZXIuZXJyb3IoYEludmFsaWQgU2VudHJ5IERzbjogSW52YWxpZCBwb3J0ICR7cG9ydH1gKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdmFsaWQgU2VudHJ5IERzbiBvYmplY3QsIGlkZW50aWZ5aW5nIGEgU2VudHJ5IGluc3RhbmNlIGFuZCBwcm9qZWN0LlxuICogQHJldHVybnMgYSB2YWxpZCBEc25Db21wb25lbnRzIG9iamVjdCBvciBgdW5kZWZpbmVkYCBpZiBAcGFyYW0gZnJvbSBpcyBhbiBpbnZhbGlkIERTTiBzb3VyY2VcbiAqL1xuZnVuY3Rpb24gbWFrZURzbihmcm9tKSB7XG4gIGNvbnN0IGNvbXBvbmVudHMgPSB0eXBlb2YgZnJvbSA9PT0gJ3N0cmluZycgPyBkc25Gcm9tU3RyaW5nKGZyb20pIDogZHNuRnJvbUNvbXBvbmVudHMoZnJvbSk7XG4gIGlmICghY29tcG9uZW50cyB8fCAhdmFsaWRhdGVEc24oY29tcG9uZW50cykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBjb21wb25lbnRzO1xufVxuXG5leHBvcnRzLmRzbkZyb21TdHJpbmcgPSBkc25Gcm9tU3RyaW5nO1xuZXhwb3J0cy5kc25Ub1N0cmluZyA9IGRzblRvU3RyaW5nO1xuZXhwb3J0cy5tYWtlRHNuID0gbWFrZURzbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRzbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlYnVnQnVpbGQiLCJyZXF1aXJlIiwibG9nZ2VyIiwiRFNOX1JFR0VYIiwiaXNWYWxpZFByb3RvY29sIiwicHJvdG9jb2wiLCJkc25Ub1N0cmluZyIsImRzbiIsIndpdGhQYXNzd29yZCIsImhvc3QiLCJwYXRoIiwicGFzcyIsInBvcnQiLCJwcm9qZWN0SWQiLCJwdWJsaWNLZXkiLCJkc25Gcm9tU3RyaW5nIiwic3RyIiwibWF0Y2giLCJleGVjIiwiY29uc29sZVNhbmRib3giLCJjb25zb2xlIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJsYXN0UGF0aCIsInNsaWNlIiwic3BsaXQiLCJsZW5ndGgiLCJqb2luIiwicG9wIiwicHJvamVjdE1hdGNoIiwiZHNuRnJvbUNvbXBvbmVudHMiLCJjb21wb25lbnRzIiwidmFsaWRhdGVEc24iLCJERUJVR19CVUlMRCIsInJlcXVpcmVkQ29tcG9uZW50cyIsImhhc01pc3NpbmdSZXF1aXJlZENvbXBvbmVudCIsImZpbmQiLCJjb21wb25lbnQiLCJpc05hTiIsInBhcnNlSW50IiwibWFrZURzbiIsImZyb20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/env.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/env.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/*\n * This module exists for optimizations in the build process through rollup and terser.  We define some global\n * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these\n * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will\n * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to\n * `logger` and preventing node-related code from appearing in browser bundles.\n *\n * Attention:\n * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by\n * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)\n * having issues tree-shaking these constants across package boundaries.\n * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want\n * users to be able to shake away expressions that it guards.\n */\n\n/**\n * Figures out if we're building a browser bundle.\n *\n * @returns true if this is a browser bundle build.\n */\nfunction isBrowserBundle() {\n  return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;\n}\n\n/**\n * Get source of SDK.\n */\nfunction getSDKSource() {\n  // This comment is used to identify this line in the CDN bundle build step and replace this with \"return 'cdn';\"\n  /* __SENTRY_SDK_SOURCE__ */\n  return 'npm';\n}\nexports.getSDKSource = getSDKSource;\nexports.isBrowserBundle = isBrowserBundle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZW52LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGVBQWVBLENBQUEsRUFBRztFQUN6QixPQUFPLE9BQU9DLHlCQUF5QixLQUFLLFdBQVcsSUFBSSxDQUFDLENBQUNBLHlCQUF5QjtBQUN4Rjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxZQUFZQSxDQUFBLEVBQUc7RUFDdEI7RUFDQTtFQUE0QixPQUFPLEtBQUs7QUFDMUM7QUFFQUosb0JBQW9CLEdBQUdJLFlBQVk7QUFDbkNKLHVCQUF1QixHQUFHRSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2Vudi5qcz8xNDc2Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qXG4gKiBUaGlzIG1vZHVsZSBleGlzdHMgZm9yIG9wdGltaXphdGlvbnMgaW4gdGhlIGJ1aWxkIHByb2Nlc3MgdGhyb3VnaCByb2xsdXAgYW5kIHRlcnNlci4gIFdlIGRlZmluZSBzb21lIGdsb2JhbFxuICogY29uc3RhbnRzLCB3aGljaCBjYW4gYmUgb3ZlcnJpZGRlbiBkdXJpbmcgYnVpbGQuIEJ5IGd1YXJkaW5nIGNlcnRhaW4gcGllY2VzIG9mIGNvZGUgd2l0aCBmdW5jdGlvbnMgdGhhdCByZXR1cm4gdGhlc2VcbiAqIGNvbnN0YW50cywgd2UgY2FuIGNvbnRyb2wgd2hldGhlciBvciBub3QgdGhleSBhcHBlYXIgaW4gdGhlIGZpbmFsIGJ1bmRsZS4gKEFueSBjb2RlIGd1YXJkZWQgYnkgYSBmYWxzZSBjb25kaXRpb24gd2lsbFxuICogbmV2ZXIgcnVuLCBhbmQgd2lsbCBoZW5jZSBiZSBkcm9wcGVkIGR1cmluZyB0cmVlc2hha2luZy4pIFRoZSB0d28gcHJpbWFyeSB1c2VzIGZvciB0aGlzIGFyZSBzdHJpcHBpbmcgb3V0IGNhbGxzIHRvXG4gKiBgbG9nZ2VyYCBhbmQgcHJldmVudGluZyBub2RlLXJlbGF0ZWQgY29kZSBmcm9tIGFwcGVhcmluZyBpbiBicm93c2VyIGJ1bmRsZXMuXG4gKlxuICogQXR0ZW50aW9uOlxuICogVGhpcyBmaWxlIHNob3VsZCBub3QgYmUgdXNlZCB0byBkZWZpbmUgY29uc3RhbnRzL2ZsYWdzIHRoYXQgYXJlIGludGVuZGVkIHRvIGJlIHVzZWQgZm9yIHRyZWUtc2hha2luZyBjb25kdWN0ZWQgYnlcbiAqIHVzZXJzLiBUaGVzZSBmbGFncyBzaG91bGQgbGl2ZSBpbiB0aGVpciByZXNwZWN0aXZlIHBhY2thZ2VzLCBhcyB3ZSBpZGVudGlmaWVkIHVzZXIgdG9vbGluZyAoc3BlY2lmaWNhbGx5IHdlYnBhY2spXG4gKiBoYXZpbmcgaXNzdWVzIHRyZWUtc2hha2luZyB0aGVzZSBjb25zdGFudHMgYWNyb3NzIHBhY2thZ2UgYm91bmRhcmllcy5cbiAqIEFuIGV4YW1wbGUgZm9yIHRoaXMgaXMgdGhlIF9fU0VOVFJZX0RFQlVHX18gY29uc3RhbnQuIEl0IGlzIGRlY2xhcmVkIGluIGVhY2ggcGFja2FnZSBpbmRpdmlkdWFsbHkgYmVjYXVzZSB3ZSB3YW50XG4gKiB1c2VycyB0byBiZSBhYmxlIHRvIHNoYWtlIGF3YXkgZXhwcmVzc2lvbnMgdGhhdCBpdCBndWFyZHMuXG4gKi9cblxuLyoqXG4gKiBGaWd1cmVzIG91dCBpZiB3ZSdyZSBidWlsZGluZyBhIGJyb3dzZXIgYnVuZGxlLlxuICpcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhpcyBpcyBhIGJyb3dzZXIgYnVuZGxlIGJ1aWxkLlxuICovXG5mdW5jdGlvbiBpc0Jyb3dzZXJCdW5kbGUoKSB7XG4gIHJldHVybiB0eXBlb2YgX19TRU5UUllfQlJPV1NFUl9CVU5ETEVfXyAhPT0gJ3VuZGVmaW5lZCcgJiYgISFfX1NFTlRSWV9CUk9XU0VSX0JVTkRMRV9fO1xufVxuXG4vKipcbiAqIEdldCBzb3VyY2Ugb2YgU0RLLlxuICovXG5mdW5jdGlvbiBnZXRTREtTb3VyY2UoKSB7XG4gIC8vIFRoaXMgY29tbWVudCBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoaXMgbGluZSBpbiB0aGUgQ0ROIGJ1bmRsZSBidWlsZCBzdGVwIGFuZCByZXBsYWNlIHRoaXMgd2l0aCBcInJldHVybiAnY2RuJztcIlxuICAvKiBfX1NFTlRSWV9TREtfU09VUkNFX18gKi8gcmV0dXJuICducG0nO1xufVxuXG5leHBvcnRzLmdldFNES1NvdXJjZSA9IGdldFNES1NvdXJjZTtcbmV4cG9ydHMuaXNCcm93c2VyQnVuZGxlID0gaXNCcm93c2VyQnVuZGxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCcm93c2VyQnVuZGxlIiwiX19TRU5UUllfQlJPV1NFUl9CVU5ETEVfXyIsImdldFNES1NvdXJjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/env.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dsn = __webpack_require__(/*! ./dsn.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js\");\nconst normalize = __webpack_require__(/*! ./normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction createEnvelope(headers, items = []) {\n  return [headers, items];\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction addItemToEnvelope(envelope, newItem) {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]];\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nfunction forEachEnvelopeItem(envelope, callback) {\n  const envelopeItems = envelope[1];\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n    if (result) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nfunction envelopeContainsItemType(envelope, types) {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8 array.\n */\nfunction encodeUTF8(input) {\n  return worldwide.GLOBAL_OBJ.__SENTRY__ && worldwide.GLOBAL_OBJ.__SENTRY__.encodePolyfill ? worldwide.GLOBAL_OBJ.__SENTRY__.encodePolyfill(input) : new TextEncoder().encode(input);\n}\n\n/**\n * Decode a UTF8 array to string.\n */\nfunction decodeUTF8(input) {\n  return worldwide.GLOBAL_OBJ.__SENTRY__ && worldwide.GLOBAL_OBJ.__SENTRY__.decodePolyfill ? worldwide.GLOBAL_OBJ.__SENTRY__.decodePolyfill(input) : new TextDecoder().decode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nfunction serializeEnvelope(envelope) {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts = JSON.stringify(envHeaders);\n  function append(next) {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n    }\n  }\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize.normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\nfunction concatBuffers(buffers) {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nfunction parseEnvelope(env) {\n  let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n  function readBinary(length) {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n  function readJson() {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n    return JSON.parse(decodeUTF8(readBinary(i)));\n  }\n  const envelopeHeader = readJson();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items = [];\n  while (buffer.length) {\n    const itemHeader = readJson();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates envelope item for a single span\n */\nfunction createSpanEnvelopeItem(spanJson) {\n  const spanHeaders = {\n    type: 'span'\n  };\n  return [spanHeaders, spanJson];\n}\n\n/**\n * Creates attachment envelope items\n */\nfunction createAttachmentEnvelopeItem(attachment) {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n  return [object.dropUndefinedKeys({\n    type: 'attachment',\n    length: buffer.length,\n    filename: attachment.filename,\n    content_type: attachment.contentType,\n    attachment_type: attachment.attachmentType\n  }), buffer];\n}\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  profile_chunk: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  statsd: 'metric_bucket',\n  raw_security: 'security'\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nfunction envelopeItemTypeToDataCategory(type) {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nfunction getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const {\n    name,\n    version\n  } = metadataOrEvent.sdk;\n  return {\n    name,\n    version\n  };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nfunction createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn$1) {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && {\n      sdk: sdkInfo\n    }),\n    ...(!!tunnel && dsn$1 && {\n      dsn: dsn.dsnToString(dsn$1)\n    }),\n    ...(dynamicSamplingContext && {\n      trace: object.dropUndefinedKeys({\n        ...dynamicSamplingContext\n      })\n    })\n  };\n}\nexports.addItemToEnvelope = addItemToEnvelope;\nexports.createAttachmentEnvelopeItem = createAttachmentEnvelopeItem;\nexports.createEnvelope = createEnvelope;\nexports.createEventEnvelopeHeaders = createEventEnvelopeHeaders;\nexports.createSpanEnvelopeItem = createSpanEnvelopeItem;\nexports.envelopeContainsItemType = envelopeContainsItemType;\nexports.envelopeItemTypeToDataCategory = envelopeItemTypeToDataCategory;\nexports.forEachEnvelopeItem = forEachEnvelopeItem;\nexports.getSdkMetadataForEnvelopeHeader = getSdkMetadataForEnvelopeHeader;\nexports.parseEnvelope = parseEnvelope;\nexports.serializeEnvelope = serializeEnvelope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZW52ZWxvcGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxHQUFHLEdBQUdDLG1CQUFPLENBQUMsdUZBQVUsQ0FBQztBQUMvQixNQUFNQyxTQUFTLEdBQUdELG1CQUFPLENBQUMsbUdBQWdCLENBQUM7QUFDM0MsTUFBTUUsTUFBTSxHQUFHRixtQkFBTyxDQUFDLDZGQUFhLENBQUM7QUFDckMsTUFBTUcsU0FBUyxHQUFHSCxtQkFBTyxDQUFDLG1HQUFnQixDQUFDOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ksY0FBY0EsQ0FBQ0MsT0FBTyxFQUFFQyxLQUFLLEdBQUcsRUFBRSxFQUFFO0VBQzNDLE9BQU8sQ0FBQ0QsT0FBTyxFQUFFQyxLQUFLLENBQUM7QUFDekI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGlCQUFpQkEsQ0FBQ0MsUUFBUSxFQUFFQyxPQUFPLEVBQUU7RUFDNUMsTUFBTSxDQUFDSixPQUFPLEVBQUVDLEtBQUssQ0FBQyxHQUFHRSxRQUFRO0VBQ2pDLE9BQU8sQ0FBQ0gsT0FBTyxFQUFFLENBQUMsR0FBR0MsS0FBSyxFQUFFRyxPQUFPLENBQUMsQ0FBQztBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxtQkFBbUJBLENBQzFCRixRQUFRLEVBQ1JHLFFBQVEsRUFDUjtFQUNBLE1BQU1DLGFBQWEsR0FBR0osUUFBUSxDQUFDLENBQUMsQ0FBQztFQUVqQyxLQUFLLE1BQU1LLFlBQVksSUFBSUQsYUFBYSxFQUFFO0lBQ3hDLE1BQU1FLGdCQUFnQixHQUFHRCxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUNFLElBQUk7SUFDN0MsTUFBTUMsTUFBTSxHQUFHTCxRQUFRLENBQUNF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dEIsS0FBSyxDQUFDdUIscUJBQXFCLElBQUl2QixLQUFLLENBQUN1QixxQkFBcUIsQ0FBQ0Qsc0JBQXNCO0VBQ2hILE9BQU87SUFDTEUsUUFBUSxFQUFFeEIsS0FBSyxDQUFDd0IsUUFBUTtJQUN4QkMsT0FBTyxFQUFFLElBQUlDLElBQUksQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pDLElBQUlSLE9BQU8sSUFBSTtNQUFFSixHQUFHLEVBQUVJO0lBQVEsQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxDQUFDQyxNQUFNLElBQUlDLEtBQUssSUFBSTtNQUFFNUcsR0FBRyxFQUFFQSxHQUFHLENBQUNtSCxXQUFXLENBQUNQLEtBQUs7SUFBRSxDQUFDLENBQUM7SUFDekQsSUFBSUMsc0JBQXNCLElBQUk7TUFDNUJPLEtBQUssRUFBRWpILE1BQU0sQ0FBQzBFLGlCQUFpQixDQUFDO1FBQUUsR0FBR2dDO01BQXVCLENBQUM7SUFDL0QsQ0FBQztFQUNILENBQUM7QUFDSDtBQUVBL0cseUJBQXlCLEdBQUdVLGlCQUFpQjtBQUM3Q1Ysb0NBQW9DLEdBQUc0RSw0QkFBNEI7QUFDbkU1RSxzQkFBc0IsR0FBR08sY0FBYztBQUN2Q1Asa0NBQWtDLEdBQUcyRywwQkFBMEI7QUFDL0QzRyw4QkFBOEIsR0FBR3lFLHNCQUFzQjtBQUN2RHpFLGdDQUFnQyxHQUFHb0Isd0JBQXdCO0FBQzNEcEIsc0NBQXNDLEdBQUdxRyw4QkFBOEI7QUFDdkVyRywyQkFBMkIsR0FBR2EsbUJBQW1CO0FBQ2pEYix1Q0FBdUMsR0FBR3NHLCtCQUErQjtBQUN6RXRHLHFCQUFxQixHQUFHNEQsYUFBYTtBQUNyQzVELHlCQUF5QixHQUFHbUMsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2VudmVsb3BlLmpzP2I4OWMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZHNuID0gcmVxdWlyZSgnLi9kc24uanMnKTtcbmNvbnN0IG5vcm1hbGl6ZSA9IHJlcXVpcmUoJy4vbm9ybWFsaXplLmpzJyk7XG5jb25zdCBvYmplY3QgPSByZXF1aXJlKCcuL29iamVjdC5qcycpO1xuY29uc3Qgd29ybGR3aWRlID0gcmVxdWlyZSgnLi93b3JsZHdpZGUuanMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVudmVsb3BlLlxuICogTWFrZSBzdXJlIHRvIGFsd2F5cyBleHBsaWNpdGx5IHByb3ZpZGUgdGhlIGdlbmVyaWMgdG8gdGhpcyBmdW5jdGlvblxuICogc28gdGhhdCB0aGUgZW52ZWxvcGUgdHlwZXMgcmVzb2x2ZSBjb3JyZWN0bHkuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVudmVsb3BlKGhlYWRlcnMsIGl0ZW1zID0gW10pIHtcbiAgcmV0dXJuIFtoZWFkZXJzLCBpdGVtc10gO1xufVxuXG4vKipcbiAqIEFkZCBhbiBpdGVtIHRvIGFuIGVudmVsb3BlLlxuICogTWFrZSBzdXJlIHRvIGFsd2F5cyBleHBsaWNpdGx5IHByb3ZpZGUgdGhlIGdlbmVyaWMgdG8gdGhpcyBmdW5jdGlvblxuICogc28gdGhhdCB0aGUgZW52ZWxvcGUgdHlwZXMgcmVzb2x2ZSBjb3JyZWN0bHkuXG4gKi9cbmZ1bmN0aW9uIGFkZEl0ZW1Ub0VudmVsb3BlKGVudmVsb3BlLCBuZXdJdGVtKSB7XG4gIGNvbnN0IFtoZWFkZXJzLCBpdGVtc10gPSBlbnZlbG9wZTtcbiAgcmV0dXJuIFtoZWFkZXJzLCBbLi4uaXRlbXMsIG5ld0l0ZW1dXSA7XG59XG5cbi8qKlxuICogQ29udmVuaWVuY2UgZnVuY3Rpb24gdG8gbG9vcCB0aHJvdWdoIHRoZSBpdGVtcyBhbmQgaXRlbSB0eXBlcyBvZiBhbiBlbnZlbG9wZS5cbiAqIChUaGlzIGZ1bmN0aW9uIHdhcyBtb3N0bHkgY3JlYXRlZCBiZWNhdXNlIHdvcmtpbmcgd2l0aCBlbnZlbG9wZSB0eXBlcyBpcyBwYWluZnVsIGF0IHRoZSBtb21lbnQpXG4gKlxuICogSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgdHJ1ZSwgdGhlIHJlc3Qgb2YgdGhlIGl0ZW1zIHdpbGwgYmUgc2tpcHBlZC5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaEVudmVsb3BlSXRlbShcbiAgZW52ZWxvcGUsXG4gIGNhbGxiYWNrLFxuKSB7XG4gIGNvbnN0IGVudmVsb3BlSXRlbXMgPSBlbnZlbG9wZVsxXTtcblxuICBmb3IgKGNvbnN0IGVudmVsb3BlSXRlbSBvZiBlbnZlbG9wZUl0ZW1zKSB7XG4gICAgY29uc3QgZW52ZWxvcGVJdGVtVHlwZSA9IGVudmVsb3BlSXRlbVswXS50eXBlO1xuICAgIGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrKGVudmVsb3BlSXRlbSwgZW52ZWxvcGVJdGVtVHlwZSk7XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBlbnZlbG9wZSBjb250YWlucyBhbnkgb2YgdGhlIGdpdmVuIGVudmVsb3BlIGl0ZW0gdHlwZXNcbiAqL1xuZnVuY3Rpb24gZW52ZWxvcGVDb250YWluc0l0ZW1UeXBlKGVudmVsb3BlLCB0eXBlcykge1xuICByZXR1cm4gZm9yRWFjaEVudmVsb3BlSXRlbShlbnZlbG9wZSwgKF8sIHR5cGUpID0+IHR5cGVzLmluY2x1ZGVzKHR5cGUpKTtcbn1cblxuLyoqXG4gKiBFbmNvZGUgYSBzdHJpbmcgdG8gVVRGOCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVRGOChpbnB1dCkge1xuICByZXR1cm4gd29ybGR3aWRlLkdMT0JBTF9PQkouX19TRU5UUllfXyAmJiB3b3JsZHdpZGUuR0xPQkFMX09CSi5fX1NFTlRSWV9fLmVuY29kZVBvbHlmaWxsXG4gICAgPyB3b3JsZHdpZGUuR0xPQkFMX09CSi5fX1NFTlRSWV9fLmVuY29kZVBvbHlmaWxsKGlucHV0KVxuICAgIDogbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGlucHV0KTtcbn1cblxuLyoqXG4gKiBEZWNvZGUgYSBVVEY4IGFycmF5IHRvIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlVVRGOChpbnB1dCkge1xuICByZXR1cm4gd29ybGR3aWRlLkdMT0JBTF9PQkouX19TRU5UUllfXyAmJiB3b3JsZHdpZGUuR0xPQkFMX09CSi5fX1NFTlRSWV9fLmRlY29kZVBvbHlmaWxsXG4gICAgPyB3b3JsZHdpZGUuR0xPQkFMX09CSi5fX1NFTlRSWV9fLmRlY29kZVBvbHlmaWxsKGlucHV0KVxuICAgIDogbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGlucHV0KTtcbn1cblxuLyoqXG4gKiBTZXJpYWxpemVzIGFuIGVudmVsb3BlLlxuICovXG5mdW5jdGlvbiBzZXJpYWxpemVFbnZlbG9wZShlbnZlbG9wZSkge1xuICBjb25zdCBbZW52SGVhZGVycywgaXRlbXNdID0gZW52ZWxvcGU7XG5cbiAgLy8gSW5pdGlhbGx5IHdlIGNvbnN0cnVjdCBvdXIgZW52ZWxvcGUgYXMgYSBzdHJpbmcgYW5kIG9ubHkgY29udmVydCB0byBiaW5hcnkgY2h1bmtzIGlmIHdlIGVuY291bnRlciBiaW5hcnkgZGF0YVxuICBsZXQgcGFydHMgPSBKU09OLnN0cmluZ2lmeShlbnZIZWFkZXJzKTtcblxuICBmdW5jdGlvbiBhcHBlbmQobmV4dCkge1xuICAgIGlmICh0eXBlb2YgcGFydHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwYXJ0cyA9IHR5cGVvZiBuZXh0ID09PSAnc3RyaW5nJyA/IHBhcnRzICsgbmV4dCA6IFtlbmNvZGVVVEY4KHBhcnRzKSwgbmV4dF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRzLnB1c2godHlwZW9mIG5leHQgPT09ICdzdHJpbmcnID8gZW5jb2RlVVRGOChuZXh0KSA6IG5leHQpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgIGNvbnN0IFtpdGVtSGVhZGVycywgcGF5bG9hZF0gPSBpdGVtO1xuXG4gICAgYXBwZW5kKGBcXG4ke0pTT04uc3RyaW5naWZ5KGl0ZW1IZWFkZXJzKX1cXG5gKTtcblxuICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycgfHwgcGF5bG9hZCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgIGFwcGVuZChwYXlsb2FkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHN0cmluZ2lmaWVkUGF5bG9hZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0cmluZ2lmaWVkUGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJbiBjYXNlLCBkZXNwaXRlIGFsbCBvdXIgZWZmb3J0cyB0byBrZWVwIGBwYXlsb2FkYCBjaXJjdWxhci1kZXBlbmRlbmN5LWZyZWUsIGBKU09OLnN0cmluZ2lmeSgpYCBzdGlsbFxuICAgICAgICAvLyBmYWlscywgd2UgdHJ5IGFnYWluIGFmdGVyIG5vcm1hbGl6aW5nIGl0IGFnYWluIHdpdGggaW5maW5pdGUgbm9ybWFsaXphdGlvbiBkZXB0aC4gVGhpcyBvZiBjb3Vyc2UgaGFzIGFcbiAgICAgICAgLy8gcGVyZm9ybWFuY2UgaW1wYWN0IGJ1dCBpbiB0aGlzIGNhc2UgYSBwZXJmb3JtYW5jZSBoaXQgaXMgYmV0dGVyIHRoYW4gdGhyb3dpbmcuXG4gICAgICAgIHN0cmluZ2lmaWVkUGF5bG9hZCA9IEpTT04uc3RyaW5naWZ5KG5vcm1hbGl6ZS5ub3JtYWxpemUocGF5bG9hZCkpO1xuICAgICAgfVxuICAgICAgYXBwZW5kKHN0cmluZ2lmaWVkUGF5bG9hZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHR5cGVvZiBwYXJ0cyA9PT0gJ3N0cmluZycgPyBwYXJ0cyA6IGNvbmNhdEJ1ZmZlcnMocGFydHMpO1xufVxuXG5mdW5jdGlvbiBjb25jYXRCdWZmZXJzKGJ1ZmZlcnMpIHtcbiAgY29uc3QgdG90YWxMZW5ndGggPSBidWZmZXJzLnJlZHVjZSgoYWNjLCBidWYpID0+IGFjYyArIGJ1Zi5sZW5ndGgsIDApO1xuXG4gIGNvbnN0IG1lcmdlZCA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGZvciAoY29uc3QgYnVmZmVyIG9mIGJ1ZmZlcnMpIHtcbiAgICBtZXJnZWQuc2V0KGJ1ZmZlciwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYnVmZmVyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBtZXJnZWQ7XG59XG5cbi8qKlxuICogUGFyc2VzIGFuIGVudmVsb3BlXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRW52ZWxvcGUoZW52KSB7XG4gIGxldCBidWZmZXIgPSB0eXBlb2YgZW52ID09PSAnc3RyaW5nJyA/IGVuY29kZVVURjgoZW52KSA6IGVudjtcblxuICBmdW5jdGlvbiByZWFkQmluYXJ5KGxlbmd0aCkge1xuICAgIGNvbnN0IGJpbiA9IGJ1ZmZlci5zdWJhcnJheSgwLCBsZW5ndGgpO1xuICAgIC8vIFJlcGxhY2UgdGhlIGJ1ZmZlciB3aXRoIHRoZSByZW1haW5pbmcgZGF0YSBleGNsdWRpbmcgdHJhaWxpbmcgbmV3bGluZVxuICAgIGJ1ZmZlciA9IGJ1ZmZlci5zdWJhcnJheShsZW5ndGggKyAxKTtcbiAgICByZXR1cm4gYmluO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEpzb24oKSB7XG4gICAgbGV0IGkgPSBidWZmZXIuaW5kZXhPZigweGEpO1xuICAgIC8vIElmIHdlIGNvdWxkbid0IGZpbmQgYSBuZXdsaW5lLCB3ZSBtdXN0IGhhdmUgZm91bmQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICBpID0gYnVmZmVyLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVVVEY4KHJlYWRCaW5hcnkoaSkpKSA7XG4gIH1cblxuICBjb25zdCBlbnZlbG9wZUhlYWRlciA9IHJlYWRKc29uKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGNvbnN0IGl0ZW1zID0gW107XG5cbiAgd2hpbGUgKGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBjb25zdCBpdGVtSGVhZGVyID0gcmVhZEpzb24oKTtcbiAgICBjb25zdCBiaW5hcnlMZW5ndGggPSB0eXBlb2YgaXRlbUhlYWRlci5sZW5ndGggPT09ICdudW1iZXInID8gaXRlbUhlYWRlci5sZW5ndGggOiB1bmRlZmluZWQ7XG5cbiAgICBpdGVtcy5wdXNoKFtpdGVtSGVhZGVyLCBiaW5hcnlMZW5ndGggPyByZWFkQmluYXJ5KGJpbmFyeUxlbmd0aCkgOiByZWFkSnNvbigpXSk7XG4gIH1cblxuICByZXR1cm4gW2VudmVsb3BlSGVhZGVyLCBpdGVtc107XG59XG5cbi8qKlxuICogQ3JlYXRlcyBlbnZlbG9wZSBpdGVtIGZvciBhIHNpbmdsZSBzcGFuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNwYW5FbnZlbG9wZUl0ZW0oc3Bhbkpzb24pIHtcbiAgY29uc3Qgc3BhbkhlYWRlcnMgPSB7XG4gICAgdHlwZTogJ3NwYW4nLFxuICB9O1xuXG4gIHJldHVybiBbc3BhbkhlYWRlcnMsIHNwYW5Kc29uXTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGF0dGFjaG1lbnQgZW52ZWxvcGUgaXRlbXNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXR0YWNobWVudEVudmVsb3BlSXRlbShhdHRhY2htZW50KSB7XG4gIGNvbnN0IGJ1ZmZlciA9IHR5cGVvZiBhdHRhY2htZW50LmRhdGEgPT09ICdzdHJpbmcnID8gZW5jb2RlVVRGOChhdHRhY2htZW50LmRhdGEpIDogYXR0YWNobWVudC5kYXRhO1xuXG4gIHJldHVybiBbXG4gICAgb2JqZWN0LmRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICAgIHR5cGU6ICdhdHRhY2htZW50JyxcbiAgICAgIGxlbmd0aDogYnVmZmVyLmxlbmd0aCxcbiAgICAgIGZpbGVuYW1lOiBhdHRhY2htZW50LmZpbGVuYW1lLFxuICAgICAgY29udGVudF90eXBlOiBhdHRhY2htZW50LmNvbnRlbnRUeXBlLFxuICAgICAgYXR0YWNobWVudF90eXBlOiBhdHRhY2htZW50LmF0dGFjaG1lbnRUeXBlLFxuICAgIH0pLFxuICAgIGJ1ZmZlcixcbiAgXTtcbn1cblxuY29uc3QgSVRFTV9UWVBFX1RPX0RBVEFfQ0FURUdPUllfTUFQID0ge1xuICBzZXNzaW9uOiAnc2Vzc2lvbicsXG4gIHNlc3Npb25zOiAnc2Vzc2lvbicsXG4gIGF0dGFjaG1lbnQ6ICdhdHRhY2htZW50JyxcbiAgdHJhbnNhY3Rpb246ICd0cmFuc2FjdGlvbicsXG4gIGV2ZW50OiAnZXJyb3InLFxuICBjbGllbnRfcmVwb3J0OiAnaW50ZXJuYWwnLFxuICB1c2VyX3JlcG9ydDogJ2RlZmF1bHQnLFxuICBwcm9maWxlOiAncHJvZmlsZScsXG4gIHByb2ZpbGVfY2h1bms6ICdwcm9maWxlJyxcbiAgcmVwbGF5X2V2ZW50OiAncmVwbGF5JyxcbiAgcmVwbGF5X3JlY29yZGluZzogJ3JlcGxheScsXG4gIGNoZWNrX2luOiAnbW9uaXRvcicsXG4gIGZlZWRiYWNrOiAnZmVlZGJhY2snLFxuICBzcGFuOiAnc3BhbicsXG4gIHN0YXRzZDogJ21ldHJpY19idWNrZXQnLFxuICByYXdfc2VjdXJpdHk6ICdzZWN1cml0eScsXG59O1xuXG4vKipcbiAqIE1hcHMgdGhlIHR5cGUgb2YgYW4gZW52ZWxvcGUgaXRlbSB0byBhIGRhdGEgY2F0ZWdvcnkuXG4gKi9cbmZ1bmN0aW9uIGVudmVsb3BlSXRlbVR5cGVUb0RhdGFDYXRlZ29yeSh0eXBlKSB7XG4gIHJldHVybiBJVEVNX1RZUEVfVE9fREFUQV9DQVRFR09SWV9NQVBbdHlwZV07XG59XG5cbi8qKiBFeHRyYWN0cyB0aGUgbWluaW1hbCBTREsgaW5mbyBmcm9tIHRoZSBtZXRhZGF0YSBvciBhbiBldmVudHMgKi9cbmZ1bmN0aW9uIGdldFNka01ldGFkYXRhRm9yRW52ZWxvcGVIZWFkZXIobWV0YWRhdGFPckV2ZW50KSB7XG4gIGlmICghbWV0YWRhdGFPckV2ZW50IHx8ICFtZXRhZGF0YU9yRXZlbnQuc2RrKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHsgbmFtZSwgdmVyc2lvbiB9ID0gbWV0YWRhdGFPckV2ZW50LnNkaztcbiAgcmV0dXJuIHsgbmFtZSwgdmVyc2lvbiB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgZXZlbnQgZW52ZWxvcGUgaGVhZGVycywgYmFzZWQgb24gZXZlbnQsIHNkayBpbmZvIGFuZCB0dW5uZWxcbiAqIE5vdGU6IFRoaXMgZnVuY3Rpb24gd2FzIGV4dHJhY3RlZCBmcm9tIHRoZSBjb3JlIHBhY2thZ2UgdG8gbWFrZSBpdCBhdmFpbGFibGUgaW4gUmVwbGF5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW52ZWxvcGVIZWFkZXJzKFxuICBldmVudCxcbiAgc2RrSW5mbyxcbiAgdHVubmVsLFxuICBkc24kMSxcbikge1xuICBjb25zdCBkeW5hbWljU2FtcGxpbmdDb250ZXh0ID0gZXZlbnQuc2RrUHJvY2Vzc2luZ01ldGFkYXRhICYmIGV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YS5keW5hbWljU2FtcGxpbmdDb250ZXh0O1xuICByZXR1cm4ge1xuICAgIGV2ZW50X2lkOiBldmVudC5ldmVudF9pZCAsXG4gICAgc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIC4uLihzZGtJbmZvICYmIHsgc2RrOiBzZGtJbmZvIH0pLFxuICAgIC4uLighIXR1bm5lbCAmJiBkc24kMSAmJiB7IGRzbjogZHNuLmRzblRvU3RyaW5nKGRzbiQxKSB9KSxcbiAgICAuLi4oZHluYW1pY1NhbXBsaW5nQ29udGV4dCAmJiB7XG4gICAgICB0cmFjZTogb2JqZWN0LmRyb3BVbmRlZmluZWRLZXlzKHsgLi4uZHluYW1pY1NhbXBsaW5nQ29udGV4dCB9KSxcbiAgICB9KSxcbiAgfTtcbn1cblxuZXhwb3J0cy5hZGRJdGVtVG9FbnZlbG9wZSA9IGFkZEl0ZW1Ub0VudmVsb3BlO1xuZXhwb3J0cy5jcmVhdGVBdHRhY2htZW50RW52ZWxvcGVJdGVtID0gY3JlYXRlQXR0YWNobWVudEVudmVsb3BlSXRlbTtcbmV4cG9ydHMuY3JlYXRlRW52ZWxvcGUgPSBjcmVhdGVFbnZlbG9wZTtcbmV4cG9ydHMuY3JlYXRlRXZlbnRFbnZlbG9wZUhlYWRlcnMgPSBjcmVhdGVFdmVudEVudmVsb3BlSGVhZGVycztcbmV4cG9ydHMuY3JlYXRlU3BhbkVudmVsb3BlSXRlbSA9IGNyZWF0ZVNwYW5FbnZlbG9wZUl0ZW07XG5leHBvcnRzLmVudmVsb3BlQ29udGFpbnNJdGVtVHlwZSA9IGVudmVsb3BlQ29udGFpbnNJdGVtVHlwZTtcbmV4cG9ydHMuZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5ID0gZW52ZWxvcGVJdGVtVHlwZVRvRGF0YUNhdGVnb3J5O1xuZXhwb3J0cy5mb3JFYWNoRW52ZWxvcGVJdGVtID0gZm9yRWFjaEVudmVsb3BlSXRlbTtcbmV4cG9ydHMuZ2V0U2RrTWV0YWRhdGFGb3JFbnZlbG9wZUhlYWRlciA9IGdldFNka01ldGFkYXRhRm9yRW52ZWxvcGVIZWFkZXI7XG5leHBvcnRzLnBhcnNlRW52ZWxvcGUgPSBwYXJzZUVudmVsb3BlO1xuZXhwb3J0cy5zZXJpYWxpemVFbnZlbG9wZSA9IHNlcmlhbGl6ZUVudmVsb3BlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52ZWxvcGUuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkc24iLCJyZXF1aXJlIiwibm9ybWFsaXplIiwib2JqZWN0Iiwid29ybGR3aWRlIiwiY3JlYXRlRW52ZWxvcGUiLCJoZWFkZXJzIiwiaXRlbXMiLCJhZGRJdGVtVG9FbnZlbG9wZSIsImVudmVsb3BlIiwibmV3SXRlbSIsImZvckVhY2hFbnZlbG9wZUl0ZW0iLCJjYWxsYmFjayIsImVudmVsb3BlSXRlbXMiLCJlbnZlbG9wZUl0ZW0iLCJlbnZlbG9wZUl0ZW1UeXBlIiwidHlwZSIsInJlc3VsdCIsImVudmVsb3BlQ29udGFpbnNJdGVtVHlwZSIsInR5cGVzIiwiXyIsImluY2x1ZGVzIiwiZW5jb2RlVVRGOCIsImlucHV0IiwiR0xPQkFMX09CSiIsIl9fU0VOVFJZX18iLCJlbmNvZGVQb2x5ZmlsbCIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiZGVjb2RlVVRGOCIsImRlY29kZVBvbHlmaWxsIiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJzZXJpYWxpemVFbnZlbG9wZSIsImVudkhlYWRlcnMiLCJwYXJ0cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJhcHBlbmQiLCJuZXh0IiwicHVzaCIsIml0ZW0iLCJpdGVtSGVhZGVycyIsInBheWxvYWQiLCJVaW50OEFycmF5Iiwic3RyaW5naWZpZWRQYXlsb2FkIiwiZSIsImNvbmNhdEJ1ZmZlcnMiLCJidWZmZXJzIiwidG90YWxMZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJidWYiLCJsZW5ndGgiLCJtZXJnZWQiLCJvZmZzZXQiLCJidWZmZXIiLCJzZXQiLCJwYXJzZUVudmVsb3BlIiwiZW52IiwicmVhZEJpbmFyeSIsImJpbiIsInN1YmFycmF5IiwicmVhZEpzb24iLCJpIiwiaW5kZXhPZiIsInBhcnNlIiwiZW52ZWxvcGVIZWFkZXIiLCJpdGVtSGVhZGVyIiwiYmluYXJ5TGVuZ3RoIiwidW5kZWZpbmVkIiwiY3JlYXRlU3BhbkVudmVsb3BlSXRlbSIsInNwYW5Kc29uIiwic3BhbkhlYWRlcnMiLCJjcmVhdGVBdHRhY2htZW50RW52ZWxvcGVJdGVtIiwiYXR0YWNobWVudCIsImRhdGEiLCJkcm9wVW5kZWZpbmVkS2V5cyIsImZpbGVuYW1lIiwiY29udGVudF90eXBlIiwiY29udGVudFR5cGUiLCJhdHRhY2htZW50X3R5cGUiLCJhdHRhY2htZW50VHlwZSIsIklURU1fVFlQRV9UT19EQVRBX0NBVEVHT1JZX01BUCIsInNlc3Npb24iLCJzZXNzaW9ucyIsInRyYW5zYWN0aW9uIiwiZXZlbnQiLCJjbGllbnRfcmVwb3J0IiwidXNlcl9yZXBvcnQiLCJwcm9maWxlIiwicHJvZmlsZV9jaHVuayIsInJlcGxheV9ldmVudCIsInJlcGxheV9yZWNvcmRpbmciLCJjaGVja19pbiIsImZlZWRiYWNrIiwic3BhbiIsInN0YXRzZCIsInJhd19zZWN1cml0eSIsImVudmVsb3BlSXRlbVR5cGVUb0RhdGFDYXRlZ29yeSIsImdldFNka01ldGFkYXRhRm9yRW52ZWxvcGVIZWFkZXIiLCJtZXRhZGF0YU9yRXZlbnQiLCJzZGsiLCJuYW1lIiwidmVyc2lvbiIsImNyZWF0ZUV2ZW50RW52ZWxvcGVIZWFkZXJzIiwic2RrSW5mbyIsInR1bm5lbCIsImRzbiQxIiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dCIsInNka1Byb2Nlc3NpbmdNZXRhZGF0YSIsImV2ZW50X2lkIiwic2VudF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImRzblRvU3RyaW5nIiwidHJhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/error.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** An error emitted by Sentry SDKs and related utilities. */\nclass SentryError extends Error {\n  /** Display name of this error instance. */\n\n  constructor(message, logLevel = 'warn') {\n    super(message);\n    this.message = message;\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\nexports.SentryError = SentryError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQSxNQUFNQyxXQUFXLFNBQVNDLEtBQUssQ0FBQztFQUM5Qjs7RUFFQ0MsV0FBV0EsQ0FDVEMsT0FBTyxFQUNSQyxRQUFRLEdBQUcsTUFBTSxFQUNqQjtJQUNBLEtBQUssQ0FBQ0QsT0FBTyxDQUFDO0lBQUMsSUFBSSxDQUFDQSxPQUFPLEdBQUdBLE9BQU87SUFDckMsSUFBSSxDQUFDRSxJQUFJLEdBQUdDLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDQyxTQUFTLENBQUNOLFdBQVcsQ0FBQ0csSUFBSTtJQUNqRDtJQUNBO0lBQ0E7SUFDQVQsTUFBTSxDQUFDYSxjQUFjLENBQUMsSUFBSSxFQUFFSCxHQUFHLENBQUNDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDO0lBQ2pELElBQUksQ0FBQ0osUUFBUSxHQUFHQSxRQUFRO0VBQzFCO0FBQ0Y7QUFFQU4sbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvZXJyb3IuanM/NTc5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKiogQW4gZXJyb3IgZW1pdHRlZCBieSBTZW50cnkgU0RLcyBhbmQgcmVsYXRlZCB1dGlsaXRpZXMuICovXG5jbGFzcyBTZW50cnlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgLyoqIERpc3BsYXkgbmFtZSBvZiB0aGlzIGVycm9yIGluc3RhbmNlLiAqL1xuXG4gICBjb25zdHJ1Y3RvcihcbiAgICAgbWVzc2FnZSxcbiAgICBsb2dMZXZlbCA9ICd3YXJuJyxcbiAgKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7dGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLm5hbWUgPSBuZXcudGFyZ2V0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIC8vIFRoaXMgc2V0cyB0aGUgcHJvdG90eXBlIHRvIGJlIGBFcnJvcmAsIG5vdCBgU2VudHJ5RXJyb3JgLiBJdCdzIHVuY2xlYXIgd2h5IHdlIGRvIHRoaXMsIGJ1dCBjb21tZW50aW5nIHRoaXMgbGluZVxuICAgIC8vIG91dCBjYXVzZXMgdmFyaW91cyAoc2VlbWluZ2x5IHRvdGFsbHkgdW5yZWxhdGVkKSBwbGF5d3JpZ2h0IHRlc3RzIGNvbnNpc3RlbnRseSB0aW1lIG91dC4gRllJLCB0aGlzIG1ha2VzXG4gICAgLy8gaW5zdGFuY2VzIG9mIGBTZW50cnlFcnJvcmAgZmFpbCBgb2JqIGluc3RhbmNlb2YgU2VudHJ5RXJyb3JgIGNoZWNrcy5cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpO1xuICAgIHRoaXMubG9nTGV2ZWwgPSBsb2dMZXZlbDtcbiAgfVxufVxuXG5leHBvcnRzLlNlbnRyeUVycm9yID0gU2VudHJ5RXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNlbnRyeUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJsb2dMZXZlbCIsIm5hbWUiLCJuZXciLCJ0YXJnZXQiLCJwcm90b3R5cGUiLCJzZXRQcm90b3R5cGVPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst misc = __webpack_require__(/*! ./misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst normalize = __webpack_require__(/*! ./normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\n\n/**\n * Extracts stack frames from the error.stack string\n */\nfunction parseStackFrames(stackParser, error) {\n  return stackParser(error.stack || '', 1);\n}\n\n/**\n * Extracts stack frames from the error and builds a Sentry Exception\n */\nfunction exceptionFromError(stackParser, error) {\n  const exception = {\n    type: error.name || error.constructor.name,\n    value: error.message\n  };\n  const frames = parseStackFrames(stackParser, error);\n  if (frames.length) {\n    exception.stacktrace = {\n      frames\n    };\n  }\n  return exception;\n}\n\n/** If a plain object has a property that is an `Error`, return this error. */\nfunction getErrorPropertyFromObject(obj) {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      const value = obj[prop];\n      if (value instanceof Error) {\n        return value;\n      }\n    }\n  }\n  return undefined;\n}\nfunction getMessageForObject(exception) {\n  if ('name' in exception && typeof exception.name === 'string') {\n    let message = `'${exception.name}' captured as exception`;\n    if ('message' in exception && typeof exception.message === 'string') {\n      message += ` with message '${exception.message}'`;\n    }\n    return message;\n  } else if ('message' in exception && typeof exception.message === 'string') {\n    return exception.message;\n  }\n  const keys = object.extractExceptionKeysForMessage(exception);\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (is.isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as exception with message \\`${exception.message}\\``;\n  }\n  const className = getObjectClassName(exception);\n  return `${className && className !== 'Object' ? `'${className}'` : 'Object'} captured as exception with keys: ${keys}`;\n}\nfunction getObjectClassName(obj) {\n  try {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\nfunction getException(client, mechanism, exception, hint) {\n  if (is.isError(exception)) {\n    return [exception, undefined];\n  }\n\n  // Mutate this!\n  mechanism.synthetic = true;\n  if (is.isPlainObject(exception)) {\n    const normalizeDepth = client && client.getOptions().normalizeDepth;\n    const extras = {\n      ['__serialized__']: normalize.normalizeToSize(exception, normalizeDepth)\n    };\n    const errorFromProp = getErrorPropertyFromObject(exception);\n    if (errorFromProp) {\n      return [errorFromProp, extras];\n    }\n    const message = getMessageForObject(exception);\n    const ex = hint && hint.syntheticException || new Error(message);\n    ex.message = message;\n    return [ex, extras];\n  }\n\n  // This handles when someone does: `throw \"something awesome\";`\n  // We use synthesized Error here so we can extract a (rough) stack trace.\n  const ex = hint && hint.syntheticException || new Error(exception);\n  ex.message = `${exception}`;\n  return [ex, undefined];\n}\n\n/**\n * Builds and Event from a Exception\n * @hidden\n */\nfunction eventFromUnknownInput(client, stackParser, exception, hint) {\n  const providedMechanism = hint && hint.data && hint.data.mechanism;\n  const mechanism = providedMechanism || {\n    handled: true,\n    type: 'generic'\n  };\n  const [ex, extras] = getException(client, mechanism, exception, hint);\n  const event = {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)]\n    }\n  };\n  if (extras) {\n    event.extra = extras;\n  }\n  misc.addExceptionTypeValue(event, undefined, undefined);\n  misc.addExceptionMechanism(event, mechanism);\n  return {\n    ...event,\n    event_id: hint && hint.event_id\n  };\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(stackParser, message, level = 'info', hint, attachStacktrace) {\n  const event = {\n    event_id: hint && hint.event_id,\n    level\n  };\n  if (attachStacktrace && hint && hint.syntheticException) {\n    const frames = parseStackFrames(stackParser, hint.syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{\n          value: message,\n          stacktrace: {\n            frames\n          }\n        }]\n      };\n      misc.addExceptionMechanism(event, {\n        synthetic: true\n      });\n    }\n  }\n  if (is.isParameterizedString(message)) {\n    const {\n      __sentry_template_string__,\n      __sentry_template_values__\n    } = message;\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__\n    };\n    return event;\n  }\n  event.message = message;\n  return event;\n}\nexports.eventFromMessage = eventFromMessage;\nexports.eventFromUnknownInput = eventFromUnknownInput;\nexports.exceptionFromError = exceptionFromError;\nexports.parseStackFrames = parseStackFrames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst logger = __webpack_require__(/*! ../logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst object = __webpack_require__(/*! ../object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst worldwide = __webpack_require__(/*! ../worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\");\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addConsoleInstrumentationHandler(handler) {\n  const type = 'console';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, instrumentConsole);\n}\nfunction instrumentConsole() {\n  if (!('console' in worldwide.GLOBAL_OBJ)) {\n    return;\n  }\n  logger.CONSOLE_LEVELS.forEach(function (level) {\n    if (!(level in worldwide.GLOBAL_OBJ.console)) {\n      return;\n    }\n    object.fill(worldwide.GLOBAL_OBJ.console, level, function (originalConsoleMethod) {\n      logger.originalConsoleMethods[level] = originalConsoleMethod;\n      return function (...args) {\n        const handlerData = {\n          args,\n          level\n        };\n        handlers.triggerHandlers('console', handlerData);\n        const log = logger.originalConsoleMethods[level];\n        log && log.apply(worldwide.GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\nexports.addConsoleInstrumentationHandler = addConsoleInstrumentationHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9jb25zb2xlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLDhGQUFjLENBQUM7QUFDdEMsTUFBTUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLDhGQUFjLENBQUM7QUFDdEMsTUFBTUUsU0FBUyxHQUFHRixtQkFBTyxDQUFDLG9HQUFpQixDQUFDO0FBQzVDLE1BQU1HLFFBQVEsR0FBR0gsbUJBQU8sQ0FBQyw0R0FBZSxDQUFDOztBQUV6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTSSxnQ0FBZ0NBLENBQUNDLE9BQU8sRUFBRTtFQUNqRCxNQUFNQyxJQUFJLEdBQUcsU0FBUztFQUN0QkgsUUFBUSxDQUFDSSxVQUFVLENBQUNELElBQUksRUFBRUQsT0FBTyxDQUFDO0VBQ2xDRixRQUFRLENBQUNLLGVBQWUsQ0FBQ0YsSUFBSSxFQUFFRyxpQkFBaUIsQ0FBQztBQUNuRDtBQUVBLFNBQVNBLGlCQUFpQkEsQ0FBQSxFQUFHO0VBQzNCLElBQUksRUFBRSxTQUFTLElBQUlQLFNBQVMsQ0FBQ1EsVUFBVSxDQUFDLEVBQUU7SUFDeEM7RUFDRjtFQUVBWCxNQUFNLENBQUNZLGNBQWMsQ0FBQ0MsT0FBTyxDQUFDLFVBQVVDLEtBQUssRUFBRTtJQUM3QyxJQUFJLEVBQUVBLEtBQUssSUFBSVgsU0FBUyxDQUFDUSxVQUFVLENBQUNJLE9BQU8sQ0FBQyxFQUFFO01BQzVDO0lBQ0Y7SUFFQWIsTUFBTSxDQUFDYyxJQUFJLENBQUNiLFNBQVMsQ0FBQ1EsVUFBVSxDQUFDSSxPQUFPLEVBQUVELEtBQUssRUFBRSxVQUFVRyxxQkFBcUIsRUFBRTtNQUNoRmpCLE1BQU0sQ0FBQ2tCLHNCQUFzQixDQUFDSixLQUFLLENBQUMsR0FBR0cscUJBQXFCO01BRTVELE9BQU8sVUFBVSxHQUFHRSxJQUFJLEVBQUU7UUFDeEIsTUFBTUMsV0FBVyxHQUFHO1VBQUVELElBQUk7VUFBRUw7UUFBTSxDQUFDO1FBQ25DVixRQUFRLENBQUNpQixlQUFlLENBQUMsU0FBUyxFQUFFRCxXQUFXLENBQUM7UUFFaEQsTUFBTUUsR0FBRyxHQUFHdEIsTUFBTSxDQUFDa0Isc0JBQXNCLENBQUNKLEtBQUssQ0FBQztRQUNoRFEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLEtBQUssQ0FBQ3BCLFNBQVMsQ0FBQ1EsVUFBVSxDQUFDSSxPQUFPLEVBQUVJLElBQUksQ0FBQztNQUN0RCxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0o7QUFFQXJCLHdDQUF3QyxHQUFHTyxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9jb25zb2xlLmpzPzdmODMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgbG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyLmpzJyk7XG5jb25zdCBvYmplY3QgPSByZXF1aXJlKCcuLi9vYmplY3QuanMnKTtcbmNvbnN0IHdvcmxkd2lkZSA9IHJlcXVpcmUoJy4uL3dvcmxkd2lkZS5qcycpO1xuY29uc3QgaGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzLmpzJyk7XG5cbi8qKlxuICogQWRkIGFuIGluc3RydW1lbnRhdGlvbiBoYW5kbGVyIGZvciB3aGVuIGEgY29uc29sZS54eHggbWV0aG9kIGlzIGNhbGxlZC5cbiAqXG4gKiBVc2UgYXQgeW91ciBvd24gcmlzaywgdGhpcyBtaWdodCBicmVhayB3aXRob3V0IGNoYW5nZWxvZyBub3RpY2UsIG9ubHkgdXNlZCBpbnRlcm5hbGx5LlxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBhZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlcihoYW5kbGVyKSB7XG4gIGNvbnN0IHR5cGUgPSAnY29uc29sZSc7XG4gIGhhbmRsZXJzLmFkZEhhbmRsZXIodHlwZSwgaGFuZGxlcik7XG4gIGhhbmRsZXJzLm1heWJlSW5zdHJ1bWVudCh0eXBlLCBpbnN0cnVtZW50Q29uc29sZSk7XG59XG5cbmZ1bmN0aW9uIGluc3RydW1lbnRDb25zb2xlKCkge1xuICBpZiAoISgnY29uc29sZScgaW4gd29ybGR3aWRlLkdMT0JBTF9PQkopKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbG9nZ2VyLkNPTlNPTEVfTEVWRUxTLmZvckVhY2goZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgaWYgKCEobGV2ZWwgaW4gd29ybGR3aWRlLkdMT0JBTF9PQkouY29uc29sZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvYmplY3QuZmlsbCh3b3JsZHdpZGUuR0xPQkFMX09CSi5jb25zb2xlLCBsZXZlbCwgZnVuY3Rpb24gKG9yaWdpbmFsQ29uc29sZU1ldGhvZCkge1xuICAgICAgbG9nZ2VyLm9yaWdpbmFsQ29uc29sZU1ldGhvZHNbbGV2ZWxdID0gb3JpZ2luYWxDb25zb2xlTWV0aG9kO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlckRhdGEgPSB7IGFyZ3MsIGxldmVsIH07XG4gICAgICAgIGhhbmRsZXJzLnRyaWdnZXJIYW5kbGVycygnY29uc29sZScsIGhhbmRsZXJEYXRhKTtcblxuICAgICAgICBjb25zdCBsb2cgPSBsb2dnZXIub3JpZ2luYWxDb25zb2xlTWV0aG9kc1tsZXZlbF07XG4gICAgICAgIGxvZyAmJiBsb2cuYXBwbHkod29ybGR3aWRlLkdMT0JBTF9PQkouY29uc29sZSwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0cy5hZGRDb25zb2xlSW5zdHJ1bWVudGF0aW9uSGFuZGxlciA9IGFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc29sZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvZ2dlciIsInJlcXVpcmUiLCJvYmplY3QiLCJ3b3JsZHdpZGUiLCJoYW5kbGVycyIsImFkZENvbnNvbGVJbnN0cnVtZW50YXRpb25IYW5kbGVyIiwiaGFuZGxlciIsInR5cGUiLCJhZGRIYW5kbGVyIiwibWF5YmVJbnN0cnVtZW50IiwiaW5zdHJ1bWVudENvbnNvbGUiLCJHTE9CQUxfT0JKIiwiQ09OU09MRV9MRVZFTFMiLCJmb3JFYWNoIiwibGV2ZWwiLCJjb25zb2xlIiwiZmlsbCIsIm9yaWdpbmFsQ29uc29sZU1ldGhvZCIsIm9yaWdpbmFsQ29uc29sZU1ldGhvZHMiLCJhcmdzIiwiaGFuZGxlckRhdGEiLCJ0cmlnZ2VySGFuZGxlcnMiLCJsb2ciLCJhcHBseSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/fetch.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/fetch.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ../is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst object = __webpack_require__(/*! ../object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst supports = __webpack_require__(/*! ../supports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/supports.js\");\nconst time = __webpack_require__(/*! ../time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst worldwide = __webpack_require__(/*! ../worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\");\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addFetchInstrumentationHandler(handler, skipNativeFetchCheck) {\n  const type = 'fetch';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, () => instrumentFetch(undefined, skipNativeFetchCheck));\n}\n\n/**\n * Add an instrumentation handler for long-lived fetch requests, like consuming server-sent events (SSE) via fetch.\n * The handler will resolve the request body and emit the actual `endTimestamp`, so that the\n * span can be updated accordingly.\n *\n * Only used internally\n * @hidden\n */\nfunction addFetchEndInstrumentationHandler(handler) {\n  const type = 'fetch-body-resolved';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, () => instrumentFetch(streamHandler));\n}\nfunction instrumentFetch(onFetchResolved, skipNativeFetchCheck = false) {\n  if (skipNativeFetchCheck && !supports.supportsNativeFetch()) {\n    return;\n  }\n  object.fill(worldwide.GLOBAL_OBJ, 'fetch', function (originalFetch) {\n    return function (...args) {\n      // We capture the error right here and not in the Promise error callback because Safari (and probably other\n      // browsers too) will wipe the stack trace up to this point, only leaving us with this file which is useless.\n\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n      //       it means the error, that was caused by your fetch call did not\n      //       have a stack trace, so the SDK backfilled the stack trace so\n      //       you can see which fetch call failed.\n      const virtualError = new Error();\n      const {\n        method,\n        url\n      } = parseFetchArgs(args);\n      const handlerData = {\n        args,\n        fetchData: {\n          method,\n          url\n        },\n        startTimestamp: time.timestampInSeconds() * 1000,\n        // // Adding the error to be able to fingerprint the failed fetch event in HttpClient instrumentation\n        virtualError\n      };\n\n      // if there is no callback, fetch is instrumented directly\n      if (!onFetchResolved) {\n        handlers.triggerHandlers('fetch', {\n          ...handlerData\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(worldwide.GLOBAL_OBJ, args).then(async response => {\n        if (onFetchResolved) {\n          onFetchResolved(response);\n        } else {\n          handlers.triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: time.timestampInSeconds() * 1000,\n            response\n          });\n        }\n        return response;\n      }, error => {\n        handlers.triggerHandlers('fetch', {\n          ...handlerData,\n          endTimestamp: time.timestampInSeconds() * 1000,\n          error\n        });\n        if (is.isError(error) && error.stack === undefined) {\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the error, that was caused by your fetch call did not\n          //       have a stack trace, so the SDK backfilled the stack trace so\n          //       you can see which fetch call failed.\n          error.stack = virtualError.stack;\n          object.addNonEnumerableProperty(error, 'framesToPop', 1);\n        }\n\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n        //       it means the sentry.javascript SDK caught an error invoking your application code.\n        //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n        throw error;\n      });\n    };\n  });\n}\nasync function resolveResponse(res, onFinishedResolving) {\n  if (res && res.body) {\n    const body = res.body;\n    const responseReader = body.getReader();\n\n    // Define a maximum duration after which we just cancel\n    const maxFetchDurationTimeout = setTimeout(() => {\n      body.cancel().then(null, () => {\n        // noop\n      });\n    }, 90 * 1000 // 90s\n    );\n\n    let readingActive = true;\n    while (readingActive) {\n      let chunkTimeout;\n      try {\n        // abort reading if read op takes more than 5s\n        chunkTimeout = setTimeout(() => {\n          body.cancel().then(null, () => {\n            // noop on error\n          });\n        }, 5000);\n\n        // This .read() call will reject/throw when we abort due to timeouts through `body.cancel()`\n        const {\n          done\n        } = await responseReader.read();\n        clearTimeout(chunkTimeout);\n        if (done) {\n          onFinishedResolving();\n          readingActive = false;\n        }\n      } catch (error) {\n        readingActive = false;\n      } finally {\n        clearTimeout(chunkTimeout);\n      }\n    }\n    clearTimeout(maxFetchDurationTimeout);\n    responseReader.releaseLock();\n    body.cancel().then(null, () => {\n      // noop on error\n    });\n  }\n}\nfunction streamHandler(response) {\n  // clone response for awaiting stream\n  let clonedResponseForResolving;\n  try {\n    clonedResponseForResolving = response.clone();\n  } catch (e) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  resolveResponse(clonedResponseForResolving, () => {\n    handlers.triggerHandlers('fetch-body-resolved', {\n      endTimestamp: time.timestampInSeconds() * 1000,\n      response\n    });\n  });\n}\nfunction hasProp(obj, prop) {\n  return !!obj && typeof obj === 'object' && !!obj[prop];\n}\nfunction getUrlFromResource(resource) {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n  if (!resource) {\n    return '';\n  }\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n  if (resource.toString) {\n    return resource.toString();\n  }\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nfunction parseFetchArgs(fetchArgs) {\n  if (fetchArgs.length === 0) {\n    return {\n      method: 'GET',\n      url: ''\n    };\n  }\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs;\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET'\n    };\n  }\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET'\n  };\n}\nexports.addFetchEndInstrumentationHandler = addFetchEndInstrumentationHandler;\nexports.addFetchInstrumentationHandler = addFetchInstrumentationHandler;\nexports.parseFetchArgs = parseFetchArgs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/fetch.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ../worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\");\nlet _oldOnErrorHandler = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalErrorInstrumentationHandler(handler) {\n  const type = 'error';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, instrumentError);\n}\nfunction instrumentError() {\n  _oldOnErrorHandler = worldwide.GLOBAL_OBJ.onerror;\n\n  // Note: The reason we are doing window.onerror instead of window.addEventListener('error')\n  // is that we are using this handler in the Loader Script, to handle buffered errors consistently\n  worldwide.GLOBAL_OBJ.onerror = function (msg, url, line, column, error) {\n    const handlerData = {\n      column,\n      error,\n      line,\n      msg,\n      url\n    };\n    handlers.triggerHandlers('error', handlerData);\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n    return false;\n  };\n  worldwide.GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\nexports.addGlobalErrorInstrumentationHandler = addGlobalErrorInstrumentationHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9nbG9iYWxFcnJvci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxvR0FBaUIsQ0FBQztBQUM1QyxNQUFNQyxRQUFRLEdBQUdELG1CQUFPLENBQUMsNEdBQWUsQ0FBQztBQUV6QyxJQUFJRSxrQkFBa0IsR0FBRyxJQUFJOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxvQ0FBb0NBLENBQUNDLE9BQU8sRUFBRTtFQUNyRCxNQUFNQyxJQUFJLEdBQUcsT0FBTztFQUNwQkosUUFBUSxDQUFDSyxVQUFVLENBQUNELElBQUksRUFBRUQsT0FBTyxDQUFDO0VBQ2xDSCxRQUFRLENBQUNNLGVBQWUsQ0FBQ0YsSUFBSSxFQUFFRyxlQUFlLENBQUM7QUFDakQ7QUFFQSxTQUFTQSxlQUFlQSxDQUFBLEVBQUc7RUFDekJOLGtCQUFrQixHQUFHSCxTQUFTLENBQUNVLFVBQVUsQ0FBQ0MsT0FBTzs7RUFFakQ7RUFDQTtFQUNBWCxTQUFTLENBQUNVLFVBQVUsQ0FBQ0MsT0FBTyxHQUFHLFVBQzdCQyxHQUFHLEVBQ0hDLEdBQUcsRUFDSEMsSUFBSSxFQUNKQyxNQUFNLEVBQ05DLEtBQUssRUFDTDtJQUNBLE1BQU1DLFdBQVcsR0FBRztNQUNsQkYsTUFBTTtNQUNOQyxLQUFLO01BQ0xGLElBQUk7TUFDSkYsR0FBRztNQUNIQztJQUNGLENBQUM7SUFDRFgsUUFBUSxDQUFDZ0IsZUFBZSxDQUFDLE9BQU8sRUFBRUQsV0FBVyxDQUFDO0lBRTlDLElBQUlkLGtCQUFrQixFQUFFO01BQ3RCO01BQ0EsT0FBT0Esa0JBQWtCLENBQUNnQixLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUM7SUFDbEQ7SUFFQSxPQUFPLEtBQUs7RUFDZCxDQUFDO0VBRURwQixTQUFTLENBQUNVLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDVSx1QkFBdUIsR0FBRyxJQUFJO0FBQzdEO0FBRUF2Qiw0Q0FBNEMsR0FBR00sb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2luc3RydW1lbnQvZ2xvYmFsRXJyb3IuanM/MzY2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuLi93b3JsZHdpZGUuanMnKTtcbmNvbnN0IGhhbmRsZXJzID0gcmVxdWlyZSgnLi9oYW5kbGVycy5qcycpO1xuXG5sZXQgX29sZE9uRXJyb3JIYW5kbGVyID0gbnVsbDtcblxuLyoqXG4gKiBBZGQgYW4gaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIgZm9yIHdoZW4gYW4gZXJyb3IgaXMgY2FwdHVyZWQgYnkgdGhlIGdsb2JhbCBlcnJvciBoYW5kbGVyLlxuICpcbiAqIFVzZSBhdCB5b3VyIG93biByaXNrLCB0aGlzIG1pZ2h0IGJyZWFrIHdpdGhvdXQgY2hhbmdlbG9nIG5vdGljZSwgb25seSB1c2VkIGludGVybmFsbHkuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEdsb2JhbEVycm9ySW5zdHJ1bWVudGF0aW9uSGFuZGxlcihoYW5kbGVyKSB7XG4gIGNvbnN0IHR5cGUgPSAnZXJyb3InO1xuICBoYW5kbGVycy5hZGRIYW5kbGVyKHR5cGUsIGhhbmRsZXIpO1xuICBoYW5kbGVycy5tYXliZUluc3RydW1lbnQodHlwZSwgaW5zdHJ1bWVudEVycm9yKTtcbn1cblxuZnVuY3Rpb24gaW5zdHJ1bWVudEVycm9yKCkge1xuICBfb2xkT25FcnJvckhhbmRsZXIgPSB3b3JsZHdpZGUuR0xPQkFMX09CSi5vbmVycm9yO1xuXG4gIC8vIE5vdGU6IFRoZSByZWFzb24gd2UgYXJlIGRvaW5nIHdpbmRvdy5vbmVycm9yIGluc3RlYWQgb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJylcbiAgLy8gaXMgdGhhdCB3ZSBhcmUgdXNpbmcgdGhpcyBoYW5kbGVyIGluIHRoZSBMb2FkZXIgU2NyaXB0LCB0byBoYW5kbGUgYnVmZmVyZWQgZXJyb3JzIGNvbnNpc3RlbnRseVxuICB3b3JsZHdpZGUuR0xPQkFMX09CSi5vbmVycm9yID0gZnVuY3Rpb24gKFxuICAgIG1zZyxcbiAgICB1cmwsXG4gICAgbGluZSxcbiAgICBjb2x1bW4sXG4gICAgZXJyb3IsXG4gICkge1xuICAgIGNvbnN0IGhhbmRsZXJEYXRhID0ge1xuICAgICAgY29sdW1uLFxuICAgICAgZXJyb3IsXG4gICAgICBsaW5lLFxuICAgICAgbXNnLFxuICAgICAgdXJsLFxuICAgIH07XG4gICAgaGFuZGxlcnMudHJpZ2dlckhhbmRsZXJzKCdlcnJvcicsIGhhbmRsZXJEYXRhKTtcblxuICAgIGlmIChfb2xkT25FcnJvckhhbmRsZXIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgIHJldHVybiBfb2xkT25FcnJvckhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgd29ybGR3aWRlLkdMT0JBTF9PQkoub25lcnJvci5fX1NFTlRSWV9JTlNUUlVNRU5URURfXyA9IHRydWU7XG59XG5cbmV4cG9ydHMuYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyID0gYWRkR2xvYmFsRXJyb3JJbnN0cnVtZW50YXRpb25IYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsRXJyb3IuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3b3JsZHdpZGUiLCJyZXF1aXJlIiwiaGFuZGxlcnMiLCJfb2xkT25FcnJvckhhbmRsZXIiLCJhZGRHbG9iYWxFcnJvckluc3RydW1lbnRhdGlvbkhhbmRsZXIiLCJoYW5kbGVyIiwidHlwZSIsImFkZEhhbmRsZXIiLCJtYXliZUluc3RydW1lbnQiLCJpbnN0cnVtZW50RXJyb3IiLCJHTE9CQUxfT0JKIiwib25lcnJvciIsIm1zZyIsInVybCIsImxpbmUiLCJjb2x1bW4iLCJlcnJvciIsImhhbmRsZXJEYXRhIiwidHJpZ2dlckhhbmRsZXJzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfX1NFTlRSWV9JTlNUUlVNRU5URURfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ../worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst handlers = __webpack_require__(/*! ./handlers.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\");\nlet _oldOnUnhandledRejectionHandler = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalUnhandledRejectionInstrumentationHandler(handler) {\n  const type = 'unhandledrejection';\n  handlers.addHandler(type, handler);\n  handlers.maybeInstrument(type, instrumentUnhandledRejection);\n}\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = worldwide.GLOBAL_OBJ.onunhandledrejection;\n\n  // Note: The reason we are doing window.onunhandledrejection instead of window.addEventListener('unhandledrejection')\n  // is that we are using this handler in the Loader Script, to handle buffered rejections consistently\n  worldwide.GLOBAL_OBJ.onunhandledrejection = function (e) {\n    const handlerData = e;\n    handlers.triggerHandlers('unhandledrejection', handlerData);\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n    return true;\n  };\n  worldwide.GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\nexports.addGlobalUnhandledRejectionInstrumentationHandler = addGlobalUnhandledRejectionInstrumentationHandler;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9nbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxTQUFTLEdBQUdDLG1CQUFPLENBQUMsb0dBQWlCLENBQUM7QUFDNUMsTUFBTUMsUUFBUSxHQUFHRCxtQkFBTyxDQUFDLDRHQUFlLENBQUM7QUFFekMsSUFBSUUsK0JBQStCLEdBQUcsSUFBSTs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsaURBQWlEQSxDQUN4REMsT0FBTyxFQUNQO0VBQ0EsTUFBTUMsSUFBSSxHQUFHLG9CQUFvQjtFQUNqQ0osUUFBUSxDQUFDSyxVQUFVLENBQUNELElBQUksRUFBRUQsT0FBTyxDQUFDO0VBQ2xDSCxRQUFRLENBQUNNLGVBQWUsQ0FBQ0YsSUFBSSxFQUFFRyw0QkFBNEIsQ0FBQztBQUM5RDtBQUVBLFNBQVNBLDRCQUE0QkEsQ0FBQSxFQUFHO0VBQ3RDTiwrQkFBK0IsR0FBR0gsU0FBUyxDQUFDVSxVQUFVLENBQUNDLG9CQUFvQjs7RUFFM0U7RUFDQTtFQUNBWCxTQUFTLENBQUNVLFVBQVUsQ0FBQ0Msb0JBQW9CLEdBQUcsVUFBVUMsQ0FBQyxFQUFFO0lBQ3ZELE1BQU1DLFdBQVcsR0FBR0QsQ0FBQztJQUNyQlYsUUFBUSxDQUFDWSxlQUFlLENBQUMsb0JBQW9CLEVBQUVELFdBQVcsQ0FBQztJQUUzRCxJQUFJViwrQkFBK0IsRUFBRTtNQUNuQztNQUNBLE9BQU9BLCtCQUErQixDQUFDWSxLQUFLLENBQUMsSUFBSSxFQUFFQyxTQUFTLENBQUM7SUFDL0Q7SUFFQSxPQUFPLElBQUk7RUFDYixDQUFDO0VBRURoQixTQUFTLENBQUNVLFVBQVUsQ0FBQ0Msb0JBQW9CLENBQUNNLHVCQUF1QixHQUFHLElBQUk7QUFDMUU7QUFFQW5CLHlEQUF5RCxHQUFHTSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9nbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uanM/MzA3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuLi93b3JsZHdpZGUuanMnKTtcbmNvbnN0IGhhbmRsZXJzID0gcmVxdWlyZSgnLi9oYW5kbGVycy5qcycpO1xuXG5sZXQgX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlciA9IG51bGw7XG5cbi8qKlxuICogQWRkIGFuIGluc3RydW1lbnRhdGlvbiBoYW5kbGVyIGZvciB3aGVuIGFuIHVuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbiBpcyBjYXB0dXJlZC5cbiAqXG4gKiBVc2UgYXQgeW91ciBvd24gcmlzaywgdGhpcyBtaWdodCBicmVhayB3aXRob3V0IGNoYW5nZWxvZyBub3RpY2UsIG9ubHkgdXNlZCBpbnRlcm5hbGx5LlxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBhZGRHbG9iYWxVbmhhbmRsZWRSZWplY3Rpb25JbnN0cnVtZW50YXRpb25IYW5kbGVyKFxuICBoYW5kbGVyLFxuKSB7XG4gIGNvbnN0IHR5cGUgPSAndW5oYW5kbGVkcmVqZWN0aW9uJztcbiAgaGFuZGxlcnMuYWRkSGFuZGxlcih0eXBlLCBoYW5kbGVyKTtcbiAgaGFuZGxlcnMubWF5YmVJbnN0cnVtZW50KHR5cGUsIGluc3RydW1lbnRVbmhhbmRsZWRSZWplY3Rpb24pO1xufVxuXG5mdW5jdGlvbiBpbnN0cnVtZW50VW5oYW5kbGVkUmVqZWN0aW9uKCkge1xuICBfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyID0gd29ybGR3aWRlLkdMT0JBTF9PQkoub251bmhhbmRsZWRyZWplY3Rpb247XG5cbiAgLy8gTm90ZTogVGhlIHJlYXNvbiB3ZSBhcmUgZG9pbmcgd2luZG93Lm9udW5oYW5kbGVkcmVqZWN0aW9uIGluc3RlYWQgb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicpXG4gIC8vIGlzIHRoYXQgd2UgYXJlIHVzaW5nIHRoaXMgaGFuZGxlciBpbiB0aGUgTG9hZGVyIFNjcmlwdCwgdG8gaGFuZGxlIGJ1ZmZlcmVkIHJlamVjdGlvbnMgY29uc2lzdGVudGx5XG4gIHdvcmxkd2lkZS5HTE9CQUxfT0JKLm9udW5oYW5kbGVkcmVqZWN0aW9uID0gZnVuY3Rpb24gKGUpIHtcbiAgICBjb25zdCBoYW5kbGVyRGF0YSA9IGU7XG4gICAgaGFuZGxlcnMudHJpZ2dlckhhbmRsZXJzKCd1bmhhbmRsZWRyZWplY3Rpb24nLCBoYW5kbGVyRGF0YSk7XG5cbiAgICBpZiAoX29sZE9uVW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlcikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgcmV0dXJuIF9vbGRPblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICB3b3JsZHdpZGUuR0xPQkFMX09CSi5vbnVuaGFuZGxlZHJlamVjdGlvbi5fX1NFTlRSWV9JTlNUUlVNRU5URURfXyA9IHRydWU7XG59XG5cbmV4cG9ydHMuYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlciA9IGFkZEdsb2JhbFVuaGFuZGxlZFJlamVjdGlvbkluc3RydW1lbnRhdGlvbkhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxVbmhhbmRsZWRSZWplY3Rpb24uanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3b3JsZHdpZGUiLCJyZXF1aXJlIiwiaGFuZGxlcnMiLCJfb2xkT25VbmhhbmRsZWRSZWplY3Rpb25IYW5kbGVyIiwiYWRkR2xvYmFsVW5oYW5kbGVkUmVqZWN0aW9uSW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImhhbmRsZXIiLCJ0eXBlIiwiYWRkSGFuZGxlciIsIm1heWJlSW5zdHJ1bWVudCIsImluc3RydW1lbnRVbmhhbmRsZWRSZWplY3Rpb24iLCJHTE9CQUxfT0JKIiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJlIiwiaGFuZGxlckRhdGEiLCJ0cmlnZ2VySGFuZGxlcnMiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9fU0VOVFJZX0lOU1RSVU1FTlRFRF9fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ../logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst stacktrace = __webpack_require__(/*! ../stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\n\n// We keep the handlers globally\nconst handlers = {};\nconst instrumented = {};\n\n/** Add a handler function. */\nfunction addHandler(type, handler) {\n  handlers[type] = handlers[type] || [];\n  handlers[type].push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nfunction resetInstrumentationHandlers() {\n  Object.keys(handlers).forEach(key => {\n    handlers[key] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nfunction maybeInstrument(type, instrumentFn) {\n  if (!instrumented[type]) {\n    instrumented[type] = true;\n    try {\n      instrumentFn();\n    } catch (e) {\n      debugBuild.DEBUG_BUILD && logger.logger.error(`Error while instrumenting ${type}`, e);\n    }\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nfunction triggerHandlers(type, data) {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      debugBuild.DEBUG_BUILD && logger.logger.error(`Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${stacktrace.getFunctionName(handler)}\\nError:`, e);\n    }\n  }\n}\nexports.addHandler = addHandler;\nexports.maybeInstrument = maybeInstrument;\nexports.resetInstrumentationHandlers = resetInstrumentationHandlers;\nexports.triggerHandlers = triggerHandlers;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaW5zdHJ1bWVudC9oYW5kbGVycy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyx3R0FBbUIsQ0FBQztBQUMvQyxNQUFNQyxNQUFNLEdBQUdELG1CQUFPLENBQUMsOEZBQWMsQ0FBQztBQUN0QyxNQUFNRSxVQUFVLEdBQUdGLG1CQUFPLENBQUMsc0dBQWtCLENBQUM7O0FBRTlDO0FBQ0EsTUFBTUcsUUFBUSxHQUFHLENBQUMsQ0FBQztBQUNuQixNQUFNQyxZQUFZLEdBQUcsQ0FBQyxDQUFDOztBQUV2QjtBQUNBLFNBQVNDLFVBQVVBLENBQUNDLElBQUksRUFBRUMsT0FBTyxFQUFFO0VBQ2pDSixRQUFRLENBQUNHLElBQUksQ0FBQyxHQUFHSCxRQUFRLENBQUNHLElBQUksQ0FBQyxJQUFJLEVBQUU7RUFDcENILFFBQVEsQ0FBQ0csSUFBSSxDQUFDLENBQUdFLElBQUksQ0FBQ0QsT0FBTyxDQUFDO0FBQ2pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsNEJBQTRCQSxDQUFBLEVBQUc7RUFDdENkLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDUCxRQUFRLENBQUMsQ0FBQ1EsT0FBTyxDQUFDQyxHQUFHLElBQUk7SUFDbkNULFFBQVEsQ0FBQ1MsR0FBRyxDQUFFLEdBQUdDLFNBQVM7RUFDNUIsQ0FBQyxDQUFDO0FBQ0o7O0FBRUE7QUFDQSxTQUFTQyxlQUFlQSxDQUFDUixJQUFJLEVBQUVTLFlBQVksRUFBRTtFQUMzQyxJQUFJLENBQUNYLFlBQVksQ0FBQ0UsSUFBSSxDQUFDLEVBQUU7SUFDdkJGLFlBQVksQ0FBQ0UsSUFBSSxDQUFDLEdBQUcsSUFBSTtJQUN6QixJQUFJO01BQ0ZTLFlBQVksQ0FBQyxDQUFDO0lBQ2hCLENBQUMsQ0FBQyxPQUFPQyxDQUFDLEVBQUU7TUFDVmpCLFVBQVUsQ0FBQ2tCLFdBQVcsSUFBSWhCLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDaUIsS0FBSyxDQUFFLDZCQUE0QlosSUFBSyxFQUFDLEVBQUVVLENBQUMsQ0FBQztJQUN2RjtFQUNGO0FBQ0Y7O0FBRUE7QUFDQSxTQUFTRyxlQUFlQSxDQUFDYixJQUFJLEVBQUVjLElBQUksRUFBRTtFQUNuQyxNQUFNQyxZQUFZLEdBQUdmLElBQUksSUFBSUgsUUFBUSxDQUFDRyxJQUFJLENBQUM7RUFDM0MsSUFBSSxDQUFDZSxZQUFZLEVBQUU7SUFDakI7RUFDRjtFQUVBLEtBQUssTUFBTWQsT0FBTyxJQUFJYyxZQUFZLEVBQUU7SUFDbEMsSUFBSTtNQUNGZCxPQUFPLENBQUNhLElBQUksQ0FBQztJQUNmLENBQUMsQ0FBQyxPQUFPSixDQUFDLEVBQUU7TUFDVmpCLFVBQVUsQ0FBQ2tCLFdBQVcsSUFDcEJoQixNQUFNLENBQUNBLE1BQU0sQ0FBQ2lCLEtBQUssQ0FDaEIsMERBQXlEWixJQUFLLFdBQVVKLFVBQVUsQ0FBQ29CLGVBQWUsQ0FBQ2YsT0FBTyxDQUFFLFVBQVMsRUFDdEhTLENBQ0YsQ0FBQztJQUNMO0VBQ0Y7QUFDRjtBQUVBbkIsa0JBQWtCLEdBQUdRLFVBQVU7QUFDL0JSLHVCQUF1QixHQUFHaUIsZUFBZTtBQUN6Q2pCLG9DQUFvQyxHQUFHWSw0QkFBNEI7QUFDbkVaLHVCQUF1QixHQUFHc0IsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9pbnN0cnVtZW50L2hhbmRsZXJzLmpzPzFjZGUiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi9sb2dnZXIuanMnKTtcbmNvbnN0IHN0YWNrdHJhY2UgPSByZXF1aXJlKCcuLi9zdGFja3RyYWNlLmpzJyk7XG5cbi8vIFdlIGtlZXAgdGhlIGhhbmRsZXJzIGdsb2JhbGx5XG5jb25zdCBoYW5kbGVycyA9IHt9O1xuY29uc3QgaW5zdHJ1bWVudGVkID0ge307XG5cbi8qKiBBZGQgYSBoYW5kbGVyIGZ1bmN0aW9uLiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlcih0eXBlLCBoYW5kbGVyKSB7XG4gIGhhbmRsZXJzW3R5cGVdID0gaGFuZGxlcnNbdHlwZV0gfHwgW107XG4gIChoYW5kbGVyc1t0eXBlXSApLnB1c2goaGFuZGxlcik7XG59XG5cbi8qKlxuICogUmVzZXQgYWxsIGluc3RydW1lbnRhdGlvbiBoYW5kbGVycy5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgYnkgdGVzdHMgdG8gZW5zdXJlIHdlIGhhdmUgYSBjbGVhbiBzbGF0ZSBvZiBpbnN0cnVtZW50YXRpb24gaGFuZGxlcnMuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0SW5zdHJ1bWVudGF0aW9uSGFuZGxlcnMoKSB7XG4gIE9iamVjdC5rZXlzKGhhbmRsZXJzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaGFuZGxlcnNba2V5IF0gPSB1bmRlZmluZWQ7XG4gIH0pO1xufVxuXG4vKiogTWF5YmUgcnVuIGFuIGluc3RydW1lbnRhdGlvbiBmdW5jdGlvbiwgdW5sZXNzIGl0IHdhcyBhbHJlYWR5IGNhbGxlZC4gKi9cbmZ1bmN0aW9uIG1heWJlSW5zdHJ1bWVudCh0eXBlLCBpbnN0cnVtZW50Rm4pIHtcbiAgaWYgKCFpbnN0cnVtZW50ZWRbdHlwZV0pIHtcbiAgICBpbnN0cnVtZW50ZWRbdHlwZV0gPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICBpbnN0cnVtZW50Rm4oKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGxvZ2dlci5sb2dnZXIuZXJyb3IoYEVycm9yIHdoaWxlIGluc3RydW1lbnRpbmcgJHt0eXBlfWAsIGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiogVHJpZ2dlciBoYW5kbGVycyBmb3IgYSBnaXZlbiBpbnN0cnVtZW50YXRpb24gdHlwZS4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJIYW5kbGVycyh0eXBlLCBkYXRhKSB7XG4gIGNvbnN0IHR5cGVIYW5kbGVycyA9IHR5cGUgJiYgaGFuZGxlcnNbdHlwZV07XG4gIGlmICghdHlwZUhhbmRsZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHR5cGVIYW5kbGVycykge1xuICAgIHRyeSB7XG4gICAgICBoYW5kbGVyKGRhdGEpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgICAgbG9nZ2VyLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICBgRXJyb3Igd2hpbGUgdHJpZ2dlcmluZyBpbnN0cnVtZW50YXRpb24gaGFuZGxlci5cXG5UeXBlOiAke3R5cGV9XFxuTmFtZTogJHtzdGFja3RyYWNlLmdldEZ1bmN0aW9uTmFtZShoYW5kbGVyKX1cXG5FcnJvcjpgLFxuICAgICAgICAgIGUsXG4gICAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuYWRkSGFuZGxlciA9IGFkZEhhbmRsZXI7XG5leHBvcnRzLm1heWJlSW5zdHJ1bWVudCA9IG1heWJlSW5zdHJ1bWVudDtcbmV4cG9ydHMucmVzZXRJbnN0cnVtZW50YXRpb25IYW5kbGVycyA9IHJlc2V0SW5zdHJ1bWVudGF0aW9uSGFuZGxlcnM7XG5leHBvcnRzLnRyaWdnZXJIYW5kbGVycyA9IHRyaWdnZXJIYW5kbGVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhbmRsZXJzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVidWdCdWlsZCIsInJlcXVpcmUiLCJsb2dnZXIiLCJzdGFja3RyYWNlIiwiaGFuZGxlcnMiLCJpbnN0cnVtZW50ZWQiLCJhZGRIYW5kbGVyIiwidHlwZSIsImhhbmRsZXIiLCJwdXNoIiwicmVzZXRJbnN0cnVtZW50YXRpb25IYW5kbGVycyIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwidW5kZWZpbmVkIiwibWF5YmVJbnN0cnVtZW50IiwiaW5zdHJ1bWVudEZuIiwiZSIsIkRFQlVHX0JVSUxEIiwiZXJyb3IiLCJ0cmlnZ2VySGFuZGxlcnMiLCJkYXRhIiwidHlwZUhhbmRsZXJzIiwiZ2V0RnVuY3Rpb25OYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/is.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isError(wat) {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n    case '[object WebAssembly.Exception]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat, className) {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isErrorEvent(wat) {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMError(wat) {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMException(wat) {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isString(wat) {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isParameterizedString(wat) {\n  return typeof wat === 'object' && wat !== null && '__sentry_template_string__' in wat && '__sentry_template_values__' in wat;\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPrimitive(wat) {\n  return wat === null || isParameterizedString(wat) || typeof wat !== 'object' && typeof wat !== 'function';\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPlainObject(wat) {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isEvent(wat) {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isElement(wat) {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isRegExp(wat) {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nfunction isThenable(wat) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isSyntheticEvent(wat) {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nfunction isInstanceOf(wat, base) {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isVueViewModel(wat) {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && (wat.__isVue || wat._isVue));\n}\nexports.isDOMError = isDOMError;\nexports.isDOMException = isDOMException;\nexports.isElement = isElement;\nexports.isError = isError;\nexports.isErrorEvent = isErrorEvent;\nexports.isEvent = isEvent;\nexports.isInstanceOf = isInstanceOf;\nexports.isParameterizedString = isParameterizedString;\nexports.isPlainObject = isPlainObject;\nexports.isPrimitive = isPrimitive;\nexports.isRegExp = isRegExp;\nexports.isString = isString;\nexports.isSyntheticEvent = isSyntheticEvent;\nexports.isThenable = isThenable;\nexports.isVueViewModel = isVueViewModel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/isBrowser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/isBrowser.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst node = __webpack_require__(/*! ./node.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * Returns true if we are in the browser.\n */\nfunction isBrowser() {\n  // eslint-disable-next-line no-restricted-globals\n  return  false && (0);\n}\n\n// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them\nfunction isElectronNodeRenderer() {\n  const process = worldwide.GLOBAL_OBJ.process;\n  return !!process && process.type === 'renderer';\n}\nexports.isBrowser = isBrowser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaXNCcm93c2VyLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLHlGQUFXLENBQUM7QUFDakMsTUFBTUMsU0FBUyxHQUFHRCxtQkFBTyxDQUFDLG1HQUFnQixDQUFDOztBQUUzQztBQUNBO0FBQ0E7QUFDQSxTQUFTRSxTQUFTQSxDQUFBLEVBQUc7RUFDbkI7RUFDQSxPQUFPLFdBQWtDLENBQTZDLENBQUM7QUFDekY7O0FBRUE7QUFDQSxTQUFTRSxzQkFBc0JBLENBQUEsRUFBRztFQUNoQyxNQUFNQyxPQUFPLEdBQUlKLFNBQVMsQ0FBQ0ssVUFBVSxDQUFHRCxPQUFPO0VBQy9DLE9BQU8sQ0FBQyxDQUFDQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0UsSUFBSSxLQUFLLFVBQVU7QUFDakQ7QUFFQVYsaUJBQWlCLEdBQUdLLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvaXNCcm93c2VyLmpzP2NlMGMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgbm9kZSA9IHJlcXVpcmUoJy4vbm9kZS5qcycpO1xuY29uc3Qgd29ybGR3aWRlID0gcmVxdWlyZSgnLi93b3JsZHdpZGUuanMnKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIGluIHRoZSBicm93c2VyLlxuICovXG5mdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICghbm9kZS5pc05vZGVFbnYoKSB8fCBpc0VsZWN0cm9uTm9kZVJlbmRlcmVyKCkpO1xufVxuXG4vLyBFbGVjdHJvbiByZW5kZXJlcnMgd2l0aCBub2RlSW50ZWdyYXRpb24gZW5hYmxlZCBhcmUgZGV0ZWN0ZWQgYXMgTm9kZS5qcyBzbyB3ZSBzcGVjaWZpY2FsbHkgdGVzdCBmb3IgdGhlbVxuZnVuY3Rpb24gaXNFbGVjdHJvbk5vZGVSZW5kZXJlcigpIHtcbiAgY29uc3QgcHJvY2VzcyA9ICh3b3JsZHdpZGUuR0xPQkFMX09CSiApLnByb2Nlc3M7XG4gIHJldHVybiAhIXByb2Nlc3MgJiYgcHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInO1xufVxuXG5leHBvcnRzLmlzQnJvd3NlciA9IGlzQnJvd3Nlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQnJvd3Nlci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm5vZGUiLCJyZXF1aXJlIiwid29ybGR3aWRlIiwiaXNCcm93c2VyIiwiaXNOb2RlRW52IiwiaXNFbGVjdHJvbk5vZGVSZW5kZXJlciIsInByb2Nlc3MiLCJHTE9CQUxfT0JKIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/isBrowser.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\nconst CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'];\n\n/** This may be mutated by the console instrumentation. */\nconst originalConsoleMethods = {};\n\n/** JSDoc */\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in worldwide.GLOBAL_OBJ)) {\n    return callback();\n  }\n  const console = worldwide.GLOBAL_OBJ.console;\n  const wrappedFuncs = {};\n  const wrappedLevels = Object.keys(originalConsoleMethods);\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level];\n    wrappedFuncs[level] = console[level];\n    console[level] = originalConsoleMethod;\n  });\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level];\n    });\n  }\n}\nfunction makeLogger() {\n  let enabled = false;\n  const logger = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled\n  };\n  if (debugBuild.DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = (...args) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            worldwide.GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n  return logger;\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.\n */\nconst logger = worldwide.getGlobalSingleton('logger', makeLogger);\nexports.CONSOLE_LEVELS = CONSOLE_LEVELS;\nexports.consoleSandbox = consoleSandbox;\nexports.logger = logger;\nexports.originalConsoleMethods = originalConsoleMethods;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHVHQUFrQixDQUFDO0FBQzlDLE1BQU1DLFNBQVMsR0FBR0QsbUJBQU8sQ0FBQyxtR0FBZ0IsQ0FBQzs7QUFFM0M7QUFDQSxNQUFNRSxNQUFNLEdBQUcsZ0JBQWdCO0FBRS9CLE1BQU1DLGNBQWMsR0FBRyxDQUNyQixPQUFPLEVBQ1AsTUFBTSxFQUNOLE1BQU0sRUFDTixPQUFPLEVBQ1AsS0FBSyxFQUNMLFFBQVEsRUFDUixPQUFPLENBQ1I7O0FBRUQ7QUFDQSxNQUFNQyxzQkFBc0IsR0FFekIsQ0FBQyxDQUFDOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGNBQWNBLENBQUNDLFFBQVEsRUFBRTtFQUNoQyxJQUFJLEVBQUUsU0FBUyxJQUFJTCxTQUFTLENBQUNNLFVBQVUsQ0FBQyxFQUFFO0lBQ3hDLE9BQU9ELFFBQVEsQ0FBQyxDQUFDO0VBQ25CO0VBRUEsTUFBTUUsT0FBTyxHQUFHUCxTQUFTLENBQUNNLFVBQVUsQ0FBQ0MsT0FBTztFQUM1QyxNQUFNQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO0VBRXZCLE1BQU1DLGFBQWEsR0FBR2YsTUFBTSxDQUFDZ0IsSUFBSSxDQUFDUCxzQkFBc0IsQ0FBQzs7RUFFekQ7RUFDQU0sYUFBYSxDQUFDRSxPQUFPLENBQUNDLEtBQUssSUFBSTtJQUM3QixNQUFNQyxxQkFBcUIsR0FBR1Ysc0JBQXNCLENBQUNTLEtBQUssQ0FBQztJQUMzREosWUFBWSxDQUFDSSxLQUFLLENBQUMsR0FBR0wsT0FBTyxDQUFDSyxLQUFLLENBQUM7SUFDcENMLE9BQU8sQ0FBQ0ssS0FBSyxDQUFDLEdBQUdDLHFCQUFxQjtFQUN4QyxDQUFDLENBQUM7RUFFRixJQUFJO0lBQ0YsT0FBT1IsUUFBUSxDQUFDLENBQUM7RUFDbkIsQ0FBQyxTQUFTO0lBQ1I7SUFDQUksYUFBYSxDQUFDRSxPQUFPLENBQUNDLEtBQUssSUFBSTtNQUM3QkwsT0FBTyxDQUFDSyxLQUFLLENBQUMsR0FBR0osWUFBWSxDQUFDSSxLQUFLLENBQUM7SUFDdEMsQ0FBQyxDQUFDO0VBQ0o7QUFDRjtBQUVBLFNBQVNFLFVBQVVBLENBQUEsRUFBRztFQUNwQixJQUFJQyxPQUFPLEdBQUcsS0FBSztFQUNuQixNQUFNQyxNQUFNLEdBQUc7SUFDYkMsTUFBTSxFQUFFQSxDQUFBLEtBQU07TUFDWkYsT0FBTyxHQUFHLElBQUk7SUFDaEIsQ0FBQztJQUNERyxPQUFPLEVBQUVBLENBQUEsS0FBTTtNQUNiSCxPQUFPLEdBQUcsS0FBSztJQUNqQixDQUFDO0lBQ0RJLFNBQVMsRUFBRUEsQ0FBQSxLQUFNSjtFQUNuQixDQUFDO0VBRUQsSUFBSWpCLFVBQVUsQ0FBQ3NCLFdBQVcsRUFBRTtJQUMxQmxCLGNBQWMsQ0FBQ1MsT0FBTyxDQUFDVSxJQUFJLElBQUk7TUFDN0JMLE1BQU0sQ0FBQ0ssSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHQyxJQUFJLEtBQUs7UUFDMUIsSUFBSVAsT0FBTyxFQUFFO1VBQ1hYLGNBQWMsQ0FBQyxNQUFNO1lBQ25CSixTQUFTLENBQUNNLFVBQVUsQ0FBQ0MsT0FBTyxDQUFDYyxJQUFJLENBQUMsQ0FBRSxHQUFFcEIsTUFBTyxJQUFHb0IsSUFBSyxJQUFHLEVBQUUsR0FBR0MsSUFBSSxDQUFDO1VBQ3BFLENBQUMsQ0FBQztRQUNKO01BQ0YsQ0FBQztJQUNILENBQUMsQ0FBQztFQUNKLENBQUMsTUFBTTtJQUNMcEIsY0FBYyxDQUFDUyxPQUFPLENBQUNVLElBQUksSUFBSTtNQUM3QkwsTUFBTSxDQUFDSyxJQUFJLENBQUMsR0FBRyxNQUFNRSxTQUFTO0lBQ2hDLENBQUMsQ0FBQztFQUNKO0VBRUEsT0FBT1AsTUFBTTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsTUFBTSxHQUFHaEIsU0FBUyxDQUFDd0Isa0JBQWtCLENBQUMsUUFBUSxFQUFFVixVQUFVLENBQUM7QUFFakVsQixzQkFBc0IsR0FBR00sY0FBYztBQUN2Q04sc0JBQXNCLEdBQUdRLGNBQWM7QUFDdkNSLGNBQWMsR0FBR29CLE1BQU07QUFDdkJwQiw4QkFBOEIsR0FBR08sc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L2xvZ2dlci5qcz8yODQ4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuL3dvcmxkd2lkZS5qcycpO1xuXG4vKiogUHJlZml4IGZvciBsb2dnaW5nIHN0cmluZ3MgKi9cbmNvbnN0IFBSRUZJWCA9ICdTZW50cnkgTG9nZ2VyICc7XG5cbmNvbnN0IENPTlNPTEVfTEVWRUxTID0gW1xuICAnZGVidWcnLFxuICAnaW5mbycsXG4gICd3YXJuJyxcbiAgJ2Vycm9yJyxcbiAgJ2xvZycsXG4gICdhc3NlcnQnLFxuICAndHJhY2UnLFxuXSA7XG5cbi8qKiBUaGlzIG1heSBiZSBtdXRhdGVkIGJ5IHRoZSBjb25zb2xlIGluc3RydW1lbnRhdGlvbi4gKi9cbmNvbnN0IG9yaWdpbmFsQ29uc29sZU1ldGhvZHNcblxuID0ge307XG5cbi8qKiBKU0RvYyAqL1xuXG4vKipcbiAqIFRlbXBvcmFyaWx5IGRpc2FibGUgc2VudHJ5IGNvbnNvbGUgaW5zdHJ1bWVudGF0aW9ucy5cbiAqXG4gKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIHJ1biBhZ2FpbnN0IHRoZSBvcmlnaW5hbCBgY29uc29sZWAgbWVzc2FnZXNcbiAqIEByZXR1cm5zIFRoZSByZXN1bHRzIG9mIHRoZSBjYWxsYmFja1xuICovXG5mdW5jdGlvbiBjb25zb2xlU2FuZGJveChjYWxsYmFjaykge1xuICBpZiAoISgnY29uc29sZScgaW4gd29ybGR3aWRlLkdMT0JBTF9PQkopKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH1cblxuICBjb25zdCBjb25zb2xlID0gd29ybGR3aWRlLkdMT0JBTF9PQkouY29uc29sZSA7XG4gIGNvbnN0IHdyYXBwZWRGdW5jcyA9IHt9O1xuXG4gIGNvbnN0IHdyYXBwZWRMZXZlbHMgPSBPYmplY3Qua2V5cyhvcmlnaW5hbENvbnNvbGVNZXRob2RzKSA7XG5cbiAgLy8gUmVzdG9yZSBhbGwgd3JhcHBlZCBjb25zb2xlIG1ldGhvZHNcbiAgd3JhcHBlZExldmVscy5mb3JFYWNoKGxldmVsID0+IHtcbiAgICBjb25zdCBvcmlnaW5hbENvbnNvbGVNZXRob2QgPSBvcmlnaW5hbENvbnNvbGVNZXRob2RzW2xldmVsXSA7XG4gICAgd3JhcHBlZEZ1bmNzW2xldmVsXSA9IGNvbnNvbGVbbGV2ZWxdIDtcbiAgICBjb25zb2xlW2xldmVsXSA9IG9yaWdpbmFsQ29uc29sZU1ldGhvZDtcbiAgfSk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBSZXZlcnQgcmVzdG9yYXRpb24gdG8gd3JhcHBlZCBzdGF0ZVxuICAgIHdyYXBwZWRMZXZlbHMuZm9yRWFjaChsZXZlbCA9PiB7XG4gICAgICBjb25zb2xlW2xldmVsXSA9IHdyYXBwZWRGdW5jc1tsZXZlbF0gO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VMb2dnZXIoKSB7XG4gIGxldCBlbmFibGVkID0gZmFsc2U7XG4gIGNvbnN0IGxvZ2dlciA9IHtcbiAgICBlbmFibGU6ICgpID0+IHtcbiAgICAgIGVuYWJsZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZGlzYWJsZTogKCkgPT4ge1xuICAgICAgZW5hYmxlZCA9IGZhbHNlO1xuICAgIH0sXG4gICAgaXNFbmFibGVkOiAoKSA9PiBlbmFibGVkLFxuICB9O1xuXG4gIGlmIChkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEKSB7XG4gICAgQ09OU09MRV9MRVZFTFMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgIGxvZ2dlcltuYW1lXSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgICAgICAgd29ybGR3aWRlLkdMT0JBTF9PQkouY29uc29sZVtuYW1lXShgJHtQUkVGSVh9WyR7bmFtZX1dOmAsIC4uLmFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIENPTlNPTEVfTEVWRUxTLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICBsb2dnZXJbbmFtZV0gPSAoKSA9PiB1bmRlZmluZWQ7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbG9nZ2VyIDtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGEgbG9nZ2VyIHNpbmdsZXRvbiB3aGljaCBlaXRoZXIgbG9ncyB0aGluZ3Mgb3Igbm8tb3BzIGlmIGxvZ2dpbmcgaXMgbm90IGVuYWJsZWQuXG4gKiBUaGUgbG9nZ2VyIGlzIGEgc2luZ2xldG9uIG9uIHRoZSBjYXJyaWVyLCB0byBlbnN1cmUgdGhhdCBhIGNvbnNpc3RlbnQgbG9nZ2VyIGlzIHVzZWQgdGhyb3VnaG91dCB0aGUgU0RLLlxuICovXG5jb25zdCBsb2dnZXIgPSB3b3JsZHdpZGUuZ2V0R2xvYmFsU2luZ2xldG9uKCdsb2dnZXInLCBtYWtlTG9nZ2VyKTtcblxuZXhwb3J0cy5DT05TT0xFX0xFVkVMUyA9IENPTlNPTEVfTEVWRUxTO1xuZXhwb3J0cy5jb25zb2xlU2FuZGJveCA9IGNvbnNvbGVTYW5kYm94O1xuZXhwb3J0cy5sb2dnZXIgPSBsb2dnZXI7XG5leHBvcnRzLm9yaWdpbmFsQ29uc29sZU1ldGhvZHMgPSBvcmlnaW5hbENvbnNvbGVNZXRob2RzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVidWdCdWlsZCIsInJlcXVpcmUiLCJ3b3JsZHdpZGUiLCJQUkVGSVgiLCJDT05TT0xFX0xFVkVMUyIsIm9yaWdpbmFsQ29uc29sZU1ldGhvZHMiLCJjb25zb2xlU2FuZGJveCIsImNhbGxiYWNrIiwiR0xPQkFMX09CSiIsImNvbnNvbGUiLCJ3cmFwcGVkRnVuY3MiLCJ3cmFwcGVkTGV2ZWxzIiwia2V5cyIsImZvckVhY2giLCJsZXZlbCIsIm9yaWdpbmFsQ29uc29sZU1ldGhvZCIsIm1ha2VMb2dnZXIiLCJlbmFibGVkIiwibG9nZ2VyIiwiZW5hYmxlIiwiZGlzYWJsZSIsImlzRW5hYmxlZCIsIkRFQlVHX0JVSUxEIiwibmFtZSIsImFyZ3MiLCJ1bmRlZmluZWQiLCJnZXRHbG9iYWxTaW5nbGV0b24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/lru.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/lru.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/** A simple Least Recently Used map */\nclass LRUMap {\n  constructor(_maxSize) {\n    this._maxSize = _maxSize;\n    this._cache = new Map();\n  }\n\n  /** Get the current size of the cache */\n  get size() {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  get(key) {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  set(key, value) {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n  remove(key) {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n  clear() {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n  keys() {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n  values() {\n    const values = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\nexports.LRUMap = LRUMap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbHJ1LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0EsTUFBTUMsTUFBTSxDQUFDO0VBRVZDLFdBQVdBLENBQUdDLFFBQVEsRUFBRTtJQUFDLElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxRQUFRO0lBQ2hELElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0VBQ3pCOztFQUVBO0VBQ0MsSUFBSUMsSUFBSUEsQ0FBQSxFQUFHO0lBQ1YsT0FBTyxJQUFJLENBQUNGLE1BQU0sQ0FBQ0UsSUFBSTtFQUN6Qjs7RUFFQTtFQUNDQyxHQUFHQSxDQUFDQyxHQUFHLEVBQUU7SUFDUixNQUFNUixLQUFLLEdBQUcsSUFBSSxDQUFDSSxNQUFNLENBQUNHLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDO0lBQ2xDLElBQUlSLEtBQUssS0FBS1MsU0FBUyxFQUFFO01BQ3ZCLE9BQU9BLFNBQVM7SUFDbEI7SUFDQTtJQUNBLElBQUksQ0FBQ0wsTUFBTSxDQUFDTSxNQUFNLENBQUNGLEdBQUcsQ0FBQztJQUN2QixJQUFJLENBQUNKLE1BQU0sQ0FBQ08sR0FBRyxDQUFDSCxHQUFHLEVBQUVSLEtBQUssQ0FBQztJQUMzQixPQUFPQSxLQUFLO0VBQ2Q7O0VBRUE7RUFDQ1csR0FBR0EsQ0FBQ0gsR0FBRyxFQUFFUixLQUFLLEVBQUU7SUFDZixJQUFJLElBQUksQ0FBQ0ksTUFBTSxDQUFDRSxJQUFJLElBQUksSUFBSSxDQUFDSCxRQUFRLEVBQUU7TUFDckM7TUFDQSxJQUFJLENBQUNDLE1BQU0sQ0FBQ00sTUFBTSxDQUFDLElBQUksQ0FBQ04sTUFBTSxDQUFDUSxJQUFJLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDYixLQUFLLENBQUM7SUFDckQ7SUFDQSxJQUFJLENBQUNJLE1BQU0sQ0FBQ08sR0FBRyxDQUFDSCxHQUFHLEVBQUVSLEtBQUssQ0FBQztFQUM3Qjs7RUFFQTtFQUNDYyxNQUFNQSxDQUFDTixHQUFHLEVBQUU7SUFDWCxNQUFNUixLQUFLLEdBQUcsSUFBSSxDQUFDSSxNQUFNLENBQUNHLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDO0lBQ2xDLElBQUlSLEtBQUssRUFBRTtNQUNULElBQUksQ0FBQ0ksTUFBTSxDQUFDTSxNQUFNLENBQUNGLEdBQUcsQ0FBQztJQUN6QjtJQUNBLE9BQU9SLEtBQUs7RUFDZDs7RUFFQTtFQUNDZSxLQUFLQSxDQUFBLEVBQUc7SUFDUCxJQUFJLENBQUNYLE1BQU0sQ0FBQ1csS0FBSyxDQUFDLENBQUM7RUFDckI7O0VBRUE7RUFDQ0gsSUFBSUEsQ0FBQSxFQUFHO0lBQ04sT0FBT0ksS0FBSyxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDYixNQUFNLENBQUNRLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDdkM7O0VBRUE7RUFDQ00sTUFBTUEsQ0FBQSxFQUFHO0lBQ1IsTUFBTUEsTUFBTSxHQUFHLEVBQUU7SUFDakIsSUFBSSxDQUFDZCxNQUFNLENBQUNlLE9BQU8sQ0FBQ25CLEtBQUssSUFBSWtCLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDcEIsS0FBSyxDQUFDLENBQUM7SUFDaEQsT0FBT2tCLE1BQU07RUFDZjtBQUNGO0FBRUFuQixjQUFjLEdBQUdFLE1BQU0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbHJ1LmpzPzgzNmEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqIEEgc2ltcGxlIExlYXN0IFJlY2VudGx5IFVzZWQgbWFwICovXG5jbGFzcyBMUlVNYXAge1xuXG4gICBjb25zdHJ1Y3RvciggIF9tYXhTaXplKSB7dGhpcy5fbWF4U2l6ZSA9IF9tYXhTaXplO1xuICAgIHRoaXMuX2NhY2hlID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgLyoqIEdldCB0aGUgY3VycmVudCBzaXplIG9mIHRoZSBjYWNoZSAqL1xuICAgZ2V0IHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlLnNpemU7XG4gIH1cblxuICAvKiogR2V0IGFuIGVudHJ5IG9yIHVuZGVmaW5lZCBpZiBpdCB3YXMgbm90IGluIHRoZSBjYWNoZS4gUmUtaW5zZXJ0cyB0byB1cGRhdGUgdGhlIHJlY2VudGx5IHVzZWQgb3JkZXIgKi9cbiAgIGdldChrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2NhY2hlLmdldChrZXkpO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgYW5kIHJlLWluc2VydCB0byB1cGRhdGUgdGhlIG9yZGVyXG4gICAgdGhpcy5fY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgdGhpcy5fY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKiBJbnNlcnQgYW4gZW50cnkgYW5kIGV2aWN0IGFuIG9sZGVyIGVudHJ5IGlmIHdlJ3ZlIHJlYWNoZWQgbWF4U2l6ZSAqL1xuICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBpZiAodGhpcy5fY2FjaGUuc2l6ZSA+PSB0aGlzLl9tYXhTaXplKSB7XG4gICAgICAvLyBrZXlzKCkgcmV0dXJucyBhbiBpdGVyYXRvciBpbiBpbnNlcnRpb24gb3JkZXIgc28ga2V5cygpLm5leHQoKSBnaXZlcyB1cyB0aGUgb2xkZXN0IGtleVxuICAgICAgdGhpcy5fY2FjaGUuZGVsZXRlKHRoaXMuX2NhY2hlLmtleXMoKS5uZXh0KCkudmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLl9jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICAvKiogUmVtb3ZlIGFuIGVudHJ5IGFuZCByZXR1cm4gdGhlIGVudHJ5IGlmIGl0IHdhcyBpbiB0aGUgY2FjaGUgKi9cbiAgIHJlbW92ZShrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2NhY2hlLmdldChrZXkpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5fY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKiBDbGVhciBhbGwgZW50cmllcyAqL1xuICAgY2xlYXIoKSB7XG4gICAgdGhpcy5fY2FjaGUuY2xlYXIoKTtcbiAgfVxuXG4gIC8qKiBHZXQgYWxsIHRoZSBrZXlzICovXG4gICBrZXlzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX2NhY2hlLmtleXMoKSk7XG4gIH1cblxuICAvKiogR2V0IGFsbCB0aGUgdmFsdWVzICovXG4gICB2YWx1ZXMoKSB7XG4gICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgdGhpcy5fY2FjaGUuZm9yRWFjaCh2YWx1ZSA9PiB2YWx1ZXMucHVzaCh2YWx1ZSkpO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbn1cblxuZXhwb3J0cy5MUlVNYXAgPSBMUlVNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1scnUuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJMUlVNYXAiLCJjb25zdHJ1Y3RvciIsIl9tYXhTaXplIiwiX2NhY2hlIiwiTWFwIiwic2l6ZSIsImdldCIsImtleSIsInVuZGVmaW5lZCIsImRlbGV0ZSIsInNldCIsImtleXMiLCJuZXh0IiwicmVtb3ZlIiwiY2xlYXIiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJmb3JFYWNoIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/lru.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/memo.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/memo.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Helper to decycle json objects\n *\n * @deprecated This function is deprecated and will be removed in the next major version.\n */\n// TODO(v9): Move this function into normalize() directly\nfunction memoBuilder() {\n  const hasWeakSet = typeof WeakSet === 'function';\n  const inner = hasWeakSet ? new WeakSet() : [];\n  function memoize(obj) {\n    if (hasWeakSet) {\n      if (inner.has(obj)) {\n        return true;\n      }\n      inner.add(obj);\n      return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let i = 0; i < inner.length; i++) {\n      const value = inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    inner.push(obj);\n    return false;\n  }\n  function unmemoize(obj) {\n    if (hasWeakSet) {\n      inner.delete(obj);\n    } else {\n      for (let i = 0; i < inner.length; i++) {\n        if (inner[i] === obj) {\n          inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n  return [memoize, unmemoize];\n}\nexports.memoBuilder = memoBuilder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbWVtby5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDOztBQUU3RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFdBQVdBLENBQUEsRUFBRztFQUNyQixNQUFNQyxVQUFVLEdBQUcsT0FBT0MsT0FBTyxLQUFLLFVBQVU7RUFDaEQsTUFBTUMsS0FBSyxHQUFHRixVQUFVLEdBQUcsSUFBSUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFO0VBQzdDLFNBQVNFLE9BQU9BLENBQUNDLEdBQUcsRUFBRTtJQUNwQixJQUFJSixVQUFVLEVBQUU7TUFDZCxJQUFJRSxLQUFLLENBQUNHLEdBQUcsQ0FBQ0QsR0FBRyxDQUFDLEVBQUU7UUFDbEIsT0FBTyxJQUFJO01BQ2I7TUFDQUYsS0FBSyxDQUFDSSxHQUFHLENBQUNGLEdBQUcsQ0FBQztNQUNkLE9BQU8sS0FBSztJQUNkO0lBQ0E7SUFDQSxLQUFLLElBQUlHLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0wsS0FBSyxDQUFDTSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO01BQ3JDLE1BQU1ULEtBQUssR0FBR0ksS0FBSyxDQUFDSyxDQUFDLENBQUM7TUFDdEIsSUFBSVQsS0FBSyxLQUFLTSxHQUFHLEVBQUU7UUFDakIsT0FBTyxJQUFJO01BQ2I7SUFDRjtJQUNBRixLQUFLLENBQUNPLElBQUksQ0FBQ0wsR0FBRyxDQUFDO0lBQ2YsT0FBTyxLQUFLO0VBQ2Q7RUFFQSxTQUFTTSxTQUFTQSxDQUFDTixHQUFHLEVBQUU7SUFDdEIsSUFBSUosVUFBVSxFQUFFO01BQ2RFLEtBQUssQ0FBQ1MsTUFBTSxDQUFDUCxHQUFHLENBQUM7SUFDbkIsQ0FBQyxNQUFNO01BQ0wsS0FBSyxJQUFJRyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdMLEtBQUssQ0FBQ00sTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJTCxLQUFLLENBQUNLLENBQUMsQ0FBQyxLQUFLSCxHQUFHLEVBQUU7VUFDcEJGLEtBQUssQ0FBQ1UsTUFBTSxDQUFDTCxDQUFDLEVBQUUsQ0FBQyxDQUFDO1VBQ2xCO1FBQ0Y7TUFDRjtJQUNGO0VBQ0Y7RUFDQSxPQUFPLENBQUNKLE9BQU8sRUFBRU8sU0FBUyxDQUFDO0FBQzdCO0FBRUFiLG1CQUFtQixHQUFHRSxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L21lbW8uanM/ZWNhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cblxuLyoqXG4gKiBIZWxwZXIgdG8gZGVjeWNsZSBqc29uIG9iamVjdHNcbiAqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICovXG4vLyBUT0RPKHY5KTogTW92ZSB0aGlzIGZ1bmN0aW9uIGludG8gbm9ybWFsaXplKCkgZGlyZWN0bHlcbmZ1bmN0aW9uIG1lbW9CdWlsZGVyKCkge1xuICBjb25zdCBoYXNXZWFrU2V0ID0gdHlwZW9mIFdlYWtTZXQgPT09ICdmdW5jdGlvbic7XG4gIGNvbnN0IGlubmVyID0gaGFzV2Vha1NldCA/IG5ldyBXZWFrU2V0KCkgOiBbXTtcbiAgZnVuY3Rpb24gbWVtb2l6ZShvYmopIHtcbiAgICBpZiAoaGFzV2Vha1NldCkge1xuICAgICAgaWYgKGlubmVyLmhhcyhvYmopKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaW5uZXIuYWRkKG9iaik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLWZvci1vZlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5uZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5uZXJbaV07XG4gICAgICBpZiAodmFsdWUgPT09IG9iaikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaW5uZXIucHVzaChvYmopO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVubWVtb2l6ZShvYmopIHtcbiAgICBpZiAoaGFzV2Vha1NldCkge1xuICAgICAgaW5uZXIuZGVsZXRlKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5uZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlubmVyW2ldID09PSBvYmopIHtcbiAgICAgICAgICBpbm5lci5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIFttZW1vaXplLCB1bm1lbW9pemVdO1xufVxuXG5leHBvcnRzLm1lbW9CdWlsZGVyID0gbWVtb0J1aWxkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW1vLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWVtb0J1aWxkZXIiLCJoYXNXZWFrU2V0IiwiV2Vha1NldCIsImlubmVyIiwibWVtb2l6ZSIsIm9iaiIsImhhcyIsImFkZCIsImkiLCJsZW5ndGgiLCJwdXNoIiwidW5tZW1vaXplIiwiZGVsZXRlIiwic3BsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/memo.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nfunction uuid4() {\n  const gbl = worldwide.GLOBAL_OBJ;\n  const crypto = gbl.crypto || gbl.msCrypto;\n  let getRandomByte = () => Math.random() * 16;\n  try {\n    if (crypto && crypto.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto && crypto.getRandomValues) {\n      getRandomByte = () => {\n        // crypto.getRandomValues might return undefined instead of the typed array\n        // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n        // However, `typedArray` is still filled in-place.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n        const typedArray = new Uint8Array(1);\n        crypto.getRandomValues(typedArray);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return typedArray[0];\n      };\n    }\n  } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return ([1e7] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n  // eslint-disable-next-line no-bitwise\n  (c ^ (getRandomByte() & 15) >> c / 4).toString(16));\n}\nfunction getFirstException(event) {\n  return event.exception && event.exception.values ? event.exception.values[0] : undefined;\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nfunction getEventDescription(event) {\n  const {\n    message,\n    event_id: eventId\n  } = event;\n  if (message) {\n    return message;\n  }\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nfunction addExceptionTypeValue(event, value, type) {\n  const exception = event.exception = event.exception || {};\n  const values = exception.values = exception.values || [];\n  const firstException = values[0] = values[0] || {};\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nfunction addExceptionMechanism(event, newMechanism) {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n  const defaultMechanism = {\n    type: 'generic',\n    handled: true\n  };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = {\n    ...defaultMechanism,\n    ...currentMechanism,\n    ...newMechanism\n  };\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = {\n      ...(currentMechanism && currentMechanism.data),\n      ...newMechanism.data\n    };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\n\nfunction _parseInt(input) {\n  return parseInt(input || '', 10);\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nfunction parseSemver(input) {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = _parseInt(match[1]);\n  const minor = _parseInt(match[2]);\n  const patch = _parseInt(match[3]);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4]\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nfunction addContextToFrame(lines, frame, linesOfContext = 5) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n  frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(line => string.snipLine(line, 0));\n\n  // We guard here to ensure this is not larger than the existing number of lines\n  const lineIndex = Math.min(maxLines - 1, sourceLine);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  frame.context_line = string.snipLine(lines[lineIndex], frame.colno || 0);\n  frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(line => string.snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nfunction checkOrSetAlreadyCaught(exception) {\n  if (isAlreadyCaptured(exception)) {\n    return true;\n  }\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    object.addNonEnumerableProperty(exception, '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n  return false;\n}\nfunction isAlreadyCaptured(exception) {\n  try {\n    return exception.__sentry_captured__;\n  } catch (e) {} // eslint-disable-line no-empty\n}\n\n/**\n * Checks whether the given input is already an array, and if it isn't, wraps it in one.\n *\n * @param maybeArray Input to turn into an array, if necessary\n * @returns The input, if already an array, or an array with the input as the only element, if not\n *\n * @deprecated This function has been deprecated and will not be replaced.\n */\nfunction arrayify(maybeArray) {\n  return Array.isArray(maybeArray) ? maybeArray : [maybeArray];\n}\nexports.addContextToFrame = addContextToFrame;\nexports.addExceptionMechanism = addExceptionMechanism;\nexports.addExceptionTypeValue = addExceptionTypeValue;\nexports.arrayify = arrayify;\nexports.checkOrSetAlreadyCaught = checkOrSetAlreadyCaught;\nexports.getEventDescription = getEventDescription;\nexports.parseSemver = parseSemver;\nexports.uuid4 = uuid4;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbWlzYy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyw2RkFBYSxDQUFDO0FBQ3JDLE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyw2RkFBYSxDQUFDO0FBQ3JDLE1BQU1FLFNBQVMsR0FBR0YsbUJBQU8sQ0FBQyxtR0FBZ0IsQ0FBQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNHLEtBQUtBLENBQUEsRUFBRztFQUNmLE1BQU1DLEdBQUcsR0FBR0YsU0FBUyxDQUFDRyxVQUFVO0VBQ2hDLE1BQU1DLE1BQU0sR0FBR0YsR0FBRyxDQUFDRSxNQUFNLElBQUlGLEdBQUcsQ0FBQ0csUUFBUTtFQUV6QyxJQUFJQyxhQUFhLEdBQUdBLENBQUEsS0FBTUMsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUU7RUFDNUMsSUFBSTtJQUNGLElBQUlKLE1BQU0sSUFBSUEsTUFBTSxDQUFDSyxVQUFVLEVBQUU7TUFDL0IsT0FBT0wsTUFBTSxDQUFDSyxVQUFVLENBQUMsQ0FBQyxDQUFDQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztJQUM5QztJQUNBLElBQUlOLE1BQU0sSUFBSUEsTUFBTSxDQUFDTyxlQUFlLEVBQUU7TUFDcENMLGFBQWEsR0FBR0EsQ0FBQSxLQUFNO1FBQ3BCO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsTUFBTU0sVUFBVSxHQUFHLElBQUlDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDcENULE1BQU0sQ0FBQ08sZUFBZSxDQUFDQyxVQUFVLENBQUM7UUFDbEM7UUFDQSxPQUFPQSxVQUFVLENBQUMsQ0FBQyxDQUFDO01BQ3RCLENBQUM7SUFDSDtFQUNGLENBQUMsQ0FBQyxPQUFPRSxDQUFD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LEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvbWlzYy5qcz8wNDc5Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IG9iamVjdCA9IHJlcXVpcmUoJy4vb2JqZWN0LmpzJyk7XG5jb25zdCBzdHJpbmcgPSByZXF1aXJlKCcuL3N0cmluZy5qcycpO1xuY29uc3Qgd29ybGR3aWRlID0gcmVxdWlyZSgnLi93b3JsZHdpZGUuanMnKTtcblxuLyoqXG4gKiBVVUlENCBnZW5lcmF0b3JcbiAqXG4gKiBAcmV0dXJucyBzdHJpbmcgR2VuZXJhdGVkIFVVSUQ0LlxuICovXG5mdW5jdGlvbiB1dWlkNCgpIHtcbiAgY29uc3QgZ2JsID0gd29ybGR3aWRlLkdMT0JBTF9PQkogO1xuICBjb25zdCBjcnlwdG8gPSBnYmwuY3J5cHRvIHx8IGdibC5tc0NyeXB0bztcblxuICBsZXQgZ2V0UmFuZG9tQnl0ZSA9ICgpID0+IE1hdGgucmFuZG9tKCkgKiAxNjtcbiAgdHJ5IHtcbiAgICBpZiAoY3J5cHRvICYmIGNyeXB0by5yYW5kb21VVUlEKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbVVVSUQoKS5yZXBsYWNlKC8tL2csICcnKTtcbiAgICB9XG4gICAgaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICBnZXRSYW5kb21CeXRlID0gKCkgPT4ge1xuICAgICAgICAvLyBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzIG1pZ2h0IHJldHVybiB1bmRlZmluZWQgaW5zdGVhZCBvZiB0aGUgdHlwZWQgYXJyYXlcbiAgICAgICAgLy8gaW4gb2xkIENocm9taXVtIHZlcnNpb25zIChlLmcuIDIzLjAuMTIzNS4wICgxNTE0MjIpKVxuICAgICAgICAvLyBIb3dldmVyLCBgdHlwZWRBcnJheWAgaXMgc3RpbGwgZmlsbGVkIGluLXBsYWNlLlxuICAgICAgICAvLyBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DcnlwdG8vZ2V0UmFuZG9tVmFsdWVzI3R5cGVkYXJyYXlcbiAgICAgICAgY29uc3QgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KDEpO1xuICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHR5cGVkQXJyYXkpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICByZXR1cm4gdHlwZWRBcnJheVswXTtcbiAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChfKSB7XG4gICAgLy8gc29tZSBydW50aW1lcyBjYW4gY3Jhc2ggaW52b2tpbmcgY3J5cHRvXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvODkzNVxuICB9XG5cbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0LzIxMTc1MjMjMjExNzUyM1xuICAvLyBDb25jYXRlbmF0aW5nIHRoZSBmb2xsb3dpbmcgbnVtYmVycyBhcyBzdHJpbmdzIHJlc3VsdHMgaW4gJzEwMDAwMDAwMTAwMDQwMDA4MDAwMTAwMDAwMDAwMDAwJ1xuICByZXR1cm4gKChbMWU3XSApICsgMWUzICsgNGUzICsgOGUzICsgMWUxMSkucmVwbGFjZSgvWzAxOF0vZywgYyA9PlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgKChjICkgXiAoKGdldFJhbmRvbUJ5dGUoKSAmIDE1KSA+PiAoKGMgKSAvIDQpKSkudG9TdHJpbmcoMTYpLFxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRGaXJzdEV4Y2VwdGlvbihldmVudCkge1xuICByZXR1cm4gZXZlbnQuZXhjZXB0aW9uICYmIGV2ZW50LmV4Y2VwdGlvbi52YWx1ZXMgPyBldmVudC5leGNlcHRpb24udmFsdWVzWzBdIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEV4dHJhY3RzIGVpdGhlciBtZXNzYWdlIG9yIHR5cGUrdmFsdWUgZnJvbSBhbiBldmVudCB0aGF0IGNhbiBiZSB1c2VkIGZvciB1c2VyLWZhY2luZyBsb2dzXG4gKiBAcmV0dXJucyBldmVudCdzIGRlc2NyaXB0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50RGVzY3JpcHRpb24oZXZlbnQpIHtcbiAgY29uc3QgeyBtZXNzYWdlLCBldmVudF9pZDogZXZlbnRJZCB9ID0gZXZlbnQ7XG4gIGlmIChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cblxuICBjb25zdCBmaXJzdEV4Y2VwdGlvbiA9IGdldEZpcnN0RXhjZXB0aW9uKGV2ZW50KTtcbiAgaWYgKGZpcnN0RXhjZXB0aW9uKSB7XG4gICAgaWYgKGZpcnN0RXhjZXB0aW9uLnR5cGUgJiYgZmlyc3RFeGNlcHRpb24udmFsdWUpIHtcbiAgICAgIHJldHVybiBgJHtmaXJzdEV4Y2VwdGlvbi50eXBlfTogJHtmaXJzdEV4Y2VwdGlvbi52YWx1ZX1gO1xuICAgIH1cbiAgICByZXR1cm4gZmlyc3RFeGNlcHRpb24udHlwZSB8fCBmaXJzdEV4Y2VwdGlvbi52YWx1ZSB8fCBldmVudElkIHx8ICc8dW5rbm93bj4nO1xuICB9XG4gIHJldHVybiBldmVudElkIHx8ICc8dW5rbm93bj4nO1xufVxuXG4vKipcbiAqIEFkZHMgZXhjZXB0aW9uIHZhbHVlcywgdHlwZSBhbmQgdmFsdWUgdG8gYW4gc3ludGhldGljIEV4Y2VwdGlvbi5cbiAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHZhbHVlIFZhbHVlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAcGFyYW0gdHlwZSBUeXBlIG9mIHRoZSBleGNlcHRpb24uXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEV4Y2VwdGlvblR5cGVWYWx1ZShldmVudCwgdmFsdWUsIHR5cGUpIHtcbiAgY29uc3QgZXhjZXB0aW9uID0gKGV2ZW50LmV4Y2VwdGlvbiA9IGV2ZW50LmV4Y2VwdGlvbiB8fCB7fSk7XG4gIGNvbnN0IHZhbHVlcyA9IChleGNlcHRpb24udmFsdWVzID0gZXhjZXB0aW9uLnZhbHVlcyB8fCBbXSk7XG4gIGNvbnN0IGZpcnN0RXhjZXB0aW9uID0gKHZhbHVlc1swXSA9IHZhbHVlc1swXSB8fCB7fSk7XG4gIGlmICghZmlyc3RFeGNlcHRpb24udmFsdWUpIHtcbiAgICBmaXJzdEV4Y2VwdGlvbi52YWx1ZSA9IHZhbHVlIHx8ICcnO1xuICB9XG4gIGlmICghZmlyc3RFeGNlcHRpb24udHlwZSkge1xuICAgIGZpcnN0RXhjZXB0aW9uLnR5cGUgPSB0eXBlIHx8ICdFcnJvcic7XG4gIH1cbn1cblxuLyoqXG4gKiBBZGRzIGV4Y2VwdGlvbiBtZWNoYW5pc20gZGF0YSB0byBhIGdpdmVuIGV2ZW50LiBVc2VzIGRlZmF1bHRzIGlmIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIG5vdCBwYXNzZWQuXG4gKlxuICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCB0byBtb2RpZnkuXG4gKiBAcGFyYW0gbmV3TWVjaGFuaXNtIE1lY2hhbmlzbSBkYXRhIHRvIGFkZCB0byB0aGUgZXZlbnQuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIGFkZEV4Y2VwdGlvbk1lY2hhbmlzbShldmVudCwgbmV3TWVjaGFuaXNtKSB7XG4gIGNvbnN0IGZpcnN0RXhjZXB0aW9uID0gZ2V0Rmlyc3RFeGNlcHRpb24oZXZlbnQpO1xuICBpZiAoIWZpcnN0RXhjZXB0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZGVmYXVsdE1lY2hhbmlzbSA9IHsgdHlwZTogJ2dlbmVyaWMnLCBoYW5kbGVkOiB0cnVlIH07XG4gIGNvbnN0IGN1cnJlbnRNZWNoYW5pc20gPSBmaXJzdEV4Y2VwdGlvbi5tZWNoYW5pc207XG4gIGZpcnN0RXhjZXB0aW9uLm1lY2hhbmlzbSA9IHsgLi4uZGVmYXVsdE1lY2hhbmlzbSwgLi4uY3VycmVudE1lY2hhbmlzbSwgLi4ubmV3TWVjaGFuaXNtIH07XG5cbiAgaWYgKG5ld01lY2hhbmlzbSAmJiAnZGF0YScgaW4gbmV3TWVjaGFuaXNtKSB7XG4gICAgY29uc3QgbWVyZ2VkRGF0YSA9IHsgLi4uKGN1cnJlbnRNZWNoYW5pc20gJiYgY3VycmVudE1lY2hhbmlzbS5kYXRhKSwgLi4ubmV3TWVjaGFuaXNtLmRhdGEgfTtcbiAgICBmaXJzdEV4Y2VwdGlvbi5tZWNoYW5pc20uZGF0YSA9IG1lcmdlZERhdGE7XG4gIH1cbn1cblxuLy8gaHR0cHM6Ly9zZW12ZXIub3JnLyNpcy10aGVyZS1hLXN1Z2dlc3RlZC1yZWd1bGFyLWV4cHJlc3Npb24tcmVnZXgtdG8tY2hlY2stYS1zZW12ZXItc3RyaW5nXG5jb25zdCBTRU1WRVJfUkVHRVhQID1cbiAgL14oMHxbMS05XVxcZCopXFwuKDB8WzEtOV1cXGQqKVxcLigwfFsxLTldXFxkKikoPzotKCg/OjB8WzEtOV1cXGQqfFxcZCpbYS16QS1aLV1bMC05YS16QS1aLV0qKSg/OlxcLig/OjB8WzEtOV1cXGQqfFxcZCpbYS16QS1aLV1bMC05YS16QS1aLV0qKSkqKSk/KD86XFwrKFswLTlhLXpBLVotXSsoPzpcXC5bMC05YS16QS1aLV0rKSopKT8kLztcblxuLyoqXG4gKiBSZXByZXNlbnRzIFNlbWFudGljIFZlcnNpb25pbmcgb2JqZWN0XG4gKi9cblxuZnVuY3Rpb24gX3BhcnNlSW50KGlucHV0KSB7XG4gIHJldHVybiBwYXJzZUludChpbnB1dCB8fCAnJywgMTApO1xufVxuXG4vKipcbiAqIFBhcnNlcyBpbnB1dCBpbnRvIGEgU2VtVmVyIGludGVyZmFjZVxuICogQHBhcmFtIGlucHV0IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHNlbXZlciB2ZXJzaW9uXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU2VtdmVyKGlucHV0KSB7XG4gIGNvbnN0IG1hdGNoID0gaW5wdXQubWF0Y2goU0VNVkVSX1JFR0VYUCkgfHwgW107XG4gIGNvbnN0IG1ham9yID0gX3BhcnNlSW50KG1hdGNoWzFdKTtcbiAgY29uc3QgbWlub3IgPSBfcGFyc2VJbnQobWF0Y2hbMl0pO1xuICBjb25zdCBwYXRjaCA9IF9wYXJzZUludChtYXRjaFszXSk7XG4gIHJldHVybiB7XG4gICAgYnVpbGRtZXRhZGF0YTogbWF0Y2hbNV0sXG4gICAgbWFqb3I6IGlzTmFOKG1ham9yKSA/IHVuZGVmaW5lZCA6IG1ham9yLFxuICAgIG1pbm9yOiBpc05hTihtaW5vcikgPyB1bmRlZmluZWQgOiBtaW5vcixcbiAgICBwYXRjaDogaXNOYU4ocGF0Y2gpID8gdW5kZWZpbmVkIDogcGF0Y2gsXG4gICAgcHJlcmVsZWFzZTogbWF0Y2hbNF0sXG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhZGRzIGNvbnRleHQgKHByZS9wb3N0L2xpbmUpIGxpbmVzIHRvIHRoZSBwcm92aWRlZCBmcmFtZVxuICpcbiAqIEBwYXJhbSBsaW5lcyBzdHJpbmdbXSBjb250YWluaW5nIGFsbCBsaW5lc1xuICogQHBhcmFtIGZyYW1lIFN0YWNrRnJhbWUgdGhhdCB3aWxsIGJlIG11dGF0ZWRcbiAqIEBwYXJhbSBsaW5lc09mQ29udGV4dCBudW1iZXIgb2YgY29udGV4dCBsaW5lcyB3ZSB3YW50IHRvIGFkZCBwcmUvcG9zdFxuICovXG5mdW5jdGlvbiBhZGRDb250ZXh0VG9GcmFtZShsaW5lcywgZnJhbWUsIGxpbmVzT2ZDb250ZXh0ID0gNSkge1xuICAvLyBXaGVuIHRoZXJlIGlzIG5vIGxpbmUgbnVtYmVyIGluIHRoZSBmcmFtZSwgYXR0YWNoaW5nIGNvbnRleHQgaXMgbm9uc2Vuc2ljYWwgYW5kIHdpbGwgZXZlbiBicmVhayBncm91cGluZ1xuICBpZiAoZnJhbWUubGluZW5vID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBtYXhMaW5lcyA9IGxpbmVzLmxlbmd0aDtcbiAgY29uc3Qgc291cmNlTGluZSA9IE1hdGgubWF4KE1hdGgubWluKG1heExpbmVzIC0gMSwgZnJhbWUubGluZW5vIC0gMSksIDApO1xuXG4gIGZyYW1lLnByZV9jb250ZXh0ID0gbGluZXNcbiAgICAuc2xpY2UoTWF0aC5tYXgoMCwgc291cmNlTGluZSAtIGxpbmVzT2ZDb250ZXh0KSwgc291cmNlTGluZSlcbiAgICAubWFwKChsaW5lKSA9PiBzdHJpbmcuc25pcExpbmUobGluZSwgMCkpO1xuXG4gIC8vIFdlIGd1YXJkIGhlcmUgdG8gZW5zdXJlIHRoaXMgaXMgbm90IGxhcmdlciB0aGFuIHRoZSBleGlzdGluZyBudW1iZXIgb2YgbGluZXNcbiAgY29uc3QgbGluZUluZGV4ID0gTWF0aC5taW4obWF4TGluZXMgLSAxLCBzb3VyY2VMaW5lKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICBmcmFtZS5jb250ZXh0X2xpbmUgPSBzdHJpbmcuc25pcExpbmUobGluZXNbbGluZUluZGV4XSwgZnJhbWUuY29sbm8gfHwgMCk7XG5cbiAgZnJhbWUucG9zdF9jb250ZXh0ID0gbGluZXNcbiAgICAuc2xpY2UoTWF0aC5taW4oc291cmNlTGluZSArIDEsIG1heExpbmVzKSwgc291cmNlTGluZSArIDEgKyBsaW5lc09mQ29udGV4dClcbiAgICAubWFwKChsaW5lKSA9PiBzdHJpbmcuc25pcExpbmUobGluZSwgMCkpO1xufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB3ZSd2ZSBhbHJlYWR5IGNhcHR1cmVkIHRoZSBnaXZlbiBleGNlcHRpb24gKG5vdGU6IG5vdCBhbiBpZGVudGljYWwgZXhjZXB0aW9uIC0gdGhlIHZlcnkgb2JqZWN0XG4gKiBpbiBxdWVzdGlvbiksIGFuZCBtYXJrcyBpdCBjYXB0dXJlZCBpZiBub3QuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgYmVjYXVzZSBpdCdzIHBvc3NpYmxlIGZvciBhbiBlcnJvciB0byBnZXQgY2FwdHVyZWQgYnkgbW9yZSB0aGFuIG9uZSBtZWNoYW5pc20uIEFmdGVyIHdlIGludGVyY2VwdCBhbmRcbiAqIHJlY29yZCBhbiBlcnJvciwgd2UgcmV0aHJvdyBpdCAoYXNzdW1pbmcgd2UndmUgaW50ZXJjZXB0ZWQgaXQgYmVmb3JlIGl0J3MgcmVhY2hlZCB0aGUgdG9wLWxldmVsIGdsb2JhbCBoYW5kbGVycyksIHNvXG4gKiB0aGF0IHdlIGRvbid0IGludGVyZmVyZSB3aXRoIHdoYXRldmVyIGVmZmVjdHMgdGhlIGVycm9yIG1pZ2h0IGhhdmUgaGFkIHdlcmUgdGhlIFNESyBub3QgdGhlcmUuIEF0IHRoYXQgcG9pbnQsIGJlY2F1c2VcbiAqIHRoZSBlcnJvciBoYXMgYmVlbiByZXRocm93biwgaXQncyBwb3NzaWJsZSBmb3IgaXQgdG8gYnViYmxlIHVwIHRvIHNvbWUgb3RoZXIgY29kZSB3ZSd2ZSBpbnN0cnVtZW50ZWQuIElmIGl0J3Mgbm90XG4gKiBjYXVnaHQgYWZ0ZXIgdGhhdCwgaXQgd2lsbCBidWJibGUgYWxsIHRoZSB3YXkgdXAgdG8gdGhlIGdsb2JhbCBoYW5kbGVycyAod2hpY2ggb2YgY291cnNlIHdlIGFsc28gaW5zdHJ1bWVudCkuIFRoaXNcbiAqIGZ1bmN0aW9uIGhlbHBzIHVzIGVuc3VyZSB0aGF0IGV2ZW4gaWYgd2UgZW5jb3VudGVyIHRoZSBzYW1lIGVycm9yIG1vcmUgdGhhbiBvbmNlLCB3ZSBvbmx5IHJlY29yZCBpdCB0aGUgZmlyc3QgdGltZSB3ZVxuICogc2VlIGl0LlxuICpcbiAqIE5vdGU6IEl0IHdpbGwgaWdub3JlIHByaW1pdGl2ZXMgKGFsd2F5cyByZXR1cm4gYGZhbHNlYCBhbmQgbm90IG1hcmsgdGhlbSBhcyBzZWVuKSwgYXMgcHJvcGVydGllcyBjYW4ndCBiZSBzZXQgb25cbiAqIHRoZW0uIHtAbGluazogT2JqZWN0Lm9iamVjdGlmeX0gY2FuIGJlIHVzZWQgb24gZXhjZXB0aW9ucyB0byBjb252ZXJ0IGFueSB0aGF0IGFyZSBwcmltaXRpdmVzIGludG8gdGhlaXIgZXF1aXZhbGVudFxuICogb2JqZWN0IHdyYXBwZXIgZm9ybXMgc28gdGhhdCB0aGlzIGNoZWNrIHdpbGwgYWx3YXlzIHdvcmsuIEhvd2V2ZXIsIGJlY2F1c2Ugd2UgbmVlZCB0byBmbGFnIHRoZSBleGFjdCBvYmplY3Qgd2hpY2hcbiAqIHdpbGwgZ2V0IHJldGhyb3duLCBhbmQgYmVjYXVzZSB0aGF0IHJldGhyb3dpbmcgaGFwcGVucyBvdXRzaWRlIG9mIHRoZSBldmVudCBwcm9jZXNzaW5nIHBpcGVsaW5lLCB0aGUgb2JqZWN0aWZpY2F0aW9uXG4gKiBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSBleGNlcHRpb24gY2FwdHVyZWQuXG4gKlxuICogQHBhcmFtIEEgdGhyb3duIGV4Y2VwdGlvbiB0byBjaGVjayBvciBmbGFnIGFzIGhhdmluZyBiZWVuIHNlZW5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgZXhjZXB0aW9uIGhhcyBhbHJlYWR5IGJlZW4gY2FwdHVyZWQsIGBmYWxzZWAgaWYgbm90ICh3aXRoIHRoZSBzaWRlIGVmZmVjdCBvZiBtYXJraW5nIGl0IHNlZW4pXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT3JTZXRBbHJlYWR5Q2F1Z2h0KGV4Y2VwdGlvbikge1xuICBpZiAoaXNBbHJlYWR5Q2FwdHVyZWQoZXhjZXB0aW9uKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBzZXQgaXQgdGhpcyB3YXkgcmF0aGVyIHRoYW4gYnkgYXNzaWdubWVudCBzbyB0aGF0IGl0J3Mgbm90IGVubnVtZXJhYmxlIGFuZCB0aGVyZWZvcmUgaXNuJ3QgcmVjb3JkZWQgYnkgdGhlXG4gICAgLy8gYEV4dHJhRXJyb3JEYXRhYCBpbnRlZ3JhdGlvblxuICAgIG9iamVjdC5hZGROb25FbnVtZXJhYmxlUHJvcGVydHkoZXhjZXB0aW9uICwgJ19fc2VudHJ5X2NhcHR1cmVkX18nLCB0cnVlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gYGV4Y2VwdGlvbmAgaXMgYSBwcmltaXRpdmUsIHNvIHdlIGNhbid0IG1hcmsgaXQgc2VlblxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0FscmVhZHlDYXB0dXJlZChleGNlcHRpb24pIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gKGV4Y2VwdGlvbiApLl9fc2VudHJ5X2NhcHR1cmVkX187XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbn1cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gaW5wdXQgaXMgYWxyZWFkeSBhbiBhcnJheSwgYW5kIGlmIGl0IGlzbid0LCB3cmFwcyBpdCBpbiBvbmUuXG4gKlxuICogQHBhcmFtIG1heWJlQXJyYXkgSW5wdXQgdG8gdHVybiBpbnRvIGFuIGFycmF5LCBpZiBuZWNlc3NhcnlcbiAqIEByZXR1cm5zIFRoZSBpbnB1dCwgaWYgYWxyZWFkeSBhbiBhcnJheSwgb3IgYW4gYXJyYXkgd2l0aCB0aGUgaW5wdXQgYXMgdGhlIG9ubHkgZWxlbWVudCwgaWYgbm90XG4gKlxuICogQGRlcHJlY2F0ZWQgVGhpcyBmdW5jdGlvbiBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIG5vdCBiZSByZXBsYWNlZC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlpZnkobWF5YmVBcnJheSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXliZUFycmF5KSA/IG1heWJlQXJyYXkgOiBbbWF5YmVBcnJheV07XG59XG5cbmV4cG9ydHMuYWRkQ29udGV4dFRvRnJhbWUgPSBhZGRDb250ZXh0VG9GcmFtZTtcbmV4cG9ydHMuYWRkRXhjZXB0aW9uTWVjaGFuaXNtID0gYWRkRXhjZXB0aW9uTWVjaGFuaXNtO1xuZXhwb3J0cy5hZGRFeGNlcHRpb25UeXBlVmFsdWUgPSBhZGRFeGNlcHRpb25UeXBlVmFsdWU7XG5leHBvcnRzLmFycmF5aWZ5ID0gYXJyYXlpZnk7XG5leHBvcnRzLmNoZWNrT3JTZXRBbHJlYWR5Q2F1Z2h0ID0gY2hlY2tPclNldEFscmVhZHlDYXVnaHQ7XG5leHBvcnRzLmdldEV2ZW50RGVzY3JpcHRpb24gPSBnZXRFdmVudERlc2NyaXB0aW9uO1xuZXhwb3J0cy5wYXJzZVNlbXZlciA9IHBhcnNlU2VtdmVyO1xuZXhwb3J0cy51dWlkNCA9IHV1aWQ0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlzYy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm9iamVjdCIsInJlcXVpcmUiLCJzdHJpbmciLCJ3b3JsZHdpZGUiLCJ1dWlkNCIsImdibCIsIkdMT0JBTF9PQkoiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbUJ5dGUiLCJNYXRoIiwicmFuZG9tIiwicmFuZG9tVVVJRCIsInJlcGxhY2UiLCJnZXRSYW5kb21WYWx1ZXMiLCJ0eXBlZEFycmF5IiwiVWludDhBcnJheSIsIl8iLCJjIiwidG9TdHJpbmciLCJnZXRGaXJzdEV4Y2VwdGlvbiIsImV2ZW50IiwiZXhjZXB0aW9uIiwidmFsdWVzIiwidW5kZWZpbmVkIiwiZ2V0RXZlbnREZXNjcmlwdGlvbiIsIm1lc3NhZ2UiLCJldmVudF9pZCIsImV2ZW50SWQiLCJmaXJzdEV4Y2VwdGlvbiIsInR5cGUiLCJhZGRFeGNlcHRpb25UeXBlVmFsdWUiLCJhZGRFeGNlcHRpb25NZWNoYW5pc20iLCJuZXdNZWNoYW5pc20iLCJkZWZhdWx0TWVjaGFuaXNtIiwiaGFuZGxlZCIsImN1cnJlbnRNZWNoYW5pc20iLCJtZWNoYW5pc20iLCJtZXJnZWREYXRhIiwiZGF0YSIsIlNFTVZFUl9SRUdFWFAiLCJfcGFyc2VJbnQiLCJpbnB1dCIsInBhcnNlSW50IiwicGFyc2VTZW12ZXIiLCJtYXRjaCIsIm1ham9yIiwibWlub3IiLCJwYXRjaCIsImJ1aWxkbWV0YWRhdGEiLCJpc05hTiIsInByZXJlbGVhc2UiLCJhZGRDb250ZXh0VG9GcmFtZSIsImxpbmVzIiwiZnJhbWUiLCJsaW5lc09mQ29udGV4dCIsImxpbmVubyIsIm1heExpbmVzIiwibGVuZ3RoIiwic291cmNlTGluZSIsIm1heCIsIm1pbiIsInByZV9jb250ZXh0Iiwic2xpY2UiLCJtYXAiLCJsaW5lIiwic25pcExpbmUiLCJsaW5lSW5kZXgiLCJjb250ZXh0X2xpbmUiLCJjb2xubyIsInBvc3RfY29udGV4dCIsImNoZWNrT3JTZXRBbHJlYWR5Q2F1Z2h0IiwiaXNBbHJlYWR5Q2FwdHVyZWQiLCJhZGROb25FbnVtZXJhYmxlUHJvcGVydHkiLCJlcnIiLCJfX3NlbnRyeV9jYXB0dXJlZF9fIiwiZSIsImFycmF5aWZ5IiwibWF5YmVBcnJheSIsIkFycmF5IiwiaXNBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\n\n/**\n * Does this filename look like it's part of the app code?\n */\nfunction filenameIsInApp(filename, isNative = false) {\n  const isInternal = isNative || filename &&\n  // It's not internal if it's an absolute linux path\n  !filename.startsWith('/') &&\n  // It's not internal if it's an absolute windows path\n  !filename.match(/^[A-Z]:/) &&\n  // It's not internal if the path is starting with a dot\n  !filename.startsWith('.') &&\n  // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n  !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\nfunction node(getModule) {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return line => {\n    const lineMatch = line.match(FULL_MATCH);\n    if (lineMatch) {\n      let object;\n      let method;\n      let functionName;\n      let typeName;\n      let methodName;\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n      if (functionName === undefined) {\n        methodName = methodName || stacktrace.UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n      let filename = lineMatch[2] && lineMatch[2].startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename && filename.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative)\n      };\n    }\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line\n      };\n    }\n    return undefined;\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nfunction nodeStackLineParser(getModule) {\n  return [90, node(getModule)];\n}\nfunction _parseIntOrUndefined(input) {\n  return parseInt(input || '', 10) || undefined;\n}\nexports.filenameIsInApp = filenameIsInApp;\nexports.node = node;\nexports.nodeStackLineParser = nodeStackLineParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/node.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst env = __webpack_require__(/*! ./env.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/env.js\");\n\n/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nfunction isNodeEnv() {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return !env.isBrowserBundle() && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n * @deprecated This function will be removed in the next major version.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction dynamicRequire(mod, request) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nfunction loadModule(moduleName) {\n  let mod;\n  try {\n    // eslint-disable-next-line deprecation/deprecation\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n  if (!mod) {\n    try {\n      // eslint-disable-next-line deprecation/deprecation\n      const {\n        cwd\n      } = dynamicRequire(module, 'process');\n      // eslint-disable-next-line deprecation/deprecation\n      mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`);\n    } catch (e) {\n      // no-empty\n    }\n  }\n  return mod;\n}\nexports.dynamicRequire = dynamicRequire;\nexports.isNodeEnv = isNodeEnv;\nexports.loadModule = loadModule;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvbm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxHQUFHLEdBQUdDLG1CQUFPLENBQUMsdUZBQVUsQ0FBQzs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFNBQVNBLENBQUEsRUFBRztFQUNuQjtFQUNBO0VBQ0EsT0FDRSxDQUFDRixHQUFHLENBQUNHLGVBQWUsQ0FBQyxDQUFDLElBQ3RCUCxNQUFNLENBQUNRLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUMsT0FBT0MsT0FBTyxLQUFLLFdBQVcsR0FBR0EsT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLGtCQUFrQjtBQUV2Rzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGNBQWNBLENBQUNDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO0VBQ3BDO0VBQ0EsT0FBT0QsR0FBRyxDQUFDUixPQUFPLENBQUNTLE9BQU8sQ0FBQztBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFVBQVVBLENBQUNDLFVBQVUsRUFBRTtFQUM5QixJQUFJSCxHQUFHO0VBRVAsSUFBSTtJQUNGO0lBQ0FBLEdBQUcsR0FBR0QsY0FBYyxDQUFDSyxNQUFNLEVBQUVELFVBQVUsQ0FBQztFQUMxQyxDQUFDLENBQUMsT0FBT0UsQ0FBQyxFQUFFO0lBQ1Y7RUFBQTtFQUdGLElBQUksQ0FBQ0wsR0FBRyxFQUFFO0lBQ1IsSUFBSTtNQUNGO01BQ0EsTUFBTTtRQUFFTTtNQUFJLENBQUMsR0FBR1AsY0FBYyxDQUFDSyxNQUFNLEVBQUUsU0FBUyxDQUFDO01BQ2pEO01BQ0FKLEdBQUcsR0FBR0QsY0FBYyxDQUFDSyxNQUFNLEVBQUcsR0FBRUUsR0FBRyxDQUFDLENBQUUsaUJBQWdCSCxVQUFXLEVBQUMsQ0FBQztJQUNyRSxDQUFDLENBQUMsT0FBT0UsQ0FBQyxFQUFFO01BQ1Y7SUFBQTtFQUVKO0VBRUEsT0FBT0wsR0FBRztBQUNaO0FBRUFYLHNCQUFzQixHQUFHVSxjQUFjO0FBQ3ZDVixpQkFBaUIsR0FBR0ksU0FBUztBQUM3Qkosa0JBQWtCLEdBQUdhLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvbm9kZS5qcz9jNzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGVudiA9IHJlcXVpcmUoJy4vZW52LmpzJyk7XG5cbi8qKlxuICogTk9URTogSW4gb3JkZXIgdG8gYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLCBpZiB5b3UgYWRkIGEgZnVuY3Rpb24gdG8gdGhpcyBtb2R1bGUgYW5kIGl0IG5lZWRzIHRvIHByaW50IHNvbWV0aGluZyxcbiAqIHlvdSBtdXN0IGVpdGhlciBhKSB1c2UgYGNvbnNvbGUubG9nYCByYXRoZXIgdGhhbiB0aGUgbG9nZ2VyLCBvciBiKSBwdXQgeW91ciBmdW5jdGlvbiBlbHNld2hlcmUuXG4gKi9cblxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHdlJ3JlIGluIHRoZSBOb2RlLmpzIG9yIEJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gZ2l2ZW4gcXVlc3Rpb25cbiAqL1xuZnVuY3Rpb24gaXNOb2RlRW52KCkge1xuICAvLyBleHBsaWNpdGx5IGNoZWNrIGZvciBicm93c2VyIGJ1bmRsZXMgYXMgdGhvc2UgY2FuIGJlIG9wdGltaXplZCBzdGF0aWNhbGx5XG4gIC8vIGJ5IHRlcnNlci9yb2xsdXAuXG4gIHJldHVybiAoXG4gICAgIWVudi5pc0Jyb3dzZXJCdW5kbGUoKSAmJlxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9jZXNzIDogMCkgPT09ICdbb2JqZWN0IHByb2Nlc3NdJ1xuICApO1xufVxuXG4vKipcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIHdoaWNoIGlzIHByb3RlY3RlZCBhZ2FpbnN0IGJ1bmRsZXIgbWluaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IFRoZSBtb2R1bGUgcGF0aCB0byByZXNvbHZlXG4gKiBAZGVwcmVjYXRlZCBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gZHluYW1pY1JlcXVpcmUobW9kLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbiAgcmV0dXJuIG1vZC5yZXF1aXJlKHJlcXVlc3QpO1xufVxuXG4vKipcbiAqIEhlbHBlciBmb3IgZHluYW1pY2FsbHkgbG9hZGluZyBtb2R1bGUgdGhhdCBzaG91bGQgd29yayB3aXRoIGxpbmtlZCBkZXBlbmRlbmNpZXMuXG4gKiBUaGUgcHJvYmxlbSBpcyB0aGF0IHdlIF9zaG91bGRfIGJlIHVzaW5nIGByZXF1aXJlKHJlcXVpcmUucmVzb2x2ZShtb2R1bGVOYW1lLCB7IHBhdGhzOiBbY3dkKCldIH0pKWBcbiAqIEhvd2V2ZXIgaXQncyBfbm90IHBvc3NpYmxlXyB0byBkbyB0aGF0IHdpdGggV2VicGFjaywgYXMgaXQgaGFzIHRvIGtub3cgYWxsIHRoZSBkZXBlbmRlbmNpZXMgZHVyaW5nXG4gKiBidWlsZCB0aW1lLiBgcmVxdWlyZS5yZXNvbHZlYCBpcyBhbHNvIG5vdCBhdmFpbGFibGUgaW4gYW55IG90aGVyIHdheSwgc28gd2UgY2Fubm90IGNyZWF0ZSxcbiAqIGEgZmFrZSBoZWxwZXIgbGlrZSB3ZSBkbyB3aXRoIGBkeW5hbWljUmVxdWlyZWAuXG4gKlxuICogV2UgYWx3YXlzIHByZWZlciB0byB1c2UgbG9jYWwgcGFja2FnZSwgdGh1cyB0aGUgdmFsdWUgaXMgbm90IHJldHVybmVkIGVhcmx5IGZyb20gZWFjaCBgdHJ5L2NhdGNoYCBibG9jay5cbiAqIFRoYXQgaXMgdG8gbWltaWMgdGhlIGJlaGF2aW9yIG9mIGByZXF1aXJlLnJlc29sdmVgIGV4YWN0bHkuXG4gKlxuICogQHBhcmFtIG1vZHVsZU5hbWUgbW9kdWxlIG5hbWUgdG8gcmVxdWlyZVxuICogQHJldHVybnMgcG9zc2libHkgcmVxdWlyZWQgbW9kdWxlXG4gKi9cbmZ1bmN0aW9uIGxvYWRNb2R1bGUobW9kdWxlTmFtZSkge1xuICBsZXQgbW9kO1xuXG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgbW9kID0gZHluYW1pY1JlcXVpcmUobW9kdWxlLCBtb2R1bGVOYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vLWVtcHR5XG4gIH1cblxuICBpZiAoIW1vZCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgIGNvbnN0IHsgY3dkIH0gPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICdwcm9jZXNzJyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgIG1vZCA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgYCR7Y3dkKCl9L25vZGVfbW9kdWxlcy8ke21vZHVsZU5hbWV9YCkgO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vLWVtcHR5XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1vZDtcbn1cblxuZXhwb3J0cy5keW5hbWljUmVxdWlyZSA9IGR5bmFtaWNSZXF1aXJlO1xuZXhwb3J0cy5pc05vZGVFbnYgPSBpc05vZGVFbnY7XG5leHBvcnRzLmxvYWRNb2R1bGUgPSBsb2FkTW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudiIsInJlcXVpcmUiLCJpc05vZGVFbnYiLCJpc0Jyb3dzZXJCdW5kbGUiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJwcm9jZXNzIiwiZHluYW1pY1JlcXVpcmUiLCJtb2QiLCJyZXF1ZXN0IiwibG9hZE1vZHVsZSIsIm1vZHVsZU5hbWUiLCJtb2R1bGUiLCJlIiwiY3dkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/node.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst memo = __webpack_require__(/*! ./memo.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/memo.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst stacktrace = __webpack_require__(/*! ./stacktrace.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\");\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normalized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return {\n      ERROR: `**non-serializable** (${err})`\n    };\n  }\n}\n\n/** JSDoc */\nfunction normalizeToSize(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobject,\n// Default Node.js REPL depth\ndepth = 3,\n// 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize = 100 * 1024) {\n  const normalized = normalize(object, depth);\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n  return normalized;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(key, value, depth = +Infinity, maxProperties = +Infinity,\n// eslint-disable-next-line deprecation/deprecation\nmemo$1 = memo.memoBuilder()) {\n  const [memoize, unmemoize] = memo$1;\n\n  // Get the simple cases out of the way first\n  if (value == null ||\n  // this matches null and undefined -> eqeq not eqeqeq\n  ['boolean', 'string'].includes(typeof value) || typeof value === 'number' && Number.isFinite(value)) {\n    return value;\n  }\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if (value['__sentry_skip_normalization__']) {\n    return value;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth = typeof value['__sentry_override_normalization_depth__'] === 'number' ? value['__sentry_override_normalization_depth__'] : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value;\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo$1);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = Array.isArray(value) ? [] : {};\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = object.convertToPlainObject(value);\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo$1);\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(key,\n// this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && value._events) {\n      return '[Domain]';\n    }\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof __webpack_require__.g !== 'undefined' && value === __webpack_require__.g) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (false) {}\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n    if (is.isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (is.isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n    if (typeof value === 'number' && !Number.isFinite(value)) {\n      return `[${value}]`;\n    }\n    if (typeof value === 'function') {\n      return `[Function: ${stacktrace.getFunctionName(value)}]`;\n    }\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value) {\n  const prototype = Object.getPrototypeOf(value);\n  return prototype ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nfunction normalizeUrlToBase(url, basePath) {\n  const escapedBase = basePath\n  // Backslash to forward\n  .replace(/\\\\/g, '/')\n  // Escape RegExp special characters\n  .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return newUrl.replace(/\\\\/g, '/').replace(/webpack:\\/?/g, '') // Remove intermediate base path\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n  .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///');\n}\nexports.normalize = normalize;\nexports.normalizeToSize = normalizeToSize;\nexports.normalizeUrlToBase = normalizeUrlToBase;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/object.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst browser = __webpack_require__(/*! ./browser.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/browser.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nfunction fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n  const original = source[name];\n  const wrapped = replacementFactory(original);\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n  try {\n    source[name] = wrapped;\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nfunction addNonEnumerableProperty(obj, name, value) {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true\n    });\n  } catch (o_O) {\n    debugBuild.DEBUG_BUILD && logger.logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nfunction markFunctionWrapped(wrapped, original) {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch (o_O) {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getOriginalFunction(func) {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n *\n * @deprecated This function is deprecated and will be removed in the next major version of the SDK.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction urlEncode(object) {\n  return Object.entries(object).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nfunction convertToPlainObject(value) {\n  if (is.isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value)\n    };\n  } else if (is.isEvent(value)) {\n    const newObj = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value)\n    };\n    if (typeof CustomEvent !== 'undefined' && is.isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target) {\n  try {\n    return is.isElement(target) ? browser.htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj) {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = obj[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception, maxLength = 40) {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n  const firstKey = keys[0];\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n  if (firstKey.length >= maxLength) {\n    return string.truncate(firstKey, maxLength);\n  }\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return string.truncate(serialized, maxLength);\n  }\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nfunction dropUndefinedKeys(inputValue) {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n  if (isPojo(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal;\n    }\n    const returnValue = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n    for (const key of Object.getOwnPropertyNames(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n    return returnValue;\n  }\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal;\n    }\n    const returnValue = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n    inputValue.forEach(item => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n    return returnValue;\n  }\n  return inputValue;\n}\nfunction isPojo(input) {\n  if (!is.isPlainObject(input)) {\n    return false;\n  }\n  try {\n    const name = Object.getPrototypeOf(input).constructor.name;\n    return !name || name === 'Object';\n  } catch (e2) {\n    return true;\n  }\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nfunction objectify(wat) {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case is.isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new wat.constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\nexports.addNonEnumerableProperty = addNonEnumerableProperty;\nexports.convertToPlainObject = convertToPlainObject;\nexports.dropUndefinedKeys = dropUndefinedKeys;\nexports.extractExceptionKeysForMessage = extractExceptionKeysForMessage;\nexports.fill = fill;\nexports.getOriginalFunction = getOriginalFunction;\nexports.markFunctionWrapped = markFunctionWrapped;\nexports.objectify = objectify;\nexports.urlEncode = urlEncode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/path.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/path.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js\n//\n// Copyright Joyent, Inc.and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\S+:\\\\|\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^/\\\\]+?|)(\\.[^./\\\\]*|))(?:[/\\\\]*)$/;\n/** JSDoc */\nfunction splitPath(filename) {\n  // Truncate files names greater than 1024 characters to avoid regex dos\n  // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172\n  const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;\n  const parts = splitPathRe.exec(truncated);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nfunction resolve(...args) {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(p => !!p), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr) {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nfunction relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).slice(1);\n  to = resolve(to).slice(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nfunction normalizePath(path) {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.slice(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(path.split('/').filter(p => !!p), !isPathAbsolute).join('/');\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nfunction isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nfunction join(...args) {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nfunction dirname(path) {\n  const result = splitPath(path);\n  const root = result[0] || '';\n  let dir = result[1];\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.slice(0, dir.length - 1);\n  }\n  return root + dir;\n}\n\n/** JSDoc */\nfunction basename(path, ext) {\n  let f = splitPath(path)[2] || '';\n  if (ext && f.slice(ext.length * -1) === ext) {\n    f = f.slice(0, f.length - ext.length);\n  }\n  return f;\n}\nexports.basename = basename;\nexports.dirname = dirname;\nexports.isAbsolute = isAbsolute;\nexports.join = join;\nexports.normalizePath = normalizePath;\nexports.relative = relative;\nexports.resolve = resolve;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/path.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst error = __webpack_require__(/*! ./error.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/error.js\");\nconst syncpromise = __webpack_require__(/*! ./syncpromise.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\");\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nfunction makePromiseBuffer(limit) {\n  const buffer = [];\n  function isReady() {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task) {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer) {\n    if (!isReady()) {\n      return syncpromise.rejectedSyncPromise(new error.SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task.then(() => remove(task))\n    // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n    // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n    // have promises, so TS has to polyfill when down-compiling.)\n    .then(null, () => remove(task).then(null, () => {\n      // We have to add another catch here because `remove()` starts a new promise chain.\n    }));\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout) {\n    return new syncpromise.SyncPromise((resolve, reject) => {\n      let counter = buffer.length;\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void syncpromise.resolvedSyncPromise(item).then(() => {\n          if (! --counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n  return {\n    $: buffer,\n    add,\n    drain\n  };\n}\nexports.makePromiseBuffer = makePromiseBuffer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst misc = __webpack_require__(/*! ./misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\n\n/**\n * Returns a new minimal propagation context.\n *\n * @deprecated Use `generateTraceId` and `generateSpanId` instead.\n */\nfunction generatePropagationContext() {\n  return {\n    traceId: generateTraceId(),\n    spanId: generateSpanId()\n  };\n}\n\n/**\n * Generate a random, valid trace ID.\n */\nfunction generateTraceId() {\n  return misc.uuid4();\n}\n\n/**\n * Generate a random, valid span ID.\n */\nfunction generateSpanId() {\n  return misc.uuid4().substring(16);\n}\nexports.generatePropagationContext = generatePropagationContext;\nexports.generateSpanId = generateSpanId;\nexports.generateTraceId = generateTraceId;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvcHJvcGFnYXRpb25Db250ZXh0LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLHlGQUFXLENBQUM7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQywwQkFBMEJBLENBQUEsRUFBRztFQUNwQyxPQUFPO0lBQ0xDLE9BQU8sRUFBRUMsZUFBZSxDQUFDLENBQUM7SUFDMUJDLE1BQU0sRUFBRUMsY0FBYyxDQUFDO0VBQ3pCLENBQUM7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRixlQUFlQSxDQUFBLEVBQUc7RUFDekIsT0FBT0osSUFBSSxDQUFDTyxLQUFLLENBQUMsQ0FBQztBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRCxjQUFjQSxDQUFBLEVBQUc7RUFDeEIsT0FBT04sSUFBSSxDQUFDTyxLQUFLLENBQUMsQ0FBQyxDQUFDQyxTQUFTLENBQUMsRUFBRSxDQUFDO0FBQ25DO0FBRUFWLGtDQUFrQyxHQUFHSSwwQkFBMEI7QUFDL0RKLHNCQUFzQixHQUFHUSxjQUFjO0FBQ3ZDUix1QkFBdUIsR0FBR00sZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC9wcm9wYWdhdGlvbkNvbnRleHQuanM/YWQ4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBtaXNjID0gcmVxdWlyZSgnLi9taXNjLmpzJyk7XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBtaW5pbWFsIHByb3BhZ2F0aW9uIGNvbnRleHQuXG4gKlxuICogQGRlcHJlY2F0ZWQgVXNlIGBnZW5lcmF0ZVRyYWNlSWRgIGFuZCBgZ2VuZXJhdGVTcGFuSWRgIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUHJvcGFnYXRpb25Db250ZXh0KCkge1xuICByZXR1cm4ge1xuICAgIHRyYWNlSWQ6IGdlbmVyYXRlVHJhY2VJZCgpLFxuICAgIHNwYW5JZDogZ2VuZXJhdGVTcGFuSWQoKSxcbiAgfTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSwgdmFsaWQgdHJhY2UgSUQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlVHJhY2VJZCgpIHtcbiAgcmV0dXJuIG1pc2MudXVpZDQoKTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHJhbmRvbSwgdmFsaWQgc3BhbiBJRC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVTcGFuSWQoKSB7XG4gIHJldHVybiBtaXNjLnV1aWQ0KCkuc3Vic3RyaW5nKDE2KTtcbn1cblxuZXhwb3J0cy5nZW5lcmF0ZVByb3BhZ2F0aW9uQ29udGV4dCA9IGdlbmVyYXRlUHJvcGFnYXRpb25Db250ZXh0O1xuZXhwb3J0cy5nZW5lcmF0ZVNwYW5JZCA9IGdlbmVyYXRlU3BhbklkO1xuZXhwb3J0cy5nZW5lcmF0ZVRyYWNlSWQgPSBnZW5lcmF0ZVRyYWNlSWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wYWdhdGlvbkNvbnRleHQuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtaXNjIiwicmVxdWlyZSIsImdlbmVyYXRlUHJvcGFnYXRpb25Db250ZXh0IiwidHJhY2VJZCIsImdlbmVyYXRlVHJhY2VJZCIsInNwYW5JZCIsImdlbmVyYXRlU3BhbklkIiwidXVpZDQiLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nconst DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header, now = Date.now()) {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nfunction disabledUntil(limits, dataCategory) {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, dataCategory, now = Date.now()) {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nfunction updateRateLimits(limits, {\n  statusCode,\n  headers\n}, now = Date.now()) {\n  const updatedRateLimits = {\n    ...limits\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories,,, namespaces] = limit.split(':', 5);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n  return updatedRateLimits;\n}\nexports.DEFAULT_RETRY_AFTER = DEFAULT_RETRY_AFTER;\nexports.disabledUntil = disabledUntil;\nexports.isRateLimited = isRateLimited;\nexports.parseRetryAfterHeader = parseRetryAfterHeader;\nexports.updateRateLimits = updateRateLimits;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst cookie = __webpack_require__(/*! ./cookie.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/cookie.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\nconst logger = __webpack_require__(/*! ./logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst normalize = __webpack_require__(/*! ./normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst object = __webpack_require__(/*! ./object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst string = __webpack_require__(/*! ./string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst url = __webpack_require__(/*! ./url.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/url.js\");\nconst getIpAddress = __webpack_require__(/*! ./vendor/getIpAddress.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/getIpAddress.js\");\nconst DEFAULT_INCLUDES = {\n  ip: false,\n  request: true,\n  user: true\n};\nconst DEFAULT_REQUEST_INCLUDES = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\nconst DEFAULT_USER_INCLUDES = ['id', 'username', 'email'];\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\n\n/**\n * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.\n * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.\n *\n * Additionally, this function determines and returns the transaction name source\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req A request object\n * @param options What to include in the transaction name (method, path, or a custom route name to be\n *                used instead of the request's route)\n *\n * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')\n * @deprecated This method will be removed in v9. It is not in use anymore.\n */\nfunction extractPathForTransaction(req, options = {}) {\n  const method = req.method && req.method.toUpperCase();\n  let path = '';\n  let source = 'url';\n\n  // Check to see if there's a parameterized route we can use (as there is in Express)\n  if (options.customRoute || req.route) {\n    path = options.customRoute || `${req.baseUrl || ''}${req.route && req.route.path}`;\n    source = 'route';\n  }\n\n  // Otherwise, just take the original URL\n  else if (req.originalUrl || req.url) {\n    path = url.stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n  let name = '';\n  if (options.method && method) {\n    name += method;\n  }\n  if (options.method && options.path) {\n    name += ' ';\n  }\n  if (options.path && path) {\n    name += path;\n  }\n  return [name, source];\n}\nfunction extractUserData(user, keys) {\n  const extractedUser = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;\n  attributes.forEach(key => {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n  return extractedUser;\n}\n\n/**\n * Normalize data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param options.include An optional array of keys to include in the normalized data. Defaults to\n * DEFAULT_REQUEST_INCLUDES if not provided.\n * @param options.deps Injected, platform-specific dependencies\n * @returns An object containing normalized request data\n *\n * @deprecated Instead manually normalize the request data into a format that fits `addNormalizedRequestDataToEvent`.\n */\nfunction extractRequestData(req, options = {}) {\n  const {\n    include = DEFAULT_REQUEST_INCLUDES\n  } = options;\n  const requestData = {};\n\n  // headers:\n  //   node, express, koa, nextjs: req.headers\n  const headers = req.headers || {};\n  // method:\n  //   node, express, koa, nextjs: req.method\n  const method = req.method;\n  // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node, nextjs: req.headers.host\n  // Express 4 mistakenly strips off port number from req.host / req.hostname so we can't rely on them\n  // See: https://github.com/expressjs/express/issues/3047#issuecomment-236653223\n  // Also: https://github.com/getsentry/sentry-javascript/issues/1917\n  const host = headers.host || req.hostname || req.host || '<no host>';\n  // protocol:\n  //   node, nextjs: <n/a>\n  //   express, koa: req.protocol\n  const protocol = req.protocol === 'https' || req.socket && req.socket.encrypted ? 'https' : 'http';\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  const originalUrl = req.originalUrl || req.url || '';\n  // absolute url\n  const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n  include.forEach(key => {\n    switch (key) {\n      case 'headers':\n        {\n          requestData.headers = headers;\n\n          // Remove the Cookie header in case cookie data should not be included in the event\n          if (!include.includes('cookies')) {\n            delete requestData.headers.cookie;\n          }\n\n          // Remove IP headers in case IP data should not be included in the event\n          if (!include.includes('ip')) {\n            getIpAddress.ipHeaderNames.forEach(ipHeaderName => {\n              // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n              delete requestData.headers[ipHeaderName];\n            });\n          }\n          break;\n        }\n      case 'method':\n        {\n          requestData.method = method;\n          break;\n        }\n      case 'url':\n        {\n          requestData.url = absoluteUrl;\n          break;\n        }\n      case 'cookies':\n        {\n          // cookies:\n          //   node, express, koa: req.headers.cookie\n          //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies\n          requestData.cookies =\n          // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can\n          // come off in v8\n          req.cookies || headers.cookie && cookie.parseCookie(headers.cookie) || {};\n          break;\n        }\n      case 'query_string':\n        {\n          // query string:\n          //   node: req.url (raw)\n          //   express, koa, nextjs: req.query\n          requestData.query_string = extractQueryParams(req);\n          break;\n        }\n      case 'data':\n        {\n          if (method === 'GET' || method === 'HEAD') {\n            break;\n          }\n          // NOTE: As of v8, request is (unless a user sets this manually) ALWAYS a http request\n          // Which does not have a body by default\n          // However, in our http instrumentation, we patch the request to capture the body and store it on the\n          // request as `.body` anyhow\n          // In v9, we may update requestData to only work with plain http requests\n          // body data:\n          //   express, koa, nextjs: req.body\n          //\n          //   when using node by itself, you have to read the incoming stream(see\n          //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know\n          //   where they're going to store the final result, so they'll have to capture this data themselves\n          const body = req.body;\n          if (body !== undefined) {\n            const stringBody = is.isString(body) ? body : is.isPlainObject(body) ? JSON.stringify(normalize.normalize(body)) : string.truncate(`${body}`, 1024);\n            if (stringBody) {\n              requestData.data = stringBody;\n            }\n          }\n          break;\n        }\n      default:\n        {\n          if ({}.hasOwnProperty.call(req, key)) {\n            requestData[key] = req[key];\n          }\n        }\n    }\n  });\n  return requestData;\n}\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(event, req,\n// This is non-standard data that is not part of the regular HTTP request\nadditionalData, options) {\n  const include = {\n    ...DEFAULT_INCLUDES,\n    ...(options && options.include)\n  };\n  if (include.request) {\n    const includeRequest = Array.isArray(include.request) ? [...include.request] : [...DEFAULT_REQUEST_INCLUDES];\n    if (include.ip) {\n      includeRequest.push('ip');\n    }\n    const extractedRequestData = extractNormalizedRequestData(req, {\n      include: includeRequest\n    });\n    event.request = {\n      ...event.request,\n      ...extractedRequestData\n    };\n  }\n  if (include.user) {\n    const extractedUser = additionalData.user && is.isPlainObject(additionalData.user) ? extractUserData(additionalData.user, include.user) : {};\n    if (Object.keys(extractedUser).length) {\n      event.user = {\n        ...extractedUser,\n        ...event.user\n      };\n    }\n  }\n  if (include.ip) {\n    const ip = req.headers && getIpAddress.getClientIPAddress(req.headers) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip\n      };\n    }\n  }\n}\n\n/**\n * Add data from the given request to the given event\n *\n * @param event The event to which the request data will be added\n * @param req Request object\n * @param options.include Flags to control what data is included\n * @param options.deps Injected platform-specific dependencies\n * @returns The mutated `Event` object\n *\n * @deprecated Use `addNormalizedRequestDataToEvent` instead.\n */\nfunction addRequestDataToEvent(event, req, options) {\n  const include = {\n    ...DEFAULT_INCLUDES,\n    ...(options && options.include)\n  };\n  if (include.request) {\n    const includeRequest = Array.isArray(include.request) ? [...include.request] : [...DEFAULT_REQUEST_INCLUDES];\n    if (include.ip) {\n      includeRequest.push('ip');\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    const extractedRequestData = extractRequestData(req, {\n      include: includeRequest\n    });\n    event.request = {\n      ...event.request,\n      ...extractedRequestData\n    };\n  }\n  if (include.user) {\n    const extractedUser = req.user && is.isPlainObject(req.user) ? extractUserData(req.user, include.user) : {};\n    if (Object.keys(extractedUser).length) {\n      event.user = {\n        ...event.user,\n        ...extractedUser\n      };\n    }\n  }\n\n  // client ip:\n  //   node, nextjs: req.socket.remoteAddress\n  //   express, koa: req.ip\n  //   It may also be sent by proxies as specified in X-Forwarded-For or similar headers\n  if (include.ip) {\n    const ip = req.headers && getIpAddress.getClientIPAddress(req.headers) || req.ip || req.socket && req.socket.remoteAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip\n      };\n    }\n  }\n  return event;\n}\nfunction extractQueryParams(req) {\n  // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa, nextjs: req.url\n  let originalUrl = req.originalUrl || req.url || '';\n  if (!originalUrl) {\n    return;\n  }\n\n  // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n  // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.\n  if (originalUrl.startsWith('/')) {\n    originalUrl = `http://dogs.are.great${originalUrl}`;\n  }\n  try {\n    const queryParams = req.query || new URL(originalUrl).search.slice(1);\n    return queryParams.length ? queryParams : undefined;\n  } catch (e2) {\n    return undefined;\n  }\n}\n\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */\n// TODO(v8): Make this function return undefined when the extraction fails.\nfunction winterCGHeadersToDict(winterCGHeaders) {\n  const headers = {};\n  try {\n    winterCGHeaders.forEach((value, key) => {\n      if (typeof value === 'string') {\n        // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n        headers[key] = value;\n      }\n    });\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Sentry failed extracting headers from a request object. If you see this, please file an issue.');\n  }\n  return headers;\n}\n\n/**\n * Convert common request headers to a simple dictionary.\n */\nfunction headersToDict(reqHeaders) {\n  const headers = Object.create(null);\n  try {\n    Object.entries(reqHeaders).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        headers[key] = value;\n      }\n    });\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn('Sentry failed extracting headers from a request object. If you see this, please file an issue.');\n  }\n  return headers;\n}\n\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */\nfunction winterCGRequestToRequestData(req) {\n  const headers = winterCGHeadersToDict(req.headers);\n  return {\n    method: req.method,\n    url: req.url,\n    query_string: extractQueryParamsFromUrl(req.url),\n    headers\n    // TODO: Can we extract body data from the request?\n  };\n}\n\n/**\n * Convert a HTTP request object to RequestEventData to be passed as normalizedRequest.\n * Instead of allowing `PolymorphicRequest` to be passed,\n * we want to be more specific and generally require a http.IncomingMessage-like object.\n */\nfunction httpRequestToRequestData(request) {\n  const headers = request.headers || {};\n  const host = headers.host || '<no host>';\n  const protocol = request.socket && request.socket.encrypted ? 'https' : 'http';\n  const originalUrl = request.url || '';\n  const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;\n\n  // This is non-standard, but may be sometimes set\n  // It may be overwritten later by our own body handling\n  const data = request.body || undefined;\n\n  // This is non-standard, but may be set on e.g. Next.js or Express requests\n  const cookies = request.cookies;\n  return object.dropUndefinedKeys({\n    url: absoluteUrl,\n    method: request.method,\n    query_string: extractQueryParamsFromUrl(originalUrl),\n    headers: headersToDict(headers),\n    cookies,\n    data\n  });\n}\n\n/** Extract the query params from an URL. */\nfunction extractQueryParamsFromUrl(url) {\n  // url is path and query string\n  if (!url) {\n    return;\n  }\n  try {\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname as the base. Since the point here is just to grab the query string, it doesn't matter what we use.\n    const queryParams = new URL(url, 'http://dogs.are.great').search.slice(1);\n    return queryParams.length ? queryParams : undefined;\n  } catch (e3) {\n    return undefined;\n  }\n}\nfunction extractNormalizedRequestData(normalizedRequest, {\n  include\n}) {\n  const includeKeys = include ? Array.isArray(include) ? include : DEFAULT_REQUEST_INCLUDES : [];\n  const requestData = {};\n  const headers = {\n    ...normalizedRequest.headers\n  };\n  if (includeKeys.includes('headers')) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.includes('cookies')) {\n      delete headers.cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.includes('ip')) {\n      getIpAddress.ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete headers[ipHeaderName];\n      });\n    }\n  }\n  if (includeKeys.includes('method')) {\n    requestData.method = normalizedRequest.method;\n  }\n  if (includeKeys.includes('url')) {\n    requestData.url = normalizedRequest.url;\n  }\n  if (includeKeys.includes('cookies')) {\n    const cookies = normalizedRequest.cookies || (headers && headers.cookie ? cookie.parseCookie(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n  if (includeKeys.includes('query_string')) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n  if (includeKeys.includes('data')) {\n    requestData.data = normalizedRequest.data;\n  }\n  return requestData;\n}\nexports.DEFAULT_USER_INCLUDES = DEFAULT_USER_INCLUDES;\nexports.addNormalizedRequestDataToEvent = addNormalizedRequestDataToEvent;\nexports.addRequestDataToEvent = addRequestDataToEvent;\nexports.extractPathForTransaction = extractPathForTransaction;\nexports.extractQueryParamsFromUrl = extractQueryParamsFromUrl;\nexports.extractRequestData = extractRequestData;\nexports.headersToDict = headersToDict;\nexports.httpRequestToRequestData = httpRequestToRequestData;\nexports.winterCGHeadersToDict = winterCGHeadersToDict;\nexports.winterCGRequestToRequestData = winterCGRequestToRequestData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/severity.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/severity.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * @deprecated This variable has been deprecated and will be removed in the next major version.\n */\nconst validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nfunction severityLevelFromString(level) {\n  return level === 'warn' ? 'warning' : ['fatal', 'error', 'warning', 'log', 'info', 'debug'].includes(level) ? level : 'log';\n}\nexports.severityLevelFromString = severityLevelFromString;\nexports.validSeverityLevels = validSeverityLevels;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvc2V2ZXJpdHkuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQzs7QUFFakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsdUJBQXVCQSxDQUFDQyxLQUFLLEVBQUU7RUFDdEMsT0FDRUEsS0FBSyxLQUFLLE1BQU0sR0FBRyxTQUFTLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDQyxRQUFRLENBQUNELEtBQUssQ0FBQyxHQUFHQSxLQUFLLEdBQUcsS0FBSztBQUV4SDtBQUVBSiwrQkFBK0IsR0FBR0csdUJBQXVCO0FBQ3pESCwyQkFBMkIsR0FBR0UsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L3NldmVyaXR5LmpzPzFjMjMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGlzIHZhcmlhYmxlIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICovXG5jb25zdCB2YWxpZFNldmVyaXR5TGV2ZWxzID0gWydmYXRhbCcsICdlcnJvcicsICd3YXJuaW5nJywgJ2xvZycsICdpbmZvJywgJ2RlYnVnJ107XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmctYmFzZWQgbGV2ZWwgaW50byBhIGBTZXZlcml0eUxldmVsYCwgbm9ybWFsaXppbmcgaXQgYWxvbmcgdGhlIHdheS5cbiAqXG4gKiBAcGFyYW0gbGV2ZWwgU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGRlc2lyZWQgYFNldmVyaXR5TGV2ZWxgLlxuICogQHJldHVybnMgVGhlIGBTZXZlcml0eUxldmVsYCBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBzdHJpbmcsIG9yICdsb2cnIGlmIHRoZSBzdHJpbmcgaXNuJ3QgYSB2YWxpZCBsZXZlbC5cbiAqL1xuZnVuY3Rpb24gc2V2ZXJpdHlMZXZlbEZyb21TdHJpbmcobGV2ZWwpIHtcbiAgcmV0dXJuIChcbiAgICBsZXZlbCA9PT0gJ3dhcm4nID8gJ3dhcm5pbmcnIDogWydmYXRhbCcsICdlcnJvcicsICd3YXJuaW5nJywgJ2xvZycsICdpbmZvJywgJ2RlYnVnJ10uaW5jbHVkZXMobGV2ZWwpID8gbGV2ZWwgOiAnbG9nJ1xuICApIDtcbn1cblxuZXhwb3J0cy5zZXZlcml0eUxldmVsRnJvbVN0cmluZyA9IHNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nO1xuZXhwb3J0cy52YWxpZFNldmVyaXR5TGV2ZWxzID0gdmFsaWRTZXZlcml0eUxldmVscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNldmVyaXR5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmFsaWRTZXZlcml0eUxldmVscyIsInNldmVyaXR5TGV2ZWxGcm9tU3RyaW5nIiwibGV2ZWwiLCJpbmNsdWRlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/severity.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst STACKTRACE_FRAME_LIMIT = 50;\nconst UNKNOWN_FUNCTION = '?';\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nfunction createStackParser(...parsers) {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n  return (stack, skipFirstLines = 0, framesToPop = 0) => {\n    const frames = [];\n    const lines = stack.split('\\n');\n    for (let i = skipFirstLines; i < lines.length; i++) {\n      const line = lines[i];\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n      if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n        break;\n      }\n    }\n    return stripSentryFramesAndReverse(frames.slice(framesToPop));\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nfunction stackParserFromStackParserOptions(stackParser) {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nfunction stripSentryFramesAndReverse(stack) {\n  if (!stack.length) {\n    return [];\n  }\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the hub itself, making it:\n    //\n    //   Sentry.captureException()\n    //   getCurrentHub().captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n    }\n  }\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || getLastStackFrame(localStack).filename,\n    function: frame.function || UNKNOWN_FUNCTION\n  }));\n}\nfunction getLastStackFrame(arr) {\n  return arr[arr.length - 1] || {};\n}\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nfunction getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Get's stack frames from an event without needing to check for undefined properties.\n */\nfunction getFramesFromEvent(event) {\n  const exception = event.exception;\n  if (exception) {\n    const frames = [];\n    try {\n      // @ts-expect-error Object could be undefined\n      exception.values.forEach(value => {\n        // @ts-expect-error Value could be undefined\n        if (value.stacktrace.frames) {\n          // @ts-expect-error Value could be undefined\n          frames.push(...value.stacktrace.frames);\n        }\n      });\n      return frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\nexports.UNKNOWN_FUNCTION = UNKNOWN_FUNCTION;\nexports.createStackParser = createStackParser;\nexports.getFramesFromEvent = getFramesFromEvent;\nexports.getFunctionName = getFunctionName;\nexports.stackParserFromStackParserOptions = stackParserFromStackParserOptions;\nexports.stripSentryFramesAndReverse = stripSentryFramesAndReverse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/string.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nfunction truncate(str, max = 0) {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nfunction snipLine(line, colno) {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nfunction safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (is.isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nfunction isMatchingPattern(value, pattern, requireExactStringMatch = false) {\n  if (!is.isString(value)) {\n    return false;\n  }\n  if (is.isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (is.isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nfunction stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\nexports.isMatchingPattern = isMatchingPattern;\nexports.safeJoin = safeJoin;\nexports.snipLine = snipLine;\nexports.stringMatchesSomePattern = stringMatchesSomePattern;\nexports.truncate = truncate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/supports.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/supports.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ./logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst WINDOW = worldwide.GLOBAL_OBJ;\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsFetch() {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * isNative checks if the given function is a native implementation\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFunction(func) {\n  return func && /^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nfunction supportsNativeFetch() {\n  if (true) {\n    return true;\n  }\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFunction(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof doc.createElement === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFunction(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      debugBuild.DEBUG_BUILD && logger.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReportingObserver() {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin'\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nexports.isNativeFunction = isNativeFunction;\nexports.supportsDOMError = supportsDOMError;\nexports.supportsDOMException = supportsDOMException;\nexports.supportsErrorEvent = supportsErrorEvent;\nexports.supportsFetch = supportsFetch;\nexports.supportsNativeFetch = supportsNativeFetch;\nexports.supportsReferrerPolicy = supportsReferrerPolicy;\nexports.supportsReportingObserver = supportsReportingObserver;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/supports.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ./is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** SyncPromise internal states */\nvar States;\n(function (States) {\n  /** Pending */\n  const PENDING = 0;\n  States[States[\"PENDING\"] = PENDING] = \"PENDING\";\n  /** Resolved / OK */\n  const RESOLVED = 1;\n  States[States[\"RESOLVED\"] = RESOLVED] = \"RESOLVED\";\n  /** Rejected / Error */\n  const REJECTED = 2;\n  States[States[\"REJECTED\"] = REJECTED] = \"REJECTED\";\n})(States || (States = {}));\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nfunction resolvedSyncPromise(value) {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nfunction rejectedSyncPromise(reason) {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise {\n  constructor(executor) {\n    SyncPromise.prototype.__init.call(this);\n    SyncPromise.prototype.__init2.call(this);\n    SyncPromise.prototype.__init3.call(this);\n    SyncPromise.prototype.__init4.call(this);\n    this._state = States.PENDING;\n    this._handlers = [];\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  then(onfulfilled, onrejected) {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([false, result => {\n        if (!onfulfilled) {\n          // TODO: ¯\\_(ツ)_/¯\n          // TODO: FIXME\n          resolve(result);\n        } else {\n          try {\n            resolve(onfulfilled(result));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }, reason => {\n        if (!onrejected) {\n          reject(reason);\n        } else {\n          try {\n            resolve(onrejected(reason));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  catch(onrejected) {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  finally(onfinally) {\n    return new SyncPromise((resolve, reject) => {\n      let val;\n      let isRejected;\n      return this.then(value => {\n        isRejected = false;\n        val = value;\n        if (onfinally) {\n          onfinally();\n        }\n      }, reason => {\n        isRejected = true;\n        val = reason;\n        if (onfinally) {\n          onfinally();\n        }\n      }).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n        resolve(val);\n      });\n    });\n  }\n\n  /** JSDoc */\n  __init() {\n    this._resolve = value => {\n      this._setResult(States.RESOLVED, value);\n    };\n  }\n\n  /** JSDoc */\n  __init2() {\n    this._reject = reason => {\n      this._setResult(States.REJECTED, reason);\n    };\n  }\n\n  /** JSDoc */\n  __init3() {\n    this._setResult = (state, value) => {\n      if (this._state !== States.PENDING) {\n        return;\n      }\n      if (is.isThenable(value)) {\n        void value.then(this._resolve, this._reject);\n        return;\n      }\n      this._state = state;\n      this._value = value;\n      this._executeHandlers();\n    };\n  }\n\n  /** JSDoc */\n  __init4() {\n    this._executeHandlers = () => {\n      if (this._state === States.PENDING) {\n        return;\n      }\n      const cachedHandlers = this._handlers.slice();\n      this._handlers = [];\n      cachedHandlers.forEach(handler => {\n        if (handler[0]) {\n          return;\n        }\n        if (this._state === States.RESOLVED) {\n          handler[1](this._value);\n        }\n        if (this._state === States.REJECTED) {\n          handler[2](this._value);\n        }\n        handler[0] = true;\n      });\n    };\n  }\n}\nexports.SyncPromise = SyncPromise;\nexports.rejectedSyncPromise = rejectedSyncPromise;\nexports.resolvedSyncPromise = resolvedSyncPromise;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/time.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n *\n * TODO(v8): Return type should be rounded.\n */\nfunction dateTimestampInSeconds() {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc() {\n  const {\n    performance\n  } = worldwide.GLOBAL_OBJ;\n  if (!performance || !performance.now) {\n    return dateTimestampInSeconds;\n  }\n\n  // Some browser and environments don't have a timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  const approxStartingTimeOrigin = Date.now() - performance.now();\n  const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nconst timestampInSeconds = createUnixTimestampInSecondsFunc();\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n *\n * @deprecated This variable will be removed in the next major version.\n */\nexports._browserPerformanceTimeOriginMode = void 0;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nconst browserPerformanceTimeOrigin = (() => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const {\n    performance\n  } = worldwide.GLOBAL_OBJ;\n  if (!performance || !performance.now) {\n    // eslint-disable-next-line deprecation/deprecation\n    exports._browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin ? Math.abs(performance.timeOrigin + performanceNow - dateNow) : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      // eslint-disable-next-line deprecation/deprecation\n      exports._browserPerformanceTimeOriginMode = 'timeOrigin';\n      return performance.timeOrigin;\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      exports._browserPerformanceTimeOriginMode = 'navigationStart';\n      return navigationStart;\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  // eslint-disable-next-line deprecation/deprecation\n  exports._browserPerformanceTimeOriginMode = 'dateNow';\n  return dateNow;\n})();\nexports.browserPerformanceTimeOrigin = browserPerformanceTimeOrigin;\nexports.dateTimestampInSeconds = dateTimestampInSeconds;\nexports.timestampInSeconds = timestampInSeconds;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst baggage = __webpack_require__(/*! ./baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\");\nconst propagationContext = __webpack_require__(/*! ./propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nconst TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' +\n// whitespace\n'([0-9a-f]{32})?' +\n// trace_id\n'-?([0-9a-f]{16})?' +\n// span_id\n'-?([01])?' +\n// sampled\n'[ \\\\t]*$') // whitespace\n;\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nfunction extractTraceparentData(traceparent) {\n  if (!traceparent) {\n    return undefined;\n  }\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n  let parentSampled;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2]\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nfunction propagationContextFromHeaders(sentryTrace, baggage$1) {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggage.baggageHeaderToDynamicSamplingContext(baggage$1);\n  if (!traceparentData || !traceparentData.traceId) {\n    return {\n      traceId: propagationContext.generateTraceId(),\n      spanId: propagationContext.generateSpanId()\n    };\n  }\n  const {\n    traceId,\n    parentSpanId,\n    parentSampled\n  } = traceparentData;\n  const virtualSpanId = propagationContext.generateSpanId();\n  return {\n    traceId,\n    parentSpanId,\n    spanId: virtualSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {} // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nfunction generateSentryTraceHeader(traceId = propagationContext.generateTraceId(), spanId = propagationContext.generateSpanId(), sampled) {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\nexports.TRACEPARENT_REGEXP = TRACEPARENT_REGEXP;\nexports.extractTraceparentData = extractTraceparentData;\nexports.generateSentryTraceHeader = generateSentryTraceHeader;\nexports.propagationContextFromHeaders = propagationContextFromHeaders;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdHJhY2luZy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQywrRkFBYyxDQUFDO0FBQ3ZDLE1BQU1DLGtCQUFrQixHQUFHRCxtQkFBTyxDQUFDLHFIQUF5QixDQUFDOztBQUU3RDtBQUNBLE1BQU1FLGtCQUFrQixHQUFHLElBQUlDLE1BQU0sQ0FDbkMsVUFBVTtBQUFHO0FBQ1gsaUJBQWlCO0FBQUc7QUFDcEIsbUJBQW1CO0FBQUc7QUFDdEIsV0FBVztBQUFHO0FBQ2QsVUFDSixDQUFDLENBRGU7QUFDZjs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLHNCQUFzQkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQzNDLElBQUksQ0FBQ0EsV0FBVyxFQUFFO0lBQ2hCLE9BQU9DLFNBQVM7RUFDbEI7RUFFQSxNQUFNQyxPQUFPLEdBQUdGLFdBQVcsQ0FBQ0csS0FBSyxDQUFDTixrQkFBa0IsQ0FBQztFQUNyRCxJQUFJLENBQUNLLE9BQU8sRUFBRTtJQUNaLE9BQU9ELFNBQVM7RUFDbEI7RUFFQSxJQUFJRyxhQUFhO0VBQ2pCLElBQUlGLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7SUFDdEJFLGFBQWEsR0FBRyxJQUFJO0VBQ3RCLENBQUMsTUFBTSxJQUFJRixPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO0lBQzdCRSxhQUFhLEdBQUcsS0FBSztFQUN2QjtFQUVBLE9BQU87SUFDTEMsT0FBTyxFQUFFSCxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25CRSxhQUFhO0lBQ2JFLFlBQVksRUFBRUosT0FBTyxDQUFDLENBQUM7RUFDekIsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ssNkJBQTZCQSxDQUNwQ0MsV0FBVyxFQUNYQyxTQUFTLEVBQ1Q7RUFDQSxNQUFNQyxlQUFlLEdBQUdYLHNCQUFzQixDQUFDUyxXQUFXLENBQUM7RUFDM0QsTUFBTUcsc0JBQXNCLEdBQUdqQixPQUFPLENBQUNrQixxQ0FBcUMsQ0FBQ0gsU0FBUyxDQUFDO0VBRXZGLElBQUksQ0FBQ0MsZUFBZSxJQUFJLENBQUNBLGVBQWUsQ0FBQ0wsT0FBTyxFQUFFO0lBQ2hELE9BQU87TUFBRUEsT0FBTyxFQUFFVCxrQkFBa0IsQ0FBQ2lCLGVBQWUsQ0FBQyxDQUFDO01BQUVDLE1BQU0sRUFBRWxCLGtCQUFrQixDQUFDbUIsY0FBYyxDQUFDO0lBQUUsQ0FBQztFQUN2RztFQUVBLE1BQU07SUFBRVYsT0FBTztJQUFFQyxZQUFZO0lBQUVGO0VBQWMsQ0FBQyxHQUFHTSxlQUFlO0VBRWhFLE1BQU1NLGFBQWEsR0FBR3BCLGtCQUFrQixDQUFDbUIsY0FBYyxDQUFDLENBQUM7RUFFekQsT0FBTztJQUNMVixPQUFPO0lBQ1BDLFlBQVk7SUFDWlEsTUFBTSxFQUFFRSxhQUFhO0lBQ3JCQyxPQUFPLEVBQUViLGFBQWE7SUFDdEJjLEdBQUcsRUFBRVAsc0JBQXNCLElBQUksQ0FBQyxDQUFDLENBQUU7RUFDckMsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNRLHlCQUF5QkEsQ0FDaENkLE9BQU8sR0FBR1Qsa0JBQWtCLENBQUNpQixlQUFlLENBQUMsQ0FBQyxFQUM5Q0MsTUFBTSxHQUFHbEIsa0JBQWtCLENBQUNtQixjQUFjLENBQUMsQ0FBQyxFQUM1Q0UsT0FBTyxFQUNQO0VBQ0EsSUFBSUcsYUFBYSxHQUFHLEVBQUU7RUFDdEIsSUFBSUgsT0FBTyxLQUFLaEIsU0FBUyxFQUFFO0lBQ3pCbUIsYUFBYSxHQUFHSCxPQUFPLEdBQUcsSUFBSSxHQUFHLElBQUk7RUFDdkM7RUFDQSxPQUFRLEdBQUVaLE9BQVEsSUFBR1MsTUFBTyxHQUFFTSxhQUFjLEVBQUM7QUFDL0M7QUFFQTVCLDBCQUEwQixHQUFHSyxrQkFBa0I7QUFDL0NMLDhCQUE4QixHQUFHTyxzQkFBc0I7QUFDdkRQLGlDQUFpQyxHQUFHMkIseUJBQXlCO0FBQzdEM0IscUNBQXFDLEdBQUdlLDZCQUE2QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC90cmFjaW5nLmpzP2FhNzEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgYmFnZ2FnZSA9IHJlcXVpcmUoJy4vYmFnZ2FnZS5qcycpO1xuY29uc3QgcHJvcGFnYXRpb25Db250ZXh0ID0gcmVxdWlyZSgnLi9wcm9wYWdhdGlvbkNvbnRleHQuanMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBzZW50cnktaW50ZXJuYWwvc2RrL25vLXJlZ2V4cC1jb25zdHJ1Y3RvciAtLSBSZWdFeHAgaXMgdXNlZCBmb3IgcmVhZGFiaWxpdHkgaGVyZVxuY29uc3QgVFJBQ0VQQVJFTlRfUkVHRVhQID0gbmV3IFJlZ0V4cChcbiAgJ15bIFxcXFx0XSonICsgLy8gd2hpdGVzcGFjZVxuICAgICcoWzAtOWEtZl17MzJ9KT8nICsgLy8gdHJhY2VfaWRcbiAgICAnLT8oWzAtOWEtZl17MTZ9KT8nICsgLy8gc3Bhbl9pZFxuICAgICctPyhbMDFdKT8nICsgLy8gc2FtcGxlZFxuICAgICdbIFxcXFx0XSokJywgLy8gd2hpdGVzcGFjZVxuKTtcblxuLyoqXG4gKiBFeHRyYWN0IHRyYW5zYWN0aW9uIGNvbnRleHQgZGF0YSBmcm9tIGEgYHNlbnRyeS10cmFjZWAgaGVhZGVyLlxuICpcbiAqIEBwYXJhbSB0cmFjZXBhcmVudCBUcmFjZXBhcmVudCBzdHJpbmdcbiAqXG4gKiBAcmV0dXJucyBPYmplY3QgY29udGFpbmluZyBkYXRhIGZyb20gdGhlIGhlYWRlciwgb3IgdW5kZWZpbmVkIGlmIHRyYWNlcGFyZW50IHN0cmluZyBpcyBtYWxmb3JtZWRcbiAqL1xuZnVuY3Rpb24gZXh0cmFjdFRyYWNlcGFyZW50RGF0YSh0cmFjZXBhcmVudCkge1xuICBpZiAoIXRyYWNlcGFyZW50KSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoZXMgPSB0cmFjZXBhcmVudC5tYXRjaChUUkFDRVBBUkVOVF9SRUdFWFApO1xuICBpZiAoIW1hdGNoZXMpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgbGV0IHBhcmVudFNhbXBsZWQ7XG4gIGlmIChtYXRjaGVzWzNdID09PSAnMScpIHtcbiAgICBwYXJlbnRTYW1wbGVkID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChtYXRjaGVzWzNdID09PSAnMCcpIHtcbiAgICBwYXJlbnRTYW1wbGVkID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRyYWNlSWQ6IG1hdGNoZXNbMV0sXG4gICAgcGFyZW50U2FtcGxlZCxcbiAgICBwYXJlbnRTcGFuSWQ6IG1hdGNoZXNbMl0sXG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcHJvcGFnYXRpb24gY29udGV4dCBmcm9tIGluY29taW5nIGhlYWRlcnMgb3JcbiAqIGNyZWF0ZXMgYSBtaW5pbWFsIG5ldyBvbmUgaWYgdGhlIGhlYWRlcnMgYXJlIHVuZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gcHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnMoXG4gIHNlbnRyeVRyYWNlLFxuICBiYWdnYWdlJDEsXG4pIHtcbiAgY29uc3QgdHJhY2VwYXJlbnREYXRhID0gZXh0cmFjdFRyYWNlcGFyZW50RGF0YShzZW50cnlUcmFjZSk7XG4gIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSBiYWdnYWdlLmJhZ2dhZ2VIZWFkZXJUb0R5bmFtaWNTYW1wbGluZ0NvbnRleHQoYmFnZ2FnZSQxKTtcblxuICBpZiAoIXRyYWNlcGFyZW50RGF0YSB8fCAhdHJhY2VwYXJlbnREYXRhLnRyYWNlSWQpIHtcbiAgICByZXR1cm4geyB0cmFjZUlkOiBwcm9wYWdhdGlvbkNvbnRleHQuZ2VuZXJhdGVUcmFjZUlkKCksIHNwYW5JZDogcHJvcGFnYXRpb25Db250ZXh0LmdlbmVyYXRlU3BhbklkKCkgfTtcbiAgfVxuXG4gIGNvbnN0IHsgdHJhY2VJZCwgcGFyZW50U3BhbklkLCBwYXJlbnRTYW1wbGVkIH0gPSB0cmFjZXBhcmVudERhdGE7XG5cbiAgY29uc3QgdmlydHVhbFNwYW5JZCA9IHByb3BhZ2F0aW9uQ29udGV4dC5nZW5lcmF0ZVNwYW5JZCgpO1xuXG4gIHJldHVybiB7XG4gICAgdHJhY2VJZCxcbiAgICBwYXJlbnRTcGFuSWQsXG4gICAgc3BhbklkOiB2aXJ0dWFsU3BhbklkLFxuICAgIHNhbXBsZWQ6IHBhcmVudFNhbXBsZWQsXG4gICAgZHNjOiBkeW5hbWljU2FtcGxpbmdDb250ZXh0IHx8IHt9LCAvLyBJZiB3ZSBoYXZlIHRyYWNlcGFyZW50IGRhdGEgYnV0IG5vIERTQyBpdCBtZWFucyB3ZSBhcmUgbm90IGhlYWQgb2YgdHJhY2UgYW5kIHdlIG11c3QgZnJlZXplIGl0XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlIHNlbnRyeS10cmFjZSBoZWFkZXIgZnJvbSBzcGFuIGNvbnRleHQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyKFxuICB0cmFjZUlkID0gcHJvcGFnYXRpb25Db250ZXh0LmdlbmVyYXRlVHJhY2VJZCgpLFxuICBzcGFuSWQgPSBwcm9wYWdhdGlvbkNvbnRleHQuZ2VuZXJhdGVTcGFuSWQoKSxcbiAgc2FtcGxlZCxcbikge1xuICBsZXQgc2FtcGxlZFN0cmluZyA9ICcnO1xuICBpZiAoc2FtcGxlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc2FtcGxlZFN0cmluZyA9IHNhbXBsZWQgPyAnLTEnIDogJy0wJztcbiAgfVxuICByZXR1cm4gYCR7dHJhY2VJZH0tJHtzcGFuSWR9JHtzYW1wbGVkU3RyaW5nfWA7XG59XG5cbmV4cG9ydHMuVFJBQ0VQQVJFTlRfUkVHRVhQID0gVFJBQ0VQQVJFTlRfUkVHRVhQO1xuZXhwb3J0cy5leHRyYWN0VHJhY2VwYXJlbnREYXRhID0gZXh0cmFjdFRyYWNlcGFyZW50RGF0YTtcbmV4cG9ydHMuZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlciA9IGdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXI7XG5leHBvcnRzLnByb3BhZ2F0aW9uQ29udGV4dEZyb21IZWFkZXJzID0gcHJvcGFnYXRpb25Db250ZXh0RnJvbUhlYWRlcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYmFnZ2FnZSIsInJlcXVpcmUiLCJwcm9wYWdhdGlvbkNvbnRleHQiLCJUUkFDRVBBUkVOVF9SRUdFWFAiLCJSZWdFeHAiLCJleHRyYWN0VHJhY2VwYXJlbnREYXRhIiwidHJhY2VwYXJlbnQiLCJ1bmRlZmluZWQiLCJtYXRjaGVzIiwibWF0Y2giLCJwYXJlbnRTYW1wbGVkIiwidHJhY2VJZCIsInBhcmVudFNwYW5JZCIsInByb3BhZ2F0aW9uQ29udGV4dEZyb21IZWFkZXJzIiwic2VudHJ5VHJhY2UiLCJiYWdnYWdlJDEiLCJ0cmFjZXBhcmVudERhdGEiLCJkeW5hbWljU2FtcGxpbmdDb250ZXh0IiwiYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dCIsImdlbmVyYXRlVHJhY2VJZCIsInNwYW5JZCIsImdlbmVyYXRlU3BhbklkIiwidmlydHVhbFNwYW5JZCIsInNhbXBsZWQiLCJkc2MiLCJnZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyIiwic2FtcGxlZFN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/url.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/url.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nfunction parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nfunction stripUrlQueryAndFragment(urlPath) {\n  return urlPath.split(/[?#]/, 1)[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n *\n * @deprecated This function will be removed in the next major version.\n */\n// TODO(v9): Hoist this function into the places where we use it. (as it stands only react router v6 instrumentation)\nfunction getNumberOfUrlSegments(url) {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlString(url) {\n  const {\n    protocol,\n    host,\n    path\n  } = url;\n  const filteredHost = host && host\n  // Always filter out authority\n  .replace(/^.*@/, '[filtered]:[filtered]@')\n  // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n  // TODO: Use new URL global if it exists\n  .replace(/(:80)$/, '').replace(/(:443)$/, '') || '';\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\nexports.getNumberOfUrlSegments = getNumberOfUrlSegments;\nexports.getSanitizedUrlString = getSanitizedUrlString;\nexports.parseUrl = parseUrl;\nexports.stripUrlQueryAndFragment = stripUrlQueryAndFragment;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdXJsLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsUUFBUUEsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3JCLElBQUksQ0FBQ0EsR0FBRyxFQUFFO0lBQ1IsT0FBTyxDQUFDLENBQUM7RUFDWDtFQUVBLE1BQU1DLEtBQUssR0FBR0QsR0FBRyxDQUFDQyxLQUFLLENBQUMsOERBQThELENBQUM7RUFFdkYsSUFBSSxDQUFDQSxLQUFLLEVBQUU7SUFDVixPQUFPLENBQUMsQ0FBQztFQUNYOztFQUVBO0VBQ0EsTUFBTUMsS0FBSyxHQUFHRCxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRTtFQUM1QixNQUFNRSxRQUFRLEdBQUdGLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFO0VBQy9CLE9BQU87SUFDTEcsSUFBSSxFQUFFSCxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2RJLElBQUksRUFBRUosS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNkSyxRQUFRLEVBQUVMLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbEJNLE1BQU0sRUFBRUwsS0FBSztJQUNiTSxJQUFJLEVBQUVMLFFBQVE7SUFDZE0sUUFBUSxFQUFFUixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUdDLEtBQUssR0FBR0MsUUFBUSxDQUFFO0VBQ3pDLENBQUM7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTTyx3QkFBd0JBLENBQUNDLE9BQU8sRUFBRTtFQUN6QyxPQUFRQSxPQUFPLENBQUNDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUcsQ0FBQyxDQUFDO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLHNCQUFzQkEsQ0FBQ2IsR0FBRyxFQUFFO0VBQ25DO0VBQ0EsT0FBT0EsR0FBRyxDQUFDWSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUNFLE1BQU0sQ0FBQ0MsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLE1BQU0sR0FBRyxDQUFDLElBQUlELENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQ0MsTUFBTTtBQUN6RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLHFCQUFxQkEsQ0FBQ2pCLEdBQUcsRUFBRTtFQUNsQyxNQUFNO0lBQUVNLFFBQVE7SUFBRUYsSUFBSTtJQUFFQztFQUFLLENBQUMsR0FBR0wsR0FBRztFQUVwQyxNQUFNa0IsWUFBWSxHQUNmZCxJQUFJLElBQ0hBO0VBQ0U7RUFBQSxDQUNDZSxPQUFPLENBQUMsTUFBTSxFQUFFLHdCQUF3QjtFQUN6QztFQUNBO0VBQUEsQ0FDQ0EsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FDckJBLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLElBQzNCLEVBQUU7RUFFSixPQUFRLEdBQUViLFFBQVEsR0FBSSxHQUFFQSxRQUFTLEtBQUksR0FBRyxFQUFHLEdBQUVZLFlBQWEsR0FBRWIsSUFBSyxFQUFDO0FBQ3BFO0FBRUFSLDhCQUE4QixHQUFHZ0Isc0JBQXNCO0FBQ3ZEaEIsNkJBQTZCLEdBQUdvQixxQkFBcUI7QUFDckRwQixnQkFBZ0IsR0FBR0UsUUFBUTtBQUMzQkYsZ0NBQWdDLEdBQUdhLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC91cmwuanM/MmEyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFBhcnNlcyBzdHJpbmcgZm9ybSBvZiBVUkwgaW50byBhbiBvYmplY3RcbiAqIC8vIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjYXBwZW5kaXgtQlxuICogLy8gaW50ZW50aW9uYWxseSB1c2luZyByZWdleCBhbmQgbm90IDxhLz4gaHJlZiBwYXJzaW5nIHRyaWNrIGJlY2F1c2UgUmVhY3QgTmF0aXZlIGFuZCBvdGhlclxuICogLy8gZW52aXJvbm1lbnRzIHdoZXJlIERPTSBtaWdodCBub3QgYmUgYXZhaWxhYmxlXG4gKiBAcmV0dXJucyBwYXJzZWQgVVJMIG9iamVjdFxuICovXG5mdW5jdGlvbiBwYXJzZVVybCh1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjb25zdCBtYXRjaCA9IHVybC5tYXRjaCgvXigoW146Lz8jXSspOik/KFxcL1xcLyhbXi8/I10qKSk/KFtePyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyk7XG5cbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIC8vIGNvZXJjZSB0byB1bmRlZmluZWQgdmFsdWVzIHRvIGVtcHR5IHN0cmluZyBzbyB3ZSBkb24ndCBnZXQgJ3VuZGVmaW5lZCdcbiAgY29uc3QgcXVlcnkgPSBtYXRjaFs2XSB8fCAnJztcbiAgY29uc3QgZnJhZ21lbnQgPSBtYXRjaFs4XSB8fCAnJztcbiAgcmV0dXJuIHtcbiAgICBob3N0OiBtYXRjaFs0XSxcbiAgICBwYXRoOiBtYXRjaFs1XSxcbiAgICBwcm90b2NvbDogbWF0Y2hbMl0sXG4gICAgc2VhcmNoOiBxdWVyeSxcbiAgICBoYXNoOiBmcmFnbWVudCxcbiAgICByZWxhdGl2ZTogbWF0Y2hbNV0gKyBxdWVyeSArIGZyYWdtZW50LCAvLyBldmVyeXRoaW5nIG1pbnVzIG9yaWdpblxuICB9O1xufVxuXG4vKipcbiAqIFN0cmlwIHRoZSBxdWVyeSBzdHJpbmcgYW5kIGZyYWdtZW50IG9mZiBvZiBhIGdpdmVuIFVSTCBvciBwYXRoIChpZiBwcmVzZW50KVxuICpcbiAqIEBwYXJhbSB1cmxQYXRoIEZ1bGwgVVJMIG9yIHBhdGgsIGluY2x1ZGluZyBwb3NzaWJsZSBxdWVyeSBzdHJpbmcgYW5kL29yIGZyYWdtZW50XG4gKiBAcmV0dXJucyBVUkwgb3IgcGF0aCB3aXRob3V0IHF1ZXJ5IHN0cmluZyBvciBmcmFnbWVudFxuICovXG5mdW5jdGlvbiBzdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQodXJsUGF0aCkge1xuICByZXR1cm4gKHVybFBhdGguc3BsaXQoL1s/I10vLCAxKSApWzBdO1xufVxuXG4vKipcbiAqIFJldHVybnMgbnVtYmVyIG9mIFVSTCBzZWdtZW50cyBvZiBhIHBhc3NlZCBzdHJpbmcgVVJMLlxuICpcbiAqIEBkZXByZWNhdGVkIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gKi9cbi8vIFRPRE8odjkpOiBIb2lzdCB0aGlzIGZ1bmN0aW9uIGludG8gdGhlIHBsYWNlcyB3aGVyZSB3ZSB1c2UgaXQuIChhcyBpdCBzdGFuZHMgb25seSByZWFjdCByb3V0ZXIgdjYgaW5zdHJ1bWVudGF0aW9uKVxuZnVuY3Rpb24gZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cyh1cmwpIHtcbiAgLy8gc3BsaXQgYXQgJy8nIG9yIGF0ICdcXC8nIHRvIHNwbGl0IHJlZ2V4IHVybHMgY29ycmVjdGx5XG4gIHJldHVybiB1cmwuc3BsaXQoL1xcXFw/XFwvLykuZmlsdGVyKHMgPT4gcy5sZW5ndGggPiAwICYmIHMgIT09ICcsJykubGVuZ3RoO1xufVxuXG4vKipcbiAqIFRha2VzIGEgVVJMIG9iamVjdCBhbmQgcmV0dXJucyBhIHNhbml0aXplZCBzdHJpbmcgd2hpY2ggaXMgc2FmZSB0byB1c2UgYXMgc3BhbiBuYW1lXG4gKiBzZWU6IGh0dHBzOi8vZGV2ZWxvcC5zZW50cnkuZGV2L3Nkay9kYXRhLWhhbmRsaW5nLyNzdHJ1Y3R1cmluZy1kYXRhXG4gKi9cbmZ1bmN0aW9uIGdldFNhbml0aXplZFVybFN0cmluZyh1cmwpIHtcbiAgY29uc3QgeyBwcm90b2NvbCwgaG9zdCwgcGF0aCB9ID0gdXJsO1xuXG4gIGNvbnN0IGZpbHRlcmVkSG9zdCA9XG4gICAgKGhvc3QgJiZcbiAgICAgIGhvc3RcbiAgICAgICAgLy8gQWx3YXlzIGZpbHRlciBvdXQgYXV0aG9yaXR5XG4gICAgICAgIC5yZXBsYWNlKC9eLipALywgJ1tmaWx0ZXJlZF06W2ZpbHRlcmVkXUAnKVxuICAgICAgICAvLyBEb24ndCBzaG93IHN0YW5kYXJkIDo4MCAoaHR0cCkgYW5kIDo0NDMgKGh0dHBzKSBwb3J0cyB0byByZWR1Y2UgdGhlIG5vaXNlXG4gICAgICAgIC8vIFRPRE86IFVzZSBuZXcgVVJMIGdsb2JhbCBpZiBpdCBleGlzdHNcbiAgICAgICAgLnJlcGxhY2UoLyg6ODApJC8sICcnKVxuICAgICAgICAucmVwbGFjZSgvKDo0NDMpJC8sICcnKSkgfHxcbiAgICAnJztcblxuICByZXR1cm4gYCR7cHJvdG9jb2wgPyBgJHtwcm90b2NvbH06Ly9gIDogJyd9JHtmaWx0ZXJlZEhvc3R9JHtwYXRofWA7XG59XG5cbmV4cG9ydHMuZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cyA9IGdldE51bWJlck9mVXJsU2VnbWVudHM7XG5leHBvcnRzLmdldFNhbml0aXplZFVybFN0cmluZyA9IGdldFNhbml0aXplZFVybFN0cmluZztcbmV4cG9ydHMucGFyc2VVcmwgPSBwYXJzZVVybDtcbmV4cG9ydHMuc3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50ID0gc3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGFyc2VVcmwiLCJ1cmwiLCJtYXRjaCIsInF1ZXJ5IiwiZnJhZ21lbnQiLCJob3N0IiwicGF0aCIsInByb3RvY29sIiwic2VhcmNoIiwiaGFzaCIsInJlbGF0aXZlIiwic3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50IiwidXJsUGF0aCIsInNwbGl0IiwiZ2V0TnVtYmVyT2ZVcmxTZWdtZW50cyIsImZpbHRlciIsInMiLCJsZW5ndGgiLCJnZXRTYW5pdGl6ZWRVcmxTdHJpbmciLCJmaWx0ZXJlZEhvc3QiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/url.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/escapeStringForRegex.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/escapeStringForRegex.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:\n//   a) reduce the size by skipping the runtime type - checking\n//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 14+).\n//\n// MIT License\n//\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files(the \"Software\"), to deal in the Software without restriction, including without limitation\n// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n// the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nfunction escapeStringForRegex(regexString) {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\nexports.escapeStringForRegex = escapeStringForRegex;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVuZG9yL2VzY2FwZVN0cmluZ0ZvclJlZ2V4LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLG9CQUFvQkEsQ0FBQ0MsV0FBVyxFQUFFO0VBQ3pDO0VBQ0E7RUFDQSxPQUFPQSxXQUFXLENBQUNDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsQ0FBQ0EsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7QUFDbEY7QUFFQUosNEJBQTRCLEdBQUdFLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy1ob2lzdC92ZW5kb3IvZXNjYXBlU3RyaW5nRm9yUmVnZXguanM/NmM2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL2VzY2FwZS1zdHJpbmctcmVnZXhwIGJ1dCB3aXRoIG1vZGlmaWNhdGlvbnMgdG86XG4vLyAgIGEpIHJlZHVjZSB0aGUgc2l6ZSBieSBza2lwcGluZyB0aGUgcnVudGltZSB0eXBlIC0gY2hlY2tpbmdcbi8vICAgYikgZW5zdXJlIGl0IGdldHMgZG93biAtIGNvbXBpbGVkIGZvciBvbGQgdmVyc2lvbnMgb2YgTm9kZSh0aGUgcHVibGlzaGVkIHBhY2thZ2Ugb25seSBzdXBwb3J0cyBOb2RlIDE0KykuXG4vL1xuLy8gTUlUIExpY2Vuc2Vcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIFNpbmRyZSBTb3JodXMgPHNpbmRyZXNvcmh1c0BnbWFpbC5jb20+IChodHRwczovL3NpbmRyZXNvcmh1cy5jb20pXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkXG4vLyBkb2N1bWVudGF0aW9uIGZpbGVzKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uXG4vLyB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kIC8gb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmRcbi8vIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZlxuLy8gdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUT1xuLy8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULklOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuLy8gVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HU1xuLy8gSU4gVEhFIFNPRlRXQVJFLlxuXG4vKipcbiAqIEdpdmVuIGEgc3RyaW5nLCBlc2NhcGUgY2hhcmFjdGVycyB3aGljaCBoYXZlIG1lYW5pbmcgaW4gdGhlIHJlZ2V4IGdyYW1tYXIsIHN1Y2ggdGhhdCB0aGUgcmVzdWx0IGlzIHNhZmUgdG8gZmVlZCB0b1xuICogYG5ldyBSZWdFeHAoKWAuXG4gKlxuICogQHBhcmFtIHJlZ2V4U3RyaW5nIFRoZSBzdHJpbmcgdG8gZXNjYXBlXG4gKiBAcmV0dXJucyBBbiB2ZXJzaW9uIG9mIHRoZSBzdHJpbmcgd2l0aCBhbGwgc3BlY2lhbCByZWdleCBjaGFyYWN0ZXJzIGVzY2FwZWRcbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nRm9yUmVnZXgocmVnZXhTdHJpbmcpIHtcbiAgLy8gZXNjYXBlIHRoZSBoeXBoZW4gc2VwYXJhdGVseSBzbyB3ZSBjYW4gYWxzbyByZXBsYWNlIGl0IHdpdGggYSB1bmljb2RlIGxpdGVyYWwgaHlwaGVuLCB0byBhdm9pZCB0aGUgcHJvYmxlbXNcbiAgLy8gZGlzY3Vzc2VkIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvZXNjYXBlLXN0cmluZy1yZWdleHAvaXNzdWVzLzIwLlxuICByZXR1cm4gcmVnZXhTdHJpbmcucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCsqPy5dL2csICdcXFxcJCYnKS5yZXBsYWNlKC8tL2csICdcXFxceDJkJyk7XG59XG5cbmV4cG9ydHMuZXNjYXBlU3RyaW5nRm9yUmVnZXggPSBlc2NhcGVTdHJpbmdGb3JSZWdleDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzY2FwZVN0cmluZ0ZvclJlZ2V4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXNjYXBlU3RyaW5nRm9yUmVnZXgiLCJyZWdleFN0cmluZyIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/escapeStringForRegex.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/getIpAddress.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/getIpAddress.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// Vendored / modified from @sergiodxa/remix-utils\n\n// https://github.com/sergiodxa/remix-utils/blob/02af80e12829a53696bfa8f3c2363975cf59f55e/src/server/get-client-ip-address.ts\n// MIT License\n\n// Copyright (c) 2021 Sergio Xalambrí\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// The headers to check, in priority order\nconst ipHeaderNames = ['X-Client-IP', 'X-Forwarded-For', 'Fly-Client-IP', 'CF-Connecting-IP', 'Fastly-Client-Ip', 'True-Client-Ip', 'X-Real-IP', 'X-Cluster-Client-IP', 'X-Forwarded', 'Forwarded-For', 'Forwarded', 'X-Vercel-Forwarded-For'];\n\n/**\n * Get the IP address of the client sending a request.\n *\n * It receives a Request headers object and use it to get the\n * IP address from one of the following headers in order.\n *\n * If the IP address is valid, it will be returned. Otherwise, null will be\n * returned.\n *\n * If the header values contains more than one IP address, the first valid one\n * will be returned.\n */\nfunction getClientIPAddress(headers) {\n  // This will end up being Array<string | string[] | undefined | null> because of the various possible values a header\n  // can take\n  const headerValues = ipHeaderNames.map(headerName => {\n    const rawValue = headers[headerName];\n    const value = Array.isArray(rawValue) ? rawValue.join(';') : rawValue;\n    if (headerName === 'Forwarded') {\n      return parseForwardedHeader(value);\n    }\n    return value && value.split(',').map(v => v.trim());\n  });\n\n  // Flatten the array and filter out any falsy entries\n  const flattenedHeaderValues = headerValues.reduce((acc, val) => {\n    if (!val) {\n      return acc;\n    }\n    return acc.concat(val);\n  }, []);\n\n  // Find the first value which is a valid IP address, if any\n  const ipAddress = flattenedHeaderValues.find(ip => ip !== null && isIP(ip));\n  return ipAddress || null;\n}\nfunction parseForwardedHeader(value) {\n  if (!value) {\n    return null;\n  }\n  for (const part of value.split(';')) {\n    if (part.startsWith('for=')) {\n      return part.slice(4);\n    }\n  }\n  return null;\n}\n\n//\n/**\n * Custom method instead of importing this from `net` package, as this only exists in node\n * Accepts:\n * 127.0.0.1\n * 192.168.1.1\n * 192.168.1.255\n * 255.255.255.255\n * 10.1.1.1\n * 0.0.0.0\n * 2b01:cb19:8350:ed00:d0dd:fa5b:de31:8be5\n *\n * Rejects:\n * 1.1.1.01\n * 30.168.1.255.1\n * 127.1\n * 192.168.1.256\n * -1.2.3.4\n * 1.1.1.1.\n * 3...3\n * 192.168.1.099\n */\nfunction isIP(str) {\n  const regex = /(?:^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$)|(?:^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/;\n  return regex.test(str);\n}\nexports.getClientIPAddress = getClientIPAddress;\nexports.ipHeaderNames = ipHeaderNames;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/getIpAddress.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/supportsHistory.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/supportsHistory.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ../worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n// Based on https://github.com/angular/angular.js/pull/13945/files\n// The MIT License\n\nconst WINDOW = worldwide.GLOBAL_OBJ;\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsHistory() {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  // TODO(v9): Remove this custom check, it is pretty old and likely not needed anymore\n  const chromeVar = WINDOW.chrome;\n  const isChromePackagedApp = chromeVar && chromeVar.app && chromeVar.app.runtime;\n  const hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;\n  return !isChromePackagedApp && hasHistoryApi;\n}\nexports.supportsHistory = supportsHistory;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVuZG9yL3N1cHBvcnRzSGlzdG9yeS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxvR0FBaUIsQ0FBQzs7QUFFNUM7QUFDQTs7QUFHQSxNQUFNQyxNQUFNLEdBQUdGLFNBQVMsQ0FBQ0csVUFBVTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZUFBZUEsQ0FBQSxFQUFHO0VBQ3pCO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsTUFBTUMsU0FBUyxHQUFJSCxNQUFNLENBQUdJLE1BQU07RUFDbEMsTUFBTUMsbUJBQW1CLEdBQUdGLFNBQVMsSUFBSUEsU0FBUyxDQUFDRyxHQUFHLElBQUlILFNBQVMsQ0FBQ0csR0FBRyxDQUFDQyxPQUFPO0VBQy9FLE1BQU1DLGFBQWEsR0FBRyxTQUFTLElBQUlSLE1BQU0sSUFBSSxDQUFDLENBQUNBLE1BQU0sQ0FBQ1MsT0FBTyxDQUFDQyxTQUFTLElBQUksQ0FBQyxDQUFDVixNQUFNLENBQUNTLE9BQU8sQ0FBQ0UsWUFBWTtFQUV4RyxPQUFPLENBQUNOLG1CQUFtQixJQUFJRyxhQUFhO0FBQzlDO0FBRUFaLHVCQUF1QixHQUFHTSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L3ZlbmRvci9zdXBwb3J0c0hpc3RvcnkuanM/YzdiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB3b3JsZHdpZGUgPSByZXF1aXJlKCcuLi93b3JsZHdpZGUuanMnKTtcblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzEzOTQ1L2ZpbGVzXG4vLyBUaGUgTUlUIExpY2Vuc2VcblxuXG5jb25zdCBXSU5ET1cgPSB3b3JsZHdpZGUuR0xPQkFMX09CSiA7XG5cbi8qKlxuICogVGVsbHMgd2hldGhlciBjdXJyZW50IGVudmlyb25tZW50IHN1cHBvcnRzIEhpc3RvcnkgQVBJXG4gKiB7QGxpbmsgc3VwcG9ydHNIaXN0b3J5fS5cbiAqXG4gKiBAcmV0dXJucyBBbnN3ZXIgdG8gdGhlIGdpdmVuIHF1ZXN0aW9uLlxuICovXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIC8vIE5PVEU6IGluIENocm9tZSBBcHAgZW52aXJvbm1lbnQsIHRvdWNoaW5nIGhpc3RvcnkucHVzaFN0YXRlLCAqZXZlbiBpbnNpZGVcbiAgLy8gICAgICAgYSB0cnkvY2F0Y2ggYmxvY2sqLCB3aWxsIGNhdXNlIENocm9tZSB0byBvdXRwdXQgYW4gZXJyb3IgdG8gY29uc29sZS5lcnJvclxuICAvLyBib3Jyb3dlZCBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTM5NDUvZmlsZXNcbiAgLy8gVE9ETyh2OSk6IFJlbW92ZSB0aGlzIGN1c3RvbSBjaGVjaywgaXQgaXMgcHJldHR5IG9sZCBhbmQgbGlrZWx5IG5vdCBuZWVkZWQgYW55bW9yZVxuICBjb25zdCBjaHJvbWVWYXIgPSAoV0lORE9XICkuY2hyb21lO1xuICBjb25zdCBpc0Nocm9tZVBhY2thZ2VkQXBwID0gY2hyb21lVmFyICYmIGNocm9tZVZhci5hcHAgJiYgY2hyb21lVmFyLmFwcC5ydW50aW1lO1xuICBjb25zdCBoYXNIaXN0b3J5QXBpID0gJ2hpc3RvcnknIGluIFdJTkRPVyAmJiAhIVdJTkRPVy5oaXN0b3J5LnB1c2hTdGF0ZSAmJiAhIVdJTkRPVy5oaXN0b3J5LnJlcGxhY2VTdGF0ZTtcblxuICByZXR1cm4gIWlzQ2hyb21lUGFja2FnZWRBcHAgJiYgaGFzSGlzdG9yeUFwaTtcbn1cblxuZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBzdXBwb3J0c0hpc3Rvcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdXBwb3J0c0hpc3RvcnkuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3b3JsZHdpZGUiLCJyZXF1aXJlIiwiV0lORE9XIiwiR0xPQkFMX09CSiIsInN1cHBvcnRzSGlzdG9yeSIsImNocm9tZVZhciIsImNocm9tZSIsImlzQ2hyb21lUGFja2FnZWRBcHAiLCJhcHAiLCJydW50aW1lIiwiaGFzSGlzdG9yeUFwaSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJyZXBsYWNlU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vendor/supportsHistory.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vercelWaitUntil.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/vercelWaitUntil.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst worldwide = __webpack_require__(/*! ./worldwide.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\");\n\n/**\n * Function that delays closing of a Vercel lambda until the provided promise is resolved.\n *\n * Vendored from https://www.npmjs.com/package/@vercel/functions\n */\nfunction vercelWaitUntil(task) {\n  const vercelRequestContextGlobal =\n  // @ts-expect-error This is not typed\n  worldwide.GLOBAL_OBJ[Symbol.for('@vercel/request-context')];\n  const ctx = vercelRequestContextGlobal && vercelRequestContextGlobal.get && vercelRequestContextGlobal.get() ? vercelRequestContextGlobal.get() : {};\n  if (ctx && ctx.waitUntil) {\n    ctx.waitUntil(task);\n  }\n}\nexports.vercelWaitUntil = vercelWaitUntil;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVyY2VsV2FpdFVudGlsLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsU0FBUyxHQUFHQyxtQkFBTyxDQUFDLG1HQUFnQixDQUFDOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZUFBZUEsQ0FBQ0MsSUFBSSxFQUFFO0VBQzdCLE1BQU1DLDBCQUEwQjtFQUM5QjtFQUNBSixTQUFTLENBQUNLLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztFQUU3RCxNQUFNQyxHQUFHLEdBQ1BKLDBCQUEwQixJQUFJQSwwQkFBMEIsQ0FBQ0ssR0FBRyxJQUFJTCwwQkFBMEIsQ0FBQ0ssR0FBRyxDQUFDLENBQUMsR0FDNUZMLDBCQUEwQixDQUFDSyxHQUFHLENBQUMsQ0FBQyxHQUNoQyxDQUFDLENBQUM7RUFFUixJQUFJRCxHQUFHLElBQUlBLEdBQUcsQ0FBQ0UsU0FBUyxFQUFFO0lBQ3hCRixHQUFHLENBQUNFLFNBQVMsQ0FBQ1AsSUFBSSxDQUFDO0VBQ3JCO0FBQ0Y7QUFFQUwsdUJBQXVCLEdBQUdJLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVyY2VsV2FpdFVudGlsLmpzP2U5OTQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3Qgd29ybGR3aWRlID0gcmVxdWlyZSgnLi93b3JsZHdpZGUuanMnKTtcblxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IGRlbGF5cyBjbG9zaW5nIG9mIGEgVmVyY2VsIGxhbWJkYSB1bnRpbCB0aGUgcHJvdmlkZWQgcHJvbWlzZSBpcyByZXNvbHZlZC5cbiAqXG4gKiBWZW5kb3JlZCBmcm9tIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0B2ZXJjZWwvZnVuY3Rpb25zXG4gKi9cbmZ1bmN0aW9uIHZlcmNlbFdhaXRVbnRpbCh0YXNrKSB7XG4gIGNvbnN0IHZlcmNlbFJlcXVlc3RDb250ZXh0R2xvYmFsID1cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRoaXMgaXMgbm90IHR5cGVkXG4gICAgd29ybGR3aWRlLkdMT0JBTF9PQkpbU3ltYm9sLmZvcignQHZlcmNlbC9yZXF1ZXN0LWNvbnRleHQnKV07XG5cbiAgY29uc3QgY3R4ID1cbiAgICB2ZXJjZWxSZXF1ZXN0Q29udGV4dEdsb2JhbCAmJiB2ZXJjZWxSZXF1ZXN0Q29udGV4dEdsb2JhbC5nZXQgJiYgdmVyY2VsUmVxdWVzdENvbnRleHRHbG9iYWwuZ2V0KClcbiAgICAgID8gdmVyY2VsUmVxdWVzdENvbnRleHRHbG9iYWwuZ2V0KClcbiAgICAgIDoge307XG5cbiAgaWYgKGN0eCAmJiBjdHgud2FpdFVudGlsKSB7XG4gICAgY3R4LndhaXRVbnRpbCh0YXNrKTtcbiAgfVxufVxuXG5leHBvcnRzLnZlcmNlbFdhaXRVbnRpbCA9IHZlcmNlbFdhaXRVbnRpbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcmNlbFdhaXRVbnRpbC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIndvcmxkd2lkZSIsInJlcXVpcmUiLCJ2ZXJjZWxXYWl0VW50aWwiLCJ0YXNrIiwidmVyY2VsUmVxdWVzdENvbnRleHRHbG9iYWwiLCJHTE9CQUxfT0JKIiwiU3ltYm9sIiwiZm9yIiwiY3R4IiwiZ2V0Iiwid2FpdFVudGlsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/vercelWaitUntil.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js":
/*!********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/version.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n// This is a magic string replaced by rollup\n\nconst SDK_VERSION = \"8.50.0\";\nexports.SDK_VERSION = SDK_VERSION;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDOztBQUU3RDs7QUFFQSxNQUFNQyxXQUFXLEdBQUcsUUFBUTtBQUU1QkYsbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3QvdmVyc2lvbi5qcz82MGI2Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8vIFRoaXMgaXMgYSBtYWdpYyBzdHJpbmcgcmVwbGFjZWQgYnkgcm9sbHVwXG5cbmNvbnN0IFNES19WRVJTSU9OID0gXCI4LjUwLjBcIiA7XG5cbmV4cG9ydHMuU0RLX1ZFUlNJT04gPSBTREtfVkVSU0lPTjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTREtfVkVSU0lPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst version = __webpack_require__(/*! ./version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n\n/** Get's the global object for the current JavaScript runtime */\nconst GLOBAL_OBJ = globalThis;\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__[]` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nfunction getGlobalSingleton(name, creator, obj) {\n  const gbl = obj || GLOBAL_OBJ;\n  const __SENTRY__ = gbl.__SENTRY__ = gbl.__SENTRY__ || {};\n  const versionedCarrier = __SENTRY__[version.SDK_VERSION] = __SENTRY__[version.SDK_VERSION] || {};\n  return versionedCarrier[name] || (versionedCarrier[name] = creator());\n}\nexports.GLOBAL_OBJ = GLOBAL_OBJ;\nexports.getGlobalSingleton = getGlobalSingleton;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMtaG9pc3Qvd29ybGR3aWRlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLCtGQUFjLENBQUM7O0FBRXZDO0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxVQUFVOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Msa0JBQWtCQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsR0FBRyxFQUFFO0VBQzlDLE1BQU1DLEdBQUcsR0FBSUQsR0FBRyxJQUFJTCxVQUFXO0VBQy9CLE1BQU1PLFVBQVUsR0FBSUQsR0FBRyxDQUFDQyxVQUFVLEdBQUdELEdBQUcsQ0FBQ0MsVUFBVSxJQUFJLENBQUMsQ0FBRTtFQUMxRCxNQUFNQyxnQkFBZ0IsR0FBSUQsVUFBVSxDQUFDVCxPQUFPLENBQUNXLFdBQVcsQ0FBQyxHQUFHRixVQUFVLENBQUNULE9BQU8sQ0FBQ1csV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFFO0VBQ2xHLE9BQU9ELGdCQUFnQixDQUFDTCxJQUFJLENBQUMsS0FBS0ssZ0JBQWdCLENBQUNMLElBQUksQ0FBQyxHQUFHQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3ZFO0FBRUFSLGtCQUFrQixHQUFHSSxVQUFVO0FBQy9CSiwwQkFBMEIsR0FBR00sa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzLWhvaXN0L3dvcmxkd2lkZS5qcz84OWZhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IHZlcnNpb24gPSByZXF1aXJlKCcuL3ZlcnNpb24uanMnKTtcblxuLyoqIEdldCdzIHRoZSBnbG9iYWwgb2JqZWN0IGZvciB0aGUgY3VycmVudCBKYXZhU2NyaXB0IHJ1bnRpbWUgKi9cbmNvbnN0IEdMT0JBTF9PQkogPSBnbG9iYWxUaGlzIDtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZ2xvYmFsIHNpbmdsZXRvbiBjb250YWluZWQgaW4gdGhlIGdsb2JhbCBgX19TRU5UUllfX1tdYCBvYmplY3QuXG4gKlxuICogSWYgdGhlIHNpbmdsZXRvbiBkb2Vzbid0IGFscmVhZHkgZXhpc3QgaW4gYF9fU0VOVFJZX19gLCBpdCB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlIGdpdmVuIGZhY3RvcnlcbiAqIGZ1bmN0aW9uIGFuZCBhZGRlZCB0byB0aGUgYF9fU0VOVFJZX19gIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gbmFtZSBuYW1lIG9mIHRoZSBnbG9iYWwgc2luZ2xldG9uIG9uIF9fU0VOVFJZX19cbiAqIEBwYXJhbSBjcmVhdG9yIGNyZWF0b3IgRmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIHNpbmdsZXRvbiBpZiBpdCBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gYF9fU0VOVFJZX19gXG4gKiBAcGFyYW0gb2JqIChPcHRpb25hbCkgVGhlIGdsb2JhbCBvYmplY3Qgb24gd2hpY2ggdG8gbG9vayBmb3IgYF9fU0VOVFJZX19gLCBpZiBub3QgYEdMT0JBTF9PQkpgJ3MgcmV0dXJuIHZhbHVlXG4gKiBAcmV0dXJucyB0aGUgc2luZ2xldG9uXG4gKi9cbmZ1bmN0aW9uIGdldEdsb2JhbFNpbmdsZXRvbihuYW1lLCBjcmVhdG9yLCBvYmopIHtcbiAgY29uc3QgZ2JsID0gKG9iaiB8fCBHTE9CQUxfT0JKKSA7XG4gIGNvbnN0IF9fU0VOVFJZX18gPSAoZ2JsLl9fU0VOVFJZX18gPSBnYmwuX19TRU5UUllfXyB8fCB7fSk7XG4gIGNvbnN0IHZlcnNpb25lZENhcnJpZXIgPSAoX19TRU5UUllfX1t2ZXJzaW9uLlNES19WRVJTSU9OXSA9IF9fU0VOVFJZX19bdmVyc2lvbi5TREtfVkVSU0lPTl0gfHwge30pO1xuICByZXR1cm4gdmVyc2lvbmVkQ2FycmllcltuYW1lXSB8fCAodmVyc2lvbmVkQ2FycmllcltuYW1lXSA9IGNyZWF0b3IoKSk7XG59XG5cbmV4cG9ydHMuR0xPQkFMX09CSiA9IEdMT0JBTF9PQko7XG5leHBvcnRzLmdldEdsb2JhbFNpbmdsZXRvbiA9IGdldEdsb2JhbFNpbmdsZXRvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdvcmxkd2lkZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInZlcnNpb24iLCJyZXF1aXJlIiwiR0xPQkFMX09CSiIsImdsb2JhbFRoaXMiLCJnZXRHbG9iYWxTaW5nbGV0b24iLCJuYW1lIiwiY3JlYXRvciIsIm9iaiIsImdibCIsIl9fU0VOVFJZX18iLCJ2ZXJzaW9uZWRDYXJyaWVyIiwiU0RLX1ZFUlNJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst dynamicSamplingContext = __webpack_require__(/*! ../tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst merge = __webpack_require__(/*! ./merge.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js\");\nconst spanUtils = __webpack_require__(/*! ./spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nfunction applyScopeDataToEvent(event, data) {\n  const {\n    fingerprint,\n    span,\n    breadcrumbs,\n    sdkProcessingMetadata\n  } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n\n/** Merge data of two scopes together. */\nfunction mergeScopeData(data, mergeData) {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    sdkProcessingMetadata,\n    breadcrumbs,\n    fingerprint,\n    eventProcessors,\n    attachments,\n    propagationContext,\n    transactionName,\n    span\n  } = mergeData;\n  mergeAndOverwriteScopeData(data, 'extra', extra);\n  mergeAndOverwriteScopeData(data, 'tags', tags);\n  mergeAndOverwriteScopeData(data, 'user', user);\n  mergeAndOverwriteScopeData(data, 'contexts', contexts);\n  data.sdkProcessingMetadata = merge.merge(data.sdkProcessingMetadata, sdkProcessingMetadata, 2);\n  if (level) {\n    data.level = level;\n  }\n  if (transactionName) {\n    data.transactionName = transactionName;\n  }\n  if (span) {\n    data.span = span;\n  }\n  if (breadcrumbs.length) {\n    data.breadcrumbs = [...data.breadcrumbs, ...breadcrumbs];\n  }\n  if (fingerprint.length) {\n    data.fingerprint = [...data.fingerprint, ...fingerprint];\n  }\n  if (eventProcessors.length) {\n    data.eventProcessors = [...data.eventProcessors, ...eventProcessors];\n  }\n  if (attachments.length) {\n    data.attachments = [...data.attachments, ...attachments];\n  }\n  data.propagationContext = {\n    ...data.propagationContext,\n    ...propagationContext\n  };\n}\n\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */\nfunction mergeAndOverwriteScopeData(data, prop, mergeVal) {\n  data[prop] = merge.merge(data[prop], mergeVal, 1);\n}\nfunction applyDataToEvent(event, data) {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    transactionName\n  } = data;\n  const cleanedExtra = object.dropUndefinedKeys(extra);\n  if (cleanedExtra && Object.keys(cleanedExtra).length) {\n    event.extra = {\n      ...cleanedExtra,\n      ...event.extra\n    };\n  }\n  const cleanedTags = object.dropUndefinedKeys(tags);\n  if (cleanedTags && Object.keys(cleanedTags).length) {\n    event.tags = {\n      ...cleanedTags,\n      ...event.tags\n    };\n  }\n  const cleanedUser = object.dropUndefinedKeys(user);\n  if (cleanedUser && Object.keys(cleanedUser).length) {\n    event.user = {\n      ...cleanedUser,\n      ...event.user\n    };\n  }\n  const cleanedContexts = object.dropUndefinedKeys(contexts);\n  if (cleanedContexts && Object.keys(cleanedContexts).length) {\n    event.contexts = {\n      ...cleanedContexts,\n      ...event.contexts\n    };\n  }\n  if (level) {\n    event.level = level;\n  }\n\n  // transaction events get their `transaction` from the root span name\n  if (transactionName && event.type !== 'transaction') {\n    event.transaction = transactionName;\n  }\n}\nfunction applyBreadcrumbsToEvent(event, breadcrumbs) {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\nfunction applySdkMetadataToEvent(event, sdkProcessingMetadata) {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata\n  };\n}\nfunction applySpanToEvent(event, span) {\n  event.contexts = {\n    trace: spanUtils.spanToTraceContext(span),\n    ...event.contexts\n  };\n  event.sdkProcessingMetadata = {\n    dynamicSamplingContext: dynamicSamplingContext.getDynamicSamplingContextFromSpan(span),\n    ...event.sdkProcessingMetadata\n  };\n  const rootSpan = spanUtils.getRootSpan(span);\n  const transactionName = spanUtils.spanToJSON(rootSpan).description;\n  if (transactionName && !event.transaction && event.type === 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event, fingerprint) {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (event.fingerprint && !event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\nexports.applyScopeDataToEvent = applyScopeDataToEvent;\nexports.mergeAndOverwriteScopeData = mergeAndOverwriteScopeData;\nexports.mergeScopeData = mergeScopeData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst is = __webpack_require__(/*! ../utils-hoist/is.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/is.js\");\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nfunction handleCallbackErrors(fn, onError,\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nonFinally = () => {}) {\n  let maybePromiseResult;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection(value, onError, onFinally) {\n  if (is.isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(res => {\n      onFinally();\n      return res;\n    }, e => {\n      onError(e);\n      onFinally();\n      throw e;\n    });\n  }\n  onFinally();\n  return value;\n}\nexports.handleCallbackErrors = handleCallbackErrors;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaGFuZGxlQ2FsbGJhY2tFcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxFQUFFLEdBQUdDLG1CQUFPLENBQUMsa0dBQXNCLENBQUM7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxvQkFBb0JBLENBRzNCQyxFQUFFLEVBQ0ZDLE9BQU87QUFDUDtBQUNBQyxTQUFTLEdBQUdBLENBQUEsS0FBTSxDQUFDLENBQUMsRUFDcEI7RUFDQSxJQUFJQyxrQkFBa0I7RUFDdEIsSUFBSTtJQUNGQSxrQkFBa0IsR0FBR0gsRUFBRSxDQUFDLENBQUM7RUFDM0IsQ0FBQyxDQUFDLE9BQU9JLENBQUMsRUFBRTtJQUNWSCxPQUFPLENBQUNHLENBQUMsQ0FBQztJQUNWRixTQUFTLENBQUMsQ0FBQztJQUNYLE1BQU1FLENBQUM7RUFDVDtFQUVBLE9BQU9DLDJCQUEyQixDQUFDRixrQkFBa0IsRUFBRUYsT0FBTyxFQUFFQyxTQUFTLENBQUM7QUFDNUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0csMkJBQTJCQSxDQUNsQ1QsS0FBSyxFQUNMSyxPQUFPLEVBQ1BDLFNBQVMsRUFDVDtFQUNBLElBQUlMLEVBQUUsQ0FBQ1MsVUFBVSxDQUFDVixLQUFLLENBQUMsRUFBRTtJQUN4QjtJQUNBLE9BQU9BLEtBQUssQ0FBQ1csSUFBSSxDQUNmQyxHQUFHLElBQUk7TUFDTE4sU0FBUyxDQUFDLENBQUM7TUFDWCxPQUFPTSxHQUFHO0lBQ1osQ0FBQyxFQUNESixDQUFDLElBQUk7TUFDSEgsT0FBTyxDQUFDRyxDQUFDLENBQUM7TUFDVkYsU0FBUyxDQUFDLENBQUM7TUFDWCxNQUFNRSxDQUFDO0lBQ1QsQ0FDRixDQUFDO0VBQ0g7RUFFQUYsU0FBUyxDQUFDLENBQUM7RUFDWCxPQUFPTixLQUFLO0FBQ2Q7QUFFQUQsNEJBQTRCLEdBQUdJLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9oYW5kbGVDYWxsYmFja0Vycm9ycy5qcz81ODRhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGlzID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvaXMuanMnKTtcblxuLyoqXG4gKiBXcmFwIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2l0aCBlcnJvciBoYW5kbGluZy5cbiAqIElmIGFuIGVycm9yIGlzIHRocm93biwgaXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGBvbkVycm9yYCBjYWxsYmFjayBhbmQgcmUtdGhyb3duLlxuICpcbiAqIElmIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIGlzIGEgcHJvbWlzZSwgaXQgd2lsbCBiZSBoYW5kbGVkIHdpdGggYG1heWJlSGFuZGxlUHJvbWlzZVJlamVjdGlvbmAuXG4gKlxuICogSWYgYW4gYG9uRmluYWxseWAgY2FsbGJhY2sgaXMgcHJvdmlkZWQsIHRoaXMgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgY2FsbGJhY2sgaGFzIGZpbmlzaGVkXG4gKiAtIHNvIGlmIGl0IHJldHVybnMgYSBwcm9taXNlLCBvbmNlIHRoZSBwcm9taXNlIHJlc29sdmVkL3JlamVjdGVkLFxuICogZWxzZSBvbmNlIHRoZSBjYWxsYmFjayBoYXMgZmluaXNoZWQgZXhlY3V0aW5nLlxuICogVGhlIGBvbkZpbmFsbHlgIGNhbGxiYWNrIHdpbGwgX2Fsd2F5c18gYmUgY2FsbGVkLCBubyBtYXR0ZXIgaWYgYW4gZXJyb3Igd2FzIHRocm93biBvciBub3QuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUNhbGxiYWNrRXJyb3JzXG5cbihcbiAgZm4sXG4gIG9uRXJyb3IsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgb25GaW5hbGx5ID0gKCkgPT4ge30sXG4pIHtcbiAgbGV0IG1heWJlUHJvbWlzZVJlc3VsdDtcbiAgdHJ5IHtcbiAgICBtYXliZVByb21pc2VSZXN1bHQgPSBmbigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgb25FcnJvcihlKTtcbiAgICBvbkZpbmFsbHkoKTtcbiAgICB0aHJvdyBlO1xuICB9XG5cbiAgcmV0dXJuIG1heWJlSGFuZGxlUHJvbWlzZVJlamVjdGlvbihtYXliZVByb21pc2VSZXN1bHQsIG9uRXJyb3IsIG9uRmluYWxseSk7XG59XG5cbi8qKlxuICogTWF5YmUgaGFuZGxlIGEgcHJvbWlzZSByZWplY3Rpb24uXG4gKiBUaGlzIGV4cGVjdHMgdG8gYmUgZ2l2ZW4gYSB2YWx1ZSB0aGF0IF9tYXlfIGJlIGEgcHJvbWlzZSwgb3IgYW55IG90aGVyIHZhbHVlLlxuICogSWYgaXQgaXMgYSBwcm9taXNlLCBhbmQgaXQgcmVqZWN0cywgaXQgd2lsbCBjYWxsIHRoZSBgb25FcnJvcmAgY2FsbGJhY2suXG4gKiBPdGhlciB0aGFuIHRoaXMsIGl0IHdpbGwgZ2VuZXJhbGx5IHJldHVybiB0aGUgZ2l2ZW4gdmFsdWUgYXMtaXMuXG4gKi9cbmZ1bmN0aW9uIG1heWJlSGFuZGxlUHJvbWlzZVJlamVjdGlvbihcbiAgdmFsdWUsXG4gIG9uRXJyb3IsXG4gIG9uRmluYWxseSxcbikge1xuICBpZiAoaXMuaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gdGhlIGlzVGhlbmFibGUgY2hlY2sgcmV0dXJucyB0aGUgXCJ3cm9uZ1wiIHR5cGUgaGVyZVxuICAgIHJldHVybiB2YWx1ZS50aGVuKFxuICAgICAgcmVzID0+IHtcbiAgICAgICAgb25GaW5hbGx5KCk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9LFxuICAgICAgZSA9PiB7XG4gICAgICAgIG9uRXJyb3IoZSk7XG4gICAgICAgIG9uRmluYWxseSgpO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgb25GaW5hbGx5KCk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0cy5oYW5kbGVDYWxsYmFja0Vycm9ycyA9IGhhbmRsZUNhbGxiYWNrRXJyb3JzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFuZGxlQ2FsbGJhY2tFcnJvcnMuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpcyIsInJlcXVpcmUiLCJoYW5kbGVDYWxsYmFja0Vycm9ycyIsImZuIiwib25FcnJvciIsIm9uRmluYWxseSIsIm1heWJlUHJvbWlzZVJlc3VsdCIsImUiLCJtYXliZUhhbmRsZVByb21pc2VSZWplY3Rpb24iLCJpc1RoZW5hYmxlIiwidGhlbiIsInJlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js":
/*!************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\n\n// Treeshakable guard to remove all code related to tracing\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nfunction hasTracingEnabled(maybeOptions) {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n  const client = currentScopes.getClient();\n  const options = maybeOptions || client && client.getOptions();\n  // eslint-disable-next-line deprecation/deprecation\n  return !!options && (options.enableTracing || 'tracesSampleRate' in options || 'tracesSampler' in options);\n}\nexports.hasTracingEnabled = hasTracingEnabled;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaGFzVHJhY2luZ0VuYWJsZWQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsZ0dBQXFCLENBQUM7O0FBRXBEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxpQkFBaUJBLENBQ3hCQyxZQUFZLEVBQ1o7RUFDQSxJQUFJLE9BQU9DLGtCQUFrQixLQUFLLFNBQVMsSUFBSSxDQUFDQSxrQkFBa0IsRUFBRTtJQUNsRSxPQUFPLEtBQUs7RUFDZDtFQUVBLE1BQU1DLE1BQU0sR0FBR0wsYUFBYSxDQUFDTSxTQUFTLENBQUMsQ0FBQztFQUN4QyxNQUFNQyxPQUFPLEdBQUdKLFlBQVksSUFBS0UsTUFBTSxJQUFJQSxNQUFNLENBQUNHLFVBQVUsQ0FBQyxDQUFFO0VBQy9EO0VBQ0EsT0FBTyxDQUFDLENBQUNELE9BQU8sS0FBS0EsT0FBTyxDQUFDRSxhQUFhLElBQUksa0JBQWtCLElBQUlGLE9BQU8sSUFBSSxlQUFlLElBQUlBLE9BQU8sQ0FBQztBQUM1RztBQUVBVCx5QkFBeUIsR0FBR0ksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL2hhc1RyYWNpbmdFbmFibGVkLmpzP2VhZGMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY3VycmVudFNjb3BlcyA9IHJlcXVpcmUoJy4uL2N1cnJlbnRTY29wZXMuanMnKTtcblxuLy8gVHJlZXNoYWthYmxlIGd1YXJkIHRvIHJlbW92ZSBhbGwgY29kZSByZWxhdGVkIHRvIHRyYWNpbmdcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRyYWNpbmcgaXMgY3VycmVudGx5IGVuYWJsZWQuXG4gKlxuICogVHJhY2luZyBpcyBlbmFibGVkIHdoZW4gYXQgbGVhc3Qgb25lIG9mIGB0cmFjZXNTYW1wbGVSYXRlYCBhbmQgYHRyYWNlc1NhbXBsZXJgIGlzIGRlZmluZWQgaW4gdGhlIFNESyBjb25maWcuXG4gKi9cbmZ1bmN0aW9uIGhhc1RyYWNpbmdFbmFibGVkKFxuICBtYXliZU9wdGlvbnMsXG4pIHtcbiAgaWYgKHR5cGVvZiBfX1NFTlRSWV9UUkFDSU5HX18gPT09ICdib29sZWFuJyAmJiAhX19TRU5UUllfVFJBQ0lOR19fKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgY2xpZW50ID0gY3VycmVudFNjb3Blcy5nZXRDbGllbnQoKTtcbiAgY29uc3Qgb3B0aW9ucyA9IG1heWJlT3B0aW9ucyB8fCAoY2xpZW50ICYmIGNsaWVudC5nZXRPcHRpb25zKCkpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgcmV0dXJuICEhb3B0aW9ucyAmJiAob3B0aW9ucy5lbmFibGVUcmFjaW5nIHx8ICd0cmFjZXNTYW1wbGVSYXRlJyBpbiBvcHRpb25zIHx8ICd0cmFjZXNTYW1wbGVyJyBpbiBvcHRpb25zKTtcbn1cblxuZXhwb3J0cy5oYXNUcmFjaW5nRW5hYmxlZCA9IGhhc1RyYWNpbmdFbmFibGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzVHJhY2luZ0VuYWJsZWQuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjdXJyZW50U2NvcGVzIiwicmVxdWlyZSIsImhhc1RyYWNpbmdFbmFibGVkIiwibWF5YmVPcHRpb25zIiwiX19TRU5UUllfVFJBQ0lOR19fIiwiY2xpZW50IiwiZ2V0Q2xpZW50Iiwib3B0aW9ucyIsImdldE9wdGlvbnMiLCJlbmFibGVUcmFjaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Checks whether given url points to Sentry server\n *\n * @param url url to verify\n */\nfunction isSentryRequestUrl(url, client) {\n  const dsn = client && client.getDsn();\n  const tunnel = client && client.getOptions().tunnel;\n  return checkDsn(url, dsn) || checkTunnel(url, tunnel);\n}\nfunction checkTunnel(url, tunnel) {\n  if (!tunnel) {\n    return false;\n  }\n  return removeTrailingSlash(url) === removeTrailingSlash(tunnel);\n}\nfunction checkDsn(url, dsn) {\n  return dsn ? url.includes(dsn.host) : false;\n}\nfunction removeTrailingSlash(str) {\n  return str[str.length - 1] === '/' ? str.slice(0, -1) : str;\n}\nexports.isSentryRequestUrl = isSentryRequestUrl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvaXNTZW50cnlSZXF1ZXN0VXJsLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxrQkFBa0JBLENBQUNDLEdBQUcsRUFBRUMsTUFBTSxFQUFFO0VBQ3ZDLE1BQU1DLEdBQUcsR0FBR0QsTUFBTSxJQUFJQSxNQUFNLENBQUNFLE1BQU0sQ0FBQyxDQUFDO0VBQ3JDLE1BQU1DLE1BQU0sR0FBR0gsTUFBTSxJQUFJQSxNQUFNLENBQUNJLFVBQVUsQ0FBQyxDQUFDLENBQUNELE1BQU07RUFDbkQsT0FBT0UsUUFBUSxDQUFDTixHQUFHLEVBQUVFLEdBQUcsQ0FBQyxJQUFJSyxXQUFXLENBQUNQLEdBQUcsRUFBRUksTUFBTSxDQUFDO0FBQ3ZEO0FBRUEsU0FBU0csV0FBV0EsQ0FBQ1AsR0FBRyxFQUFFSSxNQUFNLEVBQUU7RUFDaEMsSUFBSSxDQUFDQSxNQUFNLEVBQUU7SUFDWCxPQUFPLEtBQUs7RUFDZDtFQUVBLE9BQU9JLG1CQUFtQixDQUFDUixHQUFHLENBQUMsS0FBS1EsbUJBQW1CLENBQUNKLE1BQU0sQ0FBQztBQUNqRTtBQUVBLFNBQVNFLFFBQVFBLENBQUNOLEdBQUcsRUFBRUUsR0FBRyxFQUFFO0VBQzFCLE9BQU9BLEdBQUcsR0FBR0YsR0FBRyxDQUFDUyxRQUFRLENBQUNQLEdBQUcsQ0FBQ1EsSUFBSSxDQUFDLEdBQUcsS0FBSztBQUM3QztBQUVBLFNBQVNGLG1CQUFtQkEsQ0FBQ0csR0FBRyxFQUFFO0VBQ2hDLE9BQU9BLEdBQUcsQ0FBQ0EsR0FBRyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHRCxHQUFHLENBQUNFLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBR0YsR0FBRztBQUM3RDtBQUVBZCwwQkFBMEIsR0FBR0Usa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L2NvcmUvYnVpbGQvY2pzL3V0aWxzL2lzU2VudHJ5UmVxdWVzdFVybC5qcz80MjVhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgZ2l2ZW4gdXJsIHBvaW50cyB0byBTZW50cnkgc2VydmVyXG4gKlxuICogQHBhcmFtIHVybCB1cmwgdG8gdmVyaWZ5XG4gKi9cbmZ1bmN0aW9uIGlzU2VudHJ5UmVxdWVzdFVybCh1cmwsIGNsaWVudCkge1xuICBjb25zdCBkc24gPSBjbGllbnQgJiYgY2xpZW50LmdldERzbigpO1xuICBjb25zdCB0dW5uZWwgPSBjbGllbnQgJiYgY2xpZW50LmdldE9wdGlvbnMoKS50dW5uZWw7XG4gIHJldHVybiBjaGVja0Rzbih1cmwsIGRzbikgfHwgY2hlY2tUdW5uZWwodXJsLCB0dW5uZWwpO1xufVxuXG5mdW5jdGlvbiBjaGVja1R1bm5lbCh1cmwsIHR1bm5lbCkge1xuICBpZiAoIXR1bm5lbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiByZW1vdmVUcmFpbGluZ1NsYXNoKHVybCkgPT09IHJlbW92ZVRyYWlsaW5nU2xhc2godHVubmVsKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tEc24odXJsLCBkc24pIHtcbiAgcmV0dXJuIGRzbiA/IHVybC5pbmNsdWRlcyhkc24uaG9zdCkgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlVHJhaWxpbmdTbGFzaChzdHIpIHtcbiAgcmV0dXJuIHN0cltzdHIubGVuZ3RoIC0gMV0gPT09ICcvJyA/IHN0ci5zbGljZSgwLCAtMSkgOiBzdHI7XG59XG5cbmV4cG9ydHMuaXNTZW50cnlSZXF1ZXN0VXJsID0gaXNTZW50cnlSZXF1ZXN0VXJsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTZW50cnlSZXF1ZXN0VXJsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNTZW50cnlSZXF1ZXN0VXJsIiwidXJsIiwiY2xpZW50IiwiZHNuIiwiZ2V0RHNuIiwidHVubmVsIiwiZ2V0T3B0aW9ucyIsImNoZWNrRHNuIiwiY2hlY2tUdW5uZWwiLCJyZW1vdmVUcmFpbGluZ1NsYXNoIiwiaW5jbHVkZXMiLCJob3N0Iiwic3RyIiwibGVuZ3RoIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js":
/*!************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/merge.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Shallow merge two objects.\n * Does not mutate the passed in objects.\n * Undefined/empty values in the merge object will overwrite existing values.\n *\n * By default, this merges 2 levels deep.\n */\nfunction merge(initialObj, mergeObj, levels = 2) {\n  // If the merge value is not an object, or we have no merge levels left,\n  // we just set the value to the merge value\n  if (!mergeObj || typeof mergeObj !== 'object' || levels <= 0) {\n    return mergeObj;\n  }\n\n  // If the merge object is an empty object, and the initial object is not undefined, we return the initial object\n  if (initialObj && mergeObj && Object.keys(mergeObj).length === 0) {\n    return initialObj;\n  }\n\n  // Clone object\n  const output = {\n    ...initialObj\n  };\n\n  // Merge values into output, resursively\n  for (const key in mergeObj) {\n    if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {\n      output[key] = merge(output[key], mergeObj[key], levels - 1);\n    }\n  }\n  return output;\n}\nexports.merge = merge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbWVyZ2UuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxLQUFLQSxDQUFDQyxVQUFVLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxHQUFHLENBQUMsRUFBRTtFQUMvQztFQUNBO0VBQ0EsSUFBSSxDQUFDRCxRQUFRLElBQUksT0FBT0EsUUFBUSxLQUFLLFFBQVEsSUFBSUMsTUFBTSxJQUFJLENBQUMsRUFBRTtJQUM1RCxPQUFPRCxRQUFRO0VBQ2pCOztFQUVBO0VBQ0EsSUFBSUQsVUFBVSxJQUFJQyxRQUFRLElBQUlOLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDRixRQUFRLENBQUMsQ0FBQ0csTUFBTSxLQUFLLENBQUMsRUFBRTtJQUNoRSxPQUFPSixVQUFVO0VBQ25COztFQUVBO0VBQ0EsTUFBTUssTUFBTSxHQUFHO0lBQUUsR0FBR0w7RUFBVyxDQUFDOztFQUVoQztFQUNBLEtBQUssTUFBTU0sR0FBRyxJQUFJTCxRQUFRLEVBQUU7SUFDMUIsSUFBSU4sTUFBTSxDQUFDWSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUixRQUFRLEVBQUVLLEdBQUcsQ0FBQyxFQUFFO01BQ3ZERCxNQUFNLENBQUNDLEdBQUcsQ0FBQyxHQUFHUCxLQUFLLENBQUNNLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLEVBQUVMLFFBQVEsQ0FBQ0ssR0FBRyxDQUFDLEVBQUVKLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDN0Q7RUFDRjtFQUVBLE9BQU9HLE1BQU07QUFDZjtBQUVBUixhQUFhLEdBQUdFLEtBQUsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbWVyZ2UuanM/Y2E5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFNoYWxsb3cgbWVyZ2UgdHdvIG9iamVjdHMuXG4gKiBEb2VzIG5vdCBtdXRhdGUgdGhlIHBhc3NlZCBpbiBvYmplY3RzLlxuICogVW5kZWZpbmVkL2VtcHR5IHZhbHVlcyBpbiB0aGUgbWVyZ2Ugb2JqZWN0IHdpbGwgb3ZlcndyaXRlIGV4aXN0aW5nIHZhbHVlcy5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGlzIG1lcmdlcyAyIGxldmVscyBkZWVwLlxuICovXG5mdW5jdGlvbiBtZXJnZShpbml0aWFsT2JqLCBtZXJnZU9iaiwgbGV2ZWxzID0gMikge1xuICAvLyBJZiB0aGUgbWVyZ2UgdmFsdWUgaXMgbm90IGFuIG9iamVjdCwgb3Igd2UgaGF2ZSBubyBtZXJnZSBsZXZlbHMgbGVmdCxcbiAgLy8gd2UganVzdCBzZXQgdGhlIHZhbHVlIHRvIHRoZSBtZXJnZSB2YWx1ZVxuICBpZiAoIW1lcmdlT2JqIHx8IHR5cGVvZiBtZXJnZU9iaiAhPT0gJ29iamVjdCcgfHwgbGV2ZWxzIDw9IDApIHtcbiAgICByZXR1cm4gbWVyZ2VPYmo7XG4gIH1cblxuICAvLyBJZiB0aGUgbWVyZ2Ugb2JqZWN0IGlzIGFuIGVtcHR5IG9iamVjdCwgYW5kIHRoZSBpbml0aWFsIG9iamVjdCBpcyBub3QgdW5kZWZpbmVkLCB3ZSByZXR1cm4gdGhlIGluaXRpYWwgb2JqZWN0XG4gIGlmIChpbml0aWFsT2JqICYmIG1lcmdlT2JqICYmIE9iamVjdC5rZXlzKG1lcmdlT2JqKS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gaW5pdGlhbE9iajtcbiAgfVxuXG4gIC8vIENsb25lIG9iamVjdFxuICBjb25zdCBvdXRwdXQgPSB7IC4uLmluaXRpYWxPYmogfTtcblxuICAvLyBNZXJnZSB2YWx1ZXMgaW50byBvdXRwdXQsIHJlc3Vyc2l2ZWx5XG4gIGZvciAoY29uc3Qga2V5IGluIG1lcmdlT2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXJnZU9iaiwga2V5KSkge1xuICAgICAgb3V0cHV0W2tleV0gPSBtZXJnZShvdXRwdXRba2V5XSwgbWVyZ2VPYmpba2V5XSwgbGV2ZWxzIC0gMSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZXhwb3J0cy5tZXJnZSA9IG1lcmdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtZXJnZSIsImluaXRpYWxPYmoiLCJtZXJnZU9iaiIsImxldmVscyIsImtleXMiLCJsZW5ndGgiLCJvdXRwdXQiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/merge.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/meta.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/meta.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst traceData = __webpack_require__(/*! ./traceData.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\");\n\n/**\n * Returns a string of meta tags that represent the current trace data.\n *\n * You can use this to propagate a trace from your server-side rendered Html to the browser.\n * This function returns up to two meta tags, `sentry-trace` and `baggage`, depending on the\n * current trace data state.\n *\n * @example\n * Usage example:\n *\n * ```js\n * function renderHtml() {\n *   return `\n *     <head>\n *       ${getTraceMetaTags()}\n *     </head>\n *   `;\n * }\n * ```\n *\n */\nfunction getTraceMetaTags() {\n  return Object.entries(traceData.getTraceData()).map(([key, value]) => `<meta name=\"${key}\" content=\"${value}\"/>`).join('\\n');\n}\nexports.getTraceMetaTags = getTraceMetaTags;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvbWV0YS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyw2RkFBZ0IsQ0FBQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZ0JBQWdCQSxDQUFBLEVBQUc7RUFDMUIsT0FBT04sTUFBTSxDQUFDTyxPQUFPLENBQUNILFNBQVMsQ0FBQ0ksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUM1Q0MsR0FBRyxDQUFDLENBQUMsQ0FBQ0MsR0FBRyxFQUFFUCxLQUFLLENBQUMsS0FBTSxlQUFjTyxHQUFJLGNBQWFQLEtBQU0sS0FBSSxDQUFDLENBQ2pFUSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ2Y7QUFFQVQsd0JBQXdCLEdBQUdJLGdCQUFnQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9jb3JlL2J1aWxkL2Nqcy91dGlscy9tZXRhLmpzP2Q4OGIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgdHJhY2VEYXRhID0gcmVxdWlyZSgnLi90cmFjZURhdGEuanMnKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIG9mIG1ldGEgdGFncyB0aGF0IHJlcHJlc2VudCB0aGUgY3VycmVudCB0cmFjZSBkYXRhLlxuICpcbiAqIFlvdSBjYW4gdXNlIHRoaXMgdG8gcHJvcGFnYXRlIGEgdHJhY2UgZnJvbSB5b3VyIHNlcnZlci1zaWRlIHJlbmRlcmVkIEh0bWwgdG8gdGhlIGJyb3dzZXIuXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdXAgdG8gdHdvIG1ldGEgdGFncywgYHNlbnRyeS10cmFjZWAgYW5kIGBiYWdnYWdlYCwgZGVwZW5kaW5nIG9uIHRoZVxuICogY3VycmVudCB0cmFjZSBkYXRhIHN0YXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBVc2FnZSBleGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiByZW5kZXJIdG1sKCkge1xuICogICByZXR1cm4gYFxuICogICAgIDxoZWFkPlxuICogICAgICAgJHtnZXRUcmFjZU1ldGFUYWdzKCl9XG4gKiAgICAgPC9oZWFkPlxuICogICBgO1xuICogfVxuICogYGBgXG4gKlxuICovXG5mdW5jdGlvbiBnZXRUcmFjZU1ldGFUYWdzKCkge1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXModHJhY2VEYXRhLmdldFRyYWNlRGF0YSgpKVxuICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4gYDxtZXRhIG5hbWU9XCIke2tleX1cIiBjb250ZW50PVwiJHt2YWx1ZX1cIi8+YClcbiAgICAuam9pbignXFxuJyk7XG59XG5cbmV4cG9ydHMuZ2V0VHJhY2VNZXRhVGFncyA9IGdldFRyYWNlTWV0YVRhZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhLmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHJhY2VEYXRhIiwicmVxdWlyZSIsImdldFRyYWNlTWV0YVRhZ3MiLCJlbnRyaWVzIiwiZ2V0VHJhY2VEYXRhIiwibWFwIiwia2V5Iiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/meta.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/parameterize.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/parameterize.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * Tagged template function which returns parameterized representation of the message\n * For example: parameterize`This is a log statement with ${x} and ${y} params`, would return:\n * \"__sentry_template_string__\": 'This is a log statement with %s and %s params',\n * \"__sentry_template_values__\": ['first', 'second']\n * @param strings An array of string values splitted between expressions\n * @param values Expressions extracted from template string\n * @returns String with template information in __sentry_template_string__ and __sentry_template_values__ properties\n */\nfunction parameterize(strings, ...values) {\n  const formatted = new String(String.raw(strings, ...values));\n  formatted.__sentry_template_string__ = strings.join('\\x00').replace(/%/g, '%%').replace(/\\0/g, '%s');\n  formatted.__sentry_template_values__ = values;\n  return formatted;\n}\nexports.parameterize = parameterize;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcGFyYW1ldGVyaXplLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFlBQVlBLENBQUNDLE9BQU8sRUFBRSxHQUFHQyxNQUFNLEVBQUU7RUFDeEMsTUFBTUMsU0FBUyxHQUFHLElBQUlDLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDQyxHQUFHLENBQUNKLE9BQU8sRUFBRSxHQUFHQyxNQUFNLENBQUMsQ0FBQztFQUM1REMsU0FBUyxDQUFDRywwQkFBMEIsR0FBR0wsT0FBTyxDQUFDTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUNBLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO0VBQ3BHTCxTQUFTLENBQUNNLDBCQUEwQixHQUFHUCxNQUFNO0VBQzdDLE9BQU9DLFNBQVM7QUFDbEI7QUFFQUwsb0JBQW9CLEdBQUdFLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcGFyYW1ldGVyaXplLmpzPzU2MzQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyoqXG4gKiBUYWdnZWQgdGVtcGxhdGUgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBwYXJhbWV0ZXJpemVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtZXNzYWdlXG4gKiBGb3IgZXhhbXBsZTogcGFyYW1ldGVyaXplYFRoaXMgaXMgYSBsb2cgc3RhdGVtZW50IHdpdGggJHt4fSBhbmQgJHt5fSBwYXJhbXNgLCB3b3VsZCByZXR1cm46XG4gKiBcIl9fc2VudHJ5X3RlbXBsYXRlX3N0cmluZ19fXCI6ICdUaGlzIGlzIGEgbG9nIHN0YXRlbWVudCB3aXRoICVzIGFuZCAlcyBwYXJhbXMnLFxuICogXCJfX3NlbnRyeV90ZW1wbGF0ZV92YWx1ZXNfX1wiOiBbJ2ZpcnN0JywgJ3NlY29uZCddXG4gKiBAcGFyYW0gc3RyaW5ncyBBbiBhcnJheSBvZiBzdHJpbmcgdmFsdWVzIHNwbGl0dGVkIGJldHdlZW4gZXhwcmVzc2lvbnNcbiAqIEBwYXJhbSB2YWx1ZXMgRXhwcmVzc2lvbnMgZXh0cmFjdGVkIGZyb20gdGVtcGxhdGUgc3RyaW5nXG4gKiBAcmV0dXJucyBTdHJpbmcgd2l0aCB0ZW1wbGF0ZSBpbmZvcm1hdGlvbiBpbiBfX3NlbnRyeV90ZW1wbGF0ZV9zdHJpbmdfXyBhbmQgX19zZW50cnlfdGVtcGxhdGVfdmFsdWVzX18gcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBwYXJhbWV0ZXJpemUoc3RyaW5ncywgLi4udmFsdWVzKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IG5ldyBTdHJpbmcoU3RyaW5nLnJhdyhzdHJpbmdzLCAuLi52YWx1ZXMpKSA7XG4gIGZvcm1hdHRlZC5fX3NlbnRyeV90ZW1wbGF0ZV9zdHJpbmdfXyA9IHN0cmluZ3Muam9pbignXFx4MDAnKS5yZXBsYWNlKC8lL2csICclJScpLnJlcGxhY2UoL1xcMC9nLCAnJXMnKTtcbiAgZm9ybWF0dGVkLl9fc2VudHJ5X3RlbXBsYXRlX3ZhbHVlc19fID0gdmFsdWVzO1xuICByZXR1cm4gZm9ybWF0dGVkO1xufVxuXG5leHBvcnRzLnBhcmFtZXRlcml6ZSA9IHBhcmFtZXRlcml6ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcmFtZXRlcml6ZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBhcmFtZXRlcml6ZSIsInN0cmluZ3MiLCJ2YWx1ZXMiLCJmb3JtYXR0ZWQiLCJTdHJpbmciLCJyYXciLCJfX3NlbnRyeV90ZW1wbGF0ZV9zdHJpbmdfXyIsImpvaW4iLCJyZXBsYWNlIiwiX19zZW50cnlfdGVtcGxhdGVfdmFsdWVzX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/parameterize.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n\n/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nfunction parseSampleRate(sampleRate) {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    debugBuild.DEBUG_BUILD && logger.logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(sampleRate)} of type ${JSON.stringify(typeof sampleRate)}.`);\n    return undefined;\n  }\n  return rate;\n}\nexports.parseSampleRate = parseSampleRate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcGFyc2VTYW1wbGVSYXRlLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLDRGQUFtQixDQUFDO0FBQy9DLE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQywwR0FBMEIsQ0FBQzs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxlQUFlQSxDQUFDQyxVQUFVLEVBQUU7RUFDbkMsSUFBSSxPQUFPQSxVQUFVLEtBQUssU0FBUyxFQUFFO0lBQ25DLE9BQU9DLE1BQU0sQ0FBQ0QsVUFBVSxDQUFDO0VBQzNCO0VBRUEsTUFBTUUsSUFBSSxHQUFHLE9BQU9GLFVBQVUsS0FBSyxRQUFRLEdBQUdHLFVBQVUsQ0FBQ0gsVUFBVSxDQUFDLEdBQUdBLFVBQVU7RUFDakYsSUFBSSxPQUFPRSxJQUFJLEtBQUssUUFBUSxJQUFJRSxLQUFLLENBQUNGLElBQUksQ0FBQyxJQUFJQSxJQUFJLEdBQUcsQ0FBQyxJQUFJQSxJQUFJLEdBQUcsQ0FBQyxFQUFFO0lBQ25FTixVQUFVLENBQUNTLFdBQVcsSUFDcEJQLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDUSxJQUFJLENBQ2YsMEdBQXlHQyxJQUFJLENBQUNDLFNBQVMsQ0FDdEhSLFVBQ0YsQ0FBRSxZQUFXTyxJQUFJLENBQUNDLFNBQVMsQ0FBQyxPQUFPUixVQUFVLENBQUUsR0FDakQsQ0FBQztJQUNILE9BQU9TLFNBQVM7RUFDbEI7RUFFQSxPQUFPUCxJQUFJO0FBQ2I7QUFFQVIsdUJBQXVCLEdBQUdLLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvcGFyc2VTYW1wbGVSYXRlLmpzPzM4NWYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnKTtcblxuLyoqXG4gKiBQYXJzZSBhIHNhbXBsZSByYXRlIGZyb20gYSBnaXZlbiB2YWx1ZS5cbiAqIFRoaXMgd2lsbCBlaXRoZXIgcmV0dXJuIGEgYm9vbGVhbiBvciBudW1iZXIgc2FtcGxlIHJhdGUsIGlmIHRoZSBzYW1wbGUgcmF0ZSBpcyB2YWxpZCAoYmV0d2VlbiAwIGFuZCAxKS5cbiAqIElmIGEgc3RyaW5nIGlzIHBhc3NlZCwgd2UgdHJ5IHRvIGNvbnZlcnQgaXQgdG8gYSBudW1iZXIuXG4gKlxuICogQW55IGludmFsaWQgc2FtcGxlIHJhdGUgd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlU2FtcGxlUmF0ZShzYW1wbGVSYXRlKSB7XG4gIGlmICh0eXBlb2Ygc2FtcGxlUmF0ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIE51bWJlcihzYW1wbGVSYXRlKTtcbiAgfVxuXG4gIGNvbnN0IHJhdGUgPSB0eXBlb2Ygc2FtcGxlUmF0ZSA9PT0gJ3N0cmluZycgPyBwYXJzZUZsb2F0KHNhbXBsZVJhdGUpIDogc2FtcGxlUmF0ZTtcbiAgaWYgKHR5cGVvZiByYXRlICE9PSAnbnVtYmVyJyB8fCBpc05hTihyYXRlKSB8fCByYXRlIDwgMCB8fCByYXRlID4gMSkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgIGxvZ2dlci5sb2dnZXIud2FybihcbiAgICAgICAgYFtUcmFjaW5nXSBHaXZlbiBzYW1wbGUgcmF0ZSBpcyBpbnZhbGlkLiBTYW1wbGUgcmF0ZSBtdXN0IGJlIGEgYm9vbGVhbiBvciBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuIEdvdCAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHNhbXBsZVJhdGUsXG4gICAgICAgICl9IG9mIHR5cGUgJHtKU09OLnN0cmluZ2lmeSh0eXBlb2Ygc2FtcGxlUmF0ZSl9LmAsXG4gICAgICApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gcmF0ZTtcbn1cblxuZXhwb3J0cy5wYXJzZVNhbXBsZVJhdGUgPSBwYXJzZVNhbXBsZVJhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZVNhbXBsZVJhdGUuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWJ1Z0J1aWxkIiwicmVxdWlyZSIsImxvZ2dlciIsInBhcnNlU2FtcGxlUmF0ZSIsInNhbXBsZVJhdGUiLCJOdW1iZXIiLCJyYXRlIiwicGFyc2VGbG9hdCIsImlzTmFOIiwiREVCVUdfQlVJTEQiLCJ3YXJuIiwiSlNPTiIsInN0cmluZ2lmeSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst constants = __webpack_require__(/*! ../constants.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/constants.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst eventProcessors = __webpack_require__(/*! ../eventProcessors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/eventProcessors.js\");\nconst scope = __webpack_require__(/*! ../scope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/scope.js\");\nconst debugIds = __webpack_require__(/*! ../utils-hoist/debug-ids.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js\");\nconst misc = __webpack_require__(/*! ../utils-hoist/misc.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/misc.js\");\nconst normalize = __webpack_require__(/*! ../utils-hoist/normalize.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js\");\nconst string = __webpack_require__(/*! ../utils-hoist/string.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/string.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst applyScopeDataToEvent = __webpack_require__(/*! ./applyScopeDataToEvent.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js\");\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nfunction prepareEvent(options, event, hint, scope, client, isolationScope) {\n  const {\n    normalizeDepth = 3,\n    normalizeMaxBreadth = 1000\n  } = options;\n  const prepared = {\n    ...event,\n    event_id: event.event_id || hint.event_id || misc.uuid4(),\n    timestamp: event.timestamp || time.dateTimestampInSeconds()\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n  if (client) {\n    client.emit('applyFrameMetadata', event);\n  }\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  const finalScope = getFinalScope(scope, hint.captureContext);\n  if (hint.mechanism) {\n    misc.addExceptionMechanism(prepared, hint.mechanism);\n  }\n  const clientEventProcessors = client ? client.getEventProcessors() : [];\n\n  // This should be the last thing called, since we want that\n  // {@link Scope.addEventProcessor} gets the finished prepared event.\n  // Merge scope data together\n  const data = currentScopes.getGlobalScope().getScopeData();\n  if (isolationScope) {\n    const isolationData = isolationScope.getScopeData();\n    applyScopeDataToEvent.mergeScopeData(data, isolationData);\n  }\n  if (finalScope) {\n    const finalScopeData = finalScope.getScopeData();\n    applyScopeDataToEvent.mergeScopeData(data, finalScopeData);\n  }\n  const attachments = [...(hint.attachments || []), ...data.attachments];\n  if (attachments.length) {\n    hint.attachments = attachments;\n  }\n  applyScopeDataToEvent.applyScopeDataToEvent(prepared, data);\n  const eventProcessors$1 = [...clientEventProcessors,\n  // Run scope event processors _after_ all other processors\n  ...data.eventProcessors];\n  const result = eventProcessors.notifyEventProcessors(eventProcessors$1, prepared, hint);\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n * Enhances event using the client configuration.\n * It takes care of all \"static\" values like environment, release and `dist`,\n * as well as truncating overly long values.\n *\n * Only exported for tests.\n *\n * @param event event instance to be enhanced\n */\nfunction applyClientOptions(event, options) {\n  const {\n    environment,\n    release,\n    dist,\n    maxValueLength = 250\n  } = options;\n\n  // empty strings do not make sense for environment, release, and dist\n  // so we handle them the same as if they were not provided\n  event.environment = event.environment || environment || constants.DEFAULT_ENVIRONMENT;\n  if (!event.release && release) {\n    event.release = release;\n  }\n  if (!event.dist && dist) {\n    event.dist = dist;\n  }\n  if (event.message) {\n    event.message = string.truncate(event.message, maxValueLength);\n  }\n  const exception = event.exception && event.exception.values && event.exception.values[0];\n  if (exception && exception.value) {\n    exception.value = string.truncate(exception.value, maxValueLength);\n  }\n  const request = event.request;\n  if (request && request.url) {\n    request.url = string.truncate(request.url, maxValueLength);\n  }\n}\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nfunction applyDebugIds(event, stackParser) {\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = debugIds.getFilenameToDebugIdMap(stackParser);\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace.frames.forEach(frame => {\n        if (filenameDebugIdMap && frame.filename) {\n          frame.debug_id = filenameDebugIdMap[frame.filename];\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nfunction applyDebugMeta(event) {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap = {};\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    event.exception.values.forEach(exception => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      exception.stacktrace.frames.forEach(frame => {\n        if (frame.debug_id) {\n          if (frame.abs_path) {\n            filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n          } else if (frame.filename) {\n            filenameDebugIdMap[frame.filename] = frame.debug_id;\n          }\n          delete frame.debug_id;\n        }\n      });\n    });\n  } catch (e) {\n    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.\n  }\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.entries(filenameDebugIdMap).forEach(([filename, debug_id]) => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event, integrationNames) {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event, depth, maxBreadth) {\n  if (!event) {\n    return null;\n  }\n  const normalized = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize.normalize(b.data, depth, maxBreadth)\n        })\n      }))\n    }),\n    ...(event.user && {\n      user: normalize.normalize(event.user, depth, maxBreadth)\n    }),\n    ...(event.contexts && {\n      contexts: normalize.normalize(event.contexts, depth, maxBreadth)\n    }),\n    ...(event.extra && {\n      extra: normalize.normalize(event.extra, depth, maxBreadth)\n    })\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts && event.contexts.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize.normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      return {\n        ...span,\n        ...(span.data && {\n          data: normalize.normalize(span.data, depth, maxBreadth)\n        })\n      };\n    });\n  }\n\n  // event.contexts.flags (FeatureFlagContext) stores context for our feature\n  // flag integrations. It has a greater nesting depth than our other typed\n  // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want\n  // to skip this in case of conflicting, user-provided context.\n  if (event.contexts && event.contexts.flags && normalized.contexts) {\n    normalized.contexts.flags = normalize.normalize(event.contexts.flags, 3, maxBreadth);\n  }\n  return normalized;\n}\nfunction getFinalScope(scope$1, captureContext) {\n  if (!captureContext) {\n    return scope$1;\n  }\n  const finalScope = scope$1 ? scope$1.clone() : new scope.Scope();\n  finalScope.update(captureContext);\n  return finalScope;\n}\n\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */\nfunction parseEventHintOrCaptureContext(hint) {\n  if (!hint) {\n    return undefined;\n  }\n\n  // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n  if (hintIsScopeOrFunction(hint)) {\n    return {\n      captureContext: hint\n    };\n  }\n  if (hintIsScopeContext(hint)) {\n    return {\n      captureContext: hint\n    };\n  }\n  return hint;\n}\nfunction hintIsScopeOrFunction(hint) {\n  return hint instanceof scope.Scope || typeof hint === 'function';\n}\nconst captureContextKeys = ['user', 'level', 'extra', 'contexts', 'tags', 'fingerprint', 'requestSession', 'propagationContext'];\nfunction hintIsScopeContext(hint) {\n  return Object.keys(hint).some(key => captureContextKeys.includes(key));\n}\nexports.applyClientOptions = applyClientOptions;\nexports.applyDebugIds = applyDebugIds;\nexports.applyDebugMeta = applyDebugMeta;\nexports.parseEventHintOrCaptureContext = parseEventHintOrCaptureContext;\nexports.prepareEvent = prepareEvent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/prepareEvent.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst version = __webpack_require__(/*! ../utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */\nfunction applySdkMetadata(options, name, names = [name], source = 'npm') {\n  const metadata = options._metadata || {};\n  if (!metadata.sdk) {\n    metadata.sdk = {\n      name: `sentry.javascript.${name}`,\n      packages: names.map(name => ({\n        name: `${source}:@sentry/${name}`,\n        version: version.SDK_VERSION\n      })),\n      version: version.SDK_VERSION\n    };\n  }\n  options._metadata = metadata;\n}\nexports.applySdkMetadata = applySdkMetadata;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc2RrTWV0YWRhdGEuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxPQUFPLEdBQUdDLG1CQUFPLENBQUMsNEdBQTJCLENBQUM7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsZ0JBQWdCQSxDQUFDQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsS0FBSyxHQUFHLENBQUNELElBQUksQ0FBQyxFQUFFRSxNQUFNLEdBQUcsS0FBSyxFQUFFO0VBQ3ZFLE1BQU1DLFFBQVEsR0FBR0osT0FBTyxDQUFDSyxTQUFTLElBQUksQ0FBQyxDQUFDO0VBRXhDLElBQUksQ0FBQ0QsUUFBUSxDQUFDRSxHQUFHLEVBQUU7SUFDakJGLFFBQVEsQ0FBQ0UsR0FBRyxHQUFHO01BQ2JMLElBQUksRUFBRyxxQkFBb0JBLElBQUssRUFBQztNQUNqQ00sUUFBUSxFQUFFTCxLQUFLLENBQUNNLEdBQUcsQ0FBQ1AsSUFBSSxLQUFLO1FBQzNCQSxJQUFJLEVBQUcsR0FBRUUsTUFBTyxZQUFXRixJQUFLLEVBQUM7UUFDakNKLE9BQU8sRUFBRUEsT0FBTyxDQUFDWTtNQUNuQixDQUFDLENBQUMsQ0FBQztNQUNIWixPQUFPLEVBQUVBLE9BQU8sQ0FBQ1k7SUFDbkIsQ0FBQztFQUNIO0VBRUFULE9BQU8sQ0FBQ0ssU0FBUyxHQUFHRCxRQUFRO0FBQzlCO0FBRUFULHdCQUF3QixHQUFHSSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc2RrTWV0YWRhdGEuanM/NjkzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB2ZXJzaW9uID0gcmVxdWlyZSgnLi4vdXRpbHMtaG9pc3QvdmVyc2lvbi5qcycpO1xuXG4vKipcbiAqIEEgYnVpbGRlciBmb3IgdGhlIFNESyBtZXRhZGF0YSBpbiB0aGUgb3B0aW9ucyBmb3IgdGhlIFNESyBpbml0aWFsaXphdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIGZ1bmN0aW9uIGlzIGlkZW50aWNhbCB0byBgYnVpbGRNZXRhZGF0YWAgaW4gUmVtaXggYW5kIE5leHRKUyBhbmQgU3ZlbHRlS2l0LlxuICogV2UgZG9uJ3QgZXh0cmFjdCBpdCBmb3IgYnVuZGxlIHNpemUgcmVhc29ucy5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9wdWxsLzc0MDRcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9wdWxsLzQxOTZcbiAqXG4gKiBJZiB5b3UgbWFrZSBjaGFuZ2VzIHRvIHRoaXMgZnVuY3Rpb24gY29uc2lkZXIgdXBkYXRpbmcgdGhlIG90aGVycyBhcyB3ZWxsLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIFNESyBvcHRpb25zIG9iamVjdCB0aGF0IGdldHMgbXV0YXRlZFxuICogQHBhcmFtIG5hbWVzIGxpc3Qgb2YgcGFja2FnZSBuYW1lc1xuICovXG5mdW5jdGlvbiBhcHBseVNka01ldGFkYXRhKG9wdGlvbnMsIG5hbWUsIG5hbWVzID0gW25hbWVdLCBzb3VyY2UgPSAnbnBtJykge1xuICBjb25zdCBtZXRhZGF0YSA9IG9wdGlvbnMuX21ldGFkYXRhIHx8IHt9O1xuXG4gIGlmICghbWV0YWRhdGEuc2RrKSB7XG4gICAgbWV0YWRhdGEuc2RrID0ge1xuICAgICAgbmFtZTogYHNlbnRyeS5qYXZhc2NyaXB0LiR7bmFtZX1gLFxuICAgICAgcGFja2FnZXM6IG5hbWVzLm1hcChuYW1lID0+ICh7XG4gICAgICAgIG5hbWU6IGAke3NvdXJjZX06QHNlbnRyeS8ke25hbWV9YCxcbiAgICAgICAgdmVyc2lvbjogdmVyc2lvbi5TREtfVkVSU0lPTixcbiAgICAgIH0pKSxcbiAgICAgIHZlcnNpb246IHZlcnNpb24uU0RLX1ZFUlNJT04sXG4gICAgfTtcbiAgfVxuXG4gIG9wdGlvbnMuX21ldGFkYXRhID0gbWV0YWRhdGE7XG59XG5cbmV4cG9ydHMuYXBwbHlTZGtNZXRhZGF0YSA9IGFwcGx5U2RrTWV0YWRhdGE7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZGtNZXRhZGF0YS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInZlcnNpb24iLCJyZXF1aXJlIiwiYXBwbHlTZGtNZXRhZGF0YSIsIm9wdGlvbnMiLCJuYW1lIiwibmFtZXMiLCJzb3VyY2UiLCJtZXRhZGF0YSIsIl9tZXRhZGF0YSIsInNkayIsInBhY2thZ2VzIiwibWFwIiwiU0RLX1ZFUlNJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js":
/*!******************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst SCOPE_SPAN_FIELD = '_sentrySpan';\n\n/**\n * Set the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nfunction _setSpanForScope(scope, span) {\n  if (span) {\n    object.addNonEnumerableProperty(scope, SCOPE_SPAN_FIELD, span);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete scope[SCOPE_SPAN_FIELD];\n  }\n}\n\n/**\n * Get the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nfunction _getSpanForScope(scope) {\n  return scope[SCOPE_SPAN_FIELD];\n}\nexports._getSpanForScope = _getSpanForScope;\nexports._setSpanForScope = _setSpanForScope;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc3Bhbk9uU2NvcGUuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxNQUFNLEdBQUdDLG1CQUFPLENBQUMsMEdBQTBCLENBQUM7QUFFbEQsTUFBTUMsZ0JBQWdCLEdBQUcsYUFBYTs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxnQkFBZ0JBLENBQUNDLEtBQUssRUFBRUMsSUFBSSxFQUFFO0VBQ3JDLElBQUlBLElBQUksRUFBRTtJQUNSTCxNQUFNLENBQUNNLHdCQUF3QixDQUFDRixLQUFLLEVBQUdGLGdCQUFnQixFQUFFRyxJQUFJLENBQUM7RUFDakUsQ0FBQyxNQUFNO0lBQ0w7SUFDQSxPQUFRRCxLQUFLLENBQUdGLGdCQUFnQixDQUFDO0VBQ25DO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTSyxnQkFBZ0JBLENBQUNILEtBQUssRUFBRTtFQUMvQixPQUFPQSxLQUFLLENBQUNGLGdCQUFnQixDQUFDO0FBQ2hDO0FBRUFKLHdCQUF3QixHQUFHUyxnQkFBZ0I7QUFDM0NULHdCQUF3QixHQUFHSyxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvc3Bhbk9uU2NvcGUuanM/MmEzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBvYmplY3QgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9vYmplY3QuanMnKTtcblxuY29uc3QgU0NPUEVfU1BBTl9GSUVMRCA9ICdfc2VudHJ5U3Bhbic7XG5cbi8qKlxuICogU2V0IHRoZSBhY3RpdmUgc3BhbiBmb3IgYSBnaXZlbiBzY29wZS5cbiAqIE5PVEU6IFRoaXMgc2hvdWxkIE5PVCBiZSB1c2VkIGRpcmVjdGx5LCBidXQgaXMgb25seSB1c2VkIGludGVybmFsbHkgYnkgdGhlIHRyYWNlIG1ldGhvZHMuXG4gKi9cbmZ1bmN0aW9uIF9zZXRTcGFuRm9yU2NvcGUoc2NvcGUsIHNwYW4pIHtcbiAgaWYgKHNwYW4pIHtcbiAgICBvYmplY3QuYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KHNjb3BlICwgU0NPUEVfU1BBTl9GSUVMRCwgc3Bhbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuICAgIGRlbGV0ZSAoc2NvcGUgKVtTQ09QRV9TUEFOX0ZJRUxEXTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgYWN0aXZlIHNwYW4gZm9yIGEgZ2l2ZW4gc2NvcGUuXG4gKiBOT1RFOiBUaGlzIHNob3VsZCBOT1QgYmUgdXNlZCBkaXJlY3RseSwgYnV0IGlzIG9ubHkgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoZSB0cmFjZSBtZXRob2RzLlxuICovXG5mdW5jdGlvbiBfZ2V0U3BhbkZvclNjb3BlKHNjb3BlKSB7XG4gIHJldHVybiBzY29wZVtTQ09QRV9TUEFOX0ZJRUxEXTtcbn1cblxuZXhwb3J0cy5fZ2V0U3BhbkZvclNjb3BlID0gX2dldFNwYW5Gb3JTY29wZTtcbmV4cG9ydHMuX3NldFNwYW5Gb3JTY29wZSA9IF9zZXRTcGFuRm9yU2NvcGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGFuT25TY29wZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm9iamVjdCIsInJlcXVpcmUiLCJTQ09QRV9TUEFOX0ZJRUxEIiwiX3NldFNwYW5Gb3JTY29wZSIsInNjb3BlIiwic3BhbiIsImFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSIsIl9nZXRTcGFuRm9yU2NvcGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/spanUtils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst index = __webpack_require__(/*! ../asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst metricSummary = __webpack_require__(/*! ../metrics/metric-summary.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/metrics/metric-summary.js\");\nconst semanticAttributes = __webpack_require__(/*! ../semanticAttributes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/semanticAttributes.js\");\nconst spanstatus = __webpack_require__(/*! ../tracing/spanstatus.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/spanstatus.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\nconst object = __webpack_require__(/*! ../utils-hoist/object.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/object.js\");\nconst propagationContext = __webpack_require__(/*! ../utils-hoist/propagationContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js\");\nconst time = __webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst tracing = __webpack_require__(/*! ../utils-hoist/tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js\");\nconst spanOnScope = __webpack_require__(/*! ./spanOnScope.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanOnScope.js\");\n\n// These are aligned with OpenTelemetry trace flags\nconst TRACE_FLAG_NONE = 0x0;\nconst TRACE_FLAG_SAMPLED = 0x1;\n\n// todo(v9): Remove this once we've stopped dropping spans via `beforeSendSpan`\nlet hasShownSpanDropWarning = false;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n * By default, this will only include trace_id, span_id & parent_span_id.\n * If `includeAllData` is true, it will also include data, op, status & origin.\n */\nfunction spanToTransactionTraceContext(span) {\n  const {\n    spanId: span_id,\n    traceId: trace_id\n  } = span.spanContext();\n  const {\n    data,\n    op,\n    parent_span_id,\n    status,\n    origin\n  } = spanToJSON(span);\n  return object.dropUndefinedKeys({\n    parent_span_id,\n    span_id,\n    trace_id,\n    data,\n    op,\n    status,\n    origin\n  });\n}\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n */\nfunction spanToTraceContext(span) {\n  const {\n    spanId,\n    traceId: trace_id,\n    isRemote\n  } = span.spanContext();\n\n  // If the span is remote, we use a random/virtual span as span_id to the trace context,\n  // and the remote span as parent_span_id\n  const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n  const span_id = isRemote ? propagationContext.generateSpanId() : spanId;\n  return object.dropUndefinedKeys({\n    parent_span_id,\n    span_id,\n    trace_id\n  });\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nfunction spanToTraceHeader(span) {\n  const {\n    traceId,\n    spanId\n  } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return tracing.generateSentryTraceHeader(traceId, spanId, sampled);\n}\n\n/**\n * Convert a span time input into a timestamp in seconds.\n */\nfunction spanTimeInputToSeconds(input) {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n  return time.timestampInSeconds();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n */\n// Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n// And `spanToJSON` needs the Span class from `span.ts` to check here.\nfunction spanToJSON(span) {\n  if (spanIsSentrySpan(span)) {\n    return span.getSpanJSON();\n  }\n  try {\n    const {\n      spanId: span_id,\n      traceId: trace_id\n    } = span.spanContext();\n\n    // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n    if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n      const {\n        attributes,\n        startTime,\n        name,\n        endTime,\n        parentSpanId,\n        status\n      } = span;\n      return object.dropUndefinedKeys({\n        span_id,\n        trace_id,\n        data: attributes,\n        description: name,\n        parent_span_id: parentSpanId,\n        start_timestamp: spanTimeInputToSeconds(startTime),\n        // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n        timestamp: spanTimeInputToSeconds(endTime) || undefined,\n        status: getStatusMessage(status),\n        op: attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP],\n        origin: attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],\n        _metrics_summary: metricSummary.getMetricSummaryJsonForSpan(span)\n      });\n    }\n\n    // Finally, at least we have `spanContext()`....\n    return {\n      span_id,\n      trace_id\n    };\n  } catch (e) {\n    return {};\n  }\n}\nfunction spanIsOpenTelemetrySdkTraceBaseSpan(span) {\n  const castSpan = span;\n  return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n}\n\n/** Exported only for tests. */\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSentrySpan(span) {\n  return typeof span.getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nfunction spanIsSampled(span) {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const {\n    traceFlags\n  } = span.spanContext();\n  return traceFlags === TRACE_FLAG_SAMPLED;\n}\n\n/** Get the status message to use for a JSON representation of a span. */\nfunction getStatusMessage(status) {\n  if (!status || status.code === spanstatus.SPAN_STATUS_UNSET) {\n    return undefined;\n  }\n  if (status.code === spanstatus.SPAN_STATUS_OK) {\n    return 'ok';\n  }\n  return status.message || 'unknown_error';\n}\nconst CHILD_SPANS_FIELD = '_sentryChildSpans';\nconst ROOT_SPAN_FIELD = '_sentryRootSpan';\n\n/**\n * Adds an opaque child span reference to a span.\n */\nfunction addChildSpanToSpan(span, childSpan) {\n  // We store the root span reference on the child span\n  // We need this for `getRootSpan()` to work\n  const rootSpan = span[ROOT_SPAN_FIELD] || span;\n  object.addNonEnumerableProperty(childSpan, ROOT_SPAN_FIELD, rootSpan);\n\n  // We store a list of child spans on the parent span\n  // We need this for `getSpanDescendants()` to work\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].add(childSpan);\n  } else {\n    object.addNonEnumerableProperty(span, CHILD_SPANS_FIELD, new Set([childSpan]));\n  }\n}\n\n/** This is only used internally by Idle Spans. */\nfunction removeChildSpanFromSpan(span, childSpan) {\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].delete(childSpan);\n  }\n}\n\n/**\n * Returns an array of the given span and all of its descendants.\n */\nfunction getSpanDescendants(span) {\n  const resultSet = new Set();\n  function addSpanChildren(span) {\n    // This exit condition is required to not infinitely loop in case of a circular dependency.\n    if (resultSet.has(span)) {\n      return;\n      // We want to ignore unsampled spans (e.g. non recording spans)\n    } else if (spanIsSampled(span)) {\n      resultSet.add(span);\n      const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n      for (const childSpan of childSpans) {\n        addSpanChildren(childSpan);\n      }\n    }\n  }\n  addSpanChildren(span);\n  return Array.from(resultSet);\n}\n\n/**\n * Returns the root span of a given span.\n */\nfunction getRootSpan(span) {\n  return span[ROOT_SPAN_FIELD] || span;\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  if (acs.getActiveSpan) {\n    return acs.getActiveSpan();\n  }\n  return spanOnScope._getSpanForScope(currentScopes.getCurrentScope());\n}\n\n/**\n * Updates the metric summary on the currently active span\n */\nfunction updateMetricSummaryOnActiveSpan(metricType, sanitizedName, value, unit, tags, bucketKey) {\n  const span = getActiveSpan();\n  if (span) {\n    metricSummary.updateMetricSummaryOnSpan(span, metricType, sanitizedName, value, unit, tags, bucketKey);\n  }\n}\n\n/**\n * Logs a warning once if `beforeSendSpan` is used to drop spans.\n *\n * todo(v9): Remove this once we've stopped dropping spans via `beforeSendSpan`.\n */\nfunction showSpanDropWarning() {\n  if (!hasShownSpanDropWarning) {\n    logger.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Deprecation warning: Returning null from `beforeSendSpan` will be disallowed from SDK version 9.0.0 onwards. The callback will only support mutating spans. To drop certain spans, configure the respective integrations directly.');\n    });\n    hasShownSpanDropWarning = true;\n  }\n}\n\n/**\n * Updates the name of the given span and ensures that the span name is not\n * overwritten by the Sentry SDK.\n *\n * Use this function instead of `span.updateName()` if you want to make sure that\n * your name is kept. For some spans, for example root `http.server` spans the\n * Sentry SDK would otherwise overwrite the span name with a high-quality name\n * it infers when the span ends.\n *\n * Use this function in server code or when your span is started on the server\n * and on the client (browser). If you only update a span name on the client,\n * you can also use `span.updateName()` the SDK does not overwrite the name.\n *\n * @param span - The span to update the name of.\n * @param name - The name to set on the span.\n */\nfunction updateSpanName(span, name) {\n  span.updateName(name);\n  span.setAttributes({\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name\n  });\n}\nexports.TRACE_FLAG_NONE = TRACE_FLAG_NONE;\nexports.TRACE_FLAG_SAMPLED = TRACE_FLAG_SAMPLED;\nexports.addChildSpanToSpan = addChildSpanToSpan;\nexports.getActiveSpan = getActiveSpan;\nexports.getRootSpan = getRootSpan;\nexports.getSpanDescendants = getSpanDescendants;\nexports.getStatusMessage = getStatusMessage;\nexports.removeChildSpanFromSpan = removeChildSpanFromSpan;\nexports.showSpanDropWarning = showSpanDropWarning;\nexports.spanIsSampled = spanIsSampled;\nexports.spanTimeInputToSeconds = spanTimeInputToSeconds;\nexports.spanToJSON = spanToJSON;\nexports.spanToTraceContext = spanToTraceContext;\nexports.spanToTraceHeader = spanToTraceHeader;\nexports.spanToTransactionTraceContext = spanToTransactionTraceContext;\nexports.updateMetricSummaryOnActiveSpan = updateMetricSummaryOnActiveSpan;\nexports.updateSpanName = updateSpanName;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sentry/core/build/cjs/utils/traceData.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst index = __webpack_require__(/*! ../asyncContext/index.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/asyncContext/index.js\");\nconst carrier = __webpack_require__(/*! ../carrier.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/carrier.js\");\nconst currentScopes = __webpack_require__(/*! ../currentScopes.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/currentScopes.js\");\nconst exports$1 = __webpack_require__(/*! ../exports.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/exports.js\");\n__webpack_require__(/*! ../tracing/errors.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/errors.js\");\n__webpack_require__(/*! ../utils-hoist/version.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/version.js\");\n__webpack_require__(/*! ../utils-hoist/debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js\");\nconst logger = __webpack_require__(/*! ../utils-hoist/logger.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/logger.js\");\n__webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/debug-build.js\");\n__webpack_require__(/*! ../utils-hoist/time.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/time.js\");\nconst spanUtils = __webpack_require__(/*! ./spanUtils.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils/spanUtils.js\");\nconst tracing = __webpack_require__(/*! ../utils-hoist/tracing.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js\");\nconst dynamicSamplingContext = __webpack_require__(/*! ../tracing/dynamicSamplingContext.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js\");\nconst baggage = __webpack_require__(/*! ../utils-hoist/baggage.js */ \"(instrument)/./node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js\");\n\n/**\n * Extracts trace propagation data from the current span or from the client's scope (via transaction or propagation\n * context) and serializes it to `sentry-trace` and `baggage` values to strings. These values can be used to propagate\n * a trace via our tracing Http headers or Html `<meta>` tags.\n *\n * This function also applies some validation to the generated sentry-trace and baggage values to ensure that\n * only valid strings are returned.\n *\n * @returns an object with the tracing data values. The object keys are the name of the tracing key to be used as header\n * or meta tag name.\n */\nfunction getTraceData(options = {}) {\n  const client = currentScopes.getClient();\n  if (!exports$1.isEnabled() || !client) {\n    return {};\n  }\n  const carrier$1 = carrier.getMainCarrier();\n  const acs = index.getAsyncContextStrategy(carrier$1);\n  if (acs.getTraceData) {\n    return acs.getTraceData(options);\n  }\n  const scope = currentScopes.getCurrentScope();\n  const span = options.span || spanUtils.getActiveSpan();\n  const sentryTrace = span ? spanUtils.spanToTraceHeader(span) : scopeToTraceHeader(scope);\n  const dsc = span ? dynamicSamplingContext.getDynamicSamplingContextFromSpan(span) : dynamicSamplingContext.getDynamicSamplingContextFromScope(client, scope);\n  const baggage$1 = baggage.dynamicSamplingContextToSentryBaggageHeader(dsc);\n  const isValidSentryTraceHeader = tracing.TRACEPARENT_REGEXP.test(sentryTrace);\n  if (!isValidSentryTraceHeader) {\n    logger.logger.warn('Invalid sentry-trace data. Cannot generate trace data');\n    return {};\n  }\n  return {\n    'sentry-trace': sentryTrace,\n    baggage: baggage$1\n  };\n}\n\n/**\n * Get a sentry-trace header value for the given scope.\n */\nfunction scopeToTraceHeader(scope) {\n  // TODO(v9): Use generateSpanId() instead of spanId\n  // eslint-disable-next-line deprecation/deprecation\n  const {\n    traceId,\n    sampled,\n    spanId\n  } = scope.getPropagationContext();\n  return tracing.generateSentryTraceHeader(traceId, spanId, sampled);\n}\nexports.getTraceData = getTraceData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdHJhY2VEYXRhLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLDBHQUEwQixDQUFDO0FBQ2pELE1BQU1DLE9BQU8sR0FBR0QsbUJBQU8sQ0FBQyxvRkFBZSxDQUFDO0FBQ3hDLE1BQU1FLGFBQWEsR0FBR0YsbUJBQU8sQ0FBQyxnR0FBcUIsQ0FBQztBQUNwRCxNQUFNRyxTQUFTLEdBQUdILG1CQUFPLENBQUMsb0ZBQWUsQ0FBQztBQUMxQ0EsbUJBQU8sQ0FBQyxrR0FBc0IsQ0FBQztBQUMvQkEsbUJBQU8sQ0FBQyw0R0FBMkIsQ0FBQztBQUNwQ0EsbUJBQU8sQ0FBQyxvSEFBK0IsQ0FBQztBQUN4QyxNQUFNSSxNQUFNLEdBQUdKLG1CQUFPLENBQUMsMEdBQTBCLENBQUM7QUFDbERBLG1CQUFPLENBQUMsNEZBQW1CLENBQUM7QUFDNUJBLG1CQUFPLENBQUMsc0dBQXdCLENBQUM7QUFDakMsTUFBTUssU0FBUyxHQUFHTCxtQkFBTyxDQUFDLDZGQUFnQixDQUFDO0FBQzNDLE1BQU1NLE9BQU8sR0FBR04sbUJBQU8sQ0FBQyw0R0FBMkIsQ0FBQztBQUNwRCxNQUFNTyxzQkFBc0IsR0FBR1AsbUJBQU8sQ0FBQyxrSUFBc0MsQ0FBQztBQUM5RSxNQUFNUSxPQUFPLEdBQUdSLG1CQUFPLENBQUMsNEdBQTJCLENBQUM7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTUyxZQUFZQSxDQUFDQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDbEMsTUFBTUMsTUFBTSxHQUFHVCxhQUFhLENBQUNVLFNBQVMsQ0FBQyxDQUFDO0VBQ3hDLElBQUksQ0FBQ1QsU0FBUyxDQUFDVSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUNGLE1BQU0sRUFBRTtJQUNyQyxPQUFPLENBQUMsQ0FBQztFQUNYO0VBRUEsTUFBTUcsU0FBUyxHQUFHYixPQUFPLENBQUNjLGNBQWMsQ0FBQyxDQUFDO0VBQzFDLE1BQU1DLEdBQUcsR0FBR2pCLEtBQUssQ0FBQ2tCLHVCQUF1QixDQUFDSCxTQUFTLENBQUM7RUFDcEQsSUFBSUUsR0FBRyxDQUFDUCxZQUFZLEVBQUU7SUFDcEIsT0FBT08sR0FBRyxDQUFDUCxZQUFZLENBQUNDLE9BQU8sQ0FBQztFQUNsQztFQUVBLE1BQU1RLEtBQUssR0FBR2hCLGFBQWEsQ0FBQ2lCLGVBQWUsQ0FBQyxDQUFDO0VBQzdDLE1BQU1DLElBQUksR0FBR1YsT0FBTyxDQUFDVSxJQUFJLElBQUlmLFNBQVMsQ0FBQ2dCLGFBQWEsQ0FBQyxDQUFDO0VBQ3RELE1BQU1DLFdBQVcsR0FBR0YsSUFBSSxHQUFHZixTQUFTLENBQUNrQixpQkFBaUIsQ0FBQ0gsSUFBSSxDQUFDLEdBQUdJLGtCQUFrQixDQUFDTixLQUFLLENBQUM7RUFDeEYsTUFBTU8sR0FBRyxHQUFHTCxJQUFJLEdBQUdiLHNCQUFzQixDQUFDbUIsaUNBQWlDLENBQUNOLElBQUksQ0FBQyxHQUFHYixzQkFBc0IsQ0FBQ29CLGtDQUFrQyxDQUFDaEIsTUFBTSxFQUFFTyxLQUFLLENBQUM7RUFDNUosTUFBTVUsU0FBUyxHQUFHcEIsT0FBTyxDQUFDcUIsMkNBQTJDLENBQUNKLEdBQUcsQ0FBQztFQUUxRSxNQUFNSyx3QkFBd0IsR0FBR3hCLE9BQU8sQ0FBQ3lCLGtCQUFrQixDQUFDQyxJQUFJLENBQUNWLFdBQVcsQ0FBQztFQUM3RSxJQUFJLENBQUNRLHdCQUF3QixFQUFFO0lBQzdCMUIsTUFBTSxDQUFDQSxNQUFNLENBQUM2QixJQUFJLENBQUMsdURBQXVELENBQUM7SUFDM0UsT0FBTyxDQUFDLENBQUM7RUFDWDtFQUVBLE9BQU87SUFDTCxjQUFjLEVBQUVYLFdBQVc7SUFDM0JkLE9BQU8sRUFBRW9CO0VBQ1gsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVNKLGtCQUFrQkEsQ0FBQ04sS0FBSyxFQUFFO0VBQ2pDO0VBQ0E7RUFDQSxNQUFNO0lBQUVnQixPQUFPO0lBQUVDLE9BQU87SUFBRUM7RUFBTyxDQUFDLEdBQUdsQixLQUFLLENBQUNtQixxQkFBcUIsQ0FBQyxDQUFDO0VBQ2xFLE9BQU8vQixPQUFPLENBQUNnQyx5QkFBeUIsQ0FBQ0osT0FBTyxFQUFFRSxNQUFNLEVBQUVELE9BQU8sQ0FBQztBQUNwRTtBQUVBdEMsb0JBQW9CLEdBQUdZLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvY29yZS9idWlsZC9janMvdXRpbHMvdHJhY2VEYXRhLmpzPzdhOGYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuLi9hc3luY0NvbnRleHQvaW5kZXguanMnKTtcbmNvbnN0IGNhcnJpZXIgPSByZXF1aXJlKCcuLi9jYXJyaWVyLmpzJyk7XG5jb25zdCBjdXJyZW50U2NvcGVzID0gcmVxdWlyZSgnLi4vY3VycmVudFNjb3Blcy5qcycpO1xuY29uc3QgZXhwb3J0cyQxID0gcmVxdWlyZSgnLi4vZXhwb3J0cy5qcycpO1xucmVxdWlyZSgnLi4vdHJhY2luZy9lcnJvcnMuanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L3ZlcnNpb24uanMnKTtcbnJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9sb2dnZXIuanMnKTtcbnJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5yZXF1aXJlKCcuLi91dGlscy1ob2lzdC90aW1lLmpzJyk7XG5jb25zdCBzcGFuVXRpbHMgPSByZXF1aXJlKCcuL3NwYW5VdGlscy5qcycpO1xuY29uc3QgdHJhY2luZyA9IHJlcXVpcmUoJy4uL3V0aWxzLWhvaXN0L3RyYWNpbmcuanMnKTtcbmNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSByZXF1aXJlKCcuLi90cmFjaW5nL2R5bmFtaWNTYW1wbGluZ0NvbnRleHQuanMnKTtcbmNvbnN0IGJhZ2dhZ2UgPSByZXF1aXJlKCcuLi91dGlscy1ob2lzdC9iYWdnYWdlLmpzJyk7XG5cbi8qKlxuICogRXh0cmFjdHMgdHJhY2UgcHJvcGFnYXRpb24gZGF0YSBmcm9tIHRoZSBjdXJyZW50IHNwYW4gb3IgZnJvbSB0aGUgY2xpZW50J3Mgc2NvcGUgKHZpYSB0cmFuc2FjdGlvbiBvciBwcm9wYWdhdGlvblxuICogY29udGV4dCkgYW5kIHNlcmlhbGl6ZXMgaXQgdG8gYHNlbnRyeS10cmFjZWAgYW5kIGBiYWdnYWdlYCB2YWx1ZXMgdG8gc3RyaW5ncy4gVGhlc2UgdmFsdWVzIGNhbiBiZSB1c2VkIHRvIHByb3BhZ2F0ZVxuICogYSB0cmFjZSB2aWEgb3VyIHRyYWNpbmcgSHR0cCBoZWFkZXJzIG9yIEh0bWwgYDxtZXRhPmAgdGFncy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFsc28gYXBwbGllcyBzb21lIHZhbGlkYXRpb24gdG8gdGhlIGdlbmVyYXRlZCBzZW50cnktdHJhY2UgYW5kIGJhZ2dhZ2UgdmFsdWVzIHRvIGVuc3VyZSB0aGF0XG4gKiBvbmx5IHZhbGlkIHN0cmluZ3MgYXJlIHJldHVybmVkLlxuICpcbiAqIEByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0cmFjaW5nIGRhdGEgdmFsdWVzLiBUaGUgb2JqZWN0IGtleXMgYXJlIHRoZSBuYW1lIG9mIHRoZSB0cmFjaW5nIGtleSB0byBiZSB1c2VkIGFzIGhlYWRlclxuICogb3IgbWV0YSB0YWcgbmFtZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VHJhY2VEYXRhKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBjbGllbnQgPSBjdXJyZW50U2NvcGVzLmdldENsaWVudCgpO1xuICBpZiAoIWV4cG9ydHMkMS5pc0VuYWJsZWQoKSB8fCAhY2xpZW50KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY29uc3QgY2FycmllciQxID0gY2Fycmllci5nZXRNYWluQ2FycmllcigpO1xuICBjb25zdCBhY3MgPSBpbmRleC5nZXRBc3luY0NvbnRleHRTdHJhdGVneShjYXJyaWVyJDEpO1xuICBpZiAoYWNzLmdldFRyYWNlRGF0YSkge1xuICAgIHJldHVybiBhY3MuZ2V0VHJhY2VEYXRhKG9wdGlvbnMpO1xuICB9XG5cbiAgY29uc3Qgc2NvcGUgPSBjdXJyZW50U2NvcGVzLmdldEN1cnJlbnRTY29wZSgpO1xuICBjb25zdCBzcGFuID0gb3B0aW9ucy5zcGFuIHx8IHNwYW5VdGlscy5nZXRBY3RpdmVTcGFuKCk7XG4gIGNvbnN0IHNlbnRyeVRyYWNlID0gc3BhbiA/IHNwYW5VdGlscy5zcGFuVG9UcmFjZUhlYWRlcihzcGFuKSA6IHNjb3BlVG9UcmFjZUhlYWRlcihzY29wZSk7XG4gIGNvbnN0IGRzYyA9IHNwYW4gPyBkeW5hbWljU2FtcGxpbmdDb250ZXh0LmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbihzcGFuKSA6IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TY29wZShjbGllbnQsIHNjb3BlKTtcbiAgY29uc3QgYmFnZ2FnZSQxID0gYmFnZ2FnZS5keW5hbWljU2FtcGxpbmdDb250ZXh0VG9TZW50cnlCYWdnYWdlSGVhZGVyKGRzYyk7XG5cbiAgY29uc3QgaXNWYWxpZFNlbnRyeVRyYWNlSGVhZGVyID0gdHJhY2luZy5UUkFDRVBBUkVOVF9SRUdFWFAudGVzdChzZW50cnlUcmFjZSk7XG4gIGlmICghaXNWYWxpZFNlbnRyeVRyYWNlSGVhZGVyKSB7XG4gICAgbG9nZ2VyLmxvZ2dlci53YXJuKCdJbnZhbGlkIHNlbnRyeS10cmFjZSBkYXRhLiBDYW5ub3QgZ2VuZXJhdGUgdHJhY2UgZGF0YScpO1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgJ3NlbnRyeS10cmFjZSc6IHNlbnRyeVRyYWNlLFxuICAgIGJhZ2dhZ2U6IGJhZ2dhZ2UkMSxcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXQgYSBzZW50cnktdHJhY2UgaGVhZGVyIHZhbHVlIGZvciB0aGUgZ2l2ZW4gc2NvcGUuXG4gKi9cbmZ1bmN0aW9uIHNjb3BlVG9UcmFjZUhlYWRlcihzY29wZSkge1xuICAvLyBUT0RPKHY5KTogVXNlIGdlbmVyYXRlU3BhbklkKCkgaW5zdGVhZCBvZiBzcGFuSWRcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gIGNvbnN0IHsgdHJhY2VJZCwgc2FtcGxlZCwgc3BhbklkIH0gPSBzY29wZS5nZXRQcm9wYWdhdGlvbkNvbnRleHQoKTtcbiAgcmV0dXJuIHRyYWNpbmcuZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlcih0cmFjZUlkLCBzcGFuSWQsIHNhbXBsZWQpO1xufVxuXG5leHBvcnRzLmdldFRyYWNlRGF0YSA9IGdldFRyYWNlRGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNlRGF0YS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImluZGV4IiwicmVxdWlyZSIsImNhcnJpZXIiLCJjdXJyZW50U2NvcGVzIiwiZXhwb3J0cyQxIiwibG9nZ2VyIiwic3BhblV0aWxzIiwidHJhY2luZyIsImR5bmFtaWNTYW1wbGluZ0NvbnRleHQiLCJiYWdnYWdlIiwiZ2V0VHJhY2VEYXRhIiwib3B0aW9ucyIsImNsaWVudCIsImdldENsaWVudCIsImlzRW5hYmxlZCIsImNhcnJpZXIkMSIsImdldE1haW5DYXJyaWVyIiwiYWNzIiwiZ2V0QXN5bmNDb250ZXh0U3RyYXRlZ3kiLCJzY29wZSIsImdldEN1cnJlbnRTY29wZSIsInNwYW4iLCJnZXRBY3RpdmVTcGFuIiwic2VudHJ5VHJhY2UiLCJzcGFuVG9UcmFjZUhlYWRlciIsInNjb3BlVG9UcmFjZUhlYWRlciIsImRzYyIsImdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbiIsImdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU2NvcGUiLCJiYWdnYWdlJDEiLCJkeW5hbWljU2FtcGxpbmdDb250ZXh0VG9TZW50cnlCYWdnYWdlSGVhZGVyIiwiaXNWYWxpZFNlbnRyeVRyYWNlSGVhZGVyIiwiVFJBQ0VQQVJFTlRfUkVHRVhQIiwidGVzdCIsIndhcm4iLCJ0cmFjZUlkIiwic2FtcGxlZCIsInNwYW5JZCIsImdldFByb3BhZ2F0aW9uQ29udGV4dCIsImdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/core/build/cjs/utils/traceData.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n */\nfunction captureRequestError(error, request, errorContext) {\n  core.withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: core.headersToDict(request.headers),\n        method: request.method\n      }\n    });\n    scope.setContext('nextjs', {\n      request_path: request.path,\n      router_kind: errorContext.routerKind,\n      router_path: errorContext.routePath,\n      route_type: errorContext.routeType\n    });\n    scope.setTransactionName(errorContext.routePath);\n    core.captureException(error, {\n      mechanism: {\n        handled: false\n      }\n    });\n  });\n}\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n *\n * @deprecated Use `captureRequestError` instead.\n */\n// TODO(v9): Remove this export\nconst experimental_captureRequestError = captureRequestError;\nexports.captureRequestError = captureRequestError;\nexports.experimental_captureRequestError = experimental_captureRequestError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vY2FwdHVyZVJlcXVlc3RFcnJvci5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxTQUFTQyxtQkFBbUJBLENBQUNDLEtBQUssRUFBRUMsT0FBTyxFQUFFQyxZQUFZLEVBQUU7RUFDekRMLElBQUksQ0FBQ00sU0FBUyxDQUFDQyxLQUFLLElBQUk7SUFDdEJBLEtBQUssQ0FBQ0Msd0JBQXdCLENBQUM7TUFDN0JDLGlCQUFpQixFQUFFO1FBQ2pCQyxPQUFPLEVBQUVWLElBQUksQ0FBQ1csYUFBYSxDQUFDUCxPQUFPLENBQUNNLE9BQU8sQ0FBQztRQUM1Q0UsTUFBTSxFQUFFUixPQUFPLENBQUNRO01BQ2xCO0lBQ0YsQ0FBQyxDQUFDO0lBRUZMLEtBQUssQ0FBQ00sVUFBVSxDQUFDLFFBQVEsRUFBRTtNQUN6QkMsWUFBWSxFQUFFVixPQUFPLENBQUNXLElBQUk7TUFDMUJDLFdBQVcsRUFBRVgsWUFBWSxDQUFDWSxVQUFVO01BQ3BDQyxXQUFXLEVBQUViLFlBQVksQ0FBQ2MsU0FBUztNQUNuQ0MsVUFBVSxFQUFFZixZQUFZLENBQUNnQjtJQUMzQixDQUFDLENBQUM7SUFFRmQsS0FBSyxDQUFDZSxrQkFBa0IsQ0FBQ2pCLFlBQVksQ0FBQ2MsU0FBUyxDQUFDO0lBRWhEbkIsSUFBSSxDQUFDdUIsZ0JBQWdCLENBQUNwQixLQUFLLEVBQUU7TUFDM0JxQixTQUFTLEVBQUU7UUFDVEMsT0FBTyxFQUFFO01BQ1g7SUFDRixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyxnQ0FBZ0MsR0FBR3hCLG1CQUFtQjtBQUU1REosMkJBQTJCLEdBQUdJLG1CQUFtQjtBQUNqREosd0NBQXdDLEdBQUc0QixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vY2FwdHVyZVJlcXVlc3RFcnJvci5qcz83ZTJhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBSZXBvcnRzIGVycm9ycyBwYXNzZWQgdG8gdGhlIHRoZSBOZXh0LmpzIGBvblJlcXVlc3RFcnJvcmAgaW5zdHJ1bWVudGF0aW9uIGhvb2suXG4gKi9cbmZ1bmN0aW9uIGNhcHR1cmVSZXF1ZXN0RXJyb3IoZXJyb3IsIHJlcXVlc3QsIGVycm9yQ29udGV4dCkge1xuICBjb3JlLndpdGhTY29wZShzY29wZSA9PiB7XG4gICAgc2NvcGUuc2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhKHtcbiAgICAgIG5vcm1hbGl6ZWRSZXF1ZXN0OiB7XG4gICAgICAgIGhlYWRlcnM6IGNvcmUuaGVhZGVyc1RvRGljdChyZXF1ZXN0LmhlYWRlcnMpLFxuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgfSAsXG4gICAgfSk7XG5cbiAgICBzY29wZS5zZXRDb250ZXh0KCduZXh0anMnLCB7XG4gICAgICByZXF1ZXN0X3BhdGg6IHJlcXVlc3QucGF0aCxcbiAgICAgIHJvdXRlcl9raW5kOiBlcnJvckNvbnRleHQucm91dGVyS2luZCxcbiAgICAgIHJvdXRlcl9wYXRoOiBlcnJvckNvbnRleHQucm91dGVQYXRoLFxuICAgICAgcm91dGVfdHlwZTogZXJyb3JDb250ZXh0LnJvdXRlVHlwZSxcbiAgICB9KTtcblxuICAgIHNjb3BlLnNldFRyYW5zYWN0aW9uTmFtZShlcnJvckNvbnRleHQucm91dGVQYXRoKTtcblxuICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnJvciwge1xuICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogUmVwb3J0cyBlcnJvcnMgcGFzc2VkIHRvIHRoZSB0aGUgTmV4dC5qcyBgb25SZXF1ZXN0RXJyb3JgIGluc3RydW1lbnRhdGlvbiBob29rLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgY2FwdHVyZVJlcXVlc3RFcnJvcmAgaW5zdGVhZC5cbiAqL1xuLy8gVE9ETyh2OSk6IFJlbW92ZSB0aGlzIGV4cG9ydFxuY29uc3QgZXhwZXJpbWVudGFsX2NhcHR1cmVSZXF1ZXN0RXJyb3IgPSBjYXB0dXJlUmVxdWVzdEVycm9yO1xuXG5leHBvcnRzLmNhcHR1cmVSZXF1ZXN0RXJyb3IgPSBjYXB0dXJlUmVxdWVzdEVycm9yO1xuZXhwb3J0cy5leHBlcmltZW50YWxfY2FwdHVyZVJlcXVlc3RFcnJvciA9IGV4cGVyaW1lbnRhbF9jYXB0dXJlUmVxdWVzdEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FwdHVyZVJlcXVlc3RFcnJvci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvcmUiLCJyZXF1aXJlIiwiY2FwdHVyZVJlcXVlc3RFcnJvciIsImVycm9yIiwicmVxdWVzdCIsImVycm9yQ29udGV4dCIsIndpdGhTY29wZSIsInNjb3BlIiwic2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhIiwibm9ybWFsaXplZFJlcXVlc3QiLCJoZWFkZXJzIiwiaGVhZGVyc1RvRGljdCIsIm1ldGhvZCIsInNldENvbnRleHQiLCJyZXF1ZXN0X3BhdGgiLCJwYXRoIiwicm91dGVyX2tpbmQiLCJyb3V0ZXJLaW5kIiwicm91dGVyX3BhdGgiLCJyb3V0ZVBhdGgiLCJyb3V0ZV90eXBlIiwicm91dGVUeXBlIiwic2V0VHJhbnNhY3Rpb25OYW1lIiwiY2FwdHVyZUV4Y2VwdGlvbiIsIm1lY2hhbmlzbSIsImhhbmRsZWQiLCJleHBlcmltZW50YWxfY2FwdHVyZVJlcXVlc3RFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nexports.DEBUG_BUILD = DEBUG_BUILD;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZGVidWctYnVpbGQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFdBQVcsR0FBSSxPQUFPQyxnQkFBZ0IsS0FBSyxXQUFXLElBQUlBLGdCQUFpQjtBQUVqRkgsbUJBQW1CLEdBQUdFLFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vZGVidWctYnVpbGQuanM/ZDdkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAqL1xuY29uc3QgREVCVUdfQlVJTEQgPSAodHlwZW9mIF9fU0VOVFJZX0RFQlVHX18gPT09ICd1bmRlZmluZWQnIHx8IF9fU0VOVFJZX0RFQlVHX18pO1xuXG5leHBvcnRzLkRFQlVHX0JVSUxEID0gREVCVUdfQlVJTEQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Zy1idWlsZC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRFQlVHX0JVSUxEIiwiX19TRU5UUllfREVCVUdfXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Determines whether input is a Next.js not-found error.\n * https://beta.nextjs.org/docs/api-reference/notfound#notfound\n */\nfunction isNotFoundNavigationError(subject) {\n  return core.isError(subject) && ['NEXT_NOT_FOUND', 'NEXT_HTTP_ERROR_FALLBACK;404'].includes(subject.digest);\n}\n\n/**\n * Determines whether input is a Next.js redirect error.\n * https://beta.nextjs.org/docs/api-reference/redirect#redirect\n */\nfunction isRedirectNavigationError(subject) {\n  return core.isError(subject) && typeof subject.digest === 'string' && subject.digest.startsWith('NEXT_REDIRECT;') // a redirect digest looks like \"NEXT_REDIRECT;[redirect path]\"\n  ;\n}\n\nexports.isNotFoundNavigationError = isNotFoundNavigationError;\nexports.isRedirectNavigationError = isRedirectNavigationError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vbmV4dE5hdmlnYXRpb25FcnJvclV0aWxzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGlGQUFjLENBQUM7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0MseUJBQXlCQSxDQUFDQyxPQUFPLEVBQUU7RUFDMUMsT0FDRUgsSUFBSSxDQUFDSSxPQUFPLENBQUNELE9BQU8sQ0FBQyxJQUNyQixDQUFDLGdCQUFnQixFQUFFLDhCQUE4QixDQUFDLENBQUNFLFFBQVEsQ0FDeERGLE9BQU8sQ0FBR0csTUFDYixDQUFDO0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyx5QkFBeUJBLENBQUNKLE9BQU8sRUFBRTtFQUMxQyxPQUNFSCxJQUFJLENBQUNJLE9BQU8sQ0FBQ0QsT0FBTyxDQUFDLElBQ3JCLE9BQVFBLE9BQU8sQ0FBR0csTUFBTSxLQUFLLFFBQVEsSUFDcENILE9BQU8sQ0FBR0csTUFBTSxDQUFDRSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztFQUFBO0FBRW5EOztBQUVBVixpQ0FBaUMsR0FBR0kseUJBQXlCO0FBQzdESixpQ0FBaUMsR0FBR1MseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL25leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5qcz85NmM2Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgaW5wdXQgaXMgYSBOZXh0LmpzIG5vdC1mb3VuZCBlcnJvci5cbiAqIGh0dHBzOi8vYmV0YS5uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9ub3Rmb3VuZCNub3Rmb3VuZFxuICovXG5mdW5jdGlvbiBpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yKHN1YmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBjb3JlLmlzRXJyb3Ioc3ViamVjdCkgJiZcbiAgICBbJ05FWFRfTk9UX0ZPVU5EJywgJ05FWFRfSFRUUF9FUlJPUl9GQUxMQkFDSzs0MDQnXS5pbmNsdWRlcyhcbiAgICAgIChzdWJqZWN0ICkuZGlnZXN0ICxcbiAgICApXG4gICk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGlucHV0IGlzIGEgTmV4dC5qcyByZWRpcmVjdCBlcnJvci5cbiAqIGh0dHBzOi8vYmV0YS5uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9yZWRpcmVjdCNyZWRpcmVjdFxuICovXG5mdW5jdGlvbiBpc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yKHN1YmplY3QpIHtcbiAgcmV0dXJuIChcbiAgICBjb3JlLmlzRXJyb3Ioc3ViamVjdCkgJiZcbiAgICB0eXBlb2YgKHN1YmplY3QgKS5kaWdlc3QgPT09ICdzdHJpbmcnICYmXG4gICAgKHN1YmplY3QgKS5kaWdlc3Quc3RhcnRzV2l0aCgnTkVYVF9SRURJUkVDVDsnKSAvLyBhIHJlZGlyZWN0IGRpZ2VzdCBsb29rcyBsaWtlIFwiTkVYVF9SRURJUkVDVDtbcmVkaXJlY3QgcGF0aF1cIlxuICApO1xufVxuXG5leHBvcnRzLmlzTm90Rm91bmROYXZpZ2F0aW9uRXJyb3IgPSBpc05vdEZvdW5kTmF2aWdhdGlvbkVycm9yO1xuZXhwb3J0cy5pc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yID0gaXNSZWRpcmVjdE5hdmlnYXRpb25FcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5leHROYXZpZ2F0aW9uRXJyb3JVdGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvcmUiLCJyZXF1aXJlIiwiaXNOb3RGb3VuZE5hdmlnYXRpb25FcnJvciIsInN1YmplY3QiLCJpc0Vycm9yIiwiaW5jbHVkZXMiLCJkaWdlc3QiLCJpc1JlZGlyZWN0TmF2aWdhdGlvbkVycm9yIiwic3RhcnRzV2l0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ../utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Capture the exception passed by nextjs to the `_error` page, adding context data as appropriate.\n *\n * @param contextOrProps The data passed to either `getInitialProps` or `render` by nextjs\n */\nasync function captureUnderscoreErrorException(contextOrProps) {\n  const {\n    req,\n    res,\n    err\n  } = contextOrProps;\n\n  // 404s (and other 400-y friends) can trigger `_error`, but we don't want to send them to Sentry\n  const statusCode = res && res.statusCode || contextOrProps.statusCode;\n  if (statusCode && statusCode < 500) {\n    return Promise.resolve();\n  }\n\n  // In previous versions of the suggested `_error.js` page in which this function is meant to be used, there was a\n  // workaround for https://github.com/vercel/next.js/issues/8592 which involved an extra call to this function, in the\n  // custom error component's `render` method, just in case it hadn't been called by `getInitialProps`. Now that that\n  // issue has been fixed, the second call is unnecessary, but since it lives in user code rather than our code, users\n  // have to be the ones to get rid of it, and guaraneteedly, not all of them will. So, rather than capture the error\n  // twice, we just bail if we sense we're in that now-extraneous second call. (We can tell which function we're in\n  // because Nextjs passes `pathname` to `getInitialProps` but not to `render`.)\n  if (!contextOrProps.pathname) {\n    return Promise.resolve();\n  }\n  core.withScope(scope => {\n    if (req) {\n      const normalizedRequest = core.httpRequestToRequestData(req);\n      scope.setSDKProcessingMetadata({\n        normalizedRequest\n      });\n    }\n\n    // If third-party libraries (or users themselves) throw something falsy, we want to capture it as a message (which\n    // is what passing a string to `captureException` will wind up doing)\n    core.captureException(err || `_error.js called with falsy error (${err})`, {\n      mechanism: {\n        type: 'instrument',\n        handled: false,\n        data: {\n          function: '_error.getInitialProps'\n        }\n      }\n    });\n  });\n  core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n}\nexports.captureUnderscoreErrorException = captureUnderscoreErrorException;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi9fZXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxJQUFJLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsaUhBQXlCLENBQUM7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlRSwrQkFBK0JBLENBQUNDLGNBQWMsRUFBRTtFQUM3RCxNQUFNO0lBQUVDLEdBQUc7SUFBRUMsR0FBRztJQUFFQztFQUFJLENBQUMsR0FBR0gsY0FBYzs7RUFFeEM7RUFDQSxNQUFNSSxVQUFVLEdBQUlGLEdBQUcsSUFBSUEsR0FBRyxDQUFDRSxVQUFVLElBQUtKLGNBQWMsQ0FBQ0ksVUFBVTtFQUN2RSxJQUFJQSxVQUFVLElBQUlBLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFDbEMsT0FBT0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUMxQjs7RUFFQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksQ0FBQ04sY0FBYyxDQUFDTyxRQUFRLEVBQUU7SUFDNUIsT0FBT0YsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUMxQjtFQUVBVixJQUFJLENBQUNZLFNBQVMsQ0FBQ0MsS0FBSyxJQUFJO0lBQ3RCLElBQUlSLEdBQUcsRUFBRTtNQUNQLE1BQU1TLGlCQUFpQixHQUFHZCxJQUFJLENBQUNlLHdCQUF3QixDQUFDVixHQUFHLENBQUM7TUFDNURRLEtBQUssQ0FBQ0csd0JBQXdCLENBQUM7UUFBRUY7TUFBa0IsQ0FBQyxDQUFDO0lBQ3ZEOztJQUVBO0lBQ0E7SUFDQWQsSUFBSSxDQUFDaUIsZ0JBQWdCLENBQUNWLEdBQUcsSUFBSyxzQ0FBcUNBLEdBQUksR0FBRSxFQUFFO01BQ3pFVyxTQUFTLEVBQUU7UUFDVEMsSUFBSSxFQUFFLFlBQVk7UUFDbEJDLE9BQU8sRUFBRSxLQUFLO1FBQ2RDLElBQUksRUFBRTtVQUNKQyxRQUFRLEVBQUU7UUFDWjtNQUNGO0lBQ0YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZ0QixJQUFJLENBQUN1QixlQUFlLENBQUNyQixXQUFXLENBQUNzQixzQkFBc0IsQ0FBQyxDQUFDLENBQUM7QUFDNUQ7QUFFQTFCLHVDQUF1QyxHQUFHSywrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi9fZXJyb3IuanM/MGNlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCByZXNwb25zZUVuZCA9IHJlcXVpcmUoJy4uL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJyk7XG5cbi8qKlxuICogQ2FwdHVyZSB0aGUgZXhjZXB0aW9uIHBhc3NlZCBieSBuZXh0anMgdG8gdGhlIGBfZXJyb3JgIHBhZ2UsIGFkZGluZyBjb250ZXh0IGRhdGEgYXMgYXBwcm9wcmlhdGUuXG4gKlxuICogQHBhcmFtIGNvbnRleHRPclByb3BzIFRoZSBkYXRhIHBhc3NlZCB0byBlaXRoZXIgYGdldEluaXRpYWxQcm9wc2Agb3IgYHJlbmRlcmAgYnkgbmV4dGpzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb24oY29udGV4dE9yUHJvcHMpIHtcbiAgY29uc3QgeyByZXEsIHJlcywgZXJyIH0gPSBjb250ZXh0T3JQcm9wcztcblxuICAvLyA0MDRzIChhbmQgb3RoZXIgNDAwLXkgZnJpZW5kcykgY2FuIHRyaWdnZXIgYF9lcnJvcmAsIGJ1dCB3ZSBkb24ndCB3YW50IHRvIHNlbmQgdGhlbSB0byBTZW50cnlcbiAgY29uc3Qgc3RhdHVzQ29kZSA9IChyZXMgJiYgcmVzLnN0YXR1c0NvZGUpIHx8IGNvbnRleHRPclByb3BzLnN0YXR1c0NvZGU7XG4gIGlmIChzdGF0dXNDb2RlICYmIHN0YXR1c0NvZGUgPCA1MDApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICAvLyBJbiBwcmV2aW91cyB2ZXJzaW9ucyBvZiB0aGUgc3VnZ2VzdGVkIGBfZXJyb3IuanNgIHBhZ2UgaW4gd2hpY2ggdGhpcyBmdW5jdGlvbiBpcyBtZWFudCB0byBiZSB1c2VkLCB0aGVyZSB3YXMgYVxuICAvLyB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vdmVyY2VsL25leHQuanMvaXNzdWVzLzg1OTIgd2hpY2ggaW52b2x2ZWQgYW4gZXh0cmEgY2FsbCB0byB0aGlzIGZ1bmN0aW9uLCBpbiB0aGVcbiAgLy8gY3VzdG9tIGVycm9yIGNvbXBvbmVudCdzIGByZW5kZXJgIG1ldGhvZCwganVzdCBpbiBjYXNlIGl0IGhhZG4ndCBiZWVuIGNhbGxlZCBieSBgZ2V0SW5pdGlhbFByb3BzYC4gTm93IHRoYXQgdGhhdFxuICAvLyBpc3N1ZSBoYXMgYmVlbiBmaXhlZCwgdGhlIHNlY29uZCBjYWxsIGlzIHVubmVjZXNzYXJ5LCBidXQgc2luY2UgaXQgbGl2ZXMgaW4gdXNlciBjb2RlIHJhdGhlciB0aGFuIG91ciBjb2RlLCB1c2Vyc1xuICAvLyBoYXZlIHRvIGJlIHRoZSBvbmVzIHRvIGdldCByaWQgb2YgaXQsIGFuZCBndWFyYW5ldGVlZGx5LCBub3QgYWxsIG9mIHRoZW0gd2lsbC4gU28sIHJhdGhlciB0aGFuIGNhcHR1cmUgdGhlIGVycm9yXG4gIC8vIHR3aWNlLCB3ZSBqdXN0IGJhaWwgaWYgd2Ugc2Vuc2Ugd2UncmUgaW4gdGhhdCBub3ctZXh0cmFuZW91cyBzZWNvbmQgY2FsbC4gKFdlIGNhbiB0ZWxsIHdoaWNoIGZ1bmN0aW9uIHdlJ3JlIGluXG4gIC8vIGJlY2F1c2UgTmV4dGpzIHBhc3NlcyBgcGF0aG5hbWVgIHRvIGBnZXRJbml0aWFsUHJvcHNgIGJ1dCBub3QgdG8gYHJlbmRlcmAuKVxuICBpZiAoIWNvbnRleHRPclByb3BzLnBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgY29yZS53aXRoU2NvcGUoc2NvcGUgPT4ge1xuICAgIGlmIChyZXEpIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRSZXF1ZXN0ID0gY29yZS5odHRwUmVxdWVzdFRvUmVxdWVzdERhdGEocmVxKTtcbiAgICAgIHNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7IG5vcm1hbGl6ZWRSZXF1ZXN0IH0pO1xuICAgIH1cblxuICAgIC8vIElmIHRoaXJkLXBhcnR5IGxpYnJhcmllcyAob3IgdXNlcnMgdGhlbXNlbHZlcykgdGhyb3cgc29tZXRoaW5nIGZhbHN5LCB3ZSB3YW50IHRvIGNhcHR1cmUgaXQgYXMgYSBtZXNzYWdlICh3aGljaFxuICAgIC8vIGlzIHdoYXQgcGFzc2luZyBhIHN0cmluZyB0byBgY2FwdHVyZUV4Y2VwdGlvbmAgd2lsbCB3aW5kIHVwIGRvaW5nKVxuICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihlcnIgfHwgYF9lcnJvci5qcyBjYWxsZWQgd2l0aCBmYWxzeSBlcnJvciAoJHtlcnJ9KWAsIHtcbiAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICB0eXBlOiAnaW5zdHJ1bWVudCcsXG4gICAgICAgIGhhbmRsZWQ6IGZhbHNlLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgZnVuY3Rpb246ICdfZXJyb3IuZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvcmUudmVyY2VsV2FpdFVudGlsKHJlc3BvbnNlRW5kLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQoKSk7XG59XG5cbmV4cG9ydHMuY2FwdHVyZVVuZGVyc2NvcmVFcnJvckV4Y2VwdGlvbiA9IGNhcHR1cmVVbmRlcnNjb3JlRXJyb3JFeGNlcHRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fZXJyb3IuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb3JlIiwicmVxdWlyZSIsInJlc3BvbnNlRW5kIiwiY2FwdHVyZVVuZGVyc2NvcmVFcnJvckV4Y2VwdGlvbiIsImNvbnRleHRPclByb3BzIiwicmVxIiwicmVzIiwiZXJyIiwic3RhdHVzQ29kZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicGF0aG5hbWUiLCJ3aXRoU2NvcGUiLCJzY29wZSIsIm5vcm1hbGl6ZWRSZXF1ZXN0IiwiaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhIiwic2V0U0RLUHJvY2Vzc2luZ01ldGFkYXRhIiwiY2FwdHVyZUV4Y2VwdGlvbiIsIm1lY2hhbmlzbSIsInR5cGUiLCJoYW5kbGVkIiwiZGF0YSIsImZ1bmN0aW9uIiwidmVyY2VsV2FpdFVudGlsIiwiZmx1c2hTYWZlbHlXaXRoVGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Wraps a function with Sentry crons instrumentation by automatically sending check-ins for the given Vercel crons config.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapApiHandlerWithSentryVercelCrons(handler, vercelCronsConfig) {\n  return new Proxy(handler, {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    apply: (originalFunction, thisArg, args) => {\n      if (!args || !args[0]) {\n        return originalFunction.apply(thisArg, args);\n      }\n      const [req] = args;\n      let maybePromiseResult;\n      const cronsKey = 'nextUrl' in req ? req.nextUrl.pathname : req.url;\n      const userAgentHeader = 'nextUrl' in req ? req.headers.get('user-agent') : req.headers['user-agent'];\n      if (!vercelCronsConfig ||\n      // do nothing if vercel crons config is missing\n      !_optionalChain([userAgentHeader, 'optionalAccess', _ => _.includes, 'call', _2 => _2('vercel-cron')]) // do nothing if endpoint is not called from vercel crons\n      ) {\n        return originalFunction.apply(thisArg, args);\n      }\n      const vercelCron = vercelCronsConfig.find(vercelCron => vercelCron.path === cronsKey);\n      if (!vercelCron || !vercelCron.path || !vercelCron.schedule) {\n        return originalFunction.apply(thisArg, args);\n      }\n      const monitorSlug = vercelCron.path;\n      const checkInId = core.captureCheckIn({\n        monitorSlug,\n        status: 'in_progress'\n      }, {\n        maxRuntime: 60 * 12,\n        // (minutes) so 12 hours - just a very high arbitrary number since we don't know the actual duration of the users cron job\n        schedule: {\n          type: 'crontab',\n          value: vercelCron.schedule\n        }\n      });\n      const startTime = Date.now() / 1000;\n      const handleErrorCase = () => {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'error',\n          duration: Date.now() / 1000 - startTime\n        });\n      };\n      try {\n        maybePromiseResult = originalFunction.apply(thisArg, args);\n      } catch (e) {\n        handleErrorCase();\n        throw e;\n      }\n      if (typeof maybePromiseResult === 'object' && maybePromiseResult !== null && 'then' in maybePromiseResult) {\n        Promise.resolve(maybePromiseResult).then(() => {\n          core.captureCheckIn({\n            checkInId,\n            monitorSlug,\n            status: 'ok',\n            duration: Date.now() / 1000 - startTime\n          });\n        }, () => {\n          handleErrorCase();\n        });\n\n        // It is very important that we return the original promise here, because Next.js attaches various properties\n        // to that promise and will throw if they are not on the returned value.\n        return maybePromiseResult;\n      } else {\n        core.captureCheckIn({\n          checkInId,\n          monitorSlug,\n          status: 'ok',\n          duration: Date.now() / 1000 - startTime\n        });\n        return maybePromiseResult;\n      }\n    }\n  });\n}\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom app (\"_app.js\").\n *\n * @param origAppGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapAppGetInitialPropsWithSentry(origAppGetInitialProps) {\n  return new Proxy(origAppGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const [context] = args;\n      const {\n        req,\n        res\n      } = context.ctx;\n      const errorWrappedAppGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedAppGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_app',\n          requestedRouteName: context.ctx.pathname,\n          dataFetchingMethodName: 'getInitialProps'\n        });\n        const {\n          data: appGetInitialProps,\n          sentryTrace,\n          baggage\n        } = await tracedGetInitialProps.apply(thisArg, args);\n        if (typeof appGetInitialProps === 'object' && appGetInitialProps !== null) {\n          // Per definition, `pageProps` is not optional, however an increased amount of users doesn't seem to call\n          // `App.getInitialProps(appContext)` in their custom `_app` pages which is required as per\n          // https://nextjs.org/docs/advanced-features/custom-app - resulting in missing `pageProps`.\n          // For this reason, we just handle the case where `pageProps` doesn't exist explicitly.\n          if (!appGetInitialProps.pageProps) {\n            appGetInitialProps.pageProps = {};\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            appGetInitialProps.pageProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            appGetInitialProps.pageProps._sentryBaggage = baggage;\n          }\n        }\n        return appGetInitialProps;\n      } else {\n        return errorWrappedAppGetInitialProps.apply(thisArg, args);\n      }\n    }\n  });\n}\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQyx5R0FBcUIsQ0FBQztBQUM5QyxNQUFNQyxZQUFZLEdBQUdELG1CQUFPLENBQUMsbUhBQTBCLENBQUM7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSxnQ0FBZ0NBLENBQUNDLHNCQUFzQixFQUFFO0VBQ2hFLE9BQU8sSUFBSUMsS0FBSyxDQUFDRCxzQkFBc0IsRUFBRTtJQUN2Q0UsS0FBSyxFQUFFLE1BQUFBLENBQU9DLGNBQWMsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEtBQUs7TUFDOUMsSUFBSVQsT0FBTyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3JCLE9BQU9PLGNBQWMsQ0FBQ0QsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztNQUM1QztNQUVBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLEdBQUdELElBQUk7TUFDdEIsTUFBTTtRQUFFRSxHQUFHO1FBQUVDO01BQUksQ0FBQyxHQUFHRixPQUFPLENBQUNHLEdBQUc7TUFFaEMsTUFBTUMsOEJBQThCLEdBQUdaLFlBQVksQ0FBQ2Esd0JBQXdCLENBQUNSLGNBQWMsQ0FBQzs7TUFFNUY7TUFDQTtNQUNBO01BQ0E7TUFDQSxJQUFJSSxHQUFHLElBQUlDLEdBQUcsRUFBRTtRQUNkLE1BQU1JLHFCQUFxQixHQUFHZCxZQUFZLENBQUNlLCtCQUErQixDQUFDSCw4QkFBOEIsRUFBRUgsR0FBRyxFQUFFQyxHQUFHLEVBQUU7VUFDbkhNLG9CQUFvQixFQUFFLE9BQU87VUFDN0JDLGtCQUFrQixFQUFFVCxPQUFPLENBQUNHLEdBQUcsQ0FBQ08sUUFBUTtVQUN4Q0Msc0JBQXNCLEVBQUU7UUFDMUIsQ0FBQyxDQUFDO1FBRUYsTUFBTTtVQUNKQyxJQUFJLEVBQUVDLGtCQUFrQjtVQUN4QkMsV0FBVztVQUNYQztRQUNGLENBQUMsR0FFTixNQUFNVCxxQkFBcUIsQ0FBQ1YsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztRQUUzQyxJQUFJLE9BQU9jLGtCQUFrQixLQUFLLFFBQVEsSUFBSUEsa0JBQWtCLEtBQUssSUFBSSxFQUFFO1VBQ3pFO1VBQ0E7VUFDQTtVQUNBO1VBQ0EsSUFBSSxDQUFFQSxrQkFBa0IsQ0FBR0csU0FBUyxFQUFFO1lBQ25DSCxrQkFBa0IsQ0FBR0csU0FBUyxHQUFHLENBQUMsQ0FBQztVQUN0Qzs7VUFFQTtVQUNBLElBQUlGLFdBQVcsRUFBRTtZQUNkRCxrQkFBa0IsQ0FBR0csU0FBUyxDQUFDQyxnQkFBZ0IsR0FBR0gsV0FBVztVQUNoRTs7VUFFQTtVQUNBLElBQUlDLE9BQU8sRUFBRTtZQUNWRixrQkFBa0IsQ0FBR0csU0FBUyxDQUFDRSxjQUFjLEdBQUdILE9BQU87VUFDMUQ7UUFDRjtRQUVBLE9BQU9GLGtCQUFrQjtNQUMzQixDQUFDLE1BQU07UUFDTCxPQUFPVCw4QkFBOEIsQ0FBQ1IsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztNQUM1RDtJQUNGO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQVgsd0NBQXdDLEdBQUdLLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi9wYWdlcy1yb3V0ZXItaW5zdHJ1bWVudGF0aW9uL3dyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzPzFjOGMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uIGluXG4gKiBhIGN1c3RvbSBhcHAgKFwiX2FwcC5qc1wiKS5cbiAqXG4gKiBAcGFyYW0gb3JpZ0FwcEdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KG9yaWdBcHBHZXRJbml0aWFsUHJvcHMpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnQXBwR2V0SW5pdGlhbFByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQuY3R4O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcblxuICAgICAgLy8gR2VuZXJhbGx5IHdlIGNhbiBhc3N1bWUgdGhhdCBgcmVxYCBhbmQgYHJlc2AgYXJlIGFsd2F5cyBkZWZpbmVkIG9uIHRoZSBzZXJ2ZXI6XG4gICAgICAvLyBodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL2RhdGEtZmV0Y2hpbmcvZ2V0LWluaXRpYWwtcHJvcHMjY29udGV4dC1vYmplY3RcbiAgICAgIC8vIFRoaXMgZG9lcyBub3Qgc2VlbSB0byBiZSB0aGUgY2FzZSBpbiBkZXYgbW9kZS4gQmVjYXVzZSB3ZSBoYXZlIG5vIGNsZWFuIHdheSBvZiBhc3NvY2lhdGluZyB0aGUgdGhlIGRhdGEgZmV0Y2hlclxuICAgICAgLy8gc3BhbiB3aXRoIGVhY2ggb3RoZXIgd2hlbiB0aGVyZSBhcmUgbm8gcmVxIG9yIHJlcyBvYmplY3RzLCB3ZSBzaW1wbHkgZG8gbm90IHRyYWNlIHRoZW0gYXQgYWxsIGhlcmUuXG4gICAgICBpZiAocmVxICYmIHJlcykge1xuICAgICAgICBjb25zdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aFRyYWNlZFNlcnZlclNpZGVEYXRhRmV0Y2hlcihlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMsIHJlcSwgcmVzLCB7XG4gICAgICAgICAgZGF0YUZldGNoZXJSb3V0ZU5hbWU6ICcvX2FwcCcsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LmN0eC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGRhdGE6IGFwcEdldEluaXRpYWxQcm9wcyxcbiAgICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgICAgICBiYWdnYWdlLFxuICAgICAgICB9XG5cbiA9IGF3YWl0IHRyYWNlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcblxuICAgICAgICBpZiAodHlwZW9mIGFwcEdldEluaXRpYWxQcm9wcyA9PT0gJ29iamVjdCcgJiYgYXBwR2V0SW5pdGlhbFByb3BzICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gUGVyIGRlZmluaXRpb24sIGBwYWdlUHJvcHNgIGlzIG5vdCBvcHRpb25hbCwgaG93ZXZlciBhbiBpbmNyZWFzZWQgYW1vdW50IG9mIHVzZXJzIGRvZXNuJ3Qgc2VlbSB0byBjYWxsXG4gICAgICAgICAgLy8gYEFwcC5nZXRJbml0aWFsUHJvcHMoYXBwQ29udGV4dClgIGluIHRoZWlyIGN1c3RvbSBgX2FwcGAgcGFnZXMgd2hpY2ggaXMgcmVxdWlyZWQgYXMgcGVyXG4gICAgICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYWR2YW5jZWQtZmVhdHVyZXMvY3VzdG9tLWFwcCAtIHJlc3VsdGluZyBpbiBtaXNzaW5nIGBwYWdlUHJvcHNgLlxuICAgICAgICAgIC8vIEZvciB0aGlzIHJlYXNvbiwgd2UganVzdCBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgYHBhZ2VQcm9wc2AgZG9lc24ndCBleGlzdCBleHBsaWNpdGx5LlxuICAgICAgICAgIGlmICghKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcykge1xuICAgICAgICAgICAgKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcyA9IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIChhcHBHZXRJbml0aWFsUHJvcHMgKS5wYWdlUHJvcHMuX3NlbnRyeVRyYWNlRGF0YSA9IHNlbnRyeVRyYWNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoYmFnZ2FnZSkge1xuICAgICAgICAgICAgKGFwcEdldEluaXRpYWxQcm9wcyApLnBhZ2VQcm9wcy5fc2VudHJ5QmFnZ2FnZSA9IGJhZ2dhZ2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFwcEdldEluaXRpYWxQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcEFwcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBBcHBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCdWlsZCIsInJlcXVpcmUiLCJ3cmFwcGVyVXRpbHMiLCJ3cmFwQXBwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSIsIm9yaWdBcHBHZXRJbml0aWFsUHJvcHMiLCJQcm94eSIsImFwcGx5Iiwid3JhcHBpbmdUYXJnZXQiLCJ0aGlzQXJnIiwiYXJncyIsImNvbnRleHQiLCJyZXEiLCJyZXMiLCJjdHgiLCJlcnJvcldyYXBwZWRBcHBHZXRJbml0aWFsUHJvcHMiLCJ3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24iLCJ0cmFjZWRHZXRJbml0aWFsUHJvcHMiLCJ3aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyIiwiZGF0YUZldGNoZXJSb3V0ZU5hbWUiLCJyZXF1ZXN0ZWRSb3V0ZU5hbWUiLCJwYXRobmFtZSIsImRhdGFGZXRjaGluZ01ldGhvZE5hbWUiLCJkYXRhIiwiYXBwR2V0SW5pdGlhbFByb3BzIiwic2VudHJ5VHJhY2UiLCJiYWdnYWdlIiwicGFnZVByb3BzIiwiX3NlbnRyeVRyYWNlRGF0YSIsIl9zZW50cnlCYWdnYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom document (\"_document.js\").\n *\n * @param origDocumentGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapDocumentGetInitialPropsWithSentry(origDocumentGetInitialProps) {\n  return new Proxy(origDocumentGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const [context] = args;\n      const {\n        req,\n        res\n      } = context;\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_document',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps'\n        });\n        const {\n          data\n        } = await tracedGetInitialProps.apply(thisArg, args);\n        return data;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    }\n  });\n}\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLHlHQUFxQixDQUFDO0FBQzlDLE1BQU1DLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyxtSEFBMEIsQ0FBQzs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLHFDQUFxQ0EsQ0FDNUNDLDJCQUEyQixFQUMzQjtFQUNBLE9BQU8sSUFBSUMsS0FBSyxDQUFDRCwyQkFBMkIsRUFBRTtJQUM1Q0UsS0FBSyxFQUFFLE1BQUFBLENBQU9DLGNBQWMsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEtBQUs7TUFDOUMsSUFBSVQsT0FBTyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3JCLE9BQU9PLGNBQWMsQ0FBQ0QsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztNQUM1QztNQUVBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLEdBQUdELElBQUk7TUFDdEIsTUFBTTtRQUFFRSxHQUFHO1FBQUVDO01BQUksQ0FBQyxHQUFHRixPQUFPO01BRTVCLE1BQU1HLDJCQUEyQixHQUFHWCxZQUFZLENBQUNZLHdCQUF3QixDQUFDUCxjQUFjLENBQUM7TUFDekY7TUFDQTtNQUNBO01BQ0E7TUFDQSxJQUFJSSxHQUFHLElBQUlDLEdBQUcsRUFBRTtRQUNkLE1BQU1HLHFCQUFxQixHQUFHYixZQUFZLENBQUNjLCtCQUErQixDQUFDSCwyQkFBMkIsRUFBRUYsR0FBRyxFQUFFQyxHQUFHLEVBQUU7VUFDaEhLLG9CQUFvQixFQUFFLFlBQVk7VUFDbENDLGtCQUFrQixFQUFFUixPQUFPLENBQUNTLFFBQVE7VUFDcENDLHNCQUFzQixFQUFFO1FBQzFCLENBQUMsQ0FBQztRQUVGLE1BQU07VUFBRUM7UUFBSyxDQUFDLEdBQUcsTUFBTU4scUJBQXFCLENBQUNULEtBQUssQ0FBQ0UsT0FBTyxFQUFFQyxJQUFJLENBQUM7UUFDakUsT0FBT1ksSUFBSTtNQUNiLENBQUMsTUFBTTtRQUNMLE9BQU9SLDJCQUEyQixDQUFDUCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFDO01BQ3pEO0lBQ0Y7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVBWCw2Q0FBNkMsR0FBR0sscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcz9lODhiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gZG9jdW1lbnQgKFwiX2RvY3VtZW50LmpzXCIpLlxuICpcbiAqIEBwYXJhbSBvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMgVGhlIHVzZXIncyBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICBpZiAoaXNCdWlsZC5pc0J1aWxkKCkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBbY29udGV4dF0gPSBhcmdzO1xuICAgICAgY29uc3QgeyByZXEsIHJlcyB9ID0gY29udGV4dDtcblxuICAgICAgY29uc3QgZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICAvLyBHZW5lcmFsbHkgd2UgY2FuIGFzc3VtZSB0aGF0IGByZXFgIGFuZCBgcmVzYCBhcmUgYWx3YXlzIGRlZmluZWQgb24gdGhlIHNlcnZlcjpcbiAgICAgIC8vIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvZGF0YS1mZXRjaGluZy9nZXQtaW5pdGlhbC1wcm9wcyNjb250ZXh0LW9iamVjdFxuICAgICAgLy8gVGhpcyBkb2VzIG5vdCBzZWVtIHRvIGJlIHRoZSBjYXNlIGluIGRldiBtb2RlLiBCZWNhdXNlIHdlIGhhdmUgbm8gY2xlYW4gd2F5IG9mIGFzc29jaWF0aW5nIHRoZSB0aGUgZGF0YSBmZXRjaGVyXG4gICAgICAvLyBzcGFuIHdpdGggZWFjaCBvdGhlciB3aGVuIHRoZXJlIGFyZSBubyByZXEgb3IgcmVzIG9iamVjdHMsIHdlIHNpbXBseSBkbyBub3QgdHJhY2UgdGhlbSBhdCBhbGwgaGVyZS5cbiAgICAgIGlmIChyZXEgJiYgcmVzKSB7XG4gICAgICAgIGNvbnN0IHRyYWNlZEdldEluaXRpYWxQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyKGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcywgcmVxLCByZXMsIHtcbiAgICAgICAgICBkYXRhRmV0Y2hlclJvdXRlTmFtZTogJy9fZG9jdW1lbnQnLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwRG9jdW1lbnRHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5ID0gd3JhcERvY3VtZW50R2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0J1aWxkIiwicmVxdWlyZSIsIndyYXBwZXJVdGlscyIsIndyYXBEb2N1bWVudEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkiLCJvcmlnRG9jdW1lbnRHZXRJbml0aWFsUHJvcHMiLCJQcm94eSIsImFwcGx5Iiwid3JhcHBpbmdUYXJnZXQiLCJ0aGlzQXJnIiwiYXJncyIsImNvbnRleHQiLCJyZXEiLCJyZXMiLCJlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMiLCJ3aXRoRXJyb3JJbnN0cnVtZW50YXRpb24iLCJ0cmFjZWRHZXRJbml0aWFsUHJvcHMiLCJ3aXRoVHJhY2VkU2VydmVyU2lkZURhdGFGZXRjaGVyIiwiZGF0YUZldGNoZXJSb3V0ZU5hbWUiLCJyZXF1ZXN0ZWRSb3V0ZU5hbWUiLCJwYXRobmFtZSIsImRhdGFGZXRjaGluZ01ldGhvZE5hbWUiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function in\n * a custom error page (\"_error.js\").\n *\n * @param origErrorGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapErrorGetInitialPropsWithSentry(origErrorGetInitialProps) {\n  return new Proxy(origErrorGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const [context] = args;\n      const {\n        req,\n        res\n      } = context;\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: '/_error',\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps'\n        });\n        const {\n          data: errorGetInitialProps,\n          baggage,\n          sentryTrace\n        } = await tracedGetInitialProps.apply(thisArg, args);\n        if (typeof errorGetInitialProps === 'object' && errorGetInitialProps !== null) {\n          if (sentryTrace) {\n            // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n            errorGetInitialProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            errorGetInitialProps._sentryBaggage = baggage;\n          }\n        }\n        return errorGetInitialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    }\n  });\n}\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLHlHQUFxQixDQUFDO0FBQzlDLE1BQU1DLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyxtSEFBMEIsQ0FBQzs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLGtDQUFrQ0EsQ0FDekNDLHdCQUF3QixFQUN4QjtFQUNBLE9BQU8sSUFBSUMsS0FBSyxDQUFDRCx3QkFBd0IsRUFBRTtJQUN6Q0UsS0FBSyxFQUFFLE1BQUFBLENBQU9DLGNBQWMsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEtBQUs7TUFDOUMsSUFBSVQsT0FBTyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3JCLE9BQU9PLGNBQWMsQ0FBQ0QsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztNQUM1QztNQUVBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLEdBQUdELElBQUk7TUFDdEIsTUFBTTtRQUFFRSxHQUFHO1FBQUVDO01BQUksQ0FBQyxHQUFHRixPQUFPO01BRTVCLE1BQU1HLDJCQUEyQixHQUFHWCxZQUFZLENBQUNZLHdCQUF3QixDQUFDUCxjQUFjLENBQUM7TUFDekY7TUFDQTtNQUNBO01BQ0E7TUFDQSxJQUFJSSxHQUFHLElBQUlDLEdBQUcsRUFBRTtRQUNkLE1BQU1HLHFCQUFxQixHQUFHYixZQUFZLENBQUNjLCtCQUErQixDQUFDSCwyQkFBMkIsRUFBRUYsR0FBRyxFQUFFQyxHQUFHLEVBQUU7VUFDaEhLLG9CQUFvQixFQUFFLFNBQVM7VUFDL0JDLGtCQUFrQixFQUFFUixPQUFPLENBQUNTLFFBQVE7VUFDcENDLHNCQUFzQixFQUFFO1FBQzFCLENBQUMsQ0FBQztRQUVGLE1BQU07VUFDSkMsSUFBSSxFQUFFQyxvQkFBb0I7VUFDMUJDLE9BQU87VUFDUEM7UUFDRixDQUFDLEdBRU4sTUFBTVQscUJBQXFCLENBQUNULEtBQUssQ0FBQ0UsT0FBTyxFQUFFQyxJQUFJLENBQUM7UUFFM0MsSUFBSSxPQUFPYSxvQkFBb0IsS0FBSyxRQUFRLElBQUlBLG9CQUFvQixLQUFLLElBQUksRUFBRTtVQUM3RSxJQUFJRSxXQUFXLEVBQUU7WUFDZjtZQUNDRixvQkFBb0IsQ0FBR0csZ0JBQWdCLEdBQUdELFdBQVc7VUFDeEQ7O1VBRUE7VUFDQSxJQUFJRCxPQUFPLEVBQUU7WUFDVkQsb0JBQW9CLENBQUdJLGNBQWMsR0FBR0gsT0FBTztVQUNsRDtRQUNGO1FBRUEsT0FBT0Qsb0JBQW9CO01BQzdCLENBQUMsTUFBTTtRQUNMLE9BQU9ULDJCQUEyQixDQUFDUCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFDO01BQ3pEO0lBQ0Y7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVBWCwwQ0FBMEMsR0FBR0ssa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcz81YjEwIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGlzQnVpbGQgPSByZXF1aXJlKCcuLi91dGlscy9pc0J1aWxkLmpzJyk7XG5jb25zdCB3cmFwcGVyVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy93cmFwcGVyVXRpbHMuanMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIHVzZXIncyBleHBvcnRlZCBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvbiBpblxuICogYSBjdXN0b20gZXJyb3IgcGFnZSAoXCJfZXJyb3IuanNcIikuXG4gKlxuICogQHBhcmFtIG9yaWdFcnJvckdldEluaXRpYWxQcm9wcyBUaGUgdXNlcidzIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkoXG4gIG9yaWdFcnJvckdldEluaXRpYWxQcm9wcyxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG9yaWdFcnJvckdldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIC8vIEdlbmVyYWxseSB3ZSBjYW4gYXNzdW1lIHRoYXQgYHJlcWAgYW5kIGByZXNgIGFyZSBhbHdheXMgZGVmaW5lZCBvbiB0aGUgc2VydmVyOlxuICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9kYXRhLWZldGNoaW5nL2dldC1pbml0aWFsLXByb3BzI2NvbnRleHQtb2JqZWN0XG4gICAgICAvLyBUaGlzIGRvZXMgbm90IHNlZW0gdG8gYmUgdGhlIGNhc2UgaW4gZGV2IG1vZGUuIEJlY2F1c2Ugd2UgaGF2ZSBubyBjbGVhbiB3YXkgb2YgYXNzb2NpYXRpbmcgdGhlIHRoZSBkYXRhIGZldGNoZXJcbiAgICAgIC8vIHNwYW4gd2l0aCBlYWNoIG90aGVyIHdoZW4gdGhlcmUgYXJlIG5vIHJlcSBvciByZXMgb2JqZWN0cywgd2Ugc2ltcGx5IGRvIG5vdCB0cmFjZSB0aGVtIGF0IGFsbCBoZXJlLlxuICAgICAgaWYgKHJlcSAmJiByZXMpIHtcbiAgICAgICAgY29uc3QgdHJhY2VkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiAnL19lcnJvcicsXG4gICAgICAgICAgcmVxdWVzdGVkUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIGRhdGFGZXRjaGluZ01ldGhvZE5hbWU6ICdnZXRJbml0aWFsUHJvcHMnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGF0YTogZXJyb3JHZXRJbml0aWFsUHJvcHMsXG4gICAgICAgICAgYmFnZ2FnZSxcbiAgICAgICAgICBzZW50cnlUcmFjZSxcbiAgICAgICAgfVxuXG4gPSBhd2FpdCB0cmFjZWRHZXRJbml0aWFsUHJvcHMuYXBwbHkodGhpc0FyZywgYXJncyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlcnJvckdldEluaXRpYWxQcm9wcyA9PT0gJ29iamVjdCcgJiYgZXJyb3JHZXRJbml0aWFsUHJvcHMgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICAgIChlcnJvckdldEluaXRpYWxQcm9wcyApLl9zZW50cnlUcmFjZURhdGEgPSBzZW50cnlUcmFjZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKGJhZ2dhZ2UpIHtcbiAgICAgICAgICAgIChlcnJvckdldEluaXRpYWxQcm9wcyApLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXJyb3JHZXRJbml0aWFsUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLndyYXBFcnJvckdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkgPSB3cmFwRXJyb3JHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQnVpbGQiLCJyZXF1aXJlIiwid3JhcHBlclV0aWxzIiwid3JhcEVycm9yR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSIsIm9yaWdFcnJvckdldEluaXRpYWxQcm9wcyIsIlByb3h5IiwiYXBwbHkiLCJ3cmFwcGluZ1RhcmdldCIsInRoaXNBcmciLCJhcmdzIiwiY29udGV4dCIsInJlcSIsInJlcyIsImVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyIsIndpdGhFcnJvckluc3RydW1lbnRhdGlvbiIsInRyYWNlZEdldEluaXRpYWxQcm9wcyIsIndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIiLCJkYXRhRmV0Y2hlclJvdXRlTmFtZSIsInJlcXVlc3RlZFJvdXRlTmFtZSIsInBhdGhuYW1lIiwiZGF0YUZldGNoaW5nTWV0aG9kTmFtZSIsImRhdGEiLCJlcnJvckdldEluaXRpYWxQcm9wcyIsImJhZ2dhZ2UiLCJzZW50cnlUcmFjZSIsIl9zZW50cnlUcmFjZURhdGEiLCJfc2VudHJ5QmFnZ2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar {\n  _asyncNullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getInitialProps` function\n *\n * @param origGetInitialProps The user's `getInitialProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetInitialPropsWithSentry(origGetInitialProps) {\n  return new Proxy(origGetInitialProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const [context] = args;\n      const {\n        req,\n        res\n      } = context;\n      const errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      // Generally we can assume that `req` and `res` are always defined on the server:\n      // https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object\n      // This does not seem to be the case in dev mode. Because we have no clean way of associating the the data fetcher\n      // span with each other when there are no req or res objects, we simply do not trace them at all here.\n      if (req && res) {\n        const tracedGetInitialProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetInitialProps, req, res, {\n          dataFetcherRouteName: context.pathname,\n          requestedRouteName: context.pathname,\n          dataFetchingMethodName: 'getInitialProps'\n        });\n        const {\n          data: initialProps,\n          baggage,\n          sentryTrace\n        } = await _asyncNullishCoalesce(await tracedGetInitialProps.apply(thisArg, args), async () => ({})); // Next.js allows undefined to be returned from a getInitialPropsFunction.\n\n        if (typeof initialProps === 'object' && initialProps !== null) {\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (sentryTrace) {\n            initialProps._sentryTraceData = sentryTrace;\n          }\n\n          // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n          if (baggage) {\n            initialProps._sentryBaggage = baggage;\n          }\n        }\n        return initialProps;\n      } else {\n        return errorWrappedGetInitialProps.apply(thisArg, args);\n      }\n    }\n  });\n}\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLElBQUk7RUFDRkE7QUFDRixDQUFDLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUUzQkMsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxPQUFPLEdBQUdMLG1CQUFPLENBQUMseUdBQXFCLENBQUM7QUFDOUMsTUFBTU0sWUFBWSxHQUFHTixtQkFBTyxDQUFDLG1IQUEwQixDQUFDOztBQUV4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNPLDZCQUE2QkEsQ0FBQ0MsbUJBQW1CLEVBQUU7RUFDMUQsT0FBTyxJQUFJQyxLQUFLLENBQUNELG1CQUFtQixFQUFFO0lBQ3BDRSxLQUFLLEVBQUUsTUFBQUEsQ0FBT0MsY0FBYyxFQUFFQyxPQUFPLEVBQUVDLElBQUksS0FBSztNQUM5QyxJQUFJUixPQUFPLENBQUNBLE9BQU8sQ0FBQyxDQUFDLEVBQUU7UUFDckIsT0FBT00sY0FBYyxDQUFDRCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFDO01BQzVDO01BRUEsTUFBTSxDQUFDQyxPQUFPLENBQUMsR0FBR0QsSUFBSTtNQUN0QixNQUFNO1FBQUVFLEdBQUc7UUFBRUM7TUFBSSxDQUFDLEdBQUdGLE9BQU87TUFFNUIsTUFBTUcsMkJBQTJCLEdBQUdYLFlBQVksQ0FBQ1ksd0JBQXdCLENBQUNQLGNBQWMsQ0FBQztNQUN6RjtNQUNBO01BQ0E7TUFDQTtNQUNBLElBQUlJLEdBQUcsSUFBSUMsR0FBRyxFQUFFO1FBQ2QsTUFBTUcscUJBQXFCLEdBQUdiLFlBQVksQ0FBQ2MsK0JBQStCLENBQUNILDJCQUEyQixFQUFFRixHQUFHLEVBQUVDLEdBQUcsRUFBRTtVQUNoSEssb0JBQW9CLEVBQUVQLE9BQU8sQ0FBQ1EsUUFBUTtVQUN0Q0Msa0JBQWtCLEVBQUVULE9BQU8sQ0FBQ1EsUUFBUTtVQUNwQ0Usc0JBQXNCLEVBQUU7UUFDMUIsQ0FBQyxDQUFDO1FBRUYsTUFBTTtVQUNKQyxJQUFJLEVBQUVDLFlBQVk7VUFDbEJDLE9BQU87VUFDUEM7UUFDRixDQUFDLEdBRU4sTUFBTTdCLHFCQUFxQixDQUFFLE1BQU1vQixxQkFBcUIsQ0FBQ1QsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQyxFQUFHLGFBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7O1FBRS9GLElBQUksT0FBT2EsWUFBWSxLQUFLLFFBQVEsSUFBSUEsWUFBWSxLQUFLLElBQUksRUFBRTtVQUM3RDtVQUNBLElBQUlFLFdBQVcsRUFBRTtZQUNkRixZQUFZLENBQUdHLGdCQUFnQixHQUFHRCxXQUFXO1VBQ2hEOztVQUVBO1VBQ0EsSUFBSUQsT0FBTyxFQUFFO1lBQ1ZELFlBQVksQ0FBR0ksY0FBYyxHQUFHSCxPQUFPO1VBQzFDO1FBQ0Y7UUFFQSxPQUFPRCxZQUFZO01BQ3JCLENBQUMsTUFBTTtRQUNMLE9BQU9ULDJCQUEyQixDQUFDUCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFDO01BQ3pEO0lBQ0Y7RUFDRixDQUFDLENBQUM7QUFDSjtBQUVBVixxQ0FBcUMsR0FBR0ksNkJBQTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanM/NzM4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIge1xuICBfYXN5bmNOdWxsaXNoQ29hbGVzY2Vcbn0gPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRJbml0aWFsUHJvcHNgIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIG9yaWdHZXRJbml0aWFsUHJvcHMgVGhlIHVzZXIncyBgZ2V0SW5pdGlhbFByb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeShvcmlnR2V0SW5pdGlhbFByb3BzKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0dldEluaXRpYWxQcm9wcywge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtjb250ZXh0XSA9IGFyZ3M7XG4gICAgICBjb25zdCB7IHJlcSwgcmVzIH0gPSBjb250ZXh0O1xuXG4gICAgICBjb25zdCBlcnJvcldyYXBwZWRHZXRJbml0aWFsUHJvcHMgPSB3cmFwcGVyVXRpbHMud2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uKHdyYXBwaW5nVGFyZ2V0KTtcbiAgICAgIC8vIEdlbmVyYWxseSB3ZSBjYW4gYXNzdW1lIHRoYXQgYHJlcWAgYW5kIGByZXNgIGFyZSBhbHdheXMgZGVmaW5lZCBvbiB0aGUgc2VydmVyOlxuICAgICAgLy8gaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9kYXRhLWZldGNoaW5nL2dldC1pbml0aWFsLXByb3BzI2NvbnRleHQtb2JqZWN0XG4gICAgICAvLyBUaGlzIGRvZXMgbm90IHNlZW0gdG8gYmUgdGhlIGNhc2UgaW4gZGV2IG1vZGUuIEJlY2F1c2Ugd2UgaGF2ZSBubyBjbGVhbiB3YXkgb2YgYXNzb2NpYXRpbmcgdGhlIHRoZSBkYXRhIGZldGNoZXJcbiAgICAgIC8vIHNwYW4gd2l0aCBlYWNoIG90aGVyIHdoZW4gdGhlcmUgYXJlIG5vIHJlcSBvciByZXMgb2JqZWN0cywgd2Ugc2ltcGx5IGRvIG5vdCB0cmFjZSB0aGVtIGF0IGFsbCBoZXJlLlxuICAgICAgaWYgKHJlcSAmJiByZXMpIHtcbiAgICAgICAgY29uc3QgdHJhY2VkR2V0SW5pdGlhbFByb3BzID0gd3JhcHBlclV0aWxzLndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0SW5pdGlhbFByb3BzLCByZXEsIHJlcywge1xuICAgICAgICAgIGRhdGFGZXRjaGVyUm91dGVOYW1lOiBjb250ZXh0LnBhdGhuYW1lLFxuICAgICAgICAgIHJlcXVlc3RlZFJvdXRlTmFtZTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgICAgICBkYXRhRmV0Y2hpbmdNZXRob2ROYW1lOiAnZ2V0SW5pdGlhbFByb3BzJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGRhdGE6IGluaXRpYWxQcm9wcyxcbiAgICAgICAgICBiYWdnYWdlLFxuICAgICAgICAgIHNlbnRyeVRyYWNlLFxuICAgICAgICB9XG5cbiA9IGF3YWl0IF9hc3luY051bGxpc2hDb2FsZXNjZSgoYXdhaXQgdHJhY2VkR2V0SW5pdGlhbFByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpKSwgYXN5bmMgKCkgPT4gKCB7fSkpOyAvLyBOZXh0LmpzIGFsbG93cyB1bmRlZmluZWQgdG8gYmUgcmV0dXJuZWQgZnJvbSBhIGdldEluaXRpYWxQcm9wc0Z1bmN0aW9uLlxuXG4gICAgICAgIGlmICh0eXBlb2YgaW5pdGlhbFByb3BzID09PSAnb2JqZWN0JyAmJiBpbml0aWFsUHJvcHMgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBUaGUgTmV4dC5qcyBzZXJpYWxpemVyIHRocm93cyBvbiB1bmRlZmluZWQgdmFsdWVzIHNvIHdlIG5lZWQgdG8gZ3VhcmQgZm9yIGl0ICgjMTIxMDIpXG4gICAgICAgICAgaWYgKHNlbnRyeVRyYWNlKSB7XG4gICAgICAgICAgICAoaW5pdGlhbFByb3BzICkuX3NlbnRyeVRyYWNlRGF0YSA9IHNlbnRyeVRyYWNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFRoZSBOZXh0LmpzIHNlcmlhbGl6ZXIgdGhyb3dzIG9uIHVuZGVmaW5lZCB2YWx1ZXMgc28gd2UgbmVlZCB0byBndWFyZCBmb3IgaXQgKCMxMjEwMilcbiAgICAgICAgICBpZiAoYmFnZ2FnZSkge1xuICAgICAgICAgICAgKGluaXRpYWxQcm9wcyApLl9zZW50cnlCYWdnYWdlID0gYmFnZ2FnZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5pdGlhbFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwR2V0SW5pdGlhbFByb3BzV2l0aFNlbnRyeSA9IHdyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEdldEluaXRpYWxQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOlsiX2FzeW5jTnVsbGlzaENvYWxlc2NlIiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCdWlsZCIsIndyYXBwZXJVdGlscyIsIndyYXBHZXRJbml0aWFsUHJvcHNXaXRoU2VudHJ5Iiwib3JpZ0dldEluaXRpYWxQcm9wcyIsIlByb3h5IiwiYXBwbHkiLCJ3cmFwcGluZ1RhcmdldCIsInRoaXNBcmciLCJhcmdzIiwiY29udGV4dCIsInJlcSIsInJlcyIsImVycm9yV3JhcHBlZEdldEluaXRpYWxQcm9wcyIsIndpdGhFcnJvckluc3RydW1lbnRhdGlvbiIsInRyYWNlZEdldEluaXRpYWxQcm9wcyIsIndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIiLCJkYXRhRmV0Y2hlclJvdXRlTmFtZSIsInBhdGhuYW1lIiwicmVxdWVzdGVkUm91dGVOYW1lIiwiZGF0YUZldGNoaW5nTWV0aG9kTmFtZSIsImRhdGEiLCJpbml0aWFsUHJvcHMiLCJiYWdnYWdlIiwic2VudHJ5VHJhY2UiLCJfc2VudHJ5VHJhY2VEYXRhIiwiX3NlbnRyeUJhZ2dhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetServerSidePropsWithSentry(origGetServerSideProps, parameterizedRoute) {\n  return new Proxy(origGetServerSideProps, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const [context] = args;\n      const {\n        req,\n        res\n      } = context;\n      const errorWrappedGetServerSideProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      const tracedGetServerSideProps = wrapperUtils.withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {\n        dataFetcherRouteName: parameterizedRoute,\n        requestedRouteName: parameterizedRoute,\n        dataFetchingMethodName: 'getServerSideProps'\n      });\n      const {\n        data: serverSideProps,\n        baggage,\n        sentryTrace\n      } = await tracedGetServerSideProps.apply(thisArg, args);\n      if (typeof serverSideProps === 'object' && serverSideProps !== null && 'props' in serverSideProps) {\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (sentryTrace) {\n          serverSideProps.props._sentryTraceData = sentryTrace;\n        }\n\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (baggage) {\n          serverSideProps.props._sentryBaggage = baggage;\n        }\n      }\n      return serverSideProps;\n    }\n  });\n}\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeS5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQyx5R0FBcUIsQ0FBQztBQUM5QyxNQUFNQyxZQUFZLEdBQUdELG1CQUFPLENBQUMsbUhBQTBCLENBQUM7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsZ0NBQWdDQSxDQUN2Q0Msc0JBQXNCLEVBQ3RCQyxrQkFBa0IsRUFDbEI7RUFDQSxPQUFPLElBQUlDLEtBQUssQ0FBQ0Ysc0JBQXNCLEVBQUU7SUFDdkNHLEtBQUssRUFBRSxNQUFBQSxDQUFPQyxjQUFjLEVBQUVDLE9BQU8sRUFBRUMsSUFBSSxLQUFLO01BQzlDLElBQUlWLE9BQU8sQ0FBQ0EsT0FBTyxDQUFDLENBQUMsRUFBRTtRQUNyQixPQUFPUSxjQUFjLENBQUNELEtBQUssQ0FBQ0UsT0FBTyxFQUFFQyxJQUFJLENBQUM7TUFDNUM7TUFFQSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxHQUFHRCxJQUFJO01BQ3RCLE1BQU07UUFBRUUsR0FBRztRQUFFQztNQUFJLENBQUMsR0FBR0YsT0FBTztNQUU1QixNQUFNRyw4QkFBOEIsR0FBR1osWUFBWSxDQUFDYSx3QkFBd0IsQ0FBQ1AsY0FBYyxDQUFDO01BQzVGLE1BQU1RLHdCQUF3QixHQUFHZCxZQUFZLENBQUNlLCtCQUErQixDQUFDSCw4QkFBOEIsRUFBRUYsR0FBRyxFQUFFQyxHQUFHLEVBQUU7UUFDdEhLLG9CQUFvQixFQUFFYixrQkFBa0I7UUFDeENjLGtCQUFrQixFQUFFZCxrQkFBa0I7UUFDdENlLHNCQUFzQixFQUFFO01BQzFCLENBQUMsQ0FBQztNQUVGLE1BQU07UUFDSkMsSUFBSSxFQUFFQyxlQUFlO1FBQ3JCQyxPQUFPO1FBQ1BDO01BQ0YsQ0FBQyxHQUVKLE1BQU9SLHdCQUF3QixDQUFDVCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFHO01BRW5ELElBQUksT0FBT1ksZUFBZSxLQUFLLFFBQVEsSUFBSUEsZUFBZSxLQUFLLElBQUksSUFBSSxPQUFPLElBQUlBLGVBQWUsRUFBRTtRQUNqRztRQUNBLElBQUlFLFdBQVcsRUFBRTtVQUNkRixlQUFlLENBQUNHLEtBQUssQ0FBR0MsZ0JBQWdCLEdBQUdGLFdBQVc7UUFDekQ7O1FBRUE7UUFDQSxJQUFJRCxPQUFPLEVBQUU7VUFDVkQsZUFBZSxDQUFDRyxLQUFLLENBQUdFLGNBQWMsR0FBR0osT0FBTztRQUNuRDtNQUNGO01BRUEsT0FBT0QsZUFBZTtJQUN4QjtFQUNGLENBQUMsQ0FBQztBQUNKO0FBRUF4Qix3Q0FBd0MsR0FBR0ssZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3BhZ2VzLXJvdXRlci1pbnN0cnVtZW50YXRpb24vd3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkuanM/OTU0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCBpc0J1aWxkID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNCdWlsZC5qcycpO1xuY29uc3Qgd3JhcHBlclV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcHBlclV0aWxzLmpzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSB1c2VyJ3MgZXhwb3J0ZWQgYGdldFNlcnZlclNpZGVQcm9wc2AgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gb3JpZ0dldFNlcnZlclNpZGVQcm9wcyBUaGUgdXNlcidzIGBnZXRTZXJ2ZXJTaWRlUHJvcHNgIGZ1bmN0aW9uXG4gKiBAcGFyYW0gcGFyYW1ldGVyaXplZFJvdXRlIFRoZSBwYWdlJ3MgcGFyYW1ldGVyaXplZCByb3V0ZVxuICogQHJldHVybnMgQSB3cmFwcGVkIHZlcnNpb24gb2YgdGhlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHdyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnR2V0U2VydmVyU2lkZVByb3BzLFxuICBwYXJhbWV0ZXJpemVkUm91dGUsXG4pIHtcbiAgcmV0dXJuIG5ldyBQcm94eShvcmlnR2V0U2VydmVyU2lkZVByb3BzLCB7XG4gICAgYXBwbHk6IGFzeW5jICh3cmFwcGluZ1RhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgaWYgKGlzQnVpbGQuaXNCdWlsZCgpKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGluZ1RhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgW2NvbnRleHRdID0gYXJncztcbiAgICAgIGNvbnN0IHsgcmVxLCByZXMgfSA9IGNvbnRleHQ7XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldFNlcnZlclNpZGVQcm9wcyA9IHdyYXBwZXJVdGlscy53aXRoRXJyb3JJbnN0cnVtZW50YXRpb24od3JhcHBpbmdUYXJnZXQpO1xuICAgICAgY29uc3QgdHJhY2VkR2V0U2VydmVyU2lkZVByb3BzID0gd3JhcHBlclV0aWxzLndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIoZXJyb3JXcmFwcGVkR2V0U2VydmVyU2lkZVByb3BzLCByZXEsIHJlcywge1xuICAgICAgICBkYXRhRmV0Y2hlclJvdXRlTmFtZTogcGFyYW1ldGVyaXplZFJvdXRlLFxuICAgICAgICByZXF1ZXN0ZWRSb3V0ZU5hbWU6IHBhcmFtZXRlcml6ZWRSb3V0ZSxcbiAgICAgICAgZGF0YUZldGNoaW5nTWV0aG9kTmFtZTogJ2dldFNlcnZlclNpZGVQcm9wcycsXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qge1xuICAgICAgICBkYXRhOiBzZXJ2ZXJTaWRlUHJvcHMsXG4gICAgICAgIGJhZ2dhZ2UsXG4gICAgICAgIHNlbnRyeVRyYWNlLFxuICAgICAgfVxuXG4gPSBhd2FpdCAodHJhY2VkR2V0U2VydmVyU2lkZVByb3BzLmFwcGx5KHRoaXNBcmcsIGFyZ3MpICk7XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VydmVyU2lkZVByb3BzID09PSAnb2JqZWN0JyAmJiBzZXJ2ZXJTaWRlUHJvcHMgIT09IG51bGwgJiYgJ3Byb3BzJyBpbiBzZXJ2ZXJTaWRlUHJvcHMpIHtcbiAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICBpZiAoc2VudHJ5VHJhY2UpIHtcbiAgICAgICAgICAoc2VydmVyU2lkZVByb3BzLnByb3BzICkuX3NlbnRyeVRyYWNlRGF0YSA9IHNlbnRyeVRyYWNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIE5leHQuanMgc2VyaWFsaXplciB0aHJvd3Mgb24gdW5kZWZpbmVkIHZhbHVlcyBzbyB3ZSBuZWVkIHRvIGd1YXJkIGZvciBpdCAoIzEyMTAyKVxuICAgICAgICBpZiAoYmFnZ2FnZSkge1xuICAgICAgICAgIChzZXJ2ZXJTaWRlUHJvcHMucHJvcHMgKS5fc2VudHJ5QmFnZ2FnZSA9IGJhZ2dhZ2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlcnZlclNpZGVQcm9wcztcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy53cmFwR2V0U2VydmVyU2lkZVByb3BzV2l0aFNlbnRyeSA9IHdyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcEdldFNlcnZlclNpZGVQcm9wc1dpdGhTZW50cnkuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0J1aWxkIiwicmVxdWlyZSIsIndyYXBwZXJVdGlscyIsIndyYXBHZXRTZXJ2ZXJTaWRlUHJvcHNXaXRoU2VudHJ5Iiwib3JpZ0dldFNlcnZlclNpZGVQcm9wcyIsInBhcmFtZXRlcml6ZWRSb3V0ZSIsIlByb3h5IiwiYXBwbHkiLCJ3cmFwcGluZ1RhcmdldCIsInRoaXNBcmciLCJhcmdzIiwiY29udGV4dCIsInJlcSIsInJlcyIsImVycm9yV3JhcHBlZEdldFNlcnZlclNpZGVQcm9wcyIsIndpdGhFcnJvckluc3RydW1lbnRhdGlvbiIsInRyYWNlZEdldFNlcnZlclNpZGVQcm9wcyIsIndpdGhUcmFjZWRTZXJ2ZXJTaWRlRGF0YUZldGNoZXIiLCJkYXRhRmV0Y2hlclJvdXRlTmFtZSIsInJlcXVlc3RlZFJvdXRlTmFtZSIsImRhdGFGZXRjaGluZ01ldGhvZE5hbWUiLCJkYXRhIiwic2VydmVyU2lkZVByb3BzIiwiYmFnZ2FnZSIsInNlbnRyeVRyYWNlIiwicHJvcHMiLCJfc2VudHJ5VHJhY2VEYXRhIiwiX3NlbnRyeUJhZ2dhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isBuild = __webpack_require__(/*! ../utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst wrapperUtils = __webpack_require__(/*! ../utils/wrapperUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\");\n\n/**\n * Create a wrapped version of the user's exported `getStaticProps` function\n *\n * @param origGetStaticProps The user's `getStaticProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nfunction wrapGetStaticPropsWithSentry(origGetStaticPropsa, _parameterizedRoute) {\n  return new Proxy(origGetStaticPropsa, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      if (isBuild.isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n      const errorWrappedGetStaticProps = wrapperUtils.withErrorInstrumentation(wrappingTarget);\n      return wrapperUtils.callDataFetcherTraced(errorWrappedGetStaticProps, args);\n    }\n  });\n}\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLHlHQUFxQixDQUFDO0FBQzlDLE1BQU1DLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyxtSEFBMEIsQ0FBQzs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSw0QkFBNEJBLENBQ25DQyxtQkFBbUIsRUFDbkJDLG1CQUFtQixFQUNuQjtFQUNBLE9BQU8sSUFBSUMsS0FBSyxDQUFDRixtQkFBbUIsRUFBRTtJQUNwQ0csS0FBSyxFQUFFLE1BQUFBLENBQU9DLGNBQWMsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEtBQUs7TUFDOUMsSUFBSVYsT0FBTyxDQUFDQSxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQ3JCLE9BQU9RLGNBQWMsQ0FBQ0QsS0FBSyxDQUFDRSxPQUFPLEVBQUVDLElBQUksQ0FBQztNQUM1QztNQUVBLE1BQU1DLDBCQUEwQixHQUFHVCxZQUFZLENBQUNVLHdCQUF3QixDQUFDSixjQUFjLENBQUM7TUFDeEYsT0FBT04sWUFBWSxDQUFDVyxxQkFBcUIsQ0FBQ0YsMEJBQTBCLEVBQUVELElBQUksQ0FBQztJQUM3RTtFQUNGLENBQUMsQ0FBQztBQUNKO0FBRUFaLG9DQUFvQyxHQUFHSyw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vcGFnZXMtcm91dGVyLWluc3RydW1lbnRhdGlvbi93cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzPzE1ZWYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgaXNCdWlsZCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzQnVpbGQuanMnKTtcbmNvbnN0IHdyYXBwZXJVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dyYXBwZXJVdGlscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgdXNlcidzIGV4cG9ydGVkIGBnZXRTdGF0aWNQcm9wc2AgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0gb3JpZ0dldFN0YXRpY1Byb3BzIFRoZSB1c2VyJ3MgYGdldFN0YXRpY1Byb3BzYCBmdW5jdGlvblxuICogQHBhcmFtIHBhcmFtZXRlcml6ZWRSb3V0ZSBUaGUgcGFnZSdzIHBhcmFtZXRlcml6ZWQgcm91dGVcbiAqIEByZXR1cm5zIEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiB3cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5KFxuICBvcmlnR2V0U3RhdGljUHJvcHNhLFxuICBfcGFyYW1ldGVyaXplZFJvdXRlLFxuKSB7XG4gIHJldHVybiBuZXcgUHJveHkob3JpZ0dldFN0YXRpY1Byb3BzYSwge1xuICAgIGFwcGx5OiBhc3luYyAod3JhcHBpbmdUYXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgIGlmIChpc0J1aWxkLmlzQnVpbGQoKSkge1xuICAgICAgICByZXR1cm4gd3JhcHBpbmdUYXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVycm9yV3JhcHBlZEdldFN0YXRpY1Byb3BzID0gd3JhcHBlclV0aWxzLndpdGhFcnJvckluc3RydW1lbnRhdGlvbih3cmFwcGluZ1RhcmdldCk7XG4gICAgICByZXR1cm4gd3JhcHBlclV0aWxzLmNhbGxEYXRhRmV0Y2hlclRyYWNlZChlcnJvcldyYXBwZWRHZXRTdGF0aWNQcm9wcywgYXJncyk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcEdldFN0YXRpY1Byb3BzV2l0aFNlbnRyeSA9IHdyYXBHZXRTdGF0aWNQcm9wc1dpdGhTZW50cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCdWlsZCIsInJlcXVpcmUiLCJ3cmFwcGVyVXRpbHMiLCJ3cmFwR2V0U3RhdGljUHJvcHNXaXRoU2VudHJ5Iiwib3JpZ0dldFN0YXRpY1Byb3BzYSIsIl9wYXJhbWV0ZXJpemVkUm91dGUiLCJQcm94eSIsImFwcGx5Iiwid3JhcHBpbmdUYXJnZXQiLCJ0aGlzQXJnIiwiYXJncyIsImVycm9yV3JhcHBlZEdldFN0YXRpY1Byb3BzIiwid2l0aEVycm9ySW5zdHJ1bWVudGF0aW9uIiwiY2FsbERhdGFGZXRjaGVyVHJhY2VkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nfunction isReactClassComponent(target) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return typeof target === 'function' && _optionalChain([target, 'optionalAccess', _ => _.prototype, 'optionalAccess', _2 => _2.isReactComponent]);\n}\n\n/**\n * Wraps a page component with Sentry error instrumentation.\n */\nfunction wrapPageComponentWithSentry(pageComponent) {\n  if (isReactClassComponent(pageComponent)) {\n    return class SentryWrappedPageComponent extends pageComponent {\n      render(...args) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = typeof this.props === 'object' && this.props !== null && '_sentryTraceData' in this.props && typeof this.props._sentryTraceData === 'string' ? this.props._sentryTraceData : undefined;\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: _optionalChain([traceparentData, 'optionalAccess', _3 => _3.parentSpanId]),\n              trace_id: _optionalChain([traceparentData, 'optionalAccess', _4 => _4.traceId])\n            });\n          }\n          try {\n            return super.render(...args);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false\n              }\n            });\n            throw e;\n          }\n        });\n      }\n    };\n  } else if (typeof pageComponent === 'function') {\n    return new Proxy(pageComponent, {\n      apply(target, thisArg, argArray) {\n        return core.withIsolationScope(() => {\n          const scope = core.getCurrentScope();\n          // We extract the sentry trace data that is put in the component props by datafetcher wrappers\n          const sentryTraceData = _optionalChain([argArray, 'optionalAccess', _5 => _5[0], 'optionalAccess', _6 => _6._sentryTraceData]);\n          if (sentryTraceData) {\n            const traceparentData = core.extractTraceparentData(sentryTraceData);\n            scope.setContext('trace', {\n              span_id: _optionalChain([traceparentData, 'optionalAccess', _7 => _7.parentSpanId]),\n              trace_id: _optionalChain([traceparentData, 'optionalAccess', _8 => _8.traceId])\n            });\n          }\n          try {\n            return target.apply(thisArg, argArray);\n          } catch (e) {\n            core.captureException(e, {\n              mechanism: {\n                handled: false\n              }\n            });\n            throw e;\n          }\n        });\n      }\n    });\n  } else {\n    return pageComponent;\n  }\n}\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n/**\n * If this attribute is attached to a transaction, the Next.js SDK will drop that transaction.\n */\nconst TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = 'sentry.drop_transaction';\nconst TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = 'sentry.sentry_trace_backfill';\nconst TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = 'sentry.route_backfill';\nexports.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL = TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL;\nexports.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL = TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL;\nexports.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION = TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQzs7QUFFN0Q7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsd0NBQXdDLEdBQUcseUJBQXlCO0FBRTFFLE1BQU1DLHNDQUFzQyxHQUFHLDhCQUE4QjtBQUU3RSxNQUFNQyxzQ0FBc0MsR0FBRyx1QkFBdUI7QUFFdEVKLDhDQUE4QyxHQUFHSSxzQ0FBc0M7QUFDdkZKLDhDQUE4QyxHQUFHRyxzQ0FBc0M7QUFDdkZILGdEQUFnRCxHQUFHRSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vc3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanM/ZjhhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIElmIHRoaXMgYXR0cmlidXRlIGlzIGF0dGFjaGVkIHRvIGEgdHJhbnNhY3Rpb24sIHRoZSBOZXh0LmpzIFNESyB3aWxsIGRyb3AgdGhhdCB0cmFuc2FjdGlvbi5cbiAqL1xuY29uc3QgVFJBTlNBQ1RJT05fQVRUUl9TSE9VTERfRFJPUF9UUkFOU0FDVElPTiA9ICdzZW50cnkuZHJvcF90cmFuc2FjdGlvbic7XG5cbmNvbnN0IFRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1RSQUNFX0JBQ0tGSUxMID0gJ3NlbnRyeS5zZW50cnlfdHJhY2VfYmFja2ZpbGwnO1xuXG5jb25zdCBUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTCA9ICdzZW50cnkucm91dGVfYmFja2ZpbGwnO1xuXG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1JPVVRFX0JBQ0tGSUxMID0gVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfUk9VVEVfQkFDS0ZJTEw7XG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0VOVFJZX1RSQUNFX0JBQ0tGSUxMID0gVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfVFJBQ0VfQkFDS0ZJTEw7XG5leHBvcnRzLlRSQU5TQUNUSU9OX0FUVFJfU0hPVUxEX0RST1BfVFJBTlNBQ1RJT04gPSBUUkFOU0FDVElPTl9BVFRSX1NIT1VMRF9EUk9QX1RSQU5TQUNUSU9OO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Bhbi1hdHRyaWJ1dGVzLXdpdGgtbG9naWMtYXR0YWNoZWQuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUUkFOU0FDVElPTl9BVFRSX1NIT1VMRF9EUk9QX1RSQU5TQUNUSU9OIiwiVFJBTlNBQ1RJT05fQVRUUl9TRU5UUllfVFJBQ0VfQkFDS0ZJTEwiLCJUUkFOU0FDVElPTl9BVFRSX1NFTlRSWV9ST1VURV9CQUNLRklMTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst constants = __webpack_require__(/*! next/constants */ \"(instrument)/./node_modules/next/dist/esm/api/constants.js\");\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nfunction isBuild() {\n  return process.env.NEXT_PHASE === constants.PHASE_PRODUCTION_BUILD;\n}\nexports.isBuild = isBuild;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvaXNCdWlsZC5qcyIsIm1hcHBpbmdzIjoiOztBQUFBQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxrRkFBZ0IsQ0FBQzs7QUFFM0M7QUFDQTtBQUNBO0FBQ0EsU0FBU0MsT0FBT0EsQ0FBQSxFQUFHO0VBQ2pCLE9BQU9DLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxVQUFVLEtBQUtMLFNBQVMsQ0FBQ00sc0JBQXNCO0FBQ3BFO0FBRUFSLGVBQWUsR0FBR0ksT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2NvbW1vbi91dGlscy9pc0J1aWxkLmpzPzBkMzciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnbmV4dC9jb25zdGFudHMnKTtcblxuLyoqXG4gKiBEZWNpZGUgaWYgdGhlIGN1cnJlbnRseSBydW5uaW5nIHByb2Nlc3MgaXMgcGFydCBvZiB0aGUgYnVpbGQgcGhhc2Ugb3IgaGFwcGVuaW5nIGF0IHJ1bnRpbWUuXG4gKi9cbmZ1bmN0aW9uIGlzQnVpbGQoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5ORVhUX1BIQVNFID09PSBjb25zdGFudHMuUEhBU0VfUFJPRFVDVElPTl9CVUlMRDtcbn1cblxuZXhwb3J0cy5pc0J1aWxkID0gaXNCdWlsZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQnVpbGQuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb25zdGFudHMiLCJyZXF1aXJlIiwiaXNCdWlsZCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BIQVNFIiwiUEhBU0VfUFJPRFVDVElPTl9CVUlMRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nasync function flushSafelyWithTimeout() {\n  try {\n    debugBuild.DEBUG_BUILD && core.logger.log('Flushing events...');\n    await core.flush(2000);\n    debugBuild.DEBUG_BUILD && core.logger.log('Done flushing events');\n  } catch (e) {\n    debugBuild.DEBUG_BUILD && core.logger.log('Error while flushing events:\\n', e);\n  }\n}\nexports.flushSafelyWithTimeout = flushSafelyWithTimeout;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vdXRpbHMvcmVzcG9uc2VFbmQuanMiLCJtYXBwaW5ncyI6Ijs7QUFBQUEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUU3RCxNQUFNQyxJQUFJLEdBQUdDLG1CQUFPLENBQUMsaUZBQWMsQ0FBQztBQUNwQyxNQUFNQyxVQUFVLEdBQUdELG1CQUFPLENBQUMscUdBQW1CLENBQUM7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBLGVBQWVFLHNCQUFzQkEsQ0FBQSxFQUFHO0VBQ3RDLElBQUk7SUFDRkQsVUFBVSxDQUFDRSxXQUFXLElBQUlKLElBQUksQ0FBQ0ssTUFBTSxDQUFDQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7SUFDL0QsTUFBTU4sSUFBSSxDQUFDTyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3RCTCxVQUFVLENBQUNFLFdBQVcsSUFBSUosSUFBSSxDQUFDSyxNQUFNLENBQUNDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQztFQUNuRSxDQUFDLENBQUMsT0FBT0UsQ0FBQyxFQUFFO0lBQ1ZOLFVBQVUsQ0FBQ0UsV0FBVyxJQUFJSixJQUFJLENBQUNLLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLGdDQUFnQyxFQUFFRSxDQUFDLENBQUM7RUFDaEY7QUFDRjtBQUVBViw4QkFBOEIsR0FBR0ssc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac2VudHJ5L25leHRqcy9idWlsZC9janMvY29tbW9uL3V0aWxzL3Jlc3BvbnNlRW5kLmpzP2FhNjAiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5cbi8qKlxuICogRmx1c2hlcyBwZW5kaW5nIFNlbnRyeSBldmVudHMgd2l0aCBhIDIgc2Vjb25kIHRpbWVvdXQgYW5kIGluIGEgd2F5IHRoYXQgY2Fubm90IGNyZWF0ZSB1bmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb25zLlxuICovXG5hc3luYyBmdW5jdGlvbiBmbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkge1xuICB0cnkge1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5sb2dnZXIubG9nKCdGbHVzaGluZyBldmVudHMuLi4nKTtcbiAgICBhd2FpdCBjb3JlLmZsdXNoKDIwMDApO1xuICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5sb2dnZXIubG9nKCdEb25lIGZsdXNoaW5nIGV2ZW50cycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmxvZ2dlci5sb2coJ0Vycm9yIHdoaWxlIGZsdXNoaW5nIGV2ZW50czpcXG4nLCBlKTtcbiAgfVxufVxuXG5leHBvcnRzLmZsdXNoU2FmZWx5V2l0aFRpbWVvdXQgPSBmbHVzaFNhZmVseVdpdGhUaW1lb3V0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2VFbmQuanMubWFwXG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb3JlIiwicmVxdWlyZSIsImRlYnVnQnVpbGQiLCJmbHVzaFNhZmVseVdpdGhUaW1lb3V0IiwiREVCVUdfQlVJTEQiLCJsb2dnZXIiLCJsb2ciLCJmbHVzaCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst commonPropagationContextMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param propagationContext The propagation context that should be shared between all the resources if no propagation context was registered yet.\n * @returns the shared propagation context.\n */\nfunction commonObjectToPropagationContext(commonObject, propagationContext) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoPropagationContext = commonPropagationContextMap.get(commonObject);\n    if (memoPropagationContext) {\n      return memoPropagationContext;\n    } else {\n      commonPropagationContextMap.set(commonObject, propagationContext);\n      return propagationContext;\n    }\n  } else {\n    return propagationContext;\n  }\n}\nconst commonIsolationScopeMap = new WeakMap();\n\n/**\n * Takes a shared (garbage collectable) object between resources, e.g. a headers object shared between Next.js server components and returns a common propagation context.\n *\n * @param commonObject The shared object.\n * @param isolationScope The isolationScope that should be shared between all the resources if no isolation scope was created yet.\n * @returns the shared isolation scope.\n */\nfunction commonObjectToIsolationScope(commonObject) {\n  if (typeof commonObject === 'object' && commonObject) {\n    const memoIsolationScope = commonIsolationScopeMap.get(commonObject);\n    if (memoIsolationScope) {\n      return memoIsolationScope;\n    } else {\n      const newIsolationScope = new core.Scope();\n      commonIsolationScopeMap.set(commonObject, newIsolationScope);\n      return newIsolationScope;\n    }\n  } else {\n    return new core.Scope();\n  }\n}\nlet nextjsEscapedAsyncStorage;\n\n/**\n * Will mark the execution context of the callback as \"escaped\" from Next.js internal tracing by unsetting the active\n * span and propagation context. When an execution passes through this function multiple times, it is a noop after the\n * first time.\n */\nfunction escapeNextjsTracing(cb) {\n  const MaybeGlobalAsyncLocalStorage = core.GLOBAL_OBJ.AsyncLocalStorage;\n  if (!MaybeGlobalAsyncLocalStorage) {\n    debugBuild.DEBUG_BUILD && core.logger.warn(\"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\");\n    return cb();\n  }\n  if (!nextjsEscapedAsyncStorage) {\n    nextjsEscapedAsyncStorage = new MaybeGlobalAsyncLocalStorage();\n  }\n  if (nextjsEscapedAsyncStorage.getStore()) {\n    return cb();\n  } else {\n    return core.startNewTrace(() => {\n      return nextjsEscapedAsyncStorage.run(true, () => {\n        return cb();\n      });\n    });\n  }\n}\n\n/**\n * Ideally this function never lands in the develop branch.\n *\n * Drops the entire span tree this function was called in, if it was a span tree created by Next.js.\n */\nfunction dropNextjsRootContext() {\n  const nextJsOwnedSpan = core.getActiveSpan();\n  if (nextJsOwnedSpan) {\n    const rootSpan = core.getRootSpan(nextJsOwnedSpan);\n    const rootSpanAttributes = core.spanToJSON(rootSpan).data;\n    if (_optionalChain([rootSpanAttributes, 'optionalAccess', _ => _['next.span_type']])) {\n      _optionalChain([core.getRootSpan, 'call', _2 => _2(nextJsOwnedSpan), 'optionalAccess', _3 => _3.setAttribute, 'call', _4 => _4(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SHOULD_DROP_TRANSACTION, true)]);\n    }\n  }\n}\nexports.commonObjectToIsolationScope = commonObjectToIsolationScope;\nexports.commonObjectToPropagationContext = commonObjectToPropagationContext;\nexports.dropNextjsRootContext = dropNextjsRootContext;\nexports.escapeNextjsTracing = escapeNextjsTracing;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ../span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\n\n/**\n * Wraps a function that potentially throws. If it does, the error is passed to `captureException` and rethrown.\n *\n * Note: This function turns the wrapped function into an asynchronous one.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorInstrumentation(origFunction) {\n  return async function (...origFunctionArguments) {\n    try {\n      return await origFunction.apply(this, origFunctionArguments);\n    } catch (e) {\n      // TODO: Extract error logic from `withSentry` in here or create a new wrapper with said logic or something like that.\n      core.captureException(e, {\n        mechanism: {\n          handled: false\n        }\n      });\n      throw e;\n    }\n  };\n}\n\n/**\n * Calls a server-side data fetching function (that takes a `req` and `res` object in its context) with tracing\n * instrumentation. A transaction will be created for the incoming request (if it doesn't already exist) in addition to\n * a span for the wrapped data fetching function.\n *\n * All of the above happens in an isolated domain, meaning all thrown errors will be associated with the correct span.\n *\n * @param origDataFetcher The data fetching method to call.\n * @param origFunctionArguments The arguments to call the data fetching method with.\n * @param req The data fetching function's request object.\n * @param res The data fetching function's response object.\n * @param options Options providing details for the created transaction and span.\n * @returns what the data fetching method call returned.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withTracedServerSideDataFetcher(origDataFetcher, req, res, options) {\n  return async function (...args) {\n    const normalizedRequest = core.httpRequestToRequestData(req);\n    core.getCurrentScope().setTransactionName(`${options.dataFetchingMethodName} (${options.dataFetcherRouteName})`);\n    core.getIsolationScope().setSDKProcessingMetadata({\n      normalizedRequest\n    });\n    const span = core.getActiveSpan();\n\n    // Only set the route backfill if the span is not for /_error\n    if (span && options.requestedRouteName !== '/_error') {\n      const root = core.getRootSpan(span);\n      root.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_ROUTE_BACKFILL, options.requestedRouteName);\n    }\n    const {\n      'sentry-trace': sentryTrace,\n      baggage\n    } = core.getTraceData();\n    return {\n      sentryTrace: sentryTrace,\n      baggage: baggage,\n      data: await origDataFetcher.apply(this, args)\n    };\n  };\n}\n\n/**\n * Call a data fetcher and trace it. Only traces the function if there is an active transaction on the scope.\n *\n * We only do the following until we move transaction creation into this function: When called, the wrapped function\n * will also update the name of the active transaction with a parameterized route provided via the `options` argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function callDataFetcherTraced(origFunction, origFunctionArgs) {\n  try {\n    return await origFunction(...origFunctionArgs);\n  } catch (e) {\n    core.captureException(e, {\n      mechanism: {\n        handled: false\n      }\n    });\n    throw e;\n  }\n}\nexports.callDataFetcherTraced = callDataFetcherTraced;\nexports.withErrorInstrumentation = withErrorInstrumentation;\nexports.withTracedServerSideDataFetcher = withTracedServerSideDataFetcher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/wrapperUtils.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ./debug-build.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/debug-build.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Wraps a Next.js Server Action implementation with Sentry Error and Performance instrumentation.\n */\nfunction withServerActionInstrumentation(...args) {\n  if (typeof args[1] === 'function') {\n    const [serverActionName, callback] = args;\n    return withServerActionInstrumentationImplementation(serverActionName, {}, callback);\n  } else {\n    const [serverActionName, options, callback] = args;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return withServerActionInstrumentationImplementation(serverActionName, options, callback);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function withServerActionInstrumentationImplementation(serverActionName, options, callback) {\n  return core.withIsolationScope(async isolationScope => {\n    const sendDefaultPii = _optionalChain([core.getClient, 'call', _ => _(), 'optionalAccess', _2 => _2.getOptions, 'call', _3 => _3(), 'access', _4 => _4.sendDefaultPii]);\n    let sentryTraceHeader;\n    let baggageHeader;\n    const fullHeadersObject = {};\n    try {\n      const awaitedHeaders = await options.headers;\n      sentryTraceHeader = _nullishCoalesce(_optionalChain([awaitedHeaders, 'optionalAccess', _5 => _5.get, 'call', _6 => _6('sentry-trace')]), () => undefined);\n      baggageHeader = _optionalChain([awaitedHeaders, 'optionalAccess', _7 => _7.get, 'call', _8 => _8('baggage')]);\n      _optionalChain([awaitedHeaders, 'optionalAccess', _9 => _9.forEach, 'call', _10 => _10((value, key) => {\n        fullHeadersObject[key] = value;\n      })]);\n    } catch (e) {\n      debugBuild.DEBUG_BUILD && core.logger.warn(\"Sentry wasn't able to extract the tracing headers for a server action. Will not trace this request.\");\n    }\n    isolationScope.setTransactionName(`serverAction/${serverActionName}`);\n    isolationScope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: fullHeadersObject\n      }\n    });\n\n    // Normally, there is an active span here (from Next.js OTEL) and we just use that as parent\n    // Else, we manually continueTrace from the incoming headers\n    const continueTraceIfNoActiveSpan = core.getActiveSpan() ? (_opts, callback) => callback() : core.continueTrace;\n    return continueTraceIfNoActiveSpan({\n      sentryTrace: sentryTraceHeader,\n      baggage: baggageHeader\n    }, async () => {\n      try {\n        return await core.startSpan({\n          op: 'function.server_action',\n          name: `serverAction/${serverActionName}`,\n          forceTransaction: true,\n          attributes: {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route'\n          }\n        }, async span => {\n          const result = await core.handleCallbackErrors(callback, error => {\n            if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n              // We don't want to report \"not-found\"s\n              span.setStatus({\n                code: core.SPAN_STATUS_ERROR,\n                message: 'not_found'\n              });\n            } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n              // Don't do anything for redirects\n            } else {\n              span.setStatus({\n                code: core.SPAN_STATUS_ERROR,\n                message: 'internal_error'\n              });\n              core.captureException(error, {\n                mechanism: {\n                  handled: false\n                }\n              });\n            }\n          });\n          if (options.recordResponse !== undefined ? options.recordResponse : sendDefaultPii) {\n            core.getIsolationScope().setExtra('server_action_result', result);\n          }\n          if (options.formData) {\n            options.formData.forEach((value, key) => {\n              core.getIsolationScope().setExtra(`server_action_form_data.${key}`, typeof value === 'string' ? value : '[non-string value]');\n            });\n          }\n          return result;\n        });\n      } finally {\n        core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n      }\n    });\n  });\n}\nexports.withServerActionInstrumentation = withServerActionInstrumentation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wraps a generation function (e.g. generateMetadata) with Sentry error and performance instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapGenerationFunctionWithSentry(generationFunction, context) {\n  const {\n    requestAsyncStorage,\n    componentRoute,\n    componentType,\n    generationFunctionIdentifier\n  } = context;\n  return new Proxy(generationFunction, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = _optionalChain([core.getActiveSpan, 'call', _ => _(), 'optionalAccess', _2 => _2.spanContext, 'call', _3 => _3(), 'access', _4 => _4.traceId]);\n      let headers = undefined;\n      // We try-catch here just in case anything goes wrong with the async storage here goes wrong since it is Next.js internal API\n      try {\n        headers = _optionalChain([requestAsyncStorage, 'optionalAccess', _5 => _5.getStore, 'call', _6 => _6(), 'optionalAccess', _7 => _7.headers]);\n      } catch (e) {\n        /** empty */\n      }\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(headers);\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const {\n          scope\n        } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, _nullishCoalesce(scope, () => new core.Scope()), isolationScope);\n      }\n      let data = undefined;\n      if (_optionalChain([core.getClient, 'call', _8 => _8(), 'optionalAccess', _9 => _9.getOptions, 'call', _10 => _10(), 'access', _11 => _11.sendDefaultPii])) {\n        const props = args[0];\n        const params = props && typeof props === 'object' && 'params' in props ? props.params : undefined;\n        const searchParams = props && typeof props === 'object' && 'searchParams' in props ? props.searchParams : undefined;\n        data = {\n          params,\n          searchParams\n        };\n      }\n      const headersDict = headers ? core.winterCGHeadersToDict(headers) : undefined;\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType}.${generationFunctionIdentifier} (${componentRoute})`);\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: {\n              headers: headersDict\n            }\n          });\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = _optionalChain([headersDict, 'optionalAccess', _12 => _12['sentry-trace']]);\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n          const propagationContext = tracingUtils.commonObjectToPropagationContext(headers, _optionalChain([headersDict, 'optionalAccess', _13 => _13['sentry-trace']]) ? core.propagationContextFromHeaders(headersDict['sentry-trace'], headersDict['baggage']) : {\n            traceId: requestTraceId || core.generateTraceId(),\n            spanId: core.generateSpanId()\n          });\n          scope.setPropagationContext(propagationContext);\n          scope.setExtra('route_data', data);\n          return core.startSpanManual({\n            op: 'function.nextjs',\n            name: `${componentType}.${generationFunctionIdentifier} (${componentRoute})`,\n            attributes: {\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs'\n            }\n          }, span => {\n            return core.handleCallbackErrors(() => originalFunction.apply(thisArg, args), err => {\n              // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n              // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n              if (nextNavigationErrorUtils.isNotFoundNavigationError(err)) {\n                // We don't want to report \"not-found\"s\n                span.setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'not_found'\n                });\n                core.getRootSpan(span).setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'not_found'\n                });\n              } else if (nextNavigationErrorUtils.isRedirectNavigationError(err)) {\n                // We don't want to report redirects\n                span.setStatus({\n                  code: core.SPAN_STATUS_OK\n                });\n              } else {\n                span.setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'internal_error'\n                });\n                core.getRootSpan(span).setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'internal_error'\n                });\n                core.captureException(err, {\n                  mechanism: {\n                    handled: false\n                  }\n                });\n              }\n            }, () => {\n              span.end();\n            });\n          });\n        });\n      });\n    }\n  });\n}\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Wraps Next.js middleware with Sentry error and performance instrumentation.\n *\n * @param middleware The middleware handler.\n * @returns a wrapped middleware handler.\n */\nfunction wrapMiddlewareWithSentry(middleware) {\n  return new Proxy(middleware, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n      return core.withIsolationScope(isolationScope => {\n        const req = args[0];\n        const currentScope = core.getCurrentScope();\n        let spanName;\n        let spanSource;\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: core.winterCGRequestToRequestData(req)\n          });\n          spanName = `middleware ${req.method} ${new URL(req.url).pathname}`;\n          spanSource = 'url';\n        } else {\n          spanName = 'middleware';\n          spanSource = 'component';\n        }\n        currentScope.setTransactionName(spanName);\n        const activeSpan = core.getActiveSpan();\n        if (activeSpan) {\n          // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n          // rely on that for parameterization.\n          spanName = 'middleware';\n          spanSource = 'component';\n          const rootSpan = core.getRootSpan(activeSpan);\n          if (rootSpan) {\n            core.setCapturedScopesOnSpan(rootSpan, currentScope, isolationScope);\n          }\n        }\n        return core.startSpan({\n          name: spanName,\n          op: 'http.server.middleware',\n          attributes: {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: spanSource,\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrapMiddlewareWithSentry'\n          }\n        }, () => {\n          return core.handleCallbackErrors(() => wrappingTarget.apply(thisArg, args), error => {\n            core.captureException(error, {\n              mechanism: {\n                type: 'instrument',\n                handled: false\n              }\n            });\n          }, () => {\n            core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n          });\n        });\n      });\n    }\n  });\n}\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5LmpzIiwibWFwcGluZ3MiOiI7O0FBQUFBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFDcEMsTUFBTUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLGdIQUF3QixDQUFDOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRSx3QkFBd0JBLENBQy9CQyxVQUFVLEVBQ1Y7RUFDQSxPQUFPLElBQUlDLEtBQUssQ0FBQ0QsVUFBVSxFQUFFO0lBQzNCRSxLQUFLLEVBQUUsTUFBQUEsQ0FBT0MsY0FBYyxFQUFFQyxPQUFPLEVBQUVDLElBQUksS0FBSztNQUM5QztNQUNBLE9BQU9ULElBQUksQ0FBQ1Usa0JBQWtCLENBQUNDLGNBQWMsSUFBSTtRQUMvQyxNQUFNQyxHQUFHLEdBQUdILElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbkIsTUFBTUksWUFBWSxHQUFHYixJQUFJLENBQUNjLGVBQWUsQ0FBQyxDQUFDO1FBRTNDLElBQUlDLFFBQVE7UUFDWixJQUFJQyxVQUFVO1FBRWQsSUFBSUosR0FBRyxZQUFZSyxPQUFPLEVBQUU7VUFDMUJOLGNBQWMsQ0FBQ08sd0JBQXdCLENBQUM7WUFDdENDLGlCQUFpQixFQUFFbkIsSUFBSSxDQUFDb0IsNEJBQTRCLENBQUNSLEdBQUc7VUFDMUQsQ0FBQyxDQUFDO1VBQ0ZHLFFBQVEsR0FBSSxjQUFhSCxHQUFHLENBQUNTLE1BQU8sSUFBRyxJQUFJQyxHQUFHLENBQUNWLEdBQUcsQ0FBQ1csR0FBRyxDQUFDLENBQUNDLFFBQVMsRUFBQztVQUNsRVIsVUFBVSxHQUFHLEtBQUs7UUFDcEIsQ0FBQyxNQUFNO1VBQ0xELFFBQVEsR0FBRyxZQUFZO1VBQ3ZCQyxVQUFVLEdBQUcsV0FBVztRQUMxQjtRQUVBSCxZQUFZLENBQUNZLGtCQUFrQixDQUFDVixRQUFRLENBQUM7UUFFekMsTUFBTVcsVUFBVSxHQUFHMUIsSUFBSSxDQUFDMkIsYUFBYSxDQUFDLENBQUM7UUFFdkMsSUFBSUQsVUFBVSxFQUFFO1VBQ2Q7VUFDQTtVQUNBWCxRQUFRLEdBQUcsWUFBWTtVQUN2QkMsVUFBVSxHQUFHLFdBQVc7VUFFeEIsTUFBTVksUUFBUSxHQUFHNUIsSUFBSSxDQUFDNkIsV0FBVyxDQUFDSCxVQUFVLENBQUM7VUFDN0MsSUFBSUUsUUFBUSxFQUFFO1lBQ1o1QixJQUFJLENBQUM4Qix1QkFBdUIsQ0FBQ0YsUUFBUSxFQUFFZixZQUFZLEVBQUVGLGNBQWMsQ0FBQztVQUN0RTtRQUNGO1FBRUEsT0FBT1gsSUFBSSxDQUFDK0IsU0FBUyxDQUNuQjtVQUNFQyxJQUFJLEVBQUVqQixRQUFRO1VBQ2RrQixFQUFFLEVBQUUsd0JBQXdCO1VBQzVCQyxVQUFVLEVBQUU7WUFDVixDQUFDbEMsSUFBSSxDQUFDbUMsZ0NBQWdDLEdBQUduQixVQUFVO1lBQ25ELENBQUNoQixJQUFJLENBQUNvQyxnQ0FBZ0MsR0FBRztVQUMzQztRQUNGLENBQUMsRUFDRCxNQUFNO1VBQ0osT0FBT3BDLElBQUksQ0FBQ3FDLG9CQUFvQixDQUM5QixNQUFNOUIsY0FBYyxDQUFDRCxLQUFLLENBQUNFLE9BQU8sRUFBRUMsSUFBSSxDQUFDLEVBQ3pDNkIsS0FBSyxJQUFJO1lBQ1B0QyxJQUFJLENBQUN1QyxnQkFBZ0IsQ0FBQ0QsS0FBSyxFQUFFO2NBQzNCRSxTQUFTLEVBQUU7Z0JBQ1RDLElBQUksRUFBRSxZQUFZO2dCQUNsQkMsT0FBTyxFQUFFO2NBQ1g7WUFDRixDQUFDLENBQUM7VUFDSixDQUFDLEVBQ0QsTUFBTTtZQUNKMUMsSUFBSSxDQUFDMkMsZUFBZSxDQUFDekMsV0FBVyxDQUFDMEMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1VBQzVELENBQ0YsQ0FBQztRQUNILENBQ0YsQ0FBQztNQUNILENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQyxDQUFDO0FBQ0o7QUFFQTlDLGdDQUFnQyxHQUFHSyx3QkFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9jb21tb24vd3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5LmpzP2NhZTEiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgcmVzcG9uc2VFbmQgPSByZXF1aXJlKCcuL3V0aWxzL3Jlc3BvbnNlRW5kLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgTmV4dC5qcyBtaWRkbGV3YXJlIHdpdGggU2VudHJ5IGVycm9yIGFuZCBwZXJmb3JtYW5jZSBpbnN0cnVtZW50YXRpb24uXG4gKlxuICogQHBhcmFtIG1pZGRsZXdhcmUgVGhlIG1pZGRsZXdhcmUgaGFuZGxlci5cbiAqIEByZXR1cm5zIGEgd3JhcHBlZCBtaWRkbGV3YXJlIGhhbmRsZXIuXG4gKi9cbmZ1bmN0aW9uIHdyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeShcbiAgbWlkZGxld2FyZSxcbikge1xuICByZXR1cm4gbmV3IFByb3h5KG1pZGRsZXdhcmUsIHtcbiAgICBhcHBseTogYXN5bmMgKHdyYXBwaW5nVGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICAvLyBUT0RPOiBXZSBzdGlsbCBzaG91bGQgYWRkIGNlbnRyYWwgaXNvbGF0aW9uIHNjb3BlIGNyZWF0aW9uIGZvciB3aGVuIG91ciBidWlsZC10aW1lIGluc3RydW1lbnRhdGlvbiBkb2VzIG5vdCB3b3JrIGFueW1vcmUgd2l0aCB0dXJib3BhY2suXG4gICAgICByZXR1cm4gY29yZS53aXRoSXNvbGF0aW9uU2NvcGUoaXNvbGF0aW9uU2NvcGUgPT4ge1xuICAgICAgICBjb25zdCByZXEgPSBhcmdzWzBdO1xuICAgICAgICBjb25zdCBjdXJyZW50U2NvcGUgPSBjb3JlLmdldEN1cnJlbnRTY29wZSgpO1xuXG4gICAgICAgIGxldCBzcGFuTmFtZTtcbiAgICAgICAgbGV0IHNwYW5Tb3VyY2U7XG5cbiAgICAgICAgaWYgKHJlcSBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgICAgICBpc29sYXRpb25TY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoe1xuICAgICAgICAgICAgbm9ybWFsaXplZFJlcXVlc3Q6IGNvcmUud2ludGVyQ0dSZXF1ZXN0VG9SZXF1ZXN0RGF0YShyZXEpLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNwYW5OYW1lID0gYG1pZGRsZXdhcmUgJHtyZXEubWV0aG9kfSAke25ldyBVUkwocmVxLnVybCkucGF0aG5hbWV9YDtcbiAgICAgICAgICBzcGFuU291cmNlID0gJ3VybCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3Bhbk5hbWUgPSAnbWlkZGxld2FyZSc7XG4gICAgICAgICAgc3BhblNvdXJjZSA9ICdjb21wb25lbnQnO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNjb3BlLnNldFRyYW5zYWN0aW9uTmFtZShzcGFuTmFtZSk7XG5cbiAgICAgICAgY29uc3QgYWN0aXZlU3BhbiA9IGNvcmUuZ2V0QWN0aXZlU3BhbigpO1xuXG4gICAgICAgIGlmIChhY3RpdmVTcGFuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYW4gYWN0aXZlIHNwYW4sIGl0IGxpa2VseSBtZWFucyB0aGF0IHRoZSBhdXRvbWF0aWMgTmV4dC5qcyBPVEVMIGluc3RydW1lbnRhdGlvbiB3b3JrZWQgYW5kIHdlIGNhblxuICAgICAgICAgIC8vIHJlbHkgb24gdGhhdCBmb3IgcGFyYW1ldGVyaXphdGlvbi5cbiAgICAgICAgICBzcGFuTmFtZSA9ICdtaWRkbGV3YXJlJztcbiAgICAgICAgICBzcGFuU291cmNlID0gJ2NvbXBvbmVudCc7XG5cbiAgICAgICAgICBjb25zdCByb290U3BhbiA9IGNvcmUuZ2V0Um9vdFNwYW4oYWN0aXZlU3Bhbik7XG4gICAgICAgICAgaWYgKHJvb3RTcGFuKSB7XG4gICAgICAgICAgICBjb3JlLnNldENhcHR1cmVkU2NvcGVzT25TcGFuKHJvb3RTcGFuLCBjdXJyZW50U2NvcGUsIGlzb2xhdGlvblNjb3BlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29yZS5zdGFydFNwYW4oXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogc3Bhbk5hbWUsXG4gICAgICAgICAgICBvcDogJ2h0dHAuc2VydmVyLm1pZGRsZXdhcmUnLFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRV06IHNwYW5Tb3VyY2UsXG4gICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOXTogJ2F1dG8uZnVuY3Rpb24ubmV4dGpzLndyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNvcmUuaGFuZGxlQ2FsbGJhY2tFcnJvcnMoXG4gICAgICAgICAgICAgICgpID0+IHdyYXBwaW5nVGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpLFxuICAgICAgICAgICAgICBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgY29yZS5jYXB0dXJlRXhjZXB0aW9uKGVycm9yLCB7XG4gICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2luc3RydW1lbnQnLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb3JlLnZlcmNlbFdhaXRVbnRpbChyZXNwb25zZUVuZC5mbHVzaFNhZmVseVdpdGhUaW1lb3V0KCkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmV4cG9ydHMud3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5ID0gd3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JhcE1pZGRsZXdhcmVXaXRoU2VudHJ5LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29yZSIsInJlcXVpcmUiLCJyZXNwb25zZUVuZCIsIndyYXBNaWRkbGV3YXJlV2l0aFNlbnRyeSIsIm1pZGRsZXdhcmUiLCJQcm94eSIsImFwcGx5Iiwid3JhcHBpbmdUYXJnZXQiLCJ0aGlzQXJnIiwiYXJncyIsIndpdGhJc29sYXRpb25TY29wZSIsImlzb2xhdGlvblNjb3BlIiwicmVxIiwiY3VycmVudFNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwic3Bhbk5hbWUiLCJzcGFuU291cmNlIiwiUmVxdWVzdCIsInNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSIsIm5vcm1hbGl6ZWRSZXF1ZXN0Iiwid2ludGVyQ0dSZXF1ZXN0VG9SZXF1ZXN0RGF0YSIsIm1ldGhvZCIsIlVSTCIsInVybCIsInBhdGhuYW1lIiwic2V0VHJhbnNhY3Rpb25OYW1lIiwiYWN0aXZlU3BhbiIsImdldEFjdGl2ZVNwYW4iLCJyb290U3BhbiIsImdldFJvb3RTcGFuIiwic2V0Q2FwdHVyZWRTY29wZXNPblNwYW4iLCJzdGFydFNwYW4iLCJuYW1lIiwib3AiLCJhdHRyaWJ1dGVzIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiIsImhhbmRsZUNhbGxiYWNrRXJyb3JzIiwiZXJyb3IiLCJjYXB0dXJlRXhjZXB0aW9uIiwibWVjaGFuaXNtIiwidHlwZSIsImhhbmRsZWQiLCJ2ZXJjZWxXYWl0VW50aWwiLCJmbHVzaFNhZmVseVdpdGhUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar {\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wraps a Next.js App Router Route handler with Sentry error and performance instrumentation.\n *\n * NOTICE: This wrapper is for App Router API routes. If you are looking to wrap Pages Router API routes use `wrapApiHandlerWithSentry` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapRouteHandlerWithSentry(routeHandler, context) {\n  const {\n    method,\n    parameterizedRoute,\n    headers\n  } = context;\n  return new Proxy(routeHandler, {\n    apply: async (originalFunction, thisArg, args) => {\n      const activeSpan = core.getActiveSpan();\n      const rootSpan = activeSpan ? core.getRootSpan(activeSpan) : undefined;\n      let edgeRuntimeIsolationScopeOverride;\n      if (rootSpan && \"edge\" === 'edge') {\n        const isolationScope = tracingUtils.commonObjectToIsolationScope(headers);\n        const {\n          scope\n        } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, _nullishCoalesce(scope, () => new core.Scope()), isolationScope);\n        edgeRuntimeIsolationScopeOverride = isolationScope;\n        rootSpan.updateName(`${method} ${parameterizedRoute}`);\n        rootSpan.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n        rootSpan.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'http.server');\n      }\n      return core.withIsolationScope( true ? edgeRuntimeIsolationScopeOverride : 0, () => {\n        return core.withScope(async scope => {\n          scope.setTransactionName(`${method} ${parameterizedRoute}`);\n          if (true) {\n            const completeHeadersDict = headers ? core.winterCGHeadersToDict(headers) : {};\n            const incomingPropagationContext = core.propagationContextFromHeaders(completeHeadersDict['sentry-trace'], completeHeadersDict['baggage']);\n            scope.setPropagationContext(incomingPropagationContext);\n            scope.setSDKProcessingMetadata({\n              normalizedRequest: {\n                method,\n                headers: completeHeadersDict\n              }\n            });\n          }\n          const response = await core.handleCallbackErrors(() => originalFunction.apply(thisArg, args), error => {\n            // Next.js throws errors when calling `redirect()`. We don't wanna report these.\n            if (nextNavigationErrorUtils.isRedirectNavigationError(error)) ;else if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n              if (activeSpan) {\n                core.setHttpStatus(activeSpan, 404);\n              }\n              if (rootSpan) {\n                core.setHttpStatus(rootSpan, 404);\n              }\n            } else {\n              core.captureException(error, {\n                mechanism: {\n                  handled: false\n                }\n              });\n            }\n          });\n          try {\n            if (response.status) {\n              if (activeSpan) {\n                core.setHttpStatus(activeSpan, response.status);\n              }\n              if (rootSpan) {\n                core.setHttpStatus(rootSpan, response.status);\n              }\n            }\n          } catch (e) {\n            // best effort - response may be undefined?\n          }\n          return response;\n        });\n      });\n    }\n  });\n}\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar {\n  _nullishCoalesce,\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst nextNavigationErrorUtils = __webpack_require__(/*! ./nextNavigationErrorUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/nextNavigationErrorUtils.js\");\nconst spanAttributesWithLogicAttached = __webpack_require__(/*! ./span-attributes-with-logic-attached.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/span-attributes-with-logic-attached.js\");\nconst responseEnd = __webpack_require__(/*! ./utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst tracingUtils = __webpack_require__(/*! ./utils/tracingUtils.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/tracingUtils.js\");\n\n/**\n * Wraps an `app` directory server component with Sentry error instrumentation.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapServerComponentWithSentry(appDirComponent, context) {\n  const {\n    componentRoute,\n    componentType\n  } = context;\n  // Even though users may define server components as async functions, for the client bundles\n  // Next.js will turn them into synchronous functions and it will transform any `await`s into instances of the `use`\n  // hook. 🤯\n  return new Proxy(appDirComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      const requestTraceId = _optionalChain([core.getActiveSpan, 'call', _ => _(), 'optionalAccess', _2 => _2.spanContext, 'call', _3 => _3(), 'access', _4 => _4.traceId]);\n      const isolationScope = tracingUtils.commonObjectToIsolationScope(context.headers);\n      const activeSpan = core.getActiveSpan();\n      if (activeSpan) {\n        const rootSpan = core.getRootSpan(activeSpan);\n        const {\n          scope\n        } = core.getCapturedScopesOnSpan(rootSpan);\n        core.setCapturedScopesOnSpan(rootSpan, _nullishCoalesce(scope, () => new core.Scope()), isolationScope);\n      }\n      const headersDict = context.headers ? core.winterCGHeadersToDict(context.headers) : undefined;\n      isolationScope.setSDKProcessingMetadata({\n        normalizedRequest: {\n          headers: headersDict\n        }\n      });\n      return core.withIsolationScope(isolationScope, () => {\n        return core.withScope(scope => {\n          scope.setTransactionName(`${componentType} Server Component (${componentRoute})`);\n          if (true) {\n            const propagationContext = tracingUtils.commonObjectToPropagationContext(context.headers, _optionalChain([headersDict, 'optionalAccess', _5 => _5['sentry-trace']]) ? core.propagationContextFromHeaders(headersDict['sentry-trace'], headersDict['baggage']) : {\n              traceId: requestTraceId || core.generateTraceId(),\n              spanId: core.generateSpanId()\n            });\n            scope.setPropagationContext(propagationContext);\n          }\n          const activeSpan = core.getActiveSpan();\n          if (activeSpan) {\n            const rootSpan = core.getRootSpan(activeSpan);\n            const sentryTrace = _optionalChain([headersDict, 'optionalAccess', _6 => _6['sentry-trace']]);\n            if (sentryTrace) {\n              rootSpan.setAttribute(spanAttributesWithLogicAttached.TRANSACTION_ATTR_SENTRY_TRACE_BACKFILL, sentryTrace);\n            }\n          }\n          return core.startSpanManual({\n            op: 'function.nextjs',\n            name: `${componentType} Server Component (${componentRoute})`,\n            attributes: {\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs'\n            }\n          }, span => {\n            return core.handleCallbackErrors(() => originalFunction.apply(thisArg, args), error => {\n              // When you read this code you might think: \"Wait a minute, shouldn't we set the status on the root span too?\"\n              // The answer is: \"No.\" - The status of the root span is determined by whatever status code Next.js decides to put on the response.\n              if (nextNavigationErrorUtils.isNotFoundNavigationError(error)) {\n                // We don't want to report \"not-found\"s\n                span.setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'not_found'\n                });\n              } else if (nextNavigationErrorUtils.isRedirectNavigationError(error)) {\n                // We don't want to report redirects\n                span.setStatus({\n                  code: core.SPAN_STATUS_OK\n                });\n              } else {\n                span.setStatus({\n                  code: core.SPAN_STATUS_ERROR,\n                  message: 'internal_error'\n                });\n                core.captureException(error, {\n                  mechanism: {\n                    handled: false\n                  }\n                });\n              }\n            }, () => {\n              span.end();\n              core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n            });\n          });\n        });\n      });\n    }\n  });\n}\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./src/instrumentation.ts":
/*!********************************!*\
  !*** ./src/instrumentation.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.onRequestError = void 0;\nexports.register = register;\nvar Sentry = _interopRequireWildcard(__webpack_require__(/*! @sentry/nextjs */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/edge/index.js\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nglobalThis[\"_sentryRewritesTunnelPath\"] = undefined;\nglobalThis[\"SENTRY_RELEASE\"] = undefined;\nglobalThis[\"_sentryBasePath\"] = undefined;\nglobalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\nasync function register() {\n    if (false) {}\n    if (true) {\n        await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! ../sentry.edge.config */ \"(instrument)/./sentry.edge.config.ts\", 23));\n    }\n}\nconst onRequestError = exports.onRequestError = Sentry.captureRequestError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vc3JjL2luc3RydW1lbnRhdGlvbi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEwsSUFBQUEsU0FBQUMsd0JBQUFDLG1CQUFBQSxDQUFBO0FBQXlDLFNBQUFDLHlCQUFBQyxXQUFBO0lBQUEsV0FBQUMsWUFBQTtJQUFBLElBQUFDLG9CQUFBLElBQUFEO0lBQUEsSUFBQUUsbUJBQUEsSUFBQUY7SUFBQSxRQUFBRiwyQkFBQSxTQUFBQyxXQUFBO1FBQUEsT0FBQUEsY0FBQUcsbUJBQUFEO0lBQUEsR0FBQUY7QUFBQTtBQUFBLFNBQUFILHdCQUFBTyxHQUFBLEVBQUFKLFdBQUE7SUFBQSxLQUFBQSxlQUFBSSxPQUFBQSxJQUFBQyxVQUFBO1FBQUEsT0FBQUQ7SUFBQTtJQUFBLElBQUFBLFFBQUEsZUFBQUEsUUFBQSxtQkFBQUEsUUFBQTtRQUFBO1lBQUFFLFNBQUFGO1FBQUE7SUFBQTtJQUFBLElBQUFHLFFBQUFSLHlCQUFBQztJQUFBLElBQUFPLFNBQUFBLE1BQUFDLEdBQUEsQ0FBQUosTUFBQTtRQUFBLE9BQUFHLE1BQUFFLEdBQUEsQ0FBQUw7SUFBQTtJQUFBLElBQUFNLFNBQUE7SUFBQSxJQUFBQyx3QkFBQUMsT0FBQUMsY0FBQSxJQUFBRCxPQUFBRSx3QkFBQTtJQUFBLFFBQUFDLE9BQUFYLElBQUE7UUFBQSxJQUFBVyxRQUFBLGFBQUFILE9BQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEtBQUFXLE1BQUE7WUFBQSxJQUFBSSxPQUFBUix3QkFBQUMsT0FBQUUsd0JBQUEsQ0FBQVYsS0FBQVcsT0FBQTtZQUFBLElBQUFJLFFBQUFBLENBQUFBLEtBQUFWLEdBQUEsSUFBQVUsS0FBQUMsR0FBQTtnQkFBQVIsT0FBQUMsY0FBQSxDQUFBSCxRQUFBSyxLQUFBSTtZQUFBO2dCQUFBVCxNQUFBLENBQUFLLElBQUEsR0FBQVgsR0FBQSxDQUFBVyxJQUFBO1lBQUE7UUFBQTtJQUFBO0lBQUFMLE9BQUFKLE9BQUEsR0FBQUY7SUFBQSxJQUFBRyxPQUFBO1FBQUFBLE1BQUFhLEdBQUEsQ0FBQWhCLEtBQUFNO0lBQUE7SUFBQSxPQUFBQTtBQUFBO0FBQXBPVyxVQUFVLENBQUMsNEJBQTRCLEdBQUdDO0FBQVVELFVBQVUsQ0FBQyxpQkFBaUIsR0FBR0M7QUFBVUQsVUFBVSxDQUFDLGtCQUFrQixHQUFHQztBQUFVRCxVQUFVLENBQUMsOEJBQThCLEdBQUc7QUFFN0ssZUFBZUU7SUFDcEIsSUFBSUMsS0FBNkIsRUFBVSxFQUUxQztJQUVELElBQUlBLElBQTZCLEVBQVE7UUFDdkMsTUFBTSwrSkFBTztJQUNmO0FBQ0Y7QUFFTyxNQUFNRyxpQkFBY0Msc0JBQUEsR0FBR2hDLE9BQU9pQyxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2luc3RydW1lbnRhdGlvbi50cz80ZmFiIl0sInNvdXJjZXNDb250ZW50IjpbIjtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVzVHVubmVsUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiU0VOVFJZX1JFTEVBU0VcIl0gPSB1bmRlZmluZWQ7Z2xvYmFsVGhpc1tcIl9zZW50cnlCYXNlUGF0aFwiXSA9IHVuZGVmaW5lZDtnbG9iYWxUaGlzW1wiX3NlbnRyeVJld3JpdGVGcmFtZXNEaXN0RGlyXCJdID0gXCIubmV4dFwiO2ltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25leHRqcyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gJ25vZGVqcycpIHtcbiAgICBhd2FpdCBpbXBvcnQoJy4uL3NlbnRyeS5zZXJ2ZXIuY29uZmlnJyk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTkVYVF9SVU5USU1FID09PSAnZWRnZScpIHtcbiAgICBhd2FpdCBpbXBvcnQoJy4uL3NlbnRyeS5lZGdlLmNvbmZpZycpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBvblJlcXVlc3RFcnJvciA9IFNlbnRyeS5jYXB0dXJlUmVxdWVzdEVycm9yO1xuIl0sIm5hbWVzIjpbIlNlbnRyeSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJnbG9iYWxUaGlzIiwidW5kZWZpbmVkIiwicmVnaXN0ZXIiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9SVU5USU1FIiwib25SZXF1ZXN0RXJyb3IiLCJleHBvcnRzIiwiY2FwdHVyZVJlcXVlc3RFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./src/instrumentation.ts\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/edge/distDirRewriteFramesIntegration.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/edge/distDirRewriteFramesIntegration.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst distDirRewriteFramesIntegration = core.defineIntegration(({\n  distDirName\n}) => {\n  const distDirAbsPath = distDirName.replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // Normally we would use `path.resolve` to obtain the absolute path we will strip from the stack frame to align with\n  // the uploaded artifacts, however we don't have access to that API in edge so we need to be a bit more lax.\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(`.*${core.escapeStringForRegex(distDirAbsPath)}`);\n  const rewriteFramesIntegrationInstance = core.rewriteFramesIntegration({\n    iteratee: frame => {\n      frame.filename = _optionalChain([frame, 'access', _ => _.filename, 'optionalAccess', _2 => _2.replace, 'call', _3 => _3(SOURCEMAP_FILENAME_REGEX, 'app:///_next')]);\n      return frame;\n    }\n  });\n  return {\n    ...rewriteFramesIntegrationInstance,\n    name: 'DistDirRewriteFrames'\n  };\n});\nexports.distDirRewriteFramesIntegration = distDirRewriteFramesIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvbmV4dGpzL2J1aWxkL2Nqcy9lZGdlL2Rpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJO0VBQ0ZBO0FBQ0YsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFFM0JDLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFFN0QsTUFBTUMsSUFBSSxHQUFHTCxtQkFBTyxDQUFDLGlGQUFjLENBQUM7QUFFcEMsTUFBTU0sK0JBQStCLEdBQUdELElBQUksQ0FBQ0UsaUJBQWlCLENBQUMsQ0FBQztFQUFFQztBQUFZLENBQUMsS0FBSztFQUNsRixNQUFNQyxjQUFjLEdBQUdELFdBQVcsQ0FBQ0UsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDOztFQUU1RDtFQUNBO0VBQ0E7RUFDQSxNQUFNQyx3QkFBd0IsR0FBRyxJQUFJQyxNQUFNLENBQUUsS0FBSVAsSUFBSSxDQUFDUSxvQkFBb0IsQ0FBQ0osY0FBYyxDQUFFLEVBQUMsQ0FBQztFQUU3RixNQUFNSyxnQ0FBZ0MsR0FBR1QsSUFBSSxDQUFDVSx3QkFBd0IsQ0FBQztJQUNyRUMsUUFBUSxFQUFFQyxLQUFLLElBQUk7TUFDakJBLEtBQUssQ0FBQ0MsUUFBUSxHQUFHbkIsY0FBYyxDQUFDLENBQUNrQixLQUFLLEVBQUUsUUFBUSxFQUFFRSxDQUFDLElBQUlBLENBQUMsQ0FBQ0QsUUFBUSxFQUFFLGdCQUFnQixFQUFFRSxFQUFFLElBQUlBLEVBQUUsQ0FBQ1YsT0FBTyxFQUFFLE1BQU0sRUFBRVcsRUFBRSxJQUFJQSxFQUFFLENBQUNWLHdCQUF3QixFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUM7TUFDbkssT0FBT00sS0FBSztJQUNkO0VBQ0YsQ0FBQyxDQUFDO0VBRUYsT0FBTztJQUNMLEdBQUdILGdDQUFnQztJQUNuQ1EsSUFBSSxFQUFFO0VBQ1IsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGbkIsdUNBQXVDLEdBQUdHLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS9uZXh0anMvYnVpbGQvY2pzL2VkZ2UvZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbi5qcz8wNzE2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB7XG4gIF9vcHRpb25hbENoYWluXG59ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oKHsgZGlzdERpck5hbWUgfSkgPT4ge1xuICBjb25zdCBkaXN0RGlyQWJzUGF0aCA9IGRpc3REaXJOYW1lLnJlcGxhY2UoLyhcXC98XFxcXCkkLywgJycpOyAvLyBXZSBzdHJpcCB0cmFpbGluZyBzbGFzaGVzIGJlY2F1c2UgXCJhcHA6Ly8vX25leHRcIiBhbHNvIGRvZXNuJ3QgaGF2ZSBvbmVcblxuICAvLyBOb3JtYWxseSB3ZSB3b3VsZCB1c2UgYHBhdGgucmVzb2x2ZWAgdG8gb2J0YWluIHRoZSBhYnNvbHV0ZSBwYXRoIHdlIHdpbGwgc3RyaXAgZnJvbSB0aGUgc3RhY2sgZnJhbWUgdG8gYWxpZ24gd2l0aFxuICAvLyB0aGUgdXBsb2FkZWQgYXJ0aWZhY3RzLCBob3dldmVyIHdlIGRvbid0IGhhdmUgYWNjZXNzIHRvIHRoYXQgQVBJIGluIGVkZ2Ugc28gd2UgbmVlZCB0byBiZSBhIGJpdCBtb3JlIGxheC5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBzZW50cnktaW50ZXJuYWwvc2RrL25vLXJlZ2V4cC1jb25zdHJ1Y3RvciAtLSB1c2VyIGlucHV0IGlzIGVzY2FwZWRcbiAgY29uc3QgU09VUkNFTUFQX0ZJTEVOQU1FX1JFR0VYID0gbmV3IFJlZ0V4cChgLioke2NvcmUuZXNjYXBlU3RyaW5nRm9yUmVnZXgoZGlzdERpckFic1BhdGgpfWApO1xuXG4gIGNvbnN0IHJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbkluc3RhbmNlID0gY29yZS5yZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24oe1xuICAgIGl0ZXJhdGVlOiBmcmFtZSA9PiB7XG4gICAgICBmcmFtZS5maWxlbmFtZSA9IF9vcHRpb25hbENoYWluKFtmcmFtZSwgJ2FjY2VzcycsIF8gPT4gXy5maWxlbmFtZSwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIucmVwbGFjZSwgJ2NhbGwnLCBfMyA9PiBfMyhTT1VSQ0VNQVBfRklMRU5BTUVfUkVHRVgsICdhcHA6Ly8vX25leHQnKV0pO1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgLi4ucmV3cml0ZUZyYW1lc0ludGVncmF0aW9uSW5zdGFuY2UsXG4gICAgbmFtZTogJ0Rpc3REaXJSZXdyaXRlRnJhbWVzJyxcbiAgfTtcbn0pO1xuXG5leHBvcnRzLmRpc3REaXJSZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24gPSBkaXN0RGlyUmV3cml0ZUZyYW1lc0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdERpclJld3JpdGVGcmFtZXNJbnRlZ3JhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfb3B0aW9uYWxDaGFpbiIsInJlcXVpcmUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvcmUiLCJkaXN0RGlyUmV3cml0ZUZyYW1lc0ludGVncmF0aW9uIiwiZGVmaW5lSW50ZWdyYXRpb24iLCJkaXN0RGlyTmFtZSIsImRpc3REaXJBYnNQYXRoIiwicmVwbGFjZSIsIlNPVVJDRU1BUF9GSUxFTkFNRV9SRUdFWCIsIlJlZ0V4cCIsImVzY2FwZVN0cmluZ0ZvclJlZ2V4IiwicmV3cml0ZUZyYW1lc0ludGVncmF0aW9uSW5zdGFuY2UiLCJyZXdyaXRlRnJhbWVzSW50ZWdyYXRpb24iLCJpdGVyYXRlZSIsImZyYW1lIiwiZmlsZW5hbWUiLCJfIiwiXzIiLCJfMyIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/edge/distDirRewriteFramesIntegration.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/edge/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/edge/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar {\n  _optionalChain\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst vercelEdge = __webpack_require__(/*! @sentry/vercel-edge */ \"(instrument)/./node_modules/@sentry/vercel-edge/build/cjs/index.js\");\nconst isBuild = __webpack_require__(/*! ../common/utils/isBuild.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/isBuild.js\");\nconst responseEnd = __webpack_require__(/*! ../common/utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\nconst distDirRewriteFramesIntegration = __webpack_require__(/*! ./distDirRewriteFramesIntegration.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/edge/distDirRewriteFramesIntegration.js\");\nconst wrapGetStaticPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetStaticPropsWithSentry.js\");\nconst wrapGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetInitialPropsWithSentry.js\");\nconst wrapAppGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapAppGetInitialPropsWithSentry.js\");\nconst wrapDocumentGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapDocumentGetInitialPropsWithSentry.js\");\nconst wrapErrorGetInitialPropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapErrorGetInitialPropsWithSentry.js\");\nconst wrapGetServerSidePropsWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.js\");\nconst wrapServerComponentWithSentry = __webpack_require__(/*! ../common/wrapServerComponentWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapServerComponentWithSentry.js\");\nconst wrapRouteHandlerWithSentry = __webpack_require__(/*! ../common/wrapRouteHandlerWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapRouteHandlerWithSentry.js\");\nconst wrapApiHandlerWithSentryVercelCrons = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapApiHandlerWithSentryVercelCrons.js\");\nconst wrapMiddlewareWithSentry = __webpack_require__(/*! ../common/wrapMiddlewareWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapMiddlewareWithSentry.js\");\nconst wrapPageComponentWithSentry = __webpack_require__(/*! ../common/pages-router-instrumentation/wrapPageComponentWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/wrapPageComponentWithSentry.js\");\nconst wrapGenerationFunctionWithSentry = __webpack_require__(/*! ../common/wrapGenerationFunctionWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/wrapGenerationFunctionWithSentry.js\");\nconst withServerActionInstrumentation = __webpack_require__(/*! ../common/withServerActionInstrumentation.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/withServerActionInstrumentation.js\");\nconst captureRequestError = __webpack_require__(/*! ../common/captureRequestError.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/captureRequestError.js\");\nconst _error = __webpack_require__(/*! ../common/pages-router-instrumentation/_error.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/pages-router-instrumentation/_error.js\");\nconst wrapApiHandlerWithSentry = __webpack_require__(/*! ./wrapApiHandlerWithSentry.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/edge/wrapApiHandlerWithSentry.js\");\nconst globalWithInjectedValues = core.GLOBAL_OBJ;\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nfunction init(options = {}) {\n  core.registerSpanErrorInstrumentation();\n  if (isBuild.isBuild()) {\n    return;\n  }\n  const customDefaultIntegrations = vercelEdge.getDefaultIntegrations(options);\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = \".next\" || 0;\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration.distDirRewriteFramesIntegration({\n      distDirName\n    }));\n  }\n  const opts = {\n    defaultIntegrations: customDefaultIntegrations,\n    ...options\n  };\n  core.applySdkMetadata(opts, 'nextjs');\n  const client = vercelEdge.init(opts);\n  _optionalChain([client, 'optionalAccess', _ => _.on, 'call', _2 => _2('spanStart', span => {\n    const spanAttributes = core.spanToJSON(span).data;\n\n    // Mark all spans generated by Next.js as 'auto'\n    if (_optionalChain([spanAttributes, 'optionalAccess', _3 => _3['next.span_type']]) !== undefined) {\n      span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // Make sure middleware spans get the right op\n    if (_optionalChain([spanAttributes, 'optionalAccess', _4 => _4['next.span_type']]) === 'Middleware.execute') {\n      span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_OP, 'http.server.middleware');\n      span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'url');\n    }\n  })]);\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  _optionalChain([client, 'optionalAccess', _5 => _5.on, 'call', _6 => _6('preprocessEvent', event => {\n    // The otel auto inference will clobber the transaction name because the span has an http.target\n    if (event.type === 'transaction' && _optionalChain([event, 'access', _7 => _7.contexts, 'optionalAccess', _8 => _8.trace, 'optionalAccess', _9 => _9.data, 'optionalAccess', _10 => _10['next.span_type']]) === 'Middleware.execute' && _optionalChain([event, 'access', _11 => _11.contexts, 'optionalAccess', _12 => _12.trace, 'optionalAccess', _13 => _13.data, 'optionalAccess', _14 => _14['next.span_name']])) {\n      if (event.transaction) {\n        event.transaction = core.stripUrlQueryAndFragment(event.contexts.trace.data['next.span_name']);\n      }\n    }\n  })]);\n  _optionalChain([client, 'optionalAccess', _15 => _15.on, 'call', _16 => _16('spanEnd', span => {\n    if (span === core.getRootSpan(span)) {\n      core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n    }\n  })]);\n}\n\n/**\n * Just a passthrough in case this is imported from the client.\n */\nfunction withSentryConfig(exportedUserNextConfig) {\n  return exportedUserNextConfig;\n}\nexports.wrapGetStaticPropsWithSentry = wrapGetStaticPropsWithSentry.wrapGetStaticPropsWithSentry;\nexports.wrapGetInitialPropsWithSentry = wrapGetInitialPropsWithSentry.wrapGetInitialPropsWithSentry;\nexports.wrapAppGetInitialPropsWithSentry = wrapAppGetInitialPropsWithSentry.wrapAppGetInitialPropsWithSentry;\nexports.wrapDocumentGetInitialPropsWithSentry = wrapDocumentGetInitialPropsWithSentry.wrapDocumentGetInitialPropsWithSentry;\nexports.wrapErrorGetInitialPropsWithSentry = wrapErrorGetInitialPropsWithSentry.wrapErrorGetInitialPropsWithSentry;\nexports.wrapGetServerSidePropsWithSentry = wrapGetServerSidePropsWithSentry.wrapGetServerSidePropsWithSentry;\nexports.wrapServerComponentWithSentry = wrapServerComponentWithSentry.wrapServerComponentWithSentry;\nexports.wrapRouteHandlerWithSentry = wrapRouteHandlerWithSentry.wrapRouteHandlerWithSentry;\nexports.wrapApiHandlerWithSentryVercelCrons = wrapApiHandlerWithSentryVercelCrons.wrapApiHandlerWithSentryVercelCrons;\nexports.wrapMiddlewareWithSentry = wrapMiddlewareWithSentry.wrapMiddlewareWithSentry;\nexports.wrapPageComponentWithSentry = wrapPageComponentWithSentry.wrapPageComponentWithSentry;\nexports.wrapGenerationFunctionWithSentry = wrapGenerationFunctionWithSentry.wrapGenerationFunctionWithSentry;\nexports.withServerActionInstrumentation = withServerActionInstrumentation.withServerActionInstrumentation;\nexports.captureRequestError = captureRequestError.captureRequestError;\nexports.experimental_captureRequestError = captureRequestError.experimental_captureRequestError;\nexports.captureUnderscoreErrorException = _error.captureUnderscoreErrorException;\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry.wrapApiHandlerWithSentry;\nexports.init = init;\nexports.withSentryConfig = withSentryConfig;\nObject.prototype.hasOwnProperty.call(vercelEdge, '__proto__') && !Object.prototype.hasOwnProperty.call(exports, '__proto__') && Object.defineProperty(exports, '__proto__', {\n  enumerable: true,\n  value: vercelEdge['__proto__']\n});\nObject.keys(vercelEdge).forEach(k => {\n  if (k !== 'default' && !Object.prototype.hasOwnProperty.call(exports, k)) exports[k] = vercelEdge[k];\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/edge/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/nextjs/build/cjs/edge/wrapApiHandlerWithSentry.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sentry/nextjs/build/cjs/edge/wrapApiHandlerWithSentry.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst responseEnd = __webpack_require__(/*! ../common/utils/responseEnd.js */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/common/utils/responseEnd.js\");\n\n/**\n * Wraps a Next.js edge route handler with Sentry error and performance instrumentation.\n */\nfunction wrapApiHandlerWithSentry(handler, parameterizedRoute) {\n  return new Proxy(handler, {\n    apply: async (wrappingTarget, thisArg, args) => {\n      // TODO: We still should add central isolation scope creation for when our build-time instrumentation does not work anymore with turbopack.\n\n      return core.withIsolationScope(isolationScope => {\n        const req = args[0];\n        const currentScope = core.getCurrentScope();\n        if (req instanceof Request) {\n          isolationScope.setSDKProcessingMetadata({\n            normalizedRequest: core.winterCGRequestToRequestData(req)\n          });\n          currentScope.setTransactionName(`${req.method} ${parameterizedRoute}`);\n        } else {\n          currentScope.setTransactionName(`handler (${parameterizedRoute})`);\n        }\n        let spanName;\n        let op = 'http.server';\n\n        // If there is an active span, it likely means that the automatic Next.js OTEL instrumentation worked and we can\n        // rely on that for parameterization.\n        const activeSpan = core.getActiveSpan();\n        if (activeSpan) {\n          spanName = `handler (${parameterizedRoute})`;\n          op = undefined;\n          const rootSpan = core.getRootSpan(activeSpan);\n          if (rootSpan) {\n            rootSpan.updateName(req instanceof Request ? `${req.method} ${parameterizedRoute}` : `handler ${parameterizedRoute}`);\n            rootSpan.setAttributes({\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.server',\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route'\n            });\n            core.setCapturedScopesOnSpan(rootSpan, currentScope, isolationScope);\n          }\n        } else if (req instanceof Request) {\n          spanName = `${req.method} ${parameterizedRoute}`;\n        } else {\n          spanName = `handler ${parameterizedRoute}`;\n        }\n        return core.startSpan({\n          name: spanName,\n          op: op,\n          attributes: {\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n            [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.nextjs.wrapApiHandlerWithSentry'\n          }\n        }, () => {\n          return core.handleCallbackErrors(() => wrappingTarget.apply(thisArg, args), error => {\n            core.captureException(error, {\n              mechanism: {\n                type: 'instrument',\n                handled: false\n              }\n            });\n          }, () => {\n            core.vercelWaitUntil(responseEnd.flushSafelyWithTimeout());\n          });\n        });\n      });\n    }\n  });\n}\nexports.wrapApiHandlerWithSentry = wrapApiHandlerWithSentry;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/nextjs/build/cjs/edge/wrapApiHandlerWithSentry.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/@sentry/vercel-edge/build/cjs/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@sentry/vercel-edge/build/cjs/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n\n\nvar {\n  _optionalChain,\n  _nullishCoalesce\n} = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\n{\n  if (globalThis.performance === undefined) {\n    globalThis.performance = {\n      timeOrigin: 0,\n      now: () => Date.now()\n    };\n  }\n}\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/./node_modules/@sentry/core/build/cjs/index.js\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nfunction _optionalChain$6(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n/**\n * The Sentry Vercel Edge Runtime SDK Client.\n *\n * @see VercelEdgeClientOptions for documentation on configuration options.\n * @see ServerRuntimeClient for usage documentation.\n */\nclass VercelEdgeClient extends core.ServerRuntimeClient {\n  /**\n   * Creates a new Vercel Edge Runtime SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  constructor(options) {\n    core.applySdkMetadata(options, 'vercel-edge');\n    options._metadata = options._metadata || {};\n    const clientOptions = {\n      ...options,\n      platform: 'javascript',\n      // TODO: Grab version information\n      runtime: {\n        name: 'vercel-edge'\n      },\n      serverName: options.serverName || process.env.SENTRY_NAME\n    };\n    super(clientOptions);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  async flush(timeout) {\n    const provider = this.traceProvider;\n    const spanProcessor = _optionalChain$6([provider, 'optionalAccess', _ => _.activeSpanProcessor]);\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n    return super.flush(timeout);\n  }\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TMP_DB_SYSTEM = 'db.system';\nvar TMP_DB_STATEMENT = 'db.statement';\nvar TMP_EXCEPTION_TYPE = 'exception.type';\nvar TMP_EXCEPTION_MESSAGE = 'exception.message';\nvar TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nvar TMP_FAAS_TRIGGER = 'faas.trigger';\nvar TMP_HTTP_METHOD = 'http.method';\nvar TMP_HTTP_URL = 'http.url';\nvar TMP_HTTP_TARGET = 'http.target';\nvar TMP_HTTP_STATUS_CODE = 'http.status_code';\nvar TMP_MESSAGING_SYSTEM = 'messaging.system';\nvar TMP_RPC_SERVICE = 'rpc.service';\nvar TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n *\n * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @deprecated Use ATTR_EXCEPTION_TYPE.\n */\nvar SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n/**\n * The exception message.\n *\n * @deprecated Use ATTR_EXCEPTION_MESSAGE.\n */\nvar SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @deprecated Use ATTR_EXCEPTION_STACKTRACE.\n */\nvar SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n/**\n * HTTP request method.\n *\n * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n *\n * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n *\n * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n/**\n * A string identifying the messaging system.\n *\n * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n *\n * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nvar TMP_SERVICE_NAME = 'service.name';\nvar TMP_SERVICE_NAMESPACE = 'service.namespace';\nvar TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nvar TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nvar TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nvar SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nvar SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nvar SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nvar SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nvar SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nvar TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n/**\n * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason\n *\n * @example acquired\n * @example request_canceled\n */\n/**\n * HTTP request method.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @note HTTP request method value **SHOULD** be \"known\" to the instrumentation.\n * By default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n *\n * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.\n *\n * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override\n * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named\n * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n *\n * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.\n * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.\n * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.\n */\nvar ATTR_HTTP_REQUEST_METHOD = 'http.request.method';\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @example 200\n */\nvar ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code';\n/**\n * The matched route, that is, the path template in the format used by the respective server framework.\n *\n * @example /users/:userID?\n * @example {controller}/{action}/{id?}\n *\n * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n */\nvar ATTR_HTTP_ROUTE = 'http.route';\n/**\n * Logical name of the service.\n *\n * @example shoppingcart\n *\n * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.\n */\nvar ATTR_SERVICE_NAME = 'service.name';\n/**\n * The version string of the service API or implementation. The format is not defined by these conventions.\n *\n * @example 2.0.0\n * @example a01dbef8a\n */\nvar ATTR_SERVICE_VERSION = 'service.version';\n/**\n * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n * @example //localhost\n *\n * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.\n * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.\n * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed). Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.\n */\nvar ATTR_URL_FULL = 'url.full';\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SUPPRESS_TRACING_KEY = api.createContextKey('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nfunction suppressTracing$1(context) {\n  return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nfunction isTracingSuppressed(context) {\n  return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nvar BAGGAGE_PROPERTIES_SEPARATOR = ';';\nvar BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nvar BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nvar BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nvar BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nvar BAGGAGE_MAX_TOTAL_LENGTH = 8192;\nvar __read$5 = globalThis && globalThis.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nfunction serializeKeyPairs(keyPairs) {\n  return keyPairs.reduce(function (hValue, current) {\n    var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\nfunction getKeyPairs(baggage) {\n  return baggage.getAllEntries().map(function (_a) {\n    var _b = __read$5(_a, 2),\n      key = _b[0],\n      value = _b[1];\n    var entry = encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n    return entry;\n  });\n}\nfunction parsePairKeyValue(entry) {\n  var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  var keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  var separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (separatorIndex <= 0) return;\n  var key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n  var value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n  var metadata;\n  if (valueProps.length > 0) {\n    metadata = api.baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n  }\n  return {\n    key: key,\n    value: value,\n    metadata: metadata\n  };\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar W3CBaggagePropagator = /** @class */function () {\n  function W3CBaggagePropagator() {}\n  W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n    var baggage = api.propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    var keyPairs = getKeyPairs(baggage).filter(function (pair) {\n      return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n    }).slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    var headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  };\n  W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n    var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    var baggageString = Array.isArray(headerValue) ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR) : headerValue;\n    if (!baggageString) return context;\n    var baggage = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    var pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(function (entry) {\n      var keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        var baggageEntry = {\n          value: keyPair.value\n        };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return api.propagation.setBaggage(context, api.propagation.createBaggage(baggage));\n  };\n  W3CBaggagePropagator.prototype.fields = function () {\n    return [BAGGAGE_HEADER];\n  };\n  return W3CBaggagePropagator;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values$3 = globalThis && globalThis.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read$4 = globalThis && globalThis.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nfunction sanitizeAttributes(attributes) {\n  var e_1, _a;\n  var out = {};\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n  try {\n    for (var _b = __values$3(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read$4(_c.value, 2),\n        key = _d[0],\n        val = _d[1];\n      if (!isAttributeKey(key)) {\n        api.diag.warn(\"Invalid attribute key: \" + key);\n        continue;\n      }\n      if (!isAttributeValue(val)) {\n        api.diag.warn(\"Invalid attribute value set for key: \" + key);\n        continue;\n      }\n      if (Array.isArray(val)) {\n        out[key] = val.slice();\n      } else {\n        out[key] = val;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return out;\n}\nfunction isAttributeKey(key) {\n  return typeof key === 'string' && key.length > 0;\n}\nfunction isAttributeValue(val) {\n  if (val == null) {\n    return true;\n  }\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n  return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n  var e_2, _a;\n  var type;\n  try {\n    for (var arr_1 = __values$3(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n      var element = arr_1_1.value;\n      // null/undefined elements are allowed\n      if (element == null) continue;\n      if (!type) {\n        if (isValidPrimitiveAttributeValue(element)) {\n          type = typeof element;\n          continue;\n        }\n        // encountered an invalid primitive\n        return false;\n      }\n      if (typeof element === type) {\n        continue;\n      }\n      return false;\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n  return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n  return false;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nfunction loggingErrorHandler() {\n  return function (ex) {\n    api.diag.error(stringifyException(ex));\n  };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n  var result = {};\n  var current = ex;\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n      if (result[propertyName]) return;\n      var value = current[propertyName];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n  return result;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nfunction globalErrorHandler(ex) {\n  try {\n    delegateHandler(ex);\n  } catch (_a) {} // eslint-disable-line no-empty\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TracesSamplerValues;\n(function (TracesSamplerValues) {\n  TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n  TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n  TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n  TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n  TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n  TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'];\nfunction isEnvVarABoolean(key) {\n  return ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1;\n}\nvar ENVIRONMENT_NUMBERS_KEYS = ['OTEL_BSP_EXPORT_TIMEOUT', 'OTEL_BSP_MAX_EXPORT_BATCH_SIZE', 'OTEL_BSP_MAX_QUEUE_SIZE', 'OTEL_BSP_SCHEDULE_DELAY', 'OTEL_BLRP_EXPORT_TIMEOUT', 'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE', 'OTEL_BLRP_MAX_QUEUE_SIZE', 'OTEL_BLRP_SCHEDULE_DELAY', 'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT', 'OTEL_ATTRIBUTE_COUNT_LIMIT', 'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT', 'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT', 'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT', 'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT', 'OTEL_SPAN_EVENT_COUNT_LIMIT', 'OTEL_SPAN_LINK_COUNT_LIMIT', 'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT', 'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT', 'OTEL_EXPORTER_OTLP_TIMEOUT', 'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT', 'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT', 'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT', 'OTEL_EXPORTER_JAEGER_AGENT_PORT'];\nfunction isEnvVarANumber(key) {\n  return ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1;\n}\nvar ENVIRONMENT_LISTS_KEYS = ['OTEL_NO_PATCH_MODULES', 'OTEL_PROPAGATORS', 'OTEL_SEMCONV_STABILITY_OPT_IN'];\nfunction isEnvVarAList(key) {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nvar DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nvar DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nvar DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nvar DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nvar DEFAULT_ENVIRONMENT = {\n  OTEL_SDK_DISABLED: false,\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n  OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BLRP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: api.DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n  OTEL_TRACES_EXPORTER: '',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: '',\n  OTEL_LOGS_EXPORTER: '',\n  OTEL_EXPORTER_OTLP_INSECURE: '',\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n  OTEL_SEMCONV_STABILITY_OPT_IN: []\n};\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(key, environment, values) {\n  if (typeof values[key] === 'undefined') {\n    return;\n  }\n  var value = String(values[key]);\n  // support case-insensitive \"true\"\n  environment[key] = value.toLowerCase() === 'true';\n}\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n  if (min === void 0) {\n    min = -Infinity;\n  }\n  if (max === void 0) {\n    max = Infinity;\n  }\n  if (typeof values[name] !== 'undefined') {\n    var value = Number(values[name]);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n  if (separator === void 0) {\n    separator = DEFAULT_LIST_SEPARATOR;\n  }\n  var givenValue = input[name];\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(function (v) {\n      return v.trim();\n    });\n  }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n  ALL: api.DiagLogLevel.ALL,\n  VERBOSE: api.DiagLogLevel.VERBOSE,\n  DEBUG: api.DiagLogLevel.DEBUG,\n  INFO: api.DiagLogLevel.INFO,\n  WARN: api.DiagLogLevel.WARN,\n  ERROR: api.DiagLogLevel.ERROR,\n  NONE: api.DiagLogLevel.NONE\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n  var value = values[key];\n  if (typeof value === 'string') {\n    var theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n/**\n * Parses environment values\n * @param values\n */\nfunction parseEnvironment(values) {\n  var environment = {};\n  for (var env in DEFAULT_ENVIRONMENT) {\n    var key = env;\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n      default:\n        if (isEnvVarABoolean(key)) {\n          parseBoolean(key, environment, values);\n        } else if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          var value = values[key];\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n  return environment;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Gets the environment variables\n */\nfunction getEnv() {\n  var processEnv = parseEnvironment(process.env);\n  return Object.assign({}, DEFAULT_ENVIRONMENT, processEnv);\n}\nfunction getEnvWithoutDefaults() {\n  return parseEnvironment(process.env);\n}\nconst performance = {\n  timeOrigin: 0,\n  now: () => Date.now()\n};\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar otperformance = performance;\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nvar VERSION$1 = '1.29.0';\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\n/** Constants describing the SDK in use */\nvar SDK_INFO = (_a = {}, _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = 'opentelemetry', _a[SEMRESATTRS_PROCESS_RUNTIME_NAME] = 'node', _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = TELEMETRYSDKLANGUAGEVALUES_NODEJS, _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = VERSION$1, _a);\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction unrefTimer(timer) {\n  timer.unref();\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar NANOSECOND_DIGITS = 9;\nvar NANOSECOND_DIGITS_IN_MILLIS = 6;\nvar MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nfunction millisToHrTime(epochMillis) {\n  var epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  var seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  var nanos = Math.round(epochMillis % 1000 * MILLISECONDS_TO_NANOSECONDS);\n  return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n  var timeOrigin = otperformance.timeOrigin;\n  return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nfunction hrTime(performanceNow) {\n  var timeOrigin = millisToHrTime(getTimeOrigin());\n  var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : otperformance.now());\n  return addHrTimes(timeOrigin, now);\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nfunction hrTimeDuration(startTime, endTime) {\n  var seconds = endTime[0] - startTime[0];\n  var nanos = endTime[1] - startTime[1];\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n  return [seconds, nanos];\n}\n/**\n * check if time is HrTime\n * @param value\n */\nfunction isTimeInputHrTime(value) {\n  return Array.isArray(value) && value.length === 2 && typeof value[0] === 'number' && typeof value[1] === 'number';\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nfunction isTimeInput(value) {\n  return isTimeInputHrTime(value) || typeof value === 'number' || value instanceof Date;\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nfunction addHrTimes(time1, time2) {\n  var out = [time1[0] + time2[0], time1[1] + time2[1]];\n  // Nanoseconds\n  if (out[1] >= SECOND_TO_NANOSECONDS) {\n    out[1] -= SECOND_TO_NANOSECONDS;\n    out[0] += 1;\n  }\n  return out;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExportResultCode;\n(function (ExportResultCode) {\n  ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n  ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values$2 = globalThis && globalThis.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */function () {\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  function CompositePropagator(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _a;\n    this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n    this._fields = Array.from(new Set(this._propagators\n    // older propagators may not have fields function, null check to be sure\n    .map(function (p) {\n      return typeof p.fields === 'function' ? p.fields() : [];\n    }).reduce(function (x, y) {\n      return x.concat(y);\n    }, [])));\n  }\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  CompositePropagator.prototype.inject = function (context, carrier, setter) {\n    var e_1, _a;\n    try {\n      for (var _b = __values$2(this._propagators), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var propagator = _c.value;\n        try {\n          propagator.inject(context, carrier, setter);\n        } catch (err) {\n          api.diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  CompositePropagator.prototype.extract = function (context, carrier, getter) {\n    return this._propagators.reduce(function (ctx, propagator) {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        api.diag.warn(\"Failed to extract with \" + propagator.constructor.name + \". Err: \" + err.message);\n      }\n      return ctx;\n    }, context);\n  };\n  CompositePropagator.prototype.fields = function () {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  };\n  return CompositePropagator;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nfunction validateKey(key) {\n  return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nfunction validateValue(value) {\n  return VALID_VALUE_BASE_REGEX.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value);\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceState = /** @class */function () {\n  function TraceState(rawTraceState) {\n    this._internalState = new Map();\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n  TraceState.prototype.set = function (key, value) {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    var traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  };\n  TraceState.prototype.unset = function (key) {\n    var traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  };\n  TraceState.prototype.get = function (key) {\n    return this._internalState.get(key);\n  };\n  TraceState.prototype.serialize = function () {\n    var _this = this;\n    return this._keys().reduce(function (agg, key) {\n      agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n      return agg;\n    }, []).join(LIST_MEMBERS_SEPARATOR);\n  };\n  TraceState.prototype._parse = function (rawTraceState) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR).reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n    .reduce(function (agg, part) {\n      var listMember = part.trim(); // Optional Whitespace (OWS) handling\n      var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n      if (i !== -1) {\n        var key = listMember.slice(0, i);\n        var value = listMember.slice(i + 1, part.length);\n        if (validateKey(key) && validateValue(value)) {\n          agg.set(key, value);\n        }\n      }\n      return agg;\n    }, new Map());\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(Array.from(this._internalState.entries()).reverse() // Use reverse same as original tracestate parse chain\n      .slice(0, MAX_TRACE_STATE_ITEMS));\n    }\n  };\n  TraceState.prototype._keys = function () {\n    return Array.from(this._internalState.keys()).reverse();\n  };\n  TraceState.prototype._clone = function () {\n    var traceState = new TraceState();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  };\n  return TraceState;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TRACE_PARENT_HEADER = 'traceparent';\nvar TRACE_STATE_HEADER = 'tracestate';\nvar VERSION = '00';\nvar VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nvar TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nvar PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nvar FLAGS_PART = '[\\\\da-f]{2}';\nvar TRACE_PARENT_REGEX = new RegExp(\"^\\\\s?(\" + VERSION_PART + \")-(\" + TRACE_ID_PART + \")-(\" + PARENT_ID_PART + \")-(\" + FLAGS_PART + \")(-.*)?\\\\s?$\");\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nfunction parseTraceParent(traceParent) {\n  var match = TRACE_PARENT_REGEX.exec(traceParent);\n  if (!match) return null;\n  // According to the specification the implementation should be compatible\n  // with future versions. If there are more parts, we only reject it if it's using version 00\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  if (match[1] === '00' && match[5]) return null;\n  return {\n    traceId: match[2],\n    spanId: match[3],\n    traceFlags: parseInt(match[4], 16)\n  };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nvar W3CTraceContextPropagator = /** @class */function () {\n  function W3CTraceContextPropagator() {}\n  W3CTraceContextPropagator.prototype.inject = function (context, carrier, setter) {\n    var spanContext = api.trace.getSpanContext(context);\n    if (!spanContext || isTracingSuppressed(context) || !api.isSpanContextValid(spanContext)) return;\n    var traceParent = VERSION + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-0\" + Number(spanContext.traceFlags || api.TraceFlags.NONE).toString(16);\n    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n    if (spanContext.traceState) {\n      setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n    }\n  };\n  W3CTraceContextPropagator.prototype.extract = function (context, carrier, getter) {\n    var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n    if (!traceParentHeader) return context;\n    var traceParent = Array.isArray(traceParentHeader) ? traceParentHeader[0] : traceParentHeader;\n    if (typeof traceParent !== 'string') return context;\n    var spanContext = parseTraceParent(traceParent);\n    if (!spanContext) return context;\n    spanContext.isRemote = true;\n    var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n    if (traceStateHeader) {\n      // If more than one `tracestate` header is found, we merge them into a\n      // single header.\n      var state = Array.isArray(traceStateHeader) ? traceStateHeader.join(',') : traceStateHeader;\n      spanContext.traceState = new TraceState(typeof state === 'string' ? state : undefined);\n    }\n    return api.trace.setSpanContext(context, spanContext);\n  };\n  W3CTraceContextPropagator.prototype.fields = function () {\n    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n  };\n  return W3CTraceContextPropagator;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nvar objectTag = '[object Object]';\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\nvar funcProto = Function.prototype;\nvar funcToString = funcProto.toString;\nvar objectCtorString = funcToString.call(Object);\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\nvar objectProto = Object.prototype;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nvar nativeObjectToString = objectProto.toString;\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function (arg) {\n    return func(transform(arg));\n  };\n}\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) === objectCtorString;\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n    tag = value[symToStringTag];\n  var unmasked = false;\n  try {\n    value[symToStringTag] = undefined;\n    unmasked = true;\n  } catch (e) {\n    // silence\n  }\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nfunction merge() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var result = args.shift();\n  var objects = new WeakMap();\n  while (args.length > 0) {\n    result = mergeTwoObjects(result, args.shift(), 0, objects);\n  }\n  return result;\n}\nfunction takeValue(value) {\n  if (isArray(value)) {\n    return value.slice();\n  }\n  return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level, objects) {\n  if (level === void 0) {\n    level = 0;\n  }\n  var result;\n  if (level > MAX_LEVEL) {\n    return undefined;\n  }\n  level++;\n  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n    result = takeValue(two);\n  } else if (isArray(one)) {\n    result = one.slice();\n    if (isArray(two)) {\n      for (var i = 0, j = two.length; i < j; i++) {\n        result.push(takeValue(two[i]));\n      }\n    } else if (isObject(two)) {\n      var keys = Object.keys(two);\n      for (var i = 0, j = keys.length; i < j; i++) {\n        var key = keys[i];\n        result[key] = takeValue(two[key]);\n      }\n    }\n  } else if (isObject(one)) {\n    if (isObject(two)) {\n      if (!shouldMerge(one, two)) {\n        return two;\n      }\n      result = Object.assign({}, one);\n      var keys = Object.keys(two);\n      for (var i = 0, j = keys.length; i < j; i++) {\n        var key = keys[i];\n        var twoValue = two[key];\n        if (isPrimitive(twoValue)) {\n          if (typeof twoValue === 'undefined') {\n            delete result[key];\n          } else {\n            // result[key] = takeValue(twoValue);\n            result[key] = twoValue;\n          }\n        } else {\n          var obj1 = result[key];\n          var obj2 = twoValue;\n          if (wasObjectReferenced(one, key, objects) || wasObjectReferenced(two, key, objects)) {\n            delete result[key];\n          } else {\n            if (isObject(obj1) && isObject(obj2)) {\n              var arr1 = objects.get(obj1) || [];\n              var arr2 = objects.get(obj2) || [];\n              arr1.push({\n                obj: one,\n                key: key\n              });\n              arr2.push({\n                obj: two,\n                key: key\n              });\n              objects.set(obj1, arr1);\n              objects.set(obj2, arr2);\n            }\n            result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n          }\n        }\n      }\n    } else {\n      result = two;\n    }\n  }\n  return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n  var arr = objects.get(obj[key]) || [];\n  for (var i = 0, j = arr.length; i < j; i++) {\n    var info = arr[i];\n    if (info.key === key && info.obj === obj) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\nfunction isObject(value) {\n  return !isPrimitive(value) && !isArray(value) && !isFunction(value) && typeof value === 'object';\n}\nfunction isPrimitive(value) {\n  return typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' || typeof value === 'undefined' || value instanceof Date || value instanceof RegExp || value === null;\n}\nfunction shouldMerge(one, two) {\n  if (!isPlainObject(one) || !isPlainObject(two)) {\n    return false;\n  }\n  return true;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */function () {\n  function Deferred() {\n    var _this = this;\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n  }\n  Object.defineProperty(Deferred.prototype, \"promise\", {\n    get: function () {\n      return this._promise;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Deferred.prototype.resolve = function (val) {\n    this._resolve(val);\n  };\n  Deferred.prototype.reject = function (err) {\n    this._reject(err);\n  };\n  return Deferred;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read$3 = globalThis && globalThis.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray$2 = globalThis && globalThis.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nvar BindOnceFuture = /** @class */function () {\n  function BindOnceFuture(_callback, _that) {\n    this._callback = _callback;\n    this._that = _that;\n    this._isCalled = false;\n    this._deferred = new Deferred();\n  }\n  Object.defineProperty(BindOnceFuture.prototype, \"isCalled\", {\n    get: function () {\n      return this._isCalled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BindOnceFuture.prototype, \"promise\", {\n    get: function () {\n      return this._deferred.promise;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  BindOnceFuture.prototype.call = function () {\n    var _a;\n    var _this = this;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve((_a = this._callback).call.apply(_a, __spreadArray$2([this._that], __read$3(args), false))).then(function (val) {\n          return _this._deferred.resolve(val);\n        }, function (err) {\n          return _this._deferred.reject(err);\n        });\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  };\n  return BindOnceFuture;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction defaultServiceName() {\n  return \"unknown_service:\" + \"\";\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign$1 = globalThis && globalThis.__assign || function () {\n  __assign$1 = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign$1.apply(this, arguments);\n};\nvar __awaiter = globalThis && globalThis.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = globalThis && globalThis.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read$2 = globalThis && globalThis.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */function () {\n  function Resource(\n  /**\n   * A dictionary of attributes with string keys and values that provide\n   * information about the entity as numbers, strings or booleans\n   * TODO: Consider to add check/validation on attributes.\n   */\n  attributes, asyncAttributesPromise) {\n    var _this = this;\n    var _a;\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n    this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {\n      _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);\n      _this.asyncAttributesPending = false;\n      return asyncAttributes;\n    }, function (err) {\n      api.diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n      _this.asyncAttributesPending = false;\n      return {};\n    });\n  }\n  /**\n   * Returns an empty Resource\n   */\n  Resource.empty = function () {\n    return Resource.EMPTY;\n  };\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  Resource.default = function () {\n    var _a;\n    return new Resource((_a = {}, _a[SEMRESATTRS_SERVICE_NAME] = defaultServiceName(), _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE], _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME], _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION], _a));\n  };\n  Object.defineProperty(Resource.prototype, \"attributes\", {\n    get: function () {\n      var _a;\n      if (this.asyncAttributesPending) {\n        api.diag.error('Accessing resource attributes before async attributes settled');\n      }\n      return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  Resource.prototype.waitForAsyncAttributes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.asyncAttributesPending) return [3 /*break*/, 2];\n            return [4 /*yield*/, this._asyncAttributesPromise];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  Resource.prototype.merge = function (other) {\n    var _this = this;\n    var _a;\n    if (!other) return this;\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    var mergedSyncAttributes = __assign$1(__assign$1({}, this._syncAttributes), (_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes);\n    if (!this._asyncAttributesPromise && !other._asyncAttributesPromise) {\n      return new Resource(mergedSyncAttributes);\n    }\n    var mergedAttributesPromise = Promise.all([this._asyncAttributesPromise, other._asyncAttributesPromise]).then(function (_a) {\n      var _b;\n      var _c = __read$2(_a, 2),\n        thisAsyncAttributes = _c[0],\n        otherAsyncAttributes = _c[1];\n      return __assign$1(__assign$1(__assign$1(__assign$1({}, _this._syncAttributes), thisAsyncAttributes), (_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes), otherAsyncAttributes);\n    });\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  };\n  Resource.EMPTY = new Resource({});\n  return Resource;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nvar ExceptionEventName = 'exception';\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = globalThis && globalThis.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __values$1 = globalThis && globalThis.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read$1 = globalThis && globalThis.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray$1 = globalThis && globalThis.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * This class represents a span.\n */\nvar Span = /** @class */function () {\n  /**\n   * Constructs a new Span instance.\n   *\n   * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n   * */\n  function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, _deprecatedClock,\n  // keeping this argument even though it is unused to ensure backwards compatibility\n  attributes) {\n    if (links === void 0) {\n      links = [];\n    }\n    this.attributes = {};\n    this.links = [];\n    this.events = [];\n    this._droppedAttributesCount = 0;\n    this._droppedEventsCount = 0;\n    this._droppedLinksCount = 0;\n    this.status = {\n      code: api.SpanStatusCode.UNSET\n    };\n    this.endTime = [0, 0];\n    this._ended = false;\n    this._duration = [-1, -1];\n    this.name = spanName;\n    this._spanContext = spanContext;\n    this.parentSpanId = parentSpanId;\n    this.kind = kind;\n    this.links = links;\n    var now = Date.now();\n    this._performanceStartTime = otperformance.now();\n    this._performanceOffset = now - (this._performanceStartTime + getTimeOrigin());\n    this._startTimeProvided = startTime != null;\n    this.startTime = this._getTime(startTime !== null && startTime !== void 0 ? startTime : now);\n    this.resource = parentTracer.resource;\n    this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n    this._spanLimits = parentTracer.getSpanLimits();\n    this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0;\n    if (attributes != null) {\n      this.setAttributes(attributes);\n    }\n    this._spanProcessor = parentTracer.getActiveSpanProcessor();\n    this._spanProcessor.onStart(this, context);\n  }\n  Span.prototype.spanContext = function () {\n    return this._spanContext;\n  };\n  Span.prototype.setAttribute = function (key, value) {\n    if (value == null || this._isSpanEnded()) return this;\n    if (key.length === 0) {\n      api.diag.warn(\"Invalid attribute key: \" + key);\n      return this;\n    }\n    if (!isAttributeValue(value)) {\n      api.diag.warn(\"Invalid attribute value set for key: \" + key);\n      return this;\n    }\n    if (Object.keys(this.attributes).length >= this._spanLimits.attributeCountLimit && !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n      this._droppedAttributesCount++;\n      return this;\n    }\n    this.attributes[key] = this._truncateToSize(value);\n    return this;\n  };\n  Span.prototype.setAttributes = function (attributes) {\n    var e_1, _a;\n    try {\n      for (var _b = __values$1(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read$1(_c.value, 2),\n          k = _d[0],\n          v = _d[1];\n        this.setAttribute(k, v);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return this;\n  };\n  /**\n   *\n   * @param name Span Name\n   * @param [attributesOrStartTime] Span attributes or start time\n   *     if type is {@type TimeInput} and 3rd param is undefined\n   * @param [timeStamp] Specified time stamp for the event\n   */\n  Span.prototype.addEvent = function (name, attributesOrStartTime, timeStamp) {\n    if (this._isSpanEnded()) return this;\n    if (this._spanLimits.eventCountLimit === 0) {\n      api.diag.warn('No events allowed.');\n      this._droppedEventsCount++;\n      return this;\n    }\n    if (this.events.length >= this._spanLimits.eventCountLimit) {\n      if (this._droppedEventsCount === 0) {\n        api.diag.debug('Dropping extra events.');\n      }\n      this.events.shift();\n      this._droppedEventsCount++;\n    }\n    if (isTimeInput(attributesOrStartTime)) {\n      if (!isTimeInput(timeStamp)) {\n        timeStamp = attributesOrStartTime;\n      }\n      attributesOrStartTime = undefined;\n    }\n    var attributes = sanitizeAttributes(attributesOrStartTime);\n    this.events.push({\n      name: name,\n      attributes: attributes,\n      time: this._getTime(timeStamp),\n      droppedAttributesCount: 0\n    });\n    return this;\n  };\n  Span.prototype.addLink = function (link) {\n    this.links.push(link);\n    return this;\n  };\n  Span.prototype.addLinks = function (links) {\n    var _a;\n    (_a = this.links).push.apply(_a, __spreadArray$1([], __read$1(links), false));\n    return this;\n  };\n  Span.prototype.setStatus = function (status) {\n    if (this._isSpanEnded()) return this;\n    this.status = __assign({}, status);\n    // When using try-catch, the caught \"error\" is of type `any`. When then assigning `any` to `status.message`,\n    // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()\n    // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or\n    // undefined to avoid an incorrect type causing issues downstream.\n    if (this.status.message != null && typeof status.message !== 'string') {\n      api.diag.warn(\"Dropping invalid status.message of type '\" + typeof status.message + \"', expected 'string'\");\n      delete this.status.message;\n    }\n    return this;\n  };\n  Span.prototype.updateName = function (name) {\n    if (this._isSpanEnded()) return this;\n    this.name = name;\n    return this;\n  };\n  Span.prototype.end = function (endTime) {\n    if (this._isSpanEnded()) {\n      api.diag.error(this.name + \" \" + this._spanContext.traceId + \"-\" + this._spanContext.spanId + \" - You can only call end() on a span once.\");\n      return;\n    }\n    this._ended = true;\n    this.endTime = this._getTime(endTime);\n    this._duration = hrTimeDuration(this.startTime, this.endTime);\n    if (this._duration[0] < 0) {\n      api.diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n      this.endTime = this.startTime.slice();\n      this._duration = [0, 0];\n    }\n    if (this._droppedEventsCount > 0) {\n      api.diag.warn(\"Dropped \" + this._droppedEventsCount + \" events because eventCountLimit reached\");\n    }\n    this._spanProcessor.onEnd(this);\n  };\n  Span.prototype._getTime = function (inp) {\n    if (typeof inp === 'number' && inp <= otperformance.now()) {\n      // must be a performance timestamp\n      // apply correction and convert to hrtime\n      return hrTime(inp + this._performanceOffset);\n    }\n    if (typeof inp === 'number') {\n      return millisToHrTime(inp);\n    }\n    if (inp instanceof Date) {\n      return millisToHrTime(inp.getTime());\n    }\n    if (isTimeInputHrTime(inp)) {\n      return inp;\n    }\n    if (this._startTimeProvided) {\n      // if user provided a time for the start manually\n      // we can't use duration to calculate event/end times\n      return millisToHrTime(Date.now());\n    }\n    var msDuration = otperformance.now() - this._performanceStartTime;\n    return addHrTimes(this.startTime, millisToHrTime(msDuration));\n  };\n  Span.prototype.isRecording = function () {\n    return this._ended === false;\n  };\n  Span.prototype.recordException = function (exception, time) {\n    var attributes = {};\n    if (typeof exception === 'string') {\n      attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception;\n    } else if (exception) {\n      if (exception.code) {\n        attributes[SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();\n      } else if (exception.name) {\n        attributes[SEMATTRS_EXCEPTION_TYPE] = exception.name;\n      }\n      if (exception.message) {\n        attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception.message;\n      }\n      if (exception.stack) {\n        attributes[SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;\n      }\n    }\n    // these are minimum requirements from spec\n    if (attributes[SEMATTRS_EXCEPTION_TYPE] || attributes[SEMATTRS_EXCEPTION_MESSAGE]) {\n      this.addEvent(ExceptionEventName, attributes, time);\n    } else {\n      api.diag.warn(\"Failed to record an exception \" + exception);\n    }\n  };\n  Object.defineProperty(Span.prototype, \"duration\", {\n    get: function () {\n      return this._duration;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Span.prototype, \"ended\", {\n    get: function () {\n      return this._ended;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Span.prototype, \"droppedAttributesCount\", {\n    get: function () {\n      return this._droppedAttributesCount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Span.prototype, \"droppedEventsCount\", {\n    get: function () {\n      return this._droppedEventsCount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Span.prototype, \"droppedLinksCount\", {\n    get: function () {\n      return this._droppedLinksCount;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Span.prototype._isSpanEnded = function () {\n    if (this._ended) {\n      api.diag.warn(\"Can not execute the operation on ended Span {traceId: \" + this._spanContext.traceId + \", spanId: \" + this._spanContext.spanId + \"}\");\n    }\n    return this._ended;\n  };\n  // Utility function to truncate given value within size\n  // for value type of string, will truncate to given limit\n  // for type of non-string, will return same value\n  Span.prototype._truncateToLimitUtil = function (value, limit) {\n    if (value.length <= limit) {\n      return value;\n    }\n    return value.substring(0, limit);\n  };\n  /**\n   * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n   * return string with truncated to {@code attributeValueLengthLimit} characters\n   *\n   * If the given attribute value is array of strings then\n   * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n   *\n   * Otherwise return same Attribute {@code value}\n   *\n   * @param value Attribute value\n   * @returns truncated attribute value if required, otherwise same value\n   */\n  Span.prototype._truncateToSize = function (value) {\n    var _this = this;\n    var limit = this._attributeValueLengthLimit;\n    // Check limit\n    if (limit <= 0) {\n      // Negative values are invalid, so do not truncate\n      api.diag.warn(\"Attribute value limit must be positive, got \" + limit);\n      return value;\n    }\n    // String\n    if (typeof value === 'string') {\n      return this._truncateToLimitUtil(value, limit);\n    }\n    // Array of strings\n    if (Array.isArray(value)) {\n      return value.map(function (val) {\n        return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val;\n      });\n    }\n    // Other types, no need to apply value length limit\n    return value;\n  };\n  return Span;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */function () {\n  function AlwaysOffSampler() {}\n  AlwaysOffSampler.prototype.shouldSample = function () {\n    return {\n      decision: SamplingDecision.NOT_RECORD\n    };\n  };\n  AlwaysOffSampler.prototype.toString = function () {\n    return 'AlwaysOffSampler';\n  };\n  return AlwaysOffSampler;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */function () {\n  function AlwaysOnSampler() {}\n  AlwaysOnSampler.prototype.shouldSample = function () {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED\n    };\n  };\n  AlwaysOnSampler.prototype.toString = function () {\n    return 'AlwaysOnSampler';\n  };\n  return AlwaysOnSampler;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */function () {\n  function ParentBasedSampler(config) {\n    var _a, _b, _c, _d;\n    this._root = config.root;\n    if (!this._root) {\n      globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n      this._root = new AlwaysOnSampler();\n    }\n    this._remoteParentSampled = (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n    this._remoteParentNotSampled = (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n    this._localParentSampled = (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n    this._localParentNotSampled = (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n  }\n  ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n    var parentContext = api.trace.getSpanContext(context);\n    if (!parentContext || !api.isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & api.TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n      }\n      return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    if (parentContext.traceFlags & api.TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n  };\n  ParentBasedSampler.prototype.toString = function () {\n    return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n  };\n  return ParentBasedSampler;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */function () {\n  function TraceIdRatioBasedSampler(_ratio) {\n    if (_ratio === void 0) {\n      _ratio = 0;\n    }\n    this._ratio = _ratio;\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n  TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n    return {\n      decision: api.isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD\n    };\n  };\n  TraceIdRatioBasedSampler.prototype.toString = function () {\n    return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n  };\n  TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  };\n  TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n    var accumulation = 0;\n    for (var i = 0; i < traceId.length / 8; i++) {\n      var pos = i * 8;\n      var part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  };\n  return TraceIdRatioBasedSampler;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar env = getEnv();\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nfunction loadDefaultConfig() {\n  var _env = getEnv();\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: _env.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: _env.OTEL_ATTRIBUTE_COUNT_LIMIT\n    },\n    spanLimits: {\n      attributeValueLengthLimit: _env.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: _env.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: _env.OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: _env.OTEL_SPAN_EVENT_COUNT_LIMIT,\n      attributePerEventCountLimit: _env.OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      attributePerLinkCountLimit: _env.OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT\n    },\n    mergeResourceWithDefaults: true\n  };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nfunction buildSamplerFromEnv(environment) {\n  if (environment === void 0) {\n    environment = getEnv();\n  }\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler()\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler()\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment))\n      });\n    default:\n      api.diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n      return new AlwaysOnSampler();\n  }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n  if (environment.OTEL_TRACES_SAMPLER_ARG === undefined || environment.OTEL_TRACES_SAMPLER_ARG === '') {\n    api.diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n  if (isNaN(probability)) {\n    api.diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  if (probability < 0 || probability > 1) {\n    api.diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  return probability;\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nfunction mergeConfig(userConfig) {\n  var perInstanceDefaults = {\n    sampler: buildSamplerFromEnv()\n  };\n  var DEFAULT_CONFIG = loadDefaultConfig();\n  var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n  target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n  target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n  return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nfunction reconfigureLimits(userConfig) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n  var spanLimits = Object.assign({}, userConfig.spanLimits);\n  var parsedEnvConfig = getEnvWithoutDefaults();\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit = (_f = (_e = (_d = (_b = (_a = userConfig.spanLimits) === null || _a === void 0 ? void 0 : _a.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit = (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n  return Object.assign({}, userConfig, {\n    spanLimits: spanLimits\n  });\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */function () {\n  function BatchSpanProcessorBase(_exporter, config) {\n    this._exporter = _exporter;\n    this._isExporting = false;\n    this._finishedSpans = [];\n    this._droppedSpansCount = 0;\n    var env = getEnv();\n    this._maxExportBatchSize = typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number' ? config.maxExportBatchSize : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize = typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number' ? config.maxQueueSize : env.OTEL_BSP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis = typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number' ? config.scheduledDelayMillis : env.OTEL_BSP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis = typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number' ? config.exportTimeoutMillis : env.OTEL_BSP_EXPORT_TIMEOUT;\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    if (this._maxExportBatchSize > this._maxQueueSize) {\n      api.diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n      this._maxExportBatchSize = this._maxQueueSize;\n    }\n  }\n  BatchSpanProcessorBase.prototype.forceFlush = function () {\n    if (this._shutdownOnce.isCalled) {\n      return this._shutdownOnce.promise;\n    }\n    return this._flushAll();\n  };\n  // does nothing.\n  BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) {};\n  BatchSpanProcessorBase.prototype.onEnd = function (span) {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n    if ((span.spanContext().traceFlags & api.TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n    this._addToBuffer(span);\n  };\n  BatchSpanProcessorBase.prototype.shutdown = function () {\n    return this._shutdownOnce.call();\n  };\n  BatchSpanProcessorBase.prototype._shutdown = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.onShutdown();\n    }).then(function () {\n      return _this._flushAll();\n    }).then(function () {\n      return _this._exporter.shutdown();\n    });\n  };\n  /** Add a span in the buffer. */\n  BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n    if (this._finishedSpans.length >= this._maxQueueSize) {\n      // limit reached, drop span\n      if (this._droppedSpansCount === 0) {\n        api.diag.debug('maxQueueSize reached, dropping spans');\n      }\n      this._droppedSpansCount++;\n      return;\n    }\n    if (this._droppedSpansCount > 0) {\n      // some spans were dropped, log once with count of spans dropped\n      api.diag.warn(\"Dropped \" + this._droppedSpansCount + \" spans because maxQueueSize reached\");\n      this._droppedSpansCount = 0;\n    }\n    this._finishedSpans.push(span);\n    this._maybeStartTimer();\n  };\n  /**\n   * Send all spans to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  BatchSpanProcessorBase.prototype._flushAll = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var promises = [];\n      // calculate number of batches\n      var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n      for (var i = 0, j = count; i < j; i++) {\n        promises.push(_this._flushOneBatch());\n      }\n      Promise.all(promises).then(function () {\n        resolve();\n      }).catch(reject);\n    });\n  };\n  BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n    var _this = this;\n    this._clearTimer();\n    if (this._finishedSpans.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise(function (resolve, reject) {\n      var timer = setTimeout(function () {\n        // don't wait anymore for export, this way the next batch can start\n        reject(new Error('Timeout'));\n      }, _this._exportTimeoutMillis);\n      // prevent downstream exporter calls from generating spans\n      api.context.with(suppressTracing$1(api.context.active()), function () {\n        // Reset the finished spans buffer here because the next invocations of the _flush method\n        // could pass the same finished spans to the exporter if the buffer is cleared\n        // outside the execution of this callback.\n        var spans;\n        if (_this._finishedSpans.length <= _this._maxExportBatchSize) {\n          spans = _this._finishedSpans;\n          _this._finishedSpans = [];\n        } else {\n          spans = _this._finishedSpans.splice(0, _this._maxExportBatchSize);\n        }\n        var doExport = function () {\n          return _this._exporter.export(spans, function (result) {\n            var _a;\n            clearTimeout(timer);\n            if (result.code === ExportResultCode.SUCCESS) {\n              resolve();\n            } else {\n              reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n            }\n          });\n        };\n        var pendingResources = null;\n        for (var i = 0, len = spans.length; i < len; i++) {\n          var span = spans[i];\n          if (span.resource.asyncAttributesPending && span.resource.waitForAsyncAttributes) {\n            pendingResources !== null && pendingResources !== void 0 ? pendingResources : pendingResources = [];\n            pendingResources.push(span.resource.waitForAsyncAttributes());\n          }\n        }\n        // Avoid scheduling a promise to make the behavior more predictable and easier to test\n        if (pendingResources === null) {\n          doExport();\n        } else {\n          Promise.all(pendingResources).then(doExport, function (err) {\n            globalErrorHandler(err);\n            reject(err);\n          });\n        }\n      });\n    });\n  };\n  BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n    var _this = this;\n    if (this._isExporting) return;\n    var flush = function () {\n      _this._isExporting = true;\n      _this._flushOneBatch().finally(function () {\n        _this._isExporting = false;\n        if (_this._finishedSpans.length > 0) {\n          _this._clearTimer();\n          _this._maybeStartTimer();\n        }\n      }).catch(function (e) {\n        _this._isExporting = false;\n        globalErrorHandler(e);\n      });\n    };\n    // we only wait if the queue doesn't have enough elements yet\n    if (this._finishedSpans.length >= this._maxExportBatchSize) {\n      return flush();\n    }\n    if (this._timer !== undefined) return;\n    this._timer = setTimeout(function () {\n      return flush();\n    }, this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  };\n  BatchSpanProcessorBase.prototype._clearTimer = function () {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  };\n  return BatchSpanProcessorBase;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = globalThis && globalThis.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar BatchSpanProcessor = /** @class */function (_super) {\n  __extends(BatchSpanProcessor, _super);\n  function BatchSpanProcessor() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  BatchSpanProcessor.prototype.onShutdown = function () {};\n  return BatchSpanProcessor;\n}(BatchSpanProcessorBase);\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */function () {\n  function RandomIdGenerator() {\n    /**\n     * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n     * characters corresponding to 128 bits.\n     */\n    this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n    /**\n     * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n     * characters corresponding to 64 bits.\n     */\n    this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n  }\n  return RandomIdGenerator;\n}();\nvar SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes) {\n  return function generateId() {\n    for (var i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE(Math.random() * Math.pow(2, 32) >>> 0, i * 4);\n    }\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (var i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class represents a basic tracer.\n */\nvar Tracer = /** @class */function () {\n  /**\n   * Constructs a new Tracer instance.\n   */\n  function Tracer(instrumentationLibrary, config, _tracerProvider) {\n    this._tracerProvider = _tracerProvider;\n    var localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this.resource = _tracerProvider.resource;\n    this.instrumentationLibrary = instrumentationLibrary;\n  }\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  Tracer.prototype.startSpan = function (name, options, context) {\n    var _a, _b, _c;\n    if (options === void 0) {\n      options = {};\n    }\n    if (context === void 0) {\n      context = api.context.active();\n    }\n    // remove span from context in case a root span is requested via options\n    if (options.root) {\n      context = api.trace.deleteSpan(context);\n    }\n    var parentSpan = api.trace.getSpan(context);\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      var nonRecordingSpan = api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n      return nonRecordingSpan;\n    }\n    var parentSpanContext = parentSpan === null || parentSpan === void 0 ? void 0 : parentSpan.spanContext();\n    var spanId = this._idGenerator.generateSpanId();\n    var traceId;\n    var traceState;\n    var parentSpanId;\n    if (!parentSpanContext || !api.trace.isSpanContextValid(parentSpanContext)) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentSpanContext.traceId;\n      traceState = parentSpanContext.traceState;\n      parentSpanId = parentSpanContext.spanId;\n    }\n    var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : api.SpanKind.INTERNAL;\n    var links = ((_b = options.links) !== null && _b !== void 0 ? _b : []).map(function (link) {\n      return {\n        context: link.context,\n        attributes: sanitizeAttributes(link.attributes)\n      };\n    });\n    var attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    var samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n    traceState = (_c = samplingResult.traceState) !== null && _c !== void 0 ? _c : traceState;\n    var traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE;\n    var spanContext = {\n      traceId: traceId,\n      spanId: spanId,\n      traceFlags: traceFlags,\n      traceState: traceState\n    };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug('Recording is off, propagating context in a non-recording span');\n      var nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n      return nonRecordingSpan;\n    }\n    // Set initial span attributes. The attributes object may have been mutated\n    // by the sampler, so we sanitize the merged attributes before setting them.\n    var initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n    var span = new Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime, undefined, initAttributes);\n    return span;\n  };\n  Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n    var opts;\n    var ctx;\n    var fn;\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2;\n    } else if (arguments.length === 3) {\n      opts = arg2;\n      fn = arg3;\n    } else {\n      opts = arg2;\n      ctx = arg3;\n      fn = arg4;\n    }\n    var parentContext = ctx !== null && ctx !== void 0 ? ctx : api.context.active();\n    var span = this.startSpan(name, opts, parentContext);\n    var contextWithSpanSet = api.trace.setSpan(parentContext, span);\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  };\n  /** Returns the active {@link GeneralLimits}. */\n  Tracer.prototype.getGeneralLimits = function () {\n    return this._generalLimits;\n  };\n  /** Returns the active {@link SpanLimits}. */\n  Tracer.prototype.getSpanLimits = function () {\n    return this._spanLimits;\n  };\n  Tracer.prototype.getActiveSpanProcessor = function () {\n    return this._tracerProvider.getActiveSpanProcessor();\n  };\n  return Tracer;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = globalThis && globalThis.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */function () {\n  function MultiSpanProcessor(_spanProcessors) {\n    this._spanProcessors = _spanProcessors;\n  }\n  MultiSpanProcessor.prototype.forceFlush = function () {\n    var e_1, _a;\n    var promises = [];\n    try {\n      for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var spanProcessor = _c.value;\n        promises.push(spanProcessor.forceFlush());\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return new Promise(function (resolve) {\n      Promise.all(promises).then(function () {\n        resolve();\n      }).catch(function (error) {\n        globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n        resolve();\n      });\n    });\n  };\n  MultiSpanProcessor.prototype.onStart = function (span, context) {\n    var e_2, _a;\n    try {\n      for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var spanProcessor = _c.value;\n        spanProcessor.onStart(span, context);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n  MultiSpanProcessor.prototype.onEnd = function (span) {\n    var e_3, _a;\n    try {\n      for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var spanProcessor = _c.value;\n        spanProcessor.onEnd(span);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  MultiSpanProcessor.prototype.shutdown = function () {\n    var e_4, _a;\n    var promises = [];\n    try {\n      for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var spanProcessor = _c.value;\n        promises.push(spanProcessor.shutdown());\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    return new Promise(function (resolve, reject) {\n      Promise.all(promises).then(function () {\n        resolve();\n      }, reject);\n    });\n  };\n  return MultiSpanProcessor;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nvar NoopSpanProcessor = /** @class */function () {\n  function NoopSpanProcessor() {}\n  NoopSpanProcessor.prototype.onStart = function (_span, _context) {};\n  NoopSpanProcessor.prototype.onEnd = function (_span) {};\n  NoopSpanProcessor.prototype.shutdown = function () {\n    return Promise.resolve();\n  };\n  NoopSpanProcessor.prototype.forceFlush = function () {\n    return Promise.resolve();\n  };\n  return NoopSpanProcessor;\n}();\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = globalThis && globalThis.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = globalThis && globalThis.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar ForceFlushState;\n(function (ForceFlushState) {\n  ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n  ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n  ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n  ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */function () {\n  function BasicTracerProvider(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _a, _b;\n    this._registeredSpanProcessors = [];\n    this._tracers = new Map();\n    var mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n    this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : Resource.empty();\n    if (mergedConfig.mergeResourceWithDefaults) {\n      this.resource = Resource.default().merge(this.resource);\n    }\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource\n    });\n    if ((_b = config.spanProcessors) === null || _b === void 0 ? void 0 : _b.length) {\n      this._registeredSpanProcessors = __spreadArray([], __read(config.spanProcessors), false);\n      this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n    } else {\n      var defaultExporter = this._buildExporterFromEnv();\n      if (defaultExporter !== undefined) {\n        var batchProcessor = new BatchSpanProcessor(defaultExporter);\n        this.activeSpanProcessor = batchProcessor;\n      } else {\n        this.activeSpanProcessor = new NoopSpanProcessor();\n      }\n    }\n  }\n  BasicTracerProvider.prototype.getTracer = function (name, version, options) {\n    var key = name + \"@\" + (version || '') + \":\" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || '');\n    if (!this._tracers.has(key)) {\n      this._tracers.set(key, new Tracer({\n        name: name,\n        version: version,\n        schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl\n      }, this._config, this));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._tracers.get(key);\n  };\n  /**\n   * @deprecated please use {@link TracerConfig} spanProcessors property\n   * Adds a new {@link SpanProcessor} to this tracer.\n   * @param spanProcessor the new SpanProcessor to be added.\n   */\n  BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n    if (this._registeredSpanProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this.activeSpanProcessor.shutdown().catch(function (err) {\n        return api.diag.error('Error while trying to shutdown current span processor', err);\n      });\n    }\n    this._registeredSpanProcessors.push(spanProcessor);\n    this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n  };\n  BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n    return this.activeSpanProcessor;\n  };\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  BasicTracerProvider.prototype.register = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    api.trace.setGlobalTracerProvider(this);\n    if (config.propagator === undefined) {\n      config.propagator = this._buildPropagatorFromEnv();\n    }\n    if (config.contextManager) {\n      api.context.setGlobalContextManager(config.contextManager);\n    }\n    if (config.propagator) {\n      api.propagation.setGlobalPropagator(config.propagator);\n    }\n  };\n  BasicTracerProvider.prototype.forceFlush = function () {\n    var timeout = this._config.forceFlushTimeoutMillis;\n    var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n      return new Promise(function (resolve) {\n        var state;\n        var timeoutInterval = setTimeout(function () {\n          resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n          state = ForceFlushState.timeout;\n        }, timeout);\n        spanProcessor.forceFlush().then(function () {\n          clearTimeout(timeoutInterval);\n          if (state !== ForceFlushState.timeout) {\n            state = ForceFlushState.resolved;\n            resolve(state);\n          }\n        }).catch(function (error) {\n          clearTimeout(timeoutInterval);\n          state = ForceFlushState.error;\n          resolve(error);\n        });\n      });\n    });\n    return new Promise(function (resolve, reject) {\n      Promise.all(promises).then(function (results) {\n        var errors = results.filter(function (result) {\n          return result !== ForceFlushState.resolved;\n        });\n        if (errors.length > 0) {\n          reject(errors);\n        } else {\n          resolve();\n        }\n      }).catch(function (error) {\n        return reject([error]);\n      });\n    });\n  };\n  BasicTracerProvider.prototype.shutdown = function () {\n    return this.activeSpanProcessor.shutdown();\n  };\n  /**\n   * TS cannot yet infer the type of this.constructor:\n   * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n   * There is no need to override either of the getters in your child class.\n   * The type of the registered component maps should be the same across all\n   * classes in the inheritance tree.\n   */\n  BasicTracerProvider.prototype._getPropagator = function (name) {\n    var _a;\n    return (_a = this.constructor._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n  };\n  BasicTracerProvider.prototype._getSpanExporter = function (name) {\n    var _a;\n    return (_a = this.constructor._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n  };\n  BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n    var _this = this;\n    // per spec, propagators from env must be deduplicated\n    var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));\n    var propagators = uniquePropagatorNames.map(function (name) {\n      var propagator = _this._getPropagator(name);\n      if (!propagator) {\n        api.diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n      }\n      return propagator;\n    });\n    var validPropagators = propagators.reduce(function (list, item) {\n      if (item) {\n        list.push(item);\n      }\n      return list;\n    }, []);\n    if (validPropagators.length === 0) {\n      return;\n    } else if (uniquePropagatorNames.length === 1) {\n      return validPropagators[0];\n    } else {\n      return new CompositePropagator({\n        propagators: validPropagators\n      });\n    }\n  };\n  BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n    var exporterName = getEnv().OTEL_TRACES_EXPORTER;\n    if (exporterName === 'none' || exporterName === '') return;\n    var exporter = this._getSpanExporter(exporterName);\n    if (!exporter) {\n      api.diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n    }\n    return exporter;\n  };\n  BasicTracerProvider._registeredPropagators = new Map([['tracecontext', function () {\n    return new W3CTraceContextPropagator();\n  }], ['baggage', function () {\n    return new W3CBaggagePropagator();\n  }]]);\n  BasicTracerProvider._registeredExporters = new Map();\n  return BasicTracerProvider;\n}();\n\n/** If this attribute is true, it means that the parent is a remote span. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE = 'sentry.parentIsRemote';\n\n// These are not standardized yet, but used by the graphql instrumentation\nconst SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = 'sentry.graphql.operation';\n\n/**\n * Check if a given span has attributes.\n * This is necessary because the base `Span` type does not have attributes,\n * so in places where we are passed a generic span, we need to check if we want to access them.\n */\nfunction spanHasAttributes(span) {\n  const castSpan = span;\n  return !!castSpan.attributes && typeof castSpan.attributes === 'object';\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasKind(span) {\n  const castSpan = span;\n  return typeof castSpan.kind === 'number';\n}\n\n/**\n * Check if a given span has a status.\n * This is necessary because the base `Span` type does not have a status,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasStatus(span) {\n  const castSpan = span;\n  return !!castSpan.status;\n}\n\n/**\n * Check if a given span has a name.\n * This is necessary because the base `Span` type does not have a name,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasName(span) {\n  const castSpan = span;\n  return !!castSpan.name;\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasParentId(span) {\n  const castSpan = span;\n  return !!castSpan.parentSpanId;\n}\n\n/**\n * Get sanitizied request data from an OTEL span.\n */\nfunction getRequestSpanData(span) {\n  // The base `Span` type has no `attributes`, so we need to guard here against that\n  if (!spanHasAttributes(span)) {\n    return {};\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeUrlAttribute = span.attributes[ATTR_URL_FULL] || span.attributes[SEMATTRS_HTTP_URL];\n  const data = {\n    url: maybeUrlAttribute,\n    // eslint-disable-next-line deprecation/deprecation\n    'http.method': span.attributes[ATTR_HTTP_REQUEST_METHOD] || span.attributes[SEMATTRS_HTTP_METHOD]\n  };\n\n  // Default to GET if URL is set but method is not\n  if (!data['http.method'] && data.url) {\n    data['http.method'] = 'GET';\n  }\n  try {\n    if (typeof maybeUrlAttribute === 'string') {\n      const url = core.parseUrl(maybeUrlAttribute);\n      data.url = core.getSanitizedUrlString(url);\n      if (url.search) {\n        data['http.query'] = url.search;\n      }\n      if (url.hash) {\n        data['http.fragment'] = url.hash;\n      }\n    }\n  } catch (e) {\n    // ignore\n  }\n  return data;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Get the span kind from a span.\n * For whatever reason, this is not public API on the generic \"Span\" type,\n * so we need to check if we actually have a `SDKTraceBaseSpan` where we can fetch this from.\n * Otherwise, we fall back to `SpanKind.INTERNAL`.\n */\nfunction getSpanKind(span) {\n  if (spanHasKind(span)) {\n    return span.kind;\n  }\n  return api.SpanKind.INTERNAL;\n}\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\nconst SENTRY_TRACE_STATE_DSC = 'sentry.dsc';\nconst SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING = 'sentry.sampled_not_recording';\nconst SENTRY_TRACE_STATE_URL = 'sentry.url';\nconst SENTRY_SCOPES_CONTEXT_KEY = api.createContextKey('sentry_scopes');\nconst SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_isolation_scope');\nconst SENTRY_FORK_SET_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_set_scope');\nconst SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY = api.createContextKey('sentry_fork_set_isolation_scope');\nconst SCOPE_CONTEXT_FIELD = '_scopeContext';\n\n/**\n * Try to get the current scopes from the given OTEL context.\n * This requires a Context Manager that was wrapped with getWrappedContextManager.\n */\nfunction getScopesFromContext(context) {\n  return context.getValue(SENTRY_SCOPES_CONTEXT_KEY);\n}\n\n/**\n * Set the current scopes on an OTEL context.\n * This will return a forked context with the Propagation Context set.\n */\nfunction setScopesOnContext(context, scopes) {\n  return context.setValue(SENTRY_SCOPES_CONTEXT_KEY, scopes);\n}\n\n/**\n * Set the context on the scope so we can later look it up.\n * We need this to get the context from the scope in the `trace` functions.\n */\nfunction setContextOnScope(scope, context) {\n  core.addNonEnumerableProperty(scope, SCOPE_CONTEXT_FIELD, context);\n}\n\n/**\n * Get the context related to a scope.\n * TODO v8: Use this for the `trace` functions.\n * */\nfunction getContextFromScope(scope) {\n  return scope[SCOPE_CONTEXT_FIELD];\n}\nfunction _optionalChain$5(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n/**\n * OpenTelemetry only knows about SAMPLED or NONE decision,\n * but for us it is important to differentiate between unset and unsampled.\n *\n * Both of these are identified as `traceFlags === TracegFlags.NONE`,\n * but we additionally look at a special trace state to differentiate between them.\n */\nfunction getSamplingDecision(spanContext) {\n  const {\n    traceFlags,\n    traceState\n  } = spanContext;\n  const sampledNotRecording = traceState ? traceState.get(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING) === '1' : false;\n\n  // If trace flag is `SAMPLED`, we interpret this as sampled\n  // If it is `NONE`, it could mean either it was sampled to be not recorder, or that it was not sampled at all\n  // For us this is an important difference, sow e look at the SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING\n  // to identify which it is\n  if (traceFlags === api.TraceFlags.SAMPLED) {\n    return true;\n  }\n  if (sampledNotRecording) {\n    return false;\n  }\n\n  // Fall back to DSC as a last resort, that may also contain `sampled`...\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const dsc = dscString ? core.baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n  if (_optionalChain$5([dsc, 'optionalAccess', _ => _.sampled]) === 'true') {\n    return true;\n  }\n  if (_optionalChain$5([dsc, 'optionalAccess', _2 => _2.sampled]) === 'false') {\n    return false;\n  }\n  return undefined;\n}\n\n/**\n * Infer the op & description for a set of name, attributes and kind of a span.\n */\nfunction inferSpanData(spanName, attributes, kind) {\n  // if http.method exists, this is an http request span\n  // eslint-disable-next-line deprecation/deprecation\n  const httpMethod = attributes[ATTR_HTTP_REQUEST_METHOD] || attributes[SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod({\n      attributes,\n      name: spanName,\n      kind\n    }, httpMethod);\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const dbSystem = attributes[SEMATTRS_DB_SYSTEM];\n  const opIsCache = typeof attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] === 'string' && attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');\n\n  // If db.type exists then this is a database call span\n  // If the Redis DB is used as a cache, the span description should not be changed\n  if (dbSystem && !opIsCache) {\n    return descriptionForDbSystem({\n      attributes,\n      name: spanName\n    });\n  }\n  const customSourceOrRoute = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom' ? 'custom' : 'route';\n\n  // If rpc.service exists then this is a rpc call span.\n  // eslint-disable-next-line deprecation/deprecation\n  const rpcService = attributes[SEMATTRS_RPC_SERVICE];\n  if (rpcService) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, 'route'),\n      op: 'rpc'\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  // eslint-disable-next-line deprecation/deprecation\n  const messagingSystem = attributes[SEMATTRS_MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: 'message'\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  // eslint-disable-next-line deprecation/deprecation\n  const faasTrigger = attributes[SEMATTRS_FAAS_TRIGGER];\n  if (faasTrigger) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: faasTrigger.toString()\n    };\n  }\n  return {\n    op: undefined,\n    description: spanName,\n    source: 'custom'\n  };\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Does not overwrite the span name if the source is already set to custom to ensure\n * that user-updated span names are preserved. In this case, we only adjust the op but\n * leave span description and source unchanged.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n */\nfunction parseSpanDescription(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const name = spanHasName(span) ? span.name : '<unknown>';\n  const kind = getSpanKind(span);\n  return inferSpanData(name, attributes, kind);\n}\nfunction descriptionForDbSystem({\n  attributes,\n  name\n}) {\n  // if we already have a custom name, we don't overwrite it but only set the op\n  const userDefinedName = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  if (typeof userDefinedName === 'string') {\n    return {\n      op: 'db',\n      description: userDefinedName,\n      source: attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] || 'custom'\n    };\n  }\n\n  // if we already have the source set to custom, we don't overwrite the span description but only set the op\n  if (attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom') {\n    return {\n      op: 'db',\n      description: name,\n      source: 'custom'\n    };\n  }\n\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  // eslint-disable-next-line deprecation/deprecation\n  const statement = attributes[SEMATTRS_DB_STATEMENT];\n  const description = statement ? statement.toString() : name;\n  return {\n    op: 'db',\n    description,\n    source: 'task'\n  };\n}\n\n/** Only exported for tests. */\nfunction descriptionForHttpMethod({\n  name,\n  kind,\n  attributes\n}, httpMethod) {\n  const opParts = ['http'];\n  switch (kind) {\n    case api.SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case api.SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  // Spans for HTTP requests we have determined to be prefetch requests will have a `.prefetch` postfix in the op\n  if (attributes['sentry.http.prefetch']) {\n    opParts.push('prefetch');\n  }\n  const {\n    urlPath,\n    url,\n    query,\n    fragment,\n    hasRoute\n  } = getSanitizedUrl(attributes, kind);\n  if (!urlPath) {\n    return {\n      ...getUserUpdatedNameAndSource(name, attributes),\n      op: opParts.join('.')\n    };\n  }\n  const graphqlOperationsAttribute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION];\n\n  // Ex. GET /api/users\n  const baseDescription = `${httpMethod} ${urlPath}`;\n\n  // When the http span has a graphql operation, append it to the description\n  // We add these in the graphqlIntegration\n  const inferredDescription = graphqlOperationsAttribute ? `${baseDescription} (${getGraphqlOperationNamesFromAttribute(graphqlOperationsAttribute)})` : baseDescription;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const inferredSource = hasRoute || urlPath === '/' ? 'route' : 'url';\n  const data = {};\n  if (url) {\n    data.url = url;\n  }\n  if (query) {\n    data['http.query'] = query;\n  }\n  if (fragment) {\n    data['http.fragment'] = fragment;\n  }\n\n  // If the span kind is neither client nor server, we use the original name\n  // this infers that somebody manually started this span, in which case we don't want to overwrite the name\n  const isClientOrServerKind = kind === api.SpanKind.CLIENT || kind === api.SpanKind.SERVER;\n\n  // If the span is an auto-span (=it comes from one of our instrumentations),\n  // we always want to infer the name\n  // this is necessary because some of the auto-instrumentation we use uses kind=INTERNAL\n  const origin = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual';\n  const isManualSpan = !`${origin}`.startsWith('auto');\n\n  // If users (or in very rare occasions we) set the source to custom, we don't overwrite the name\n  const alreadyHasCustomSource = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom';\n  const customSpanName = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  const useInferredDescription = !alreadyHasCustomSource && customSpanName == null && (isClientOrServerKind || !isManualSpan);\n  const {\n    description,\n    source\n  } = useInferredDescription ? {\n    description: inferredDescription,\n    source: inferredSource\n  } : getUserUpdatedNameAndSource(name, attributes);\n  return {\n    op: opParts.join('.'),\n    description,\n    source,\n    data\n  };\n}\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n  return `${attr}`;\n}\n\n/** Exported for tests only */\nfunction getSanitizedUrl(attributes, kind) {\n  // This is the relative path of the URL, e.g. /sub\n  // eslint-disable-next-line deprecation/deprecation\n  const httpTarget = attributes[SEMATTRS_HTTP_TARGET];\n  // This is the full URL, including host & query params etc., e.g. https://example.com/sub?foo=bar\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[SEMATTRS_HTTP_URL] || attributes[ATTR_URL_FULL];\n  // This is the normalized route name - may not always be available!\n  const httpRoute = attributes[ATTR_HTTP_ROUTE];\n  const parsedUrl = typeof httpUrl === 'string' ? core.parseUrl(httpUrl) : undefined;\n  const url = parsedUrl ? core.getSanitizedUrlString(parsedUrl) : undefined;\n  const query = parsedUrl && parsedUrl.search ? parsedUrl.search : undefined;\n  const fragment = parsedUrl && parsedUrl.hash ? parsedUrl.hash : undefined;\n  if (typeof httpRoute === 'string') {\n    return {\n      urlPath: httpRoute,\n      url,\n      query,\n      fragment,\n      hasRoute: true\n    };\n  }\n  if (kind === api.SpanKind.SERVER && typeof httpTarget === 'string') {\n    return {\n      urlPath: core.stripUrlQueryAndFragment(httpTarget),\n      url,\n      query,\n      fragment,\n      hasRoute: false\n    };\n  }\n  if (parsedUrl) {\n    return {\n      urlPath: url,\n      url,\n      query,\n      fragment,\n      hasRoute: false\n    };\n  }\n\n  // fall back to target even for client spans, if no URL is present\n  if (typeof httpTarget === 'string') {\n    return {\n      urlPath: core.stripUrlQueryAndFragment(httpTarget),\n      url,\n      query,\n      fragment,\n      hasRoute: false\n    };\n  }\n  return {\n    urlPath: undefined,\n    url,\n    query,\n    fragment,\n    hasRoute: false\n  };\n}\n\n/**\n * Because Otel instrumentation sometimes mutates span names via `span.updateName`, the only way\n * to ensure that a user-set span name is preserved is to store it as a tmp attribute on the span.\n * We delete this attribute once we're done with it when preparing the event envelope.\n *\n * This temp attribute always takes precedence over the original name.\n *\n * We also need to take care of setting the correct source. Users can always update the source\n * after updating the name, so we need to respect that.\n *\n * @internal exported only for testing\n */\nfunction getUserUpdatedNameAndSource(originalName, attributes, fallbackSource = 'custom') {\n  const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] || fallbackSource;\n  const description = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  if (description && typeof description === 'string') {\n    return {\n      description,\n      source\n    };\n  }\n  return {\n    description: originalName,\n    source\n  };\n}\n\n/**\n * Setup a DSC handler on the passed client,\n * ensuring that the transaction name is inferred from the span correctly.\n */\nfunction enhanceDscWithOpenTelemetryRootSpanName(client) {\n  client.on('createDsc', (dsc, rootSpan) => {\n    if (!rootSpan) {\n      return;\n    }\n\n    // We want to overwrite the transaction on the DSC that is created by default in core\n    // The reason for this is that we want to infer the span name, not use the initial one\n    // Otherwise, we'll get names like \"GET\" instead of e.g. \"GET /foo\"\n    // `parseSpanDescription` takes the attributes of the span into account for the name\n    // This mutates the passed-in DSC\n\n    const jsonSpan = core.spanToJSON(rootSpan);\n    const attributes = jsonSpan.data || {};\n    const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n    const {\n      description\n    } = spanHasName(rootSpan) ? parseSpanDescription(rootSpan) : {\n      description: undefined\n    };\n    if (source !== 'url' && description) {\n      dsc.transaction = description;\n    }\n\n    // Also ensure sampling decision is correctly inferred\n    // In core, we use `spanIsSampled`, which just looks at the trace flags\n    // but in OTEL, we use a slightly more complex logic to be able to differntiate between unsampled and deferred sampling\n    if (core.hasTracingEnabled()) {\n      const sampled = getSamplingDecision(rootSpan.spanContext());\n      dsc.sampled = sampled == undefined ? undefined : String(sampled);\n    }\n  });\n}\n\n/**\n * Generate a TraceState for the given data.\n */\nfunction makeTraceState({\n  dsc,\n  sampled\n}) {\n  // We store the DSC as OTEL trace state on the span context\n  const dscString = dsc ? core.dynamicSamplingContextToSentryBaggageHeader(dsc) : undefined;\n  const traceStateBase = new TraceState();\n  const traceStateWithDsc = dscString ? traceStateBase.set(SENTRY_TRACE_STATE_DSC, dscString) : traceStateBase;\n\n  // We also specifically want to store if this is sampled to be not recording,\n  // or unsampled (=could be either sampled or not)\n  return sampled === false ? traceStateWithDsc.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') : traceStateWithDsc;\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  return api.trace.getActiveSpan();\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD$1 = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nconst setupElements = new Set();\n\n/** Get all the OpenTelemetry elements that have been set up. */\nfunction openTelemetrySetupCheck() {\n  return Array.from(setupElements);\n}\n\n/** Mark an OpenTelemetry element as setup. */\nfunction setIsSetup(element) {\n  setupElements.add(element);\n}\nfunction _optionalChain$4(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n/** Get the Sentry propagation context from a span context. */\nfunction getPropagationContextFromSpan(span) {\n  const spanContext = span.spanContext();\n  const {\n    traceId,\n    spanId,\n    traceState\n  } = spanContext;\n\n  // When we have a dsc trace state, it means this came from the incoming trace\n  // Then this takes presedence over the root span\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const traceStateDsc = dscString ? core.baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n  const parentSpanId = spanHasParentId(span) ? span.parentSpanId : undefined;\n  const sampled = getSamplingDecision(spanContext);\n\n  // No trace state? --> Take DSC from root span\n  const dsc = traceStateDsc || core.getDynamicSamplingContextFromSpan(core.getRootSpan(span));\n  return {\n    traceId,\n    spanId,\n    sampled,\n    parentSpanId,\n    dsc\n  };\n}\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nclass SentryPropagator extends W3CBaggagePropagator {\n  /** A map of URLs that have already been checked for if they match tracePropagationTargets. */\n\n  constructor() {\n    super();\n    setIsSetup('SentryPropagator');\n\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    this._urlMatchesTargetsMap = new core.LRUMap(100);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  inject(context, carrier, setter) {\n    if (isTracingSuppressed(context)) {\n      DEBUG_BUILD$1 && core.logger.log('[Tracing] Not injecting trace data for url because tracing is suppressed.');\n      return;\n    }\n    const activeSpan = api.trace.getSpan(context);\n    const url = activeSpan && getCurrentURL(activeSpan);\n    const tracePropagationTargets = _optionalChain$4([core.getClient, 'call', _ => _(), 'optionalAccess', _2 => _2.getOptions, 'call', _3 => _3(), 'optionalAccess', _4 => _4.tracePropagationTargets]);\n    if (!shouldPropagateTraceForUrl(url, tracePropagationTargets, this._urlMatchesTargetsMap)) {\n      DEBUG_BUILD$1 && core.logger.log('[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:', url);\n      return;\n    }\n    const existingBaggageHeader = getExistingBaggage(carrier);\n    let baggage = api.propagation.getBaggage(context) || api.propagation.createBaggage({});\n    const {\n      dynamicSamplingContext,\n      traceId,\n      spanId,\n      sampled\n    } = getInjectionData(context);\n    if (existingBaggageHeader) {\n      const baggageEntries = core.parseBaggageHeader(existingBaggageHeader);\n      if (baggageEntries) {\n        Object.entries(baggageEntries).forEach(([key, value]) => {\n          baggage = baggage.setEntry(key, {\n            value\n          });\n        });\n      }\n    }\n    if (dynamicSamplingContext) {\n      baggage = Object.entries(dynamicSamplingContext).reduce((b, [dscKey, dscValue]) => {\n        if (dscValue) {\n          return b.setEntry(`${core.SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, {\n            value: dscValue\n          });\n        }\n        return b;\n      }, baggage);\n    }\n\n    // We also want to avoid setting the default OTEL trace ID, if we get that for whatever reason\n    if (traceId && traceId !== api.INVALID_TRACEID) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, core.generateSentryTraceHeader(traceId, spanId, sampled));\n    }\n    super.inject(api.propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  extract(context, carrier, getter) {\n    const maybeSentryTraceHeader = getter.get(carrier, SENTRY_TRACE_HEADER);\n    const baggage = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n    const sentryTrace = maybeSentryTraceHeader ? Array.isArray(maybeSentryTraceHeader) ? maybeSentryTraceHeader[0] : maybeSentryTraceHeader : undefined;\n\n    // Add remote parent span context\n    // If there is no incoming trace, this will return the context as-is\n    return ensureScopesOnContext(getContextWithRemoteActiveSpan(context, {\n      sentryTrace,\n      baggage\n    }));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  fields() {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n}\nconst NOT_PROPAGATED_MESSAGE = '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:';\n\n/**\n * Check if a given URL should be propagated to or not.\n * If no url is defined, or no trace propagation targets are defined, this will always return `true`.\n * You can also optionally provide a decision map, to cache decisions and avoid repeated regex lookups.\n */\nfunction shouldPropagateTraceForUrl(url, tracePropagationTargets, decisionMap) {\n  if (typeof url !== 'string' || !tracePropagationTargets) {\n    return true;\n  }\n  const cachedDecision = _optionalChain$4([decisionMap, 'optionalAccess', _5 => _5.get, 'call', _6 => _6(url)]);\n  if (cachedDecision !== undefined) {\n    DEBUG_BUILD$1 && !cachedDecision && core.logger.log(NOT_PROPAGATED_MESSAGE, url);\n    return cachedDecision;\n  }\n  const decision = core.stringMatchesSomePattern(url, tracePropagationTargets);\n  _optionalChain$4([decisionMap, 'optionalAccess', _7 => _7.set, 'call', _8 => _8(url, decision)]);\n  DEBUG_BUILD$1 && !decision && core.logger.log(NOT_PROPAGATED_MESSAGE, url);\n  return decision;\n}\n\n/**\n * Get propagation injection data for the given context.\n */\nfunction getInjectionData(context) {\n  const span = api.trace.getSpan(context);\n\n  // If we have a remote span, the spanId should be considered as the parentSpanId, not spanId itself\n  // Instead, we use a virtual (generated) spanId for propagation\n  if (span && span.spanContext().isRemote) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = core.getDynamicSamplingContextFromSpan(span);\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      // Because this is a remote span, we do not want to propagate this directly\n      // As otherwise things may be attached \"directly\" to an unrelated span\n      spanId: core.generateSpanId(),\n      sampled: getSamplingDecision(spanContext)\n    };\n  }\n\n  // If we have a local span, we just use this\n  if (span) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = core.getDynamicSamplingContextFromSpan(span);\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      sampled: getSamplingDecision(spanContext)\n    };\n  }\n\n  // Else we try to use the propagation context from the scope\n  // The only scenario where this should happen is when we neither have a span, nor an incoming trace\n  const scope = _optionalChain$4([getScopesFromContext, 'call', _9 => _9(context), 'optionalAccess', _10 => _10.scope]) || core.getCurrentScope();\n  const client = core.getClient();\n  const propagationContext = scope.getPropagationContext();\n  const dynamicSamplingContext = client ? core.getDynamicSamplingContextFromScope(client, scope) : undefined;\n  return {\n    dynamicSamplingContext,\n    traceId: propagationContext.traceId,\n    // TODO(v9): Use generateSpanId() instead\n    // eslint-disable-next-line deprecation/deprecation\n    spanId: propagationContext.spanId,\n    sampled: propagationContext.sampled\n  };\n}\nfunction getContextWithRemoteActiveSpan(ctx, {\n  sentryTrace,\n  baggage\n}) {\n  const propagationContext = core.propagationContextFromHeaders(sentryTrace, baggage);\n  const {\n    traceId,\n    parentSpanId,\n    sampled,\n    dsc\n  } = propagationContext;\n\n  // We only want to set the virtual span if we are continuing a concrete trace\n  // Otherwise, we ignore the incoming trace here, e.g. if we have no trace headers\n  if (!parentSpanId) {\n    return ctx;\n  }\n  const spanContext = generateRemoteSpanContext({\n    traceId,\n    spanId: parentSpanId,\n    sampled,\n    dsc\n  });\n  return api.trace.setSpanContext(ctx, spanContext);\n}\n\n/**\n * Takes trace strings and propagates them as a remote active span.\n * This should be used in addition to `continueTrace` in OTEL-powered environments.\n */\nfunction continueTraceAsRemoteSpan(ctx, options, callback) {\n  const ctxWithSpanContext = ensureScopesOnContext(getContextWithRemoteActiveSpan(ctx, options));\n  return api.context.with(ctxWithSpanContext, callback);\n}\nfunction ensureScopesOnContext(ctx) {\n  // If there are no scopes yet on the context, ensure we have them\n  const scopes = getScopesFromContext(ctx);\n  const newScopes = {\n    // If we have no scope here, this is most likely either the root context or a context manually derived from it\n    // In this case, we want to fork the current scope, to ensure we do not pollute the root scope\n    scope: scopes ? scopes.scope : core.getCurrentScope().clone(),\n    isolationScope: scopes ? scopes.isolationScope : core.getIsolationScope()\n  };\n  return setScopesOnContext(ctx, newScopes);\n}\n\n/** Try to get the existing baggage header so we can merge this in. */\nfunction getExistingBaggage(carrier) {\n  try {\n    const baggage = carrier[SENTRY_BAGGAGE_HEADER];\n    return Array.isArray(baggage) ? baggage.join(',') : baggage;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * It is pretty tricky to get access to the outgoing request URL of a request in the propagator.\n * As we only have access to the context of the span to be sent and the carrier (=headers),\n * but the span may be unsampled and thus have no attributes.\n *\n * So we use the following logic:\n * 1. If we have an active span, we check if it has a URL attribute.\n * 2. Else, if the active span has no URL attribute (e.g. it is unsampled), we check a special trace state (which we set in our sampler).\n */\nfunction getCurrentURL(span) {\n  const spanData = core.spanToJSON(span).data;\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const urlAttribute = _optionalChain$4([spanData, 'optionalAccess', _11 => _11[SEMATTRS_HTTP_URL]]) || _optionalChain$4([spanData, 'optionalAccess', _12 => _12[ATTR_URL_FULL]]);\n  if (urlAttribute) {\n    return urlAttribute;\n  }\n\n  // Also look at the traceState, which we may set in the sampler even for unsampled spans\n  const urlTraceState = _optionalChain$4([span, 'access', _13 => _13.spanContext, 'call', _14 => _14(), 'access', _15 => _15.traceState, 'optionalAccess', _16 => _16.get, 'call', _17 => _17(SENTRY_TRACE_STATE_URL)]);\n  if (urlTraceState) {\n    return urlTraceState;\n  }\n  return undefined;\n}\nfunction generateRemoteSpanContext({\n  spanId,\n  traceId,\n  sampled,\n  dsc\n}) {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    dsc,\n    sampled\n  });\n  const spanContext = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState\n  };\n  return spanContext;\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const tracer = getTracer();\n  const {\n    name,\n    parentSpan: customParentSpan\n  } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n    const spanOptions = getSpanOptions(options);\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return core.handleCallbackErrors(() => callback(span), () => {\n        // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n        if (core.spanToJSON(span).status === undefined) {\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR\n          });\n        }\n      }, () => span.end());\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(options, callback) {\n  const tracer = getTracer();\n  const {\n    name,\n    parentSpan: customParentSpan\n  } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n    const spanOptions = getSpanOptions(options);\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return core.handleCallbackErrors(() => callback(span, () => span.end()), () => {\n        // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n        if (core.spanToJSON(span).status === undefined) {\n          span.setStatus({\n            code: api.SpanStatusCode.ERROR\n          });\n        }\n      });\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const tracer = getTracer();\n  const {\n    name,\n    parentSpan: customParentSpan\n  } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !api.trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n    const spanOptions = getSpanOptions(options);\n    const span = tracer.startSpan(name, spanOptions, ctx);\n    return span;\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will be root spans.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const newContextWithActiveSpan = span ? api.trace.setSpan(api.context.active(), span) : api.trace.deleteSpan(api.context.active());\n  return api.context.with(newContextWithActiveSpan, () => callback(core.getCurrentScope()));\n}\nfunction getTracer() {\n  const client = core.getClient();\n  return client && client.tracer || api.trace.getTracer('@sentry/opentelemetry', core.SDK_VERSION);\n}\nfunction getSpanOptions(options) {\n  const {\n    startTime,\n    attributes,\n    kind,\n    op\n  } = options;\n\n  // OTEL expects timestamps in ms, not seconds\n  const fixedStartTime = typeof startTime === 'number' ? ensureTimestampInMilliseconds(startTime) : startTime;\n  return {\n    attributes: op ? {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n      ...attributes\n    } : attributes,\n    kind,\n    startTime: fixedStartTime\n  };\n}\nfunction ensureTimestampInMilliseconds(timestamp) {\n  const isMs = timestamp < 9999999999;\n  return isMs ? timestamp * 1000 : timestamp;\n}\nfunction getContext(scope, forceTransaction) {\n  const ctx = getContextForScope(scope);\n  const parentSpan = api.trace.getSpan(ctx);\n\n  // In the case that we have no parent span, we start a new trace\n  // Note that if we continue a trace, we'll always have a remote parent span here anyhow\n  if (!parentSpan) {\n    return ctx;\n  }\n\n  // If we don't want to force a transaction, and we have a parent span, all good, we just return as-is!\n  if (!forceTransaction) {\n    return ctx;\n  }\n\n  // Else, if we do have a parent span but want to force a transaction, we have to simulate a \"root\" context\n\n  // Else, we need to do two things:\n  // 1. Unset the parent span from the context, so we'll create a new root span\n  // 2. Ensure the propagation context is correct, so we'll continue from the parent span\n  const ctxWithoutSpan = api.trace.deleteSpan(ctx);\n  const {\n    spanId,\n    traceId\n  } = parentSpan.spanContext();\n  const sampled = getSamplingDecision(parentSpan.spanContext());\n\n  // In this case, when we are forcing a transaction, we want to treat this like continuing an incoming trace\n  // so we set the traceState according to the root span\n  const rootSpan = core.getRootSpan(parentSpan);\n  const dsc = core.getDynamicSamplingContextFromSpan(rootSpan);\n  const traceState = makeTraceState({\n    dsc,\n    sampled\n  });\n  const spanOptions = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE,\n    traceState\n  };\n  const ctxWithSpanContext = api.trace.setSpanContext(ctxWithoutSpan, spanOptions);\n  return ctxWithSpanContext;\n}\nfunction getContextForScope(scope) {\n  if (scope) {\n    const ctx = getContextFromScope(scope);\n    if (ctx) {\n      return ctx;\n    }\n  }\n  return api.context.active();\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n *\n * This is a custom version of `continueTrace` that is used in OTEL-powered environments.\n * It propagates the trace as a remote span, in addition to setting it on the propagation context.\n */\nfunction continueTrace(options, callback) {\n  return continueTraceAsRemoteSpan(api.context.active(), options, callback);\n}\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined ? callback => {\n    return withActiveSpan(parentSpan, callback);\n  } : callback => callback();\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const ctx = suppressTracing$1(api.context.active());\n  return api.context.with(ctx, callback);\n}\n\n/** Ensure the `trace` context is set on all events. */\nfunction setupEventContextTrace(client) {\n  client.on('preprocessEvent', event => {\n    const span = getActiveSpan();\n    // For transaction events, this is handled separately\n    // Because the active span may not be the span that is actually the transaction event\n    if (!span || event.type === 'transaction') {\n      return;\n    }\n\n    // If event has already set `trace` context, use that one.\n    event.contexts = {\n      trace: core.spanToTraceContext(span),\n      ...event.contexts\n    };\n    const rootSpan = core.getRootSpan(span);\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: core.getDynamicSamplingContextFromSpan(rootSpan),\n      ...event.sdkProcessingMetadata\n    };\n    return event;\n  });\n}\n\n/**\n * Otel-specific implementation of `getTraceData`.\n * @see `@sentry/core` version of `getTraceData` for more information\n */\nfunction getTraceData({\n  span\n} = {}) {\n  let ctx = api.context.active();\n  if (span) {\n    const {\n      scope\n    } = core.getCapturedScopesOnSpan(span);\n    // fall back to current context if for whatever reason we can't find the one of the span\n    ctx = scope && getContextFromScope(scope) || api.trace.setSpan(api.context.active(), span);\n  }\n  const {\n    traceId,\n    spanId,\n    sampled,\n    dynamicSamplingContext\n  } = getInjectionData(ctx);\n  return {\n    'sentry-trace': core.generateSentryTraceHeader(traceId, spanId, sampled),\n    baggage: core.dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext)\n  };\n}\n\n/**\n * Sets the async context strategy to use follow the OTEL context under the hood.\n * We handle forking a hub inside of our custom OTEL Context Manager (./otelContextManager.ts)\n */\nfunction setOpenTelemetryContextAsyncContextStrategy() {\n  function getScopes() {\n    const ctx = api.context.active();\n    const scopes = getScopesFromContext(ctx);\n    if (scopes) {\n      return scopes;\n    }\n\n    // fallback behavior:\n    // if, for whatever reason, we can't find scopes on the context here, we have to fix this somehow\n    return {\n      scope: core.getDefaultCurrentScope(),\n      isolationScope: core.getDefaultIsolationScope()\n    };\n  }\n  function withScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    // as by default, we don't want to fork this, unless triggered explicitly by `withScope`\n    return api.context.with(ctx, () => {\n      return callback(getCurrentScope());\n    });\n  }\n  function withSetScope(scope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_SET_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which picks up this scope as the current scope\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY, scope), () => {\n      return callback(scope);\n    });\n  }\n  function withIsolationScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY, true), () => {\n      return callback(getIsolationScope());\n    });\n  }\n  function withSetIsolationScope(isolationScope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY, isolationScope), () => {\n      return callback(getIsolationScope());\n    });\n  }\n  function getCurrentScope() {\n    return getScopes().scope;\n  }\n  function getIsolationScope() {\n    return getScopes().isolationScope;\n  }\n  core.setAsyncContextStrategy({\n    withScope,\n    withSetScope,\n    withSetIsolationScope,\n    withIsolationScope,\n    getCurrentScope,\n    getIsolationScope,\n    startSpan,\n    startSpanManual,\n    startInactiveSpan,\n    getActiveSpan,\n    suppressTracing,\n    getTraceData,\n    continueTrace,\n    // The types here don't fully align, because our own `Span` type is narrower\n    // than the OTEL one - but this is OK for here, as we now we'll only have OTEL spans passed around\n    withActiveSpan: withActiveSpan\n  });\n}\nfunction _optionalChain$3(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n/**\n * Wrap an OpenTelemetry ContextManager in a way that ensures the context is kept in sync with the Sentry Scope.\n *\n * Usage:\n * import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\n * const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n * const contextManager = new SentryContextManager();\n */\nfunction wrapContextManagerClass(ContextManagerClass) {\n  /**\n   * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n   * It ensures that we create new scopes per context, so that the OTEL Context & the Sentry Scope are always in sync.\n   *\n   * Note that we currently only support AsyncHooks with this,\n   * but since this should work for Node 14+ anyhow that should be good enough.\n   */\n\n  // @ts-expect-error TS does not like this, but we know this is fine\n  class SentryContextManager extends ContextManagerClass {\n    constructor(...args) {\n      super(...args);\n      setIsSetup('SentryContextManager');\n    }\n    /**\n     * Overwrite with() of the original AsyncLocalStorageContextManager\n     * to ensure we also create new scopes per context.\n     */\n    with(context, fn, thisArg, ...args) {\n      const currentScopes = getScopesFromContext(context);\n      const currentScope = _optionalChain$3([currentScopes, 'optionalAccess', _ => _.scope]) || core.getCurrentScope();\n      const currentIsolationScope = _optionalChain$3([currentScopes, 'optionalAccess', _2 => _2.isolationScope]) || core.getIsolationScope();\n      const shouldForkIsolationScope = context.getValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY) === true;\n      const scope = context.getValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY);\n      const isolationScope = context.getValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n      const newCurrentScope = scope || currentScope.clone();\n      const newIsolationScope = isolationScope || (shouldForkIsolationScope ? currentIsolationScope.clone() : currentIsolationScope);\n      const scopes = {\n        scope: newCurrentScope,\n        isolationScope: newIsolationScope\n      };\n      const ctx1 = setScopesOnContext(context, scopes);\n\n      // Remove the unneeded values again\n      const ctx2 = ctx1.deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY).deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY).deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n      setContextOnScope(newCurrentScope, ctx2);\n      return super.with(ctx2, fn, thisArg, ...args);\n    }\n  }\n  return SentryContextManager;\n}\n\n/**\n * This function runs through a list of OTEL Spans, and wraps them in an `SpanNode`\n * where each node holds a reference to their parent node.\n */\nfunction groupSpansWithParents(spans) {\n  const nodeMap = new Map();\n  for (const span of spans) {\n    createOrUpdateSpanNodeAndRefs(nodeMap, span);\n  }\n  return Array.from(nodeMap, function ([_id, spanNode]) {\n    return spanNode;\n  });\n}\n\n/**\n * This returns the _local_ parent ID - `parentId` on the span may point to a remote span.\n */\nfunction getLocalParentId(span) {\n  const parentIsRemote = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE] === true;\n  // If the parentId is the trace parent ID, we pretend it's undefined\n  // As this means the parent exists somewhere else\n  return !parentIsRemote ? span.parentSpanId : undefined;\n}\nfunction createOrUpdateSpanNodeAndRefs(nodeMap, span) {\n  const id = span.spanContext().spanId;\n  const parentId = getLocalParentId(span);\n  if (!parentId) {\n    createOrUpdateNode(nodeMap, {\n      id,\n      span,\n      children: []\n    });\n    return;\n  }\n\n  // Else make sure to create parent node as well\n  // Note that the parent may not know it's parent _yet_, this may be updated in a later pass\n  const parentNode = createOrGetParentNode(nodeMap, parentId);\n  const node = createOrUpdateNode(nodeMap, {\n    id,\n    span,\n    parentNode,\n    children: []\n  });\n  parentNode.children.push(node);\n}\nfunction createOrGetParentNode(nodeMap, id) {\n  const existing = nodeMap.get(id);\n  if (existing) {\n    return existing;\n  }\n  return createOrUpdateNode(nodeMap, {\n    id,\n    children: []\n  });\n}\nfunction createOrUpdateNode(nodeMap, spanNode) {\n  const existing = nodeMap.get(spanNode.id);\n\n  // If span is already set, nothing to do here\n  if (existing && existing.span) {\n    return existing;\n  }\n\n  // If it exists but span is not set yet, we update it\n  if (existing && !existing.span) {\n    existing.span = spanNode.span;\n    existing.parentNode = spanNode.parentNode;\n    return existing;\n  }\n\n  // Else, we create a new one...\n  nodeMap.set(spanNode.id, spanNode);\n  return spanNode;\n}\n\n// canonicalCodesGrpcMap maps some GRPC codes to Sentry's span statuses. See description in grpc documentation.\nconst canonicalGrpcErrorCodesMap = {\n  '1': 'cancelled',\n  '2': 'unknown_error',\n  '3': 'invalid_argument',\n  '4': 'deadline_exceeded',\n  '5': 'not_found',\n  '6': 'already_exists',\n  '7': 'permission_denied',\n  '8': 'resource_exhausted',\n  '9': 'failed_precondition',\n  '10': 'aborted',\n  '11': 'out_of_range',\n  '12': 'unimplemented',\n  '13': 'internal_error',\n  '14': 'unavailable',\n  '15': 'data_loss',\n  '16': 'unauthenticated'\n};\nconst isStatusErrorMessageValid = message => {\n  return Object.values(canonicalGrpcErrorCodesMap).includes(message);\n};\n\n/**\n * Get a Sentry span status from an otel span.\n */\nfunction mapStatus(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const status = spanHasStatus(span) ? span.status : undefined;\n  if (status) {\n    // Since span status OK is not set by default, we give it priority: https://opentelemetry.io/docs/concepts/signals/traces/#span-status\n    if (status.code === api.SpanStatusCode.OK) {\n      return {\n        code: core.SPAN_STATUS_OK\n      };\n      // If the span is already marked as erroneous we return that exact status\n    } else if (status.code === api.SpanStatusCode.ERROR) {\n      if (typeof status.message === 'undefined') {\n        const inferredStatus = inferStatusFromAttributes(attributes);\n        if (inferredStatus) {\n          return inferredStatus;\n        }\n      }\n      if (status.message && isStatusErrorMessageValid(status.message)) {\n        return {\n          code: core.SPAN_STATUS_ERROR,\n          message: status.message\n        };\n      } else {\n        return {\n          code: core.SPAN_STATUS_ERROR,\n          message: 'unknown_error'\n        };\n      }\n    }\n  }\n\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n  const inferredStatus = inferStatusFromAttributes(attributes);\n  if (inferredStatus) {\n    return inferredStatus;\n  }\n\n  // We default to setting the spans status to ok.\n  if (status && status.code === api.SpanStatusCode.UNSET) {\n    return {\n      code: core.SPAN_STATUS_OK\n    };\n  } else {\n    return {\n      code: core.SPAN_STATUS_ERROR,\n      message: 'unknown_error'\n    };\n  }\n}\nfunction inferStatusFromAttributes(attributes) {\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n\n  // eslint-disable-next-line deprecation/deprecation\n  const httpCodeAttribute = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE] || attributes[SEMATTRS_HTTP_STATUS_CODE];\n  // eslint-disable-next-line deprecation/deprecation\n  const grpcCodeAttribute = attributes[SEMATTRS_RPC_GRPC_STATUS_CODE];\n  const numberHttpCode = typeof httpCodeAttribute === 'number' ? httpCodeAttribute : typeof httpCodeAttribute === 'string' ? parseInt(httpCodeAttribute) : undefined;\n  if (typeof numberHttpCode === 'number') {\n    return core.getSpanStatusFromHttpCode(numberHttpCode);\n  }\n  if (typeof grpcCodeAttribute === 'string') {\n    return {\n      code: core.SPAN_STATUS_ERROR,\n      message: canonicalGrpcErrorCodesMap[grpcCodeAttribute] || 'unknown_error'\n    };\n  }\n  return undefined;\n}\nfunction _optionalChain$2(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\nconst MAX_SPAN_COUNT = 1000;\nconst DEFAULT_TIMEOUT = 300; // 5 min\n\n/**\n * A Sentry-specific exporter that converts OpenTelemetry Spans to Sentry Spans & Transactions.\n */\nclass SentrySpanExporter {\n  /*\n   * A quick explanation on the buckets: We do bucketing of finished spans for efficiency. This span exporter is\n   * accumulating spans until a root span is encountered and then it flushes all the spans that are descendants of that\n   * root span. Because it is totally in the realm of possibilities that root spans are never finished, and we don't\n   * want to accumulate spans indefinitely in memory, we need to periodically evacuate spans. Naively we could simply\n   * store the spans in an array and each time a new span comes in we could iterate through the entire array and\n   * evacuate all spans that have an end-timestamp that is older than our limit. This could get quite expensive because\n   * we would have to iterate a potentially large number of spans every time we evacuate. We want to avoid these large\n   * bursts of computation.\n   *\n   * Instead we go for a bucketing approach and put spans into buckets, based on what second\n   * (modulo the time limit) the span was put into the exporter. With buckets, when we decide to evacuate, we can\n   * iterate through the bucket entries instead, which have an upper bound of items, making the evacuation much more\n   * efficient. Cleaning up also becomes much more efficient since it simply involves de-referencing a bucket within the\n   * bucket array, and letting garbage collection take care of the rest.\n   */\n\n  constructor(options) {\n    this._finishedSpanBucketSize = _optionalChain$2([options, 'optionalAccess', _ => _.timeout]) || DEFAULT_TIMEOUT;\n    this._finishedSpanBuckets = new Array(this._finishedSpanBucketSize).fill(undefined);\n    this._lastCleanupTimestampInS = Math.floor(Date.now() / 1000);\n    this._spansToBucketEntry = new WeakMap();\n  }\n\n  /** Export a single span. */\n  export(span) {\n    const currentTimestampInS = Math.floor(Date.now() / 1000);\n    if (this._lastCleanupTimestampInS !== currentTimestampInS) {\n      let droppedSpanCount = 0;\n      this._finishedSpanBuckets.forEach((bucket, i) => {\n        if (bucket && bucket.timestampInS <= currentTimestampInS - this._finishedSpanBucketSize) {\n          droppedSpanCount += bucket.spans.size;\n          this._finishedSpanBuckets[i] = undefined;\n        }\n      });\n      if (droppedSpanCount > 0) {\n        DEBUG_BUILD$1 && core.logger.log(`SpanExporter dropped ${droppedSpanCount} spans because they were pending for more than ${this._finishedSpanBucketSize} seconds.`);\n      }\n      this._lastCleanupTimestampInS = currentTimestampInS;\n    }\n    const currentBucketIndex = currentTimestampInS % this._finishedSpanBucketSize;\n    const currentBucket = this._finishedSpanBuckets[currentBucketIndex] || {\n      timestampInS: currentTimestampInS,\n      spans: new Set()\n    };\n    this._finishedSpanBuckets[currentBucketIndex] = currentBucket;\n    currentBucket.spans.add(span);\n    this._spansToBucketEntry.set(span, currentBucket);\n\n    // If the span doesn't have a local parent ID (it's a root span), we're gonna flush all the ended spans\n    if (!getLocalParentId(span)) {\n      this._clearTimeout();\n\n      // If we got a parent span, we try to send the span tree\n      // Wait a tick for this, to ensure we avoid race conditions\n      this._flushTimeout = setTimeout(() => {\n        this.flush();\n      }, 1);\n    }\n  }\n\n  /** Try to flush any pending spans immediately. */\n  flush() {\n    this._clearTimeout();\n    const finishedSpans = [];\n    this._finishedSpanBuckets.forEach(bucket => {\n      if (bucket) {\n        finishedSpans.push(...bucket.spans);\n      }\n    });\n    const sentSpans = maybeSend(finishedSpans);\n    const sentSpanCount = sentSpans.size;\n    const remainingOpenSpanCount = finishedSpans.length - sentSpanCount;\n    DEBUG_BUILD$1 && core.logger.log(`SpanExporter exported ${sentSpanCount} spans, ${remainingOpenSpanCount} spans are waiting for their parent spans to finish`);\n    sentSpans.forEach(span => {\n      const bucketEntry = this._spansToBucketEntry.get(span);\n      if (bucketEntry) {\n        bucketEntry.spans.delete(span);\n      }\n    });\n  }\n\n  /** Clear the exporter. */\n  clear() {\n    this._finishedSpanBuckets = this._finishedSpanBuckets.fill(undefined);\n    this._clearTimeout();\n  }\n\n  /** Clear the flush timeout. */\n  _clearTimeout() {\n    if (this._flushTimeout) {\n      clearTimeout(this._flushTimeout);\n      this._flushTimeout = undefined;\n    }\n  }\n}\n\n/**\n * Send the given spans, but only if they are part of a finished transaction.\n *\n * Returns the sent spans.\n * Spans remain unsent when their parent span is not yet finished.\n * This will happen regularly, as child spans are generally finished before their parents.\n * But it _could_ also happen because, for whatever reason, a parent span was lost.\n * In this case, we'll eventually need to clean this up.\n */\nfunction maybeSend(spans) {\n  const grouped = groupSpansWithParents(spans);\n  const sentSpans = new Set();\n  const rootNodes = getCompletedRootNodes(grouped);\n  rootNodes.forEach(root => {\n    const span = root.span;\n    sentSpans.add(span);\n    const transactionEvent = createTransactionForOtelSpan(span);\n\n    // We'll recursively add all the child spans to this array\n    const spans = transactionEvent.spans || [];\n    root.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n\n    // spans.sort() mutates the array, but we do not use this anymore after this point\n    // so we can safely mutate it here\n    transactionEvent.spans = spans.length > MAX_SPAN_COUNT ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT) : spans;\n    const measurements = core.timedEventsToMeasurements(span.events);\n    if (measurements) {\n      transactionEvent.measurements = measurements;\n    }\n    core.captureEvent(transactionEvent);\n  });\n  return sentSpans;\n}\nfunction nodeIsCompletedRootNode(node) {\n  return !!node.span && !node.parentNode;\n}\nfunction getCompletedRootNodes(nodes) {\n  return nodes.filter(nodeIsCompletedRootNode);\n}\nfunction parseSpan(span) {\n  const attributes = span.attributes;\n  const origin = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN];\n  const op = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP];\n  const source = attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n  return {\n    origin,\n    op,\n    source\n  };\n}\n\n/** Exported only for tests. */\nfunction createTransactionForOtelSpan(span) {\n  const {\n    op,\n    description,\n    data,\n    origin = 'manual',\n    source\n  } = getSpanData(span);\n  const capturedSpanScopes = core.getCapturedScopesOnSpan(span);\n  const sampleRate = span.attributes[core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  const attributes = core.dropUndefinedKeys({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    ...data,\n    ...removeSentryAttributes(span.attributes)\n  });\n  const {\n    traceId: trace_id,\n    spanId: span_id\n  } = span.spanContext();\n\n  // If parentSpanIdFromTraceState is defined at all, we want it to take precedence\n  // In that case, an empty string should be interpreted as \"no parent span id\",\n  // even if `span.parentSpanId` is set\n  // this is the case when we are starting a new trace, where we have a virtual span based on the propagationContext\n  // We only want to continue the traceId in this case, but ignore the parent span\n  const parent_span_id = span.parentSpanId;\n  const status = mapStatus(span);\n  const traceContext = core.dropUndefinedKeys({\n    parent_span_id,\n    span_id,\n    trace_id,\n    data: attributes,\n    origin,\n    op,\n    status: core.getStatusMessage(status) // As per protocol, span status is allowed to be undefined\n  });\n\n  const statusCode = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE];\n  const responseContext = typeof statusCode === 'number' ? {\n    response: {\n      status_code: statusCode\n    }\n  } : undefined;\n  const transactionEvent = core.dropUndefinedKeys({\n    contexts: {\n      trace: traceContext,\n      otel: {\n        resource: span.resource.attributes\n      },\n      ...responseContext\n    },\n    spans: [],\n    start_timestamp: core.spanTimeInputToSeconds(span.startTime),\n    timestamp: core.spanTimeInputToSeconds(span.endTime),\n    transaction: description,\n    type: 'transaction',\n    sdkProcessingMetadata: {\n      ...core.dropUndefinedKeys({\n        capturedSpanScope: capturedSpanScopes.scope,\n        capturedSpanIsolationScope: capturedSpanScopes.isolationScope,\n        sampleRate,\n        dynamicSamplingContext: core.getDynamicSamplingContextFromSpan(span)\n      })\n    },\n    ...(source && {\n      transaction_info: {\n        source\n      }\n    }),\n    _metrics_summary: core.getMetricSummaryJsonForSpan(span)\n  });\n  return transactionEvent;\n}\nfunction createAndFinishSpanForOtelSpan(node, spans, sentSpans) {\n  const span = node.span;\n  if (span) {\n    sentSpans.add(span);\n  }\n  const shouldDrop = !span;\n\n  // If this span should be dropped, we still want to create spans for the children of this\n  if (shouldDrop) {\n    node.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n    return;\n  }\n  const span_id = span.spanContext().spanId;\n  const trace_id = span.spanContext().traceId;\n  const {\n    attributes,\n    startTime,\n    endTime,\n    parentSpanId\n  } = span;\n  const {\n    op,\n    description,\n    data,\n    origin = 'manual'\n  } = getSpanData(span);\n  const allData = core.dropUndefinedKeys({\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    ...removeSentryAttributes(attributes),\n    ...data\n  });\n  const status = mapStatus(span);\n  const spanJSON = core.dropUndefinedKeys({\n    span_id,\n    trace_id,\n    data: allData,\n    description,\n    parent_span_id: parentSpanId,\n    start_timestamp: core.spanTimeInputToSeconds(startTime),\n    // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n    timestamp: core.spanTimeInputToSeconds(endTime) || undefined,\n    status: core.getStatusMessage(status),\n    // As per protocol, span status is allowed to be undefined\n    op,\n    origin,\n    _metrics_summary: core.getMetricSummaryJsonForSpan(span),\n    measurements: core.timedEventsToMeasurements(span.events)\n  });\n  spans.push(spanJSON);\n  node.children.forEach(child => {\n    createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n  });\n}\nfunction getSpanData(span) {\n  const {\n    op: definedOp,\n    source: definedSource,\n    origin\n  } = parseSpan(span);\n  const {\n    op: inferredOp,\n    description,\n    source: inferredSource,\n    data: inferredData\n  } = parseSpanDescription(span);\n  const op = definedOp || inferredOp;\n  const source = definedSource || inferredSource;\n  const data = {\n    ...inferredData,\n    ...getData(span)\n  };\n  return {\n    op,\n    description,\n    source,\n    origin,\n    data\n  };\n}\n\n/**\n * Remove custom `sentry.` attributes we do not need to send.\n * These are more carrier attributes we use inside of the SDK, we do not need to send them to the API.\n */\nfunction removeSentryAttributes(data) {\n  const cleanedData = {\n    ...data\n  };\n\n  /* eslint-disable @typescript-eslint/no-dynamic-delete */\n  delete cleanedData[core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE];\n  delete cleanedData[core.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  /* eslint-enable @typescript-eslint/no-dynamic-delete */\n\n  return cleanedData;\n}\nfunction getData(span) {\n  const attributes = span.attributes;\n  const data = {};\n  if (span.kind !== api.SpanKind.INTERNAL) {\n    data['otel.kind'] = api.SpanKind[span.kind];\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeHttpStatusCodeAttribute = attributes[SEMATTRS_HTTP_STATUS_CODE];\n  if (maybeHttpStatusCodeAttribute) {\n    data[ATTR_HTTP_RESPONSE_STATUS_CODE] = maybeHttpStatusCodeAttribute;\n  }\n  const requestData = getRequestSpanData(span);\n  if (requestData.url) {\n    data.url = requestData.url;\n  }\n  if (requestData['http.query']) {\n    data['http.query'] = requestData['http.query'].slice(1);\n  }\n  if (requestData['http.fragment']) {\n    data['http.fragment'] = requestData['http.fragment'].slice(1);\n  }\n  return data;\n}\nfunction _optionalChain$1(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => value.call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\nfunction onSpanStart(span, parentContext) {\n  // This is a reliable way to get the parent span - because this is exactly how the parent is identified in the OTEL SDK\n  const parentSpan = api.trace.getSpan(parentContext);\n  let scopes = getScopesFromContext(parentContext);\n\n  // We need access to the parent span in order to be able to move up the span tree for breadcrumbs\n  if (parentSpan && !parentSpan.spanContext().isRemote) {\n    core.addChildSpanToSpan(parentSpan, span);\n  }\n\n  // We need this in the span exporter\n  if (parentSpan && parentSpan.spanContext().isRemote) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE, true);\n  }\n\n  // The root context does not have scopes stored, so we check for this specifically\n  // As fallback we attach the global scopes\n  if (parentContext === api.ROOT_CONTEXT) {\n    scopes = {\n      scope: core.getDefaultCurrentScope(),\n      isolationScope: core.getDefaultIsolationScope()\n    };\n  }\n\n  // We need the scope at time of span creation in order to apply it to the event when the span is finished\n  if (scopes) {\n    core.setCapturedScopesOnSpan(span, scopes.scope, scopes.isolationScope);\n  }\n  core.logSpanStart(span);\n  const client = core.getClient();\n  _optionalChain$1([client, 'optionalAccess', _ => _.emit, 'call', _2 => _2('spanStart', span)]);\n}\nfunction onSpanEnd(span) {\n  core.logSpanEnd(span);\n  const client = core.getClient();\n  _optionalChain$1([client, 'optionalAccess', _3 => _3.emit, 'call', _4 => _4('spanEnd', span)]);\n}\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nclass SentrySpanProcessor {\n  constructor(options) {\n    setIsSetup('SentrySpanProcessor');\n    this._exporter = new SentrySpanExporter(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async forceFlush() {\n    this._exporter.flush();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  async shutdown() {\n    this._exporter.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onStart(span, parentContext) {\n    onSpanStart(span, parentContext);\n  }\n\n  /** @inheritDoc */\n  onEnd(span) {\n    onSpanEnd(span);\n    this._exporter.export(span);\n  }\n}\n\n/**\n * A custom OTEL sampler that uses Sentry sampling rates to make its decision\n */\nclass SentrySampler {\n  constructor(client) {\n    this._client = client;\n    setIsSetup('SentrySampler');\n  }\n\n  /** @inheritDoc */\n  shouldSample(context, traceId, spanName, spanKind, spanAttributes, _links) {\n    const options = this._client.getOptions();\n    const parentSpan = getValidSpan(context);\n    const parentContext = core._optionalChain([parentSpan, 'optionalAccess', _ => _.spanContext, 'call', _2 => _2()]);\n    if (!core.hasTracingEnabled(options)) {\n      return wrapSamplingDecision({\n        decision: undefined,\n        context,\n        spanAttributes\n      });\n    }\n\n    // `ATTR_HTTP_REQUEST_METHOD` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_METHOD`, for now.\n    // eslint-disable-next-line deprecation/deprecation\n    const maybeSpanHttpMethod = spanAttributes[SEMATTRS_HTTP_METHOD] || spanAttributes[ATTR_HTTP_REQUEST_METHOD];\n\n    // If we have a http.client span that has no local parent, we never want to sample it\n    // but we want to leave downstream sampling decisions up to the server\n    if (spanKind === api.SpanKind.CLIENT && maybeSpanHttpMethod && (!parentSpan || core._optionalChain([parentContext, 'optionalAccess', _3 => _3.isRemote]))) {\n      return wrapSamplingDecision({\n        decision: undefined,\n        context,\n        spanAttributes\n      });\n    }\n    const parentSampled = parentSpan ? getParentSampled(parentSpan, traceId, spanName) : undefined;\n\n    // We want to pass the inferred name & attributes to the sampler method\n    const {\n      description: inferredSpanName,\n      data: inferredAttributes,\n      op\n    } = inferSpanData(spanName, spanAttributes, spanKind);\n    const mergedAttributes = {\n      ...inferredAttributes,\n      ...spanAttributes\n    };\n    if (op) {\n      mergedAttributes[core.SEMANTIC_ATTRIBUTE_SENTRY_OP] = op;\n    }\n    const mutableSamplingDecision = {\n      decision: true\n    };\n    this._client.emit('beforeSampling', {\n      spanAttributes: mergedAttributes,\n      spanName: inferredSpanName,\n      parentSampled: parentSampled,\n      parentContext: parentContext\n    }, mutableSamplingDecision);\n    if (!mutableSamplingDecision.decision) {\n      return wrapSamplingDecision({\n        decision: undefined,\n        context,\n        spanAttributes\n      });\n    }\n    const [sampled, sampleRate] = core.sampleSpan(options, {\n      name: inferredSpanName,\n      attributes: mergedAttributes,\n      transactionContext: {\n        name: inferredSpanName,\n        parentSampled\n      },\n      parentSampled\n    });\n    const attributes = {\n      [core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate\n    };\n    const method = `${maybeSpanHttpMethod}`.toUpperCase();\n    if (method === 'OPTIONS' || method === 'HEAD') {\n      DEBUG_BUILD$1 && core.logger.log(`[Tracing] Not sampling span because HTTP method is '${method}' for ${spanName}`);\n      return {\n        ...wrapSamplingDecision({\n          decision: SamplingDecision.NOT_RECORD,\n          context,\n          spanAttributes\n        }),\n        attributes\n      };\n    }\n    if (!sampled) {\n      return {\n        ...wrapSamplingDecision({\n          decision: SamplingDecision.NOT_RECORD,\n          context,\n          spanAttributes\n        }),\n        attributes\n      };\n    }\n    return {\n      ...wrapSamplingDecision({\n        decision: SamplingDecision.RECORD_AND_SAMPLED,\n        context,\n        spanAttributes\n      }),\n      attributes\n    };\n  }\n\n  /** Returns the sampler name or short description with the configuration. */\n  toString() {\n    return 'SentrySampler';\n  }\n}\nfunction getParentRemoteSampled(parentSpan) {\n  const traceId = parentSpan.spanContext().traceId;\n  const traceparentData = getPropagationContextFromSpan(parentSpan);\n\n  // Only inherit sampled if `traceId` is the same\n  return traceparentData && traceId === traceparentData.traceId ? traceparentData.sampled : undefined;\n}\nfunction getParentSampled(parentSpan, traceId, spanName) {\n  const parentContext = parentSpan.spanContext();\n\n  // Only inherit sample rate if `traceId` is the same\n  // Note for testing: `isSpanContextValid()` checks the format of the traceId/spanId, so we need to pass valid ones\n  if (api.isSpanContextValid(parentContext) && parentContext.traceId === traceId) {\n    if (parentContext.isRemote) {\n      const parentSampled = getParentRemoteSampled(parentSpan);\n      DEBUG_BUILD$1 && core.logger.log(`[Tracing] Inheriting remote parent's sampled decision for ${spanName}: ${parentSampled}`);\n      return parentSampled;\n    }\n    const parentSampled = getSamplingDecision(parentContext);\n    DEBUG_BUILD$1 && core.logger.log(`[Tracing] Inheriting parent's sampled decision for ${spanName}: ${parentSampled}`);\n    return parentSampled;\n  }\n  return undefined;\n}\n\n/**\n * Wrap a sampling decision with data that Sentry needs to work properly with it.\n * If you pass `decision: undefined`, it will be treated as `NOT_RECORDING`, but in contrast to passing `NOT_RECORDING`\n * it will not propagate this decision to downstream Sentry SDKs.\n */\nfunction wrapSamplingDecision({\n  decision,\n  context,\n  spanAttributes\n}) {\n  const traceState = getBaseTraceState(context, spanAttributes);\n\n  // If the decision is undefined, we treat it as NOT_RECORDING, but we don't propagate this decision to downstream SDKs\n  // Which is done by not setting `SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING` traceState\n  if (decision == undefined) {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n      traceState\n    };\n  }\n  if (decision === SamplingDecision.NOT_RECORD) {\n    return {\n      decision,\n      traceState: traceState.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1')\n    };\n  }\n  return {\n    decision,\n    traceState\n  };\n}\nfunction getBaseTraceState(context, spanAttributes) {\n  const parentSpan = api.trace.getSpan(context);\n  const parentContext = core._optionalChain([parentSpan, 'optionalAccess', _4 => _4.spanContext, 'call', _5 => _5()]);\n  let traceState = core._optionalChain([parentContext, 'optionalAccess', _6 => _6.traceState]) || new TraceState();\n\n  // We always keep the URL on the trace state, so we can access it in the propagator\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const url = spanAttributes[SEMATTRS_HTTP_URL] || spanAttributes[ATTR_URL_FULL];\n  if (url && typeof url === 'string') {\n    traceState = traceState.set(SENTRY_TRACE_STATE_URL, url);\n  }\n  return traceState;\n}\n\n/**\n * If the active span is invalid, we want to ignore it as parent.\n * This aligns with how otel tracers and default samplers handle these cases.\n */\nfunction getValidSpan(context) {\n  const span = api.trace.getSpan(context);\n  return span && api.isSpanContextValid(span.spanContext()) ? span : undefined;\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;\nconst INTEGRATION_NAME = 'WinterCGFetch';\nconst HAS_CLIENT_MAP = new WeakMap();\nconst _winterCGFetch = (options = {}) => {\n  const breadcrumbs = options.breadcrumbs === undefined ? true : options.breadcrumbs;\n  const shouldCreateSpanForRequest = options.shouldCreateSpanForRequest;\n  const _createSpanUrlMap = new core.LRUMap(100);\n  const _headersUrlMap = new core.LRUMap(100);\n  const spans = {};\n\n  /** Decides whether to attach trace data to the outgoing fetch request */\n  function _shouldAttachTraceData(url) {\n    const client = core.getClient();\n    if (!client) {\n      return false;\n    }\n    const clientOptions = client.getOptions();\n    if (clientOptions.tracePropagationTargets === undefined) {\n      return true;\n    }\n    const cachedDecision = _headersUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n    const decision = core.stringMatchesSomePattern(url, clientOptions.tracePropagationTargets);\n    _headersUrlMap.set(url, decision);\n    return decision;\n  }\n\n  /** Helper that wraps shouldCreateSpanForRequest option */\n  function _shouldCreateSpan(url) {\n    if (shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n    const cachedDecision = _createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n    const decision = shouldCreateSpanForRequest(url);\n    _createSpanUrlMap.set(url, decision);\n    return decision;\n  }\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      core.addFetchInstrumentationHandler(handlerData => {\n        const client = core.getClient();\n        if (!client || !HAS_CLIENT_MAP.get(client)) {\n          return;\n        }\n        if (core.isSentryRequestUrl(handlerData.fetchData.url, client)) {\n          return;\n        }\n        core.instrumentFetchRequest(handlerData, _shouldCreateSpan, _shouldAttachTraceData, spans, 'auto.http.wintercg_fetch');\n        if (breadcrumbs) {\n          createBreadcrumb(handlerData);\n        }\n      });\n    },\n    setup(client) {\n      HAS_CLIENT_MAP.set(client, true);\n    }\n  };\n};\n\n/**\n * Creates spans and attaches tracing headers to fetch requests on WinterCG runtimes.\n */\nconst winterCGFetchIntegration = core.defineIntegration(_winterCGFetch);\nfunction createBreadcrumb(handlerData) {\n  const {\n    startTimestamp,\n    endTimestamp\n  } = handlerData;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n  if (handlerData.error) {\n    const data = handlerData.fetchData;\n    const hint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp,\n      endTimestamp\n    };\n    core.addBreadcrumb({\n      category: 'fetch',\n      data,\n      level: 'error',\n      type: 'http'\n    }, hint);\n  } else {\n    const data = {\n      ...handlerData.fetchData,\n      status_code: handlerData.response && handlerData.response.status\n    };\n    const hint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp,\n      endTimestamp\n    };\n    const level = core.getBreadcrumbLogLevelFromHttpStatusCode(data.status_code);\n    core.addBreadcrumb({\n      category: 'fetch',\n      data,\n      type: 'http',\n      level\n    }, hint);\n  }\n}\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * This is a modified promise buffer that collects tasks until drain is called.\n * We need this in the edge runtime because edge function invocations may not share I/O objects, like fetch requests\n * and responses, and the normal PromiseBuffer inherently buffers stuff inbetween incoming requests.\n *\n * A limitation we need to be aware of is that DEFAULT_TRANSPORT_BUFFER_SIZE is the maximum amount of payloads the\n * SDK can send for a given edge function invocation.\n */\nclass IsolatedPromiseBuffer {\n  // We just have this field because the promise buffer interface requires it.\n  // If we ever remove it from the interface we should also remove it here.\n\n  constructor(_bufferSize = DEFAULT_TRANSPORT_BUFFER_SIZE) {\n    this.$ = [];\n    this._taskProducers = [];\n    this._bufferSize = _bufferSize;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  add(taskProducer) {\n    if (this._taskProducers.length >= this._bufferSize) {\n      return Promise.reject(new core.SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n    this._taskProducers.push(taskProducer);\n    return Promise.resolve({});\n  }\n\n  /**\n   * @inheritdoc\n   */\n  drain(timeout) {\n    const oldTaskProducers = [...this._taskProducers];\n    this._taskProducers = [];\n    return new Promise(resolve => {\n      const timer = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // This cannot reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      Promise.all(oldTaskProducers.map(taskProducer => taskProducer().then(null, () => {\n        // catch all failed requests\n      }))).then(() => {\n        // resolve to true if all fetch requests settled\n        clearTimeout(timer);\n        resolve(true);\n      });\n    });\n  }\n}\n\n/**\n * Creates a Transport that uses the Edge Runtimes native fetch API to send events to Sentry.\n */\nfunction makeEdgeTransport(options) {\n  function makeRequest(request) {\n    const requestOptions = {\n      body: request.body,\n      method: 'POST',\n      headers: options.headers,\n      ...options.fetchOptions\n    };\n    return core.suppressTracing(() => {\n      return fetch(options.url, requestOptions).then(response => {\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After')\n          }\n        };\n      });\n    });\n  }\n  return core.createTransport(options, makeRequest, new IsolatedPromiseBuffer(options.bufferSize));\n}\n\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nfunction getVercelEnv(isClient) {\n  const vercelEnvVar = process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\nconst ADD_LISTENER_METHODS = ['addListener', 'on', 'once', 'prependListener', 'prependOnceListener'];\nclass AbstractAsyncHooksContextManager {\n  constructor() {\n    AbstractAsyncHooksContextManager.prototype.__init.call(this);\n    AbstractAsyncHooksContextManager.prototype.__init2.call(this);\n  }\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind(context, target) {\n    if (typeof target === 'object' && target !== null && 'on' in target) {\n      return this._bindEventEmitter(context, target);\n    }\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n  _bindFunction(context, target) {\n    const manager = this;\n    const contextWrapper = function (...args) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length\n    });\n    /**\n     * It isn't possible to tell Typescript that contextWrapper is the same as T\n     * so we forced to cast as any here.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return contextWrapper;\n  }\n\n  /**\n   * By default, EventEmitter call their callback with their context, which we do\n   * not want, instead we will bind a specific context to all callbacks that\n   * go through it.\n   * @param context the context we want to bind\n   * @param ee EventEmitter an instance of EventEmitter to patch\n   */\n  _bindEventEmitter(context, ee) {\n    const map = this._getPatchMap(ee);\n    if (map !== undefined) return ee;\n    this._createPatchMap(ee);\n\n    // patch methods that add a listener to propagate context\n    ADD_LISTENER_METHODS.forEach(methodName => {\n      if (ee[methodName] === undefined) return;\n      ee[methodName] = this._patchAddListener(ee, ee[methodName], context);\n    });\n    // patch methods that remove a listener\n    if (typeof ee.removeListener === 'function') {\n      ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n    }\n    if (typeof ee.off === 'function') {\n      ee.off = this._patchRemoveListener(ee, ee.off);\n    }\n    // patch method that remove all listeners\n    if (typeof ee.removeAllListeners === 'function') {\n      ee.removeAllListeners = this._patchRemoveAllListeners(ee, ee.removeAllListeners);\n    }\n    return ee;\n  }\n\n  /**\n   * Patch methods that remove a given listener so that we match the \"patched\"\n   * version of that listener (the one that propagate context).\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  _patchRemoveListener(ee, original) {\n    const contextManager = this;\n    return function (event, listener) {\n      const events = _optionalChain([contextManager, 'access', _ => _._getPatchMap, 'call', _2 => _2(ee), 'optionalAccess', _3 => _3[event]]);\n      if (events === undefined) {\n        return original.call(this, event, listener);\n      }\n      const patchedListener = events.get(listener);\n      return original.call(this, event, patchedListener || listener);\n    };\n  }\n\n  /**\n   * Patch methods that remove all listeners so we remove our\n   * internal references for a given event.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  _patchRemoveAllListeners(ee, original) {\n    const contextManager = this;\n    return function (event) {\n      const map = contextManager._getPatchMap(ee);\n      if (map !== undefined) {\n        if (arguments.length === 0) {\n          contextManager._createPatchMap(ee);\n        } else if (map[event] !== undefined) {\n          delete map[event];\n        }\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Patch methods on an event emitter instance that can add listeners so we\n   * can force them to propagate a given context.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   * @param [context] context to propagate when calling listeners\n   */\n  _patchAddListener(ee, original, context) {\n    const contextManager = this;\n    return function (event, listener) {\n      /**\n       * This check is required to prevent double-wrapping the listener.\n       * The implementation for ee.once wraps the listener and calls ee.on.\n       * Without this check, we would wrap that wrapped listener.\n       * This causes an issue because ee.removeListener depends on the onceWrapper\n       * to properly remove the listener. If we wrap their wrapper, we break\n       * that detection.\n       */\n      if (contextManager._wrapped) {\n        return original.call(this, event, listener);\n      }\n      let map = contextManager._getPatchMap(ee);\n      if (map === undefined) {\n        map = contextManager._createPatchMap(ee);\n      }\n      let listeners = map[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        map[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n\n      /**\n       * See comment at the start of this function for the explanation of this property.\n       */\n      contextManager._wrapped = true;\n      try {\n        return original.call(this, event, patchedListener);\n      } finally {\n        contextManager._wrapped = false;\n      }\n    };\n  }\n  _createPatchMap(ee) {\n    const map = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ee[this._kOtListeners] = map;\n    return map;\n  }\n  _getPatchMap(ee) {\n    return ee[this._kOtListeners];\n  }\n  __init() {\n    this._kOtListeners = Symbol('OtListeners');\n  }\n  __init2() {\n    this._wrapped = false;\n  }\n}\nclass AsyncLocalStorageContextManager extends AbstractAsyncHooksContextManager {\n  constructor() {\n    super();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    const MaybeGlobalAsyncLocalStorageConstructor = core.GLOBAL_OBJ.AsyncLocalStorage;\n    if (!MaybeGlobalAsyncLocalStorageConstructor) {\n      DEBUG_BUILD && core.logger.warn(\"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\");\n\n      // @ts-expect-error Vendored type shenanigans\n      this._asyncLocalStorage = {\n        getStore() {\n          return undefined;\n        },\n        run(_store, callback, ...args) {\n          return callback.apply(this, args);\n        },\n        disable() {\n          // noop\n        }\n      };\n    } else {\n      this._asyncLocalStorage = new MaybeGlobalAsyncLocalStorageConstructor();\n    }\n  }\n  active() {\n    return _nullishCoalesce(this._asyncLocalStorage.getStore(), () => api.ROOT_CONTEXT);\n  }\n  with(context, fn, thisArg, ...args) {\n    const cb = thisArg == null ? fn : fn.bind(thisArg);\n    return this._asyncLocalStorage.run(context, cb, ...args);\n  }\n  enable() {\n    return this;\n  }\n  disable() {\n    this._asyncLocalStorage.disable();\n    return this;\n  }\n}\nconst nodeStackParser = core.createStackParser(core.nodeStackLineParser());\n\n/** Get the default integrations for the browser SDK. */\nfunction getDefaultIntegrations(options) {\n  return [core.dedupeIntegration(), core.inboundFiltersIntegration(), core.functionToStringIntegration(), core.linkedErrorsIntegration(), winterCGFetchIntegration(), ...(options.sendDefaultPii ? [core.requestDataIntegration()] : [])];\n}\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nfunction init(options = {}) {\n  setOpenTelemetryContextAsyncContextStrategy();\n  const scope = core.getCurrentScope();\n  scope.update(options.initialScope);\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrations(options);\n  }\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    const tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n  if (options.release === undefined) {\n    const detectedRelease = getSentryRelease();\n    if (detectedRelease !== undefined) {\n      options.release = detectedRelease;\n    } else {\n      // If release is not provided, then we should disable autoSessionTracking\n      // eslint-disable-next-line deprecation/deprecation\n      options.autoSessionTracking = false;\n    }\n  }\n  options.environment = options.environment || process.env.SENTRY_ENVIRONMENT || getVercelEnv() || \"development\";\n\n  // eslint-disable-next-line deprecation/deprecation\n  if (options.autoSessionTracking === undefined && options.dsn !== undefined) {\n    // eslint-disable-next-line deprecation/deprecation\n    options.autoSessionTracking = true;\n  }\n  const client = new VercelEdgeClient({\n    ...options,\n    stackParser: core.stackParserFromStackParserOptions(options.stackParser || nodeStackParser),\n    integrations: core.getIntegrationsToSetup(options),\n    transport: options.transport || makeEdgeTransport\n  });\n  // The client is on the current scope, from where it generally is inherited\n  core.getCurrentScope().setClient(client);\n  client.init();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    setupOtel(client);\n    validateOpenTelemetrySetup();\n  }\n  enhanceDscWithOpenTelemetryRootSpanName(client);\n  setupEventContextTrace(client);\n  return client;\n}\nfunction validateOpenTelemetrySetup() {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n  const setup = openTelemetrySetupCheck();\n  const required = ['SentryContextManager', 'SentryPropagator'];\n  if (core.hasTracingEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      core.logger.error(`You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`);\n    }\n  }\n  if (!setup.includes('SentrySampler')) {\n    core.logger.warn('You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.');\n  }\n}\n\n// exported for tests\n// eslint-disable-next-line jsdoc/require-jsdoc\nfunction setupOtel(client) {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  // Create and configure NodeTracerProvider\n  const provider = new BasicTracerProvider({\n    sampler: new SentrySampler(client),\n    resource: new Resource({\n      [ATTR_SERVICE_NAME]: 'edge',\n      // eslint-disable-next-line deprecation/deprecation\n      [SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [ATTR_SERVICE_VERSION]: core.SDK_VERSION\n    }),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [new SentrySpanProcessor({\n      timeout: client.getOptions().maxSpanWaitDuration\n    })]\n  });\n  const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n\n  // Initialize the provider\n  provider.register({\n    propagator: new SentryPropagator(),\n    contextManager: new SentryContextManager()\n  });\n  client.traceProvider = provider;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger() {\n  const otelLogger = new Proxy(core.logger, {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    }\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  api.diag.disable();\n  api.diag.setLogger(otelLogger, api.DiagLogLevel.DEBUG);\n}\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (core.GLOBAL_OBJ.SENTRY_RELEASE && core.GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return core.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n  // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n  process.env['GITHUB_SHA'] ||\n  // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n  process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] || process.env['CI_BUILD_REF'] || process.env['CI_COMMIT_SHA'] ||\n  // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n  process.env['BITBUCKET_COMMIT'];\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n  // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n  process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] || process.env['APPVEYOR_REPO_COMMIT'] ||\n  // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n  process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n  // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n  process.env['AWS_COMMIT_ID'] ||\n  // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n  process.env['BUILD_SOURCEVERSION'] ||\n  // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n  process.env['GIT_CLONE_COMMIT_HASH'] ||\n  // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n  process.env['BUDDY_EXECUTION_REVISION'] ||\n  // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n  process.env['BUILDKITE_COMMIT'] ||\n  // CircleCI - https://circleci.com/docs/variables/\n  process.env['CIRCLE_SHA1'] ||\n  // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n  process.env['CIRRUS_CHANGE_IN_REPO'] ||\n  // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n  process.env['CF_REVISION'] ||\n  // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n  process.env['CM_COMMIT'] ||\n  // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n  process.env['CF_PAGES_COMMIT_SHA'] ||\n  // Drone - https://docs.drone.io/pipeline/environment/reference/\n  process.env['DRONE_COMMIT_SHA'] ||\n  // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n  process.env['FC_GIT_COMMIT_SHA'] ||\n  // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n  process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n  // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n  process.env['HEROKU_SLUG_COMMIT'] ||\n  // Railway - https://docs.railway.app/reference/variables#git-variables\n  process.env['RAILWAY_GIT_COMMIT_SHA'] ||\n  // Render - https://render.com/docs/environment-variables\n  process.env['RENDER_GIT_COMMIT'] ||\n  // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n  process.env['SEMAPHORE_GIT_SHA'] ||\n  // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n  process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n  // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n  process.env['VERCEL_GIT_COMMIT_SHA'] || process.env['VERCEL_GITHUB_COMMIT_SHA'] || process.env['VERCEL_GITLAB_COMMIT_SHA'] || process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n  // Zeit (now known as Vercel)\n  process.env['ZEIT_GITHUB_COMMIT_SHA'] || process.env['ZEIT_GITLAB_COMMIT_SHA'] || process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n  // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n  process.env['CI_COMMIT_ID'] ||\n  // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n  process.env['SOURCE_COMMIT'] ||\n  // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n  process.env['SOURCE_VERSION'] ||\n  // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n  process.env['GIT_COMMIT'] ||\n  // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n  process.env['COMMIT_REF'] ||\n  // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n  process.env['BUILD_VCS_NUMBER'] ||\n  // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n  process.env['CI_COMMIT_SHA'];\n  return possibleReleaseNameOfGitProvider || possibleReleaseNameOfCiProvidersWithSpecificEnvVar || possibleReleaseNameOfCiProvidersWithGenericEnvVar || fallback;\n}\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.close = core.close;\nexports.continueTrace = core.continueTrace;\nexports.createTransport = core.createTransport;\nexports.debugIntegration = core.debugIntegration;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.metrics = core.metrics;\nexports.moduleMetadataIntegration = core.moduleMetadataIntegration;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\nexports.VercelEdgeClient = VercelEdgeClient;\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.init = init;\nexports.winterCGFetchIntegration = winterCGFetchIntegration;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL0BzZW50cnkvdmVyY2VsLWVkZ2UvYnVpbGQvY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7OztBQUVZLElBQUk7RUFDQUEsY0FBYztFQUNkQztBQUNKLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBRTNCO0VBQ0UsSUFBSUMsVUFBVSxDQUFDQyxXQUFXLEtBQUtDLFNBQVMsRUFBRTtJQUN4Q0YsVUFBVSxDQUFDQyxXQUFXLEdBQUc7TUFDdkJFLFVBQVUsRUFBRSxDQUFDO01BQ2JDLEdBQUcsRUFBRUEsQ0FBQSxLQUFNQyxJQUFJLENBQUNELEdBQUcsQ0FBQztJQUN0QixDQUFDO0VBQ0g7QUFDRjtBQUVBRSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBRTdELE1BQU1DLElBQUksR0FBR1gsbUJBQU8sQ0FBQyxpRkFBYyxDQUFDO0FBQ3BDLE1BQU1ZLEdBQUcsR0FBR1osbUJBQU8sQ0FBQyw2RkFBb0IsQ0FBQztBQUV6QyxTQUFTYSxnQkFBZ0JBLENBQUNDLEdBQUcsRUFBRTtFQUFFLElBQUlDLGFBQWEsR0FBR1osU0FBUztFQUFFLElBQUlPLEtBQUssR0FBR0ksR0FBRyxDQUFDLENBQUMsQ0FBQztFQUFFLElBQUlFLENBQUMsR0FBRyxDQUFDO0VBQUUsT0FBT0EsQ0FBQyxHQUFHRixHQUFHLENBQUNHLE1BQU0sRUFBRTtJQUFFLE1BQU1DLEVBQUUsR0FBR0osR0FBRyxDQUFDRSxDQUFDLENBQUM7SUFBRSxNQUFNRyxFQUFFLEdBQUdMLEdBQUcsQ0FBQ0UsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUFFQSxDQUFDLElBQUksQ0FBQztJQUFFLElBQUksQ0FBQ0UsRUFBRSxLQUFLLGdCQUFnQixJQUFJQSxFQUFFLEtBQUssY0FBYyxLQUFLUixLQUFLLElBQUksSUFBSSxFQUFFO01BQUUsT0FBT1AsU0FBUztJQUFFO0lBQUUsSUFBSWUsRUFBRSxLQUFLLFFBQVEsSUFBSUEsRUFB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ekMsYUFBYTtBQUMxQzl6QyxpQkFBaUIsR0FBR0UsSUFBSSxDQUFDa3ZCLFNBQVM7QUFDbENwdkIsdUJBQXVCLEdBQUdFLElBQUksQ0FBQzYrQixlQUFlO0FBQzlDLytCLHVCQUF1QixHQUFHRSxJQUFJLENBQUN5L0IsZUFBZTtBQUM5QzMvQixzQkFBc0IsR0FBR0UsSUFBSSxDQUFDNnpDLGNBQWM7QUFDNUMvekMsc0JBQXNCLEdBQUdFLElBQUksQ0FBQysrQixjQUFjO0FBQzVDai9CLDBCQUEwQixHQUFHRSxJQUFJLENBQUN1Z0Msa0JBQWtCO0FBQ3BEemdDLG1CQUFtQixHQUFHRSxJQUFJLENBQUM4ekMsV0FBVztBQUN0Q2gwQyxpQkFBaUIsR0FBR0UsSUFBSSxDQUFDcWdDLFNBQVM7QUFDbEN2Z0MsNEJBQTRCLEdBQUdFLElBQUksQ0FBQyt6QyxvQkFBb0I7QUFDeERqMEMsd0JBQXdCLEdBQUdhLGdCQUFnQjtBQUMzQ2IsOEJBQThCLEdBQUdrdkMsc0JBQXNCO0FBQ3ZEbHZDLFlBQVksR0FBR3l2QyxJQUFJO0FBQ25CenZDLGdDQUFnQyxHQUFHNHFDLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHNlbnRyeS92ZXJjZWwtZWRnZS9idWlsZC9janMvaW5kZXguanM/MTkwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuICAgICAgICAgICAgdmFyIHtcbiAgICAgICAgICAgICAgICBfb3B0aW9uYWxDaGFpbixcbiAgICAgICAgICAgICAgICBfbnVsbGlzaENvYWxlc2NlXG4gICAgICAgICAgICB9ID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWYgKGdsb2JhbFRoaXMucGVyZm9ybWFuY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMucGVyZm9ybWFuY2UgPSB7XG4gICAgICAgICAgICAgICAgICB0aW1lT3JpZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgbm93OiAoKSA9PiBEYXRlLm5vdygpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG4gICAgICAgICAgICBjb25zdCBhcGkgPSByZXF1aXJlKCdAb3BlbnRlbGVtZXRyeS9hcGknKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gX29wdGlvbmFsQ2hhaW4kNihvcHMpIHsgbGV0IGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7IGxldCB2YWx1ZSA9IG9wc1swXTsgbGV0IGkgPSAxOyB3aGlsZSAoaSA8IG9wcy5sZW5ndGgpIHsgY29uc3Qgb3AgPSBvcHNbaV07IGNvbnN0IGZuID0gb3BzW2kgKyAxXTsgaSArPSAyOyBpZiAoKG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgJiYgdmFsdWUgPT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGlmIChvcCA9PT0gJ2FjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbEFjY2VzcycpIHsgbGFzdEFjY2Vzc0xIUyA9IHZhbHVlOyB2YWx1ZSA9IGZuKHZhbHVlKTsgfSBlbHNlIGlmIChvcCA9PT0gJ2NhbGwnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgeyB2YWx1ZSA9IGZuKCguLi5hcmdzKSA9PiB2YWx1ZS5jYWxsKGxhc3RBY2Nlc3NMSFMsIC4uLmFyZ3MpKTsgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDsgfSB9IHJldHVybiB2YWx1ZTsgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBTZW50cnkgVmVyY2VsIEVkZ2UgUnVudGltZSBTREsgQ2xpZW50LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBzZWUgVmVyY2VsRWRnZUNsaWVudE9wdGlvbnMgZm9yIGRvY3VtZW50YXRpb24gb24gY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgICAgICAgICAgICogQHNlZSBTZXJ2ZXJSdW50aW1lQ2xpZW50IGZvciB1c2FnZSBkb2N1bWVudGF0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjbGFzcyBWZXJjZWxFZGdlQ2xpZW50IGV4dGVuZHMgY29yZS5TZXJ2ZXJSdW50aW1lQ2xpZW50IHtcblxuICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBWZXJjZWwgRWRnZSBSdW50aW1lIFNESyBpbnN0YW5jZS5cbiAgICAgICAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGlzIFNESy5cbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgY29yZS5hcHBseVNka01ldGFkYXRhKG9wdGlvbnMsICd2ZXJjZWwtZWRnZScpO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuX21ldGFkYXRhID0gb3B0aW9ucy5fbWV0YWRhdGEgfHwge307XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjbGllbnRPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgIHBsYXRmb3JtOiAnamF2YXNjcmlwdCcsXG4gICAgICAgICAgICAgICAgICAvLyBUT0RPOiBHcmFiIHZlcnNpb24gaW5mb3JtYXRpb25cbiAgICAgICAgICAgICAgICAgIHJ1bnRpbWU6IHsgbmFtZTogJ3ZlcmNlbC1lZGdlJyB9LFxuICAgICAgICAgICAgICAgICAgc2VydmVyTmFtZTogb3B0aW9ucy5zZXJ2ZXJOYW1lIHx8IHByb2Nlc3MuZW52LlNFTlRSWV9OQU1FLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzdXBlcihjbGllbnRPcHRpb25zKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIEVzbGludCBpZ25vcmUgZXhwbGFuYXRpb246IFRoaXMgaXMgYWxyZWFkeSBkb2N1bWVudGVkIGluIHN1cGVyLlxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuICAgICAgICAgICAgICAgYXN5bmMgZmx1c2godGltZW91dCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy50cmFjZVByb3ZpZGVyO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwYW5Qcm9jZXNzb3IgPSBfb3B0aW9uYWxDaGFpbiQ2KFtwcm92aWRlciwgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLmFjdGl2ZVNwYW5Qcm9jZXNzb3JdKTtcblxuICAgICAgICAgICAgICAgIGlmIChzcGFuUHJvY2Vzc29yKSB7XG4gICAgICAgICAgICAgICAgICBhd2FpdCBzcGFuUHJvY2Vzc29yLmZvcmNlRmx1c2goKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXRPcHRpb25zKCkuc2VuZENsaWVudFJlcG9ydHMpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuX2ZsdXNoT3V0Y29tZXMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXIuZmx1c2godGltZW91dCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBUTVBfREJfU1lTVEVNID0gJ2RiLnN5c3RlbSc7XG4gICAgICAgICAgICB2YXIgVE1QX0RCX1NUQVRFTUVOVCA9ICdkYi5zdGF0ZW1lbnQnO1xuICAgICAgICAgICAgdmFyIFRNUF9FWENFUFRJT05fVFlQRSA9ICdleGNlcHRpb24udHlwZSc7XG4gICAgICAgICAgICB2YXIgVE1QX0VYQ0VQVElPTl9NRVNTQUdFID0gJ2V4Y2VwdGlvbi5tZXNzYWdlJztcbiAgICAgICAgICAgIHZhciBUTVBfRVhDRVBUSU9OX1NUQUNLVFJBQ0UgPSAnZXhjZXB0aW9uLnN0YWNrdHJhY2UnO1xuICAgICAgICAgICAgdmFyIFRNUF9GQUFTX1RSSUdHRVIgPSAnZmFhcy50cmlnZ2VyJztcbiAgICAgICAgICAgIHZhciBUTVBfSFRUUF9NRVRIT0QgPSAnaHR0cC5tZXRob2QnO1xuICAgICAgICAgICAgdmFyIFRNUF9IVFRQX1VSTCA9ICdodHRwLnVybCc7XG4gICAgICAgICAgICB2YXIgVE1QX0hUVFBfVEFSR0VUID0gJ2h0dHAudGFyZ2V0JztcbiAgICAgICAgICAgIHZhciBUTVBfSFRUUF9TVEFUVVNfQ09ERSA9ICdodHRwLnN0YXR1c19jb2RlJztcbiAgICAgICAgICAgIHZhciBUTVBfTUVTU0FHSU5HX1NZU1RFTSA9ICdtZXNzYWdpbmcuc3lzdGVtJztcbiAgICAgICAgICAgIHZhciBUTVBfUlBDX1NFUlZJQ0UgPSAncnBjLnNlcnZpY2UnO1xuICAgICAgICAgICAgdmFyIFRNUF9SUENfR1JQQ19TVEFUVVNfQ09ERSA9ICdycGMuZ3JwYy5zdGF0dXNfY29kZSc7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFuIGlkZW50aWZpZXIgZm9yIHRoZSBkYXRhYmFzZSBtYW5hZ2VtZW50IHN5c3RlbSAoREJNUykgcHJvZHVjdCBiZWluZyB1c2VkLiBTZWUgYmVsb3cgZm9yIGEgbGlzdCBvZiB3ZWxsLWtub3duIGlkZW50aWZpZXJzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkIFVzZSBBVFRSX0RCX1NZU1RFTSBpbiBbaW5jdWJhdGluZyBlbnRyeS1wb2ludF0oe0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzL2Jsb2IvbWFpbi9zZW1hbnRpYy1jb252ZW50aW9ucy9SRUFETUUubWQjdW5zdGFibGUtc2VtY29udn0pLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgU0VNQVRUUlNfREJfU1lTVEVNID0gVE1QX0RCX1NZU1RFTTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIGRhdGFiYXNlIHN0YXRlbWVudCBiZWluZyBleGVjdXRlZC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBOb3RlOiBUaGUgdmFsdWUgbWF5IGJlIHNhbml0aXplZCB0byBleGNsdWRlIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgQVRUUl9EQl9TVEFURU1FTlQgaW4gW2luY3ViYXRpbmcgZW50cnktcG9pbnRdKHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy9ibG9iL21haW4vc2VtYW50aWMtY29udmVudGlvbnMvUkVBRE1FLm1kI3Vuc3RhYmxlLXNlbWNvbnZ9KS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIFNFTUFUVFJTX0RCX1NUQVRFTUVOVCA9IFRNUF9EQl9TVEFURU1FTlQ7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSB0eXBlIG9mIHRoZSBleGNlcHRpb24gKGl0cyBmdWxseS1xdWFsaWZpZWQgY2xhc3MgbmFtZSwgaWYgYXBwbGljYWJsZSkuIFRoZSBkeW5hbWljIHR5cGUgb2YgdGhlIGV4Y2VwdGlvbiBzaG91bGQgYmUgcHJlZmVycmVkIG92ZXIgdGhlIHN0YXRpYyB0eXBlIGluIGxhbmd1YWdlcyB0aGF0IHN1cHBvcnQgaXQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGRlcHJlY2F0ZWQgVXNlIEFUVFJfRVhDRVBUSU9OX1RZUEUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBTRU1BVFRSU19FWENFUFRJT05fVFlQRSA9IFRNUF9FWENFUFRJT05fVFlQRTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIGV4Y2VwdGlvbiBtZXNzYWdlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkIFVzZSBBVFRSX0VYQ0VQVElPTl9NRVNTQUdFLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgU0VNQVRUUlNfRVhDRVBUSU9OX01FU1NBR0UgPSBUTVBfRVhDRVBUSU9OX01FU1NBR0U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgc3RhY2t0cmFjZSBhcyBhIHN0cmluZyBpbiB0aGUgbmF0dXJhbCByZXByZXNlbnRhdGlvbiBmb3IgdGhlIGxhbmd1YWdlIHJ1bnRpbWUuIFRoZSByZXByZXNlbnRhdGlvbiBpcyB0byBiZSBkZXRlcm1pbmVkIGFuZCBkb2N1bWVudGVkIGJ5IGVhY2ggbGFuZ3VhZ2UgU0lHLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkIFVzZSBBVFRSX0VYQ0VQVElPTl9TVEFDS1RSQUNFLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgU0VNQVRUUlNfRVhDRVBUSU9OX1NUQUNLVFJBQ0UgPSBUTVBfRVhDRVBUSU9OX1NUQUNLVFJBQ0U7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFR5cGUgb2YgdGhlIHRyaWdnZXIgb24gd2hpY2ggdGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkIFVzZSBBVFRSX0ZBQVNfVFJJR0dFUiBpbiBbaW5jdWJhdGluZyBlbnRyeS1wb2ludF0oe0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzL2Jsb2IvbWFpbi9zZW1hbnRpYy1jb252ZW50aW9ucy9SRUFETUUubWQjdW5zdGFibGUtc2VtY29udn0pLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgU0VNQVRUUlNfRkFBU19UUklHR0VSID0gVE1QX0ZBQVNfVFJJR0dFUjtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSFRUUCByZXF1ZXN0IG1ldGhvZC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgQVRUUl9IVFRQX01FVEhPRCBpbiBbaW5jdWJhdGluZyBlbnRyeS1wb2ludF0oe0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzL2Jsb2IvbWFpbi9zZW1hbnRpYy1jb252ZW50aW9ucy9SRUFETUUubWQjdW5zdGFibGUtc2VtY29udn0pLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgU0VNQVRUUlNfSFRUUF9NRVRIT0QgPSBUTVBfSFRUUF9NRVRIT0Q7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZ1bGwgSFRUUCByZXF1ZXN0IFVSTCBpbiB0aGUgZm9ybSBgc2NoZW1lOi8vaG9zdFs6cG9ydF0vcGF0aD9xdWVyeVsjZnJhZ21lbnRdYC4gVXN1YWxseSB0aGUgZnJhZ21lbnQgaXMgbm90IHRyYW5zbWl0dGVkIG92ZXIgSFRUUCwgYnV0IGlmIGl0IGlzIGtub3duLCBpdCBzaG91bGQgYmUgaW5jbHVkZWQgbmV2ZXJ0aGVsZXNzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIE5vdGU6IGBodHRwLnVybGAgTVVTVCBOT1QgY29udGFpbiBjcmVkZW50aWFscyBwYXNzZWQgdmlhIFVSTCBpbiBmb3JtIG9mIGBodHRwczovL3VzZXJuYW1lOnBhc3N3b3JkQHd3dy5leGFtcGxlLmNvbS9gLiBJbiBzdWNoIGNhc2UgdGhlIGF0dHJpYnV0ZSYjMzk7cyB2YWx1ZSBzaG91bGQgYmUgYGh0dHBzOi8vd3d3LmV4YW1wbGUuY29tL2AuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGRlcHJlY2F0ZWQgVXNlIEFUVFJfSFRUUF9VUkwgaW4gW2luY3ViYXRpbmcgZW50cnktcG9pbnRdKHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy9ibG9iL21haW4vc2VtYW50aWMtY29udmVudGlvbnMvUkVBRE1FLm1kI3Vuc3RhYmxlLXNlbWNvbnZ9KS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIFNFTUFUVFJTX0hUVFBfVVJMID0gVE1QX0hUVFBfVVJMO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgZnVsbCByZXF1ZXN0IHRhcmdldCBhcyBwYXNzZWQgaW4gYSBIVFRQIHJlcXVlc3QgbGluZSBvciBlcXVpdmFsZW50LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkIFVzZSBBVFRSX0hUVFBfVEFSR0VUIGluIFtpbmN1YmF0aW5nIGVudHJ5LXBvaW50XSh7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMvYmxvYi9tYWluL3NlbWFudGljLWNvbnZlbnRpb25zL1JFQURNRS5tZCN1bnN0YWJsZS1zZW1jb252fSkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBTRU1BVFRSU19IVFRQX1RBUkdFVCA9IFRNUF9IVFRQX1RBUkdFVDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogW0hUVFAgcmVzcG9uc2Ugc3RhdHVzIGNvZGVdKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMxI3NlY3Rpb24tNikuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGRlcHJlY2F0ZWQgVXNlIEFUVFJfSFRUUF9TVEFUVVNfQ09ERSBpbiBbaW5jdWJhdGluZyBlbnRyeS1wb2ludF0oe0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzL2Jsb2IvbWFpbi9zZW1hbnRpYy1jb252ZW50aW9ucy9SRUFETUUubWQjdW5zdGFibGUtc2VtY29udn0pLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgU0VNQVRUUlNfSFRUUF9TVEFUVVNfQ09ERSA9IFRNUF9IVFRQX1NUQVRVU19DT0RFO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIHN0cmluZyBpZGVudGlmeWluZyB0aGUgbWVzc2FnaW5nIHN5c3RlbS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgQVRUUl9NRVNTQUdJTkdfU1lTVEVNIGluIFtpbmN1YmF0aW5nIGVudHJ5LXBvaW50XSh7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMvYmxvYi9tYWluL3NlbWFudGljLWNvbnZlbnRpb25zL1JFQURNRS5tZCN1bnN0YWJsZS1zZW1jb252fSkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBTRU1BVFRSU19NRVNTQUdJTkdfU1lTVEVNID0gVE1QX01FU1NBR0lOR19TWVNURU07XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBmdWxsIChsb2dpY2FsKSBuYW1lIG9mIHRoZSBzZXJ2aWNlIGJlaW5nIGNhbGxlZCwgaW5jbHVkaW5nIGl0cyBwYWNrYWdlIG5hbWUsIGlmIGFwcGxpY2FibGUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTm90ZTogVGhpcyBpcyB0aGUgbG9naWNhbCBuYW1lIG9mIHRoZSBzZXJ2aWNlIGZyb20gdGhlIFJQQyBpbnRlcmZhY2UgcGVyc3BlY3RpdmUsIHdoaWNoIGNhbiBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgbmFtZSBvZiBhbnkgaW1wbGVtZW50aW5nIGNsYXNzLiBUaGUgYGNvZGUubmFtZXNwYWNlYCBhdHRyaWJ1dGUgbWF5IGJlIHVzZWQgdG8gc3RvcmUgdGhlIGxhdHRlciAoZGVzcGl0ZSB0aGUgYXR0cmlidXRlIG5hbWUsIGl0IG1heSBpbmNsdWRlIGEgY2xhc3MgbmFtZTsgZS5nLiwgY2xhc3Mgd2l0aCBtZXRob2QgYWN0dWFsbHkgZXhlY3V0aW5nIHRoZSBjYWxsIG9uIHRoZSBzZXJ2ZXIgc2lkZSwgUlBDIGNsaWVudCBzdHViIGNsYXNzIG9uIHRoZSBjbGllbnQgc2lkZSkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGRlcHJlY2F0ZWQgVXNlIEFUVFJfUlBDX1NFUlZJQ0UgaW4gW2luY3ViYXRpbmcgZW50cnktcG9pbnRdKHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1qcy9ibG9iL21haW4vc2VtYW50aWMtY29udmVudGlvbnMvUkVBRE1FLm1kI3Vuc3RhYmxlLXNlbWNvbnZ9KS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIFNFTUFUVFJTX1JQQ19TRVJWSUNFID0gVE1QX1JQQ19TRVJWSUNFO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgW251bWVyaWMgc3RhdHVzIGNvZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi92MS4zMy4yL2RvYy9zdGF0dXNjb2Rlcy5tZCkgb2YgdGhlIGdSUEMgcmVxdWVzdC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgQVRUUl9SUENfR1JQQ19TVEFUVVNfQ09ERSBpbiBbaW5jdWJhdGluZyBlbnRyeS1wb2ludF0oe0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzL2Jsb2IvbWFpbi9zZW1hbnRpYy1jb252ZW50aW9ucy9SRUFETUUubWQjdW5zdGFibGUtc2VtY29udn0pLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgU0VNQVRUUlNfUlBDX0dSUENfU1RBVFVTX0NPREUgPSBUTVBfUlBDX0dSUENfU1RBVFVTX0NPREU7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgVE1QX1BST0NFU1NfUlVOVElNRV9OQU1FID0gJ3Byb2Nlc3MucnVudGltZS5uYW1lJztcbiAgICAgICAgICAgIHZhciBUTVBfU0VSVklDRV9OQU1FID0gJ3NlcnZpY2UubmFtZSc7XG4gICAgICAgICAgICB2YXIgVE1QX1NFUlZJQ0VfTkFNRVNQQUNFID0gJ3NlcnZpY2UubmFtZXNwYWNlJztcbiAgICAgICAgICAgIHZhciBUTVBfVEVMRU1FVFJZX1NES19OQU1FID0gJ3RlbGVtZXRyeS5zZGsubmFtZSc7XG4gICAgICAgICAgICB2YXIgVE1QX1RFTEVNRVRSWV9TREtfTEFOR1VBR0UgPSAndGVsZW1ldHJ5LnNkay5sYW5ndWFnZSc7XG4gICAgICAgICAgICB2YXIgVE1QX1RFTEVNRVRSWV9TREtfVkVSU0lPTiA9ICd0ZWxlbWV0cnkuc2RrLnZlcnNpb24nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgcnVudGltZSBvZiB0aGlzIHByb2Nlc3MuIEZvciBjb21waWxlZCBuYXRpdmUgYmluYXJpZXMsIHRoaXMgU0hPVUxEIGJlIHRoZSBuYW1lIG9mIHRoZSBjb21waWxlci5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgQVRUUl9QUk9DRVNTX1JVTlRJTUVfTkFNRSBpbiBbaW5jdWJhdGluZyBlbnRyeS1wb2ludF0oe0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzL2Jsb2IvbWFpbi9zZW1hbnRpYy1jb252ZW50aW9ucy9SRUFETUUubWQjdW5zdGFibGUtc2VtY29udn0pLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgU0VNUkVTQVRUUlNfUFJPQ0VTU19SVU5USU1FX05BTUUgPSBUTVBfUFJPQ0VTU19SVU5USU1FX05BTUU7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExvZ2ljYWwgbmFtZSBvZiB0aGUgc2VydmljZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBOb3RlOiBNVVNUIGJlIHRoZSBzYW1lIGZvciBhbGwgaW5zdGFuY2VzIG9mIGhvcml6b250YWxseSBzY2FsZWQgc2VydmljZXMuIElmIHRoZSB2YWx1ZSB3YXMgbm90IHNwZWNpZmllZCwgU0RLcyBNVVNUIGZhbGxiYWNrIHRvIGB1bmtub3duX3NlcnZpY2U6YCBjb25jYXRlbmF0ZWQgd2l0aCBbYHByb2Nlc3MuZXhlY3V0YWJsZS5uYW1lYF0ocHJvY2Vzcy5tZCNwcm9jZXNzKSwgZS5nLiBgdW5rbm93bl9zZXJ2aWNlOmJhc2hgLiBJZiBgcHJvY2Vzcy5leGVjdXRhYmxlLm5hbWVgIGlzIG5vdCBhdmFpbGFibGUsIHRoZSB2YWx1ZSBNVVNUIGJlIHNldCB0byBgdW5rbm93bl9zZXJ2aWNlYC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgQVRUUl9TRVJWSUNFX05BTUUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBTRU1SRVNBVFRSU19TRVJWSUNFX05BTUUgPSBUTVBfU0VSVklDRV9OQU1FO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIG5hbWVzcGFjZSBmb3IgYHNlcnZpY2UubmFtZWAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTm90ZTogQSBzdHJpbmcgdmFsdWUgaGF2aW5nIGEgbWVhbmluZyB0aGF0IGhlbHBzIHRvIGRpc3Rpbmd1aXNoIGEgZ3JvdXAgb2Ygc2VydmljZXMsIGZvciBleGFtcGxlIHRoZSB0ZWFtIG5hbWUgdGhhdCBvd25zIGEgZ3JvdXAgb2Ygc2VydmljZXMuIGBzZXJ2aWNlLm5hbWVgIGlzIGV4cGVjdGVkIHRvIGJlIHVuaXF1ZSB3aXRoaW4gdGhlIHNhbWUgbmFtZXNwYWNlLiBJZiBgc2VydmljZS5uYW1lc3BhY2VgIGlzIG5vdCBzcGVjaWZpZWQgaW4gdGhlIFJlc291cmNlIHRoZW4gYHNlcnZpY2UubmFtZWAgaXMgZXhwZWN0ZWQgdG8gYmUgdW5pcXVlIGZvciBhbGwgc2VydmljZXMgdGhhdCBoYXZlIG5vIGV4cGxpY2l0IG5hbWVzcGFjZSBkZWZpbmVkIChzbyB0aGUgZW1wdHkvdW5zcGVjaWZpZWQgbmFtZXNwYWNlIGlzIHNpbXBseSBvbmUgbW9yZSB2YWxpZCBuYW1lc3BhY2UpLiBaZXJvLWxlbmd0aCBuYW1lc3BhY2Ugc3RyaW5nIGlzIGFzc3VtZWQgZXF1YWwgdG8gdW5zcGVjaWZpZWQgbmFtZXNwYWNlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkIFVzZSBBVFRSX1NFUlZJQ0VfTkFNRVNQQUNFIGluIFtpbmN1YmF0aW5nIGVudHJ5LXBvaW50XSh7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktanMvYmxvYi9tYWluL3NlbWFudGljLWNvbnZlbnRpb25zL1JFQURNRS5tZCN1bnN0YWJsZS1zZW1jb252fSkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBTRU1SRVNBVFRSU19TRVJWSUNFX05BTUVTUEFDRSA9IFRNUF9TRVJWSUNFX05BTUVTUEFDRTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIG5hbWUgb2YgdGhlIHRlbGVtZXRyeSBTREsgYXMgZGVmaW5lZCBhYm92ZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZCBVc2UgQVRUUl9URUxFTUVUUllfU0RLX05BTUUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBTRU1SRVNBVFRSU19URUxFTUVUUllfU0RLX05BTUUgPSBUTVBfVEVMRU1FVFJZX1NES19OQU1FO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIHRlbGVtZXRyeSBTREsuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGRlcHJlY2F0ZWQgVXNlIEFUVFJfVEVMRU1FVFJZX1NES19MQU5HVUFHRS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIFNFTVJFU0FUVFJTX1RFTEVNRVRSWV9TREtfTEFOR1VBR0UgPSBUTVBfVEVMRU1FVFJZX1NES19MQU5HVUFHRTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIHZlcnNpb24gc3RyaW5nIG9mIHRoZSB0ZWxlbWV0cnkgU0RLLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkIFVzZSBBVFRSX1RFTEVNRVRSWV9TREtfVkVSU0lPTi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIFNFTVJFU0FUVFJTX1RFTEVNRVRSWV9TREtfVkVSU0lPTiA9IFRNUF9URUxFTUVUUllfU0RLX1ZFUlNJT047XG4gICAgICAgICAgICB2YXIgVE1QX1RFTEVNRVRSWVNES0xBTkdVQUdFVkFMVUVTX05PREVKUyA9ICdub2RlanMnO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIHRlbGVtZXRyeSBTREsuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGRlcHJlY2F0ZWQgVXNlIFRFTEVNRVRSWV9TREtfTEFOR1VBR0VfVkFMVUVfTk9ERUpTLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgVEVMRU1FVFJZU0RLTEFOR1VBR0VWQUxVRVNfTk9ERUpTID0gVE1QX1RFTEVNRVRSWVNES0xBTkdVQUdFVkFMVUVTX05PREVKUztcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgLy8gRE8gTk9UIEVESVQsIHRoaXMgaXMgYW4gQXV0by1nZW5lcmF0ZWQgZmlsZSBmcm9tIHNjcmlwdHMvc2VtY29udi90ZW1wbGF0ZXMvcmVnaXN0cnkvc3RhYmxlL2F0dHJpYnV0ZXMudHMuajJcbiAgICAgICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSYXRlLWxpbWl0aW5nIHJlc3VsdCwgc2hvd3Mgd2hldGhlciB0aGUgbGVhc2Ugd2FzIGFjcXVpcmVkIG9yIGNvbnRhaW5zIGEgcmVqZWN0aW9uIHJlYXNvblxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBleGFtcGxlIGFjcXVpcmVkXG4gICAgICAgICAgICAgKiBAZXhhbXBsZSByZXF1ZXN0X2NhbmNlbGVkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSFRUUCByZXF1ZXN0IG1ldGhvZC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAZXhhbXBsZSBHRVRcbiAgICAgICAgICAgICAqIEBleGFtcGxlIFBPU1RcbiAgICAgICAgICAgICAqIEBleGFtcGxlIEhFQURcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbm90ZSBIVFRQIHJlcXVlc3QgbWV0aG9kIHZhbHVlICoqU0hPVUxEKiogYmUgXCJrbm93blwiIHRvIHRoZSBpbnN0cnVtZW50YXRpb24uXG4gICAgICAgICAgICAgKiBCeSBkZWZhdWx0LCB0aGlzIGNvbnZlbnRpb24gZGVmaW5lcyBcImtub3duXCIgbWV0aG9kcyBhcyB0aGUgb25lcyBsaXN0ZWQgaW4gW1JGQzkxMTBdKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MTEwLmh0bWwjbmFtZS1tZXRob2RzKVxuICAgICAgICAgICAgICogYW5kIHRoZSBQQVRDSCBtZXRob2QgZGVmaW5lZCBpbiBbUkZDNTc4OV0oaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzU3ODkuaHRtbCkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogSWYgdGhlIEhUVFAgcmVxdWVzdCBtZXRob2QgaXMgbm90IGtub3duIHRvIGluc3RydW1lbnRhdGlvbiwgaXQgKipNVVNUKiogc2V0IHRoZSBgaHR0cC5yZXF1ZXN0Lm1ldGhvZGAgYXR0cmlidXRlIHRvIGBfT1RIRVJgLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIElmIHRoZSBIVFRQIGluc3RydW1lbnRhdGlvbiBjb3VsZCBlbmQgdXAgY29udmVydGluZyB2YWxpZCBIVFRQIHJlcXVlc3QgbWV0aG9kcyB0byBgX09USEVSYCwgdGhlbiBpdCAqKk1VU1QqKiBwcm92aWRlIGEgd2F5IHRvIG92ZXJyaWRlXG4gICAgICAgICAgICAgKiB0aGUgbGlzdCBvZiBrbm93biBIVFRQIG1ldGhvZHMuIElmIHRoaXMgb3ZlcnJpZGUgaXMgZG9uZSB2aWEgZW52aXJvbm1lbnQgdmFyaWFibGUsIHRoZW4gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlICoqTVVTVCoqIGJlIG5hbWVkXG4gICAgICAgICAgICAgKiBPVEVMX0lOU1RSVU1FTlRBVElPTl9IVFRQX0tOT1dOX01FVEhPRFMgYW5kIHN1cHBvcnQgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBjYXNlLXNlbnNpdGl2ZSBrbm93biBIVFRQIG1ldGhvZHNcbiAgICAgICAgICAgICAqICh0aGlzIGxpc3QgKipNVVNUKiogYmUgYSBmdWxsIG92ZXJyaWRlIG9mIHRoZSBkZWZhdWx0IGtub3duIG1ldGhvZCwgaXQgaXMgbm90IGEgbGlzdCBvZiBrbm93biBtZXRob2RzIGluIGFkZGl0aW9uIHRvIHRoZSBkZWZhdWx0cykuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogSFRUUCBtZXRob2QgbmFtZXMgYXJlIGNhc2Utc2Vuc2l0aXZlIGFuZCBgaHR0cC5yZXF1ZXN0Lm1ldGhvZGAgYXR0cmlidXRlIHZhbHVlICoqTVVTVCoqIG1hdGNoIGEga25vd24gSFRUUCBtZXRob2QgbmFtZSBleGFjdGx5LlxuICAgICAgICAgICAgICogSW5zdHJ1bWVudGF0aW9ucyBmb3Igc3BlY2lmaWMgd2ViIGZyYW1ld29ya3MgdGhhdCBjb25zaWRlciBIVFRQIG1ldGhvZHMgdG8gYmUgY2FzZSBpbnNlbnNpdGl2ZSwgKipTSE9VTEQqKiBwb3B1bGF0ZSBhIGNhbm9uaWNhbCBlcXVpdmFsZW50LlxuICAgICAgICAgICAgICogVHJhY2luZyBpbnN0cnVtZW50YXRpb25zIHRoYXQgZG8gc28sICoqTVVTVCoqIGFsc28gc2V0IGBodHRwLnJlcXVlc3QubWV0aG9kX29yaWdpbmFsYCB0byB0aGUgb3JpZ2luYWwgdmFsdWUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBBVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0QgPSAnaHR0cC5yZXF1ZXN0Lm1ldGhvZCc7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFtIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlXShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMSNzZWN0aW9uLTYpLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBleGFtcGxlIDIwMFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgQVRUUl9IVFRQX1JFU1BPTlNFX1NUQVRVU19DT0RFID0gJ2h0dHAucmVzcG9uc2Uuc3RhdHVzX2NvZGUnO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbWF0Y2hlZCByb3V0ZSwgdGhhdCBpcywgdGhlIHBhdGggdGVtcGxhdGUgaW4gdGhlIGZvcm1hdCB1c2VkIGJ5IHRoZSByZXNwZWN0aXZlIHNlcnZlciBmcmFtZXdvcmsuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGV4YW1wbGUgL3VzZXJzLzp1c2VySUQ/XG4gICAgICAgICAgICAgKiBAZXhhbXBsZSB7Y29udHJvbGxlcn0ve2FjdGlvbn0ve2lkP31cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAbm90ZSAqKk1VU1QgTk9UKiogYmUgcG9wdWxhdGVkIHdoZW4gdGhpcyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBIVFRQIHNlcnZlciBmcmFtZXdvcmsgYXMgdGhlIHJvdXRlIGF0dHJpYnV0ZSBzaG91bGQgaGF2ZSBsb3ctY2FyZGluYWxpdHkgYW5kIHRoZSBVUkkgcGF0aCBjYW4gTk9UIHN1YnN0aXR1dGUgaXQuXG4gICAgICAgICAgICAgKiAqKlNIT1VMRCoqIGluY2x1ZGUgdGhlIFthcHBsaWNhdGlvbiByb290XSgvZG9jcy9odHRwL2h0dHAtc3BhbnMubWQjaHR0cC1zZXJ2ZXItZGVmaW5pdGlvbnMpIGlmIHRoZXJlIGlzIG9uZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIEFUVFJfSFRUUF9ST1VURSA9ICdodHRwLnJvdXRlJztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTG9naWNhbCBuYW1lIG9mIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBleGFtcGxlIHNob3BwaW5nY2FydFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBub3RlICoqTVVTVCoqIGJlIHRoZSBzYW1lIGZvciBhbGwgaW5zdGFuY2VzIG9mIGhvcml6b250YWxseSBzY2FsZWQgc2VydmljZXMuIElmIHRoZSB2YWx1ZSB3YXMgbm90IHNwZWNpZmllZCwgU0RLcyAqKk1VU1QqKiBmYWxsYmFjayB0byBgdW5rbm93bl9zZXJ2aWNlOmAgY29uY2F0ZW5hdGVkIHdpdGggW2Bwcm9jZXNzLmV4ZWN1dGFibGUubmFtZWBdKHByb2Nlc3MubWQpLCBlLmcuIGB1bmtub3duX3NlcnZpY2U6YmFzaGAuIElmIGBwcm9jZXNzLmV4ZWN1dGFibGUubmFtZWAgaXMgbm90IGF2YWlsYWJsZSwgdGhlIHZhbHVlICoqTVVTVCoqIGJlIHNldCB0byBgdW5rbm93bl9zZXJ2aWNlYC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIEFUVFJfU0VSVklDRV9OQU1FID0gJ3NlcnZpY2UubmFtZSc7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSB2ZXJzaW9uIHN0cmluZyBvZiB0aGUgc2VydmljZSBBUEkgb3IgaW1wbGVtZW50YXRpb24uIFRoZSBmb3JtYXQgaXMgbm90IGRlZmluZWQgYnkgdGhlc2UgY29udmVudGlvbnMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGV4YW1wbGUgMi4wLjBcbiAgICAgICAgICAgICAqIEBleGFtcGxlIGEwMWRiZWY4YVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgQVRUUl9TRVJWSUNFX1ZFUlNJT04gPSAnc2VydmljZS52ZXJzaW9uJztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWJzb2x1dGUgVVJMIGRlc2NyaWJpbmcgYSBuZXR3b3JrIHJlc291cmNlIGFjY29yZGluZyB0byBbUkZDMzk4Nl0oaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzM5ODYpXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQGV4YW1wbGUgaHR0cHM6Ly93d3cuZm9vLmJhci9zZWFyY2g/cT1PcGVuVGVsZW1ldHJ5I1NlbUNvbnZcbiAgICAgICAgICAgICAqIEBleGFtcGxlIC8vbG9jYWxob3N0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQG5vdGUgRm9yIG5ldHdvcmsgY2FsbHMsIFVSTCB1c3VhbGx5IGhhcyBgc2NoZW1lOi8vaG9zdFs6cG9ydF1bcGF0aF1bP3F1ZXJ5XVsjZnJhZ21lbnRdYCBmb3JtYXQsIHdoZXJlIHRoZSBmcmFnbWVudCBpcyBub3QgdHJhbnNtaXR0ZWQgb3ZlciBIVFRQLCBidXQgaWYgaXQgaXMga25vd24sIGl0ICoqU0hPVUxEKiogYmUgaW5jbHVkZWQgbmV2ZXJ0aGVsZXNzLlxuICAgICAgICAgICAgICogYHVybC5mdWxsYCAqKk1VU1QgTk9UKiogY29udGFpbiBjcmVkZW50aWFscyBwYXNzZWQgdmlhIFVSTCBpbiBmb3JtIG9mIGBodHRwczovL3VzZXJuYW1lOnBhc3N3b3JkQHd3dy5leGFtcGxlLmNvbS9gLiBJbiBzdWNoIGNhc2UgdXNlcm5hbWUgYW5kIHBhc3N3b3JkICoqU0hPVUxEKiogYmUgcmVkYWN0ZWQgYW5kIGF0dHJpYnV0ZSdzIHZhbHVlICoqU0hPVUxEKiogYmUgYGh0dHBzOi8vUkVEQUNURUQ6UkVEQUNURURAd3d3LmV4YW1wbGUuY29tL2AuXG4gICAgICAgICAgICAgKiBgdXJsLmZ1bGxgICoqU0hPVUxEKiogY2FwdHVyZSB0aGUgYWJzb2x1dGUgVVJMIHdoZW4gaXQgaXMgYXZhaWxhYmxlIChvciBjYW4gYmUgcmVjb25zdHJ1Y3RlZCkuIFNlbnNpdGl2ZSBjb250ZW50IHByb3ZpZGVkIGluIGB1cmwuZnVsbGAgKipTSE9VTEQqKiBiZSBzY3J1YmJlZCB3aGVuIGluc3RydW1lbnRhdGlvbnMgY2FuIGlkZW50aWZ5IGl0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgQVRUUl9VUkxfRlVMTCA9ICd1cmwuZnVsbCc7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgU1VQUFJFU1NfVFJBQ0lOR19LRVkgPSBhcGkuY3JlYXRlQ29udGV4dEtleSgnT3BlblRlbGVtZXRyeSBTREsgQ29udGV4dCBLZXkgU1VQUFJFU1NfVFJBQ0lORycpO1xuICAgICAgICAgICAgZnVuY3Rpb24gc3VwcHJlc3NUcmFjaW5nJDEoY29udGV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnNldFZhbHVlKFNVUFBSRVNTX1RSQUNJTkdfS0VZLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVHJhY2luZ1N1cHByZXNzZWQoY29udGV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmdldFZhbHVlKFNVUFBSRVNTX1RSQUNJTkdfS0VZKSA9PT0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBCQUdHQUdFX0tFWV9QQUlSX1NFUEFSQVRPUiA9ICc9JztcbiAgICAgICAgICAgIHZhciBCQUdHQUdFX1BST1BFUlRJRVNfU0VQQVJBVE9SID0gJzsnO1xuICAgICAgICAgICAgdmFyIEJBR0dBR0VfSVRFTVNfU0VQQVJBVE9SID0gJywnO1xuICAgICAgICAgICAgLy8gTmFtZSBvZiB0aGUgaHR0cCBoZWFkZXIgdXNlZCB0byBwcm9wYWdhdGUgdGhlIGJhZ2dhZ2VcbiAgICAgICAgICAgIHZhciBCQUdHQUdFX0hFQURFUiA9ICdiYWdnYWdlJztcbiAgICAgICAgICAgIC8vIE1heGltdW0gbnVtYmVyIG9mIG5hbWUtdmFsdWUgcGFpcnMgYWxsb3dlZCBieSB3M2Mgc3BlY1xuICAgICAgICAgICAgdmFyIEJBR0dBR0VfTUFYX05BTUVfVkFMVUVfUEFJUlMgPSAxODA7XG4gICAgICAgICAgICAvLyBNYXhpbXVtIG51bWJlciBvZiBieXRlcyBwZXIgYSBzaW5nbGUgbmFtZS12YWx1ZSBwYWlyIGFsbG93ZWQgYnkgdzNjIHNwZWNcbiAgICAgICAgICAgIHZhciBCQUdHQUdFX01BWF9QRVJfTkFNRV9WQUxVRV9QQUlSUyA9IDQwOTY7XG4gICAgICAgICAgICAvLyBNYXhpbXVtIHRvdGFsIGxlbmd0aCBvZiBhbGwgbmFtZS12YWx1ZSBwYWlycyBhbGxvd2VkIGJ5IHczYyBzcGVjXG4gICAgICAgICAgICB2YXIgQkFHR0FHRV9NQVhfVE9UQUxfTEVOR1RIID0gODE5MjtcblxuICAgICAgICAgICAgdmFyIF9fcmVhZCQ1ID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgICAgICAgICAgICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhcjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmdW5jdGlvbiBzZXJpYWxpemVLZXlQYWlycyhrZXlQYWlycykge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXlQYWlycy5yZWR1Y2UoZnVuY3Rpb24gKGhWYWx1ZSwgY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBcIlwiICsgaFZhbHVlICsgKGhWYWx1ZSAhPT0gJycgPyBCQUdHQUdFX0lURU1TX1NFUEFSQVRPUiA6ICcnKSArIGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPiBCQUdHQUdFX01BWF9UT1RBTF9MRU5HVEggPyBoVmFsdWUgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9LCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRLZXlQYWlycyhiYWdnYWdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhZ2dhZ2UuZ2V0QWxsRW50cmllcygpLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9iID0gX19yZWFkJDUoX2EsIDIpLCBrZXkgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGluY2x1ZGUgb3BhcXVlIG1ldGFkYXRhIGlmIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIGludGVudGlvbmFsbHkgZG9uJ3QgVVJJLWVuY29kZSB0aGUgbWV0YWRhdGEgLSB0aGF0IHJlc3BvbnNpYmlsaXR5IGZhbGxzIG9uIHRoZSBtZXRhZGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubWV0YWRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkgKz0gQkFHR0FHRV9QUk9QRVJUSUVTX1NFUEFSQVRPUiArIHZhbHVlLm1ldGFkYXRhLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VQYWlyS2V5VmFsdWUoZW50cnkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVQcm9wcyA9IGVudHJ5LnNwbGl0KEJBR0dBR0VfUFJPUEVSVElFU19TRVBBUkFUT1IpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZVByb3BzLmxlbmd0aCA8PSAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIGtleVBhaXJQYXJ0ID0gdmFsdWVQcm9wcy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIGlmICgha2V5UGFpclBhcnQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9ySW5kZXggPSBrZXlQYWlyUGFydC5pbmRleE9mKEJBR0dBR0VfS0VZX1BBSVJfU0VQQVJBVE9SKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VwYXJhdG9ySW5kZXggPD0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5UGFpclBhcnQuc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KS50cmltKCkpO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXlQYWlyUGFydC5zdWJzdHJpbmcoc2VwYXJhdG9ySW5kZXggKyAxKS50cmltKCkpO1xuICAgICAgICAgICAgICAgIHZhciBtZXRhZGF0YTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVQcm9wcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhID0gYXBpLmJhZ2dhZ2VFbnRyeU1ldGFkYXRhRnJvbVN0cmluZyh2YWx1ZVByb3BzLmpvaW4oQkFHR0FHRV9QUk9QRVJUSUVTX1NFUEFSQVRPUikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBrZXk6IGtleSwgdmFsdWU6IHZhbHVlLCBtZXRhZGF0YTogbWV0YWRhdGEgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvcGFnYXRlcyB7QGxpbmsgQmFnZ2FnZX0gdGhyb3VnaCBDb250ZXh0IGZvcm1hdCBwcm9wYWdhdGlvbi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBCYXNlZCBvbiB0aGUgQmFnZ2FnZSBzcGVjaWZpY2F0aW9uOlxuICAgICAgICAgICAgICogaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2JhZ2dhZ2UvXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBXM0NCYWdnYWdlUHJvcGFnYXRvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBXM0NCYWdnYWdlUHJvcGFnYXRvcigpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgVzNDQmFnZ2FnZVByb3BhZ2F0b3IucHJvdG90eXBlLmluamVjdCA9IGZ1bmN0aW9uIChjb250ZXh0LCBjYXJyaWVyLCBzZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhZ2dhZ2UgPSBhcGkucHJvcGFnYXRpb24uZ2V0QmFnZ2FnZShjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFiYWdnYWdlIHx8IGlzVHJhY2luZ1N1cHByZXNzZWQoY29udGV4dCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlQYWlycyA9IGdldEtleVBhaXJzKGJhZ2dhZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFpci5sZW5ndGggPD0gQkFHR0FHRV9NQVhfUEVSX05BTUVfVkFMVUVfUEFJUlM7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgQkFHR0FHRV9NQVhfTkFNRV9WQUxVRV9QQUlSUyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJWYWx1ZSA9IHNlcmlhbGl6ZUtleVBhaXJzKGtleVBhaXJzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlclZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRlci5zZXQoY2FycmllciwgQkFHR0FHRV9IRUFERVIsIGhlYWRlclZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVzNDQmFnZ2FnZVByb3BhZ2F0b3IucHJvdG90eXBlLmV4dHJhY3QgPSBmdW5jdGlvbiAoY29udGV4dCwgY2FycmllciwgZ2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJWYWx1ZSA9IGdldHRlci5nZXQoY2FycmllciwgQkFHR0FHRV9IRUFERVIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmFnZ2FnZVN0cmluZyA9IEFycmF5LmlzQXJyYXkoaGVhZGVyVmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGhlYWRlclZhbHVlLmpvaW4oQkFHR0FHRV9JVEVNU19TRVBBUkFUT1IpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGhlYWRlclZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWJhZ2dhZ2VTdHJpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhZ2dhZ2UgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJhZ2dhZ2VTdHJpbmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFpcnMgPSBiYWdnYWdlU3RyaW5nLnNwbGl0KEJBR0dBR0VfSVRFTVNfU0VQQVJBVE9SKTtcbiAgICAgICAgICAgICAgICAgICAgcGFpcnMuZm9yRWFjaChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlQYWlyID0gcGFyc2VQYWlyS2V5VmFsdWUoZW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleVBhaXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmFnZ2FnZUVudHJ5ID0geyB2YWx1ZToga2V5UGFpci52YWx1ZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXlQYWlyLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhZ2dhZ2VFbnRyeS5tZXRhZGF0YSA9IGtleVBhaXIubWV0YWRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhZ2dhZ2Vba2V5UGFpci5rZXldID0gYmFnZ2FnZUVudHJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5lbnRyaWVzKGJhZ2dhZ2UpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5wcm9wYWdhdGlvbi5zZXRCYWdnYWdlKGNvbnRleHQsIGFwaS5wcm9wYWdhdGlvbi5jcmVhdGVCYWdnYWdlKGJhZ2dhZ2UpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFczQ0JhZ2dhZ2VQcm9wYWdhdG9yLnByb3RvdHlwZS5maWVsZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbQkFHR0FHRV9IRUFERVJdO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFczQ0JhZ2dhZ2VQcm9wYWdhdG9yO1xuICAgICAgICAgICAgfSgpKTtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBfX3ZhbHVlcyQzID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgICAgICAgICAgICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIF9fcmVhZCQ0ID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgICAgICAgICAgICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhcjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmdW5jdGlvbiBzYW5pdGl6ZUF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgICAgIHZhciBvdXQgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMgIT09ICdvYmplY3QnIHx8IGF0dHJpYnV0ZXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzJDMoT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcykpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2QgPSBfX3JlYWQkNChfYy52YWx1ZSwgMiksIGtleSA9IF9kWzBdLCB2YWwgPSBfZFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNBdHRyaWJ1dGVLZXkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLndhcm4oXCJJbnZhbGlkIGF0dHJpYnV0ZSBrZXk6IFwiICsga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNBdHRyaWJ1dGVWYWx1ZSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmRpYWcud2FybihcIkludmFsaWQgYXR0cmlidXRlIHZhbHVlIHNldCBmb3Iga2V5OiBcIiArIGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFtrZXldID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNBdHRyaWJ1dGVLZXkoa2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNBdHRyaWJ1dGVWYWx1ZSh2YWwpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzSG9tb2dlbmVvdXNBdHRyaWJ1dGVWYWx1ZUFycmF5KHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkUHJpbWl0aXZlQXR0cmlidXRlVmFsdWUodmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzSG9tb2dlbmVvdXNBdHRyaWJ1dGVWYWx1ZUFycmF5KGFycikge1xuICAgICAgICAgICAgICAgIHZhciBlXzIsIF9hO1xuICAgICAgICAgICAgICAgIHZhciB0eXBlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGFycl8xID0gX192YWx1ZXMkMyhhcnIpLCBhcnJfMV8xID0gYXJyXzEubmV4dCgpOyAhYXJyXzFfMS5kb25lOyBhcnJfMV8xID0gYXJyXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGFycl8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBudWxsL3VuZGVmaW5lZCBlbGVtZW50cyBhcmUgYWxsb3dlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkUHJpbWl0aXZlQXR0cmlidXRlVmFsdWUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHR5cGVvZiBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5jb3VudGVyZWQgYW4gaW52YWxpZCBwcmltaXRpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycl8xXzEgJiYgIWFycl8xXzEuZG9uZSAmJiAoX2EgPSBhcnJfMS5yZXR1cm4pKSBfYS5jYWxsKGFycl8xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaXNWYWxpZFByaW1pdGl2ZUF0dHJpYnV0ZVZhbHVlKHZhbCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHZhbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGxvZ3MgYW4gZXJyb3IgdXNpbmcgdGhlIHByb3ZpZGVkIGxvZ2dlciwgb3IgYVxuICAgICAgICAgICAgICogY29uc29sZSBsb2dnZXIgaWYgb25lIHdhcyBub3QgcHJvdmlkZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvZ2dpbmdFcnJvckhhbmRsZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChleCkge1xuICAgICAgICAgICAgICAgICAgICBhcGkuZGlhZy5lcnJvcihzdHJpbmdpZnlFeGNlcHRpb24oZXgpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyBhbiBleGNlcHRpb24gaW50byBhIHN0cmluZyByZXByZXNlbnRhdGlvblxuICAgICAgICAgICAgICogQHBhcmFtIHtFeGNlcHRpb259IGV4XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHN0cmluZ2lmeUV4Y2VwdGlvbihleCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShmbGF0dGVuRXhjZXB0aW9uKGV4KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGF0dGVucyBhbiBleGNlcHRpb24gaW50byBrZXktdmFsdWUgcGFpcnMgYnkgdHJhdmVyc2luZyB0aGUgcHJvdG90eXBlIGNoYWluXG4gICAgICAgICAgICAgKiBhbmQgY29lcmNpbmcgdmFsdWVzIHRvIHN0cmluZ3MuIER1cGxpY2F0ZSBwcm9wZXJ0aWVzIHdpbGwgbm90IGJlIG92ZXJ3cml0dGVuO1xuICAgICAgICAgICAgICogdGhlIGZpcnN0IGluc2VydCB3aW5zLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBmbGF0dGVuRXhjZXB0aW9uKGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gZXg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0W3Byb3BlcnR5TmFtZV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gY3VycmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Byb3BlcnR5TmFtZV0gPSBTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjdXJyZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKiBUaGUgZ2xvYmFsIGVycm9yIGhhbmRsZXIgZGVsZWdhdGUgKi9cbiAgICAgICAgICAgIHZhciBkZWxlZ2F0ZUhhbmRsZXIgPSBsb2dnaW5nRXJyb3JIYW5kbGVyKCk7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHVybiB0aGUgZ2xvYmFsIGVycm9yIGhhbmRsZXJcbiAgICAgICAgICAgICAqIEBwYXJhbSB7RXhjZXB0aW9ufSBleFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnbG9iYWxFcnJvckhhbmRsZXIoZXgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZUhhbmRsZXIoZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoX2EpIHsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgVHJhY2VzU2FtcGxlclZhbHVlcztcbiAgICAgICAgICAgIChmdW5jdGlvbiAoVHJhY2VzU2FtcGxlclZhbHVlcykge1xuICAgICAgICAgICAgICAgIFRyYWNlc1NhbXBsZXJWYWx1ZXNbXCJBbHdheXNPZmZcIl0gPSBcImFsd2F5c19vZmZcIjtcbiAgICAgICAgICAgICAgICBUcmFjZXNTYW1wbGVyVmFsdWVzW1wiQWx3YXlzT25cIl0gPSBcImFsd2F5c19vblwiO1xuICAgICAgICAgICAgICAgIFRyYWNlc1NhbXBsZXJWYWx1ZXNbXCJQYXJlbnRCYXNlZEFsd2F5c09mZlwiXSA9IFwicGFyZW50YmFzZWRfYWx3YXlzX29mZlwiO1xuICAgICAgICAgICAgICAgIFRyYWNlc1NhbXBsZXJWYWx1ZXNbXCJQYXJlbnRCYXNlZEFsd2F5c09uXCJdID0gXCJwYXJlbnRiYXNlZF9hbHdheXNfb25cIjtcbiAgICAgICAgICAgICAgICBUcmFjZXNTYW1wbGVyVmFsdWVzW1wiUGFyZW50QmFzZWRUcmFjZUlkUmF0aW9cIl0gPSBcInBhcmVudGJhc2VkX3RyYWNlaWRyYXRpb1wiO1xuICAgICAgICAgICAgICAgIFRyYWNlc1NhbXBsZXJWYWx1ZXNbXCJUcmFjZUlkUmF0aW9cIl0gPSBcInRyYWNlaWRyYXRpb1wiO1xuICAgICAgICAgICAgfSkoVHJhY2VzU2FtcGxlclZhbHVlcyB8fCAoVHJhY2VzU2FtcGxlclZhbHVlcyA9IHt9KSk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgREVGQVVMVF9MSVNUX1NFUEFSQVRPUiA9ICcsJztcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW52aXJvbm1lbnQgaW50ZXJmYWNlIHRvIGRlZmluZSBhbGwgbmFtZXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIEVOVklST05NRU5UX0JPT0xFQU5fS0VZUyA9IFsnT1RFTF9TREtfRElTQUJMRUQnXTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRW52VmFyQUJvb2xlYW4oa2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChFTlZJUk9OTUVOVF9CT09MRUFOX0tFWVMuaW5kZXhPZihrZXkpID4gLTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIEVOVklST05NRU5UX05VTUJFUlNfS0VZUyA9IFtcbiAgICAgICAgICAgICAgICAnT1RFTF9CU1BfRVhQT1JUX1RJTUVPVVQnLFxuICAgICAgICAgICAgICAgICdPVEVMX0JTUF9NQVhfRVhQT1JUX0JBVENIX1NJWkUnLFxuICAgICAgICAgICAgICAgICdPVEVMX0JTUF9NQVhfUVVFVUVfU0laRScsXG4gICAgICAgICAgICAgICAgJ09URUxfQlNQX1NDSEVEVUxFX0RFTEFZJyxcbiAgICAgICAgICAgICAgICAnT1RFTF9CTFJQX0VYUE9SVF9USU1FT1VUJyxcbiAgICAgICAgICAgICAgICAnT1RFTF9CTFJQX01BWF9FWFBPUlRfQkFUQ0hfU0laRScsXG4gICAgICAgICAgICAgICAgJ09URUxfQkxSUF9NQVhfUVVFVUVfU0laRScsXG4gICAgICAgICAgICAgICAgJ09URUxfQkxSUF9TQ0hFRFVMRV9ERUxBWScsXG4gICAgICAgICAgICAgICAgJ09URUxfQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCcsXG4gICAgICAgICAgICAgICAgJ09URUxfQVRUUklCVVRFX0NPVU5UX0xJTUlUJyxcbiAgICAgICAgICAgICAgICAnT1RFTF9TUEFOX0FUVFJJQlVURV9WQUxVRV9MRU5HVEhfTElNSVQnLFxuICAgICAgICAgICAgICAgICdPVEVMX1NQQU5fQVRUUklCVVRFX0NPVU5UX0xJTUlUJyxcbiAgICAgICAgICAgICAgICAnT1RFTF9MT0dSRUNPUkRfQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCcsXG4gICAgICAgICAgICAgICAgJ09URUxfTE9HUkVDT1JEX0FUVFJJQlVURV9DT1VOVF9MSU1JVCcsXG4gICAgICAgICAgICAgICAgJ09URUxfU1BBTl9FVkVOVF9DT1VOVF9MSU1JVCcsXG4gICAgICAgICAgICAgICAgJ09URUxfU1BBTl9MSU5LX0NPVU5UX0xJTUlUJyxcbiAgICAgICAgICAgICAgICAnT1RFTF9TUEFOX0FUVFJJQlVURV9QRVJfRVZFTlRfQ09VTlRfTElNSVQnLFxuICAgICAgICAgICAgICAgICdPVEVMX1NQQU5fQVRUUklCVVRFX1BFUl9MSU5LX0NPVU5UX0xJTUlUJyxcbiAgICAgICAgICAgICAgICAnT1RFTF9FWFBPUlRFUl9PVExQX1RJTUVPVVQnLFxuICAgICAgICAgICAgICAgICdPVEVMX0VYUE9SVEVSX09UTFBfVFJBQ0VTX1RJTUVPVVQnLFxuICAgICAgICAgICAgICAgICdPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19USU1FT1VUJyxcbiAgICAgICAgICAgICAgICAnT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfVElNRU9VVCcsXG4gICAgICAgICAgICAgICAgJ09URUxfRVhQT1JURVJfSkFFR0VSX0FHRU5UX1BPUlQnLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzRW52VmFyQU51bWJlcihrZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKEVOVklST05NRU5UX05VTUJFUlNfS0VZUy5pbmRleE9mKGtleSkgPiAtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgRU5WSVJPTk1FTlRfTElTVFNfS0VZUyA9IFtcbiAgICAgICAgICAgICAgICAnT1RFTF9OT19QQVRDSF9NT0RVTEVTJyxcbiAgICAgICAgICAgICAgICAnT1RFTF9QUk9QQUdBVE9SUycsXG4gICAgICAgICAgICAgICAgJ09URUxfU0VNQ09OVl9TVEFCSUxJVFlfT1BUX0lOJyxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0VudlZhckFMaXN0KGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBFTlZJUk9OTUVOVF9MSVNUU19LRVlTLmluZGV4T2Yoa2V5KSA+IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIERFRkFVTFRfQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCA9IEluZmluaXR5O1xuICAgICAgICAgICAgdmFyIERFRkFVTFRfQVRUUklCVVRFX0NPVU5UX0xJTUlUID0gMTI4O1xuICAgICAgICAgICAgdmFyIERFRkFVTFRfU1BBTl9BVFRSSUJVVEVfUEVSX0VWRU5UX0NPVU5UX0xJTUlUID0gMTI4O1xuICAgICAgICAgICAgdmFyIERFRkFVTFRfU1BBTl9BVFRSSUJVVEVfUEVSX0xJTktfQ09VTlRfTElNSVQgPSAxMjg7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlZmF1bHQgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBERUZBVUxUX0VOVklST05NRU5UID0ge1xuICAgICAgICAgICAgICAgIE9URUxfU0RLX0RJU0FCTEVEOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBDT05UQUlORVJfTkFNRTogJycsXG4gICAgICAgICAgICAgICAgRUNTX0NPTlRBSU5FUl9NRVRBREFUQV9VUklfVjQ6ICcnLFxuICAgICAgICAgICAgICAgIEVDU19DT05UQUlORVJfTUVUQURBVEFfVVJJOiAnJyxcbiAgICAgICAgICAgICAgICBIT1NUTkFNRTogJycsXG4gICAgICAgICAgICAgICAgS1VCRVJORVRFU19TRVJWSUNFX0hPU1Q6ICcnLFxuICAgICAgICAgICAgICAgIE5BTUVTUEFDRTogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9CU1BfRVhQT1JUX1RJTUVPVVQ6IDMwMDAwLFxuICAgICAgICAgICAgICAgIE9URUxfQlNQX01BWF9FWFBPUlRfQkFUQ0hfU0laRTogNTEyLFxuICAgICAgICAgICAgICAgIE9URUxfQlNQX01BWF9RVUVVRV9TSVpFOiAyMDQ4LFxuICAgICAgICAgICAgICAgIE9URUxfQlNQX1NDSEVEVUxFX0RFTEFZOiA1MDAwLFxuICAgICAgICAgICAgICAgIE9URUxfQkxSUF9FWFBPUlRfVElNRU9VVDogMzAwMDAsXG4gICAgICAgICAgICAgICAgT1RFTF9CTFJQX01BWF9FWFBPUlRfQkFUQ0hfU0laRTogNTEyLFxuICAgICAgICAgICAgICAgIE9URUxfQkxSUF9NQVhfUVVFVUVfU0laRTogMjA0OCxcbiAgICAgICAgICAgICAgICBPVEVMX0JMUlBfU0NIRURVTEVfREVMQVk6IDUwMDAsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9KQUVHRVJfQUdFTlRfSE9TVDogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9KQUVHRVJfQUdFTlRfUE9SVDogNjgzMixcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX0pBRUdFUl9FTkRQT0lOVDogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9KQUVHRVJfUEFTU1dPUkQ6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfSkFFR0VSX1VTRVI6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9FTkRQT0lOVDogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX1RSQUNFU19FTkRQT0lOVDogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfRU5EUE9JTlQ6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0VORFBPSU5UOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfSEVBREVSUzogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX1RSQUNFU19IRUFERVJTOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19IRUFERVJTOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19IRUFERVJTOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfVElNRU9VVDogMTAwMDAsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX1RSQUNFU19USU1FT1VUOiAxMDAwMCxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19USU1FT1VUOiAxMDAwMCxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19USU1FT1VUOiAxMDAwMCxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX1pJUEtJTl9FTkRQT0lOVDogJ2h0dHA6Ly9sb2NhbGhvc3Q6OTQxMS9hcGkvdjIvc3BhbnMnLFxuICAgICAgICAgICAgICAgIE9URUxfTE9HX0xFVkVMOiBhcGkuRGlhZ0xvZ0xldmVsLklORk8sXG4gICAgICAgICAgICAgICAgT1RFTF9OT19QQVRDSF9NT0RVTEVTOiBbXSxcbiAgICAgICAgICAgICAgICBPVEVMX1BST1BBR0FUT1JTOiBbJ3RyYWNlY29udGV4dCcsICdiYWdnYWdlJ10sXG4gICAgICAgICAgICAgICAgT1RFTF9SRVNPVVJDRV9BVFRSSUJVVEVTOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX1NFUlZJQ0VfTkFNRTogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlUOiBERUZBVUxUX0FUVFJJQlVURV9WQUxVRV9MRU5HVEhfTElNSVQsXG4gICAgICAgICAgICAgICAgT1RFTF9BVFRSSUJVVEVfQ09VTlRfTElNSVQ6IERFRkFVTFRfQVRUUklCVVRFX0NPVU5UX0xJTUlULFxuICAgICAgICAgICAgICAgIE9URUxfU1BBTl9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlUOiBERUZBVUxUX0FUVFJJQlVURV9WQUxVRV9MRU5HVEhfTElNSVQsXG4gICAgICAgICAgICAgICAgT1RFTF9TUEFOX0FUVFJJQlVURV9DT1VOVF9MSU1JVDogREVGQVVMVF9BVFRSSUJVVEVfQ09VTlRfTElNSVQsXG4gICAgICAgICAgICAgICAgT1RFTF9MT0dSRUNPUkRfQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVDogREVGQVVMVF9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlULFxuICAgICAgICAgICAgICAgIE9URUxfTE9HUkVDT1JEX0FUVFJJQlVURV9DT1VOVF9MSU1JVDogREVGQVVMVF9BVFRSSUJVVEVfQ09VTlRfTElNSVQsXG4gICAgICAgICAgICAgICAgT1RFTF9TUEFOX0VWRU5UX0NPVU5UX0xJTUlUOiAxMjgsXG4gICAgICAgICAgICAgICAgT1RFTF9TUEFOX0xJTktfQ09VTlRfTElNSVQ6IDEyOCxcbiAgICAgICAgICAgICAgICBPVEVMX1NQQU5fQVRUUklCVVRFX1BFUl9FVkVOVF9DT1VOVF9MSU1JVDogREVGQVVMVF9TUEFOX0FUVFJJQlVURV9QRVJfRVZFTlRfQ09VTlRfTElNSVQsXG4gICAgICAgICAgICAgICAgT1RFTF9TUEFOX0FUVFJJQlVURV9QRVJfTElOS19DT1VOVF9MSU1JVDogREVGQVVMVF9TUEFOX0FUVFJJQlVURV9QRVJfTElOS19DT1VOVF9MSU1JVCxcbiAgICAgICAgICAgICAgICBPVEVMX1RSQUNFU19FWFBPUlRFUjogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9UUkFDRVNfU0FNUExFUjogVHJhY2VzU2FtcGxlclZhbHVlcy5QYXJlbnRCYXNlZEFsd2F5c09uLFxuICAgICAgICAgICAgICAgIE9URUxfVFJBQ0VTX1NBTVBMRVJfQVJHOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0xPR1NfRVhQT1JURVI6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9JTlNFQ1VSRTogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX1RSQUNFU19JTlNFQ1VSRTogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfSU5TRUNVUkU6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0lOU0VDVVJFOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfQ0VSVElGSUNBVEU6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9UUkFDRVNfQ0VSVElGSUNBVEU6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX0NFUlRJRklDQVRFOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19DRVJUSUZJQ0FURTogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX0NPTVBSRVNTSU9OOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfVFJBQ0VTX0NPTVBSRVNTSU9OOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19DT01QUkVTU0lPTjogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfQ09NUFJFU1NJT046ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9DTElFTlRfS0VZOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfVFJBQ0VTX0NMSUVOVF9LRVk6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX0NMSUVOVF9LRVk6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0NMSUVOVF9LRVk6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9DTElFTlRfQ0VSVElGSUNBVEU6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9UUkFDRVNfQ0xJRU5UX0NFUlRJRklDQVRFOiAnJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19DTElFTlRfQ0VSVElGSUNBVEU6ICcnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0NMSUVOVF9DRVJUSUZJQ0FURTogJycsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX1BST1RPQ09MOiAnaHR0cC9wcm90b2J1ZicsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX1RSQUNFU19QUk9UT0NPTDogJ2h0dHAvcHJvdG9idWYnLFxuICAgICAgICAgICAgICAgIE9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX1BST1RPQ09MOiAnaHR0cC9wcm90b2J1ZicsXG4gICAgICAgICAgICAgICAgT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfUFJPVE9DT0w6ICdodHRwL3Byb3RvYnVmJyxcbiAgICAgICAgICAgICAgICBPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19URU1QT1JBTElUWV9QUkVGRVJFTkNFOiAnY3VtdWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgT1RFTF9TRU1DT05WX1NUQUJJTElUWV9PUFRfSU46IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQHBhcmFtIGtleVxuICAgICAgICAgICAgICogQHBhcmFtIGVudmlyb25tZW50XG4gICAgICAgICAgICAgKiBAcGFyYW0gdmFsdWVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlQm9vbGVhbihrZXksIGVudmlyb25tZW50LCB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IFN0cmluZyh2YWx1ZXNba2V5XSk7XG4gICAgICAgICAgICAgICAgLy8gc3VwcG9ydCBjYXNlLWluc2Vuc2l0aXZlIFwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRba2V5XSA9IHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGFyc2VzIGEgdmFyaWFibGUgYXMgbnVtYmVyIHdpdGggbnVtYmVyIHZhbGlkYXRpb25cbiAgICAgICAgICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICAgICAgICAgKiBAcGFyYW0gZW52aXJvbm1lbnRcbiAgICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZXNcbiAgICAgICAgICAgICAqIEBwYXJhbSBtaW5cbiAgICAgICAgICAgICAqIEBwYXJhbSBtYXhcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VOdW1iZXIobmFtZSwgZW52aXJvbm1lbnQsIHZhbHVlcywgbWluLCBtYXgpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSB2b2lkIDApIHsgbWluID0gLUluZmluaXR5OyB9XG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PT0gdm9pZCAwKSB7IG1heCA9IEluZmluaXR5OyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZXNbbmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IE51bWJlcih2YWx1ZXNbbmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgbWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRbbmFtZV0gPSBtaW47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50W25hbWVdID0gbWF4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGFyc2VzIGxpc3QtbGlrZSBzdHJpbmdzIGZyb20gaW5wdXQgaW50byBvdXRwdXQuXG4gICAgICAgICAgICAgKiBAcGFyYW0gbmFtZVxuICAgICAgICAgICAgICogQHBhcmFtIGVudmlyb25tZW50XG4gICAgICAgICAgICAgKiBAcGFyYW0gdmFsdWVzXG4gICAgICAgICAgICAgKiBAcGFyYW0gc2VwYXJhdG9yXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlU3RyaW5nTGlzdChuYW1lLCBvdXRwdXQsIGlucHV0LCBzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VwYXJhdG9yID09PSB2b2lkIDApIHsgc2VwYXJhdG9yID0gREVGQVVMVF9MSVNUX1NFUEFSQVRPUjsgfVxuICAgICAgICAgICAgICAgIHZhciBnaXZlblZhbHVlID0gaW5wdXRbbmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBnaXZlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRbbmFtZV0gPSBnaXZlblZhbHVlLnNwbGl0KHNlcGFyYXRvcikubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LnRyaW0oKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIHN1cHBvcnQgc3RyaW5nIC0+IERpYWdMb2dMZXZlbCBtYXBwaW5nc1xuICAgICAgICAgICAgdmFyIGxvZ0xldmVsTWFwID0ge1xuICAgICAgICAgICAgICAgIEFMTDogYXBpLkRpYWdMb2dMZXZlbC5BTEwsXG4gICAgICAgICAgICAgICAgVkVSQk9TRTogYXBpLkRpYWdMb2dMZXZlbC5WRVJCT1NFLFxuICAgICAgICAgICAgICAgIERFQlVHOiBhcGkuRGlhZ0xvZ0xldmVsLkRFQlVHLFxuICAgICAgICAgICAgICAgIElORk86IGFwaS5EaWFnTG9nTGV2ZWwuSU5GTyxcbiAgICAgICAgICAgICAgICBXQVJOOiBhcGkuRGlhZ0xvZ0xldmVsLldBUk4sXG4gICAgICAgICAgICAgICAgRVJST1I6IGFwaS5EaWFnTG9nTGV2ZWwuRVJST1IsXG4gICAgICAgICAgICAgICAgTk9ORTogYXBpLkRpYWdMb2dMZXZlbC5OT05FLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW52aXJvbm1lbnRhbGx5IHNldHMgbG9nIGxldmVsIGlmIHZhbGlkIGxvZyBsZXZlbCBzdHJpbmcgaXMgcHJvdmlkZWRcbiAgICAgICAgICAgICAqIEBwYXJhbSBrZXlcbiAgICAgICAgICAgICAqIEBwYXJhbSBlbnZpcm9ubWVudFxuICAgICAgICAgICAgICogQHBhcmFtIHZhbHVlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRMb2dMZXZlbEZyb21FbnYoa2V5LCBlbnZpcm9ubWVudCwgdmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoZUxldmVsID0gbG9nTGV2ZWxNYXBbdmFsdWUudG9VcHBlckNhc2UoKV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVMZXZlbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudFtrZXldID0gdGhlTGV2ZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFBhcnNlcyBlbnZpcm9ubWVudCB2YWx1ZXNcbiAgICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZXNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VFbnZpcm9ubWVudCh2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW52aXJvbm1lbnQgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBlbnYgaW4gREVGQVVMVF9FTlZJUk9OTUVOVCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gZW52O1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnT1RFTF9MT0dfTEVWRUwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldExvZ0xldmVsRnJvbUVudihrZXksIGVudmlyb25tZW50LCB2YWx1ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNFbnZWYXJBQm9vbGVhbihrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlQm9vbGVhbihrZXksIGVudmlyb25tZW50LCB2YWx1ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0VudlZhckFOdW1iZXIoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZU51bWJlcihrZXksIGVudmlyb25tZW50LCB2YWx1ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0VudlZhckFMaXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdHJpbmdMaXN0KGtleSwgZW52aXJvbm1lbnQsIHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50W2tleV0gPSBTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlbnZpcm9ubWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0cyB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEVudigpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc0VudiA9IHBhcnNlRW52aXJvbm1lbnQocHJvY2Vzcy5lbnYpO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0VOVklST05NRU5ULCBwcm9jZXNzRW52KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEVudldpdGhvdXREZWZhdWx0cygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VFbnZpcm9ubWVudChwcm9jZXNzLmVudik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1hbmNlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZU9yaWdpbjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdzogKCkgPT4gRGF0ZS5ub3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgb3RwZXJmb3JtYW5jZSA9IHBlcmZvcm1hbmNlO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBhdXRvZ2VuZXJhdGVkIGZpbGUsIHNlZSBzY3JpcHRzL3ZlcnNpb24tdXBkYXRlLmpzXG4gICAgICAgICAgICB2YXIgVkVSU0lPTiQxID0gJzEuMjkuMCc7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAvKiogQ29uc3RhbnRzIGRlc2NyaWJpbmcgdGhlIFNESyBpbiB1c2UgKi9cbiAgICAgICAgICAgIHZhciBTREtfSU5GTyA9IChfYSA9IHt9LFxuICAgICAgICAgICAgICAgIF9hW1NFTVJFU0FUVFJTX1RFTEVNRVRSWV9TREtfTkFNRV0gPSAnb3BlbnRlbGVtZXRyeScsXG4gICAgICAgICAgICAgICAgX2FbU0VNUkVTQVRUUlNfUFJPQ0VTU19SVU5USU1FX05BTUVdID0gJ25vZGUnLFxuICAgICAgICAgICAgICAgIF9hW1NFTVJFU0FUVFJTX1RFTEVNRVRSWV9TREtfTEFOR1VBR0VdID0gVEVMRU1FVFJZU0RLTEFOR1VBR0VWQUxVRVNfTk9ERUpTLFxuICAgICAgICAgICAgICAgIF9hW1NFTVJFU0FUVFJTX1RFTEVNRVRSWV9TREtfVkVSU0lPTl0gPSBWRVJTSU9OJDEsXG4gICAgICAgICAgICAgICAgX2EpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gdW5yZWZUaW1lcih0aW1lcikge1xuICAgICAgICAgICAgICAgIHRpbWVyLnVucmVmKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgTkFOT1NFQ09ORF9ESUdJVFMgPSA5O1xuICAgICAgICAgICAgdmFyIE5BTk9TRUNPTkRfRElHSVRTX0lOX01JTExJUyA9IDY7XG4gICAgICAgICAgICB2YXIgTUlMTElTRUNPTkRTX1RPX05BTk9TRUNPTkRTID0gTWF0aC5wb3coMTAsIE5BTk9TRUNPTkRfRElHSVRTX0lOX01JTExJUyk7XG4gICAgICAgICAgICB2YXIgU0VDT05EX1RPX05BTk9TRUNPTkRTID0gTWF0aC5wb3coMTAsIE5BTk9TRUNPTkRfRElHSVRTKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gZXBvY2ggdG8gSHJUaW1lKFtzZWNvbmRzLCByZW1haW5kZXIgaW4gbmFub3NlY29uZHNdKS5cbiAgICAgICAgICAgICAqIEBwYXJhbSBlcG9jaE1pbGxpc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBtaWxsaXNUb0hyVGltZShlcG9jaE1pbGxpcykge1xuICAgICAgICAgICAgICAgIHZhciBlcG9jaFNlY29uZHMgPSBlcG9jaE1pbGxpcyAvIDEwMDA7XG4gICAgICAgICAgICAgICAgLy8gRGVjaW1hbHMgb25seS5cbiAgICAgICAgICAgICAgICB2YXIgc2Vjb25kcyA9IE1hdGgudHJ1bmMoZXBvY2hTZWNvbmRzKTtcbiAgICAgICAgICAgICAgICAvLyBSb3VuZCBzdWItbmFub3NlY29uZCBhY2N1cmFjeSB0byBuYW5vc2Vjb25kLlxuICAgICAgICAgICAgICAgIHZhciBuYW5vcyA9IE1hdGgucm91bmQoKGVwb2NoTWlsbGlzICUgMTAwMCkgKiBNSUxMSVNFQ09ORFNfVE9fTkFOT1NFQ09ORFMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbc2Vjb25kcywgbmFub3NdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VGltZU9yaWdpbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGltZU9yaWdpbiA9IG90cGVyZm9ybWFuY2UudGltZU9yaWdpbjtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGltZU9yaWdpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyBhbiBocnRpbWUgY2FsY3VsYXRlZCB2aWEgcGVyZm9ybWFuY2UgY29tcG9uZW50LlxuICAgICAgICAgICAgICogQHBhcmFtIHBlcmZvcm1hbmNlTm93XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhyVGltZShwZXJmb3JtYW5jZU5vdykge1xuICAgICAgICAgICAgICAgIHZhciB0aW1lT3JpZ2luID0gbWlsbGlzVG9IclRpbWUoZ2V0VGltZU9yaWdpbigpKTtcbiAgICAgICAgICAgICAgICB2YXIgbm93ID0gbWlsbGlzVG9IclRpbWUodHlwZW9mIHBlcmZvcm1hbmNlTm93ID09PSAnbnVtYmVyJyA/IHBlcmZvcm1hbmNlTm93IDogb3RwZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZEhyVGltZXModGltZU9yaWdpbiwgbm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyBhIGR1cmF0aW9uIG9mIHR3byBoclRpbWUuXG4gICAgICAgICAgICAgKiBAcGFyYW0gc3RhcnRUaW1lXG4gICAgICAgICAgICAgKiBAcGFyYW0gZW5kVGltZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBoclRpbWVEdXJhdGlvbihzdGFydFRpbWUsIGVuZFRpbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2Vjb25kcyA9IGVuZFRpbWVbMF0gLSBzdGFydFRpbWVbMF07XG4gICAgICAgICAgICAgICAgdmFyIG5hbm9zID0gZW5kVGltZVsxXSAtIHN0YXJ0VGltZVsxXTtcbiAgICAgICAgICAgICAgICAvLyBvdmVyZmxvd1xuICAgICAgICAgICAgICAgIGlmIChuYW5vcyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyAtPSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBuZWdhdGVcbiAgICAgICAgICAgICAgICAgICAgbmFub3MgKz0gU0VDT05EX1RPX05BTk9TRUNPTkRTO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gW3NlY29uZHMsIG5hbm9zXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogY2hlY2sgaWYgdGltZSBpcyBIclRpbWVcbiAgICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBpc1RpbWVJbnB1dEhyVGltZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUubGVuZ3RoID09PSAyICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlWzFdID09PSAnbnVtYmVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGNoZWNrIGlmIGlucHV0IHZhbHVlIGlzIGEgY29ycmVjdCB0eXBlcy5UaW1lSW5wdXRcbiAgICAgICAgICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBpc1RpbWVJbnB1dCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoaXNUaW1lSW5wdXRIclRpbWUodmFsdWUpIHx8XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBEYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2l2ZW4gMiBIclRpbWUgZm9ybWF0dGVkIHRpbWVzLCByZXR1cm4gdGhlaXIgc3VtIGFzIGFuIEhyVGltZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gYWRkSHJUaW1lcyh0aW1lMSwgdGltZTIpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3V0ID0gW3RpbWUxWzBdICsgdGltZTJbMF0sIHRpbWUxWzFdICsgdGltZTJbMV1dO1xuICAgICAgICAgICAgICAgIC8vIE5hbm9zZWNvbmRzXG4gICAgICAgICAgICAgICAgaWYgKG91dFsxXSA+PSBTRUNPTkRfVE9fTkFOT1NFQ09ORFMpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0WzFdIC09IFNFQ09ORF9UT19OQU5PU0VDT05EUztcbiAgICAgICAgICAgICAgICAgICAgb3V0WzBdICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgRXhwb3J0UmVzdWx0Q29kZTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoRXhwb3J0UmVzdWx0Q29kZSkge1xuICAgICAgICAgICAgICAgIEV4cG9ydFJlc3VsdENvZGVbRXhwb3J0UmVzdWx0Q29kZVtcIlNVQ0NFU1NcIl0gPSAwXSA9IFwiU1VDQ0VTU1wiO1xuICAgICAgICAgICAgICAgIEV4cG9ydFJlc3VsdENvZGVbRXhwb3J0UmVzdWx0Q29kZVtcIkZBSUxFRFwiXSA9IDFdID0gXCJGQUlMRURcIjtcbiAgICAgICAgICAgIH0pKEV4cG9ydFJlc3VsdENvZGUgfHwgKEV4cG9ydFJlc3VsdENvZGUgPSB7fSkpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIF9fdmFsdWVzJDIgPSAoZ2xvYmFsVGhpcyAmJiBnbG9iYWxUaGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICAgICAgICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICAgICAgICAgICAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKiogQ29tYmluZXMgbXVsdGlwbGUgcHJvcGFnYXRvcnMgaW50byBhIHNpbmdsZSBwcm9wYWdhdG9yLiAqL1xuICAgICAgICAgICAgdmFyIENvbXBvc2l0ZVByb3BhZ2F0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ29uc3RydWN0IGEgY29tcG9zaXRlIHByb3BhZ2F0b3IgZnJvbSBhIGxpc3Qgb2YgcHJvcGFnYXRvcnMuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gW2NvbmZpZ10gQ29uZmlndXJhdGlvbiBvYmplY3QgZm9yIGNvbXBvc2l0ZSBwcm9wYWdhdG9yXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gQ29tcG9zaXRlUHJvcGFnYXRvcihjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7IGNvbmZpZyA9IHt9OyB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvcGFnYXRvcnMgPSAoX2EgPSBjb25maWcucHJvcGFnYXRvcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWVsZHMgPSBBcnJheS5mcm9tKG5ldyBTZXQodGhpcy5fcHJvcGFnYXRvcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9sZGVyIHByb3BhZ2F0b3JzIG1heSBub3QgaGF2ZSBmaWVsZHMgZnVuY3Rpb24sIG51bGwgY2hlY2sgdG8gYmUgc3VyZVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocCkgeyByZXR1cm4gKHR5cGVvZiBwLmZpZWxkcyA9PT0gJ2Z1bmN0aW9uJyA/IHAuZmllbGRzKCkgOiBbXSk7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiB4LmNvbmNhdCh5KTsgfSwgW10pKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFJ1biBlYWNoIG9mIHRoZSBjb25maWd1cmVkIHByb3BhZ2F0b3JzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGNhcnJpZXIuXG4gICAgICAgICAgICAgICAgICogUHJvcGFnYXRvcnMgYXJlIHJ1biBpbiB0aGUgb3JkZXIgdGhleSBhcmUgY29uZmlndXJlZCwgc28gaWYgbXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgKiBwcm9wYWdhdG9ycyB3cml0ZSB0aGUgc2FtZSBjYXJyaWVyIGtleSwgdGhlIHByb3BhZ2F0b3IgbGF0ZXIgaW4gdGhlIGxpc3RcbiAgICAgICAgICAgICAgICAgKiB3aWxsIFwid2luXCIuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gY29udGV4dCBDb250ZXh0IHRvIGluamVjdFxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBjYXJyaWVyIENhcnJpZXIgaW50byB3aGljaCBjb250ZXh0IHdpbGwgYmUgaW5qZWN0ZWRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBDb21wb3NpdGVQcm9wYWdhdG9yLnByb3RvdHlwZS5pbmplY3QgPSBmdW5jdGlvbiAoY29udGV4dCwgY2Fycmllciwgc2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyQyKHRoaXMuX3Byb3BhZ2F0b3JzKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wYWdhdG9yID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGFnYXRvci5pbmplY3QoY29udGV4dCwgY2Fycmllciwgc2V0dGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkuZGlhZy53YXJuKFwiRmFpbGVkIHRvIGluamVjdCB3aXRoIFwiICsgcHJvcGFnYXRvci5jb25zdHJ1Y3Rvci5uYW1lICsgXCIuIEVycjogXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFJ1biBlYWNoIG9mIHRoZSBjb25maWd1cmVkIHByb3BhZ2F0b3JzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGNhcnJpZXIuXG4gICAgICAgICAgICAgICAgICogUHJvcGFnYXRvcnMgYXJlIHJ1biBpbiB0aGUgb3JkZXIgdGhleSBhcmUgY29uZmlndXJlZCwgc28gaWYgbXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgKiBwcm9wYWdhdG9ycyB3cml0ZSB0aGUgc2FtZSBjb250ZXh0IGtleSwgdGhlIHByb3BhZ2F0b3IgbGF0ZXIgaW4gdGhlIGxpc3RcbiAgICAgICAgICAgICAgICAgKiB3aWxsIFwid2luXCIuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gY29udGV4dCBDb250ZXh0IHRvIGFkZCB2YWx1ZXMgdG9cbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gY2FycmllciBDYXJyaWVyIGZyb20gd2hpY2ggdG8gZXh0cmFjdCBjb250ZXh0XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlUHJvcGFnYXRvci5wcm90b3R5cGUuZXh0cmFjdCA9IGZ1bmN0aW9uIChjb250ZXh0LCBjYXJyaWVyLCBnZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BhZ2F0b3JzLnJlZHVjZShmdW5jdGlvbiAoY3R4LCBwcm9wYWdhdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wYWdhdG9yLmV4dHJhY3QoY3R4LCBjYXJyaWVyLCBnZXR0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLndhcm4oXCJGYWlsZWQgdG8gZXh0cmFjdCB3aXRoIFwiICsgcHJvcGFnYXRvci5jb25zdHJ1Y3Rvci5uYW1lICsgXCIuIEVycjogXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3R4O1xuICAgICAgICAgICAgICAgICAgICB9LCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIENvbXBvc2l0ZVByb3BhZ2F0b3IucHJvdG90eXBlLmZpZWxkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIGEgbmV3IGFycmF5IHNvIG91ciBmaWVsZHMgY2Fubm90IGJlIG1vZGlmaWVkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWVsZHMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBDb21wb3NpdGVQcm9wYWdhdG9yO1xuICAgICAgICAgICAgfSgpKTtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBWQUxJRF9LRVlfQ0hBUl9SQU5HRSA9ICdbXzAtOWEtei0qL10nO1xuICAgICAgICAgICAgdmFyIFZBTElEX0tFWSA9IFwiW2Etel1cIiArIFZBTElEX0tFWV9DSEFSX1JBTkdFICsgXCJ7MCwyNTV9XCI7XG4gICAgICAgICAgICB2YXIgVkFMSURfVkVORE9SX0tFWSA9IFwiW2EtejAtOV1cIiArIFZBTElEX0tFWV9DSEFSX1JBTkdFICsgXCJ7MCwyNDB9QFthLXpdXCIgKyBWQUxJRF9LRVlfQ0hBUl9SQU5HRSArIFwiezAsMTN9XCI7XG4gICAgICAgICAgICB2YXIgVkFMSURfS0VZX1JFR0VYID0gbmV3IFJlZ0V4cChcIl4oPzpcIiArIFZBTElEX0tFWSArIFwifFwiICsgVkFMSURfVkVORE9SX0tFWSArIFwiKSRcIik7XG4gICAgICAgICAgICB2YXIgVkFMSURfVkFMVUVfQkFTRV9SRUdFWCA9IC9eWyAtfl17MCwyNTV9WyEtfl0kLztcbiAgICAgICAgICAgIHZhciBJTlZBTElEX1ZBTFVFX0NPTU1BX0VRVUFMX1JFR0VYID0gLyx8PS87XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEtleSBpcyBvcGFxdWUgc3RyaW5nIHVwIHRvIDI1NiBjaGFyYWN0ZXJzIHByaW50YWJsZS4gSXQgTVVTVCBiZWdpbiB3aXRoIGFcbiAgICAgICAgICAgICAqIGxvd2VyY2FzZSBsZXR0ZXIsIGFuZCBjYW4gb25seSBjb250YWluIGxvd2VyY2FzZSBsZXR0ZXJzIGEteiwgZGlnaXRzIDAtOSxcbiAgICAgICAgICAgICAqIHVuZGVyc2NvcmVzIF8sIGRhc2hlcyAtLCBhc3Rlcmlza3MgKiwgYW5kIGZvcndhcmQgc2xhc2hlcyAvLlxuICAgICAgICAgICAgICogRm9yIG11bHRpLXRlbmFudCB2ZW5kb3Igc2NlbmFyaW9zLCBhbiBhdCBzaWduIChAKSBjYW4gYmUgdXNlZCB0byBwcmVmaXggdGhlXG4gICAgICAgICAgICAgKiB2ZW5kb3IgbmFtZS4gVmVuZG9ycyBTSE9VTEQgc2V0IHRoZSB0ZW5hbnQgSUQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUga2V5LlxuICAgICAgICAgICAgICogc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi90cmFjZS1jb250ZXh0LyNrZXlcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVLZXkoa2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFZBTElEX0tFWV9SRUdFWC50ZXN0KGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZhbHVlIGlzIG9wYXF1ZSBzdHJpbmcgdXAgdG8gMjU2IGNoYXJhY3RlcnMgcHJpbnRhYmxlIEFTQ0lJIFJGQzAwMjBcbiAgICAgICAgICAgICAqIGNoYXJhY3RlcnMgKGkuZS4sIHRoZSByYW5nZSAweDIwIHRvIDB4N0UpIGV4Y2VwdCBjb21tYSAsIGFuZCA9LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChWQUxJRF9WQUxVRV9CQVNFX1JFR0VYLnRlc3QodmFsdWUpICYmXG4gICAgICAgICAgICAgICAgICAgICFJTlZBTElEX1ZBTFVFX0NPTU1BX0VRVUFMX1JFR0VYLnRlc3QodmFsdWUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBNQVhfVFJBQ0VfU1RBVEVfSVRFTVMgPSAzMjtcbiAgICAgICAgICAgIHZhciBNQVhfVFJBQ0VfU1RBVEVfTEVOID0gNTEyO1xuICAgICAgICAgICAgdmFyIExJU1RfTUVNQkVSU19TRVBBUkFUT1IgPSAnLCc7XG4gICAgICAgICAgICB2YXIgTElTVF9NRU1CRVJfS0VZX1ZBTFVFX1NQTElUVEVSID0gJz0nO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUcmFjZVN0YXRlIG11c3QgYmUgYSBjbGFzcyBhbmQgbm90IGEgc2ltcGxlIG9iamVjdCB0eXBlIGJlY2F1c2Ugb2YgdGhlIHNwZWNcbiAgICAgICAgICAgICAqIHJlcXVpcmVtZW50IChodHRwczovL3d3dy53My5vcmcvVFIvdHJhY2UtY29udGV4dC8jdHJhY2VzdGF0ZS1maWVsZCkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogSGVyZSBpcyB0aGUgbGlzdCBvZiBhbGxvd2VkIG11dGF0aW9uczpcbiAgICAgICAgICAgICAqIC0gTmV3IGtleS12YWx1ZSBwYWlyIHNob3VsZCBiZSBhZGRlZCBpbnRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3RcbiAgICAgICAgICAgICAqIC0gVGhlIHZhbHVlIG9mIGFueSBrZXkgY2FuIGJlIHVwZGF0ZWQuIE1vZGlmaWVkIGtleXMgTVVTVCBiZSBtb3ZlZCB0byB0aGVcbiAgICAgICAgICAgICAqIGJlZ2lubmluZyBvZiB0aGUgbGlzdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIFRyYWNlU3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gVHJhY2VTdGF0ZShyYXdUcmFjZVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdUcmFjZVN0YXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyc2UocmF3VHJhY2VTdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFRyYWNlU3RhdGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IEJlbmNobWFyayB0aGUgZGlmZmVyZW50IGFwcHJvYWNoZXMobWFwIHZzIGxpc3QpIGFuZFxuICAgICAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIGZhc3RlciBvbmUuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFjZVN0YXRlID0gdGhpcy5fY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNlU3RhdGUuX2ludGVybmFsU3RhdGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlU3RhdGUuX2ludGVybmFsU3RhdGUuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJhY2VTdGF0ZS5faW50ZXJuYWxTdGF0ZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFjZVN0YXRlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVHJhY2VTdGF0ZS5wcm90b3R5cGUudW5zZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFjZVN0YXRlID0gdGhpcy5fY2xvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2VTdGF0ZS5faW50ZXJuYWxTdGF0ZS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNlU3RhdGU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUcmFjZVN0YXRlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbFN0YXRlLmdldChrZXkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVHJhY2VTdGF0ZS5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fa2V5cygpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhZ2csIGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWdnLnB1c2goa2V5ICsgTElTVF9NRU1CRVJfS0VZX1ZBTFVFX1NQTElUVEVSICsgX3RoaXMuZ2V0KGtleSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFnZztcbiAgICAgICAgICAgICAgICAgICAgfSwgW10pXG4gICAgICAgICAgICAgICAgICAgICAgICAuam9pbihMSVNUX01FTUJFUlNfU0VQQVJBVE9SKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRyYWNlU3RhdGUucHJvdG90eXBlLl9wYXJzZSA9IGZ1bmN0aW9uIChyYXdUcmFjZVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdUcmFjZVN0YXRlLmxlbmd0aCA+IE1BWF9UUkFDRV9TVEFURV9MRU4pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsU3RhdGUgPSByYXdUcmFjZVN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoTElTVF9NRU1CRVJTX1NFUEFSQVRPUilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXZlcnNlKCkgLy8gU3RvcmUgaW4gcmV2ZXJzZSBzbyBuZXcga2V5cyAoLnNldCguLi4pKSB3aWxsIGJlIHBsYWNlZCBhdCB0aGUgYmVnaW5uaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhZ2csIHBhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaXN0TWVtYmVyID0gcGFydC50cmltKCk7IC8vIE9wdGlvbmFsIFdoaXRlc3BhY2UgKE9XUykgaGFuZGxpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gbGlzdE1lbWJlci5pbmRleE9mKExJU1RfTUVNQkVSX0tFWV9WQUxVRV9TUExJVFRFUik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gbGlzdE1lbWJlci5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBsaXN0TWVtYmVyLnNsaWNlKGkgKyAxLCBwYXJ0Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRlS2V5KGtleSkgJiYgdmFsaWRhdGVWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdnLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWdnO1xuICAgICAgICAgICAgICAgICAgICB9LCBuZXcgTWFwKCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIG9mIHRoZSByZXZlcnNlKCkgcmVxdWlyZW1lbnQsIHRydW5jIG11c3QgYmUgZG9uZSBhZnRlciBtYXAgaXMgY3JlYXRlZFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW50ZXJuYWxTdGF0ZS5zaXplID4gTUFYX1RSQUNFX1NUQVRFX0lURU1TKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRlcm5hbFN0YXRlID0gbmV3IE1hcChBcnJheS5mcm9tKHRoaXMuX2ludGVybmFsU3RhdGUuZW50cmllcygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXZlcnNlKCkgLy8gVXNlIHJldmVyc2Ugc2FtZSBhcyBvcmlnaW5hbCB0cmFjZXN0YXRlIHBhcnNlIGNoYWluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKDAsIE1BWF9UUkFDRV9TVEFURV9JVEVNUykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUcmFjZVN0YXRlLnByb3RvdHlwZS5fa2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5faW50ZXJuYWxTdGF0ZS5rZXlzKCkpLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRyYWNlU3RhdGUucHJvdG90eXBlLl9jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNlU3RhdGUgPSBuZXcgVHJhY2VTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB0cmFjZVN0YXRlLl9pbnRlcm5hbFN0YXRlID0gbmV3IE1hcCh0aGlzLl9pbnRlcm5hbFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNlU3RhdGU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gVHJhY2VTdGF0ZTtcbiAgICAgICAgICAgIH0oKSk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgVFJBQ0VfUEFSRU5UX0hFQURFUiA9ICd0cmFjZXBhcmVudCc7XG4gICAgICAgICAgICB2YXIgVFJBQ0VfU1RBVEVfSEVBREVSID0gJ3RyYWNlc3RhdGUnO1xuICAgICAgICAgICAgdmFyIFZFUlNJT04gPSAnMDAnO1xuICAgICAgICAgICAgdmFyIFZFUlNJT05fUEFSVCA9ICcoPyFmZilbXFxcXGRhLWZdezJ9JztcbiAgICAgICAgICAgIHZhciBUUkFDRV9JRF9QQVJUID0gJyg/IVswXXszMn0pW1xcXFxkYS1mXXszMn0nO1xuICAgICAgICAgICAgdmFyIFBBUkVOVF9JRF9QQVJUID0gJyg/IVswXXsxNn0pW1xcXFxkYS1mXXsxNn0nO1xuICAgICAgICAgICAgdmFyIEZMQUdTX1BBUlQgPSAnW1xcXFxkYS1mXXsyfSc7XG4gICAgICAgICAgICB2YXIgVFJBQ0VfUEFSRU5UX1JFR0VYID0gbmV3IFJlZ0V4cChcIl5cXFxccz8oXCIgKyBWRVJTSU9OX1BBUlQgKyBcIiktKFwiICsgVFJBQ0VfSURfUEFSVCArIFwiKS0oXCIgKyBQQVJFTlRfSURfUEFSVCArIFwiKS0oXCIgKyBGTEFHU19QQVJUICsgXCIpKC0uKik/XFxcXHM/JFwiKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGFyc2VzIGluZm9ybWF0aW9uIGZyb20gdGhlIFt0cmFjZXBhcmVudF0gc3BhbiB0YWcgYW5kIGNvbnZlcnRzIGl0IGludG8ge0BsaW5rIFNwYW5Db250ZXh0fVxuICAgICAgICAgICAgICogQHBhcmFtIHRyYWNlUGFyZW50IC0gQSBtZXRhIHByb3BlcnR5IHRoYXQgY29tZXMgZnJvbSBzZXJ2ZXIuXG4gICAgICAgICAgICAgKiAgICAgSXQgc2hvdWxkIGJlIGR5bmFtaWNhbGx5IGdlbmVyYXRlZCBzZXJ2ZXIgc2lkZSB0byBoYXZlIHRoZSBzZXJ2ZXIncyByZXF1ZXN0IHRyYWNlIElkLFxuICAgICAgICAgICAgICogICAgIGEgcGFyZW50IHNwYW4gSWQgdGhhdCB3YXMgc2V0IG9uIHRoZSBzZXJ2ZXIncyByZXF1ZXN0IHNwYW4sXG4gICAgICAgICAgICAgKiAgICAgYW5kIHRoZSB0cmFjZSBmbGFncyB0byBpbmRpY2F0ZSB0aGUgc2VydmVyJ3Mgc2FtcGxpbmcgZGVjaXNpb25cbiAgICAgICAgICAgICAqICAgICAoMDEgPSBzYW1wbGVkLCAwMCA9IG5vdCBzYW1wbGVkKS5cbiAgICAgICAgICAgICAqICAgICBmb3IgZXhhbXBsZTogJ3t2ZXJzaW9ufS17dHJhY2VJZH0te3NwYW5JZH0te3NhbXBsZURlY2lzaW9ufSdcbiAgICAgICAgICAgICAqICAgICBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUge0BsaW5rIGh0dHBzOi8vd3d3LnczLm9yZy9UUi90cmFjZS1jb250ZXh0L31cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VUcmFjZVBhcmVudCh0cmFjZVBhcmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IFRSQUNFX1BBUkVOVF9SRUdFWC5leGVjKHRyYWNlUGFyZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoIW1hdGNoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gdGhlIGltcGxlbWVudGF0aW9uIHNob3VsZCBiZSBjb21wYXRpYmxlXG4gICAgICAgICAgICAgICAgLy8gd2l0aCBmdXR1cmUgdmVyc2lvbnMuIElmIHRoZXJlIGFyZSBtb3JlIHBhcnRzLCB3ZSBvbmx5IHJlamVjdCBpdCBpZiBpdCdzIHVzaW5nIHZlcnNpb24gMDBcbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3RyYWNlLWNvbnRleHQvI3ZlcnNpb25pbmctb2YtdHJhY2VwYXJlbnRcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMV0gPT09ICcwMCcgJiYgbWF0Y2hbNV0pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNlSWQ6IG1hdGNoWzJdLFxuICAgICAgICAgICAgICAgICAgICBzcGFuSWQ6IG1hdGNoWzNdLFxuICAgICAgICAgICAgICAgICAgICB0cmFjZUZsYWdzOiBwYXJzZUludChtYXRjaFs0XSwgMTYpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByb3BhZ2F0ZXMge0BsaW5rIFNwYW5Db250ZXh0fSB0aHJvdWdoIFRyYWNlIENvbnRleHQgZm9ybWF0IHByb3BhZ2F0aW9uLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEJhc2VkIG9uIHRoZSBUcmFjZSBDb250ZXh0IHNwZWNpZmljYXRpb246XG4gICAgICAgICAgICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvdHJhY2UtY29udGV4dC9cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIFczQ1RyYWNlQ29udGV4dFByb3BhZ2F0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gVzNDVHJhY2VDb250ZXh0UHJvcGFnYXRvcigpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgVzNDVHJhY2VDb250ZXh0UHJvcGFnYXRvci5wcm90b3R5cGUuaW5qZWN0ID0gZnVuY3Rpb24gKGNvbnRleHQsIGNhcnJpZXIsIHNldHRlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3BhbkNvbnRleHQgPSBhcGkudHJhY2UuZ2V0U3BhbkNvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3BhbkNvbnRleHQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVHJhY2luZ1N1cHByZXNzZWQoY29udGV4dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICFhcGkuaXNTcGFuQ29udGV4dFZhbGlkKHNwYW5Db250ZXh0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNlUGFyZW50ID0gVkVSU0lPTiArIFwiLVwiICsgc3BhbkNvbnRleHQudHJhY2VJZCArIFwiLVwiICsgc3BhbkNvbnRleHQuc3BhbklkICsgXCItMFwiICsgTnVtYmVyKHNwYW5Db250ZXh0LnRyYWNlRmxhZ3MgfHwgYXBpLlRyYWNlRmxhZ3MuTk9ORSkudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgICAgICAgICBzZXR0ZXIuc2V0KGNhcnJpZXIsIFRSQUNFX1BBUkVOVF9IRUFERVIsIHRyYWNlUGFyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwYW5Db250ZXh0LnRyYWNlU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRlci5zZXQoY2FycmllciwgVFJBQ0VfU1RBVEVfSEVBREVSLCBzcGFuQ29udGV4dC50cmFjZVN0YXRlLnNlcmlhbGl6ZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVzNDVHJhY2VDb250ZXh0UHJvcGFnYXRvci5wcm90b3R5cGUuZXh0cmFjdCA9IGZ1bmN0aW9uIChjb250ZXh0LCBjYXJyaWVyLCBnZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNlUGFyZW50SGVhZGVyID0gZ2V0dGVyLmdldChjYXJyaWVyLCBUUkFDRV9QQVJFTlRfSEVBREVSKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmFjZVBhcmVudEhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhY2VQYXJlbnQgPSBBcnJheS5pc0FycmF5KHRyYWNlUGFyZW50SGVhZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmFjZVBhcmVudEhlYWRlclswXVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0cmFjZVBhcmVudEhlYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0cmFjZVBhcmVudCAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwYW5Db250ZXh0ID0gcGFyc2VUcmFjZVBhcmVudCh0cmFjZVBhcmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3BhbkNvbnRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgc3BhbkNvbnRleHQuaXNSZW1vdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhY2VTdGF0ZUhlYWRlciA9IGdldHRlci5nZXQoY2FycmllciwgVFJBQ0VfU1RBVEVfSEVBREVSKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNlU3RhdGVIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG1vcmUgdGhhbiBvbmUgYHRyYWNlc3RhdGVgIGhlYWRlciBpcyBmb3VuZCwgd2UgbWVyZ2UgdGhlbSBpbnRvIGFcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNpbmdsZSBoZWFkZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBBcnJheS5pc0FycmF5KHRyYWNlU3RhdGVIZWFkZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0cmFjZVN0YXRlSGVhZGVyLmpvaW4oJywnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJhY2VTdGF0ZUhlYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5Db250ZXh0LnRyYWNlU3RhdGUgPSBuZXcgVHJhY2VTdGF0ZSh0eXBlb2Ygc3RhdGUgPT09ICdzdHJpbmcnID8gc3RhdGUgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGkudHJhY2Uuc2V0U3BhbkNvbnRleHQoY29udGV4dCwgc3BhbkNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgVzNDVHJhY2VDb250ZXh0UHJvcGFnYXRvci5wcm90b3R5cGUuZmllbGRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1RSQUNFX1BBUkVOVF9IRUFERVIsIFRSQUNFX1NUQVRFX0hFQURFUl07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gVzNDVHJhY2VDb250ZXh0UHJvcGFnYXRvcjtcbiAgICAgICAgICAgIH0oKSk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGJhc2VkIG9uIGxvZGFzaCBpbiBvcmRlciB0byBzdXBwb3J0IGVzbSBidWlsZHMgd2l0aG91dCBlc01vZHVsZUludGVyb3AuXG4gICAgICAgICAgICAgKiBsb2Rhc2ggaXMgdXNpbmcgTUlUIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiovXG4gICAgICAgICAgICB2YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gICAgICAgICAgICB2YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJztcbiAgICAgICAgICAgIHZhciB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcbiAgICAgICAgICAgIHZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4gICAgICAgICAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuICAgICAgICAgICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuICAgICAgICAgICAgdmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuICAgICAgICAgICAgdmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgICAgICAgICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuICAgICAgICAgICAgdmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICAgICAgICAgICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICAgICAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgICAgICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgICAgICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgICAgICAgICAqIH1cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gICAgICAgICAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICAgICAgICAgICAgICogLy8gPT4gZmFsc2VcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAgICAgICAgICAgICAqIC8vID0+IHRydWVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICAgICAgICAgKiAvLyA9PiB0cnVlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT09IG9iamVjdFRhZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgICAgIHJldHVybiAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgICAgICAgICBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgICAgICAgICAgICAgICAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PT0gb2JqZWN0Q3RvclN0cmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICAgICAgICAgICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICAgICAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgICAgICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgICAgICAgICAqIC8vID0+IHRydWVcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAgICAgICAgICogLy8gPT4gdHJ1ZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICAgICAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAgICAgICAgICogLy8gPT4gZmFsc2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpXG4gICAgICAgICAgICAgICAgICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLCB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgICAgICAgICAgdmFyIHVubWFza2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB1bm1hc2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNpbGVuY2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICAgICAgICAgIHZhciBNQVhfTEVWRUwgPSAyMDtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTWVyZ2VzIG9iamVjdHMgdG9nZXRoZXJcbiAgICAgICAgICAgICAqIEBwYXJhbSBhcmdzIC0gb2JqZWN0cyAvIHZhbHVlcyB0byBiZSBtZXJnZWRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gbWVyZ2UoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhcmdzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdHMgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbWVyZ2VUd29PYmplY3RzKHJlc3VsdCwgYXJncy5zaGlmdCgpLCAwLCBvYmplY3RzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRha2VWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNZXJnZXMgdHdvIG9iamVjdHNcbiAgICAgICAgICAgICAqIEBwYXJhbSBvbmUgLSBmaXJzdCBvYmplY3RcbiAgICAgICAgICAgICAqIEBwYXJhbSB0d28gLSBzZWNvbmQgb2JqZWN0XG4gICAgICAgICAgICAgKiBAcGFyYW0gbGV2ZWwgLSBjdXJyZW50IGRlZXAgbGV2ZWxcbiAgICAgICAgICAgICAqIEBwYXJhbSBvYmplY3RzIC0gb2JqZWN0cyBob2xkZXIgdGhhdCBoYXMgYmVlbiBhbHJlYWR5IHJlZmVyZW5jZWQgLSB0byBwcmV2ZW50XG4gICAgICAgICAgICAgKiBjeWNsaWMgZGVwZW5kZW5jeVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBtZXJnZVR3b09iamVjdHMob25lLCB0d28sIGxldmVsLCBvYmplY3RzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxldmVsID09PSB2b2lkIDApIHsgbGV2ZWwgPSAwOyB9XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPiBNQVhfTEVWRUwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV2ZWwrKztcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmltaXRpdmUob25lKSB8fCBpc1ByaW1pdGl2ZSh0d28pIHx8IGlzRnVuY3Rpb24odHdvKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0YWtlVmFsdWUodHdvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNBcnJheShvbmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG9uZS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBcnJheSh0d28pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IHR3by5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0YWtlVmFsdWUodHdvW2ldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNPYmplY3QodHdvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0d28pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBrZXlzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdGFrZVZhbHVlKHR3b1trZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc09iamVjdChvbmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09iamVjdCh0d28pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3VsZE1lcmdlKG9uZSwgdHdvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0d287XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0d28pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBrZXlzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0d29WYWx1ZSA9IHR3b1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZSh0d29WYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0d29WYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc3VsdFtrZXldID0gdGFrZVZhbHVlKHR3b1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdHdvVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmoxID0gcmVzdWx0W2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmoyID0gdHdvVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXNPYmplY3RSZWZlcmVuY2VkKG9uZSwga2V5LCBvYmplY3RzKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FzT2JqZWN0UmVmZXJlbmNlZCh0d28sIGtleSwgb2JqZWN0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChvYmoxKSAmJiBpc09iamVjdChvYmoyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnIxID0gb2JqZWN0cy5nZXQob2JqMSkgfHwgW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycjIgPSBvYmplY3RzLmdldChvYmoyKSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnIxLnB1c2goeyBvYmo6IG9uZSwga2V5OiBrZXkgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyMi5wdXNoKHsgb2JqOiB0d28sIGtleToga2V5IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdHMuc2V0KG9iajEsIGFycjEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdHMuc2V0KG9iajIsIGFycjIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZVR3b09iamVjdHMocmVzdWx0W2tleV0sIHR3b1ZhbHVlLCBsZXZlbCwgb2JqZWN0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0d287XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRnVuY3Rpb24gdG8gY2hlY2sgaWYgb2JqZWN0IGhhcyBiZWVuIGFscmVhZHkgcmVmZXJlbmNlXG4gICAgICAgICAgICAgKiBAcGFyYW0gb2JqXG4gICAgICAgICAgICAgKiBAcGFyYW0ga2V5XG4gICAgICAgICAgICAgKiBAcGFyYW0gb2JqZWN0c1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiB3YXNPYmplY3RSZWZlcmVuY2VkKG9iaiwga2V5LCBvYmplY3RzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IG9iamVjdHMuZ2V0KG9ialtrZXldKSB8fCBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IGFyci5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm8gPSBhcnJbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmtleSA9PT0ga2V5ICYmIGluZm8ub2JqID09PSBvYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzQXJyYXkodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICghaXNQcmltaXRpdmUodmFsdWUpICYmXG4gICAgICAgICAgICAgICAgICAgICFpc0FycmF5KHZhbHVlKSAmJlxuICAgICAgICAgICAgICAgICAgICAhaXNGdW5jdGlvbih2YWx1ZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwIHx8XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID09PSBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3VsZE1lcmdlKG9uZSwgdHdvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KG9uZSkgfHwgIWlzUGxhaW5PYmplY3QodHdvKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIERlZmVycmVkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIERlZmVycmVkKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3JlamVjdCA9IHJlamVjdDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZWZlcnJlZC5wcm90b3R5cGUsIFwicHJvbWlzZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBEZWZlcnJlZC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSh2YWwpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgRGVmZXJyZWQucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGVmZXJyZWQ7XG4gICAgICAgICAgICB9KCkpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIF9fcmVhZCQzID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgICAgICAgICAgICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhcjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgX19zcHJlYWRBcnJheSQyID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQmluZCB0aGUgY2FsbGJhY2sgYW5kIG9ubHkgaW52b2tlIHRoZSBjYWxsYmFjayBvbmNlIHJlZ2FyZGxlc3MgaG93IG1hbnkgdGltZXMgYEJpbmRPbmNlRnV0dXJlLmNhbGxgIGlzIGludm9rZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBCaW5kT25jZUZ1dHVyZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBCaW5kT25jZUZ1dHVyZShfY2FsbGJhY2ssIF90aGF0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrID0gX2NhbGxiYWNrO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90aGF0ID0gX3RoYXQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzQ2FsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCaW5kT25jZUZ1dHVyZS5wcm90b3R5cGUsIFwiaXNDYWxsZWRcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0NhbGxlZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCaW5kT25jZUZ1dHVyZS5wcm90b3R5cGUsIFwicHJvbWlzZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmVycmVkLnByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBCaW5kT25jZUZ1dHVyZS5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNDYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzQ2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKChfYSA9IHRoaXMuX2NhbGxiYWNrKS5jYWxsLmFwcGx5KF9hLCBfX3NwcmVhZEFycmF5JDIoW3RoaXMuX3RoYXRdLCBfX3JlYWQkMyhhcmdzKSwgZmFsc2UpKSkudGhlbihmdW5jdGlvbiAodmFsKSB7IHJldHVybiBfdGhpcy5fZGVmZXJyZWQucmVzb2x2ZSh2YWwpOyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBfdGhpcy5fZGVmZXJyZWQucmVqZWN0KGVycik7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZmVycmVkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJpbmRPbmNlRnV0dXJlO1xuICAgICAgICAgICAgfSgpKTtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlZmF1bHRTZXJ2aWNlTmFtZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1bmtub3duX3NlcnZpY2U6XCIgKyBcIlwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIF9fYXNzaWduJDEgPSAoZ2xvYmFsVGhpcyAmJiBnbG9iYWxUaGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX19hc3NpZ24kMSA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24kMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBfX2F3YWl0ZXIgPSAoZ2xvYmFsVGhpcyAmJiBnbG9iYWxUaGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICAgICAgICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIF9fZ2VuZXJhdG9yID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgICAgICAgICAgICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgX19yZWFkJDIgPSAoZ2xvYmFsVGhpcyAmJiBnbG9iYWxUaGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgICAgICAgICAgICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICAgICAgICAgICAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBSZXNvdXJjZSBkZXNjcmliZXMgdGhlIGVudGl0eSBmb3Igd2hpY2ggYSBzaWduYWxzIChtZXRyaWNzIG9yIHRyYWNlKSBhcmVcbiAgICAgICAgICAgICAqIGNvbGxlY3RlZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIFJlc291cmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFJlc291cmNlKFxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEEgZGljdGlvbmFyeSBvZiBhdHRyaWJ1dGVzIHdpdGggc3RyaW5nIGtleXMgYW5kIHZhbHVlcyB0aGF0IHByb3ZpZGVcbiAgICAgICAgICAgICAgICAgKiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZW50aXR5IGFzIG51bWJlcnMsIHN0cmluZ3Mgb3IgYm9vbGVhbnNcbiAgICAgICAgICAgICAgICAgKiBUT0RPOiBDb25zaWRlciB0byBhZGQgY2hlY2svdmFsaWRhdGlvbiBvbiBhdHRyaWJ1dGVzLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMsIGFzeW5jQXR0cmlidXRlc1Byb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hc3luY0F0dHJpYnV0ZXNQZW5kaW5nID0gYXN5bmNBdHRyaWJ1dGVzUHJvbWlzZSAhPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zeW5jQXR0cmlidXRlcyA9IChfYSA9IHRoaXMuX2F0dHJpYnV0ZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hc3luY0F0dHJpYnV0ZXNQcm9taXNlID0gYXN5bmNBdHRyaWJ1dGVzUHJvbWlzZSA9PT0gbnVsbCB8fCBhc3luY0F0dHJpYnV0ZXNQcm9taXNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhc3luY0F0dHJpYnV0ZXNQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGFzeW5jQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2F0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCBfdGhpcy5fYXR0cmlidXRlcywgYXN5bmNBdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmFzeW5jQXR0cmlidXRlc1BlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhc3luY0F0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLmRlYnVnKFwiYSByZXNvdXJjZSdzIGFzeW5jIGF0dHJpYnV0ZXMgcHJvbWlzZSByZWplY3RlZDogJXNcIiwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmFzeW5jQXR0cmlidXRlc1BlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFJldHVybnMgYW4gZW1wdHkgUmVzb3VyY2VcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBSZXNvdXJjZS5lbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlc291cmNlLkVNUFRZO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUmV0dXJucyBhIFJlc291cmNlIHRoYXQgaWRlbnRpZmllcyB0aGUgU0RLIGluIHVzZS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBSZXNvdXJjZS5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVzb3VyY2UoKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBfYVtTRU1SRVNBVFRSU19TRVJWSUNFX05BTUVdID0gZGVmYXVsdFNlcnZpY2VOYW1lKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBfYVtTRU1SRVNBVFRSU19URUxFTUVUUllfU0RLX0xBTkdVQUdFXSA9IFNES19JTkZPW1NFTVJFU0FUVFJTX1RFTEVNRVRSWV9TREtfTEFOR1VBR0VdLFxuICAgICAgICAgICAgICAgICAgICAgICAgX2FbU0VNUkVTQVRUUlNfVEVMRU1FVFJZX1NES19OQU1FXSA9IFNES19JTkZPW1NFTVJFU0FUVFJTX1RFTEVNRVRSWV9TREtfTkFNRV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBfYVtTRU1SRVNBVFRSU19URUxFTUVUUllfU0RLX1ZFUlNJT05dID0gU0RLX0lORk9bU0VNUkVTQVRUUlNfVEVMRU1FVFJZX1NES19WRVJTSU9OXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hKSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzb3VyY2UucHJvdG90eXBlLCBcImF0dHJpYnV0ZXNcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFzeW5jQXR0cmlidXRlc1BlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGkuZGlhZy5lcnJvcignQWNjZXNzaW5nIHJlc291cmNlIGF0dHJpYnV0ZXMgYmVmb3JlIGFzeW5jIGF0dHJpYnV0ZXMgc2V0dGxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuX2F0dHJpYnV0ZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIG5ldmVyIGJlIHJlamVjdGVkLiBSZXNvbHZlcyB3aGVuIGFsbCBhc3luYyBhdHRyaWJ1dGVzIGhhdmUgZmluaXNoZWQgYmVpbmcgYWRkZWQgdG9cbiAgICAgICAgICAgICAgICAgKiB0aGlzIFJlc291cmNlJ3MgYXR0cmlidXRlcy4gVGhpcyBpcyB1c2VmdWwgaW4gZXhwb3J0ZXJzIHRvIGJsb2NrIHVudGlsIHJlc291cmNlIGRldGVjdGlvblxuICAgICAgICAgICAgICAgICAqIGhhcyBmaW5pc2hlZC5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBSZXNvdXJjZS5wcm90b3R5cGUud2FpdEZvckFzeW5jQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFzeW5jQXR0cmlidXRlc1BlbmRpbmcpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5fYXN5bmNBdHRyaWJ1dGVzUHJvbWlzZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUmV0dXJucyBhIG5ldywgbWVyZ2VkIHtAbGluayBSZXNvdXJjZX0gYnkgbWVyZ2luZyB0aGUgY3VycmVudCBSZXNvdXJjZVxuICAgICAgICAgICAgICAgICAqIHdpdGggdGhlIG90aGVyIFJlc291cmNlLiBJbiBjYXNlIG9mIGEgY29sbGlzaW9uLCBvdGhlciBSZXNvdXJjZSB0YWtlc1xuICAgICAgICAgICAgICAgICAqIHByZWNlZGVuY2UuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gb3RoZXIgdGhlIFJlc291cmNlIHRoYXQgd2lsbCBiZSBtZXJnZWQgd2l0aCB0aGlzLlxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHRoZSBuZXdseSBtZXJnZWQgUmVzb3VyY2UuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgUmVzb3VyY2UucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvdGhlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAvLyBTcGFuQXR0cmlidXRlcyBmcm9tIG90aGVyIHJlc291cmNlIG92ZXJ3cml0ZSBhdHRyaWJ1dGVzIGZyb20gdGhpcyByZXNvdXJjZS5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lcmdlZFN5bmNBdHRyaWJ1dGVzID0gX19hc3NpZ24kMShfX2Fzc2lnbiQxKHt9LCB0aGlzLl9zeW5jQXR0cmlidXRlcyksICgoX2EgPSBvdGhlci5fc3luY0F0dHJpYnV0ZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG90aGVyLmF0dHJpYnV0ZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9hc3luY0F0dHJpYnV0ZXNQcm9taXNlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhb3RoZXIuX2FzeW5jQXR0cmlidXRlc1Byb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVzb3VyY2UobWVyZ2VkU3luY0F0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXJnZWRBdHRyaWJ1dGVzUHJvbWlzZSA9IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FzeW5jQXR0cmlidXRlc1Byb21pc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBvdGhlci5fYXN5bmNBdHRyaWJ1dGVzUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgXSkudGhlbihmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYyA9IF9fcmVhZCQyKF9hLCAyKSwgdGhpc0FzeW5jQXR0cmlidXRlcyA9IF9jWzBdLCBvdGhlckFzeW5jQXR0cmlidXRlcyA9IF9jWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduJDEoX19hc3NpZ24kMShfX2Fzc2lnbiQxKF9fYXNzaWduJDEoe30sIF90aGlzLl9zeW5jQXR0cmlidXRlcyksIHRoaXNBc3luY0F0dHJpYnV0ZXMpLCAoKF9iID0gb3RoZXIuX3N5bmNBdHRyaWJ1dGVzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBvdGhlci5hdHRyaWJ1dGVzKSksIG90aGVyQXN5bmNBdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVzb3VyY2UobWVyZ2VkU3luY0F0dHJpYnV0ZXMsIG1lcmdlZEF0dHJpYnV0ZXNQcm9taXNlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFJlc291cmNlLkVNUFRZID0gbmV3IFJlc291cmNlKHt9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVzb3VyY2U7XG4gICAgICAgICAgICB9KCkpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gRXZlbnQgbmFtZSBkZWZpbml0aW9uc1xuICAgICAgICAgICAgdmFyIEV4Y2VwdGlvbkV2ZW50TmFtZSA9ICdleGNlcHRpb24nO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIF9fYXNzaWduID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBfX3ZhbHVlcyQxID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgICAgICAgICAgICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIF9fcmVhZCQxID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgICAgICAgICAgICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhcjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgX19zcHJlYWRBcnJheSQxID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgc3Bhbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIFNwYW4gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBTcGFuIGluc3RhbmNlLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQGRlcHJlY2F0ZWQgY2FsbGluZyBTcGFuIGNvbnN0cnVjdG9yIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSB1c2UgdHJhY2VyLnN0YXJ0U3Bhbi5cbiAgICAgICAgICAgICAgICAgKiAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNwYW4ocGFyZW50VHJhY2VyLCBjb250ZXh0LCBzcGFuTmFtZSwgc3BhbkNvbnRleHQsIGtpbmQsIHBhcmVudFNwYW5JZCwgbGlua3MsIHN0YXJ0VGltZSwgX2RlcHJlY2F0ZWRDbG9jaywgLy8ga2VlcGluZyB0aGlzIGFyZ3VtZW50IGV2ZW4gdGhvdWdoIGl0IGlzIHVudXNlZCB0byBlbnN1cmUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5rcyA9PT0gdm9pZCAwKSB7IGxpbmtzID0gW107IH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge307XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlua3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJvcHBlZEF0dHJpYnV0ZXNDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BwZWRFdmVudHNDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BwZWRMaW5rc0NvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuVU5TRVQsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kVGltZSA9IFswLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5kZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBbLTEsIC0xXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gc3Bhbk5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NwYW5Db250ZXh0ID0gc3BhbkNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyZW50U3BhbklkID0gcGFyZW50U3BhbklkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmtzID0gbGlua3M7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZXJmb3JtYW5jZVN0YXJ0VGltZSA9IG90cGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BlcmZvcm1hbmNlT2Zmc2V0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdyAtICh0aGlzLl9wZXJmb3JtYW5jZVN0YXJ0VGltZSArIGdldFRpbWVPcmlnaW4oKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0VGltZVByb3ZpZGVkID0gc3RhcnRUaW1lICE9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdGhpcy5fZ2V0VGltZShzdGFydFRpbWUgIT09IG51bGwgJiYgc3RhcnRUaW1lICE9PSB2b2lkIDAgPyBzdGFydFRpbWUgOiBub3cpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc291cmNlID0gcGFyZW50VHJhY2VyLnJlc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RydW1lbnRhdGlvbkxpYnJhcnkgPSBwYXJlbnRUcmFjZXIuaW5zdHJ1bWVudGF0aW9uTGlicmFyeTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3BhbkxpbWl0cyA9IHBhcmVudFRyYWNlci5nZXRTcGFuTGltaXRzKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3BhbkxpbWl0cy5hdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0IHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zcGFuUHJvY2Vzc29yID0gcGFyZW50VHJhY2VyLmdldEFjdGl2ZVNwYW5Qcm9jZXNzb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3BhblByb2Nlc3Nvci5vblN0YXJ0KHRoaXMsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBTcGFuLnByb3RvdHlwZS5zcGFuQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NwYW5Db250ZXh0O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgU3Bhbi5wcm90b3R5cGUuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgdGhpcy5faXNTcGFuRW5kZWQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmRpYWcud2FybihcIkludmFsaWQgYXR0cmlidXRlIGtleTogXCIgKyBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0F0dHJpYnV0ZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmRpYWcud2FybihcIkludmFsaWQgYXR0cmlidXRlIHZhbHVlIHNldCBmb3Iga2V5OiBcIiArIGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKS5sZW5ndGggPj1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NwYW5MaW1pdHMuYXR0cmlidXRlQ291bnRMaW1pdCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmF0dHJpYnV0ZXMsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BwZWRBdHRyaWJ1dGVzQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlc1trZXldID0gdGhpcy5fdHJ1bmNhdGVUb1NpemUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNwYW4ucHJvdG90eXBlLnNldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMkMShPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2QgPSBfX3JlYWQkMShfYy52YWx1ZSwgMiksIGsgPSBfZFswXSwgdiA9IF9kWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGssIHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBuYW1lIFNwYW4gTmFtZVxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSBbYXR0cmlidXRlc09yU3RhcnRUaW1lXSBTcGFuIGF0dHJpYnV0ZXMgb3Igc3RhcnQgdGltZVxuICAgICAgICAgICAgICAgICAqICAgICBpZiB0eXBlIGlzIHtAdHlwZSBUaW1lSW5wdXR9IGFuZCAzcmQgcGFyYW0gaXMgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIFt0aW1lU3RhbXBdIFNwZWNpZmllZCB0aW1lIHN0YW1wIGZvciB0aGUgZXZlbnRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBTcGFuLnByb3RvdHlwZS5hZGRFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBhdHRyaWJ1dGVzT3JTdGFydFRpbWUsIHRpbWVTdGFtcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNTcGFuRW5kZWQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3BhbkxpbWl0cy5ldmVudENvdW50TGltaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLndhcm4oJ05vIGV2ZW50cyBhbGxvd2VkLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJvcHBlZEV2ZW50c0NvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ldmVudHMubGVuZ3RoID49IHRoaXMuX3NwYW5MaW1pdHMuZXZlbnRDb3VudExpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZHJvcHBlZEV2ZW50c0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmRpYWcuZGVidWcoJ0Ryb3BwaW5nIGV4dHJhIGV2ZW50cy4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcm9wcGVkRXZlbnRzQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNUaW1lSW5wdXQoYXR0cmlidXRlc09yU3RhcnRUaW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RpbWVJbnB1dCh0aW1lU3RhbXApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZVN0YW1wID0gYXR0cmlidXRlc09yU3RhcnRUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlc09yU3RhcnRUaW1lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gc2FuaXRpemVBdHRyaWJ1dGVzKGF0dHJpYnV0ZXNPclN0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lOiB0aGlzLl9nZXRUaW1lKHRpbWVTdGFtcCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wcGVkQXR0cmlidXRlc0NvdW50OiAwLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTcGFuLnByb3RvdHlwZS5hZGRMaW5rID0gZnVuY3Rpb24gKGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5rcy5wdXNoKGxpbmspO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNwYW4ucHJvdG90eXBlLmFkZExpbmtzID0gZnVuY3Rpb24gKGxpbmtzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAgICAgKF9hID0gdGhpcy5saW5rcykucHVzaC5hcHBseShfYSwgX19zcHJlYWRBcnJheSQxKFtdLCBfX3JlYWQkMShsaW5rcyksIGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgU3Bhbi5wcm90b3R5cGUuc2V0U3RhdHVzID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNTcGFuRW5kZWQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IF9fYXNzaWduKHt9LCBzdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHVzaW5nIHRyeS1jYXRjaCwgdGhlIGNhdWdodCBcImVycm9yXCIgaXMgb2YgdHlwZSBgYW55YC4gV2hlbiB0aGVuIGFzc2lnbmluZyBgYW55YCB0byBgc3RhdHVzLm1lc3NhZ2VgLFxuICAgICAgICAgICAgICAgICAgICAvLyBUeXBlU2NyaXB0IHdpbGwgbm90IGVycm9yLiBXaGlsZSB0aGlzIGNhbiBoYXBwZW4gZHVyaW5nIHVzZSBvZiBhbnkgQVBJLCBpdCBpcyBtb3JlIGNvbW1vbiBvbiBTcGFuI3NldFN0YXR1cygpXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzIGl0J3MgbGlrZWx5IHVzZWQgaW4gYSBjYXRjaC1ibG9jay4gVGhlcmVmb3JlLCB3ZSB2YWxpZGF0ZSBpZiBgc3RhdHVzLm1lc3NhZ2VgIGlzIGFjdHVhbGx5IGEgc3RyaW5nLCBudWxsLCBvclxuICAgICAgICAgICAgICAgICAgICAvLyB1bmRlZmluZWQgdG8gYXZvaWQgYW4gaW5jb3JyZWN0IHR5cGUgY2F1c2luZyBpc3N1ZXMgZG93bnN0cmVhbS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzLm1lc3NhZ2UgIT0gbnVsbCAmJiB0eXBlb2Ygc3RhdHVzLm1lc3NhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuZGlhZy53YXJuKFwiRHJvcHBpbmcgaW52YWxpZCBzdGF0dXMubWVzc2FnZSBvZiB0eXBlICdcIiArIHR5cGVvZiBzdGF0dXMubWVzc2FnZSArIFwiJywgZXhwZWN0ZWQgJ3N0cmluZydcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zdGF0dXMubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNwYW4ucHJvdG90eXBlLnVwZGF0ZU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNTcGFuRW5kZWQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNwYW4ucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChlbmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1NwYW5FbmRlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuZGlhZy5lcnJvcih0aGlzLm5hbWUgKyBcIiBcIiArIHRoaXMuX3NwYW5Db250ZXh0LnRyYWNlSWQgKyBcIi1cIiArIHRoaXMuX3NwYW5Db250ZXh0LnNwYW5JZCArIFwiIC0gWW91IGNhbiBvbmx5IGNhbGwgZW5kKCkgb24gYSBzcGFuIG9uY2UuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VuZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRUaW1lID0gdGhpcy5fZ2V0VGltZShlbmRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBoclRpbWVEdXJhdGlvbih0aGlzLnN0YXJ0VGltZSwgdGhpcy5lbmRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2R1cmF0aW9uWzBdIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmRpYWcud2FybignSW5jb25zaXN0ZW50IHN0YXJ0IGFuZCBlbmQgdGltZSwgc3RhcnRUaW1lID4gZW5kVGltZS4gU2V0dGluZyBzcGFuIGR1cmF0aW9uIHRvIDBtcy4nLCB0aGlzLnN0YXJ0VGltZSwgdGhpcy5lbmRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kVGltZSA9IHRoaXMuc3RhcnRUaW1lLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IFswLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZHJvcHBlZEV2ZW50c0NvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmRpYWcud2FybihcIkRyb3BwZWQgXCIgKyB0aGlzLl9kcm9wcGVkRXZlbnRzQ291bnQgKyBcIiBldmVudHMgYmVjYXVzZSBldmVudENvdW50TGltaXQgcmVhY2hlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zcGFuUHJvY2Vzc29yLm9uRW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgU3Bhbi5wcm90b3R5cGUuX2dldFRpbWUgPSBmdW5jdGlvbiAoaW5wKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wID09PSAnbnVtYmVyJyAmJiBpbnAgPD0gb3RwZXJmb3JtYW5jZS5ub3coKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbXVzdCBiZSBhIHBlcmZvcm1hbmNlIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXBwbHkgY29ycmVjdGlvbiBhbmQgY29udmVydCB0byBocnRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoclRpbWUoaW5wICsgdGhpcy5fcGVyZm9ybWFuY2VPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1pbGxpc1RvSHJUaW1lKGlucCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtaWxsaXNUb0hyVGltZShpbnAuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNUaW1lSW5wdXRIclRpbWUoaW5wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RhcnRUaW1lUHJvdmlkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHVzZXIgcHJvdmlkZWQgYSB0aW1lIGZvciB0aGUgc3RhcnQgbWFudWFsbHlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGNhbid0IHVzZSBkdXJhdGlvbiB0byBjYWxjdWxhdGUgZXZlbnQvZW5kIHRpbWVzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWlsbGlzVG9IclRpbWUoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1zRHVyYXRpb24gPSBvdHBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy5fcGVyZm9ybWFuY2VTdGFydFRpbWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhZGRIclRpbWVzKHRoaXMuc3RhcnRUaW1lLCBtaWxsaXNUb0hyVGltZShtc0R1cmF0aW9uKSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBTcGFuLnByb3RvdHlwZS5pc1JlY29yZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuZGVkID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFNwYW4ucHJvdG90eXBlLnJlY29yZEV4Y2VwdGlvbiA9IGZ1bmN0aW9uIChleGNlcHRpb24sIHRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleGNlcHRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW1NFTUFUVFJTX0VYQ0VQVElPTl9NRVNTQUdFXSA9IGV4Y2VwdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGNlcHRpb24uY29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNbU0VNQVRUUlNfRVhDRVBUSU9OX1RZUEVdID0gZXhjZXB0aW9uLmNvZGUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV4Y2VwdGlvbi5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlc1tTRU1BVFRSU19FWENFUFRJT05fVFlQRV0gPSBleGNlcHRpb24ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleGNlcHRpb24ubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNbU0VNQVRUUlNfRVhDRVBUSU9OX01FU1NBR0VdID0gZXhjZXB0aW9uLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhjZXB0aW9uLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlc1tTRU1BVFRSU19FWENFUFRJT05fU1RBQ0tUUkFDRV0gPSBleGNlcHRpb24uc3RhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlc2UgYXJlIG1pbmltdW0gcmVxdWlyZW1lbnRzIGZyb20gc3BlY1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlc1tTRU1BVFRSU19FWENFUFRJT05fVFlQRV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNbU0VNQVRUUlNfRVhDRVBUSU9OX01FU1NBR0VdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50KEV4Y2VwdGlvbkV2ZW50TmFtZSwgYXR0cmlidXRlcywgdGltZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuZGlhZy53YXJuKFwiRmFpbGVkIHRvIHJlY29yZCBhbiBleGNlcHRpb24gXCIgKyBleGNlcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3Bhbi5wcm90b3R5cGUsIFwiZHVyYXRpb25cIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGFuLnByb3RvdHlwZSwgXCJlbmRlZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VuZGVkO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwYW4ucHJvdG90eXBlLCBcImRyb3BwZWRBdHRyaWJ1dGVzQ291bnRcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kcm9wcGVkQXR0cmlidXRlc0NvdW50O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNwYW4ucHJvdG90eXBlLCBcImRyb3BwZWRFdmVudHNDb3VudFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Ryb3BwZWRFdmVudHNDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGFuLnByb3RvdHlwZSwgXCJkcm9wcGVkTGlua3NDb3VudFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Ryb3BwZWRMaW5rc0NvdW50O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgU3Bhbi5wcm90b3R5cGUuX2lzU3BhbkVuZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLndhcm4oXCJDYW4gbm90IGV4ZWN1dGUgdGhlIG9wZXJhdGlvbiBvbiBlbmRlZCBTcGFuIHt0cmFjZUlkOiBcIiArIHRoaXMuX3NwYW5Db250ZXh0LnRyYWNlSWQgKyBcIiwgc3BhbklkOiBcIiArIHRoaXMuX3NwYW5Db250ZXh0LnNwYW5JZCArIFwifVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZW5kZWQ7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHRydW5jYXRlIGdpdmVuIHZhbHVlIHdpdGhpbiBzaXplXG4gICAgICAgICAgICAgICAgLy8gZm9yIHZhbHVlIHR5cGUgb2Ygc3RyaW5nLCB3aWxsIHRydW5jYXRlIHRvIGdpdmVuIGxpbWl0XG4gICAgICAgICAgICAgICAgLy8gZm9yIHR5cGUgb2Ygbm9uLXN0cmluZywgd2lsbCByZXR1cm4gc2FtZSB2YWx1ZVxuICAgICAgICAgICAgICAgIFNwYW4ucHJvdG90eXBlLl90cnVuY2F0ZVRvTGltaXRVdGlsID0gZnVuY3Rpb24gKHZhbHVlLCBsaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoIDw9IGxpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZygwLCBsaW1pdCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGUgZ2l2ZW4gYXR0cmlidXRlIHZhbHVlIGlzIG9mIHR5cGUgc3RyaW5nIGFuZCBoYXMgbW9yZSBjaGFyYWN0ZXJzIHRoYW4gZ2l2ZW4ge0Bjb2RlIGF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXR9IHRoZW5cbiAgICAgICAgICAgICAgICAgKiByZXR1cm4gc3RyaW5nIHdpdGggdHJ1bmNhdGVkIHRvIHtAY29kZSBhdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0fSBjaGFyYWN0ZXJzXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBJZiB0aGUgZ2l2ZW4gYXR0cmlidXRlIHZhbHVlIGlzIGFycmF5IG9mIHN0cmluZ3MgdGhlblxuICAgICAgICAgICAgICAgICAqIHJldHVybiBuZXcgYXJyYXkgb2Ygc3RyaW5ncyB3aXRoIGVhY2ggZWxlbWVudCB0cnVuY2F0ZWQgdG8ge0Bjb2RlIGF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXR9IGNoYXJhY3RlcnNcbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIE90aGVyd2lzZSByZXR1cm4gc2FtZSBBdHRyaWJ1dGUge0Bjb2RlIHZhbHVlfVxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQHBhcmFtIHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHRydW5jYXRlZCBhdHRyaWJ1dGUgdmFsdWUgaWYgcmVxdWlyZWQsIG90aGVyd2lzZSBzYW1lIHZhbHVlXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgU3Bhbi5wcm90b3R5cGUuX3RydW5jYXRlVG9TaXplID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW1pdCA9IHRoaXMuX2F0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGxpbWl0XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW1pdCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWdhdGl2ZSB2YWx1ZXMgYXJlIGludmFsaWQsIHNvIGRvIG5vdCB0cnVuY2F0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmRpYWcud2FybihcIkF0dHJpYnV0ZSB2YWx1ZSBsaW1pdCBtdXN0IGJlIHBvc2l0aXZlLCBnb3QgXCIgKyBsaW1pdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJ1bmNhdGVUb0xpbWl0VXRpbCh2YWx1ZSwgbGltaXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEFycmF5IG9mIHN0cmluZ3NcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyBfdGhpcy5fdHJ1bmNhdGVUb0xpbWl0VXRpbCh2YWwsIGxpbWl0KSA6IHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIE90aGVyIHR5cGVzLCBubyBuZWVkIHRvIGFwcGx5IHZhbHVlIGxlbmd0aCBsaW1pdFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3BhbjtcbiAgICAgICAgICAgIH0oKSk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgc2FtcGxpbmcgZGVjaXNpb24gdGhhdCBkZXRlcm1pbmVzIGhvdyBhIHtAbGluayBTcGFufSB3aWxsIGJlIHJlY29yZGVkXG4gICAgICAgICAgICAgKiBhbmQgY29sbGVjdGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgU2FtcGxpbmdEZWNpc2lvbjtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoU2FtcGxpbmdEZWNpc2lvbikge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIGBTcGFuLmlzUmVjb3JkaW5nKCkgPT09IGZhbHNlYCwgc3BhbiB3aWxsIG5vdCBiZSByZWNvcmRlZCBhbmQgYWxsIGV2ZW50c1xuICAgICAgICAgICAgICAgICAqIGFuZCBhdHRyaWJ1dGVzIHdpbGwgYmUgZHJvcHBlZC5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBTYW1wbGluZ0RlY2lzaW9uW1NhbXBsaW5nRGVjaXNpb25bXCJOT1RfUkVDT1JEXCJdID0gMF0gPSBcIk5PVF9SRUNPUkRcIjtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBgU3Bhbi5pc1JlY29yZGluZygpID09PSB0cnVlYCwgYnV0IGBTYW1wbGVkYCBmbGFnIGluIHtAbGluayBUcmFjZUZsYWdzfVxuICAgICAgICAgICAgICAgICAqIE1VU1QgTk9UIGJlIHNldC5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBTYW1wbGluZ0RlY2lzaW9uW1NhbXBsaW5nRGVjaXNpb25bXCJSRUNPUkRcIl0gPSAxXSA9IFwiUkVDT1JEXCI7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogYFNwYW4uaXNSZWNvcmRpbmcoKSA9PT0gdHJ1ZWAgQU5EIGBTYW1wbGVkYCBmbGFnIGluIHtAbGluayBUcmFjZUZsYWdzfVxuICAgICAgICAgICAgICAgICAqIE1VU1QgYmUgc2V0LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIFNhbXBsaW5nRGVjaXNpb25bU2FtcGxpbmdEZWNpc2lvbltcIlJFQ09SRF9BTkRfU0FNUExFRFwiXSA9IDJdID0gXCJSRUNPUkRfQU5EX1NBTVBMRURcIjtcbiAgICAgICAgICAgIH0pKFNhbXBsaW5nRGVjaXNpb24gfHwgKFNhbXBsaW5nRGVjaXNpb24gPSB7fSkpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLyoqIFNhbXBsZXIgdGhhdCBzYW1wbGVzIG5vIHRyYWNlcy4gKi9cbiAgICAgICAgICAgIHZhciBBbHdheXNPZmZTYW1wbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEFsd2F5c09mZlNhbXBsZXIoKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEFsd2F5c09mZlNhbXBsZXIucHJvdG90eXBlLnNob3VsZFNhbXBsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2lzaW9uOiBTYW1wbGluZ0RlY2lzaW9uLk5PVF9SRUNPUkQsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBBbHdheXNPZmZTYW1wbGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdBbHdheXNPZmZTYW1wbGVyJztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBBbHdheXNPZmZTYW1wbGVyO1xuICAgICAgICAgICAgfSgpKTtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKiBTYW1wbGVyIHRoYXQgc2FtcGxlcyBhbGwgdHJhY2VzLiAqL1xuICAgICAgICAgICAgdmFyIEFsd2F5c09uU2FtcGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBBbHdheXNPblNhbXBsZXIoKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEFsd2F5c09uU2FtcGxlci5wcm90b3R5cGUuc2hvdWxkU2FtcGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVjaXNpb246IFNhbXBsaW5nRGVjaXNpb24uUkVDT1JEX0FORF9TQU1QTEVELFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQWx3YXlzT25TYW1wbGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdBbHdheXNPblNhbXBsZXInO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIEFsd2F5c09uU2FtcGxlcjtcbiAgICAgICAgICAgIH0oKSk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgY29tcG9zaXRlIHNhbXBsZXIgdGhhdCBlaXRoZXIgcmVzcGVjdHMgdGhlIHBhcmVudCBzcGFuJ3Mgc2FtcGxpbmcgZGVjaXNpb25cbiAgICAgICAgICAgICAqIG9yIGRlbGVnYXRlcyB0byBgZGVsZWdhdGVTYW1wbGVyYCBmb3Igcm9vdCBzcGFucy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIFBhcmVudEJhc2VkU2FtcGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBQYXJlbnRCYXNlZFNhbXBsZXIoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm9vdCA9IGNvbmZpZy5yb290O1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3Jvb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbEVycm9ySGFuZGxlcihuZXcgRXJyb3IoJ1BhcmVudEJhc2VkU2FtcGxlciBtdXN0IGhhdmUgYSByb290IHNhbXBsZXIgY29uZmlndXJlZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSBuZXcgQWx3YXlzT25TYW1wbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3RlUGFyZW50U2FtcGxlZCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2EgPSBjb25maWcucmVtb3RlUGFyZW50U2FtcGxlZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdGVQYXJlbnROb3RTYW1wbGVkID1cbiAgICAgICAgICAgICAgICAgICAgICAgIChfYiA9IGNvbmZpZy5yZW1vdGVQYXJlbnROb3RTYW1wbGVkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBuZXcgQWx3YXlzT2ZmU2FtcGxlcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbFBhcmVudFNhbXBsZWQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgKF9jID0gY29uZmlnLmxvY2FsUGFyZW50U2FtcGxlZCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbFBhcmVudE5vdFNhbXBsZWQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgKF9kID0gY29uZmlnLmxvY2FsUGFyZW50Tm90U2FtcGxlZCkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogbmV3IEFsd2F5c09mZlNhbXBsZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgUGFyZW50QmFzZWRTYW1wbGVyLnByb3RvdHlwZS5zaG91bGRTYW1wbGUgPSBmdW5jdGlvbiAoY29udGV4dCwgdHJhY2VJZCwgc3Bhbk5hbWUsIHNwYW5LaW5kLCBhdHRyaWJ1dGVzLCBsaW5rcykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50Q29udGV4dCA9IGFwaS50cmFjZS5nZXRTcGFuQ29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJlbnRDb250ZXh0IHx8ICFhcGkuaXNTcGFuQ29udGV4dFZhbGlkKHBhcmVudENvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcm9vdC5zaG91bGRTYW1wbGUoY29udGV4dCwgdHJhY2VJZCwgc3Bhbk5hbWUsIHNwYW5LaW5kLCBhdHRyaWJ1dGVzLCBsaW5rcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbnRleHQuaXNSZW1vdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRDb250ZXh0LnRyYWNlRmxhZ3MgJiBhcGkuVHJhY2VGbGFncy5TQU1QTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW90ZVBhcmVudFNhbXBsZWQuc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlbW90ZVBhcmVudE5vdFNhbXBsZWQuc2hvdWxkU2FtcGxlKGNvbnRleHQsIHRyYWNlSWQsIHNwYW5OYW1lLCBzcGFuS2luZCwgYXR0cmlidXRlcywgbGlua3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRDb250ZXh0LnRyYWNlRmxhZ3MgJiBhcGkuVHJhY2VGbGFncy5TQU1QTEVEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxQYXJlbnRTYW1wbGVkLnNob3VsZFNhbXBsZShjb250ZXh0LCB0cmFjZUlkLCBzcGFuTmFtZSwgc3BhbktpbmQsIGF0dHJpYnV0ZXMsIGxpbmtzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxQYXJlbnROb3RTYW1wbGVkLnNob3VsZFNhbXBsZShjb250ZXh0LCB0cmFjZUlkLCBzcGFuTmFtZSwgc3BhbktpbmQsIGF0dHJpYnV0ZXMsIGxpbmtzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFBhcmVudEJhc2VkU2FtcGxlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlBhcmVudEJhc2Vke3Jvb3Q9XCIgKyB0aGlzLl9yb290LnRvU3RyaW5nKCkgKyBcIiwgcmVtb3RlUGFyZW50U2FtcGxlZD1cIiArIHRoaXMuX3JlbW90ZVBhcmVudFNhbXBsZWQudG9TdHJpbmcoKSArIFwiLCByZW1vdGVQYXJlbnROb3RTYW1wbGVkPVwiICsgdGhpcy5fcmVtb3RlUGFyZW50Tm90U2FtcGxlZC50b1N0cmluZygpICsgXCIsIGxvY2FsUGFyZW50U2FtcGxlZD1cIiArIHRoaXMuX2xvY2FsUGFyZW50U2FtcGxlZC50b1N0cmluZygpICsgXCIsIGxvY2FsUGFyZW50Tm90U2FtcGxlZD1cIiArIHRoaXMuX2xvY2FsUGFyZW50Tm90U2FtcGxlZC50b1N0cmluZygpICsgXCJ9XCI7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUGFyZW50QmFzZWRTYW1wbGVyO1xuICAgICAgICAgICAgfSgpKTtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKiBTYW1wbGVyIHRoYXQgc2FtcGxlcyBhIGdpdmVuIGZyYWN0aW9uIG9mIHRyYWNlcyBiYXNlZCBvZiB0cmFjZSBpZCBkZXRlcm1pbmlzdGljYWxseS4gKi9cbiAgICAgICAgICAgIHZhciBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gVHJhY2VJZFJhdGlvQmFzZWRTYW1wbGVyKF9yYXRpbykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3JhdGlvID09PSB2b2lkIDApIHsgX3JhdGlvID0gMDsgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYXRpbyA9IF9yYXRpbztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmF0aW8gPSB0aGlzLl9ub3JtYWxpemUoX3JhdGlvKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBwZXJCb3VuZCA9IE1hdGguZmxvb3IodGhpcy5fcmF0aW8gKiAweGZmZmZmZmZmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgVHJhY2VJZFJhdGlvQmFzZWRTYW1wbGVyLnByb3RvdHlwZS5zaG91bGRTYW1wbGUgPSBmdW5jdGlvbiAoY29udGV4dCwgdHJhY2VJZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVjaXNpb246IGFwaS5pc1ZhbGlkVHJhY2VJZCh0cmFjZUlkKSAmJiB0aGlzLl9hY2N1bXVsYXRlKHRyYWNlSWQpIDwgdGhpcy5fdXBwZXJCb3VuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gU2FtcGxpbmdEZWNpc2lvbi5SRUNPUkRfQU5EX1NBTVBMRURcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFNhbXBsaW5nRGVjaXNpb24uTk9UX1JFQ09SRCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlRyYWNlSWRSYXRpb0Jhc2Vke1wiICsgdGhpcy5fcmF0aW8gKyBcIn1cIjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlci5wcm90b3R5cGUuX25vcm1hbGl6ZSA9IGZ1bmN0aW9uIChyYXRpbykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJhdGlvICE9PSAnbnVtYmVyJyB8fCBpc05hTihyYXRpbykpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJhdGlvID49IDEgPyAxIDogcmF0aW8gPD0gMCA/IDAgOiByYXRpbztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlci5wcm90b3R5cGUuX2FjY3VtdWxhdGUgPSBmdW5jdGlvbiAodHJhY2VJZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWNjdW11bGF0aW9uID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFjZUlkLmxlbmd0aCAvIDg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IGkgKiA4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJzZUludCh0cmFjZUlkLnNsaWNlKHBvcywgcG9zICsgOCksIDE2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdGlvbiA9IChhY2N1bXVsYXRpb24gXiBwYXJ0KSA+Pj4gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW11bGF0aW9uO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlcjtcbiAgICAgICAgICAgIH0oKSk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgZW52ID0gZ2V0RW52KCk7XG4gICAgICAgICAgICB2YXIgRkFMTEJBQ0tfT1RFTF9UUkFDRVNfU0FNUExFUiA9IFRyYWNlc1NhbXBsZXJWYWx1ZXMuQWx3YXlzT247XG4gICAgICAgICAgICB2YXIgREVGQVVMVF9SQVRJTyA9IDE7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExvYWQgZGVmYXVsdCBjb25maWd1cmF0aW9uLiBGb3IgZmllbGRzIHdpdGggcHJpbWl0aXZlIHZhbHVlcywgYW55IHVzZXItcHJvdmlkZWRcbiAgICAgICAgICAgICAqIHZhbHVlIHdpbGwgb3ZlcnJpZGUgdGhlIGNvcnJlc3BvbmRpbmcgZGVmYXVsdCB2YWx1ZS4gRm9yIGZpZWxkcyB3aXRoXG4gICAgICAgICAgICAgKiBub24tcHJpbWl0aXZlIHZhbHVlcyAobGlrZSBgc3BhbkxpbWl0c2ApLCB0aGUgdXNlci1wcm92aWRlZCB2YWx1ZSB3aWxsIGJlXG4gICAgICAgICAgICAgKiB1c2VkIHRvIGV4dGVuZCB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gb2JqZWN0IG5lZWRzIHRvIGJlIHdyYXBwZWQgaW4gdGhpcyBmdW5jdGlvbiBhbmQgY2FsbGVkIHdoZW4gbmVlZGVkIG90aGVyd2lzZVxuICAgICAgICAgICAgLy8gZW52cyBhcmUgcGFyc2VkIGJlZm9yZSB0ZXN0cyBhcmUgcmFuIC0gY2F1c2VzIHRlc3RzIHVzaW5nIHRoZXNlIGVudnMgdG8gZmFpbFxuICAgICAgICAgICAgZnVuY3Rpb24gbG9hZERlZmF1bHRDb25maWcoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9lbnYgPSBnZXRFbnYoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzYW1wbGVyOiBidWlsZFNhbXBsZXJGcm9tRW52KGVudiksXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlRmx1c2hUaW1lb3V0TWlsbGlzOiAzMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbExpbWl0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdDogX2Vudi5PVEVMX0FUVFJJQlVURV9WQUxVRV9MRU5HVEhfTElNSVQsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVDb3VudExpbWl0OiBfZW52Lk9URUxfQVRUUklCVVRFX0NPVU5UX0xJTUlULFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzcGFuTGltaXRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0OiBfZW52Lk9URUxfU1BBTl9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlULFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlQ291bnRMaW1pdDogX2Vudi5PVEVMX1NQQU5fQVRUUklCVVRFX0NPVU5UX0xJTUlULFxuICAgICAgICAgICAgICAgICAgICAgICAgbGlua0NvdW50TGltaXQ6IF9lbnYuT1RFTF9TUEFOX0xJTktfQ09VTlRfTElNSVQsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudENvdW50TGltaXQ6IF9lbnYuT1RFTF9TUEFOX0VWRU5UX0NPVU5UX0xJTUlULFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlUGVyRXZlbnRDb3VudExpbWl0OiBfZW52Lk9URUxfU1BBTl9BVFRSSUJVVEVfUEVSX0VWRU5UX0NPVU5UX0xJTUlULFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlUGVyTGlua0NvdW50TGltaXQ6IF9lbnYuT1RFTF9TUEFOX0FUVFJJQlVURV9QRVJfTElOS19DT1VOVF9MSU1JVCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbWVyZ2VSZXNvdXJjZVdpdGhEZWZhdWx0czogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBCYXNlZCBvbiBlbnZpcm9ubWVudCwgYnVpbGRzIGEgc2FtcGxlciwgY29tcGxpZXMgd2l0aCBzcGVjaWZpY2F0aW9uLlxuICAgICAgICAgICAgICogQHBhcmFtIGVudmlyb25tZW50IG9wdGlvbmFsLCBieSBkZWZhdWx0IHVzZXMgZ2V0RW52KCksIGJ1dCBhbGxvd3MgcGFzc2luZyBhIHZhbHVlIHRvIHJldXNlIHBhcnNlZCBlbnZpcm9ubWVudFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZFNhbXBsZXJGcm9tRW52KGVudmlyb25tZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudmlyb25tZW50ID09PSB2b2lkIDApIHsgZW52aXJvbm1lbnQgPSBnZXRFbnYoKTsgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZW52aXJvbm1lbnQuT1RFTF9UUkFDRVNfU0FNUExFUikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYWNlc1NhbXBsZXJWYWx1ZXMuQWx3YXlzT246XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYWNlc1NhbXBsZXJWYWx1ZXMuQWx3YXlzT2ZmOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBbHdheXNPZmZTYW1wbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVHJhY2VzU2FtcGxlclZhbHVlcy5QYXJlbnRCYXNlZEFsd2F5c09uOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJlbnRCYXNlZFNhbXBsZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IG5ldyBBbHdheXNPblNhbXBsZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYWNlc1NhbXBsZXJWYWx1ZXMuUGFyZW50QmFzZWRBbHdheXNPZmY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhcmVudEJhc2VkU2FtcGxlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdDogbmV3IEFsd2F5c09mZlNhbXBsZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYWNlc1NhbXBsZXJWYWx1ZXMuVHJhY2VJZFJhdGlvOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIoZ2V0U2FtcGxlclByb2JhYmlsaXR5RnJvbUVudihlbnZpcm9ubWVudCkpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYWNlc1NhbXBsZXJWYWx1ZXMuUGFyZW50QmFzZWRUcmFjZUlkUmF0aW86XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhcmVudEJhc2VkU2FtcGxlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdDogbmV3IFRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlcihnZXRTYW1wbGVyUHJvYmFiaWxpdHlGcm9tRW52KGVudmlyb25tZW50KSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLmVycm9yKFwiT1RFTF9UUkFDRVNfU0FNUExFUiB2YWx1ZSBcXFwiXCIgKyBlbnZpcm9ubWVudC5PVEVMX1RSQUNFU19TQU1QTEVSICsgXCIgaW52YWxpZCwgZGVmYXVsdGluZyB0byBcIiArIEZBTExCQUNLX09URUxfVFJBQ0VTX1NBTVBMRVIgKyBcIlxcXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBbHdheXNPblNhbXBsZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRTYW1wbGVyUHJvYmFiaWxpdHlGcm9tRW52KGVudmlyb25tZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Lk9URUxfVFJBQ0VTX1NBTVBMRVJfQVJHID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnQuT1RFTF9UUkFDRVNfU0FNUExFUl9BUkcgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLmVycm9yKFwiT1RFTF9UUkFDRVNfU0FNUExFUl9BUkcgaXMgYmxhbmssIGRlZmF1bHRpbmcgdG8gXCIgKyBERUZBVUxUX1JBVElPICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gREVGQVVMVF9SQVRJTztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHByb2JhYmlsaXR5ID0gTnVtYmVyKGVudmlyb25tZW50Lk9URUxfVFJBQ0VTX1NBTVBMRVJfQVJHKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4ocHJvYmFiaWxpdHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLmVycm9yKFwiT1RFTF9UUkFDRVNfU0FNUExFUl9BUkc9XCIgKyBlbnZpcm9ubWVudC5PVEVMX1RSQUNFU19TQU1QTEVSX0FSRyArIFwiIHdhcyBnaXZlbiwgYnV0IGl0IGlzIGludmFsaWQsIGRlZmF1bHRpbmcgdG8gXCIgKyBERUZBVUxUX1JBVElPICsgXCIuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gREVGQVVMVF9SQVRJTztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2JhYmlsaXR5IDwgMCB8fCBwcm9iYWJpbGl0eSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBpLmRpYWcuZXJyb3IoXCJPVEVMX1RSQUNFU19TQU1QTEVSX0FSRz1cIiArIGVudmlyb25tZW50Lk9URUxfVFJBQ0VTX1NBTVBMRVJfQVJHICsgXCIgd2FzIGdpdmVuLCBidXQgaXQgaXMgb3V0IG9mIHJhbmdlIChbMC4uMV0pLCBkZWZhdWx0aW5nIHRvIFwiICsgREVGQVVMVF9SQVRJTyArIFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERFRkFVTFRfUkFUSU87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9iYWJpbGl0eTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRnVuY3Rpb24gdG8gbWVyZ2UgRGVmYXVsdCBjb25maWd1cmF0aW9uIChhcyBzcGVjaWZpZWQgaW4gJy4vY29uZmlnJykgd2l0aFxuICAgICAgICAgICAgICogdXNlciBwcm92aWRlZCBjb25maWd1cmF0aW9ucy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gbWVyZ2VDb25maWcodXNlckNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciBwZXJJbnN0YW5jZURlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgICAgICBzYW1wbGVyOiBidWlsZFNhbXBsZXJGcm9tRW52KCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgREVGQVVMVF9DT05GSUcgPSBsb2FkRGVmYXVsdENvbmZpZygpO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0NPTkZJRywgcGVySW5zdGFuY2VEZWZhdWx0cywgdXNlckNvbmZpZyk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmdlbmVyYWxMaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0NPTkZJRy5nZW5lcmFsTGltaXRzLCB1c2VyQ29uZmlnLmdlbmVyYWxMaW1pdHMgfHwge30pO1xuICAgICAgICAgICAgICAgIHRhcmdldC5zcGFuTGltaXRzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9DT05GSUcuc3BhbkxpbWl0cywgdXNlckNvbmZpZy5zcGFuTGltaXRzIHx8IHt9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXaGVuIGdlbmVyYWwgbGltaXRzIGFyZSBwcm92aWRlZCBhbmQgbW9kZWwgc3BlY2lmaWMgbGltaXRzIGFyZSBub3QsXG4gICAgICAgICAgICAgKiBjb25maWd1cmVzIHRoZSBtb2RlbCBzcGVjaWZpYyBsaW1pdHMgYnkgdXNpbmcgdGhlIHZhbHVlcyBmcm9tIHRoZSBnZW5lcmFsIG9uZXMuXG4gICAgICAgICAgICAgKiBAcGFyYW0gdXNlckNvbmZpZyBVc2VyIHByb3ZpZGVkIHRyYWNlciBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlY29uZmlndXJlTGltaXRzKHVzZXJDb25maWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbTtcbiAgICAgICAgICAgICAgICB2YXIgc3BhbkxpbWl0cyA9IE9iamVjdC5hc3NpZ24oe30sIHVzZXJDb25maWcuc3BhbkxpbWl0cyk7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnNlZEVudkNvbmZpZyA9IGdldEVudldpdGhvdXREZWZhdWx0cygpO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFJlYXNzaWduIHNwYW4gYXR0cmlidXRlIGNvdW50IGxpbWl0IHRvIHVzZSBmaXJzdCBub24gbnVsbCB2YWx1ZSBkZWZpbmVkIGJ5IHVzZXIgb3IgdXNlIGRlZmF1bHQgdmFsdWVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBzcGFuTGltaXRzLmF0dHJpYnV0ZUNvdW50TGltaXQgPVxuICAgICAgICAgICAgICAgICAgICAoX2YgPSAoX2UgPSAoX2QgPSAoX2IgPSAoX2EgPSB1c2VyQ29uZmlnLnNwYW5MaW1pdHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hdHRyaWJ1dGVDb3VudExpbWl0KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAoX2MgPSB1c2VyQ29uZmlnLmdlbmVyYWxMaW1pdHMpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5hdHRyaWJ1dGVDb3VudExpbWl0KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBwYXJzZWRFbnZDb25maWcuT1RFTF9TUEFOX0FUVFJJQlVURV9DT1VOVF9MSU1JVCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogcGFyc2VkRW52Q29uZmlnLk9URUxfQVRUUklCVVRFX0NPVU5UX0xJTUlUKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiBERUZBVUxUX0FUVFJJQlVURV9DT1VOVF9MSU1JVDtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBSZWFzc2lnbiBzcGFuIGF0dHJpYnV0ZSB2YWx1ZSBsZW5ndGggbGltaXQgdG8gdXNlIGZpcnN0IG5vbiBudWxsIHZhbHVlIGRlZmluZWQgYnkgdXNlciBvciB1c2UgZGVmYXVsdCB2YWx1ZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHNwYW5MaW1pdHMuYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdCA9XG4gICAgICAgICAgICAgICAgICAgIChfbSA9IChfbCA9IChfayA9IChfaCA9IChfZyA9IHVzZXJDb25maWcuc3BhbkxpbWl0cykgPT09IG51bGwgfHwgX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLmF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQpICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IChfaiA9IHVzZXJDb25maWcuZ2VuZXJhbExpbWl0cykgPT09IG51bGwgfHwgX2ogPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9qLmF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQpICE9PSBudWxsICYmIF9rICE9PSB2b2lkIDAgPyBfayA6IHBhcnNlZEVudkNvbmZpZy5PVEVMX1NQQU5fQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCkgIT09IG51bGwgJiYgX2wgIT09IHZvaWQgMCA/IF9sIDogcGFyc2VkRW52Q29uZmlnLk9URUxfQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCkgIT09IG51bGwgJiYgX20gIT09IHZvaWQgMCA/IF9tIDogREVGQVVMVF9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlUO1xuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB1c2VyQ29uZmlnLCB7IHNwYW5MaW1pdHM6IHNwYW5MaW1pdHMgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSB7QGxpbmsgU3BhblByb2Nlc3Nvcn0gdGhhdCBiYXRjaGVzIHNwYW5zIGV4cG9ydGVkIGJ5XG4gICAgICAgICAgICAgKiB0aGUgU0RLIHRoZW4gcHVzaGVzIHRoZW0gdG8gdGhlIGV4cG9ydGVyIHBpcGVsaW5lLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgQmF0Y2hTcGFuUHJvY2Vzc29yQmFzZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBCYXRjaFNwYW5Qcm9jZXNzb3JCYXNlKF9leHBvcnRlciwgY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4cG9ydGVyID0gX2V4cG9ydGVyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc0V4cG9ydGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hlZFNwYW5zID0gW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BwZWRTcGFuc0NvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVudiA9IGdldEVudigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXhFeHBvcnRCYXRjaFNpemUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIChjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcubWF4RXhwb3J0QmF0Y2hTaXplKSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZy5tYXhFeHBvcnRCYXRjaFNpemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGVudi5PVEVMX0JTUF9NQVhfRVhQT1JUX0JBVENIX1NJWkU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21heFF1ZXVlU2l6ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5tYXhRdWV1ZVNpemUpID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY29uZmlnLm1heFF1ZXVlU2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZW52Lk9URUxfQlNQX01BWF9RVUVVRV9TSVpFO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY2hlZHVsZWREZWxheU1pbGxpcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5zY2hlZHVsZWREZWxheU1pbGxpcykgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjb25maWcuc2NoZWR1bGVkRGVsYXlNaWxsaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGVudi5PVEVMX0JTUF9TQ0hFRFVMRV9ERUxBWTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXhwb3J0VGltZW91dE1pbGxpcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5leHBvcnRUaW1lb3V0TWlsbGlzKSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNvbmZpZy5leHBvcnRUaW1lb3V0TWlsbGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlbnYuT1RFTF9CU1BfRVhQT1JUX1RJTUVPVVQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NodXRkb3duT25jZSA9IG5ldyBCaW5kT25jZUZ1dHVyZSh0aGlzLl9zaHV0ZG93biwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYXhFeHBvcnRCYXRjaFNpemUgPiB0aGlzLl9tYXhRdWV1ZVNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLndhcm4oJ0JhdGNoU3BhblByb2Nlc3NvcjogbWF4RXhwb3J0QmF0Y2hTaXplIG11c3QgYmUgc21hbGxlciBvciBlcXVhbCB0byBtYXhRdWV1ZVNpemUsIHNldHRpbmcgbWF4RXhwb3J0QmF0Y2hTaXplIHRvIG1hdGNoIG1heFF1ZXVlU2l6ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWF4RXhwb3J0QmF0Y2hTaXplID0gdGhpcy5fbWF4UXVldWVTaXplO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEJhdGNoU3BhblByb2Nlc3NvckJhc2UucHJvdG90eXBlLmZvcmNlRmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zaHV0ZG93bk9uY2UuaXNDYWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaHV0ZG93bk9uY2UucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZmx1c2hBbGwoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90aGluZy5cbiAgICAgICAgICAgICAgICBCYXRjaFNwYW5Qcm9jZXNzb3JCYXNlLnByb3RvdHlwZS5vblN0YXJ0ID0gZnVuY3Rpb24gKF9zcGFuLCBfcGFyZW50Q29udGV4dCkgeyB9O1xuICAgICAgICAgICAgICAgIEJhdGNoU3BhblByb2Nlc3NvckJhc2UucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NodXRkb3duT25jZS5pc0NhbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgoc3Bhbi5zcGFuQ29udGV4dCgpLnRyYWNlRmxhZ3MgJiBhcGkuVHJhY2VGbGFncy5TQU1QTEVEKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZFRvQnVmZmVyKHNwYW4pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQmF0Y2hTcGFuUHJvY2Vzc29yQmFzZS5wcm90b3R5cGUuc2h1dGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaHV0ZG93bk9uY2UuY2FsbCgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQmF0Y2hTcGFuUHJvY2Vzc29yQmFzZS5wcm90b3R5cGUuX3NodXRkb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5vblNodXRkb3duKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX2ZsdXNoQWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX2V4cG9ydGVyLnNodXRkb3duKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLyoqIEFkZCBhIHNwYW4gaW4gdGhlIGJ1ZmZlci4gKi9cbiAgICAgICAgICAgICAgICBCYXRjaFNwYW5Qcm9jZXNzb3JCYXNlLnByb3RvdHlwZS5fYWRkVG9CdWZmZXIgPSBmdW5jdGlvbiAoc3Bhbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZmluaXNoZWRTcGFucy5sZW5ndGggPj0gdGhpcy5fbWF4UXVldWVTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW1pdCByZWFjaGVkLCBkcm9wIHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kcm9wcGVkU3BhbnNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLmRlYnVnKCdtYXhRdWV1ZVNpemUgcmVhY2hlZCwgZHJvcHBpbmcgc3BhbnMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BwZWRTcGFuc0NvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Ryb3BwZWRTcGFuc0NvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc29tZSBzcGFucyB3ZXJlIGRyb3BwZWQsIGxvZyBvbmNlIHdpdGggY291bnQgb2Ygc3BhbnMgZHJvcHBlZFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmRpYWcud2FybihcIkRyb3BwZWQgXCIgKyB0aGlzLl9kcm9wcGVkU3BhbnNDb3VudCArIFwiIHNwYW5zIGJlY2F1c2UgbWF4UXVldWVTaXplIHJlYWNoZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcm9wcGVkU3BhbnNDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmluaXNoZWRTcGFucy5wdXNoKHNwYW4pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXliZVN0YXJ0VGltZXIoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFNlbmQgYWxsIHNwYW5zIHRvIHRoZSBleHBvcnRlciByZXNwZWN0aW5nIHRoZSBiYXRjaCBzaXplIGxpbWl0XG4gICAgICAgICAgICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIG9ubHkgb24gZm9yY2VGbHVzaCBvciBzaHV0ZG93bixcbiAgICAgICAgICAgICAgICAgKiBmb3IgYWxsIG90aGVyIGNhc2VzIF9mbHVzaCBzaG91bGQgYmUgdXNlZFxuICAgICAgICAgICAgICAgICAqICovXG4gICAgICAgICAgICAgICAgQmF0Y2hTcGFuUHJvY2Vzc29yQmFzZS5wcm90b3R5cGUuX2ZsdXNoQWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb21pc2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgbnVtYmVyIG9mIGJhdGNoZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IE1hdGguY2VpbChfdGhpcy5fZmluaXNoZWRTcGFucy5sZW5ndGggLyBfdGhpcy5fbWF4RXhwb3J0QmF0Y2hTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gY291bnQ7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKF90aGlzLl9mbHVzaE9uZUJhdGNoKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQmF0Y2hTcGFuUHJvY2Vzc29yQmFzZS5wcm90b3R5cGUuX2ZsdXNoT25lQmF0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFyVGltZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZpbmlzaGVkU3BhbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IHdhaXQgYW55bW9yZSBmb3IgZXhwb3J0LCB0aGlzIHdheSB0aGUgbmV4dCBiYXRjaCBjYW4gc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdUaW1lb3V0JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgX3RoaXMuX2V4cG9ydFRpbWVvdXRNaWxsaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldmVudCBkb3duc3RyZWFtIGV4cG9ydGVyIGNhbGxzIGZyb20gZ2VuZXJhdGluZyBzcGFuc1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmNvbnRleHQud2l0aChzdXBwcmVzc1RyYWNpbmckMShhcGkuY29udGV4dC5hY3RpdmUoKSksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgZmluaXNoZWQgc3BhbnMgYnVmZmVyIGhlcmUgYmVjYXVzZSB0aGUgbmV4dCBpbnZvY2F0aW9ucyBvZiB0aGUgX2ZsdXNoIG1ldGhvZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvdWxkIHBhc3MgdGhlIHNhbWUgZmluaXNoZWQgc3BhbnMgdG8gdGhlIGV4cG9ydGVyIGlmIHRoZSBidWZmZXIgaXMgY2xlYXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG91dHNpZGUgdGhlIGV4ZWN1dGlvbiBvZiB0aGlzIGNhbGxiYWNrLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGFucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2ZpbmlzaGVkU3BhbnMubGVuZ3RoIDw9IF90aGlzLl9tYXhFeHBvcnRCYXRjaFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhbnMgPSBfdGhpcy5fZmluaXNoZWRTcGFucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2ZpbmlzaGVkU3BhbnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5zID0gX3RoaXMuX2ZpbmlzaGVkU3BhbnMuc3BsaWNlKDAsIF90aGlzLl9tYXhFeHBvcnRCYXRjaFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9FeHBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5fZXhwb3J0ZXIuZXhwb3J0KHNwYW5zLCBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5jb2RlID09PSBFeHBvcnRSZXN1bHRDb2RlLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoKF9hID0gcmVzdWx0LmVycm9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXcgRXJyb3IoJ0JhdGNoU3BhblByb2Nlc3Nvcjogc3BhbiBleHBvcnQgZmFpbGVkJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwZW5kaW5nUmVzb3VyY2VzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3BhbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBzcGFuc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwYW4ucmVzb3VyY2UuYXN5bmNBdHRyaWJ1dGVzUGVuZGluZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5yZXNvdXJjZS53YWl0Rm9yQXN5bmNBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUmVzb3VyY2VzICE9PSBudWxsICYmIHBlbmRpbmdSZXNvdXJjZXMgIT09IHZvaWQgMCA/IHBlbmRpbmdSZXNvdXJjZXMgOiAocGVuZGluZ1Jlc291cmNlcyA9IFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdSZXNvdXJjZXMucHVzaChzcGFuLnJlc291cmNlLndhaXRGb3JBc3luY0F0dHJpYnV0ZXMoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgc2NoZWR1bGluZyBhIHByb21pc2UgdG8gbWFrZSB0aGUgYmVoYXZpb3IgbW9yZSBwcmVkaWN0YWJsZSBhbmQgZWFzaWVyIHRvIHRlc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVuZGluZ1Jlc291cmNlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb0V4cG9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwocGVuZGluZ1Jlc291cmNlcykudGhlbihkb0V4cG9ydCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsRXJyb3JIYW5kbGVyKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQmF0Y2hTcGFuUHJvY2Vzc29yQmFzZS5wcm90b3R5cGUuX21heWJlU3RhcnRUaW1lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzRXhwb3J0aW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5faXNFeHBvcnRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2ZsdXNoT25lQmF0Y2goKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5faXNFeHBvcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2ZpbmlzaGVkU3BhbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2xlYXJUaW1lcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbWF5YmVTdGFydFRpbWVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5faXNFeHBvcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxFcnJvckhhbmRsZXIoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugb25seSB3YWl0IGlmIHRoZSBxdWV1ZSBkb2Vzbid0IGhhdmUgZW5vdWdoIGVsZW1lbnRzIHlldFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZmluaXNoZWRTcGFucy5sZW5ndGggPj0gdGhpcy5fbWF4RXhwb3J0QmF0Y2hTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmx1c2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGltZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZsdXNoKCk7IH0sIHRoaXMuX3NjaGVkdWxlZERlbGF5TWlsbGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdW5yZWZUaW1lcih0aGlzLl90aW1lcik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBCYXRjaFNwYW5Qcm9jZXNzb3JCYXNlLnByb3RvdHlwZS5fY2xlYXJUaW1lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJhdGNoU3BhblByb2Nlc3NvckJhc2U7XG4gICAgICAgICAgICB9KCkpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIF9fZXh0ZW5kcyA9IChnbG9iYWxUaGlzICYmIGdsb2JhbFRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgICAgICAgICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIHZhciBCYXRjaFNwYW5Qcm9jZXNzb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgICAgICAgICAgX19leHRlbmRzKEJhdGNoU3BhblByb2Nlc3NvciwgX3N1cGVyKTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBCYXRjaFNwYW5Qcm9jZXNzb3IoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgQmF0Y2hTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5vblNodXRkb3duID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBCYXRjaFNwYW5Qcm9jZXNzb3I7XG4gICAgICAgICAgICB9KEJhdGNoU3BhblByb2Nlc3NvckJhc2UpKTtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBTUEFOX0lEX0JZVEVTID0gODtcbiAgICAgICAgICAgIHZhciBUUkFDRV9JRF9CWVRFUyA9IDE2O1xuICAgICAgICAgICAgdmFyIFJhbmRvbUlkR2VuZXJhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFJhbmRvbUlkR2VuZXJhdG9yKCkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUmV0dXJucyBhIHJhbmRvbSAxNi1ieXRlIHRyYWNlIElEIGZvcm1hdHRlZC9lbmNvZGVkIGFzIGEgMzIgbG93ZXJjYXNlIGhleFxuICAgICAgICAgICAgICAgICAgICAgKiBjaGFyYWN0ZXJzIGNvcnJlc3BvbmRpbmcgdG8gMTI4IGJpdHMuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlVHJhY2VJZCA9IGdldElkR2VuZXJhdG9yKFRSQUNFX0lEX0JZVEVTKTtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFJldHVybnMgYSByYW5kb20gOC1ieXRlIHNwYW4gSUQgZm9ybWF0dGVkL2VuY29kZWQgYXMgYSAxNiBsb3dlcmNhc2UgaGV4XG4gICAgICAgICAgICAgICAgICAgICAqIGNoYXJhY3RlcnMgY29ycmVzcG9uZGluZyB0byA2NCBiaXRzLlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZVNwYW5JZCA9IGdldElkR2VuZXJhdG9yKFNQQU5fSURfQllURVMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gUmFuZG9tSWRHZW5lcmF0b3I7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgdmFyIFNIQVJFRF9CVUZGRVIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoVFJBQ0VfSURfQllURVMpO1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SWRHZW5lcmF0b3IoYnl0ZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZ2VuZXJhdGVJZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcyAvIDQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdW5zaWduZWQgcmlnaHQgc2hpZnQgZHJvcHMgZGVjaW1hbCBwYXJ0IG9mIHRoZSBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0IGlzIHJlcXVpcmVkIGJlY2F1c2UgaWYgYSBudW1iZXIgYmV0d2VlbiAyKiozMiBhbmQgMioqMzIgLSAxIGlzIGdlbmVyYXRlZCwgYW4gb3V0IG9mIHJhbmdlIGVycm9yIGlzIHRocm93biBieSB3cml0ZVVJbnQzMkJFXG4gICAgICAgICAgICAgICAgICAgICAgICBTSEFSRURfQlVGRkVSLndyaXRlVUludDMyQkUoKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygyLCAzMikpID4+PiAwLCBpICogNCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgYnVmZmVyIGlzIGFsbCAwLCBzZXQgdGhlIGxhc3QgYnl0ZSB0byAxIHRvIGd1YXJhbnRlZSBhIHZhbGlkIHczYyBpZCBpcyBnZW5lcmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoU0hBUkVEX0JVRkZFUltpXSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IGJ5dGVzIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNIQVJFRF9CVUZGRVJbYnl0ZXMgLSAxXSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNIQVJFRF9CVUZGRVIudG9TdHJpbmcoJ2hleCcsIDAsIGJ5dGVzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBiYXNpYyB0cmFjZXIuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBUcmFjZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBUcmFjZXIgaW5zdGFuY2UuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gVHJhY2VyKGluc3RydW1lbnRhdGlvbkxpYnJhcnksIGNvbmZpZywgX3RyYWNlclByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYWNlclByb3ZpZGVyID0gX3RyYWNlclByb3ZpZGVyO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYWxDb25maWcgPSBtZXJnZUNvbmZpZyhjb25maWcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zYW1wbGVyID0gbG9jYWxDb25maWcuc2FtcGxlcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2VuZXJhbExpbWl0cyA9IGxvY2FsQ29uZmlnLmdlbmVyYWxMaW1pdHM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NwYW5MaW1pdHMgPSBsb2NhbENvbmZpZy5zcGFuTGltaXRzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pZEdlbmVyYXRvciA9IGNvbmZpZy5pZEdlbmVyYXRvciB8fCBuZXcgUmFuZG9tSWRHZW5lcmF0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNvdXJjZSA9IF90cmFjZXJQcm92aWRlci5yZXNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0cnVtZW50YXRpb25MaWJyYXJ5ID0gaW5zdHJ1bWVudGF0aW9uTGlicmFyeTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogU3RhcnRzIGEgbmV3IFNwYW4gb3IgcmV0dXJucyB0aGUgZGVmYXVsdCBOb29wU3BhbiBiYXNlZCBvbiB0aGUgc2FtcGxpbmdcbiAgICAgICAgICAgICAgICAgKiBkZWNpc2lvbi5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBUcmFjZXIucHJvdG90eXBlLnN0YXJ0U3BhbiA9IGZ1bmN0aW9uIChuYW1lLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7IGNvbnRleHQgPSBhcGkuY29udGV4dC5hY3RpdmUoKTsgfVxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgc3BhbiBmcm9tIGNvbnRleHQgaW4gY2FzZSBhIHJvb3Qgc3BhbiBpcyByZXF1ZXN0ZWQgdmlhIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucm9vdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCA9IGFwaS50cmFjZS5kZWxldGVTcGFuKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRTcGFuID0gYXBpLnRyYWNlLmdldFNwYW4oY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1RyYWNpbmdTdXBwcmVzc2VkKGNvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuZGlhZy5kZWJ1ZygnSW5zdHJ1bWVudGF0aW9uIHN1cHByZXNzZWQsIHJldHVybmluZyBOb29wIFNwYW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub25SZWNvcmRpbmdTcGFuID0gYXBpLnRyYWNlLndyYXBTcGFuQ29udGV4dChhcGkuSU5WQUxJRF9TUEFOX0NPTlRFWFQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vblJlY29yZGluZ1NwYW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudFNwYW5Db250ZXh0ID0gcGFyZW50U3BhbiA9PT0gbnVsbCB8fCBwYXJlbnRTcGFuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnRTcGFuLnNwYW5Db250ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGFuSWQgPSB0aGlzLl9pZEdlbmVyYXRvci5nZW5lcmF0ZVNwYW5JZCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhY2VJZDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNlU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRTcGFuSWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFyZW50U3BhbkNvbnRleHQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICFhcGkudHJhY2UuaXNTcGFuQ29udGV4dFZhbGlkKHBhcmVudFNwYW5Db250ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV3IHJvb3Qgc3Bhbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlSWQgPSB0aGlzLl9pZEdlbmVyYXRvci5nZW5lcmF0ZVRyYWNlSWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldyBjaGlsZCBzcGFuLlxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2VJZCA9IHBhcmVudFNwYW5Db250ZXh0LnRyYWNlSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjZVN0YXRlID0gcGFyZW50U3BhbkNvbnRleHQudHJhY2VTdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFNwYW5JZCA9IHBhcmVudFNwYW5Db250ZXh0LnNwYW5JZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BhbktpbmQgPSAoX2EgPSBvcHRpb25zLmtpbmQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGFwaS5TcGFuS2luZC5JTlRFUk5BTDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmtzID0gKChfYiA9IG9wdGlvbnMubGlua3MpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdKS5tYXAoZnVuY3Rpb24gKGxpbmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogbGluay5jb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHNhbml0aXplQXR0cmlidXRlcyhsaW5rLmF0dHJpYnV0ZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gc2FuaXRpemVBdHRyaWJ1dGVzKG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc2FtcGxpbmcgZGVjaXNpb25cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNhbXBsaW5nUmVzdWx0ID0gdGhpcy5fc2FtcGxlci5zaG91bGRTYW1wbGUoY29udGV4dCwgdHJhY2VJZCwgbmFtZSwgc3BhbktpbmQsIGF0dHJpYnV0ZXMsIGxpbmtzKTtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2VTdGF0ZSA9IChfYyA9IHNhbXBsaW5nUmVzdWx0LnRyYWNlU3RhdGUpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IHRyYWNlU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFjZUZsYWdzID0gc2FtcGxpbmdSZXN1bHQuZGVjaXNpb24gPT09IGFwaS5TYW1wbGluZ0RlY2lzaW9uLlJFQ09SRF9BTkRfU0FNUExFRFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBhcGkuVHJhY2VGbGFncy5TQU1QTEVEXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGFwaS5UcmFjZUZsYWdzLk5PTkU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGFuQ29udGV4dCA9IHsgdHJhY2VJZDogdHJhY2VJZCwgc3BhbklkOiBzcGFuSWQsIHRyYWNlRmxhZ3M6IHRyYWNlRmxhZ3MsIHRyYWNlU3RhdGU6IHRyYWNlU3RhdGUgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNhbXBsaW5nUmVzdWx0LmRlY2lzaW9uID09PSBhcGkuU2FtcGxpbmdEZWNpc2lvbi5OT1RfUkVDT1JEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuZGlhZy5kZWJ1ZygnUmVjb3JkaW5nIGlzIG9mZiwgcHJvcGFnYXRpbmcgY29udGV4dCBpbiBhIG5vbi1yZWNvcmRpbmcgc3BhbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vblJlY29yZGluZ1NwYW4gPSBhcGkudHJhY2Uud3JhcFNwYW5Db250ZXh0KHNwYW5Db250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub25SZWNvcmRpbmdTcGFuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHNwYW4gYXR0cmlidXRlcy4gVGhlIGF0dHJpYnV0ZXMgb2JqZWN0IG1heSBoYXZlIGJlZW4gbXV0YXRlZFxuICAgICAgICAgICAgICAgICAgICAvLyBieSB0aGUgc2FtcGxlciwgc28gd2Ugc2FuaXRpemUgdGhlIG1lcmdlZCBhdHRyaWJ1dGVzIGJlZm9yZSBzZXR0aW5nIHRoZW0uXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbml0QXR0cmlidXRlcyA9IHNhbml0aXplQXR0cmlidXRlcyhPYmplY3QuYXNzaWduKGF0dHJpYnV0ZXMsIHNhbXBsaW5nUmVzdWx0LmF0dHJpYnV0ZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBuZXcgU3Bhbih0aGlzLCBjb250ZXh0LCBuYW1lLCBzcGFuQ29udGV4dCwgc3BhbktpbmQsIHBhcmVudFNwYW5JZCwgbGlua3MsIG9wdGlvbnMuc3RhcnRUaW1lLCB1bmRlZmluZWQsIGluaXRBdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBUcmFjZXIucHJvdG90eXBlLnN0YXJ0QWN0aXZlU3BhbiA9IGZ1bmN0aW9uIChuYW1lLCBhcmcyLCBhcmczLCBhcmc0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcHRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3R4O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm47XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuID0gYXJnMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRzID0gYXJnMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuID0gYXJnMztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMgPSBhcmcyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4ID0gYXJnMztcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuID0gYXJnNDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50Q29udGV4dCA9IGN0eCAhPT0gbnVsbCAmJiBjdHggIT09IHZvaWQgMCA/IGN0eCA6IGFwaS5jb250ZXh0LmFjdGl2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3BhbiA9IHRoaXMuc3RhcnRTcGFuKG5hbWUsIG9wdHMsIHBhcmVudENvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGV4dFdpdGhTcGFuU2V0ID0gYXBpLnRyYWNlLnNldFNwYW4ocGFyZW50Q29udGV4dCwgc3Bhbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGkuY29udGV4dC53aXRoKGNvbnRleHRXaXRoU3BhblNldCwgZm4sIHVuZGVmaW5lZCwgc3Bhbik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvKiogUmV0dXJucyB0aGUgYWN0aXZlIHtAbGluayBHZW5lcmFsTGltaXRzfS4gKi9cbiAgICAgICAgICAgICAgICBUcmFjZXIucHJvdG90eXBlLmdldEdlbmVyYWxMaW1pdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZW5lcmFsTGltaXRzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLyoqIFJldHVybnMgdGhlIGFjdGl2ZSB7QGxpbmsgU3BhbkxpbWl0c30uICovXG4gICAgICAgICAgICAgICAgVHJhY2VyLnByb3RvdHlwZS5nZXRTcGFuTGltaXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3BhbkxpbWl0cztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFRyYWNlci5wcm90b3R5cGUuZ2V0QWN0aXZlU3BhblByb2Nlc3NvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYWNlclByb3ZpZGVyLmdldEFjdGl2ZVNwYW5Qcm9jZXNzb3IoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBUcmFjZXI7XG4gICAgICAgICAgICB9KCkpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgICAgICAgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIF9fdmFsdWVzID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgICAgICAgICAgICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJbXBsZW1lbnRhdGlvbiBvZiB0aGUge0BsaW5rIFNwYW5Qcm9jZXNzb3J9IHRoYXQgc2ltcGx5IGZvcndhcmRzIGFsbFxuICAgICAgICAgICAgICogcmVjZWl2ZWQgZXZlbnRzIHRvIGEgbGlzdCBvZiB7QGxpbmsgU3BhblByb2Nlc3Nvcn1zLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgTXVsdGlTcGFuUHJvY2Vzc29yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE11bHRpU3BhblByb2Nlc3Nvcihfc3BhblByb2Nlc3NvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3BhblByb2Nlc3NvcnMgPSBfc3BhblByb2Nlc3NvcnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE11bHRpU3BhblByb2Nlc3Nvci5wcm90b3R5cGUuZm9yY2VGbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLl9zcGFuUHJvY2Vzc29ycyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BhblByb2Nlc3NvciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goc3BhblByb2Nlc3Nvci5mb3JjZUZsdXNoKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsRXJyb3JIYW5kbGVyKGVycm9yIHx8IG5ldyBFcnJvcignTXVsdGlTcGFuUHJvY2Vzc29yOiBmb3JjZUZsdXNoIGZhaWxlZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNdWx0aVNwYW5Qcm9jZXNzb3IucHJvdG90eXBlLm9uU3RhcnQgPSBmdW5jdGlvbiAoc3BhbiwgY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZV8yLCBfYTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXModGhpcy5fc3BhblByb2Nlc3NvcnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwYW5Qcm9jZXNzb3IgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuUHJvY2Vzc29yLm9uU3RhcnQoc3BhbiwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTXVsdGlTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChzcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlXzMsIF9hO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLl9zcGFuUHJvY2Vzc29ycyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BhblByb2Nlc3NvciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5Qcm9jZXNzb3Iub25FbmQoc3Bhbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTXVsdGlTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5zaHV0ZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVfNCwgX2E7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLl9zcGFuUHJvY2Vzc29ycyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BhblByb2Nlc3NvciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goc3BhblByb2Nlc3Nvci5zaHV0ZG93bigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV80XzEpIHsgZV80ID0geyBlcnJvcjogZV80XzEgfTsgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzQpIHRocm93IGVfNC5lcnJvcjsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTXVsdGlTcGFuUHJvY2Vzc29yO1xuICAgICAgICAgICAgfSgpKTtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8qKiBOby1vcCBpbXBsZW1lbnRhdGlvbiBvZiBTcGFuUHJvY2Vzc29yICovXG4gICAgICAgICAgICB2YXIgTm9vcFNwYW5Qcm9jZXNzb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gTm9vcFNwYW5Qcm9jZXNzb3IoKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE5vb3BTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5vblN0YXJ0ID0gZnVuY3Rpb24gKF9zcGFuLCBfY29udGV4dCkgeyB9O1xuICAgICAgICAgICAgICAgIE5vb3BTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5vbkVuZCA9IGZ1bmN0aW9uIChfc3BhbikgeyB9O1xuICAgICAgICAgICAgICAgIE5vb3BTcGFuUHJvY2Vzc29yLnByb3RvdHlwZS5zaHV0ZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTm9vcFNwYW5Qcm9jZXNzb3IucHJvdG90eXBlLmZvcmNlRmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBOb29wU3BhblByb2Nlc3NvcjtcbiAgICAgICAgICAgIH0oKSk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gICAgICAgICAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAgICAgICAgICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgX19yZWFkID0gKGdsb2JhbFRoaXMgJiYgZ2xvYmFsVGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgICAgICAgICAgICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgICAgICAgICAgICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhcjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgX19zcHJlYWRBcnJheSA9IChnbG9iYWxUaGlzICYmIGdsb2JhbFRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgRm9yY2VGbHVzaFN0YXRlO1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChGb3JjZUZsdXNoU3RhdGUpIHtcbiAgICAgICAgICAgICAgICBGb3JjZUZsdXNoU3RhdGVbRm9yY2VGbHVzaFN0YXRlW1wicmVzb2x2ZWRcIl0gPSAwXSA9IFwicmVzb2x2ZWRcIjtcbiAgICAgICAgICAgICAgICBGb3JjZUZsdXNoU3RhdGVbRm9yY2VGbHVzaFN0YXRlW1widGltZW91dFwiXSA9IDFdID0gXCJ0aW1lb3V0XCI7XG4gICAgICAgICAgICAgICAgRm9yY2VGbHVzaFN0YXRlW0ZvcmNlRmx1c2hTdGF0ZVtcImVycm9yXCJdID0gMl0gPSBcImVycm9yXCI7XG4gICAgICAgICAgICAgICAgRm9yY2VGbHVzaFN0YXRlW0ZvcmNlRmx1c2hTdGF0ZVtcInVucmVzb2x2ZWRcIl0gPSAzXSA9IFwidW5yZXNvbHZlZFwiO1xuICAgICAgICAgICAgfSkoRm9yY2VGbHVzaFN0YXRlIHx8IChGb3JjZUZsdXNoU3RhdGUgPSB7fSkpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBiYXNpYyB0cmFjZXIgcHJvdmlkZXIgd2hpY2ggcGxhdGZvcm0gbGlicmFyaWVzIGNhbiBleHRlbmRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIEJhc2ljVHJhY2VyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gQmFzaWNUcmFjZXJQcm92aWRlcihjb25maWcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7IGNvbmZpZyA9IHt9OyB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyZWRTcGFuUHJvY2Vzc29ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFjZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWVyZ2VkQ29uZmlnID0gbWVyZ2Uoe30sIGxvYWREZWZhdWx0Q29uZmlnKCksIHJlY29uZmlndXJlTGltaXRzKGNvbmZpZykpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc291cmNlID0gKF9hID0gbWVyZ2VkQ29uZmlnLnJlc291cmNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBSZXNvdXJjZS5lbXB0eSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVyZ2VkQ29uZmlnLm1lcmdlUmVzb3VyY2VXaXRoRGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzb3VyY2UgPSBSZXNvdXJjZS5kZWZhdWx0KCkubWVyZ2UodGhpcy5yZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgbWVyZ2VkQ29uZmlnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZTogdGhpcy5yZXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoX2IgPSBjb25maWcuc3BhblByb2Nlc3NvcnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyZWRTcGFuUHJvY2Vzc29ycyA9IF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChjb25maWcuc3BhblByb2Nlc3NvcnMpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVNwYW5Qcm9jZXNzb3IgPSBuZXcgTXVsdGlTcGFuUHJvY2Vzc29yKHRoaXMuX3JlZ2lzdGVyZWRTcGFuUHJvY2Vzc29ycyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEV4cG9ydGVyID0gdGhpcy5fYnVpbGRFeHBvcnRlckZyb21FbnYoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0RXhwb3J0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYXRjaFByb2Nlc3NvciA9IG5ldyBCYXRjaFNwYW5Qcm9jZXNzb3IoZGVmYXVsdEV4cG9ydGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVNwYW5Qcm9jZXNzb3IgPSBiYXRjaFByb2Nlc3NvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlU3BhblByb2Nlc3NvciA9IG5ldyBOb29wU3BhblByb2Nlc3NvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEJhc2ljVHJhY2VyUHJvdmlkZXIucHJvdG90eXBlLmdldFRyYWNlciA9IGZ1bmN0aW9uIChuYW1lLCB2ZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBuYW1lICsgXCJAXCIgKyAodmVyc2lvbiB8fCAnJykgKyBcIjpcIiArICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNjaGVtYVVybCkgfHwgJycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3RyYWNlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYWNlcnMuc2V0KGtleSwgbmV3IFRyYWNlcih7IG5hbWU6IG5hbWUsIHZlcnNpb246IHZlcnNpb24sIHNjaGVtYVVybDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNjaGVtYVVybCB9LCB0aGlzLl9jb25maWcsIHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhY2Vycy5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEBkZXByZWNhdGVkIHBsZWFzZSB1c2Uge0BsaW5rIFRyYWNlckNvbmZpZ30gc3BhblByb2Nlc3NvcnMgcHJvcGVydHlcbiAgICAgICAgICAgICAgICAgKiBBZGRzIGEgbmV3IHtAbGluayBTcGFuUHJvY2Vzc29yfSB0byB0aGlzIHRyYWNlci5cbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gc3BhblByb2Nlc3NvciB0aGUgbmV3IFNwYW5Qcm9jZXNzb3IgdG8gYmUgYWRkZWQuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgQmFzaWNUcmFjZXJQcm92aWRlci5wcm90b3R5cGUuYWRkU3BhblByb2Nlc3NvciA9IGZ1bmN0aW9uIChzcGFuUHJvY2Vzc29yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZWdpc3RlcmVkU3BhblByb2Nlc3NvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSB3ZSBtaWdodCBoYXZlIGVuYWJsZWQgYnkgZGVmYXVsdCBhIGJhdGNoUHJvY2Vzc29yLCB3ZSBkaXNhYmxlIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWZvcmUgYWRkaW5nIHRoZSBuZXcgb25lXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVNwYW5Qcm9jZXNzb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2h1dGRvd24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaS5kaWFnLmVycm9yKCdFcnJvciB3aGlsZSB0cnlpbmcgdG8gc2h1dGRvd24gY3VycmVudCBzcGFuIHByb2Nlc3NvcicsIGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWdpc3RlcmVkU3BhblByb2Nlc3NvcnMucHVzaChzcGFuUHJvY2Vzc29yKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTcGFuUHJvY2Vzc29yID0gbmV3IE11bHRpU3BhblByb2Nlc3Nvcih0aGlzLl9yZWdpc3RlcmVkU3BhblByb2Nlc3NvcnMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQmFzaWNUcmFjZXJQcm92aWRlci5wcm90b3R5cGUuZ2V0QWN0aXZlU3BhblByb2Nlc3NvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlU3BhblByb2Nlc3NvcjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFJlZ2lzdGVyIHRoaXMgVHJhY2VyUHJvdmlkZXIgZm9yIHVzZSB3aXRoIHRoZSBPcGVuVGVsZW1ldHJ5IEFQSS5cbiAgICAgICAgICAgICAgICAgKiBVbmRlZmluZWQgdmFsdWVzIG1heSBiZSByZXBsYWNlZCB3aXRoIGRlZmF1bHRzLCBhbmRcbiAgICAgICAgICAgICAgICAgKiBudWxsIHZhbHVlcyB3aWxsIGJlIHNraXBwZWQuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gY29uZmlnIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBTREsgcmVnaXN0cmF0aW9uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgQmFzaWNUcmFjZXJQcm92aWRlci5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkgeyBjb25maWcgPSB7fTsgfVxuICAgICAgICAgICAgICAgICAgICBhcGkudHJhY2Uuc2V0R2xvYmFsVHJhY2VyUHJvdmlkZXIodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcucHJvcGFnYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcucHJvcGFnYXRvciA9IHRoaXMuX2J1aWxkUHJvcGFnYXRvckZyb21FbnYoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmNvbnRleHRNYW5hZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcGkuY29udGV4dC5zZXRHbG9iYWxDb250ZXh0TWFuYWdlcihjb25maWcuY29udGV4dE1hbmFnZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcucHJvcGFnYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLnByb3BhZ2F0aW9uLnNldEdsb2JhbFByb3BhZ2F0b3IoY29uZmlnLnByb3BhZ2F0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBCYXNpY1RyYWNlclByb3ZpZGVyLnByb3RvdHlwZS5mb3JjZUZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZW91dCA9IHRoaXMuX2NvbmZpZy5mb3JjZUZsdXNoVGltZW91dE1pbGxpcztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb21pc2VzID0gdGhpcy5fcmVnaXN0ZXJlZFNwYW5Qcm9jZXNzb3JzLm1hcChmdW5jdGlvbiAoc3BhblByb2Nlc3Nvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lb3V0SW50ZXJ2YWwgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgRXJyb3IoXCJTcGFuIHByb2Nlc3NvciBkaWQgbm90IGNvbXBsZXRlZCB3aXRoaW4gdGltZW91dCBwZXJpb2Qgb2YgXCIgKyB0aW1lb3V0ICsgXCIgbXNcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IEZvcmNlRmx1c2hTdGF0ZS50aW1lb3V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW5Qcm9jZXNzb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZvcmNlRmx1c2goKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgIT09IEZvcmNlRmx1c2hTdGF0ZS50aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IEZvcmNlRmx1c2hTdGF0ZS5yZXNvbHZlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBGb3JjZUZsdXNoU3RhdGUuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHJlc3VsdCkgeyByZXR1cm4gcmVzdWx0ICE9PSBGb3JjZUZsdXNoU3RhdGUucmVzb2x2ZWQ7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3JzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsgcmV0dXJuIHJlamVjdChbZXJyb3JdKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQmFzaWNUcmFjZXJQcm92aWRlci5wcm90b3R5cGUuc2h1dGRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZVNwYW5Qcm9jZXNzb3Iuc2h1dGRvd24oKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFRTIGNhbm5vdCB5ZXQgaW5mZXIgdGhlIHR5cGUgb2YgdGhpcy5jb25zdHJ1Y3RvcjpcbiAgICAgICAgICAgICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzM4NDEjaXNzdWVjb21tZW50LTMzNzU2MDE0NlxuICAgICAgICAgICAgICAgICAqIFRoZXJlIGlzIG5vIG5lZWQgdG8gb3ZlcnJpZGUgZWl0aGVyIG9mIHRoZSBnZXR0ZXJzIGluIHlvdXIgY2hpbGQgY2xhc3MuXG4gICAgICAgICAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIHJlZ2lzdGVyZWQgY29tcG9uZW50IG1hcHMgc2hvdWxkIGJlIHRoZSBzYW1lIGFjcm9zcyBhbGxcbiAgICAgICAgICAgICAgICAgKiBjbGFzc2VzIGluIHRoZSBpbmhlcml0YW5jZSB0cmVlLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIEJhc2ljVHJhY2VyUHJvdmlkZXIucHJvdG90eXBlLl9nZXRQcm9wYWdhdG9yID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5jb25zdHJ1Y3Rvci5fcmVnaXN0ZXJlZFByb3BhZ2F0b3JzLmdldChuYW1lKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBCYXNpY1RyYWNlclByb3ZpZGVyLnByb3RvdHlwZS5fZ2V0U3BhbkV4cG9ydGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5jb25zdHJ1Y3Rvci5fcmVnaXN0ZXJlZEV4cG9ydGVycy5nZXQobmFtZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQmFzaWNUcmFjZXJQcm92aWRlci5wcm90b3R5cGUuX2J1aWxkUHJvcGFnYXRvckZyb21FbnYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBlciBzcGVjLCBwcm9wYWdhdG9ycyBmcm9tIGVudiBtdXN0IGJlIGRlZHVwbGljYXRlZFxuICAgICAgICAgICAgICAgICAgICB2YXIgdW5pcXVlUHJvcGFnYXRvck5hbWVzID0gQXJyYXkuZnJvbShuZXcgU2V0KGdldEVudigpLk9URUxfUFJPUEFHQVRPUlMpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BhZ2F0b3JzID0gdW5pcXVlUHJvcGFnYXRvck5hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BhZ2F0b3IgPSBfdGhpcy5fZ2V0UHJvcGFnYXRvcihuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJvcGFnYXRvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaS5kaWFnLndhcm4oXCJQcm9wYWdhdG9yIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgcmVxdWVzdGVkIHRocm91Z2ggZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgdW5hdmFpbGFibGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3BhZ2F0b3I7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRQcm9wYWdhdG9ycyA9IHByb3BhZ2F0b3JzLnJlZHVjZShmdW5jdGlvbiAobGlzdCwgaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgICAgICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRQcm9wYWdhdG9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh1bmlxdWVQcm9wYWdhdG9yTmFtZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRQcm9wYWdhdG9yc1swXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcG9zaXRlUHJvcGFnYXRvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGFnYXRvcnM6IHZhbGlkUHJvcGFnYXRvcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgQmFzaWNUcmFjZXJQcm92aWRlci5wcm90b3R5cGUuX2J1aWxkRXhwb3J0ZXJGcm9tRW52ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXhwb3J0ZXJOYW1lID0gZ2V0RW52KCkuT1RFTF9UUkFDRVNfRVhQT1JURVI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleHBvcnRlck5hbWUgPT09ICdub25lJyB8fCBleHBvcnRlck5hbWUgPT09ICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXhwb3J0ZXIgPSB0aGlzLl9nZXRTcGFuRXhwb3J0ZXIoZXhwb3J0ZXJOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFleHBvcnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXBpLmRpYWcuZXJyb3IoXCJFeHBvcnRlciBcXFwiXCIgKyBleHBvcnRlck5hbWUgKyBcIlxcXCIgcmVxdWVzdGVkIHRocm91Z2ggZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgdW5hdmFpbGFibGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleHBvcnRlcjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIEJhc2ljVHJhY2VyUHJvdmlkZXIuX3JlZ2lzdGVyZWRQcm9wYWdhdG9ycyA9IG5ldyBNYXAoW1xuICAgICAgICAgICAgICAgICAgICBbJ3RyYWNlY29udGV4dCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBXM0NUcmFjZUNvbnRleHRQcm9wYWdhdG9yKCk7IH1dLFxuICAgICAgICAgICAgICAgICAgICBbJ2JhZ2dhZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgVzNDQmFnZ2FnZVByb3BhZ2F0b3IoKTsgfV0sXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgQmFzaWNUcmFjZXJQcm92aWRlci5fcmVnaXN0ZXJlZEV4cG9ydGVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmFzaWNUcmFjZXJQcm92aWRlcjtcbiAgICAgICAgICAgIH0oKSk7XG5cbiAgICAgICAgICAgIC8qKiBJZiB0aGlzIGF0dHJpYnV0ZSBpcyB0cnVlLCBpdCBtZWFucyB0aGF0IHRoZSBwYXJlbnQgaXMgYSByZW1vdGUgc3Bhbi4gKi9cbiAgICAgICAgICAgIGNvbnN0IFNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfUEFSRU5UX0lTX1JFTU9URSA9ICdzZW50cnkucGFyZW50SXNSZW1vdGUnO1xuXG4gICAgICAgICAgICAvLyBUaGVzZSBhcmUgbm90IHN0YW5kYXJkaXplZCB5ZXQsIGJ1dCB1c2VkIGJ5IHRoZSBncmFwaHFsIGluc3RydW1lbnRhdGlvblxuICAgICAgICAgICAgY29uc3QgU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9HUkFQSFFMX09QRVJBVElPTiA9ICdzZW50cnkuZ3JhcGhxbC5vcGVyYXRpb24nO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENoZWNrIGlmIGEgZ2l2ZW4gc3BhbiBoYXMgYXR0cmlidXRlcy5cbiAgICAgICAgICAgICAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGJhc2UgYFNwYW5gIHR5cGUgZG9lcyBub3QgaGF2ZSBhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICogc28gaW4gcGxhY2VzIHdoZXJlIHdlIGFyZSBwYXNzZWQgYSBnZW5lcmljIHNwYW4sIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2Ugd2FudCB0byBhY2Nlc3MgdGhlbS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gc3Bhbkhhc0F0dHJpYnV0ZXMoXG4gICAgICAgICAgICAgIHNwYW4sXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29uc3QgY2FzdFNwYW4gPSBzcGFuIDtcbiAgICAgICAgICAgICAgcmV0dXJuICEhY2FzdFNwYW4uYXR0cmlidXRlcyAmJiB0eXBlb2YgY2FzdFNwYW4uYXR0cmlidXRlcyA9PT0gJ29iamVjdCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2hlY2sgaWYgYSBnaXZlbiBzcGFuIGhhcyBhIGtpbmQuXG4gICAgICAgICAgICAgKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBiYXNlIGBTcGFuYCB0eXBlIGRvZXMgbm90IGhhdmUgYSBraW5kLFxuICAgICAgICAgICAgICogc28gaW4gcGxhY2VzIHdoZXJlIHdlIGFyZSBwYXNzZWQgYSBnZW5lcmljIHNwYW4sIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2Ugd2FudCB0byBhY2Nlc3MgaXQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNwYW5IYXNLaW5kKHNwYW4pIHtcbiAgICAgICAgICAgICAgY29uc3QgY2FzdFNwYW4gPSBzcGFuIDtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBjYXN0U3Bhbi5raW5kID09PSAnbnVtYmVyJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDaGVjayBpZiBhIGdpdmVuIHNwYW4gaGFzIGEgc3RhdHVzLlxuICAgICAgICAgICAgICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgYmFzZSBgU3BhbmAgdHlwZSBkb2VzIG5vdCBoYXZlIGEgc3RhdHVzLFxuICAgICAgICAgICAgICogc28gaW4gcGxhY2VzIHdoZXJlIHdlIGFyZSBwYXNzZWQgYSBnZW5lcmljIHNwYW4sIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2Ugd2FudCB0byBhY2Nlc3MgaXQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNwYW5IYXNTdGF0dXMoXG4gICAgICAgICAgICAgIHNwYW4sXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29uc3QgY2FzdFNwYW4gPSBzcGFuIDtcbiAgICAgICAgICAgICAgcmV0dXJuICEhY2FzdFNwYW4uc3RhdHVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENoZWNrIGlmIGEgZ2l2ZW4gc3BhbiBoYXMgYSBuYW1lLlxuICAgICAgICAgICAgICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgYmFzZSBgU3BhbmAgdHlwZSBkb2VzIG5vdCBoYXZlIGEgbmFtZSxcbiAgICAgICAgICAgICAqIHNvIGluIHBsYWNlcyB3aGVyZSB3ZSBhcmUgcGFzc2VkIGEgZ2VuZXJpYyBzcGFuLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIHdhbnQgdG8gYWNjZXNzIGl0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzcGFuSGFzTmFtZShzcGFuKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNhc3RTcGFuID0gc3BhbiA7XG4gICAgICAgICAgICAgIHJldHVybiAhIWNhc3RTcGFuLm5hbWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2hlY2sgaWYgYSBnaXZlbiBzcGFuIGhhcyBhIGtpbmQuXG4gICAgICAgICAgICAgKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBiYXNlIGBTcGFuYCB0eXBlIGRvZXMgbm90IGhhdmUgYSBraW5kLFxuICAgICAgICAgICAgICogc28gaW4gcGxhY2VzIHdoZXJlIHdlIGFyZSBwYXNzZWQgYSBnZW5lcmljIHNwYW4sIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2Ugd2FudCB0byBhY2Nlc3MgaXQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNwYW5IYXNQYXJlbnRJZChcbiAgICAgICAgICAgICAgc3BhbixcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb25zdCBjYXN0U3BhbiA9IHNwYW4gO1xuICAgICAgICAgICAgICByZXR1cm4gISFjYXN0U3Bhbi5wYXJlbnRTcGFuSWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHNhbml0aXppZWQgcmVxdWVzdCBkYXRhIGZyb20gYW4gT1RFTCBzcGFuLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRSZXF1ZXN0U3BhbkRhdGEoc3Bhbikge1xuICAgICAgICAgICAgICAvLyBUaGUgYmFzZSBgU3BhbmAgdHlwZSBoYXMgbm8gYGF0dHJpYnV0ZXNgLCBzbyB3ZSBuZWVkIHRvIGd1YXJkIGhlcmUgYWdhaW5zdCB0aGF0XG4gICAgICAgICAgICAgIGlmICghc3Bhbkhhc0F0dHJpYnV0ZXMoc3BhbikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgY29uc3QgbWF5YmVVcmxBdHRyaWJ1dGUgPSAoc3Bhbi5hdHRyaWJ1dGVzW0FUVFJfVVJMX0ZVTExdIHx8IHNwYW4uYXR0cmlidXRlc1tTRU1BVFRSU19IVFRQX1VSTF0pXG5cbiAgICAgICAgICAgIDtcblxuICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICAgIHVybDogbWF5YmVVcmxBdHRyaWJ1dGUsXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgICAgJ2h0dHAubWV0aG9kJzogKHNwYW4uYXR0cmlidXRlc1tBVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0RdIHx8IHNwYW4uYXR0cmlidXRlc1tTRU1BVFRSU19IVFRQX01FVEhPRF0pXG5cbiAgICAgICAgICAgICxcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAvLyBEZWZhdWx0IHRvIEdFVCBpZiBVUkwgaXMgc2V0IGJ1dCBtZXRob2QgaXMgbm90XG4gICAgICAgICAgICAgIGlmICghZGF0YVsnaHR0cC5tZXRob2QnXSAmJiBkYXRhLnVybCkge1xuICAgICAgICAgICAgICAgIGRhdGFbJ2h0dHAubWV0aG9kJ10gPSAnR0VUJztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXliZVVybEF0dHJpYnV0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGNvcmUucGFyc2VVcmwobWF5YmVVcmxBdHRyaWJ1dGUpO1xuXG4gICAgICAgICAgICAgICAgICBkYXRhLnVybCA9IGNvcmUuZ2V0U2FuaXRpemVkVXJsU3RyaW5nKHVybCk7XG5cbiAgICAgICAgICAgICAgICAgIGlmICh1cmwuc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFbJ2h0dHAucXVlcnknXSA9IHVybC5zZWFyY2g7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAodXJsLmhhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVsnaHR0cC5mcmFnbWVudCddID0gdXJsLmhhc2g7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gaWdub3JlXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCB0aGUgc3BhbiBraW5kIGZyb20gYSBzcGFuLlxuICAgICAgICAgICAgICogRm9yIHdoYXRldmVyIHJlYXNvbiwgdGhpcyBpcyBub3QgcHVibGljIEFQSSBvbiB0aGUgZ2VuZXJpYyBcIlNwYW5cIiB0eXBlLFxuICAgICAgICAgICAgICogc28gd2UgbmVlZCB0byBjaGVjayBpZiB3ZSBhY3R1YWxseSBoYXZlIGEgYFNES1RyYWNlQmFzZVNwYW5gIHdoZXJlIHdlIGNhbiBmZXRjaCB0aGlzIGZyb20uXG4gICAgICAgICAgICAgKiBPdGhlcndpc2UsIHdlIGZhbGwgYmFjayB0byBgU3BhbktpbmQuSU5URVJOQUxgLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRTcGFuS2luZChzcGFuKSB7XG4gICAgICAgICAgICAgIGlmIChzcGFuSGFzS2luZChzcGFuKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzcGFuLmtpbmQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gYXBpLlNwYW5LaW5kLklOVEVSTkFMO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBTRU5UUllfVFJBQ0VfSEVBREVSID0gJ3NlbnRyeS10cmFjZSc7XG4gICAgICAgICAgICBjb25zdCBTRU5UUllfQkFHR0FHRV9IRUFERVIgPSAnYmFnZ2FnZSc7XG5cbiAgICAgICAgICAgIGNvbnN0IFNFTlRSWV9UUkFDRV9TVEFURV9EU0MgPSAnc2VudHJ5LmRzYyc7XG4gICAgICAgICAgICBjb25zdCBTRU5UUllfVFJBQ0VfU1RBVEVfU0FNUExFRF9OT1RfUkVDT1JESU5HID0gJ3NlbnRyeS5zYW1wbGVkX25vdF9yZWNvcmRpbmcnO1xuICAgICAgICAgICAgY29uc3QgU0VOVFJZX1RSQUNFX1NUQVRFX1VSTCA9ICdzZW50cnkudXJsJztcblxuICAgICAgICAgICAgY29uc3QgU0VOVFJZX1NDT1BFU19DT05URVhUX0tFWSA9IGFwaS5jcmVhdGVDb250ZXh0S2V5KCdzZW50cnlfc2NvcGVzJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IFNFTlRSWV9GT1JLX0lTT0xBVElPTl9TQ09QRV9DT05URVhUX0tFWSA9IGFwaS5jcmVhdGVDb250ZXh0S2V5KCdzZW50cnlfZm9ya19pc29sYXRpb25fc2NvcGUnKTtcblxuICAgICAgICAgICAgY29uc3QgU0VOVFJZX0ZPUktfU0VUX1NDT1BFX0NPTlRFWFRfS0VZID0gYXBpLmNyZWF0ZUNvbnRleHRLZXkoJ3NlbnRyeV9mb3JrX3NldF9zY29wZScpO1xuXG4gICAgICAgICAgICBjb25zdCBTRU5UUllfRk9SS19TRVRfSVNPTEFUSU9OX1NDT1BFX0NPTlRFWFRfS0VZID0gYXBpLmNyZWF0ZUNvbnRleHRLZXkoJ3NlbnRyeV9mb3JrX3NldF9pc29sYXRpb25fc2NvcGUnKTtcblxuICAgICAgICAgICAgY29uc3QgU0NPUEVfQ09OVEVYVF9GSUVMRCA9ICdfc2NvcGVDb250ZXh0JztcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUcnkgdG8gZ2V0IHRoZSBjdXJyZW50IHNjb3BlcyBmcm9tIHRoZSBnaXZlbiBPVEVMIGNvbnRleHQuXG4gICAgICAgICAgICAgKiBUaGlzIHJlcXVpcmVzIGEgQ29udGV4dCBNYW5hZ2VyIHRoYXQgd2FzIHdyYXBwZWQgd2l0aCBnZXRXcmFwcGVkQ29udGV4dE1hbmFnZXIuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNjb3Blc0Zyb21Db250ZXh0KGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuZ2V0VmFsdWUoU0VOVFJZX1NDT1BFU19DT05URVhUX0tFWSkgO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNldCB0aGUgY3VycmVudCBzY29wZXMgb24gYW4gT1RFTCBjb250ZXh0LlxuICAgICAgICAgICAgICogVGhpcyB3aWxsIHJldHVybiBhIGZvcmtlZCBjb250ZXh0IHdpdGggdGhlIFByb3BhZ2F0aW9uIENvbnRleHQgc2V0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRTY29wZXNPbkNvbnRleHQoY29udGV4dCwgc2NvcGVzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnNldFZhbHVlKFNFTlRSWV9TQ09QRVNfQ09OVEVYVF9LRVksIHNjb3Blcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0IHRoZSBjb250ZXh0IG9uIHRoZSBzY29wZSBzbyB3ZSBjYW4gbGF0ZXIgbG9vayBpdCB1cC5cbiAgICAgICAgICAgICAqIFdlIG5lZWQgdGhpcyB0byBnZXQgdGhlIGNvbnRleHQgZnJvbSB0aGUgc2NvcGUgaW4gdGhlIGB0cmFjZWAgZnVuY3Rpb25zLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXRDb250ZXh0T25TY29wZShzY29wZSwgY29udGV4dCkge1xuICAgICAgICAgICAgICBjb3JlLmFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eShzY29wZSwgU0NPUEVfQ09OVEVYVF9GSUVMRCwgY29udGV4dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHRoZSBjb250ZXh0IHJlbGF0ZWQgdG8gYSBzY29wZS5cbiAgICAgICAgICAgICAqIFRPRE8gdjg6IFVzZSB0aGlzIGZvciB0aGUgYHRyYWNlYCBmdW5jdGlvbnMuXG4gICAgICAgICAgICAgKiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q29udGV4dEZyb21TY29wZShzY29wZSkge1xuICAgICAgICAgICAgICByZXR1cm4gKHNjb3BlIClbU0NPUEVfQ09OVEVYVF9GSUVMRF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9vcHRpb25hbENoYWluJDUob3BzKSB7IGxldCBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkOyBsZXQgdmFsdWUgPSBvcHNbMF07IGxldCBpID0gMTsgd2hpbGUgKGkgPCBvcHMubGVuZ3RoKSB7IGNvbnN0IG9wID0gb3BzW2ldOyBjb25zdCBmbiA9IG9wc1tpICsgMV07IGkgKz0gMjsgaWYgKChvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpICYmIHZhbHVlID09IG51bGwpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSBpZiAob3AgPT09ICdhY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnKSB7IGxhc3RBY2Nlc3NMSFMgPSB2YWx1ZTsgdmFsdWUgPSBmbih2YWx1ZSk7IH0gZWxzZSBpZiAob3AgPT09ICdjYWxsJyB8fCBvcCA9PT0gJ29wdGlvbmFsQ2FsbCcpIHsgdmFsdWUgPSBmbigoLi4uYXJncykgPT4gdmFsdWUuY2FsbChsYXN0QWNjZXNzTEhTLCAuLi5hcmdzKSk7IGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7IH0gfSByZXR1cm4gdmFsdWU7IH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPcGVuVGVsZW1ldHJ5IG9ubHkga25vd3MgYWJvdXQgU0FNUExFRCBvciBOT05FIGRlY2lzaW9uLFxuICAgICAgICAgICAgICogYnV0IGZvciB1cyBpdCBpcyBpbXBvcnRhbnQgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHVuc2V0IGFuZCB1bnNhbXBsZWQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQm90aCBvZiB0aGVzZSBhcmUgaWRlbnRpZmllZCBhcyBgdHJhY2VGbGFncyA9PT0gVHJhY2VnRmxhZ3MuTk9ORWAsXG4gICAgICAgICAgICAgKiBidXQgd2UgYWRkaXRpb25hbGx5IGxvb2sgYXQgYSBzcGVjaWFsIHRyYWNlIHN0YXRlIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlbiB0aGVtLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRTYW1wbGluZ0RlY2lzaW9uKHNwYW5Db250ZXh0KSB7XG4gICAgICAgICAgICAgIGNvbnN0IHsgdHJhY2VGbGFncywgdHJhY2VTdGF0ZSB9ID0gc3BhbkNvbnRleHQ7XG5cbiAgICAgICAgICAgICAgY29uc3Qgc2FtcGxlZE5vdFJlY29yZGluZyA9IHRyYWNlU3RhdGUgPyB0cmFjZVN0YXRlLmdldChTRU5UUllfVFJBQ0VfU1RBVEVfU0FNUExFRF9OT1RfUkVDT1JESU5HKSA9PT0gJzEnIDogZmFsc2U7XG5cbiAgICAgICAgICAgICAgLy8gSWYgdHJhY2UgZmxhZyBpcyBgU0FNUExFRGAsIHdlIGludGVycHJldCB0aGlzIGFzIHNhbXBsZWRcbiAgICAgICAgICAgICAgLy8gSWYgaXQgaXMgYE5PTkVgLCBpdCBjb3VsZCBtZWFuIGVpdGhlciBpdCB3YXMgc2FtcGxlZCB0byBiZSBub3QgcmVjb3JkZXIsIG9yIHRoYXQgaXQgd2FzIG5vdCBzYW1wbGVkIGF0IGFsbFxuICAgICAgICAgICAgICAvLyBGb3IgdXMgdGhpcyBpcyBhbiBpbXBvcnRhbnQgZGlmZmVyZW5jZSwgc293IGUgbG9vayBhdCB0aGUgU0VOVFJZX1RSQUNFX1NUQVRFX1NBTVBMRURfTk9UX1JFQ09SRElOR1xuICAgICAgICAgICAgICAvLyB0byBpZGVudGlmeSB3aGljaCBpdCBpc1xuICAgICAgICAgICAgICBpZiAodHJhY2VGbGFncyA9PT0gYXBpLlRyYWNlRmxhZ3MuU0FNUExFRCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHNhbXBsZWROb3RSZWNvcmRpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBGYWxsIGJhY2sgdG8gRFNDIGFzIGEgbGFzdCByZXNvcnQsIHRoYXQgbWF5IGFsc28gY29udGFpbiBgc2FtcGxlZGAuLi5cbiAgICAgICAgICAgICAgY29uc3QgZHNjU3RyaW5nID0gdHJhY2VTdGF0ZSA/IHRyYWNlU3RhdGUuZ2V0KFNFTlRSWV9UUkFDRV9TVEFURV9EU0MpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBjb25zdCBkc2MgPSBkc2NTdHJpbmcgPyBjb3JlLmJhZ2dhZ2VIZWFkZXJUb0R5bmFtaWNTYW1wbGluZ0NvbnRleHQoZHNjU3RyaW5nKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICBpZiAoX29wdGlvbmFsQ2hhaW4kNShbZHNjLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uc2FtcGxlZF0pID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoX29wdGlvbmFsQ2hhaW4kNShbZHNjLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5zYW1wbGVkXSkgPT09ICdmYWxzZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEluZmVyIHRoZSBvcCAmIGRlc2NyaXB0aW9uIGZvciBhIHNldCBvZiBuYW1lLCBhdHRyaWJ1dGVzIGFuZCBraW5kIG9mIGEgc3Bhbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gaW5mZXJTcGFuRGF0YShzcGFuTmFtZSwgYXR0cmlidXRlcywga2luZCkge1xuICAgICAgICAgICAgICAvLyBpZiBodHRwLm1ldGhvZCBleGlzdHMsIHRoaXMgaXMgYW4gaHR0cCByZXF1ZXN0IHNwYW5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgIGNvbnN0IGh0dHBNZXRob2QgPSBhdHRyaWJ1dGVzW0FUVFJfSFRUUF9SRVFVRVNUX01FVEhPRF0gfHwgYXR0cmlidXRlc1tTRU1BVFRSU19IVFRQX01FVEhPRF07XG4gICAgICAgICAgICAgIGlmIChodHRwTWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uRm9ySHR0cE1ldGhvZCh7IGF0dHJpYnV0ZXMsIG5hbWU6IHNwYW5OYW1lLCBraW5kIH0sIGh0dHBNZXRob2QpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgIGNvbnN0IGRiU3lzdGVtID0gYXR0cmlidXRlc1tTRU1BVFRSU19EQl9TWVNURU1dO1xuICAgICAgICAgICAgICBjb25zdCBvcElzQ2FjaGUgPVxuICAgICAgICAgICAgICAgIHR5cGVvZiBhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF0gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdLnN0YXJ0c1dpdGgoJ2NhY2hlLicpO1xuXG4gICAgICAgICAgICAgIC8vIElmIGRiLnR5cGUgZXhpc3RzIHRoZW4gdGhpcyBpcyBhIGRhdGFiYXNlIGNhbGwgc3BhblxuICAgICAgICAgICAgICAvLyBJZiB0aGUgUmVkaXMgREIgaXMgdXNlZCBhcyBhIGNhY2hlLCB0aGUgc3BhbiBkZXNjcmlwdGlvbiBzaG91bGQgbm90IGJlIGNoYW5nZWRcbiAgICAgICAgICAgICAgaWYgKGRiU3lzdGVtICYmICFvcElzQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRpb25Gb3JEYlN5c3RlbSh7IGF0dHJpYnV0ZXMsIG5hbWU6IHNwYW5OYW1lIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3QgY3VzdG9tU291cmNlT3JSb3V0ZSA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRV0gPT09ICdjdXN0b20nID8gJ2N1c3RvbScgOiAncm91dGUnO1xuXG4gICAgICAgICAgICAgIC8vIElmIHJwYy5zZXJ2aWNlIGV4aXN0cyB0aGVuIHRoaXMgaXMgYSBycGMgY2FsbCBzcGFuLlxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgY29uc3QgcnBjU2VydmljZSA9IGF0dHJpYnV0ZXNbU0VNQVRUUlNfUlBDX1NFUlZJQ0VdO1xuICAgICAgICAgICAgICBpZiAocnBjU2VydmljZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAuLi5nZXRVc2VyVXBkYXRlZE5hbWVBbmRTb3VyY2Uoc3Bhbk5hbWUsIGF0dHJpYnV0ZXMsICdyb3V0ZScpLFxuICAgICAgICAgICAgICAgICAgb3A6ICdycGMnLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBJZiBtZXNzYWdpbmcuc3lzdGVtIGV4aXN0cyB0aGVuIHRoaXMgaXMgYSBtZXNzYWdpbmcgc3lzdGVtIHNwYW4uXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgICBjb25zdCBtZXNzYWdpbmdTeXN0ZW0gPSBhdHRyaWJ1dGVzW1NFTUFUVFJTX01FU1NBR0lOR19TWVNURU1dO1xuICAgICAgICAgICAgICBpZiAobWVzc2FnaW5nU3lzdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIC4uLmdldFVzZXJVcGRhdGVkTmFtZUFuZFNvdXJjZShzcGFuTmFtZSwgYXR0cmlidXRlcywgY3VzdG9tU291cmNlT3JSb3V0ZSksXG4gICAgICAgICAgICAgICAgICBvcDogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBJZiBmYWFzLnRyaWdnZXIgZXhpc3RzIHRoZW4gdGhpcyBpcyBhIGZ1bmN0aW9uIGFzIGEgc2VydmljZSBzcGFuLlxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgY29uc3QgZmFhc1RyaWdnZXIgPSBhdHRyaWJ1dGVzW1NFTUFUVFJTX0ZBQVNfVFJJR0dFUl07XG4gICAgICAgICAgICAgIGlmIChmYWFzVHJpZ2dlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAuLi5nZXRVc2VyVXBkYXRlZE5hbWVBbmRTb3VyY2Uoc3Bhbk5hbWUsIGF0dHJpYnV0ZXMsIGN1c3RvbVNvdXJjZU9yUm91dGUpLFxuICAgICAgICAgICAgICAgICAgb3A6IGZhYXNUcmlnZ2VyLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiB7IG9wOiB1bmRlZmluZWQsIGRlc2NyaXB0aW9uOiBzcGFuTmFtZSwgc291cmNlOiAnY3VzdG9tJyB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEV4dHJhY3QgYmV0dGVyIG9wL2Rlc2NyaXB0aW9uIGZyb20gYW4gb3RlbCBzcGFuLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIERvZXMgbm90IG92ZXJ3cml0ZSB0aGUgc3BhbiBuYW1lIGlmIHRoZSBzb3VyY2UgaXMgYWxyZWFkeSBzZXQgdG8gY3VzdG9tIHRvIGVuc3VyZVxuICAgICAgICAgICAgICogdGhhdCB1c2VyLXVwZGF0ZWQgc3BhbiBuYW1lcyBhcmUgcHJlc2VydmVkLiBJbiB0aGlzIGNhc2UsIHdlIG9ubHkgYWRqdXN0IHRoZSBvcCBidXRcbiAgICAgICAgICAgICAqIGxlYXZlIHNwYW4gZGVzY3JpcHRpb24gYW5kIHNvdXJjZSB1bmNoYW5nZWQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL29wZW4tdGVsZW1ldHJ5L29wZW50ZWxlbWV0cnktY29sbGVjdG9yLWNvbnRyaWIvYmxvYi83NDIyY2UyYTA2MzM3ZjY4YTU5YjU1MmI4YzVhMmFjMTI1ZDZiYWU1L2V4cG9ydGVyL3NlbnRyeWV4cG9ydGVyL3NlbnRyeV9leHBvcnRlci5nbyNMMzA2XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlU3BhbkRlc2NyaXB0aW9uKHNwYW4pIHtcbiAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHNwYW5IYXNBdHRyaWJ1dGVzKHNwYW4pID8gc3Bhbi5hdHRyaWJ1dGVzIDoge307XG4gICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBzcGFuSGFzTmFtZShzcGFuKSA/IHNwYW4ubmFtZSA6ICc8dW5rbm93bj4nO1xuICAgICAgICAgICAgICBjb25zdCBraW5kID0gZ2V0U3BhbktpbmQoc3Bhbik7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGluZmVyU3BhbkRhdGEobmFtZSwgYXR0cmlidXRlcywga2luZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlc2NyaXB0aW9uRm9yRGJTeXN0ZW0oeyBhdHRyaWJ1dGVzLCBuYW1lIH0pIHtcbiAgICAgICAgICAgICAgLy8gaWYgd2UgYWxyZWFkeSBoYXZlIGEgY3VzdG9tIG5hbWUsIHdlIGRvbid0IG92ZXJ3cml0ZSBpdCBidXQgb25seSBzZXQgdGhlIG9wXG4gICAgICAgICAgICAgIGNvbnN0IHVzZXJEZWZpbmVkTmFtZSA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUVdO1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHVzZXJEZWZpbmVkTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgb3A6ICdkYicsXG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdXNlckRlZmluZWROYW1lLFxuICAgICAgICAgICAgICAgICAgc291cmNlOiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXSApIHx8ICdjdXN0b20nLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBpZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHNvdXJjZSBzZXQgdG8gY3VzdG9tLCB3ZSBkb24ndCBvdmVyd3JpdGUgdGhlIHNwYW4gZGVzY3JpcHRpb24gYnV0IG9ubHkgc2V0IHRoZSBvcFxuICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXSA9PT0gJ2N1c3RvbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBvcDogJ2RiJywgZGVzY3JpcHRpb246IG5hbWUsIHNvdXJjZTogJ2N1c3RvbScgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIFVzZSBEQiBzdGF0ZW1lbnQgKEV4IFwiU0VMRUNUICogRlJPTSB0YWJsZVwiKSBpZiBwb3NzaWJsZSBhcyBkZXNjcmlwdGlvbi5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgIGNvbnN0IHN0YXRlbWVudCA9IGF0dHJpYnV0ZXNbU0VNQVRUUlNfREJfU1RBVEVNRU5UXTtcblxuICAgICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHN0YXRlbWVudCA/IHN0YXRlbWVudC50b1N0cmluZygpIDogbmFtZTtcblxuICAgICAgICAgICAgICByZXR1cm4geyBvcDogJ2RiJywgZGVzY3JpcHRpb24sIHNvdXJjZTogJ3Rhc2snIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKiBPbmx5IGV4cG9ydGVkIGZvciB0ZXN0cy4gKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlc2NyaXB0aW9uRm9ySHR0cE1ldGhvZChcbiAgICAgICAgICAgICAgeyBuYW1lLCBraW5kLCBhdHRyaWJ1dGVzIH0sXG4gICAgICAgICAgICAgIGh0dHBNZXRob2QsXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29uc3Qgb3BQYXJ0cyA9IFsnaHR0cCddO1xuXG4gICAgICAgICAgICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgYXBpLlNwYW5LaW5kLkNMSUVOVDpcbiAgICAgICAgICAgICAgICAgIG9wUGFydHMucHVzaCgnY2xpZW50Jyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGFwaS5TcGFuS2luZC5TRVJWRVI6XG4gICAgICAgICAgICAgICAgICBvcFBhcnRzLnB1c2goJ3NlcnZlcicpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBTcGFucyBmb3IgSFRUUCByZXF1ZXN0cyB3ZSBoYXZlIGRldGVybWluZWQgdG8gYmUgcHJlZmV0Y2ggcmVxdWVzdHMgd2lsbCBoYXZlIGEgYC5wcmVmZXRjaGAgcG9zdGZpeCBpbiB0aGUgb3BcbiAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXNbJ3NlbnRyeS5odHRwLnByZWZldGNoJ10pIHtcbiAgICAgICAgICAgICAgICBvcFBhcnRzLnB1c2goJ3ByZWZldGNoJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCB7IHVybFBhdGgsIHVybCwgcXVlcnksIGZyYWdtZW50LCBoYXNSb3V0ZSB9ID0gZ2V0U2FuaXRpemVkVXJsKGF0dHJpYnV0ZXMsIGtpbmQpO1xuXG4gICAgICAgICAgICAgIGlmICghdXJsUGF0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLmdldFVzZXJVcGRhdGVkTmFtZUFuZFNvdXJjZShuYW1lLCBhdHRyaWJ1dGVzKSwgb3A6IG9wUGFydHMuam9pbignLicpIH07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCBncmFwaHFsT3BlcmF0aW9uc0F0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9HUkFQSFFMX09QRVJBVElPTl07XG5cbiAgICAgICAgICAgICAgLy8gRXguIEdFVCAvYXBpL3VzZXJzXG4gICAgICAgICAgICAgIGNvbnN0IGJhc2VEZXNjcmlwdGlvbiA9IGAke2h0dHBNZXRob2R9ICR7dXJsUGF0aH1gO1xuXG4gICAgICAgICAgICAgIC8vIFdoZW4gdGhlIGh0dHAgc3BhbiBoYXMgYSBncmFwaHFsIG9wZXJhdGlvbiwgYXBwZW5kIGl0IHRvIHRoZSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAvLyBXZSBhZGQgdGhlc2UgaW4gdGhlIGdyYXBocWxJbnRlZ3JhdGlvblxuICAgICAgICAgICAgICBjb25zdCBpbmZlcnJlZERlc2NyaXB0aW9uID0gZ3JhcGhxbE9wZXJhdGlvbnNBdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICA/IGAke2Jhc2VEZXNjcmlwdGlvbn0gKCR7Z2V0R3JhcGhxbE9wZXJhdGlvbk5hbWVzRnJvbUF0dHJpYnV0ZShncmFwaHFsT3BlcmF0aW9uc0F0dHJpYnV0ZSl9KWBcbiAgICAgICAgICAgICAgICA6IGJhc2VEZXNjcmlwdGlvbjtcblxuICAgICAgICAgICAgICAvLyBJZiBgaHR0cFBhdGhgIGlzIGEgcm9vdCBwYXRoLCB0aGVuIHdlIGNhbiBjYXRlZ29yaXplIHRoZSB0cmFuc2FjdGlvbiBzb3VyY2UgYXMgcm91dGUuXG4gICAgICAgICAgICAgIGNvbnN0IGluZmVycmVkU291cmNlID0gaGFzUm91dGUgfHwgdXJsUGF0aCA9PT0gJy8nID8gJ3JvdXRlJyA6ICd1cmwnO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcblxuICAgICAgICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS51cmwgPSB1cmw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgICAgICAgICAgZGF0YVsnaHR0cC5xdWVyeSddID0gcXVlcnk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgICAgICAgICAgZGF0YVsnaHR0cC5mcmFnbWVudCddID0gZnJhZ21lbnQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBJZiB0aGUgc3BhbiBraW5kIGlzIG5laXRoZXIgY2xpZW50IG5vciBzZXJ2ZXIsIHdlIHVzZSB0aGUgb3JpZ2luYWwgbmFtZVxuICAgICAgICAgICAgICAvLyB0aGlzIGluZmVycyB0aGF0IHNvbWVib2R5IG1hbnVhbGx5IHN0YXJ0ZWQgdGhpcyBzcGFuLCBpbiB3aGljaCBjYXNlIHdlIGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIHRoZSBuYW1lXG4gICAgICAgICAgICAgIGNvbnN0IGlzQ2xpZW50T3JTZXJ2ZXJLaW5kID0ga2luZCA9PT0gYXBpLlNwYW5LaW5kLkNMSUVOVCB8fCBraW5kID09PSBhcGkuU3BhbktpbmQuU0VSVkVSO1xuXG4gICAgICAgICAgICAgIC8vIElmIHRoZSBzcGFuIGlzIGFuIGF1dG8tc3BhbiAoPWl0IGNvbWVzIGZyb20gb25lIG9mIG91ciBpbnN0cnVtZW50YXRpb25zKSxcbiAgICAgICAgICAgICAgLy8gd2UgYWx3YXlzIHdhbnQgdG8gaW5mZXIgdGhlIG5hbWVcbiAgICAgICAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzb21lIG9mIHRoZSBhdXRvLWluc3RydW1lbnRhdGlvbiB3ZSB1c2UgdXNlcyBraW5kPUlOVEVSTkFMXG4gICAgICAgICAgICAgIGNvbnN0IG9yaWdpbiA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl0gfHwgJ21hbnVhbCc7XG4gICAgICAgICAgICAgIGNvbnN0IGlzTWFudWFsU3BhbiA9ICFgJHtvcmlnaW59YC5zdGFydHNXaXRoKCdhdXRvJyk7XG5cbiAgICAgICAgICAgICAgLy8gSWYgdXNlcnMgKG9yIGluIHZlcnkgcmFyZSBvY2Nhc2lvbnMgd2UpIHNldCB0aGUgc291cmNlIHRvIGN1c3RvbSwgd2UgZG9uJ3Qgb3ZlcndyaXRlIHRoZSBuYW1lXG4gICAgICAgICAgICAgIGNvbnN0IGFscmVhZHlIYXNDdXN0b21Tb3VyY2UgPSBhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0VdID09PSAnY3VzdG9tJztcbiAgICAgICAgICAgICAgY29uc3QgY3VzdG9tU3Bhbk5hbWUgPSBhdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9DVVNUT01fU1BBTl9OQU1FXTtcblxuICAgICAgICAgICAgICBjb25zdCB1c2VJbmZlcnJlZERlc2NyaXB0aW9uID1cbiAgICAgICAgICAgICAgICAhYWxyZWFkeUhhc0N1c3RvbVNvdXJjZSAmJiBjdXN0b21TcGFuTmFtZSA9PSBudWxsICYmIChpc0NsaWVudE9yU2VydmVyS2luZCB8fCAhaXNNYW51YWxTcGFuKTtcblxuICAgICAgICAgICAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCBzb3VyY2UgfSA9IHVzZUluZmVycmVkRGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICA/IHsgZGVzY3JpcHRpb246IGluZmVycmVkRGVzY3JpcHRpb24sIHNvdXJjZTogaW5mZXJyZWRTb3VyY2UgfVxuICAgICAgICAgICAgICAgIDogZ2V0VXNlclVwZGF0ZWROYW1lQW5kU291cmNlKG5hbWUsIGF0dHJpYnV0ZXMpO1xuXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb3A6IG9wUGFydHMuam9pbignLicpLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRHcmFwaHFsT3BlcmF0aW9uTmFtZXNGcm9tQXR0cmlidXRlKGF0dHIpIHtcbiAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXR0cikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3J0ZWQgPSBhdHRyLnNsaWNlKCkuc29ydCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gVXAgdG8gNSBpdGVtcywgd2UganVzdCBhZGQgYWxsIG9mIHRoZW1cbiAgICAgICAgICAgICAgICBpZiAoc29ydGVkLmxlbmd0aCA8PSA1KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc29ydGVkLmpvaW4oJywgJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIEVsc2UsIHdlIGFkZCB0aGUgZmlyc3QgNSBhbmQgdGhlIGRpZmYgb2Ygb3RoZXIgb3BlcmF0aW9uc1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke3NvcnRlZC5zbGljZSgwLCA1KS5qb2luKCcsICcpfSwgKyR7c29ydGVkLmxlbmd0aCAtIDV9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gYCR7YXR0cn1gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiogRXhwb3J0ZWQgZm9yIHRlc3RzIG9ubHkgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNhbml0aXplZFVybChcbiAgICAgICAgICAgICAgYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgcmVsYXRpdmUgcGF0aCBvZiB0aGUgVVJMLCBlLmcuIC9zdWJcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgIGNvbnN0IGh0dHBUYXJnZXQgPSBhdHRyaWJ1dGVzW1NFTUFUVFJTX0hUVFBfVEFSR0VUXTtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgZnVsbCBVUkwsIGluY2x1ZGluZyBob3N0ICYgcXVlcnkgcGFyYW1zIGV0Yy4sIGUuZy4gaHR0cHM6Ly9leGFtcGxlLmNvbS9zdWI/Zm9vPWJhclxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgY29uc3QgaHR0cFVybCA9IGF0dHJpYnV0ZXNbU0VNQVRUUlNfSFRUUF9VUkxdIHx8IGF0dHJpYnV0ZXNbQVRUUl9VUkxfRlVMTF07XG4gICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIG5vcm1hbGl6ZWQgcm91dGUgbmFtZSAtIG1heSBub3QgYWx3YXlzIGJlIGF2YWlsYWJsZSFcbiAgICAgICAgICAgICAgY29uc3QgaHR0cFJvdXRlID0gYXR0cmlidXRlc1tBVFRSX0hUVFBfUk9VVEVdO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFVybCA9IHR5cGVvZiBodHRwVXJsID09PSAnc3RyaW5nJyA/IGNvcmUucGFyc2VVcmwoaHR0cFVybCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIGNvbnN0IHVybCA9IHBhcnNlZFVybCA/IGNvcmUuZ2V0U2FuaXRpemVkVXJsU3RyaW5nKHBhcnNlZFVybCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gcGFyc2VkVXJsICYmIHBhcnNlZFVybC5zZWFyY2ggPyBwYXJzZWRVcmwuc2VhcmNoIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IHBhcnNlZFVybCAmJiBwYXJzZWRVcmwuaGFzaCA/IHBhcnNlZFVybC5oYXNoIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgaHR0cFJvdXRlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHVybFBhdGg6IGh0dHBSb3V0ZSwgdXJsLCBxdWVyeSwgZnJhZ21lbnQsIGhhc1JvdXRlOiB0cnVlIH07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoa2luZCA9PT0gYXBpLlNwYW5LaW5kLlNFUlZFUiAmJiB0eXBlb2YgaHR0cFRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1cmxQYXRoOiBjb3JlLnN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudChodHRwVGFyZ2V0KSwgdXJsLCBxdWVyeSwgZnJhZ21lbnQsIGhhc1JvdXRlOiBmYWxzZSB9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHBhcnNlZFVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHVybFBhdGg6IHVybCwgdXJsLCBxdWVyeSwgZnJhZ21lbnQsIGhhc1JvdXRlOiBmYWxzZSB9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gZmFsbCBiYWNrIHRvIHRhcmdldCBldmVuIGZvciBjbGllbnQgc3BhbnMsIGlmIG5vIFVSTCBpcyBwcmVzZW50XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgaHR0cFRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1cmxQYXRoOiBjb3JlLnN0cmlwVXJsUXVlcnlBbmRGcmFnbWVudChodHRwVGFyZ2V0KSwgdXJsLCBxdWVyeSwgZnJhZ21lbnQsIGhhc1JvdXRlOiBmYWxzZSB9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHsgdXJsUGF0aDogdW5kZWZpbmVkLCB1cmwsIHF1ZXJ5LCBmcmFnbWVudCwgaGFzUm91dGU6IGZhbHNlIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQmVjYXVzZSBPdGVsIGluc3RydW1lbnRhdGlvbiBzb21ldGltZXMgbXV0YXRlcyBzcGFuIG5hbWVzIHZpYSBgc3Bhbi51cGRhdGVOYW1lYCwgdGhlIG9ubHkgd2F5XG4gICAgICAgICAgICAgKiB0byBlbnN1cmUgdGhhdCBhIHVzZXItc2V0IHNwYW4gbmFtZSBpcyBwcmVzZXJ2ZWQgaXMgdG8gc3RvcmUgaXQgYXMgYSB0bXAgYXR0cmlidXRlIG9uIHRoZSBzcGFuLlxuICAgICAgICAgICAgICogV2UgZGVsZXRlIHRoaXMgYXR0cmlidXRlIG9uY2Ugd2UncmUgZG9uZSB3aXRoIGl0IHdoZW4gcHJlcGFyaW5nIHRoZSBldmVudCBlbnZlbG9wZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUaGlzIHRlbXAgYXR0cmlidXRlIGFsd2F5cyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIG9yaWdpbmFsIG5hbWUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogV2UgYWxzbyBuZWVkIHRvIHRha2UgY2FyZSBvZiBzZXR0aW5nIHRoZSBjb3JyZWN0IHNvdXJjZS4gVXNlcnMgY2FuIGFsd2F5cyB1cGRhdGUgdGhlIHNvdXJjZVxuICAgICAgICAgICAgICogYWZ0ZXIgdXBkYXRpbmcgdGhlIG5hbWUsIHNvIHdlIG5lZWQgdG8gcmVzcGVjdCB0aGF0LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBpbnRlcm5hbCBleHBvcnRlZCBvbmx5IGZvciB0ZXN0aW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFVzZXJVcGRhdGVkTmFtZUFuZFNvdXJjZShcbiAgICAgICAgICAgICAgb3JpZ2luYWxOYW1lLFxuICAgICAgICAgICAgICBhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICBmYWxsYmFja1NvdXJjZSA9ICdjdXN0b20nLFxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSAoYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXSApIHx8IGZhbGxiYWNrU291cmNlO1xuICAgICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUVdO1xuXG4gICAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbiAmJiB0eXBlb2YgZGVzY3JpcHRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4geyBkZXNjcmlwdGlvbjogb3JpZ2luYWxOYW1lLCBzb3VyY2UgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXR1cCBhIERTQyBoYW5kbGVyIG9uIHRoZSBwYXNzZWQgY2xpZW50LFxuICAgICAgICAgICAgICogZW5zdXJpbmcgdGhhdCB0aGUgdHJhbnNhY3Rpb24gbmFtZSBpcyBpbmZlcnJlZCBmcm9tIHRoZSBzcGFuIGNvcnJlY3RseS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZW5oYW5jZURzY1dpdGhPcGVuVGVsZW1ldHJ5Um9vdFNwYW5OYW1lKGNsaWVudCkge1xuICAgICAgICAgICAgICBjbGllbnQub24oJ2NyZWF0ZURzYycsIChkc2MsIHJvb3RTcGFuKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFyb290U3Bhbikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gb3ZlcndyaXRlIHRoZSB0cmFuc2FjdGlvbiBvbiB0aGUgRFNDIHRoYXQgaXMgY3JlYXRlZCBieSBkZWZhdWx0IGluIGNvcmVcbiAgICAgICAgICAgICAgICAvLyBUaGUgcmVhc29uIGZvciB0aGlzIGlzIHRoYXQgd2Ugd2FudCB0byBpbmZlciB0aGUgc3BhbiBuYW1lLCBub3QgdXNlIHRoZSBpbml0aWFsIG9uZVxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UnbGwgZ2V0IG5hbWVzIGxpa2UgXCJHRVRcIiBpbnN0ZWFkIG9mIGUuZy4gXCJHRVQgL2Zvb1wiXG4gICAgICAgICAgICAgICAgLy8gYHBhcnNlU3BhbkRlc2NyaXB0aW9uYCB0YWtlcyB0aGUgYXR0cmlidXRlcyBvZiB0aGUgc3BhbiBpbnRvIGFjY291bnQgZm9yIHRoZSBuYW1lXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBtdXRhdGVzIHRoZSBwYXNzZWQtaW4gRFNDXG5cbiAgICAgICAgICAgICAgICBjb25zdCBqc29uU3BhbiA9IGNvcmUuc3BhblRvSlNPTihyb290U3Bhbik7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGpzb25TcGFuLmRhdGEgfHwge307XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gYXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFXTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGVzY3JpcHRpb24gfSA9IHNwYW5IYXNOYW1lKHJvb3RTcGFuKSA/IHBhcnNlU3BhbkRlc2NyaXB0aW9uKHJvb3RTcGFuKSA6IHsgZGVzY3JpcHRpb246IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UgIT09ICd1cmwnICYmIGRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBkc2MudHJhbnNhY3Rpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBBbHNvIGVuc3VyZSBzYW1wbGluZyBkZWNpc2lvbiBpcyBjb3JyZWN0bHkgaW5mZXJyZWRcbiAgICAgICAgICAgICAgICAvLyBJbiBjb3JlLCB3ZSB1c2UgYHNwYW5Jc1NhbXBsZWRgLCB3aGljaCBqdXN0IGxvb2tzIGF0IHRoZSB0cmFjZSBmbGFnc1xuICAgICAgICAgICAgICAgIC8vIGJ1dCBpbiBPVEVMLCB3ZSB1c2UgYSBzbGlnaHRseSBtb3JlIGNvbXBsZXggbG9naWMgdG8gYmUgYWJsZSB0byBkaWZmZXJudGlhdGUgYmV0d2VlbiB1bnNhbXBsZWQgYW5kIGRlZmVycmVkIHNhbXBsaW5nXG4gICAgICAgICAgICAgICAgaWYgKGNvcmUuaGFzVHJhY2luZ0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgICAgY29uc3Qgc2FtcGxlZCA9IGdldFNhbXBsaW5nRGVjaXNpb24ocm9vdFNwYW4uc3BhbkNvbnRleHQoKSk7XG4gICAgICAgICAgICAgICAgICBkc2Muc2FtcGxlZCA9IHNhbXBsZWQgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKHNhbXBsZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2VuZXJhdGUgYSBUcmFjZVN0YXRlIGZvciB0aGUgZ2l2ZW4gZGF0YS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gbWFrZVRyYWNlU3RhdGUoe1xuICAgICAgICAgICAgICBkc2MsXG4gICAgICAgICAgICAgIHNhbXBsZWQsXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAvLyBXZSBzdG9yZSB0aGUgRFNDIGFzIE9URUwgdHJhY2Ugc3RhdGUgb24gdGhlIHNwYW4gY29udGV4dFxuICAgICAgICAgICAgICBjb25zdCBkc2NTdHJpbmcgPSBkc2MgPyBjb3JlLmR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIoZHNjKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICBjb25zdCB0cmFjZVN0YXRlQmFzZSA9IG5ldyBUcmFjZVN0YXRlKCk7XG5cbiAgICAgICAgICAgICAgY29uc3QgdHJhY2VTdGF0ZVdpdGhEc2MgPSBkc2NTdHJpbmcgPyB0cmFjZVN0YXRlQmFzZS5zZXQoU0VOVFJZX1RSQUNFX1NUQVRFX0RTQywgZHNjU3RyaW5nKSA6IHRyYWNlU3RhdGVCYXNlO1xuXG4gICAgICAgICAgICAgIC8vIFdlIGFsc28gc3BlY2lmaWNhbGx5IHdhbnQgdG8gc3RvcmUgaWYgdGhpcyBpcyBzYW1wbGVkIHRvIGJlIG5vdCByZWNvcmRpbmcsXG4gICAgICAgICAgICAgIC8vIG9yIHVuc2FtcGxlZCAoPWNvdWxkIGJlIGVpdGhlciBzYW1wbGVkIG9yIG5vdClcbiAgICAgICAgICAgICAgcmV0dXJuIHNhbXBsZWQgPT09IGZhbHNlID8gdHJhY2VTdGF0ZVdpdGhEc2Muc2V0KFNFTlRSWV9UUkFDRV9TVEFURV9TQU1QTEVEX05PVF9SRUNPUkRJTkcsICcxJykgOiB0cmFjZVN0YXRlV2l0aERzYztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50bHkgYWN0aXZlIHNwYW4uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEFjdGl2ZVNwYW4oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhcGkudHJhY2UuZ2V0QWN0aXZlU3BhbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgc2VydmVzIGFzIGEgYnVpbGQgdGltZSBmbGFnIHRoYXQgd2lsbCBiZSB0cnVlIGJ5IGRlZmF1bHQsIGJ1dCBmYWxzZSBpbiBub24tZGVidWcgYnVpbGRzIG9yIGlmIHVzZXJzIHJlcGxhY2UgYF9fU0VOVFJZX0RFQlVHX19gIGluIHRoZWlyIGdlbmVyYXRlZCBjb2RlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEFUVEVOVElPTjogVGhpcyBjb25zdGFudCBtdXN0IG5ldmVyIGNyb3NzIHBhY2thZ2UgYm91bmRhcmllcyAoaS5lLiBiZSBleHBvcnRlZCkgdG8gZ3VhcmFudGVlIHRoYXQgaXQgY2FuIGJlIHVzZWQgZm9yIHRyZWUgc2hha2luZy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgREVCVUdfQlVJTEQkMSA9ICh0eXBlb2YgX19TRU5UUllfREVCVUdfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgX19TRU5UUllfREVCVUdfXyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNldHVwRWxlbWVudHMgPSBuZXcgU2V0KCk7XG5cbiAgICAgICAgICAgIC8qKiBHZXQgYWxsIHRoZSBPcGVuVGVsZW1ldHJ5IGVsZW1lbnRzIHRoYXQgaGF2ZSBiZWVuIHNldCB1cC4gKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9wZW5UZWxlbWV0cnlTZXR1cENoZWNrKCkge1xuICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShzZXR1cEVsZW1lbnRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqIE1hcmsgYW4gT3BlblRlbGVtZXRyeSBlbGVtZW50IGFzIHNldHVwLiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gc2V0SXNTZXR1cChlbGVtZW50KSB7XG4gICAgICAgICAgICAgIHNldHVwRWxlbWVudHMuYWRkKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBfb3B0aW9uYWxDaGFpbiQ0KG9wcykgeyBsZXQgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDsgbGV0IHZhbHVlID0gb3BzWzBdOyBsZXQgaSA9IDE7IHdoaWxlIChpIDwgb3BzLmxlbmd0aCkgeyBjb25zdCBvcCA9IG9wc1tpXTsgY29uc3QgZm4gPSBvcHNbaSArIDFdOyBpICs9IDI7IGlmICgob3AgPT09ICdvcHRpb25hbEFjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSAmJiB2YWx1ZSA9PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gaWYgKG9wID09PSAnYWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJykgeyBsYXN0QWNjZXNzTEhTID0gdmFsdWU7IHZhbHVlID0gZm4odmFsdWUpOyB9IGVsc2UgaWYgKG9wID09PSAnY2FsbCcgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSB7IHZhbHVlID0gZm4oKC4uLmFyZ3MpID0+IHZhbHVlLmNhbGwobGFzdEFjY2Vzc0xIUywgLi4uYXJncykpOyBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkOyB9IH0gcmV0dXJuIHZhbHVlOyB9XG5cbiAgICAgICAgICAgIC8qKiBHZXQgdGhlIFNlbnRyeSBwcm9wYWdhdGlvbiBjb250ZXh0IGZyb20gYSBzcGFuIGNvbnRleHQuICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQcm9wYWdhdGlvbkNvbnRleHRGcm9tU3BhbihzcGFuKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNwYW5Db250ZXh0ID0gc3Bhbi5zcGFuQ29udGV4dCgpO1xuICAgICAgICAgICAgICBjb25zdCB7IHRyYWNlSWQsIHNwYW5JZCwgdHJhY2VTdGF0ZSB9ID0gc3BhbkNvbnRleHQ7XG5cbiAgICAgICAgICAgICAgLy8gV2hlbiB3ZSBoYXZlIGEgZHNjIHRyYWNlIHN0YXRlLCBpdCBtZWFucyB0aGlzIGNhbWUgZnJvbSB0aGUgaW5jb21pbmcgdHJhY2VcbiAgICAgICAgICAgICAgLy8gVGhlbiB0aGlzIHRha2VzIHByZXNlZGVuY2Ugb3ZlciB0aGUgcm9vdCBzcGFuXG4gICAgICAgICAgICAgIGNvbnN0IGRzY1N0cmluZyA9IHRyYWNlU3RhdGUgPyB0cmFjZVN0YXRlLmdldChTRU5UUllfVFJBQ0VfU1RBVEVfRFNDKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgY29uc3QgdHJhY2VTdGF0ZURzYyA9IGRzY1N0cmluZyA/IGNvcmUuYmFnZ2FnZUhlYWRlclRvRHluYW1pY1NhbXBsaW5nQ29udGV4dChkc2NTdHJpbmcpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHBhcmVudFNwYW5JZCA9IHNwYW5IYXNQYXJlbnRJZChzcGFuKSA/IHNwYW4ucGFyZW50U3BhbklkIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBjb25zdCBzYW1wbGVkID0gZ2V0U2FtcGxpbmdEZWNpc2lvbihzcGFuQ29udGV4dCk7XG5cbiAgICAgICAgICAgICAgLy8gTm8gdHJhY2Ugc3RhdGU/IC0tPiBUYWtlIERTQyBmcm9tIHJvb3Qgc3BhblxuICAgICAgICAgICAgICBjb25zdCBkc2MgPSB0cmFjZVN0YXRlRHNjIHx8IGNvcmUuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuKGNvcmUuZ2V0Um9vdFNwYW4oc3BhbikpO1xuXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHJhY2VJZCxcbiAgICAgICAgICAgICAgICBzcGFuSWQsXG4gICAgICAgICAgICAgICAgc2FtcGxlZCxcbiAgICAgICAgICAgICAgICBwYXJlbnRTcGFuSWQsXG4gICAgICAgICAgICAgICAgZHNjLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEluamVjdHMgYW5kIGV4dHJhY3RzIGBzZW50cnktdHJhY2VgIGFuZCBgYmFnZ2FnZWAgaGVhZGVycyBmcm9tIGNhcnJpZXJzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjbGFzcyBTZW50cnlQcm9wYWdhdG9yIGV4dGVuZHMgVzNDQmFnZ2FnZVByb3BhZ2F0b3Ige1xuICAgICAgICAgICAgICAvKiogQSBtYXAgb2YgVVJMcyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGNoZWNrZWQgZm9yIGlmIHRoZXkgbWF0Y2ggdHJhY2VQcm9wYWdhdGlvblRhcmdldHMuICovXG5cbiAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICAgICAgc2V0SXNTZXR1cCgnU2VudHJ5UHJvcGFnYXRvcicpO1xuXG4gICAgICAgICAgICAgICAgLy8gV2UncmUgY2FjaGluZyByZXN1bHRzIHNvIHdlIGRvbid0IGhhdmUgdG8gcmVjb21wdXRlIHJlZ2V4cCBldmVyeSB0aW1lIHdlIGNyZWF0ZSBhIHJlcXVlc3QuXG4gICAgICAgICAgICAgICAgdGhpcy5fdXJsTWF0Y2hlc1RhcmdldHNNYXAgPSBuZXcgY29yZS5MUlVNYXAoMTAwKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgIGluamVjdChjb250ZXh0LCBjYXJyaWVyLCBzZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNUcmFjaW5nU3VwcHJlc3NlZChjb250ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgREVCVUdfQlVJTEQkMSAmJiBjb3JlLmxvZ2dlci5sb2coJ1tUcmFjaW5nXSBOb3QgaW5qZWN0aW5nIHRyYWNlIGRhdGEgZm9yIHVybCBiZWNhdXNlIHRyYWNpbmcgaXMgc3VwcHJlc3NlZC4nKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVTcGFuID0gYXBpLnRyYWNlLmdldFNwYW4oY29udGV4dCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gYWN0aXZlU3BhbiAmJiBnZXRDdXJyZW50VVJMKGFjdGl2ZVNwYW4pO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhY2VQcm9wYWdhdGlvblRhcmdldHMgPSBfb3B0aW9uYWxDaGFpbiQ0KFtjb3JlLmdldENsaWVudCwgJ2NhbGwnLCBfID0+IF8oKSwgJ29wdGlvbmFsQWNjZXNzJywgXzIgPT4gXzIuZ2V0T3B0aW9ucywgJ2NhbGwnLCBfMyA9PiBfMygpLCAnb3B0aW9uYWxBY2Nlc3MnLCBfNCA9PiBfNC50cmFjZVByb3BhZ2F0aW9uVGFyZ2V0c10pO1xuICAgICAgICAgICAgICAgIGlmICghc2hvdWxkUHJvcGFnYXRlVHJhY2VGb3JVcmwodXJsLCB0cmFjZVByb3BhZ2F0aW9uVGFyZ2V0cywgdGhpcy5fdXJsTWF0Y2hlc1RhcmdldHNNYXApKSB7XG4gICAgICAgICAgICAgICAgICBERUJVR19CVUlMRCQxICYmXG4gICAgICAgICAgICAgICAgICAgIGNvcmUubG9nZ2VyLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAnW1RyYWNpbmddIE5vdCBpbmplY3RpbmcgdHJhY2UgZGF0YSBmb3IgdXJsIGJlY2F1c2UgaXQgZG9lcyBub3QgbWF0Y2ggdHJhY2VQcm9wYWdhdGlvblRhcmdldHM6JyxcbiAgICAgICAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdCYWdnYWdlSGVhZGVyID0gZ2V0RXhpc3RpbmdCYWdnYWdlKGNhcnJpZXIpO1xuICAgICAgICAgICAgICAgIGxldCBiYWdnYWdlID0gYXBpLnByb3BhZ2F0aW9uLmdldEJhZ2dhZ2UoY29udGV4dCkgfHwgYXBpLnByb3BhZ2F0aW9uLmNyZWF0ZUJhZ2dhZ2Uoe30pO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgeyBkeW5hbWljU2FtcGxpbmdDb250ZXh0LCB0cmFjZUlkLCBzcGFuSWQsIHNhbXBsZWQgfSA9IGdldEluamVjdGlvbkRhdGEoY29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdCYWdnYWdlSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBiYWdnYWdlRW50cmllcyA9IGNvcmUucGFyc2VCYWdnYWdlSGVhZGVyKGV4aXN0aW5nQmFnZ2FnZUhlYWRlcik7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChiYWdnYWdlRW50cmllcykge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyhiYWdnYWdlRW50cmllcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgYmFnZ2FnZSA9IGJhZ2dhZ2Uuc2V0RW50cnkoa2V5LCB7IHZhbHVlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZHluYW1pY1NhbXBsaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgYmFnZ2FnZSA9IE9iamVjdC5lbnRyaWVzKGR5bmFtaWNTYW1wbGluZ0NvbnRleHQpLnJlZHVjZSgoYiwgW2RzY0tleSwgZHNjVmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkc2NWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiLnNldEVudHJ5KGAke2NvcmUuU0VOVFJZX0JBR0dBR0VfS0VZX1BSRUZJWH0ke2RzY0tleX1gLCB7IHZhbHVlOiBkc2NWYWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgICAgICAgIH0sIGJhZ2dhZ2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFdlIGFsc28gd2FudCB0byBhdm9pZCBzZXR0aW5nIHRoZSBkZWZhdWx0IE9URUwgdHJhY2UgSUQsIGlmIHdlIGdldCB0aGF0IGZvciB3aGF0ZXZlciByZWFzb25cbiAgICAgICAgICAgICAgICBpZiAodHJhY2VJZCAmJiB0cmFjZUlkICE9PSBhcGkuSU5WQUxJRF9UUkFDRUlEKSB7XG4gICAgICAgICAgICAgICAgICBzZXR0ZXIuc2V0KGNhcnJpZXIsIFNFTlRSWV9UUkFDRV9IRUFERVIsIGNvcmUuZ2VuZXJhdGVTZW50cnlUcmFjZUhlYWRlcih0cmFjZUlkLCBzcGFuSWQsIHNhbXBsZWQpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdXBlci5pbmplY3QoYXBpLnByb3BhZ2F0aW9uLnNldEJhZ2dhZ2UoY29udGV4dCwgYmFnZ2FnZSksIGNhcnJpZXIsIHNldHRlcik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICBleHRyYWN0KGNvbnRleHQsIGNhcnJpZXIsIGdldHRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1heWJlU2VudHJ5VHJhY2VIZWFkZXIgPSBnZXR0ZXIuZ2V0KGNhcnJpZXIsIFNFTlRSWV9UUkFDRV9IRUFERVIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhZ2dhZ2UgPSBnZXR0ZXIuZ2V0KGNhcnJpZXIsIFNFTlRSWV9CQUdHQUdFX0hFQURFUik7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzZW50cnlUcmFjZSA9IG1heWJlU2VudHJ5VHJhY2VIZWFkZXJcbiAgICAgICAgICAgICAgICAgID8gQXJyYXkuaXNBcnJheShtYXliZVNlbnRyeVRyYWNlSGVhZGVyKVxuICAgICAgICAgICAgICAgICAgICA/IG1heWJlU2VudHJ5VHJhY2VIZWFkZXJbMF1cbiAgICAgICAgICAgICAgICAgICAgOiBtYXliZVNlbnRyeVRyYWNlSGVhZGVyXG4gICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCByZW1vdGUgcGFyZW50IHNwYW4gY29udGV4dFxuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGluY29taW5nIHRyYWNlLCB0aGlzIHdpbGwgcmV0dXJuIHRoZSBjb250ZXh0IGFzLWlzXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuc3VyZVNjb3Blc09uQ29udGV4dChnZXRDb250ZXh0V2l0aFJlbW90ZUFjdGl2ZVNwYW4oY29udGV4dCwgeyBzZW50cnlUcmFjZSwgYmFnZ2FnZSB9KSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICogQGluaGVyaXREb2NcbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICBmaWVsZHMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtTRU5UUllfVFJBQ0VfSEVBREVSLCBTRU5UUllfQkFHR0FHRV9IRUFERVJdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IE5PVF9QUk9QQUdBVEVEX01FU1NBR0UgPVxuICAgICAgICAgICAgICAnW1RyYWNpbmddIE5vdCBpbmplY3RpbmcgdHJhY2UgZGF0YSBmb3IgdXJsIGJlY2F1c2UgaXQgZG9lcyBub3QgbWF0Y2ggdHJhY2VQcm9wYWdhdGlvblRhcmdldHM6JztcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDaGVjayBpZiBhIGdpdmVuIFVSTCBzaG91bGQgYmUgcHJvcGFnYXRlZCB0byBvciBub3QuXG4gICAgICAgICAgICAgKiBJZiBubyB1cmwgaXMgZGVmaW5lZCwgb3Igbm8gdHJhY2UgcHJvcGFnYXRpb24gdGFyZ2V0cyBhcmUgZGVmaW5lZCwgdGhpcyB3aWxsIGFsd2F5cyByZXR1cm4gYHRydWVgLlxuICAgICAgICAgICAgICogWW91IGNhbiBhbHNvIG9wdGlvbmFsbHkgcHJvdmlkZSBhIGRlY2lzaW9uIG1hcCwgdG8gY2FjaGUgZGVjaXNpb25zIGFuZCBhdm9pZCByZXBlYXRlZCByZWdleCBsb29rdXBzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzaG91bGRQcm9wYWdhdGVUcmFjZUZvclVybChcbiAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICB0cmFjZVByb3BhZ2F0aW9uVGFyZ2V0cyxcbiAgICAgICAgICAgICAgZGVjaXNpb25NYXAsXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8ICF0cmFjZVByb3BhZ2F0aW9uVGFyZ2V0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3QgY2FjaGVkRGVjaXNpb24gPSBfb3B0aW9uYWxDaGFpbiQ0KFtkZWNpc2lvbk1hcCwgJ29wdGlvbmFsQWNjZXNzJywgXzUgPT4gXzUuZ2V0LCAnY2FsbCcsIF82ID0+IF82KHVybCldKTtcbiAgICAgICAgICAgICAgaWYgKGNhY2hlZERlY2lzaW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBERUJVR19CVUlMRCQxICYmICFjYWNoZWREZWNpc2lvbiAmJiBjb3JlLmxvZ2dlci5sb2coTk9UX1BST1BBR0FURURfTUVTU0FHRSwgdXJsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkRGVjaXNpb247XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCBkZWNpc2lvbiA9IGNvcmUuc3RyaW5nTWF0Y2hlc1NvbWVQYXR0ZXJuKHVybCwgdHJhY2VQcm9wYWdhdGlvblRhcmdldHMpO1xuICAgICAgICAgICAgICBfb3B0aW9uYWxDaGFpbiQ0KFtkZWNpc2lvbk1hcCwgJ29wdGlvbmFsQWNjZXNzJywgXzcgPT4gXzcuc2V0LCAnY2FsbCcsIF84ID0+IF84KHVybCwgZGVjaXNpb24pXSk7XG5cbiAgICAgICAgICAgICAgREVCVUdfQlVJTEQkMSAmJiAhZGVjaXNpb24gJiYgY29yZS5sb2dnZXIubG9nKE5PVF9QUk9QQUdBVEVEX01FU1NBR0UsIHVybCk7XG4gICAgICAgICAgICAgIHJldHVybiBkZWNpc2lvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgcHJvcGFnYXRpb24gaW5qZWN0aW9uIGRhdGEgZm9yIHRoZSBnaXZlbiBjb250ZXh0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRJbmplY3Rpb25EYXRhKGNvbnRleHQpXG5cbiAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBhcGkudHJhY2UuZ2V0U3Bhbihjb250ZXh0KTtcblxuICAgICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgcmVtb3RlIHNwYW4sIHRoZSBzcGFuSWQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgYXMgdGhlIHBhcmVudFNwYW5JZCwgbm90IHNwYW5JZCBpdHNlbGZcbiAgICAgICAgICAgICAgLy8gSW5zdGVhZCwgd2UgdXNlIGEgdmlydHVhbCAoZ2VuZXJhdGVkKSBzcGFuSWQgZm9yIHByb3BhZ2F0aW9uXG4gICAgICAgICAgICAgIGlmIChzcGFuICYmIHNwYW4uc3BhbkNvbnRleHQoKS5pc1JlbW90ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwYW5Db250ZXh0ID0gc3Bhbi5zcGFuQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSBjb3JlLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbihzcGFuKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICBkeW5hbWljU2FtcGxpbmdDb250ZXh0LFxuICAgICAgICAgICAgICAgICAgdHJhY2VJZDogc3BhbkNvbnRleHQudHJhY2VJZCxcbiAgICAgICAgICAgICAgICAgIC8vIEJlY2F1c2UgdGhpcyBpcyBhIHJlbW90ZSBzcGFuLCB3ZSBkbyBub3Qgd2FudCB0byBwcm9wYWdhdGUgdGhpcyBkaXJlY3RseVxuICAgICAgICAgICAgICAgICAgLy8gQXMgb3RoZXJ3aXNlIHRoaW5ncyBtYXkgYmUgYXR0YWNoZWQgXCJkaXJlY3RseVwiIHRvIGFuIHVucmVsYXRlZCBzcGFuXG4gICAgICAgICAgICAgICAgICBzcGFuSWQ6IGNvcmUuZ2VuZXJhdGVTcGFuSWQoKSxcbiAgICAgICAgICAgICAgICAgIHNhbXBsZWQ6IGdldFNhbXBsaW5nRGVjaXNpb24oc3BhbkNvbnRleHQpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbG9jYWwgc3Bhbiwgd2UganVzdCB1c2UgdGhpc1xuICAgICAgICAgICAgICBpZiAoc3Bhbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwYW5Db250ZXh0ID0gc3Bhbi5zcGFuQ29udGV4dCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSBjb3JlLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbihzcGFuKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICBkeW5hbWljU2FtcGxpbmdDb250ZXh0LFxuICAgICAgICAgICAgICAgICAgdHJhY2VJZDogc3BhbkNvbnRleHQudHJhY2VJZCxcbiAgICAgICAgICAgICAgICAgIHNwYW5JZDogc3BhbkNvbnRleHQuc3BhbklkLFxuICAgICAgICAgICAgICAgICAgc2FtcGxlZDogZ2V0U2FtcGxpbmdEZWNpc2lvbihzcGFuQ29udGV4dCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIEVsc2Ugd2UgdHJ5IHRvIHVzZSB0aGUgcHJvcGFnYXRpb24gY29udGV4dCBmcm9tIHRoZSBzY29wZVxuICAgICAgICAgICAgICAvLyBUaGUgb25seSBzY2VuYXJpbyB3aGVyZSB0aGlzIHNob3VsZCBoYXBwZW4gaXMgd2hlbiB3ZSBuZWl0aGVyIGhhdmUgYSBzcGFuLCBub3IgYW4gaW5jb21pbmcgdHJhY2VcbiAgICAgICAgICAgICAgY29uc3Qgc2NvcGUgPSBfb3B0aW9uYWxDaGFpbiQ0KFtnZXRTY29wZXNGcm9tQ29udGV4dCwgJ2NhbGwnLCBfOSA9PiBfOShjb250ZXh0KSwgJ29wdGlvbmFsQWNjZXNzJywgXzEwID0+IF8xMC5zY29wZV0pIHx8IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG4gICAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG5cbiAgICAgICAgICAgICAgY29uc3QgcHJvcGFnYXRpb25Db250ZXh0ID0gc2NvcGUuZ2V0UHJvcGFnYXRpb25Db250ZXh0KCk7XG4gICAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgPSBjbGllbnQgPyBjb3JlLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU2NvcGUoY2xpZW50LCBzY29wZSkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZHluYW1pY1NhbXBsaW5nQ29udGV4dCxcbiAgICAgICAgICAgICAgICB0cmFjZUlkOiBwcm9wYWdhdGlvbkNvbnRleHQudHJhY2VJZCxcbiAgICAgICAgICAgICAgICAvLyBUT0RPKHY5KTogVXNlIGdlbmVyYXRlU3BhbklkKCkgaW5zdGVhZFxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgICAgIHNwYW5JZDogcHJvcGFnYXRpb25Db250ZXh0LnNwYW5JZCxcbiAgICAgICAgICAgICAgICBzYW1wbGVkOiBwcm9wYWdhdGlvbkNvbnRleHQuc2FtcGxlZCxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q29udGV4dFdpdGhSZW1vdGVBY3RpdmVTcGFuKFxuICAgICAgICAgICAgICBjdHgsXG4gICAgICAgICAgICAgIHsgc2VudHJ5VHJhY2UsIGJhZ2dhZ2UgfSxcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb25zdCBwcm9wYWdhdGlvbkNvbnRleHQgPSBjb3JlLnByb3BhZ2F0aW9uQ29udGV4dEZyb21IZWFkZXJzKHNlbnRyeVRyYWNlLCBiYWdnYWdlKTtcblxuICAgICAgICAgICAgICBjb25zdCB7IHRyYWNlSWQsIHBhcmVudFNwYW5JZCwgc2FtcGxlZCwgZHNjIH0gPSBwcm9wYWdhdGlvbkNvbnRleHQ7XG5cbiAgICAgICAgICAgICAgLy8gV2Ugb25seSB3YW50IHRvIHNldCB0aGUgdmlydHVhbCBzcGFuIGlmIHdlIGFyZSBjb250aW51aW5nIGEgY29uY3JldGUgdHJhY2VcbiAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBpZ25vcmUgdGhlIGluY29taW5nIHRyYWNlIGhlcmUsIGUuZy4gaWYgd2UgaGF2ZSBubyB0cmFjZSBoZWFkZXJzXG4gICAgICAgICAgICAgIGlmICghcGFyZW50U3BhbklkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IHNwYW5Db250ZXh0ID0gZ2VuZXJhdGVSZW1vdGVTcGFuQ29udGV4dCh7XG4gICAgICAgICAgICAgICAgdHJhY2VJZCxcbiAgICAgICAgICAgICAgICBzcGFuSWQ6IHBhcmVudFNwYW5JZCxcbiAgICAgICAgICAgICAgICBzYW1wbGVkLFxuICAgICAgICAgICAgICAgIGRzYyxcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGFwaS50cmFjZS5zZXRTcGFuQ29udGV4dChjdHgsIHNwYW5Db250ZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUYWtlcyB0cmFjZSBzdHJpbmdzIGFuZCBwcm9wYWdhdGVzIHRoZW0gYXMgYSByZW1vdGUgYWN0aXZlIHNwYW4uXG4gICAgICAgICAgICAgKiBUaGlzIHNob3VsZCBiZSB1c2VkIGluIGFkZGl0aW9uIHRvIGBjb250aW51ZVRyYWNlYCBpbiBPVEVMLXBvd2VyZWQgZW52aXJvbm1lbnRzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBjb250aW51ZVRyYWNlQXNSZW1vdGVTcGFuKFxuICAgICAgICAgICAgICBjdHgsXG4gICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGN0eFdpdGhTcGFuQ29udGV4dCA9IGVuc3VyZVNjb3Blc09uQ29udGV4dChnZXRDb250ZXh0V2l0aFJlbW90ZUFjdGl2ZVNwYW4oY3R4LCBvcHRpb25zKSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgoY3R4V2l0aFNwYW5Db250ZXh0LCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGVuc3VyZVNjb3Blc09uQ29udGV4dChjdHgpIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHNjb3BlcyB5ZXQgb24gdGhlIGNvbnRleHQsIGVuc3VyZSB3ZSBoYXZlIHRoZW1cbiAgICAgICAgICAgICAgY29uc3Qgc2NvcGVzID0gZ2V0U2NvcGVzRnJvbUNvbnRleHQoY3R4KTtcbiAgICAgICAgICAgICAgY29uc3QgbmV3U2NvcGVzID0ge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgbm8gc2NvcGUgaGVyZSwgdGhpcyBpcyBtb3N0IGxpa2VseSBlaXRoZXIgdGhlIHJvb3QgY29udGV4dCBvciBhIGNvbnRleHQgbWFudWFsbHkgZGVyaXZlZCBmcm9tIGl0XG4gICAgICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCB3ZSB3YW50IHRvIGZvcmsgdGhlIGN1cnJlbnQgc2NvcGUsIHRvIGVuc3VyZSB3ZSBkbyBub3QgcG9sbHV0ZSB0aGUgcm9vdCBzY29wZVxuICAgICAgICAgICAgICAgIHNjb3BlOiBzY29wZXMgPyBzY29wZXMuc2NvcGUgOiBjb3JlLmdldEN1cnJlbnRTY29wZSgpLmNsb25lKCksXG4gICAgICAgICAgICAgICAgaXNvbGF0aW9uU2NvcGU6IHNjb3BlcyA/IHNjb3Blcy5pc29sYXRpb25TY29wZSA6IGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKSxcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICByZXR1cm4gc2V0U2NvcGVzT25Db250ZXh0KGN0eCwgbmV3U2NvcGVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqIFRyeSB0byBnZXQgdGhlIGV4aXN0aW5nIGJhZ2dhZ2UgaGVhZGVyIHNvIHdlIGNhbiBtZXJnZSB0aGlzIGluLiAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RXhpc3RpbmdCYWdnYWdlKGNhcnJpZXIpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYWdnYWdlID0gKGNhcnJpZXIgKVtTRU5UUllfQkFHR0FHRV9IRUFERVJdO1xuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGJhZ2dhZ2UpID8gYmFnZ2FnZS5qb2luKCcsJykgOiBiYWdnYWdlO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEl0IGlzIHByZXR0eSB0cmlja3kgdG8gZ2V0IGFjY2VzcyB0byB0aGUgb3V0Z29pbmcgcmVxdWVzdCBVUkwgb2YgYSByZXF1ZXN0IGluIHRoZSBwcm9wYWdhdG9yLlxuICAgICAgICAgICAgICogQXMgd2Ugb25seSBoYXZlIGFjY2VzcyB0byB0aGUgY29udGV4dCBvZiB0aGUgc3BhbiB0byBiZSBzZW50IGFuZCB0aGUgY2FycmllciAoPWhlYWRlcnMpLFxuICAgICAgICAgICAgICogYnV0IHRoZSBzcGFuIG1heSBiZSB1bnNhbXBsZWQgYW5kIHRodXMgaGF2ZSBubyBhdHRyaWJ1dGVzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFNvIHdlIHVzZSB0aGUgZm9sbG93aW5nIGxvZ2ljOlxuICAgICAgICAgICAgICogMS4gSWYgd2UgaGF2ZSBhbiBhY3RpdmUgc3Bhbiwgd2UgY2hlY2sgaWYgaXQgaGFzIGEgVVJMIGF0dHJpYnV0ZS5cbiAgICAgICAgICAgICAqIDIuIEVsc2UsIGlmIHRoZSBhY3RpdmUgc3BhbiBoYXMgbm8gVVJMIGF0dHJpYnV0ZSAoZS5nLiBpdCBpcyB1bnNhbXBsZWQpLCB3ZSBjaGVjayBhIHNwZWNpYWwgdHJhY2Ugc3RhdGUgKHdoaWNoIHdlIHNldCBpbiBvdXIgc2FtcGxlcikuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRVUkwoc3Bhbikge1xuICAgICAgICAgICAgICBjb25zdCBzcGFuRGF0YSA9IGNvcmUuc3BhblRvSlNPTihzcGFuKS5kYXRhO1xuICAgICAgICAgICAgICAvLyBgQVRUUl9VUkxfRlVMTGAgaXMgdGhlIG5ldyBhdHRyaWJ1dGUsIGJ1dCB3ZSBzdGlsbCBzdXBwb3J0IHRoZSBvbGQgb25lLCBgU0VNQVRUUlNfSFRUUF9VUkxgLCBmb3Igbm93LlxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb25cbiAgICAgICAgICAgICAgY29uc3QgdXJsQXR0cmlidXRlID0gX29wdGlvbmFsQ2hhaW4kNChbc3BhbkRhdGEsICdvcHRpb25hbEFjY2VzcycsIF8xMSA9PiBfMTFbU0VNQVRUUlNfSFRUUF9VUkxdXSkgfHwgX29wdGlvbmFsQ2hhaW4kNChbc3BhbkRhdGEsICdvcHRpb25hbEFjY2VzcycsIF8xMiA9PiBfMTJbQVRUUl9VUkxfRlVMTF1dKTtcbiAgICAgICAgICAgICAgaWYgKHVybEF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1cmxBdHRyaWJ1dGU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBBbHNvIGxvb2sgYXQgdGhlIHRyYWNlU3RhdGUsIHdoaWNoIHdlIG1heSBzZXQgaW4gdGhlIHNhbXBsZXIgZXZlbiBmb3IgdW5zYW1wbGVkIHNwYW5zXG4gICAgICAgICAgICAgIGNvbnN0IHVybFRyYWNlU3RhdGUgPSBfb3B0aW9uYWxDaGFpbiQ0KFtzcGFuLCAnYWNjZXNzJywgXzEzID0+IF8xMy5zcGFuQ29udGV4dCwgJ2NhbGwnLCBfMTQgPT4gXzE0KCksICdhY2Nlc3MnLCBfMTUgPT4gXzE1LnRyYWNlU3RhdGUsICdvcHRpb25hbEFjY2VzcycsIF8xNiA9PiBfMTYuZ2V0LCAnY2FsbCcsIF8xNyA9PiBfMTcoU0VOVFJZX1RSQUNFX1NUQVRFX1VSTCldKTtcbiAgICAgICAgICAgICAgaWYgKHVybFRyYWNlU3RhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsVHJhY2VTdGF0ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlUmVtb3RlU3BhbkNvbnRleHQoe1xuICAgICAgICAgICAgICBzcGFuSWQsXG4gICAgICAgICAgICAgIHRyYWNlSWQsXG4gICAgICAgICAgICAgIHNhbXBsZWQsXG4gICAgICAgICAgICAgIGRzYyxcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIFdlIHN0b3JlIHRoZSBEU0MgYXMgT1RFTCB0cmFjZSBzdGF0ZSBvbiB0aGUgc3BhbiBjb250ZXh0XG4gICAgICAgICAgICAgIGNvbnN0IHRyYWNlU3RhdGUgPSBtYWtlVHJhY2VTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZHNjLFxuICAgICAgICAgICAgICAgIHNhbXBsZWQsXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHNwYW5Db250ZXh0ID0ge1xuICAgICAgICAgICAgICAgIHRyYWNlSWQsXG4gICAgICAgICAgICAgICAgc3BhbklkLFxuICAgICAgICAgICAgICAgIGlzUmVtb3RlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRyYWNlRmxhZ3M6IHNhbXBsZWQgPyBhcGkuVHJhY2VGbGFncy5TQU1QTEVEIDogYXBpLlRyYWNlRmxhZ3MuTk9ORSxcbiAgICAgICAgICAgICAgICB0cmFjZVN0YXRlLFxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHJldHVybiBzcGFuQ29udGV4dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXcmFwcyBhIGZ1bmN0aW9uIHdpdGggYSB0cmFuc2FjdGlvbi9zcGFuIGFuZCBmaW5pc2hlcyB0aGUgc3BhbiBhZnRlciB0aGUgZnVuY3Rpb24gaXMgZG9uZS5cbiAgICAgICAgICAgICAqIFRoZSBjcmVhdGVkIHNwYW4gaXMgdGhlIGFjdGl2ZSBzcGFuIGFuZCB3aWxsIGJlIHVzZWQgYXMgcGFyZW50IGJ5IG90aGVyIHNwYW5zIGNyZWF0ZWQgaW5zaWRlIHRoZSBmdW5jdGlvblxuICAgICAgICAgICAgICogYW5kIGNhbiBiZSBhY2Nlc3NlZCB2aWEgYFNlbnRyeS5nZXRBY3RpdmVTcGFuKClgLCBhcyBsb25nIGFzIHRoZSBmdW5jdGlvbiBpcyBleGVjdXRlZCB3aGlsZSB0aGUgc2NvcGUgaXMgYWN0aXZlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIElmIHlvdSB3YW50IHRvIGNyZWF0ZSBhIHNwYW4gdGhhdCBpcyBub3Qgc2V0IGFzIGFjdGl2ZSwgdXNlIHtAbGluayBzdGFydEluYWN0aXZlU3Bhbn0uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogWW91J2xsIGFsd2F5cyBnZXQgYSBzcGFuIHBhc3NlZCB0byB0aGUgY2FsbGJhY2ssXG4gICAgICAgICAgICAgKiBpdCBtYXkganVzdCBiZSBhIG5vbi1yZWNvcmRpbmcgc3BhbiBpZiB0aGUgc3BhbiBpcyBub3Qgc2FtcGxlZCBvciBpZiB0cmFjaW5nIGlzIGRpc2FibGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzdGFydFNwYW4ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgY29uc3QgdHJhY2VyID0gZ2V0VHJhY2VyKCk7XG5cbiAgICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBwYXJlbnRTcGFuOiBjdXN0b21QYXJlbnRTcGFuIH0gPSBvcHRpb25zO1xuXG4gICAgICAgICAgICAgIC8vIElmIGBvcHRpb25zLnBhcmVudFNwYW5gIGlzIGRlZmluZWQsIHdlIHdhbnQgdG8gd3JhcCB0aGUgY2FsbGJhY2sgaW4gYHdpdGhBY3RpdmVTcGFuYFxuICAgICAgICAgICAgICBjb25zdCB3cmFwcGVyID0gZ2V0QWN0aXZlU3BhbldyYXBwZXIoY3VzdG9tUGFyZW50U3Bhbik7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUN0eCA9IGdldENvbnRleHQob3B0aW9ucy5zY29wZSwgb3B0aW9ucy5mb3JjZVRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRTa2lwU3BhbiA9IG9wdGlvbnMub25seUlmUGFyZW50ICYmICFhcGkudHJhY2UuZ2V0U3BhbihhY3RpdmVDdHgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IHNob3VsZFNraXBTcGFuID8gc3VwcHJlc3NUcmFjaW5nJDEoYWN0aXZlQ3R4KSA6IGFjdGl2ZUN0eDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHNwYW5PcHRpb25zID0gZ2V0U3Bhbk9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhY2VyLnN0YXJ0QWN0aXZlU3BhbihuYW1lLCBzcGFuT3B0aW9ucywgY3R4LCBzcGFuID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb3JlLmhhbmRsZUNhbGxiYWNrRXJyb3JzKFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiBjYWxsYmFjayhzcGFuKSxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgc2V0IHRoZSBzcGFuIHN0YXR1cyB0byBFUlJPUiB3aGVuIHRoZXJlIHdhc24ndCBhbnkgc3RhdHVzIHNldCBiZWZvcmUsIGluIG9yZGVyIHRvIGF2b2lkIHN0b21waW5nIHVzZWZ1bCBzcGFuIHN0YXR1c2VzXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmUuc3BhblRvSlNPTihzcGFuKS5zdGF0dXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zZXRTdGF0dXMoeyBjb2RlOiBhcGkuU3BhblN0YXR1c0NvZGUuRVJST1IgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiBzcGFuLmVuZCgpLFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2ltaWxhciB0byBgU2VudHJ5LnN0YXJ0U3BhbmAuIFdyYXBzIGEgZnVuY3Rpb24gd2l0aCBhIHNwYW4sIGJ1dCBkb2VzIG5vdCBmaW5pc2ggdGhlIHNwYW5cbiAgICAgICAgICAgICAqIGFmdGVyIHRoZSBmdW5jdGlvbiBpcyBkb25lIGF1dG9tYXRpY2FsbHkuIFlvdSdsbCBoYXZlIHRvIGNhbGwgYHNwYW4uZW5kKClgIG1hbnVhbGx5LlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRoZSBjcmVhdGVkIHNwYW4gaXMgdGhlIGFjdGl2ZSBzcGFuIGFuZCB3aWxsIGJlIHVzZWQgYXMgcGFyZW50IGJ5IG90aGVyIHNwYW5zIGNyZWF0ZWQgaW5zaWRlIHRoZSBmdW5jdGlvblxuICAgICAgICAgICAgICogYW5kIGNhbiBiZSBhY2Nlc3NlZCB2aWEgYFNlbnRyeS5nZXRBY3RpdmVTcGFuKClgLCBhcyBsb25nIGFzIHRoZSBmdW5jdGlvbiBpcyBleGVjdXRlZCB3aGlsZSB0aGUgc2NvcGUgaXMgYWN0aXZlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFlvdSdsbCBhbHdheXMgZ2V0IGEgc3BhbiBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrLFxuICAgICAgICAgICAgICogaXQgbWF5IGp1c3QgYmUgYSBub24tcmVjb3JkaW5nIHNwYW4gaWYgdGhlIHNwYW4gaXMgbm90IHNhbXBsZWQgb3IgaWYgdHJhY2luZyBpcyBkaXNhYmxlZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gc3RhcnRTcGFuTWFudWFsKFxuICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb25zdCB0cmFjZXIgPSBnZXRUcmFjZXIoKTtcblxuICAgICAgICAgICAgICBjb25zdCB7IG5hbWUsIHBhcmVudFNwYW46IGN1c3RvbVBhcmVudFNwYW4gfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgICAgICAgLy8gSWYgYG9wdGlvbnMucGFyZW50U3BhbmAgaXMgZGVmaW5lZCwgd2Ugd2FudCB0byB3cmFwIHRoZSBjYWxsYmFjayBpbiBgd2l0aEFjdGl2ZVNwYW5gXG4gICAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSBnZXRBY3RpdmVTcGFuV3JhcHBlcihjdXN0b21QYXJlbnRTcGFuKTtcblxuICAgICAgICAgICAgICByZXR1cm4gd3JhcHBlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlQ3R4ID0gZ2V0Q29udGV4dChvcHRpb25zLnNjb3BlLCBvcHRpb25zLmZvcmNlVHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZFNraXBTcGFuID0gb3B0aW9ucy5vbmx5SWZQYXJlbnQgJiYgIWFwaS50cmFjZS5nZXRTcGFuKGFjdGl2ZUN0eCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gc2hvdWxkU2tpcFNwYW4gPyBzdXBwcmVzc1RyYWNpbmckMShhY3RpdmVDdHgpIDogYWN0aXZlQ3R4O1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3Bhbk9wdGlvbnMgPSBnZXRTcGFuT3B0aW9ucyhvcHRpb25zKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFjZXIuc3RhcnRBY3RpdmVTcGFuKG5hbWUsIHNwYW5PcHRpb25zLCBjdHgsIHNwYW4gPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvcmUuaGFuZGxlQ2FsbGJhY2tFcnJvcnMoXG4gICAgICAgICAgICAgICAgICAgICgpID0+IGNhbGxiYWNrKHNwYW4sICgpID0+IHNwYW4uZW5kKCkpLFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBzZXQgdGhlIHNwYW4gc3RhdHVzIHRvIEVSUk9SIHdoZW4gdGhlcmUgd2Fzbid0IGFueSBzdGF0dXMgc2V0IGJlZm9yZSwgaW4gb3JkZXIgdG8gYXZvaWQgc3RvbXBpbmcgdXNlZnVsIHNwYW4gc3RhdHVzZXNcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoY29yZS5zcGFuVG9KU09OKHNwYW4pLnN0YXR1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7IGNvZGU6IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgc3Bhbi4gVGhpcyBzcGFuIGlzIG5vdCBzZXQgYXMgYWN0aXZlLCBzbyB3aWxsIG5vdCBnZXQgYXV0b21hdGljIGluc3RydW1lbnRhdGlvbiBzcGFuc1xuICAgICAgICAgICAgICogYXMgY2hpbGRyZW4gb3IgYmUgYWJsZSB0byBiZSBhY2Nlc3NlZCB2aWEgYFNlbnRyeS5nZXRBY3RpdmVTcGFuKClgLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIElmIHlvdSB3YW50IHRvIGNyZWF0ZSBhIHNwYW4gdGhhdCBpcyBzZXQgYXMgYWN0aXZlLCB1c2Uge0BsaW5rIHN0YXJ0U3Bhbn0uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGFsd2F5cyByZXR1cm4gYSBzcGFuLFxuICAgICAgICAgICAgICogaXQgbWF5IGp1c3QgYmUgYSBub24tcmVjb3JkaW5nIHNwYW4gaWYgdGhlIHNwYW4gaXMgbm90IHNhbXBsZWQgb3IgaWYgdHJhY2luZyBpcyBkaXNhYmxlZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gc3RhcnRJbmFjdGl2ZVNwYW4ob3B0aW9ucykge1xuICAgICAgICAgICAgICBjb25zdCB0cmFjZXIgPSBnZXRUcmFjZXIoKTtcblxuICAgICAgICAgICAgICBjb25zdCB7IG5hbWUsIHBhcmVudFNwYW46IGN1c3RvbVBhcmVudFNwYW4gfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgICAgICAgLy8gSWYgYG9wdGlvbnMucGFyZW50U3BhbmAgaXMgZGVmaW5lZCwgd2Ugd2FudCB0byB3cmFwIHRoZSBjYWxsYmFjayBpbiBgd2l0aEFjdGl2ZVNwYW5gXG4gICAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSBnZXRBY3RpdmVTcGFuV3JhcHBlcihjdXN0b21QYXJlbnRTcGFuKTtcblxuICAgICAgICAgICAgICByZXR1cm4gd3JhcHBlcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlQ3R4ID0gZ2V0Q29udGV4dChvcHRpb25zLnNjb3BlLCBvcHRpb25zLmZvcmNlVHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZFNraXBTcGFuID0gb3B0aW9ucy5vbmx5SWZQYXJlbnQgJiYgIWFwaS50cmFjZS5nZXRTcGFuKGFjdGl2ZUN0eCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gc2hvdWxkU2tpcFNwYW4gPyBzdXBwcmVzc1RyYWNpbmckMShhY3RpdmVDdHgpIDogYWN0aXZlQ3R4O1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3Bhbk9wdGlvbnMgPSBnZXRTcGFuT3B0aW9ucyhvcHRpb25zKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHNwYW4gPSB0cmFjZXIuc3RhcnRTcGFuKG5hbWUsIHNwYW5PcHRpb25zLCBjdHgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZvcmtzIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBzZXRzIHRoZSBwcm92aWRlZCBzcGFuIGFzIGFjdGl2ZSBzcGFuIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwcm92aWRlZCBjYWxsYmFjay4gQ2FuIGJlXG4gICAgICAgICAgICAgKiBwYXNzZWQgYG51bGxgIHRvIHN0YXJ0IGFuIGVudGlyZWx5IG5ldyBzcGFuIHRyZWUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtIHNwYW4gU3BhbnMgc3RhcnRlZCBpbiB0aGUgY29udGV4dCBvZiB0aGUgcHJvdmlkZWQgY2FsbGJhY2sgd2lsbCBiZSBjaGlsZHJlbiBvZiB0aGlzIHNwYW4uIElmIGBudWxsYCBpcyBwYXNzZWQsXG4gICAgICAgICAgICAgKiBzcGFucyBzdGFydGVkIHdpdGhpbiB0aGUgY2FsbGJhY2sgd2lsbCBiZSByb290IHNwYW5zLlxuICAgICAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrIEV4ZWN1dGlvbiBjb250ZXh0IGluIHdoaWNoIHRoZSBwcm92aWRlZCBzcGFuIHdpbGwgYmUgYWN0aXZlLiBJcyBwYXNzZWQgdGhlIG5ld2x5IGZvcmtlZCBzY29wZS5cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBwcm92aWRlZCBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gd2l0aEFjdGl2ZVNwYW4oc3BhbiwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgY29uc3QgbmV3Q29udGV4dFdpdGhBY3RpdmVTcGFuID0gc3BhbiA/IGFwaS50cmFjZS5zZXRTcGFuKGFwaS5jb250ZXh0LmFjdGl2ZSgpLCBzcGFuKSA6IGFwaS50cmFjZS5kZWxldGVTcGFuKGFwaS5jb250ZXh0LmFjdGl2ZSgpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGFwaS5jb250ZXh0LndpdGgobmV3Q29udGV4dFdpdGhBY3RpdmVTcGFuLCAoKSA9PiBjYWxsYmFjayhjb3JlLmdldEN1cnJlbnRTY29wZSgpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFRyYWNlcigpIHtcbiAgICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIChjbGllbnQgJiYgY2xpZW50LnRyYWNlcikgfHwgYXBpLnRyYWNlLmdldFRyYWNlcignQHNlbnRyeS9vcGVudGVsZW1ldHJ5JywgY29yZS5TREtfVkVSU0lPTik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNwYW5PcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgY29uc3QgeyBzdGFydFRpbWUsIGF0dHJpYnV0ZXMsIGtpbmQsIG9wIH0gPSBvcHRpb25zO1xuXG4gICAgICAgICAgICAgIC8vIE9URUwgZXhwZWN0cyB0aW1lc3RhbXBzIGluIG1zLCBub3Qgc2Vjb25kc1xuICAgICAgICAgICAgICBjb25zdCBmaXhlZFN0YXJ0VGltZSA9IHR5cGVvZiBzdGFydFRpbWUgPT09ICdudW1iZXInID8gZW5zdXJlVGltZXN0YW1wSW5NaWxsaXNlY29uZHMoc3RhcnRUaW1lKSA6IHN0YXJ0VGltZTtcblxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IG9wXG4gICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogb3AsXG4gICAgICAgICAgICAgICAgICAgICAgLi4uYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgOiBhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgICAgICAgc3RhcnRUaW1lOiBmaXhlZFN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZW5zdXJlVGltZXN0YW1wSW5NaWxsaXNlY29uZHModGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGlzTXMgPSB0aW1lc3RhbXAgPCA5OTk5OTk5OTk5O1xuICAgICAgICAgICAgICByZXR1cm4gaXNNcyA/IHRpbWVzdGFtcCAqIDEwMDAgOiB0aW1lc3RhbXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENvbnRleHQoc2NvcGUsIGZvcmNlVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgY29uc3QgY3R4ID0gZ2V0Q29udGV4dEZvclNjb3BlKHNjb3BlKTtcbiAgICAgICAgICAgICAgY29uc3QgcGFyZW50U3BhbiA9IGFwaS50cmFjZS5nZXRTcGFuKGN0eCk7XG5cbiAgICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2UgdGhhdCB3ZSBoYXZlIG5vIHBhcmVudCBzcGFuLCB3ZSBzdGFydCBhIG5ldyB0cmFjZVxuICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgaWYgd2UgY29udGludWUgYSB0cmFjZSwgd2UnbGwgYWx3YXlzIGhhdmUgYSByZW1vdGUgcGFyZW50IHNwYW4gaGVyZSBhbnlob3dcbiAgICAgICAgICAgICAgaWYgKCFwYXJlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IHdhbnQgdG8gZm9yY2UgYSB0cmFuc2FjdGlvbiwgYW5kIHdlIGhhdmUgYSBwYXJlbnQgc3BhbiwgYWxsIGdvb2QsIHdlIGp1c3QgcmV0dXJuIGFzLWlzIVxuICAgICAgICAgICAgICBpZiAoIWZvcmNlVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3R4O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gRWxzZSwgaWYgd2UgZG8gaGF2ZSBhIHBhcmVudCBzcGFuIGJ1dCB3YW50IHRvIGZvcmNlIGEgdHJhbnNhY3Rpb24sIHdlIGhhdmUgdG8gc2ltdWxhdGUgYSBcInJvb3RcIiBjb250ZXh0XG5cbiAgICAgICAgICAgICAgLy8gRWxzZSwgd2UgbmVlZCB0byBkbyB0d28gdGhpbmdzOlxuICAgICAgICAgICAgICAvLyAxLiBVbnNldCB0aGUgcGFyZW50IHNwYW4gZnJvbSB0aGUgY29udGV4dCwgc28gd2UnbGwgY3JlYXRlIGEgbmV3IHJvb3Qgc3BhblxuICAgICAgICAgICAgICAvLyAyLiBFbnN1cmUgdGhlIHByb3BhZ2F0aW9uIGNvbnRleHQgaXMgY29ycmVjdCwgc28gd2UnbGwgY29udGludWUgZnJvbSB0aGUgcGFyZW50IHNwYW5cbiAgICAgICAgICAgICAgY29uc3QgY3R4V2l0aG91dFNwYW4gPSBhcGkudHJhY2UuZGVsZXRlU3BhbihjdHgpO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHsgc3BhbklkLCB0cmFjZUlkIH0gPSBwYXJlbnRTcGFuLnNwYW5Db250ZXh0KCk7XG4gICAgICAgICAgICAgIGNvbnN0IHNhbXBsZWQgPSBnZXRTYW1wbGluZ0RlY2lzaW9uKHBhcmVudFNwYW4uc3BhbkNvbnRleHQoKSk7XG5cbiAgICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCB3aGVuIHdlIGFyZSBmb3JjaW5nIGEgdHJhbnNhY3Rpb24sIHdlIHdhbnQgdG8gdHJlYXQgdGhpcyBsaWtlIGNvbnRpbnVpbmcgYW4gaW5jb21pbmcgdHJhY2VcbiAgICAgICAgICAgICAgLy8gc28gd2Ugc2V0IHRoZSB0cmFjZVN0YXRlIGFjY29yZGluZyB0byB0aGUgcm9vdCBzcGFuXG4gICAgICAgICAgICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihwYXJlbnRTcGFuKTtcbiAgICAgICAgICAgICAgY29uc3QgZHNjID0gY29yZS5nZXREeW5hbWljU2FtcGxpbmdDb250ZXh0RnJvbVNwYW4ocm9vdFNwYW4pO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHRyYWNlU3RhdGUgPSBtYWtlVHJhY2VTdGF0ZSh7XG4gICAgICAgICAgICAgICAgZHNjLFxuICAgICAgICAgICAgICAgIHNhbXBsZWQsXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHNwYW5PcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHRyYWNlSWQsXG4gICAgICAgICAgICAgICAgc3BhbklkLFxuICAgICAgICAgICAgICAgIGlzUmVtb3RlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRyYWNlRmxhZ3M6IHNhbXBsZWQgPyBhcGkuVHJhY2VGbGFncy5TQU1QTEVEIDogYXBpLlRyYWNlRmxhZ3MuTk9ORSxcbiAgICAgICAgICAgICAgICB0cmFjZVN0YXRlLFxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGNvbnN0IGN0eFdpdGhTcGFuQ29udGV4dCA9IGFwaS50cmFjZS5zZXRTcGFuQ29udGV4dChjdHhXaXRob3V0U3Bhbiwgc3Bhbk9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBjdHhXaXRoU3BhbkNvbnRleHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENvbnRleHRGb3JTY29wZShzY29wZSkge1xuICAgICAgICAgICAgICBpZiAoc2NvcGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdHggPSBnZXRDb250ZXh0RnJvbVNjb3BlKHNjb3BlKTtcbiAgICAgICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY3R4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBhcGkuY29udGV4dC5hY3RpdmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb250aW51ZSBhIHRyYWNlIGZyb20gYHNlbnRyeS10cmFjZWAgYW5kIGBiYWdnYWdlYCB2YWx1ZXMuXG4gICAgICAgICAgICAgKiBUaGVzZSB2YWx1ZXMgY2FuIGJlIG9idGFpbmVkIGZyb20gaW5jb21pbmcgcmVxdWVzdCBoZWFkZXJzLCBvciBpbiB0aGUgYnJvd3NlciBmcm9tIGA8bWV0YSBuYW1lPVwic2VudHJ5LXRyYWNlXCI+YFxuICAgICAgICAgICAgICogYW5kIGA8bWV0YSBuYW1lPVwiYmFnZ2FnZVwiPmAgSFRNTCB0YWdzLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFNwYW5zIHN0YXJ0ZWQgd2l0aCBgc3RhcnRTcGFuYCwgYHN0YXJ0U3Bhbk1hbnVhbGAgYW5kIGBzdGFydEluYWN0aXZlU3BhbmAsIHdpdGhpbiB0aGUgY2FsbGJhY2sgd2lsbCBhdXRvbWF0aWNhbGx5XG4gICAgICAgICAgICAgKiBiZSBhdHRhY2hlZCB0byB0aGUgaW5jb21pbmcgdHJhY2UuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVGhpcyBpcyBhIGN1c3RvbSB2ZXJzaW9uIG9mIGBjb250aW51ZVRyYWNlYCB0aGF0IGlzIHVzZWQgaW4gT1RFTC1wb3dlcmVkIGVudmlyb25tZW50cy5cbiAgICAgICAgICAgICAqIEl0IHByb3BhZ2F0ZXMgdGhlIHRyYWNlIGFzIGEgcmVtb3RlIHNwYW4sIGluIGFkZGl0aW9uIHRvIHNldHRpbmcgaXQgb24gdGhlIHByb3BhZ2F0aW9uIGNvbnRleHQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnRpbnVlVHJhY2Uob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvbnRpbnVlVHJhY2VBc1JlbW90ZVNwYW4oYXBpLmNvbnRleHQuYWN0aXZlKCksIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QWN0aXZlU3BhbldyYXBwZXIocGFyZW50U3Bhbikge1xuICAgICAgICAgICAgICByZXR1cm4gcGFyZW50U3BhbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhBY3RpdmVTcGFuKHBhcmVudFNwYW4sIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IChjYWxsYmFjaykgPT4gY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqIFN1cHByZXNzIHRyYWNpbmcgaW4gdGhlIGdpdmVuIGNhbGxiYWNrLCBlbnN1cmluZyBubyBzcGFucyBhcmUgZ2VuZXJhdGVkIGluc2lkZSBvZiBpdC4gKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHN1cHByZXNzVHJhY2luZyhjYWxsYmFjaykge1xuICAgICAgICAgICAgICBjb25zdCBjdHggPSBzdXBwcmVzc1RyYWNpbmckMShhcGkuY29udGV4dC5hY3RpdmUoKSk7XG4gICAgICAgICAgICAgIHJldHVybiBhcGkuY29udGV4dC53aXRoKGN0eCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiogRW5zdXJlIHRoZSBgdHJhY2VgIGNvbnRleHQgaXMgc2V0IG9uIGFsbCBldmVudHMuICovXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXR1cEV2ZW50Q29udGV4dFRyYWNlKGNsaWVudCkge1xuICAgICAgICAgICAgICBjbGllbnQub24oJ3ByZXByb2Nlc3NFdmVudCcsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcGFuID0gZ2V0QWN0aXZlU3BhbigpO1xuICAgICAgICAgICAgICAgIC8vIEZvciB0cmFuc2FjdGlvbiBldmVudHMsIHRoaXMgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5XG4gICAgICAgICAgICAgICAgLy8gQmVjYXVzZSB0aGUgYWN0aXZlIHNwYW4gbWF5IG5vdCBiZSB0aGUgc3BhbiB0aGF0IGlzIGFjdHVhbGx5IHRoZSB0cmFuc2FjdGlvbiBldmVudFxuICAgICAgICAgICAgICAgIGlmICghc3BhbiB8fCBldmVudC50eXBlID09PSAndHJhbnNhY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgZXZlbnQgaGFzIGFscmVhZHkgc2V0IGB0cmFjZWAgY29udGV4dCwgdXNlIHRoYXQgb25lLlxuICAgICAgICAgICAgICAgIGV2ZW50LmNvbnRleHRzID0ge1xuICAgICAgICAgICAgICAgICAgdHJhY2U6IGNvcmUuc3BhblRvVHJhY2VDb250ZXh0KHNwYW4pLFxuICAgICAgICAgICAgICAgICAgLi4uZXZlbnQuY29udGV4dHMsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbihzcGFuKTtcblxuICAgICAgICAgICAgICAgIGV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgIGR5bmFtaWNTYW1wbGluZ0NvbnRleHQ6IGNvcmUuZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TcGFuKHJvb3RTcGFuKSxcbiAgICAgICAgICAgICAgICAgIC4uLmV2ZW50LnNka1Byb2Nlc3NpbmdNZXRhZGF0YSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPdGVsLXNwZWNpZmljIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUcmFjZURhdGFgLlxuICAgICAgICAgICAgICogQHNlZSBgQHNlbnRyeS9jb3JlYCB2ZXJzaW9uIG9mIGBnZXRUcmFjZURhdGFgIGZvciBtb3JlIGluZm9ybWF0aW9uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFRyYWNlRGF0YSh7IHNwYW4gfSA9IHt9KSB7XG4gICAgICAgICAgICAgIGxldCBjdHggPSBhcGkuY29udGV4dC5hY3RpdmUoKTtcblxuICAgICAgICAgICAgICBpZiAoc3Bhbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgc2NvcGUgfSA9IGNvcmUuZ2V0Q2FwdHVyZWRTY29wZXNPblNwYW4oc3Bhbik7XG4gICAgICAgICAgICAgICAgLy8gZmFsbCBiYWNrIHRvIGN1cnJlbnQgY29udGV4dCBpZiBmb3Igd2hhdGV2ZXIgcmVhc29uIHdlIGNhbid0IGZpbmQgdGhlIG9uZSBvZiB0aGUgc3BhblxuICAgICAgICAgICAgICAgIGN0eCA9IChzY29wZSAmJiBnZXRDb250ZXh0RnJvbVNjb3BlKHNjb3BlKSkgfHwgYXBpLnRyYWNlLnNldFNwYW4oYXBpLmNvbnRleHQuYWN0aXZlKCksIHNwYW4pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3QgeyB0cmFjZUlkLCBzcGFuSWQsIHNhbXBsZWQsIGR5bmFtaWNTYW1wbGluZ0NvbnRleHQgfSA9IGdldEluamVjdGlvbkRhdGEoY3R4KTtcblxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICdzZW50cnktdHJhY2UnOiBjb3JlLmdlbmVyYXRlU2VudHJ5VHJhY2VIZWFkZXIodHJhY2VJZCwgc3BhbklkLCBzYW1wbGVkKSxcbiAgICAgICAgICAgICAgICBiYWdnYWdlOiBjb3JlLmR5bmFtaWNTYW1wbGluZ0NvbnRleHRUb1NlbnRyeUJhZ2dhZ2VIZWFkZXIoZHluYW1pY1NhbXBsaW5nQ29udGV4dCksXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0cyB0aGUgYXN5bmMgY29udGV4dCBzdHJhdGVneSB0byB1c2UgZm9sbG93IHRoZSBPVEVMIGNvbnRleHQgdW5kZXIgdGhlIGhvb2QuXG4gICAgICAgICAgICAgKiBXZSBoYW5kbGUgZm9ya2luZyBhIGh1YiBpbnNpZGUgb2Ygb3VyIGN1c3RvbSBPVEVMIENvbnRleHQgTWFuYWdlciAoLi9vdGVsQ29udGV4dE1hbmFnZXIudHMpXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldE9wZW5UZWxlbWV0cnlDb250ZXh0QXN5bmNDb250ZXh0U3RyYXRlZ3koKSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNjb3BlcygpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdHggPSBhcGkuY29udGV4dC5hY3RpdmUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzY29wZXMgPSBnZXRTY29wZXNGcm9tQ29udGV4dChjdHgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNjb3Blcykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBmYWxsYmFjayBiZWhhdmlvcjpcbiAgICAgICAgICAgICAgICAvLyBpZiwgZm9yIHdoYXRldmVyIHJlYXNvbiwgd2UgY2FuJ3QgZmluZCBzY29wZXMgb24gdGhlIGNvbnRleHQgaGVyZSwgd2UgaGF2ZSB0byBmaXggdGhpcyBzb21laG93XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlOiBjb3JlLmdldERlZmF1bHRDdXJyZW50U2NvcGUoKSxcbiAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblNjb3BlOiBjb3JlLmdldERlZmF1bHRJc29sYXRpb25TY29wZSgpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmdW5jdGlvbiB3aXRoU2NvcGUoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdHggPSBhcGkuY29udGV4dC5hY3RpdmUoKTtcblxuICAgICAgICAgICAgICAgIC8vIFdlIGRlcGVuZCBvbiB0aGUgb3RlbENvbnRleHRNYW5hZ2VyIHRvIGhhbmRsZSB0aGUgY29udGV4dC9odWJcbiAgICAgICAgICAgICAgICAvLyBXZSBzZXQgdGhlIGBTRU5UUllfRk9SS19JU09MQVRJT05fU0NPUEVfQ09OVEVYVF9LRVlgIGNvbnRleHQgdmFsdWUsIHdoaWNoIGlzIHBpY2tlZCB1cCBieVxuICAgICAgICAgICAgICAgIC8vIHRoZSBPVEVMIGNvbnRleHQgbWFuYWdlciwgd2hpY2ggdXNlcyB0aGUgcHJlc2VuY2Ugb2YgdGhpcyBrZXkgdG8gZGV0ZXJtaW5lIGlmIGl0IHNob3VsZFxuICAgICAgICAgICAgICAgIC8vIGZvcmsgdGhlIGlzb2xhdGlvbiBzY29wZSwgb3Igbm90XG4gICAgICAgICAgICAgICAgLy8gYXMgYnkgZGVmYXVsdCwgd2UgZG9uJ3Qgd2FudCB0byBmb3JrIHRoaXMsIHVubGVzcyB0cmlnZ2VyZWQgZXhwbGljaXRseSBieSBgd2l0aFNjb3BlYFxuICAgICAgICAgICAgICAgIHJldHVybiBhcGkuY29udGV4dC53aXRoKGN0eCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGdldEN1cnJlbnRTY29wZSgpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHdpdGhTZXRTY29wZShzY29wZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdHggPSBhcGkuY29udGV4dC5hY3RpdmUoKTtcblxuICAgICAgICAgICAgICAgIC8vIFdlIGRlcGVuZCBvbiB0aGUgb3RlbENvbnRleHRNYW5hZ2VyIHRvIGhhbmRsZSB0aGUgY29udGV4dC9odWJcbiAgICAgICAgICAgICAgICAvLyBXZSBzZXQgdGhlIGBTRU5UUllfRk9SS19TRVRfU0NPUEVfQ09OVEVYVF9LRVlgIGNvbnRleHQgdmFsdWUsIHdoaWNoIGlzIHBpY2tlZCB1cCBieVxuICAgICAgICAgICAgICAgIC8vIHRoZSBPVEVMIGNvbnRleHQgbWFuYWdlciwgd2hpY2ggcGlja3MgdXAgdGhpcyBzY29wZSBhcyB0aGUgY3VycmVudCBzY29wZVxuICAgICAgICAgICAgICAgIHJldHVybiBhcGkuY29udGV4dC53aXRoKGN0eC5zZXRWYWx1ZShTRU5UUllfRk9SS19TRVRfU0NPUEVfQ09OVEVYVF9LRVksIHNjb3BlKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHNjb3BlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHdpdGhJc29sYXRpb25TY29wZShjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IGFwaS5jb250ZXh0LmFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gV2UgZGVwZW5kIG9uIHRoZSBvdGVsQ29udGV4dE1hbmFnZXIgdG8gaGFuZGxlIHRoZSBjb250ZXh0L2h1YlxuICAgICAgICAgICAgICAgIC8vIFdlIHNldCB0aGUgYFNFTlRSWV9GT1JLX0lTT0xBVElPTl9TQ09QRV9DT05URVhUX0tFWWAgY29udGV4dCB2YWx1ZSwgd2hpY2ggaXMgcGlja2VkIHVwIGJ5XG4gICAgICAgICAgICAgICAgLy8gdGhlIE9URUwgY29udGV4dCBtYW5hZ2VyLCB3aGljaCB1c2VzIHRoZSBwcmVzZW5jZSBvZiB0aGlzIGtleSB0byBkZXRlcm1pbmUgaWYgaXQgc2hvdWxkXG4gICAgICAgICAgICAgICAgLy8gZm9yayB0aGUgaXNvbGF0aW9uIHNjb3BlLCBvciBub3RcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBpLmNvbnRleHQud2l0aChjdHguc2V0VmFsdWUoU0VOVFJZX0ZPUktfSVNPTEFUSU9OX1NDT1BFX0NPTlRFWFRfS0VZLCB0cnVlKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGdldElzb2xhdGlvblNjb3BlKCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gd2l0aFNldElzb2xhdGlvblNjb3BlKGlzb2xhdGlvblNjb3BlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IGFwaS5jb250ZXh0LmFjdGl2ZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gV2UgZGVwZW5kIG9uIHRoZSBvdGVsQ29udGV4dE1hbmFnZXIgdG8gaGFuZGxlIHRoZSBjb250ZXh0L2h1YlxuICAgICAgICAgICAgICAgIC8vIFdlIHNldCB0aGUgYFNFTlRSWV9GT1JLX0lTT0xBVElPTl9TQ09QRV9DT05URVhUX0tFWWAgY29udGV4dCB2YWx1ZSwgd2hpY2ggaXMgcGlja2VkIHVwIGJ5XG4gICAgICAgICAgICAgICAgLy8gdGhlIE9URUwgY29udGV4dCBtYW5hZ2VyLCB3aGljaCB1c2VzIHRoZSBwcmVzZW5jZSBvZiB0aGlzIGtleSB0byBkZXRlcm1pbmUgaWYgaXQgc2hvdWxkXG4gICAgICAgICAgICAgICAgLy8gZm9yayB0aGUgaXNvbGF0aW9uIHNjb3BlLCBvciBub3RcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBpLmNvbnRleHQud2l0aChjdHguc2V0VmFsdWUoU0VOVFJZX0ZPUktfU0VUX0lTT0xBVElPTl9TQ09QRV9DT05URVhUX0tFWSwgaXNvbGF0aW9uU2NvcGUpLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZ2V0SXNvbGF0aW9uU2NvcGUoKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRDdXJyZW50U2NvcGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFNjb3BlcygpLnNjb3BlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SXNvbGF0aW9uU2NvcGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFNjb3BlcygpLmlzb2xhdGlvblNjb3BlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29yZS5zZXRBc3luY0NvbnRleHRTdHJhdGVneSh7XG4gICAgICAgICAgICAgICAgd2l0aFNjb3BlLFxuICAgICAgICAgICAgICAgIHdpdGhTZXRTY29wZSxcbiAgICAgICAgICAgICAgICB3aXRoU2V0SXNvbGF0aW9uU2NvcGUsXG4gICAgICAgICAgICAgICAgd2l0aElzb2xhdGlvblNjb3BlLFxuICAgICAgICAgICAgICAgIGdldEN1cnJlbnRTY29wZSxcbiAgICAgICAgICAgICAgICBnZXRJc29sYXRpb25TY29wZSxcbiAgICAgICAgICAgICAgICBzdGFydFNwYW4sXG4gICAgICAgICAgICAgICAgc3RhcnRTcGFuTWFudWFsLFxuICAgICAgICAgICAgICAgIHN0YXJ0SW5hY3RpdmVTcGFuLFxuICAgICAgICAgICAgICAgIGdldEFjdGl2ZVNwYW4sXG4gICAgICAgICAgICAgICAgc3VwcHJlc3NUcmFjaW5nLFxuICAgICAgICAgICAgICAgIGdldFRyYWNlRGF0YSxcbiAgICAgICAgICAgICAgICBjb250aW51ZVRyYWNlLFxuICAgICAgICAgICAgICAgIC8vIFRoZSB0eXBlcyBoZXJlIGRvbid0IGZ1bGx5IGFsaWduLCBiZWNhdXNlIG91ciBvd24gYFNwYW5gIHR5cGUgaXMgbmFycm93ZXJcbiAgICAgICAgICAgICAgICAvLyB0aGFuIHRoZSBPVEVMIG9uZSAtIGJ1dCB0aGlzIGlzIE9LIGZvciBoZXJlLCBhcyB3ZSBub3cgd2UnbGwgb25seSBoYXZlIE9URUwgc3BhbnMgcGFzc2VkIGFyb3VuZFxuICAgICAgICAgICAgICAgIHdpdGhBY3RpdmVTcGFuOiB3aXRoQWN0aXZlU3BhbiAsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBfb3B0aW9uYWxDaGFpbiQzKG9wcykgeyBsZXQgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDsgbGV0IHZhbHVlID0gb3BzWzBdOyBsZXQgaSA9IDE7IHdoaWxlIChpIDwgb3BzLmxlbmd0aCkgeyBjb25zdCBvcCA9IG9wc1tpXTsgY29uc3QgZm4gPSBvcHNbaSArIDFdOyBpICs9IDI7IGlmICgob3AgPT09ICdvcHRpb25hbEFjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSAmJiB2YWx1ZSA9PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gaWYgKG9wID09PSAnYWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJykgeyBsYXN0QWNjZXNzTEhTID0gdmFsdWU7IHZhbHVlID0gZm4odmFsdWUpOyB9IGVsc2UgaWYgKG9wID09PSAnY2FsbCcgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSB7IHZhbHVlID0gZm4oKC4uLmFyZ3MpID0+IHZhbHVlLmNhbGwobGFzdEFjY2Vzc0xIUywgLi4uYXJncykpOyBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkOyB9IH0gcmV0dXJuIHZhbHVlOyB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogV3JhcCBhbiBPcGVuVGVsZW1ldHJ5IENvbnRleHRNYW5hZ2VyIGluIGEgd2F5IHRoYXQgZW5zdXJlcyB0aGUgY29udGV4dCBpcyBrZXB0IGluIHN5bmMgd2l0aCB0aGUgU2VudHJ5IFNjb3BlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFVzYWdlOlxuICAgICAgICAgICAgICogaW1wb3J0IHsgQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlciB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2NvbnRleHQtYXN5bmMtaG9va3MnO1xuICAgICAgICAgICAgICogY29uc3QgU2VudHJ5Q29udGV4dE1hbmFnZXIgPSB3cmFwQ29udGV4dE1hbmFnZXJDbGFzcyhBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyKTtcbiAgICAgICAgICAgICAqIGNvbnN0IGNvbnRleHRNYW5hZ2VyID0gbmV3IFNlbnRyeUNvbnRleHRNYW5hZ2VyKCk7XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIHdyYXBDb250ZXh0TWFuYWdlckNsYXNzKFxuICAgICAgICAgICAgICBDb250ZXh0TWFuYWdlckNsYXNzLFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBUaGlzIGlzIGEgY3VzdG9tIENvbnRleHRNYW5hZ2VyIGZvciBPcGVuVGVsZW1ldHJ5LCB3aGljaCBleHRlbmRzIHRoZSBkZWZhdWx0IEFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIuXG4gICAgICAgICAgICAgICAqIEl0IGVuc3VyZXMgdGhhdCB3ZSBjcmVhdGUgbmV3IHNjb3BlcyBwZXIgY29udGV4dCwgc28gdGhhdCB0aGUgT1RFTCBDb250ZXh0ICYgdGhlIFNlbnRyeSBTY29wZSBhcmUgYWx3YXlzIGluIHN5bmMuXG4gICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAqIE5vdGUgdGhhdCB3ZSBjdXJyZW50bHkgb25seSBzdXBwb3J0IEFzeW5jSG9va3Mgd2l0aCB0aGlzLFxuICAgICAgICAgICAgICAgKiBidXQgc2luY2UgdGhpcyBzaG91bGQgd29yayBmb3IgTm9kZSAxNCsgYW55aG93IHRoYXQgc2hvdWxkIGJlIGdvb2QgZW5vdWdoLlxuICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGRvZXMgbm90IGxpa2UgdGhpcywgYnV0IHdlIGtub3cgdGhpcyBpcyBmaW5lXG4gICAgICAgICAgICAgIGNsYXNzIFNlbnRyeUNvbnRleHRNYW5hZ2VyIGV4dGVuZHMgQ29udGV4dE1hbmFnZXJDbGFzcyB7XG4gICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgICAgc2V0SXNTZXR1cCgnU2VudHJ5Q29udGV4dE1hbmFnZXInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogT3ZlcndyaXRlIHdpdGgoKSBvZiB0aGUgb3JpZ2luYWwgQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlclxuICAgICAgICAgICAgICAgICAqIHRvIGVuc3VyZSB3ZSBhbHNvIGNyZWF0ZSBuZXcgc2NvcGVzIHBlciBjb250ZXh0LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICB3aXRoKFxuICAgICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgICAgIGZuLFxuICAgICAgICAgICAgICAgICAgdGhpc0FyZyxcbiAgICAgICAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTY29wZXMgPSBnZXRTY29wZXNGcm9tQ29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTY29wZSA9IF9vcHRpb25hbENoYWluJDMoW2N1cnJlbnRTY29wZXMsICdvcHRpb25hbEFjY2VzcycsIF8gPT4gXy5zY29wZV0pIHx8IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50SXNvbGF0aW9uU2NvcGUgPSBfb3B0aW9uYWxDaGFpbiQzKFtjdXJyZW50U2NvcGVzLCAnb3B0aW9uYWxBY2Nlc3MnLCBfMiA9PiBfMi5pc29sYXRpb25TY29wZV0pIHx8IGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGUoKTtcblxuICAgICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkRm9ya0lzb2xhdGlvblNjb3BlID0gY29udGV4dC5nZXRWYWx1ZShTRU5UUllfRk9SS19JU09MQVRJT05fU0NPUEVfQ09OVEVYVF9LRVkpID09PSB0cnVlO1xuICAgICAgICAgICAgICAgICAgY29uc3Qgc2NvcGUgPSBjb250ZXh0LmdldFZhbHVlKFNFTlRSWV9GT1JLX1NFVF9TQ09QRV9DT05URVhUX0tFWSkgO1xuICAgICAgICAgICAgICAgICAgY29uc3QgaXNvbGF0aW9uU2NvcGUgPSBjb250ZXh0LmdldFZhbHVlKFNFTlRSWV9GT1JLX1NFVF9JU09MQVRJT05fU0NPUEVfQ09OVEVYVF9LRVkpIDtcblxuICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Q3VycmVudFNjb3BlID0gc2NvcGUgfHwgY3VycmVudFNjb3BlLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBuZXdJc29sYXRpb25TY29wZSA9XG4gICAgICAgICAgICAgICAgICAgIGlzb2xhdGlvblNjb3BlIHx8IChzaG91bGRGb3JrSXNvbGF0aW9uU2NvcGUgPyBjdXJyZW50SXNvbGF0aW9uU2NvcGUuY2xvbmUoKSA6IGN1cnJlbnRJc29sYXRpb25TY29wZSk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBzY29wZXMgPSB7IHNjb3BlOiBuZXdDdXJyZW50U2NvcGUsIGlzb2xhdGlvblNjb3BlOiBuZXdJc29sYXRpb25TY29wZSB9O1xuXG4gICAgICAgICAgICAgICAgICBjb25zdCBjdHgxID0gc2V0U2NvcGVzT25Db250ZXh0KGNvbnRleHQsIHNjb3Blcyk7XG5cbiAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgdW5uZWVkZWQgdmFsdWVzIGFnYWluXG4gICAgICAgICAgICAgICAgICBjb25zdCBjdHgyID0gY3R4MVxuICAgICAgICAgICAgICAgICAgICAuZGVsZXRlVmFsdWUoU0VOVFJZX0ZPUktfSVNPTEFUSU9OX1NDT1BFX0NPTlRFWFRfS0VZKVxuICAgICAgICAgICAgICAgICAgICAuZGVsZXRlVmFsdWUoU0VOVFJZX0ZPUktfU0VUX1NDT1BFX0NPTlRFWFRfS0VZKVxuICAgICAgICAgICAgICAgICAgICAuZGVsZXRlVmFsdWUoU0VOVFJZX0ZPUktfU0VUX0lTT0xBVElPTl9TQ09QRV9DT05URVhUX0tFWSk7XG5cbiAgICAgICAgICAgICAgICAgIHNldENvbnRleHRPblNjb3BlKG5ld0N1cnJlbnRTY29wZSwgY3R4Mik7XG5cbiAgICAgICAgICAgICAgICAgIHJldHVybiBzdXBlci53aXRoKGN0eDIsIGZuLCB0aGlzQXJnLCAuLi5hcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gU2VudHJ5Q29udGV4dE1hbmFnZXIgO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgZnVuY3Rpb24gcnVucyB0aHJvdWdoIGEgbGlzdCBvZiBPVEVMIFNwYW5zLCBhbmQgd3JhcHMgdGhlbSBpbiBhbiBgU3Bhbk5vZGVgXG4gICAgICAgICAgICAgKiB3aGVyZSBlYWNoIG5vZGUgaG9sZHMgYSByZWZlcmVuY2UgdG8gdGhlaXIgcGFyZW50IG5vZGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdyb3VwU3BhbnNXaXRoUGFyZW50cyhzcGFucykge1xuICAgICAgICAgICAgICBjb25zdCBub2RlTWFwID0gbmV3IE1hcCgpO1xuXG4gICAgICAgICAgICAgIGZvciAoY29uc3Qgc3BhbiBvZiBzcGFucykge1xuICAgICAgICAgICAgICAgIGNyZWF0ZU9yVXBkYXRlU3Bhbk5vZGVBbmRSZWZzKG5vZGVNYXAsIHNwYW4pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obm9kZU1hcCwgZnVuY3Rpb24gKFtfaWQsIHNwYW5Ob2RlXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzcGFuTm9kZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhpcyByZXR1cm5zIHRoZSBfbG9jYWxfIHBhcmVudCBJRCAtIGBwYXJlbnRJZGAgb24gdGhlIHNwYW4gbWF5IHBvaW50IHRvIGEgcmVtb3RlIHNwYW4uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExvY2FsUGFyZW50SWQoc3Bhbikge1xuICAgICAgICAgICAgICBjb25zdCBwYXJlbnRJc1JlbW90ZSA9IHNwYW4uYXR0cmlidXRlc1tTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1BBUkVOVF9JU19SRU1PVEVdID09PSB0cnVlO1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgcGFyZW50SWQgaXMgdGhlIHRyYWNlIHBhcmVudCBJRCwgd2UgcHJldGVuZCBpdCdzIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAvLyBBcyB0aGlzIG1lYW5zIHRoZSBwYXJlbnQgZXhpc3RzIHNvbWV3aGVyZSBlbHNlXG4gICAgICAgICAgICAgIHJldHVybiAhcGFyZW50SXNSZW1vdGUgPyBzcGFuLnBhcmVudFNwYW5JZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlT3JVcGRhdGVTcGFuTm9kZUFuZFJlZnMobm9kZU1hcCwgc3Bhbikge1xuICAgICAgICAgICAgICBjb25zdCBpZCA9IHNwYW4uc3BhbkNvbnRleHQoKS5zcGFuSWQ7XG4gICAgICAgICAgICAgIGNvbnN0IHBhcmVudElkID0gZ2V0TG9jYWxQYXJlbnRJZChzcGFuKTtcblxuICAgICAgICAgICAgICBpZiAoIXBhcmVudElkKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlT3JVcGRhdGVOb2RlKG5vZGVNYXAsIHsgaWQsIHNwYW4sIGNoaWxkcmVuOiBbXSB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBFbHNlIG1ha2Ugc3VyZSB0byBjcmVhdGUgcGFyZW50IG5vZGUgYXMgd2VsbFxuICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhlIHBhcmVudCBtYXkgbm90IGtub3cgaXQncyBwYXJlbnQgX3lldF8sIHRoaXMgbWF5IGJlIHVwZGF0ZWQgaW4gYSBsYXRlciBwYXNzXG4gICAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBjcmVhdGVPckdldFBhcmVudE5vZGUobm9kZU1hcCwgcGFyZW50SWQpO1xuICAgICAgICAgICAgICBjb25zdCBub2RlID0gY3JlYXRlT3JVcGRhdGVOb2RlKG5vZGVNYXAsIHsgaWQsIHNwYW4sIHBhcmVudE5vZGUsIGNoaWxkcmVuOiBbXSB9KTtcbiAgICAgICAgICAgICAgcGFyZW50Tm9kZS5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVPckdldFBhcmVudE5vZGUobm9kZU1hcCwgaWQpIHtcbiAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBub2RlTWFwLmdldChpZCk7XG5cbiAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU9yVXBkYXRlTm9kZShub2RlTWFwLCB7IGlkLCBjaGlsZHJlbjogW10gfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZU9yVXBkYXRlTm9kZShub2RlTWFwLCBzcGFuTm9kZSkge1xuICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IG5vZGVNYXAuZ2V0KHNwYW5Ob2RlLmlkKTtcblxuICAgICAgICAgICAgICAvLyBJZiBzcGFuIGlzIGFscmVhZHkgc2V0LCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nICYmIGV4aXN0aW5nLnNwYW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBJZiBpdCBleGlzdHMgYnV0IHNwYW4gaXMgbm90IHNldCB5ZXQsIHdlIHVwZGF0ZSBpdFxuICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcgJiYgIWV4aXN0aW5nLnNwYW4pIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZy5zcGFuID0gc3Bhbk5vZGUuc3BhbjtcbiAgICAgICAgICAgICAgICBleGlzdGluZy5wYXJlbnROb2RlID0gc3Bhbk5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBFbHNlLCB3ZSBjcmVhdGUgYSBuZXcgb25lLi4uXG4gICAgICAgICAgICAgIG5vZGVNYXAuc2V0KHNwYW5Ob2RlLmlkLCBzcGFuTm9kZSk7XG4gICAgICAgICAgICAgIHJldHVybiBzcGFuTm9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2Fub25pY2FsQ29kZXNHcnBjTWFwIG1hcHMgc29tZSBHUlBDIGNvZGVzIHRvIFNlbnRyeSdzIHNwYW4gc3RhdHVzZXMuIFNlZSBkZXNjcmlwdGlvbiBpbiBncnBjIGRvY3VtZW50YXRpb24uXG4gICAgICAgICAgICBjb25zdCBjYW5vbmljYWxHcnBjRXJyb3JDb2Rlc01hcCA9IHtcbiAgICAgICAgICAgICAgJzEnOiAnY2FuY2VsbGVkJyxcbiAgICAgICAgICAgICAgJzInOiAndW5rbm93bl9lcnJvcicsXG4gICAgICAgICAgICAgICczJzogJ2ludmFsaWRfYXJndW1lbnQnLFxuICAgICAgICAgICAgICAnNCc6ICdkZWFkbGluZV9leGNlZWRlZCcsXG4gICAgICAgICAgICAgICc1JzogJ25vdF9mb3VuZCcsXG4gICAgICAgICAgICAgICc2JzogJ2FscmVhZHlfZXhpc3RzJyxcbiAgICAgICAgICAgICAgJzcnOiAncGVybWlzc2lvbl9kZW5pZWQnLFxuICAgICAgICAgICAgICAnOCc6ICdyZXNvdXJjZV9leGhhdXN0ZWQnLFxuICAgICAgICAgICAgICAnOSc6ICdmYWlsZWRfcHJlY29uZGl0aW9uJyxcbiAgICAgICAgICAgICAgJzEwJzogJ2Fib3J0ZWQnLFxuICAgICAgICAgICAgICAnMTEnOiAnb3V0X29mX3JhbmdlJyxcbiAgICAgICAgICAgICAgJzEyJzogJ3VuaW1wbGVtZW50ZWQnLFxuICAgICAgICAgICAgICAnMTMnOiAnaW50ZXJuYWxfZXJyb3InLFxuICAgICAgICAgICAgICAnMTQnOiAndW5hdmFpbGFibGUnLFxuICAgICAgICAgICAgICAnMTUnOiAnZGF0YV9sb3NzJyxcbiAgICAgICAgICAgICAgJzE2JzogJ3VuYXV0aGVudGljYXRlZCcsXG4gICAgICAgICAgICB9IDtcblxuICAgICAgICAgICAgY29uc3QgaXNTdGF0dXNFcnJvck1lc3NhZ2VWYWxpZCA9IChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKGNhbm9uaWNhbEdycGNFcnJvckNvZGVzTWFwKS5pbmNsdWRlcyhtZXNzYWdlICk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCBhIFNlbnRyeSBzcGFuIHN0YXR1cyBmcm9tIGFuIG90ZWwgc3Bhbi5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gbWFwU3RhdHVzKHNwYW4pIHtcbiAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHNwYW5IYXNBdHRyaWJ1dGVzKHNwYW4pID8gc3Bhbi5hdHRyaWJ1dGVzIDoge307XG4gICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IHNwYW5IYXNTdGF0dXMoc3BhbikgPyBzcGFuLnN0YXR1cyA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgLy8gU2luY2Ugc3BhbiBzdGF0dXMgT0sgaXMgbm90IHNldCBieSBkZWZhdWx0LCB3ZSBnaXZlIGl0IHByaW9yaXR5OiBodHRwczovL29wZW50ZWxlbWV0cnkuaW8vZG9jcy9jb25jZXB0cy9zaWduYWxzL3RyYWNlcy8jc3Bhbi1zdGF0dXNcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzLmNvZGUgPT09IGFwaS5TcGFuU3RhdHVzQ29kZS5PSykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgY29kZTogY29yZS5TUEFOX1NUQVRVU19PSyB9O1xuICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNwYW4gaXMgYWxyZWFkeSBtYXJrZWQgYXMgZXJyb25lb3VzIHdlIHJldHVybiB0aGF0IGV4YWN0IHN0YXR1c1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzLmNvZGUgPT09IGFwaS5TcGFuU3RhdHVzQ29kZS5FUlJPUikge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0dXMubWVzc2FnZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5mZXJyZWRTdGF0dXMgPSBpbmZlclN0YXR1c0Zyb21BdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5mZXJyZWRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5mZXJyZWRTdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cy5tZXNzYWdlICYmIGlzU3RhdHVzRXJyb3JNZXNzYWdlVmFsaWQoc3RhdHVzLm1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGNvZGU6IGNvcmUuU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6IHN0YXR1cy5tZXNzYWdlIH07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBjb2RlOiBjb3JlLlNQQU5fU1RBVFVTX0VSUk9SLCBtZXNzYWdlOiAndW5rbm93bl9lcnJvcicgfTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBJZiB0aGUgc3BhbiBzdGF0dXMgaXMgVU5TRVQsIHdlIHRyeSB0byBpbmZlciBpdCBmcm9tIEhUVFAgb3IgR1JQQyBzdGF0dXMgY29kZXMuXG4gICAgICAgICAgICAgIGNvbnN0IGluZmVycmVkU3RhdHVzID0gaW5mZXJTdGF0dXNGcm9tQXR0cmlidXRlcyhhdHRyaWJ1dGVzKTtcblxuICAgICAgICAgICAgICBpZiAoaW5mZXJyZWRTdGF0dXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5mZXJyZWRTdGF0dXM7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBXZSBkZWZhdWx0IHRvIHNldHRpbmcgdGhlIHNwYW5zIHN0YXR1cyB0byBvay5cbiAgICAgICAgICAgICAgaWYgKHN0YXR1cyAmJiBzdGF0dXMuY29kZSA9PT0gYXBpLlNwYW5TdGF0dXNDb2RlLlVOU0VUKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY29kZTogY29yZS5TUEFOX1NUQVRVU19PSyB9O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGNvZGU6IGNvcmUuU1BBTl9TVEFUVVNfRVJST1IsIG1lc3NhZ2U6ICd1bmtub3duX2Vycm9yJyB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGluZmVyU3RhdHVzRnJvbUF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgc3BhbiBzdGF0dXMgaXMgVU5TRVQsIHdlIHRyeSB0byBpbmZlciBpdCBmcm9tIEhUVFAgb3IgR1JQQyBzdGF0dXMgY29kZXMuXG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgIGNvbnN0IGh0dHBDb2RlQXR0cmlidXRlID0gYXR0cmlidXRlc1tBVFRSX0hUVFBfUkVTUE9OU0VfU1RBVFVTX0NPREVdIHx8IGF0dHJpYnV0ZXNbU0VNQVRUUlNfSFRUUF9TVEFUVVNfQ09ERV07XG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgICBjb25zdCBncnBjQ29kZUF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbU0VNQVRUUlNfUlBDX0dSUENfU1RBVFVTX0NPREVdO1xuXG4gICAgICAgICAgICAgIGNvbnN0IG51bWJlckh0dHBDb2RlID1cbiAgICAgICAgICAgICAgICB0eXBlb2YgaHR0cENvZGVBdHRyaWJ1dGUgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICA/IGh0dHBDb2RlQXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICA6IHR5cGVvZiBodHRwQ29kZUF0dHJpYnV0ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChodHRwQ29kZUF0dHJpYnV0ZSlcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBudW1iZXJIdHRwQ29kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29yZS5nZXRTcGFuU3RhdHVzRnJvbUh0dHBDb2RlKG51bWJlckh0dHBDb2RlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZ3JwY0NvZGVBdHRyaWJ1dGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY29kZTogY29yZS5TUEFOX1NUQVRVU19FUlJPUiwgbWVzc2FnZTogY2Fub25pY2FsR3JwY0Vycm9yQ29kZXNNYXBbZ3JwY0NvZGVBdHRyaWJ1dGVdIHx8ICd1bmtub3duX2Vycm9yJyB9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gX29wdGlvbmFsQ2hhaW4kMihvcHMpIHsgbGV0IGxhc3RBY2Nlc3NMSFMgPSB1bmRlZmluZWQ7IGxldCB2YWx1ZSA9IG9wc1swXTsgbGV0IGkgPSAxOyB3aGlsZSAoaSA8IG9wcy5sZW5ndGgpIHsgY29uc3Qgb3AgPSBvcHNbaV07IGNvbnN0IGZuID0gb3BzW2kgKyAxXTsgaSArPSAyOyBpZiAoKG9wID09PSAnb3B0aW9uYWxBY2Nlc3MnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgJiYgdmFsdWUgPT0gbnVsbCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9IGlmIChvcCA9PT0gJ2FjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbEFjY2VzcycpIHsgbGFzdEFjY2Vzc0xIUyA9IHZhbHVlOyB2YWx1ZSA9IGZuKHZhbHVlKTsgfSBlbHNlIGlmIChvcCA9PT0gJ2NhbGwnIHx8IG9wID09PSAnb3B0aW9uYWxDYWxsJykgeyB2YWx1ZSA9IGZuKCguLi5hcmdzKSA9PiB2YWx1ZS5jYWxsKGxhc3RBY2Nlc3NMSFMsIC4uLmFyZ3MpKTsgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDsgfSB9IHJldHVybiB2YWx1ZTsgfVxuXG4gICAgICAgICAgICBjb25zdCBNQVhfU1BBTl9DT1VOVCA9IDEwMDA7XG4gICAgICAgICAgICBjb25zdCBERUZBVUxUX1RJTUVPVVQgPSAzMDA7IC8vIDUgbWluXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBTZW50cnktc3BlY2lmaWMgZXhwb3J0ZXIgdGhhdCBjb252ZXJ0cyBPcGVuVGVsZW1ldHJ5IFNwYW5zIHRvIFNlbnRyeSBTcGFucyAmIFRyYW5zYWN0aW9ucy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2xhc3MgU2VudHJ5U3BhbkV4cG9ydGVyIHtcblxuICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgKiBBIHF1aWNrIGV4cGxhbmF0aW9uIG9uIHRoZSBidWNrZXRzOiBXZSBkbyBidWNrZXRpbmcgb2YgZmluaXNoZWQgc3BhbnMgZm9yIGVmZmljaWVuY3kuIFRoaXMgc3BhbiBleHBvcnRlciBpc1xuICAgICAgICAgICAgICAgKiBhY2N1bXVsYXRpbmcgc3BhbnMgdW50aWwgYSByb290IHNwYW4gaXMgZW5jb3VudGVyZWQgYW5kIHRoZW4gaXQgZmx1c2hlcyBhbGwgdGhlIHNwYW5zIHRoYXQgYXJlIGRlc2NlbmRhbnRzIG9mIHRoYXRcbiAgICAgICAgICAgICAgICogcm9vdCBzcGFuLiBCZWNhdXNlIGl0IGlzIHRvdGFsbHkgaW4gdGhlIHJlYWxtIG9mIHBvc3NpYmlsaXRpZXMgdGhhdCByb290IHNwYW5zIGFyZSBuZXZlciBmaW5pc2hlZCwgYW5kIHdlIGRvbid0XG4gICAgICAgICAgICAgICAqIHdhbnQgdG8gYWNjdW11bGF0ZSBzcGFucyBpbmRlZmluaXRlbHkgaW4gbWVtb3J5LCB3ZSBuZWVkIHRvIHBlcmlvZGljYWxseSBldmFjdWF0ZSBzcGFucy4gTmFpdmVseSB3ZSBjb3VsZCBzaW1wbHlcbiAgICAgICAgICAgICAgICogc3RvcmUgdGhlIHNwYW5zIGluIGFuIGFycmF5IGFuZCBlYWNoIHRpbWUgYSBuZXcgc3BhbiBjb21lcyBpbiB3ZSBjb3VsZCBpdGVyYXRlIHRocm91Z2ggdGhlIGVudGlyZSBhcnJheSBhbmRcbiAgICAgICAgICAgICAgICogZXZhY3VhdGUgYWxsIHNwYW5zIHRoYXQgaGF2ZSBhbiBlbmQtdGltZXN0YW1wIHRoYXQgaXMgb2xkZXIgdGhhbiBvdXIgbGltaXQuIFRoaXMgY291bGQgZ2V0IHF1aXRlIGV4cGVuc2l2ZSBiZWNhdXNlXG4gICAgICAgICAgICAgICAqIHdlIHdvdWxkIGhhdmUgdG8gaXRlcmF0ZSBhIHBvdGVudGlhbGx5IGxhcmdlIG51bWJlciBvZiBzcGFucyBldmVyeSB0aW1lIHdlIGV2YWN1YXRlLiBXZSB3YW50IHRvIGF2b2lkIHRoZXNlIGxhcmdlXG4gICAgICAgICAgICAgICAqIGJ1cnN0cyBvZiBjb21wdXRhdGlvbi5cbiAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICogSW5zdGVhZCB3ZSBnbyBmb3IgYSBidWNrZXRpbmcgYXBwcm9hY2ggYW5kIHB1dCBzcGFucyBpbnRvIGJ1Y2tldHMsIGJhc2VkIG9uIHdoYXQgc2Vjb25kXG4gICAgICAgICAgICAgICAqIChtb2R1bG8gdGhlIHRpbWUgbGltaXQpIHRoZSBzcGFuIHdhcyBwdXQgaW50byB0aGUgZXhwb3J0ZXIuIFdpdGggYnVja2V0cywgd2hlbiB3ZSBkZWNpZGUgdG8gZXZhY3VhdGUsIHdlIGNhblxuICAgICAgICAgICAgICAgKiBpdGVyYXRlIHRocm91Z2ggdGhlIGJ1Y2tldCBlbnRyaWVzIGluc3RlYWQsIHdoaWNoIGhhdmUgYW4gdXBwZXIgYm91bmQgb2YgaXRlbXMsIG1ha2luZyB0aGUgZXZhY3VhdGlvbiBtdWNoIG1vcmVcbiAgICAgICAgICAgICAgICogZWZmaWNpZW50LiBDbGVhbmluZyB1cCBhbHNvIGJlY29tZXMgbXVjaCBtb3JlIGVmZmljaWVudCBzaW5jZSBpdCBzaW1wbHkgaW52b2x2ZXMgZGUtcmVmZXJlbmNpbmcgYSBidWNrZXQgd2l0aGluIHRoZVxuICAgICAgICAgICAgICAgKiBidWNrZXQgYXJyYXksIGFuZCBsZXR0aW5nIGdhcmJhZ2UgY29sbGVjdGlvbiB0YWtlIGNhcmUgb2YgdGhlIHJlc3QuXG4gICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zXG5cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkU3BhbkJ1Y2tldFNpemUgPSBfb3B0aW9uYWxDaGFpbiQyKFtvcHRpb25zLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8udGltZW91dF0pIHx8IERFRkFVTFRfVElNRU9VVDtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hlZFNwYW5CdWNrZXRzID0gbmV3IEFycmF5KHRoaXMuX2ZpbmlzaGVkU3BhbkJ1Y2tldFNpemUpLmZpbGwodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0Q2xlYW51cFRpbWVzdGFtcEluUyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NwYW5zVG9CdWNrZXRFbnRyeSA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvKiogRXhwb3J0IGEgc2luZ2xlIHNwYW4uICovXG4gICAgICAgICAgICAgICBleHBvcnQoc3Bhbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lc3RhbXBJblMgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0Q2xlYW51cFRpbWVzdGFtcEluUyAhPT0gY3VycmVudFRpbWVzdGFtcEluUykge1xuICAgICAgICAgICAgICAgICAgbGV0IGRyb3BwZWRTcGFuQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgdGhpcy5fZmluaXNoZWRTcGFuQnVja2V0cy5mb3JFYWNoKChidWNrZXQsIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1Y2tldCAmJiBidWNrZXQudGltZXN0YW1wSW5TIDw9IGN1cnJlbnRUaW1lc3RhbXBJblMgLSB0aGlzLl9maW5pc2hlZFNwYW5CdWNrZXRTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZHJvcHBlZFNwYW5Db3VudCArPSBidWNrZXQuc3BhbnMuc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hlZFNwYW5CdWNrZXRzW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIGlmIChkcm9wcGVkU3BhbkNvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBERUJVR19CVUlMRCQxICYmXG4gICAgICAgICAgICAgICAgICAgICAgY29yZS5sb2dnZXIubG9nKFxuICAgICAgICAgICAgICAgICAgICAgICAgYFNwYW5FeHBvcnRlciBkcm9wcGVkICR7ZHJvcHBlZFNwYW5Db3VudH0gc3BhbnMgYmVjYXVzZSB0aGV5IHdlcmUgcGVuZGluZyBmb3IgbW9yZSB0aGFuICR7dGhpcy5fZmluaXNoZWRTcGFuQnVja2V0U2l6ZX0gc2Vjb25kcy5gLFxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0Q2xlYW51cFRpbWVzdGFtcEluUyA9IGN1cnJlbnRUaW1lc3RhbXBJblM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJ1Y2tldEluZGV4ID0gY3VycmVudFRpbWVzdGFtcEluUyAlIHRoaXMuX2ZpbmlzaGVkU3BhbkJ1Y2tldFNpemU7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJ1Y2tldCA9IHRoaXMuX2ZpbmlzaGVkU3BhbkJ1Y2tldHNbY3VycmVudEJ1Y2tldEluZGV4XSB8fCB7XG4gICAgICAgICAgICAgICAgICB0aW1lc3RhbXBJblM6IGN1cnJlbnRUaW1lc3RhbXBJblMsXG4gICAgICAgICAgICAgICAgICBzcGFuczogbmV3IFNldCgpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluaXNoZWRTcGFuQnVja2V0c1tjdXJyZW50QnVja2V0SW5kZXhdID0gY3VycmVudEJ1Y2tldDtcbiAgICAgICAgICAgICAgICBjdXJyZW50QnVja2V0LnNwYW5zLmFkZChzcGFuKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zcGFuc1RvQnVja2V0RW50cnkuc2V0KHNwYW4sIGN1cnJlbnRCdWNrZXQpO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHNwYW4gZG9lc24ndCBoYXZlIGEgbG9jYWwgcGFyZW50IElEIChpdCdzIGEgcm9vdCBzcGFuKSwgd2UncmUgZ29ubmEgZmx1c2ggYWxsIHRoZSBlbmRlZCBzcGFuc1xuICAgICAgICAgICAgICAgIGlmICghZ2V0TG9jYWxQYXJlbnRJZChzcGFuKSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJUaW1lb3V0KCk7XG5cbiAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGdvdCBhIHBhcmVudCBzcGFuLCB3ZSB0cnkgdG8gc2VuZCB0aGUgc3BhbiB0cmVlXG4gICAgICAgICAgICAgICAgICAvLyBXYWl0IGEgdGljayBmb3IgdGhpcywgdG8gZW5zdXJlIHdlIGF2b2lkIHJhY2UgY29uZGl0aW9uc1xuICAgICAgICAgICAgICAgICAgdGhpcy5fZmx1c2hUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8qKiBUcnkgdG8gZmx1c2ggYW55IHBlbmRpbmcgc3BhbnMgaW1tZWRpYXRlbHkuICovXG4gICAgICAgICAgICAgICBmbHVzaCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGVhclRpbWVvdXQoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbmlzaGVkU3BhbnMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hlZFNwYW5CdWNrZXRzLmZvckVhY2goYnVja2V0ID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChidWNrZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoZWRTcGFucy5wdXNoKC4uLmJ1Y2tldC5zcGFucyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzZW50U3BhbnMgPSBtYXliZVNlbmQoZmluaXNoZWRTcGFucyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzZW50U3BhbkNvdW50ID0gc2VudFNwYW5zLnNpemU7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZW1haW5pbmdPcGVuU3BhbkNvdW50ID0gZmluaXNoZWRTcGFucy5sZW5ndGggLSBzZW50U3BhbkNvdW50O1xuXG4gICAgICAgICAgICAgICAgREVCVUdfQlVJTEQkMSAmJlxuICAgICAgICAgICAgICAgICAgY29yZS5sb2dnZXIubG9nKFxuICAgICAgICAgICAgICAgICAgICBgU3BhbkV4cG9ydGVyIGV4cG9ydGVkICR7c2VudFNwYW5Db3VudH0gc3BhbnMsICR7cmVtYWluaW5nT3BlblNwYW5Db3VudH0gc3BhbnMgYXJlIHdhaXRpbmcgZm9yIHRoZWlyIHBhcmVudCBzcGFucyB0byBmaW5pc2hgLFxuICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHNlbnRTcGFucy5mb3JFYWNoKHNwYW4gPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgYnVja2V0RW50cnkgPSB0aGlzLl9zcGFuc1RvQnVja2V0RW50cnkuZ2V0KHNwYW4pO1xuICAgICAgICAgICAgICAgICAgaWYgKGJ1Y2tldEVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldEVudHJ5LnNwYW5zLmRlbGV0ZShzcGFuKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8qKiBDbGVhciB0aGUgZXhwb3J0ZXIuICovXG4gICAgICAgICAgICAgICBjbGVhcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hlZFNwYW5CdWNrZXRzID0gdGhpcy5fZmluaXNoZWRTcGFuQnVja2V0cy5maWxsKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJUaW1lb3V0KCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvKiogQ2xlYXIgdGhlIGZsdXNoIHRpbWVvdXQuICovXG4gICAgICAgICAgICAgICBfY2xlYXJUaW1lb3V0KCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mbHVzaFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9mbHVzaFRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5fZmx1c2hUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFNlbmQgdGhlIGdpdmVuIHNwYW5zLCBidXQgb25seSBpZiB0aGV5IGFyZSBwYXJ0IG9mIGEgZmluaXNoZWQgdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgc2VudCBzcGFucy5cbiAgICAgICAgICAgICAqIFNwYW5zIHJlbWFpbiB1bnNlbnQgd2hlbiB0aGVpciBwYXJlbnQgc3BhbiBpcyBub3QgeWV0IGZpbmlzaGVkLlxuICAgICAgICAgICAgICogVGhpcyB3aWxsIGhhcHBlbiByZWd1bGFybHksIGFzIGNoaWxkIHNwYW5zIGFyZSBnZW5lcmFsbHkgZmluaXNoZWQgYmVmb3JlIHRoZWlyIHBhcmVudHMuXG4gICAgICAgICAgICAgKiBCdXQgaXQgX2NvdWxkXyBhbHNvIGhhcHBlbiBiZWNhdXNlLCBmb3Igd2hhdGV2ZXIgcmVhc29uLCBhIHBhcmVudCBzcGFuIHdhcyBsb3N0LlxuICAgICAgICAgICAgICogSW4gdGhpcyBjYXNlLCB3ZSdsbCBldmVudHVhbGx5IG5lZWQgdG8gY2xlYW4gdGhpcyB1cC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gbWF5YmVTZW5kKHNwYW5zKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGdyb3VwZWQgPSBncm91cFNwYW5zV2l0aFBhcmVudHMoc3BhbnMpO1xuICAgICAgICAgICAgICBjb25zdCBzZW50U3BhbnMgPSBuZXcgU2V0KCk7XG5cbiAgICAgICAgICAgICAgY29uc3Qgcm9vdE5vZGVzID0gZ2V0Q29tcGxldGVkUm9vdE5vZGVzKGdyb3VwZWQpO1xuXG4gICAgICAgICAgICAgIHJvb3ROb2Rlcy5mb3JFYWNoKHJvb3QgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwYW4gPSByb290LnNwYW47XG4gICAgICAgICAgICAgICAgc2VudFNwYW5zLmFkZChzcGFuKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvbkV2ZW50ID0gY3JlYXRlVHJhbnNhY3Rpb25Gb3JPdGVsU3BhbihzcGFuKTtcblxuICAgICAgICAgICAgICAgIC8vIFdlJ2xsIHJlY3Vyc2l2ZWx5IGFkZCBhbGwgdGhlIGNoaWxkIHNwYW5zIHRvIHRoaXMgYXJyYXlcbiAgICAgICAgICAgICAgICBjb25zdCBzcGFucyA9IHRyYW5zYWN0aW9uRXZlbnQuc3BhbnMgfHwgW107XG5cbiAgICAgICAgICAgICAgICByb290LmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgICAgY3JlYXRlQW5kRmluaXNoU3BhbkZvck90ZWxTcGFuKGNoaWxkLCBzcGFucywgc2VudFNwYW5zKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHNwYW5zLnNvcnQoKSBtdXRhdGVzIHRoZSBhcnJheSwgYnV0IHdlIGRvIG5vdCB1c2UgdGhpcyBhbnltb3JlIGFmdGVyIHRoaXMgcG9pbnRcbiAgICAgICAgICAgICAgICAvLyBzbyB3ZSBjYW4gc2FmZWx5IG11dGF0ZSBpdCBoZXJlXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25FdmVudC5zcGFucyA9XG4gICAgICAgICAgICAgICAgICBzcGFucy5sZW5ndGggPiBNQVhfU1BBTl9DT1VOVFxuICAgICAgICAgICAgICAgICAgICA/IHNwYW5zLnNvcnQoKGEsIGIpID0+IGEuc3RhcnRfdGltZXN0YW1wIC0gYi5zdGFydF90aW1lc3RhbXApLnNsaWNlKDAsIE1BWF9TUEFOX0NPVU5UKVxuICAgICAgICAgICAgICAgICAgICA6IHNwYW5zO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRzID0gY29yZS50aW1lZEV2ZW50c1RvTWVhc3VyZW1lbnRzKHNwYW4uZXZlbnRzKTtcbiAgICAgICAgICAgICAgICBpZiAobWVhc3VyZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkV2ZW50Lm1lYXN1cmVtZW50cyA9IG1lYXN1cmVtZW50cztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFdmVudCh0cmFuc2FjdGlvbkV2ZW50KTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHNlbnRTcGFucztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gbm9kZUlzQ29tcGxldGVkUm9vdE5vZGUobm9kZSkge1xuICAgICAgICAgICAgICByZXR1cm4gISFub2RlLnNwYW4gJiYgIW5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q29tcGxldGVkUm9vdE5vZGVzKG5vZGVzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBub2Rlcy5maWx0ZXIobm9kZUlzQ29tcGxldGVkUm9vdE5vZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZVNwYW4oc3Bhbikge1xuICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gc3Bhbi5hdHRyaWJ1dGVzO1xuXG4gICAgICAgICAgICAgIGNvbnN0IG9yaWdpbiA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTl0gO1xuICAgICAgICAgICAgICBjb25zdCBvcCA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXSA7XG4gICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGF0dHJpYnV0ZXNbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRV0gO1xuXG4gICAgICAgICAgICAgIHJldHVybiB7IG9yaWdpbiwgb3AsIHNvdXJjZSB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuICovXG4gICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVUcmFuc2FjdGlvbkZvck90ZWxTcGFuKHNwYW4pIHtcbiAgICAgICAgICAgICAgY29uc3QgeyBvcCwgZGVzY3JpcHRpb24sIGRhdGEsIG9yaWdpbiA9ICdtYW51YWwnLCBzb3VyY2UgfSA9IGdldFNwYW5EYXRhKHNwYW4pO1xuICAgICAgICAgICAgICBjb25zdCBjYXB0dXJlZFNwYW5TY29wZXMgPSBjb3JlLmdldENhcHR1cmVkU2NvcGVzT25TcGFuKHNwYW4gKTtcblxuICAgICAgICAgICAgICBjb25zdCBzYW1wbGVSYXRlID0gc3Bhbi5hdHRyaWJ1dGVzW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURV0gO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBjb3JlLmRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NPVVJDRV06IHNvdXJjZSxcbiAgICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1NBTVBMRV9SQVRFXTogc2FtcGxlUmF0ZSxcbiAgICAgICAgICAgICAgICBbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09QXTogb3AsXG4gICAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiBvcmlnaW4sXG4gICAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgICAgICAuLi5yZW1vdmVTZW50cnlBdHRyaWJ1dGVzKHNwYW4uYXR0cmlidXRlcyksXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHsgdHJhY2VJZDogdHJhY2VfaWQsIHNwYW5JZDogc3Bhbl9pZCB9ID0gc3Bhbi5zcGFuQ29udGV4dCgpO1xuXG4gICAgICAgICAgICAgIC8vIElmIHBhcmVudFNwYW5JZEZyb21UcmFjZVN0YXRlIGlzIGRlZmluZWQgYXQgYWxsLCB3ZSB3YW50IGl0IHRvIHRha2UgcHJlY2VkZW5jZVxuICAgICAgICAgICAgICAvLyBJbiB0aGF0IGNhc2UsIGFuIGVtcHR5IHN0cmluZyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgXCJubyBwYXJlbnQgc3BhbiBpZFwiLFxuICAgICAgICAgICAgICAvLyBldmVuIGlmIGBzcGFuLnBhcmVudFNwYW5JZGAgaXMgc2V0XG4gICAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIGNhc2Ugd2hlbiB3ZSBhcmUgc3RhcnRpbmcgYSBuZXcgdHJhY2UsIHdoZXJlIHdlIGhhdmUgYSB2aXJ0dWFsIHNwYW4gYmFzZWQgb24gdGhlIHByb3BhZ2F0aW9uQ29udGV4dFxuICAgICAgICAgICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gY29udGludWUgdGhlIHRyYWNlSWQgaW4gdGhpcyBjYXNlLCBidXQgaWdub3JlIHRoZSBwYXJlbnQgc3BhblxuICAgICAgICAgICAgICBjb25zdCBwYXJlbnRfc3Bhbl9pZCA9IHNwYW4ucGFyZW50U3BhbklkO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IG1hcFN0YXR1cyhzcGFuKTtcblxuICAgICAgICAgICAgICBjb25zdCB0cmFjZUNvbnRleHQgPSBjb3JlLmRyb3BVbmRlZmluZWRLZXlzKHtcbiAgICAgICAgICAgICAgICBwYXJlbnRfc3Bhbl9pZCxcbiAgICAgICAgICAgICAgICBzcGFuX2lkLFxuICAgICAgICAgICAgICAgIHRyYWNlX2lkLFxuICAgICAgICAgICAgICAgIGRhdGE6IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgb3JpZ2luLFxuICAgICAgICAgICAgICAgIG9wLFxuICAgICAgICAgICAgICAgIHN0YXR1czogY29yZS5nZXRTdGF0dXNNZXNzYWdlKHN0YXR1cyksIC8vIEFzIHBlciBwcm90b2NvbCwgc3BhbiBzdGF0dXMgaXMgYWxsb3dlZCB0byBiZSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzQ29kZSA9IGF0dHJpYnV0ZXNbQVRUUl9IVFRQX1JFU1BPTlNFX1NUQVRVU19DT0RFXTtcbiAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VDb250ZXh0ID0gdHlwZW9mIHN0YXR1c0NvZGUgPT09ICdudW1iZXInID8geyByZXNwb25zZTogeyBzdGF0dXNfY29kZTogc3RhdHVzQ29kZSB9IH0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25FdmVudCA9IGNvcmUuZHJvcFVuZGVmaW5lZEtleXMoe1xuICAgICAgICAgICAgICAgIGNvbnRleHRzOiB7XG4gICAgICAgICAgICAgICAgICB0cmFjZTogdHJhY2VDb250ZXh0LFxuICAgICAgICAgICAgICAgICAgb3RlbDoge1xuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZTogc3Bhbi5yZXNvdXJjZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIC4uLnJlc3BvbnNlQ29udGV4dCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYW5zOiBbXSxcbiAgICAgICAgICAgICAgICBzdGFydF90aW1lc3RhbXA6IGNvcmUuc3BhblRpbWVJbnB1dFRvU2Vjb25kcyhzcGFuLnN0YXJ0VGltZSksXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBjb3JlLnNwYW5UaW1lSW5wdXRUb1NlY29uZHMoc3Bhbi5lbmRUaW1lKSxcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgICAgICBzZGtQcm9jZXNzaW5nTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgIC4uLmNvcmUuZHJvcFVuZGVmaW5lZEtleXMoe1xuICAgICAgICAgICAgICAgICAgICBjYXB0dXJlZFNwYW5TY29wZTogY2FwdHVyZWRTcGFuU2NvcGVzLnNjb3BlLFxuICAgICAgICAgICAgICAgICAgICBjYXB0dXJlZFNwYW5Jc29sYXRpb25TY29wZTogY2FwdHVyZWRTcGFuU2NvcGVzLmlzb2xhdGlvblNjb3BlLFxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVSYXRlLFxuICAgICAgICAgICAgICAgICAgICBkeW5hbWljU2FtcGxpbmdDb250ZXh0OiBjb3JlLmdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbihzcGFuICksXG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC4uLihzb3VyY2UgJiYge1xuICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25faW5mbzoge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF9tZXRyaWNzX3N1bW1hcnk6IGNvcmUuZ2V0TWV0cmljU3VtbWFyeUpzb25Gb3JTcGFuKHNwYW4gKSxcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uRXZlbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUFuZEZpbmlzaFNwYW5Gb3JPdGVsU3Bhbihub2RlLCBzcGFucywgc2VudFNwYW5zKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBub2RlLnNwYW47XG5cbiAgICAgICAgICAgICAgaWYgKHNwYW4pIHtcbiAgICAgICAgICAgICAgICBzZW50U3BhbnMuYWRkKHNwYW4pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkRHJvcCA9ICFzcGFuO1xuXG4gICAgICAgICAgICAgIC8vIElmIHRoaXMgc3BhbiBzaG91bGQgYmUgZHJvcHBlZCwgd2Ugc3RpbGwgd2FudCB0byBjcmVhdGUgc3BhbnMgZm9yIHRoZSBjaGlsZHJlbiBvZiB0aGlzXG4gICAgICAgICAgICAgIGlmIChzaG91bGREcm9wKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZUFuZEZpbmlzaFNwYW5Gb3JPdGVsU3BhbihjaGlsZCwgc3BhbnMsIHNlbnRTcGFucyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3Qgc3Bhbl9pZCA9IHNwYW4uc3BhbkNvbnRleHQoKS5zcGFuSWQ7XG4gICAgICAgICAgICAgIGNvbnN0IHRyYWNlX2lkID0gc3Bhbi5zcGFuQ29udGV4dCgpLnRyYWNlSWQ7XG5cbiAgICAgICAgICAgICAgY29uc3QgeyBhdHRyaWJ1dGVzLCBzdGFydFRpbWUsIGVuZFRpbWUsIHBhcmVudFNwYW5JZCB9ID0gc3BhbjtcblxuICAgICAgICAgICAgICBjb25zdCB7IG9wLCBkZXNjcmlwdGlvbiwgZGF0YSwgb3JpZ2luID0gJ21hbnVhbCcgfSA9IGdldFNwYW5EYXRhKHNwYW4pO1xuICAgICAgICAgICAgICBjb25zdCBhbGxEYXRhID0gY29yZS5kcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU5dOiBvcmlnaW4sXG4gICAgICAgICAgICAgICAgW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUF06IG9wLFxuICAgICAgICAgICAgICAgIC4uLnJlbW92ZVNlbnRyeUF0dHJpYnV0ZXMoYXR0cmlidXRlcyksXG4gICAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gbWFwU3RhdHVzKHNwYW4pO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHNwYW5KU09OID0gY29yZS5kcm9wVW5kZWZpbmVkS2V5cyh7XG4gICAgICAgICAgICAgICAgc3Bhbl9pZCxcbiAgICAgICAgICAgICAgICB0cmFjZV9pZCxcbiAgICAgICAgICAgICAgICBkYXRhOiBhbGxEYXRhLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIHBhcmVudF9zcGFuX2lkOiBwYXJlbnRTcGFuSWQsXG4gICAgICAgICAgICAgICAgc3RhcnRfdGltZXN0YW1wOiBjb3JlLnNwYW5UaW1lSW5wdXRUb1NlY29uZHMoc3RhcnRUaW1lKSxcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIFswLDBdIGJ5IGRlZmF1bHQgaW4gT1RFTCwgaW4gd2hpY2ggY2FzZSB3ZSB3YW50IHRvIGludGVycHJldCB0aGlzIGFzIG5vIGVuZCB0aW1lXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wOiBjb3JlLnNwYW5UaW1lSW5wdXRUb1NlY29uZHMoZW5kVGltZSkgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHN0YXR1czogY29yZS5nZXRTdGF0dXNNZXNzYWdlKHN0YXR1cyksIC8vIEFzIHBlciBwcm90b2NvbCwgc3BhbiBzdGF0dXMgaXMgYWxsb3dlZCB0byBiZSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICBvcCxcbiAgICAgICAgICAgICAgICBvcmlnaW4sXG4gICAgICAgICAgICAgICAgX21ldHJpY3Nfc3VtbWFyeTogY29yZS5nZXRNZXRyaWNTdW1tYXJ5SnNvbkZvclNwYW4oc3BhbiApLFxuICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50czogY29yZS50aW1lZEV2ZW50c1RvTWVhc3VyZW1lbnRzKHNwYW4uZXZlbnRzKSxcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgc3BhbnMucHVzaChzcGFuSlNPTik7XG5cbiAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICBjcmVhdGVBbmRGaW5pc2hTcGFuRm9yT3RlbFNwYW4oY2hpbGQsIHNwYW5zLCBzZW50U3BhbnMpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U3BhbkRhdGEoc3BhbilcblxuICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY29uc3QgeyBvcDogZGVmaW5lZE9wLCBzb3VyY2U6IGRlZmluZWRTb3VyY2UsIG9yaWdpbiB9ID0gcGFyc2VTcGFuKHNwYW4pO1xuICAgICAgICAgICAgICBjb25zdCB7IG9wOiBpbmZlcnJlZE9wLCBkZXNjcmlwdGlvbiwgc291cmNlOiBpbmZlcnJlZFNvdXJjZSwgZGF0YTogaW5mZXJyZWREYXRhIH0gPSBwYXJzZVNwYW5EZXNjcmlwdGlvbihzcGFuKTtcblxuICAgICAgICAgICAgICBjb25zdCBvcCA9IGRlZmluZWRPcCB8fCBpbmZlcnJlZE9wO1xuICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBkZWZpbmVkU291cmNlIHx8IGluZmVycmVkU291cmNlO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7IC4uLmluZmVycmVkRGF0YSwgLi4uZ2V0RGF0YShzcGFuKSB9O1xuXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb3AsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgIG9yaWdpbixcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlbW92ZSBjdXN0b20gYHNlbnRyeS5gIGF0dHJpYnV0ZXMgd2UgZG8gbm90IG5lZWQgdG8gc2VuZC5cbiAgICAgICAgICAgICAqIFRoZXNlIGFyZSBtb3JlIGNhcnJpZXIgYXR0cmlidXRlcyB3ZSB1c2UgaW5zaWRlIG9mIHRoZSBTREssIHdlIGRvIG5vdCBuZWVkIHRvIHNlbmQgdGhlbSB0byB0aGUgQVBJLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVTZW50cnlBdHRyaWJ1dGVzKGRhdGEpIHtcbiAgICAgICAgICAgICAgY29uc3QgY2xlYW5lZERhdGEgPSB7IC4uLmRhdGEgfTtcblxuICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZHluYW1pYy1kZWxldGUgKi9cbiAgICAgICAgICAgICAgZGVsZXRlIGNsZWFuZWREYXRhW2NvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURV07XG4gICAgICAgICAgICAgIGRlbGV0ZSBjbGVhbmVkRGF0YVtTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1BBUkVOVF9JU19SRU1PVEVdO1xuICAgICAgICAgICAgICBkZWxldGUgY2xlYW5lZERhdGFbY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0NVU1RPTV9TUEFOX05BTUVdO1xuICAgICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZSAqL1xuXG4gICAgICAgICAgICAgIHJldHVybiBjbGVhbmVkRGF0YTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RGF0YShzcGFuKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBzcGFuLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcblxuICAgICAgICAgICAgICBpZiAoc3Bhbi5raW5kICE9PSBhcGkuU3BhbktpbmQuSU5URVJOQUwpIHtcbiAgICAgICAgICAgICAgICBkYXRhWydvdGVsLmtpbmQnXSA9IGFwaS5TcGFuS2luZFtzcGFuLmtpbmRdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgIGNvbnN0IG1heWJlSHR0cFN0YXR1c0NvZGVBdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW1NFTUFUVFJTX0hUVFBfU1RBVFVTX0NPREVdO1xuICAgICAgICAgICAgICBpZiAobWF5YmVIdHRwU3RhdHVzQ29kZUF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgIGRhdGFbQVRUUl9IVFRQX1JFU1BPTlNFX1NUQVRVU19DT0RFXSA9IG1heWJlSHR0cFN0YXR1c0NvZGVBdHRyaWJ1dGUgO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSBnZXRSZXF1ZXN0U3BhbkRhdGEoc3Bhbik7XG5cbiAgICAgICAgICAgICAgaWYgKHJlcXVlc3REYXRhLnVybCkge1xuICAgICAgICAgICAgICAgIGRhdGEudXJsID0gcmVxdWVzdERhdGEudXJsO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHJlcXVlc3REYXRhWydodHRwLnF1ZXJ5J10pIHtcbiAgICAgICAgICAgICAgICBkYXRhWydodHRwLnF1ZXJ5J10gPSByZXF1ZXN0RGF0YVsnaHR0cC5xdWVyeSddLnNsaWNlKDEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyZXF1ZXN0RGF0YVsnaHR0cC5mcmFnbWVudCddKSB7XG4gICAgICAgICAgICAgICAgZGF0YVsnaHR0cC5mcmFnbWVudCddID0gcmVxdWVzdERhdGFbJ2h0dHAuZnJhZ21lbnQnXS5zbGljZSgxKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBfb3B0aW9uYWxDaGFpbiQxKG9wcykgeyBsZXQgbGFzdEFjY2Vzc0xIUyA9IHVuZGVmaW5lZDsgbGV0IHZhbHVlID0gb3BzWzBdOyBsZXQgaSA9IDE7IHdoaWxlIChpIDwgb3BzLmxlbmd0aCkgeyBjb25zdCBvcCA9IG9wc1tpXTsgY29uc3QgZm4gPSBvcHNbaSArIDFdOyBpICs9IDI7IGlmICgob3AgPT09ICdvcHRpb25hbEFjY2VzcycgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSAmJiB2YWx1ZSA9PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gaWYgKG9wID09PSAnYWNjZXNzJyB8fCBvcCA9PT0gJ29wdGlvbmFsQWNjZXNzJykgeyBsYXN0QWNjZXNzTEhTID0gdmFsdWU7IHZhbHVlID0gZm4odmFsdWUpOyB9IGVsc2UgaWYgKG9wID09PSAnY2FsbCcgfHwgb3AgPT09ICdvcHRpb25hbENhbGwnKSB7IHZhbHVlID0gZm4oKC4uLmFyZ3MpID0+IHZhbHVlLmNhbGwobGFzdEFjY2Vzc0xIUywgLi4uYXJncykpOyBsYXN0QWNjZXNzTEhTID0gdW5kZWZpbmVkOyB9IH0gcmV0dXJuIHZhbHVlOyB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uU3BhblN0YXJ0KHNwYW4sIHBhcmVudENvbnRleHQpIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHJlbGlhYmxlIHdheSB0byBnZXQgdGhlIHBhcmVudCBzcGFuIC0gYmVjYXVzZSB0aGlzIGlzIGV4YWN0bHkgaG93IHRoZSBwYXJlbnQgaXMgaWRlbnRpZmllZCBpbiB0aGUgT1RFTCBTREtcbiAgICAgICAgICAgICAgY29uc3QgcGFyZW50U3BhbiA9IGFwaS50cmFjZS5nZXRTcGFuKHBhcmVudENvbnRleHQpO1xuXG4gICAgICAgICAgICAgIGxldCBzY29wZXMgPSBnZXRTY29wZXNGcm9tQ29udGV4dChwYXJlbnRDb250ZXh0KTtcblxuICAgICAgICAgICAgICAvLyBXZSBuZWVkIGFjY2VzcyB0byB0aGUgcGFyZW50IHNwYW4gaW4gb3JkZXIgdG8gYmUgYWJsZSB0byBtb3ZlIHVwIHRoZSBzcGFuIHRyZWUgZm9yIGJyZWFkY3J1bWJzXG4gICAgICAgICAgICAgIGlmIChwYXJlbnRTcGFuICYmICFwYXJlbnRTcGFuLnNwYW5Db250ZXh0KCkuaXNSZW1vdGUpIHtcbiAgICAgICAgICAgICAgICBjb3JlLmFkZENoaWxkU3BhblRvU3BhbihwYXJlbnRTcGFuLCBzcGFuKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIFdlIG5lZWQgdGhpcyBpbiB0aGUgc3BhbiBleHBvcnRlclxuICAgICAgICAgICAgICBpZiAocGFyZW50U3BhbiAmJiBwYXJlbnRTcGFuLnNwYW5Db250ZXh0KCkuaXNSZW1vdGUpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1BBUkVOVF9JU19SRU1PVEUsIHRydWUpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gVGhlIHJvb3QgY29udGV4dCBkb2VzIG5vdCBoYXZlIHNjb3BlcyBzdG9yZWQsIHNvIHdlIGNoZWNrIGZvciB0aGlzIHNwZWNpZmljYWxseVxuICAgICAgICAgICAgICAvLyBBcyBmYWxsYmFjayB3ZSBhdHRhY2ggdGhlIGdsb2JhbCBzY29wZXNcbiAgICAgICAgICAgICAgaWYgKHBhcmVudENvbnRleHQgPT09IGFwaS5ST09UX0NPTlRFWFQpIHtcbiAgICAgICAgICAgICAgICBzY29wZXMgPSB7XG4gICAgICAgICAgICAgICAgICBzY29wZTogY29yZS5nZXREZWZhdWx0Q3VycmVudFNjb3BlKCksXG4gICAgICAgICAgICAgICAgICBpc29sYXRpb25TY29wZTogY29yZS5nZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUoKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0aGUgc2NvcGUgYXQgdGltZSBvZiBzcGFuIGNyZWF0aW9uIGluIG9yZGVyIHRvIGFwcGx5IGl0IHRvIHRoZSBldmVudCB3aGVuIHRoZSBzcGFuIGlzIGZpbmlzaGVkXG4gICAgICAgICAgICAgIGlmIChzY29wZXMpIHtcbiAgICAgICAgICAgICAgICBjb3JlLnNldENhcHR1cmVkU2NvcGVzT25TcGFuKHNwYW4sIHNjb3Blcy5zY29wZSwgc2NvcGVzLmlzb2xhdGlvblNjb3BlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvcmUubG9nU3BhblN0YXJ0KHNwYW4pO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG4gICAgICAgICAgICAgIF9vcHRpb25hbENoYWluJDEoW2NsaWVudCwgJ29wdGlvbmFsQWNjZXNzJywgXyA9PiBfLmVtaXQsICdjYWxsJywgXzIgPT4gXzIoJ3NwYW5TdGFydCcsIHNwYW4pXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uU3BhbkVuZChzcGFuKSB7XG4gICAgICAgICAgICAgIGNvcmUubG9nU3BhbkVuZChzcGFuKTtcblxuICAgICAgICAgICAgICBjb25zdCBjbGllbnQgPSBjb3JlLmdldENsaWVudCgpO1xuICAgICAgICAgICAgICBfb3B0aW9uYWxDaGFpbiQxKFtjbGllbnQsICdvcHRpb25hbEFjY2VzcycsIF8zID0+IF8zLmVtaXQsICdjYWxsJywgXzQgPT4gXzQoJ3NwYW5FbmQnLCBzcGFuKV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnZlcnRzIE9wZW5UZWxlbWV0cnkgU3BhbnMgdG8gU2VudHJ5IFNwYW5zIGFuZCBzZW5kcyB0aGVtIHRvIFNlbnRyeSB2aWFcbiAgICAgICAgICAgICAqIHRoZSBTZW50cnkgU0RLLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjbGFzcyBTZW50cnlTcGFuUHJvY2Vzc29yICB7XG5cbiAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBzZXRJc1NldHVwKCdTZW50cnlTcGFuUHJvY2Vzc29yJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwb3J0ZXIgPSBuZXcgU2VudHJ5U3BhbkV4cG9ydGVyKG9wdGlvbnMpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgYXN5bmMgZm9yY2VGbHVzaCgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9leHBvcnRlci5mbHVzaCgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAqIEBpbmhlcml0RG9jXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgYXN5bmMgc2h1dGRvd24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwb3J0ZXIuY2xlYXIoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBAaW5oZXJpdERvY1xuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgIG9uU3RhcnQoc3BhbiwgcGFyZW50Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIG9uU3BhblN0YXJ0KHNwYW4sIHBhcmVudENvbnRleHQpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgICAgICAgICAgICBvbkVuZChzcGFuKSB7XG4gICAgICAgICAgICAgICAgb25TcGFuRW5kKHNwYW4pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZXhwb3J0ZXIuZXhwb3J0KHNwYW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBjdXN0b20gT1RFTCBzYW1wbGVyIHRoYXQgdXNlcyBTZW50cnkgc2FtcGxpbmcgcmF0ZXMgdG8gbWFrZSBpdHMgZGVjaXNpb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2xhc3MgU2VudHJ5U2FtcGxlciAge1xuXG4gICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XG4gICAgICAgICAgICAgICAgc2V0SXNTZXR1cCgnU2VudHJ5U2FtcGxlcicpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLyoqIEBpbmhlcml0RG9jICovXG4gICAgICAgICAgICAgICBzaG91bGRTYW1wbGUoXG4gICAgICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgICAgICB0cmFjZUlkLFxuICAgICAgICAgICAgICAgIHNwYW5OYW1lLFxuICAgICAgICAgICAgICAgIHNwYW5LaW5kLFxuICAgICAgICAgICAgICAgIHNwYW5BdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIF9saW5rcyxcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX2NsaWVudC5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRTcGFuID0gZ2V0VmFsaWRTcGFuKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudENvbnRleHQgPSBjb3JlLl9vcHRpb25hbENoYWluKFtwYXJlbnRTcGFuLCAnb3B0aW9uYWxBY2Nlc3MnLCBfID0+IF8uc3BhbkNvbnRleHQsICdjYWxsJywgXzIgPT4gXzIoKV0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjb3JlLmhhc1RyYWNpbmdFbmFibGVkKG9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gd3JhcFNhbXBsaW5nRGVjaXNpb24oeyBkZWNpc2lvbjogdW5kZWZpbmVkLCBjb250ZXh0LCBzcGFuQXR0cmlidXRlcyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBgQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EYCBpcyB0aGUgbmV3IGF0dHJpYnV0ZSwgYnV0IHdlIHN0aWxsIHN1cHBvcnQgdGhlIG9sZCBvbmUsIGBTRU1BVFRSU19IVFRQX01FVEhPRGAsIGZvciBub3cuXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgICAgY29uc3QgbWF5YmVTcGFuSHR0cE1ldGhvZCA9IHNwYW5BdHRyaWJ1dGVzW1NFTUFUVFJTX0hUVFBfTUVUSE9EXSB8fCBzcGFuQXR0cmlidXRlc1tBVFRSX0hUVFBfUkVRVUVTVF9NRVRIT0RdO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGh0dHAuY2xpZW50IHNwYW4gdGhhdCBoYXMgbm8gbG9jYWwgcGFyZW50LCB3ZSBuZXZlciB3YW50IHRvIHNhbXBsZSBpdFxuICAgICAgICAgICAgICAgIC8vIGJ1dCB3ZSB3YW50IHRvIGxlYXZlIGRvd25zdHJlYW0gc2FtcGxpbmcgZGVjaXNpb25zIHVwIHRvIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICBpZiAoc3BhbktpbmQgPT09IGFwaS5TcGFuS2luZC5DTElFTlQgJiYgbWF5YmVTcGFuSHR0cE1ldGhvZCAmJiAoIXBhcmVudFNwYW4gfHwgY29yZS5fb3B0aW9uYWxDaGFpbihbcGFyZW50Q29udGV4dCwgJ29wdGlvbmFsQWNjZXNzJywgXzMgPT4gXzMuaXNSZW1vdGVdKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB3cmFwU2FtcGxpbmdEZWNpc2lvbih7IGRlY2lzaW9uOiB1bmRlZmluZWQsIGNvbnRleHQsIHNwYW5BdHRyaWJ1dGVzIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFNhbXBsZWQgPSBwYXJlbnRTcGFuID8gZ2V0UGFyZW50U2FtcGxlZChwYXJlbnRTcGFuLCB0cmFjZUlkLCBzcGFuTmFtZSkgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICAvLyBXZSB3YW50IHRvIHBhc3MgdGhlIGluZmVycmVkIG5hbWUgJiBhdHRyaWJ1dGVzIHRvIHRoZSBzYW1wbGVyIG1ldGhvZFxuICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBpbmZlcnJlZFNwYW5OYW1lLFxuICAgICAgICAgICAgICAgICAgZGF0YTogaW5mZXJyZWRBdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgb3AsXG4gICAgICAgICAgICAgICAgfSA9IGluZmVyU3BhbkRhdGEoc3Bhbk5hbWUsIHNwYW5BdHRyaWJ1dGVzLCBzcGFuS2luZCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBtZXJnZWRBdHRyaWJ1dGVzID0ge1xuICAgICAgICAgICAgICAgICAgLi4uaW5mZXJyZWRBdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgLi4uc3BhbkF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChvcCkge1xuICAgICAgICAgICAgICAgICAgbWVyZ2VkQXR0cmlidXRlc1tjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1BdID0gb3A7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgbXV0YWJsZVNhbXBsaW5nRGVjaXNpb24gPSB7IGRlY2lzaW9uOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fY2xpZW50LmVtaXQoXG4gICAgICAgICAgICAgICAgICAnYmVmb3JlU2FtcGxpbmcnLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzcGFuQXR0cmlidXRlczogbWVyZ2VkQXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgICAgc3Bhbk5hbWU6IGluZmVycmVkU3Bhbk5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFNhbXBsZWQ6IHBhcmVudFNhbXBsZWQsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbnRleHQ6IHBhcmVudENvbnRleHQsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgbXV0YWJsZVNhbXBsaW5nRGVjaXNpb24sXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoIW11dGFibGVTYW1wbGluZ0RlY2lzaW9uLmRlY2lzaW9uKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gd3JhcFNhbXBsaW5nRGVjaXNpb24oeyBkZWNpc2lvbjogdW5kZWZpbmVkLCBjb250ZXh0LCBzcGFuQXR0cmlidXRlcyB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBbc2FtcGxlZCwgc2FtcGxlUmF0ZV0gPSBjb3JlLnNhbXBsZVNwYW4ob3B0aW9ucywge1xuICAgICAgICAgICAgICAgICAgbmFtZTogaW5mZXJyZWRTcGFuTmFtZSxcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IG1lcmdlZEF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbkNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaW5mZXJyZWRTcGFuTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50U2FtcGxlZCxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBwYXJlbnRTYW1wbGVkLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAgICAgICAgICAgICAgIFtjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEVdOiBzYW1wbGVSYXRlLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb25zdCBtZXRob2QgPSBgJHttYXliZVNwYW5IdHRwTWV0aG9kfWAudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSAnT1BUSU9OUycgfHwgbWV0aG9kID09PSAnSEVBRCcpIHtcbiAgICAgICAgICAgICAgICAgIERFQlVHX0JVSUxEJDEgJiYgY29yZS5sb2dnZXIubG9nKGBbVHJhY2luZ10gTm90IHNhbXBsaW5nIHNwYW4gYmVjYXVzZSBIVFRQIG1ldGhvZCBpcyAnJHttZXRob2R9JyBmb3IgJHtzcGFuTmFtZX1gKTtcblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4ud3JhcFNhbXBsaW5nRGVjaXNpb24oeyBkZWNpc2lvbjogU2FtcGxpbmdEZWNpc2lvbi5OT1RfUkVDT1JELCBjb250ZXh0LCBzcGFuQXR0cmlidXRlcyB9KSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFzYW1wbGVkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi53cmFwU2FtcGxpbmdEZWNpc2lvbih7IGRlY2lzaW9uOiBTYW1wbGluZ0RlY2lzaW9uLk5PVF9SRUNPUkQsIGNvbnRleHQsIHNwYW5BdHRyaWJ1dGVzIH0pLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIC4uLndyYXBTYW1wbGluZ0RlY2lzaW9uKHsgZGVjaXNpb246IFNhbXBsaW5nRGVjaXNpb24uUkVDT1JEX0FORF9TQU1QTEVELCBjb250ZXh0LCBzcGFuQXR0cmlidXRlcyB9KSxcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8qKiBSZXR1cm5zIHRoZSBzYW1wbGVyIG5hbWUgb3Igc2hvcnQgZGVzY3JpcHRpb24gd2l0aCB0aGUgY29uZmlndXJhdGlvbi4gKi9cbiAgICAgICAgICAgICAgIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnU2VudHJ5U2FtcGxlcic7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UGFyZW50UmVtb3RlU2FtcGxlZChwYXJlbnRTcGFuKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHRyYWNlSWQgPSBwYXJlbnRTcGFuLnNwYW5Db250ZXh0KCkudHJhY2VJZDtcbiAgICAgICAgICAgICAgY29uc3QgdHJhY2VwYXJlbnREYXRhID0gZ2V0UHJvcGFnYXRpb25Db250ZXh0RnJvbVNwYW4ocGFyZW50U3Bhbik7XG5cbiAgICAgICAgICAgICAgLy8gT25seSBpbmhlcml0IHNhbXBsZWQgaWYgYHRyYWNlSWRgIGlzIHRoZSBzYW1lXG4gICAgICAgICAgICAgIHJldHVybiB0cmFjZXBhcmVudERhdGEgJiYgdHJhY2VJZCA9PT0gdHJhY2VwYXJlbnREYXRhLnRyYWNlSWQgPyB0cmFjZXBhcmVudERhdGEuc2FtcGxlZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UGFyZW50U2FtcGxlZChwYXJlbnRTcGFuLCB0cmFjZUlkLCBzcGFuTmFtZSkge1xuICAgICAgICAgICAgICBjb25zdCBwYXJlbnRDb250ZXh0ID0gcGFyZW50U3Bhbi5zcGFuQ29udGV4dCgpO1xuXG4gICAgICAgICAgICAgIC8vIE9ubHkgaW5oZXJpdCBzYW1wbGUgcmF0ZSBpZiBgdHJhY2VJZGAgaXMgdGhlIHNhbWVcbiAgICAgICAgICAgICAgLy8gTm90ZSBmb3IgdGVzdGluZzogYGlzU3BhbkNvbnRleHRWYWxpZCgpYCBjaGVja3MgdGhlIGZvcm1hdCBvZiB0aGUgdHJhY2VJZC9zcGFuSWQsIHNvIHdlIG5lZWQgdG8gcGFzcyB2YWxpZCBvbmVzXG4gICAgICAgICAgICAgIGlmIChhcGkuaXNTcGFuQ29udGV4dFZhbGlkKHBhcmVudENvbnRleHQpICYmIHBhcmVudENvbnRleHQudHJhY2VJZCA9PT0gdHJhY2VJZCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRDb250ZXh0LmlzUmVtb3RlKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRTYW1wbGVkID0gZ2V0UGFyZW50UmVtb3RlU2FtcGxlZChwYXJlbnRTcGFuKTtcbiAgICAgICAgICAgICAgICAgIERFQlVHX0JVSUxEJDEgJiZcbiAgICAgICAgICAgICAgICAgICAgY29yZS5sb2dnZXIubG9nKGBbVHJhY2luZ10gSW5oZXJpdGluZyByZW1vdGUgcGFyZW50J3Mgc2FtcGxlZCBkZWNpc2lvbiBmb3IgJHtzcGFuTmFtZX06ICR7cGFyZW50U2FtcGxlZH1gKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRTYW1wbGVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFNhbXBsZWQgPSBnZXRTYW1wbGluZ0RlY2lzaW9uKHBhcmVudENvbnRleHQpO1xuICAgICAgICAgICAgICAgIERFQlVHX0JVSUxEJDEgJiYgY29yZS5sb2dnZXIubG9nKGBbVHJhY2luZ10gSW5oZXJpdGluZyBwYXJlbnQncyBzYW1wbGVkIGRlY2lzaW9uIGZvciAke3NwYW5OYW1lfTogJHtwYXJlbnRTYW1wbGVkfWApO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRTYW1wbGVkO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXcmFwIGEgc2FtcGxpbmcgZGVjaXNpb24gd2l0aCBkYXRhIHRoYXQgU2VudHJ5IG5lZWRzIHRvIHdvcmsgcHJvcGVybHkgd2l0aCBpdC5cbiAgICAgICAgICAgICAqIElmIHlvdSBwYXNzIGBkZWNpc2lvbjogdW5kZWZpbmVkYCwgaXQgd2lsbCBiZSB0cmVhdGVkIGFzIGBOT1RfUkVDT1JESU5HYCwgYnV0IGluIGNvbnRyYXN0IHRvIHBhc3NpbmcgYE5PVF9SRUNPUkRJTkdgXG4gICAgICAgICAgICAgKiBpdCB3aWxsIG5vdCBwcm9wYWdhdGUgdGhpcyBkZWNpc2lvbiB0byBkb3duc3RyZWFtIFNlbnRyeSBTREtzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiB3cmFwU2FtcGxpbmdEZWNpc2lvbih7XG4gICAgICAgICAgICAgIGRlY2lzaW9uLFxuICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICBzcGFuQXR0cmlidXRlcyxcbiAgICAgICAgICAgIH0pIHtcbiAgICAgICAgICAgICAgY29uc3QgdHJhY2VTdGF0ZSA9IGdldEJhc2VUcmFjZVN0YXRlKGNvbnRleHQsIHNwYW5BdHRyaWJ1dGVzKTtcblxuICAgICAgICAgICAgICAvLyBJZiB0aGUgZGVjaXNpb24gaXMgdW5kZWZpbmVkLCB3ZSB0cmVhdCBpdCBhcyBOT1RfUkVDT1JESU5HLCBidXQgd2UgZG9uJ3QgcHJvcGFnYXRlIHRoaXMgZGVjaXNpb24gdG8gZG93bnN0cmVhbSBTREtzXG4gICAgICAgICAgICAgIC8vIFdoaWNoIGlzIGRvbmUgYnkgbm90IHNldHRpbmcgYFNFTlRSWV9UUkFDRV9TVEFURV9TQU1QTEVEX05PVF9SRUNPUkRJTkdgIHRyYWNlU3RhdGVcbiAgICAgICAgICAgICAgaWYgKGRlY2lzaW9uID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRlY2lzaW9uOiBTYW1wbGluZ0RlY2lzaW9uLk5PVF9SRUNPUkQsIHRyYWNlU3RhdGUgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChkZWNpc2lvbiA9PT0gU2FtcGxpbmdEZWNpc2lvbi5OT1RfUkVDT1JEKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGVjaXNpb24sIHRyYWNlU3RhdGU6IHRyYWNlU3RhdGUuc2V0KFNFTlRSWV9UUkFDRV9TVEFURV9TQU1QTEVEX05PVF9SRUNPUkRJTkcsICcxJykgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiB7IGRlY2lzaW9uLCB0cmFjZVN0YXRlIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEJhc2VUcmFjZVN0YXRlKGNvbnRleHQsIHNwYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBhcmVudFNwYW4gPSBhcGkudHJhY2UuZ2V0U3Bhbihjb250ZXh0KTtcbiAgICAgICAgICAgICAgY29uc3QgcGFyZW50Q29udGV4dCA9IGNvcmUuX29wdGlvbmFsQ2hhaW4oW3BhcmVudFNwYW4sICdvcHRpb25hbEFjY2VzcycsIF80ID0+IF80LnNwYW5Db250ZXh0LCAnY2FsbCcsIF81ID0+IF81KCldKTtcblxuICAgICAgICAgICAgICBsZXQgdHJhY2VTdGF0ZSA9IGNvcmUuX29wdGlvbmFsQ2hhaW4oW3BhcmVudENvbnRleHQsICdvcHRpb25hbEFjY2VzcycsIF82ID0+IF82LnRyYWNlU3RhdGVdKSB8fCBuZXcgVHJhY2VTdGF0ZSgpO1xuXG4gICAgICAgICAgICAgIC8vIFdlIGFsd2F5cyBrZWVwIHRoZSBVUkwgb24gdGhlIHRyYWNlIHN0YXRlLCBzbyB3ZSBjYW4gYWNjZXNzIGl0IGluIHRoZSBwcm9wYWdhdG9yXG4gICAgICAgICAgICAgIC8vIGBBVFRSX1VSTF9GVUxMYCBpcyB0aGUgbmV3IGF0dHJpYnV0ZSwgYnV0IHdlIHN0aWxsIHN1cHBvcnQgdGhlIG9sZCBvbmUsIGBBVFRSX0hUVFBfVVJMYCwgZm9yIG5vdy5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgIGNvbnN0IHVybCA9IHNwYW5BdHRyaWJ1dGVzW1NFTUFUVFJTX0hUVFBfVVJMXSB8fCBzcGFuQXR0cmlidXRlc1tBVFRSX1VSTF9GVUxMXTtcbiAgICAgICAgICAgICAgaWYgKHVybCAmJiB0eXBlb2YgdXJsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRyYWNlU3RhdGUgPSB0cmFjZVN0YXRlLnNldChTRU5UUllfVFJBQ0VfU1RBVEVfVVJMLCB1cmwpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHRyYWNlU3RhdGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogSWYgdGhlIGFjdGl2ZSBzcGFuIGlzIGludmFsaWQsIHdlIHdhbnQgdG8gaWdub3JlIGl0IGFzIHBhcmVudC5cbiAgICAgICAgICAgICAqIFRoaXMgYWxpZ25zIHdpdGggaG93IG90ZWwgdHJhY2VycyBhbmQgZGVmYXVsdCBzYW1wbGVycyBoYW5kbGUgdGhlc2UgY2FzZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZhbGlkU3Bhbihjb250ZXh0KSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNwYW4gPSBhcGkudHJhY2UuZ2V0U3Bhbihjb250ZXh0KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHNwYW4gJiYgYXBpLmlzU3BhbkNvbnRleHRWYWxpZChzcGFuLnNwYW5Db250ZXh0KCkpID8gc3BhbiA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuICAgICAgICAgICAgY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdXaW50ZXJDR0ZldGNoJztcblxuICAgICAgICAgICAgY29uc3QgSEFTX0NMSUVOVF9NQVAgPSBuZXcgV2Vha01hcCgpO1xuXG4gICAgICAgICAgICBjb25zdCBfd2ludGVyQ0dGZXRjaCA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGJyZWFkY3J1bWJzID0gb3B0aW9ucy5icmVhZGNydW1icyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMuYnJlYWRjcnVtYnM7XG4gICAgICAgICAgICAgIGNvbnN0IHNob3VsZENyZWF0ZVNwYW5Gb3JSZXF1ZXN0ID0gb3B0aW9ucy5zaG91bGRDcmVhdGVTcGFuRm9yUmVxdWVzdDtcblxuICAgICAgICAgICAgICBjb25zdCBfY3JlYXRlU3BhblVybE1hcCA9IG5ldyBjb3JlLkxSVU1hcCgxMDApO1xuICAgICAgICAgICAgICBjb25zdCBfaGVhZGVyc1VybE1hcCA9IG5ldyBjb3JlLkxSVU1hcCgxMDApO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHNwYW5zID0ge307XG5cbiAgICAgICAgICAgICAgLyoqIERlY2lkZXMgd2hldGhlciB0byBhdHRhY2ggdHJhY2UgZGF0YSB0byB0aGUgb3V0Z29pbmcgZmV0Y2ggcmVxdWVzdCAqL1xuICAgICAgICAgICAgICBmdW5jdGlvbiBfc2hvdWxkQXR0YWNoVHJhY2VEYXRhKHVybCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWNsaWVudCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudE9wdGlvbnMgPSBjbGllbnQuZ2V0T3B0aW9ucygpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNsaWVudE9wdGlvbnMudHJhY2VQcm9wYWdhdGlvblRhcmdldHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgY2FjaGVkRGVjaXNpb24gPSBfaGVhZGVyc1VybE1hcC5nZXQodXJsKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkRGVjaXNpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZERlY2lzaW9uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGRlY2lzaW9uID0gY29yZS5zdHJpbmdNYXRjaGVzU29tZVBhdHRlcm4odXJsLCBjbGllbnRPcHRpb25zLnRyYWNlUHJvcGFnYXRpb25UYXJnZXRzKTtcbiAgICAgICAgICAgICAgICBfaGVhZGVyc1VybE1hcC5zZXQodXJsLCBkZWNpc2lvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY2lzaW9uO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLyoqIEhlbHBlciB0aGF0IHdyYXBzIHNob3VsZENyZWF0ZVNwYW5Gb3JSZXF1ZXN0IG9wdGlvbiAqL1xuICAgICAgICAgICAgICBmdW5jdGlvbiBfc2hvdWxkQ3JlYXRlU3Bhbih1cmwpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkQ3JlYXRlU3BhbkZvclJlcXVlc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgY2FjaGVkRGVjaXNpb24gPSBfY3JlYXRlU3BhblVybE1hcC5nZXQodXJsKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkRGVjaXNpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZERlY2lzaW9uO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGRlY2lzaW9uID0gc2hvdWxkQ3JlYXRlU3BhbkZvclJlcXVlc3QodXJsKTtcbiAgICAgICAgICAgICAgICBfY3JlYXRlU3BhblVybE1hcC5zZXQodXJsLCBkZWNpc2lvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY2lzaW9uO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgICAgICAgICAgICAgIHNldHVwT25jZSgpIHtcbiAgICAgICAgICAgICAgICAgIGNvcmUuYWRkRmV0Y2hJbnN0cnVtZW50YXRpb25IYW5kbGVyKGhhbmRsZXJEYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjbGllbnQgfHwgIUhBU19DTElFTlRfTUFQLmdldChjbGllbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvcmUuaXNTZW50cnlSZXF1ZXN0VXJsKGhhbmRsZXJEYXRhLmZldGNoRGF0YS51cmwsIGNsaWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb3JlLmluc3RydW1lbnRGZXRjaFJlcXVlc3QoXG4gICAgICAgICAgICAgICAgICAgICAgaGFuZGxlckRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgX3Nob3VsZENyZWF0ZVNwYW4sXG4gICAgICAgICAgICAgICAgICAgICAgX3Nob3VsZEF0dGFjaFRyYWNlRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICBzcGFucyxcbiAgICAgICAgICAgICAgICAgICAgICAnYXV0by5odHRwLndpbnRlcmNnX2ZldGNoJyxcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYnJlYWRjcnVtYnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVCcmVhZGNydW1iKGhhbmRsZXJEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgICAgICAgICAgICAgIEhBU19DTElFTlRfTUFQLnNldChjbGllbnQsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSA7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBzcGFucyBhbmQgYXR0YWNoZXMgdHJhY2luZyBoZWFkZXJzIHRvIGZldGNoIHJlcXVlc3RzIG9uIFdpbnRlckNHIHJ1bnRpbWVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCB3aW50ZXJDR0ZldGNoSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF93aW50ZXJDR0ZldGNoKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQnJlYWRjcnVtYihoYW5kbGVyRGF0YSkge1xuICAgICAgICAgICAgICBjb25zdCB7IHN0YXJ0VGltZXN0YW1wLCBlbmRUaW1lc3RhbXAgfSA9IGhhbmRsZXJEYXRhO1xuXG4gICAgICAgICAgICAgIC8vIFdlIG9ubHkgY2FwdHVyZSBjb21wbGV0ZSBmZXRjaCByZXF1ZXN0c1xuICAgICAgICAgICAgICBpZiAoIWVuZFRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChoYW5kbGVyRGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBoYW5kbGVyRGF0YS5mZXRjaERhdGE7XG4gICAgICAgICAgICAgICAgY29uc3QgaGludCA9IHtcbiAgICAgICAgICAgICAgICAgIGRhdGE6IGhhbmRsZXJEYXRhLmVycm9yLFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IGhhbmRsZXJEYXRhLmFyZ3MsXG4gICAgICAgICAgICAgICAgICBzdGFydFRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICAgIGVuZFRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogJ2ZldGNoJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWw6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdodHRwJyxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBoaW50LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgIC4uLmhhbmRsZXJEYXRhLmZldGNoRGF0YSxcbiAgICAgICAgICAgICAgICAgIHN0YXR1c19jb2RlOiBoYW5kbGVyRGF0YS5yZXNwb25zZSAmJiBoYW5kbGVyRGF0YS5yZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBoaW50ID0ge1xuICAgICAgICAgICAgICAgICAgaW5wdXQ6IGhhbmRsZXJEYXRhLmFyZ3MsXG4gICAgICAgICAgICAgICAgICByZXNwb25zZTogaGFuZGxlckRhdGEucmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICBzdGFydFRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICAgIGVuZFRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGxldmVsID0gY29yZS5nZXRCcmVhZGNydW1iTG9nTGV2ZWxGcm9tSHR0cFN0YXR1c0NvZGUoZGF0YS5zdGF0dXNfY29kZSk7XG5cbiAgICAgICAgICAgICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAnZmV0Y2gnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaHR0cCcsXG4gICAgICAgICAgICAgICAgICAgIGxldmVsLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGhpbnQsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBERUZBVUxUX1RSQU5TUE9SVF9CVUZGRVJfU0laRSA9IDMwO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoaXMgaXMgYSBtb2RpZmllZCBwcm9taXNlIGJ1ZmZlciB0aGF0IGNvbGxlY3RzIHRhc2tzIHVudGlsIGRyYWluIGlzIGNhbGxlZC5cbiAgICAgICAgICAgICAqIFdlIG5lZWQgdGhpcyBpbiB0aGUgZWRnZSBydW50aW1lIGJlY2F1c2UgZWRnZSBmdW5jdGlvbiBpbnZvY2F0aW9ucyBtYXkgbm90IHNoYXJlIEkvTyBvYmplY3RzLCBsaWtlIGZldGNoIHJlcXVlc3RzXG4gICAgICAgICAgICAgKiBhbmQgcmVzcG9uc2VzLCBhbmQgdGhlIG5vcm1hbCBQcm9taXNlQnVmZmVyIGluaGVyZW50bHkgYnVmZmVycyBzdHVmZiBpbmJldHdlZW4gaW5jb21pbmcgcmVxdWVzdHMuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQSBsaW1pdGF0aW9uIHdlIG5lZWQgdG8gYmUgYXdhcmUgb2YgaXMgdGhhdCBERUZBVUxUX1RSQU5TUE9SVF9CVUZGRVJfU0laRSBpcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgcGF5bG9hZHMgdGhlXG4gICAgICAgICAgICAgKiBTREsgY2FuIHNlbmQgZm9yIGEgZ2l2ZW4gZWRnZSBmdW5jdGlvbiBpbnZvY2F0aW9uLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjbGFzcyBJc29sYXRlZFByb21pc2VCdWZmZXIge1xuICAgICAgICAgICAgICAvLyBXZSBqdXN0IGhhdmUgdGhpcyBmaWVsZCBiZWNhdXNlIHRoZSBwcm9taXNlIGJ1ZmZlciBpbnRlcmZhY2UgcmVxdWlyZXMgaXQuXG4gICAgICAgICAgICAgIC8vIElmIHdlIGV2ZXIgcmVtb3ZlIGl0IGZyb20gdGhlIGludGVyZmFjZSB3ZSBzaG91bGQgYWxzbyByZW1vdmUgaXQgaGVyZS5cblxuICAgICAgICAgICAgICAgY29uc3RydWN0b3IoX2J1ZmZlclNpemUgPSBERUZBVUxUX1RSQU5TUE9SVF9CVUZGRVJfU0laRSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJCA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rhc2tQcm9kdWNlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9idWZmZXJTaXplID0gX2J1ZmZlclNpemU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICogQGluaGVyaXRkb2NcbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICBhZGQodGFza1Byb2R1Y2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Rhc2tQcm9kdWNlcnMubGVuZ3RoID49IHRoaXMuX2J1ZmZlclNpemUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgY29yZS5TZW50cnlFcnJvcignTm90IGFkZGluZyBQcm9taXNlIGJlY2F1c2UgYnVmZmVyIGxpbWl0IHdhcyByZWFjaGVkLicpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl90YXNrUHJvZHVjZXJzLnB1c2godGFza1Byb2R1Y2VyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBAaW5oZXJpdGRvY1xuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgIGRyYWluKHRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvbGRUYXNrUHJvZHVjZXJzID0gWy4uLnRoaXMuX3Rhc2tQcm9kdWNlcnNdO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rhc2tQcm9kdWNlcnMgPSBbXTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ICYmIHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgICAgICAgICAgICAgICAvLyBUaGlzIGNhbm5vdCByZWplY3RcbiAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgICAgICBvbGRUYXNrUHJvZHVjZXJzLm1hcCh0YXNrUHJvZHVjZXIgPT5cbiAgICAgICAgICAgICAgICAgICAgICB0YXNrUHJvZHVjZXIoKS50aGVuKG51bGwsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhdGNoIGFsbCBmYWlsZWQgcmVxdWVzdHNcbiAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc29sdmUgdG8gdHJ1ZSBpZiBhbGwgZmV0Y2ggcmVxdWVzdHMgc2V0dGxlZFxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgVHJhbnNwb3J0IHRoYXQgdXNlcyB0aGUgRWRnZSBSdW50aW1lcyBuYXRpdmUgZmV0Y2ggQVBJIHRvIHNlbmQgZXZlbnRzIHRvIFNlbnRyeS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gbWFrZUVkZ2VUcmFuc3BvcnQob3B0aW9ucykge1xuICAgICAgICAgICAgICBmdW5jdGlvbiBtYWtlUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICBib2R5OiByZXF1ZXN0LmJvZHksXG4gICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IG9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMuZmV0Y2hPcHRpb25zLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY29yZS5zdXBwcmVzc1RyYWNpbmcoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKG9wdGlvbnMudXJsLCByZXF1ZXN0T3B0aW9ucykudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd4LXNlbnRyeS1yYXRlLWxpbWl0cyc6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdYLVNlbnRyeS1SYXRlLUxpbWl0cycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3JldHJ5LWFmdGVyJzogcmVzcG9uc2UuaGVhZGVycy5nZXQoJ1JldHJ5LUFmdGVyJyksXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGNvcmUuY3JlYXRlVHJhbnNwb3J0KG9wdGlvbnMsIG1ha2VSZXF1ZXN0LCBuZXcgSXNvbGF0ZWRQcm9taXNlQnVmZmVyKG9wdGlvbnMuYnVmZmVyU2l6ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJldHVybnMgYW4gZW52aXJvbm1lbnQgc2V0dGluZyB2YWx1ZSBkZXRlcm1pbmVkIGJ5IFZlcmNlbCdzIGBWRVJDRUxfRU5WYCBlbnZpcm9ubWVudCB2YXJpYWJsZS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gaXNDbGllbnQgRmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIHRvIHVzZSB0aGUgYE5FWFRfUFVCTElDX2AgcHJlZml4ZWQgdmVyc2lvbiBvZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZlcmNlbEVudihpc0NsaWVudCkge1xuICAgICAgICAgICAgICBjb25zdCB2ZXJjZWxFbnZWYXIgPSBwcm9jZXNzLmVudi5WRVJDRUxfRU5WO1xuICAgICAgICAgICAgICByZXR1cm4gdmVyY2VsRW52VmFyID8gYHZlcmNlbC0ke3ZlcmNlbEVudlZhcn1gIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBBRERfTElTVEVORVJfTUVUSE9EUyA9IFtcbiAgICAgICAgICAgICAgJ2FkZExpc3RlbmVyJyAsXG4gICAgICAgICAgICAgICdvbicgLFxuICAgICAgICAgICAgICAnb25jZScgLFxuICAgICAgICAgICAgICAncHJlcGVuZExpc3RlbmVyJyAsXG4gICAgICAgICAgICAgICdwcmVwZW5kT25jZUxpc3RlbmVyJyAsXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICBjbGFzcyBBYnN0cmFjdEFzeW5jSG9va3NDb250ZXh0TWFuYWdlciAge2NvbnN0cnVjdG9yKCkgeyBBYnN0cmFjdEFzeW5jSG9va3NDb250ZXh0TWFuYWdlci5wcm90b3R5cGUuX19pbml0LmNhbGwodGhpcyk7QWJzdHJhY3RBc3luY0hvb2tzQ29udGV4dE1hbmFnZXIucHJvdG90eXBlLl9faW5pdDIuY2FsbCh0aGlzKTsgfVxuXG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBCaW5kcyBhIHRoZSBjZXJ0YWluIGNvbnRleHQgb3IgdGhlIGFjdGl2ZSBvbmUgdG8gdGhlIHRhcmdldCBmdW5jdGlvbiBhbmQgdGhlbiByZXR1cm5zIHRoZSB0YXJnZXRcbiAgICAgICAgICAgICAgICogQHBhcmFtIGNvbnRleHQgQSBjb250ZXh0IChzcGFuKSB0byBiZSBiaW5kIHRvIHRhcmdldFxuICAgICAgICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IGEgZnVuY3Rpb24gb3IgZXZlbnQgZW1pdHRlci4gV2hlbiB0YXJnZXQgb3Igb25lIG9mIGl0cyBjYWxsYmFja3MgaXMgY2FsbGVkLFxuICAgICAgICAgICAgICAgKiAgdGhlIHByb3ZpZGVkIGNvbnRleHQgd2lsbCBiZSB1c2VkIGFzIHRoZSBhY3RpdmUgY29udGV4dCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBjYWxsLlxuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgYmluZChjb250ZXh0LCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcgJiYgdGFyZ2V0ICE9PSBudWxsICYmICdvbicgaW4gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmluZEV2ZW50RW1pdHRlcihjb250ZXh0LCB0YXJnZXQgKSA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iaW5kRnVuY3Rpb24oY29udGV4dCwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBfYmluZEZ1bmN0aW9uKGNvbnRleHQsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hbmFnZXIgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRXcmFwcGVyID0gZnVuY3Rpb24gKCAuLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbWFuYWdlci53aXRoKGNvbnRleHQsICgpID0+IHRhcmdldC5hcHBseSh0aGlzLCBhcmdzKSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udGV4dFdyYXBwZXIsICdsZW5ndGgnLCB7XG4gICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiB0YXJnZXQubGVuZ3RoLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEl0IGlzbid0IHBvc3NpYmxlIHRvIHRlbGwgVHlwZXNjcmlwdCB0aGF0IGNvbnRleHRXcmFwcGVyIGlzIHRoZSBzYW1lIGFzIFRcbiAgICAgICAgICAgICAgICAgKiBzbyB3ZSBmb3JjZWQgdG8gY2FzdCBhcyBhbnkgaGVyZS5cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0V3JhcHBlciA7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICogQnkgZGVmYXVsdCwgRXZlbnRFbWl0dGVyIGNhbGwgdGhlaXIgY2FsbGJhY2sgd2l0aCB0aGVpciBjb250ZXh0LCB3aGljaCB3ZSBkb1xuICAgICAgICAgICAgICAgKiBub3Qgd2FudCwgaW5zdGVhZCB3ZSB3aWxsIGJpbmQgYSBzcGVjaWZpYyBjb250ZXh0IHRvIGFsbCBjYWxsYmFja3MgdGhhdFxuICAgICAgICAgICAgICAgKiBnbyB0aHJvdWdoIGl0LlxuICAgICAgICAgICAgICAgKiBAcGFyYW0gY29udGV4dCB0aGUgY29udGV4dCB3ZSB3YW50IHRvIGJpbmRcbiAgICAgICAgICAgICAgICogQHBhcmFtIGVlIEV2ZW50RW1pdHRlciBhbiBpbnN0YW5jZSBvZiBFdmVudEVtaXR0ZXIgdG8gcGF0Y2hcbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICBfYmluZEV2ZW50RW1pdHRlcihjb250ZXh0LCBlZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcCA9IHRoaXMuX2dldFBhdGNoTWFwKGVlKTtcbiAgICAgICAgICAgICAgICBpZiAobWFwICE9PSB1bmRlZmluZWQpIHJldHVybiBlZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVQYXRjaE1hcChlZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBwYXRjaCBtZXRob2RzIHRoYXQgYWRkIGEgbGlzdGVuZXIgdG8gcHJvcGFnYXRlIGNvbnRleHRcbiAgICAgICAgICAgICAgICBBRERfTElTVEVORVJfTUVUSE9EUy5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGVlW21ldGhvZE5hbWVdID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIGVlW21ldGhvZE5hbWVdID0gdGhpcy5fcGF0Y2hBZGRMaXN0ZW5lcihlZSwgZWVbbWV0aG9kTmFtZV0sIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIHBhdGNoIG1ldGhvZHMgdGhhdCByZW1vdmUgYSBsaXN0ZW5lclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZWUucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgIGVlLnJlbW92ZUxpc3RlbmVyID0gdGhpcy5fcGF0Y2hSZW1vdmVMaXN0ZW5lcihlZSwgZWUucmVtb3ZlTGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVlLm9mZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgZWUub2ZmID0gdGhpcy5fcGF0Y2hSZW1vdmVMaXN0ZW5lcihlZSwgZWUub2ZmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcGF0Y2ggbWV0aG9kIHRoYXQgcmVtb3ZlIGFsbCBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVlLnJlbW92ZUFsbExpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgZWUucmVtb3ZlQWxsTGlzdGVuZXJzID0gdGhpcy5fcGF0Y2hSZW1vdmVBbGxMaXN0ZW5lcnMoZWUsIGVlLnJlbW92ZUFsbExpc3RlbmVycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBQYXRjaCBtZXRob2RzIHRoYXQgcmVtb3ZlIGEgZ2l2ZW4gbGlzdGVuZXIgc28gdGhhdCB3ZSBtYXRjaCB0aGUgXCJwYXRjaGVkXCJcbiAgICAgICAgICAgICAgICogdmVyc2lvbiBvZiB0aGF0IGxpc3RlbmVyICh0aGUgb25lIHRoYXQgcHJvcGFnYXRlIGNvbnRleHQpLlxuICAgICAgICAgICAgICAgKiBAcGFyYW0gZWUgRXZlbnRFbWl0dGVyIGluc3RhbmNlXG4gICAgICAgICAgICAgICAqIEBwYXJhbSBvcmlnaW5hbCByZWZlcmVuY2UgdG8gdGhlIHBhdGNoZWQgbWV0aG9kXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgX3BhdGNoUmVtb3ZlTGlzdGVuZXIoZWUsIG9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGV4dE1hbmFnZXIgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoIGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gX29wdGlvbmFsQ2hhaW4oW2NvbnRleHRNYW5hZ2VyLCAnYWNjZXNzJywgXyA9PiBfLl9nZXRQYXRjaE1hcCwgJ2NhbGwnLCBfMiA9PiBfMihlZSksICdvcHRpb25hbEFjY2VzcycsIF8zID0+IF8zW2V2ZW50XV0pO1xuICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb25zdCBwYXRjaGVkTGlzdGVuZXIgPSBldmVudHMuZ2V0KGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5jYWxsKHRoaXMsIGV2ZW50LCBwYXRjaGVkTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICogUGF0Y2ggbWV0aG9kcyB0aGF0IHJlbW92ZSBhbGwgbGlzdGVuZXJzIHNvIHdlIHJlbW92ZSBvdXJcbiAgICAgICAgICAgICAgICogaW50ZXJuYWwgcmVmZXJlbmNlcyBmb3IgYSBnaXZlbiBldmVudC5cbiAgICAgICAgICAgICAgICogQHBhcmFtIGVlIEV2ZW50RW1pdHRlciBpbnN0YW5jZVxuICAgICAgICAgICAgICAgKiBAcGFyYW0gb3JpZ2luYWwgcmVmZXJlbmNlIHRvIHRoZSBwYXRjaGVkIG1ldGhvZFxuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgIF9wYXRjaFJlbW92ZUFsbExpc3RlbmVycyhlZSwgb3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0TWFuYWdlciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICggZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcCA9IGNvbnRleHRNYW5hZ2VyLl9nZXRQYXRjaE1hcChlZSk7XG4gICAgICAgICAgICAgICAgICBpZiAobWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0TWFuYWdlci5fY3JlYXRlUGF0Y2hNYXAoZWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hcFtldmVudF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtYXBbZXZlbnRdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAqIFBhdGNoIG1ldGhvZHMgb24gYW4gZXZlbnQgZW1pdHRlciBpbnN0YW5jZSB0aGF0IGNhbiBhZGQgbGlzdGVuZXJzIHNvIHdlXG4gICAgICAgICAgICAgICAqIGNhbiBmb3JjZSB0aGVtIHRvIHByb3BhZ2F0ZSBhIGdpdmVuIGNvbnRleHQuXG4gICAgICAgICAgICAgICAqIEBwYXJhbSBlZSBFdmVudEVtaXR0ZXIgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICogQHBhcmFtIG9yaWdpbmFsIHJlZmVyZW5jZSB0byB0aGUgcGF0Y2hlZCBtZXRob2RcbiAgICAgICAgICAgICAgICogQHBhcmFtIFtjb250ZXh0XSBjb250ZXh0IHRvIHByb3BhZ2F0ZSB3aGVuIGNhbGxpbmcgbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgX3BhdGNoQWRkTGlzdGVuZXIoZWUsIG9yaWdpbmFsLCBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGV4dE1hbmFnZXIgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoIGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgKiBUaGlzIGNoZWNrIGlzIHJlcXVpcmVkIHRvIHByZXZlbnQgZG91YmxlLXdyYXBwaW5nIHRoZSBsaXN0ZW5lci5cbiAgICAgICAgICAgICAgICAgICAqIFRoZSBpbXBsZW1lbnRhdGlvbiBmb3IgZWUub25jZSB3cmFwcyB0aGUgbGlzdGVuZXIgYW5kIGNhbGxzIGVlLm9uLlxuICAgICAgICAgICAgICAgICAgICogV2l0aG91dCB0aGlzIGNoZWNrLCB3ZSB3b3VsZCB3cmFwIHRoYXQgd3JhcHBlZCBsaXN0ZW5lci5cbiAgICAgICAgICAgICAgICAgICAqIFRoaXMgY2F1c2VzIGFuIGlzc3VlIGJlY2F1c2UgZWUucmVtb3ZlTGlzdGVuZXIgZGVwZW5kcyBvbiB0aGUgb25jZVdyYXBwZXJcbiAgICAgICAgICAgICAgICAgICAqIHRvIHByb3Blcmx5IHJlbW92ZSB0aGUgbGlzdGVuZXIuIElmIHdlIHdyYXAgdGhlaXIgd3JhcHBlciwgd2UgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAqIHRoYXQgZGV0ZWN0aW9uLlxuICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICBpZiAoY29udGV4dE1hbmFnZXIuX3dyYXBwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmNhbGwodGhpcywgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGxldCBtYXAgPSBjb250ZXh0TWFuYWdlci5fZ2V0UGF0Y2hNYXAoZWUpO1xuICAgICAgICAgICAgICAgICAgaWYgKG1hcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcCA9IGNvbnRleHRNYW5hZ2VyLl9jcmVhdGVQYXRjaE1hcChlZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBsZXQgbGlzdGVuZXJzID0gbWFwW2V2ZW50XTtcbiAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnMgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgICAgICAgICAgICAgICBtYXBbZXZlbnRdID0gbGlzdGVuZXJzO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY29uc3QgcGF0Y2hlZExpc3RlbmVyID0gY29udGV4dE1hbmFnZXIuYmluZChjb250ZXh0LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAvLyBzdG9yZSBhIHdlYWsgcmVmZXJlbmNlIG9mIHRoZSB1c2VyIGxpc3RlbmVyIHRvIG91cnNcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zZXQobGlzdGVuZXIsIHBhdGNoZWRMaXN0ZW5lcik7XG5cbiAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICogU2VlIGNvbW1lbnQgYXQgdGhlIHN0YXJ0IG9mIHRoaXMgZnVuY3Rpb24gZm9yIHRoZSBleHBsYW5hdGlvbiBvZiB0aGlzIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICBjb250ZXh0TWFuYWdlci5fd3JhcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuY2FsbCh0aGlzLCBldmVudCwgcGF0Y2hlZExpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRNYW5hZ2VyLl93cmFwcGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBfY3JlYXRlUGF0Y2hNYXAoZWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgKGVlIClbdGhpcy5fa090TGlzdGVuZXJzXSA9IG1hcDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBfZ2V0UGF0Y2hNYXAoZWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGVlIClbdGhpcy5fa090TGlzdGVuZXJzXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX19pbml0KCkge3RoaXMuX2tPdExpc3RlbmVycyA9IFN5bWJvbCgnT3RMaXN0ZW5lcnMnKTt9XG4gICAgICAgICAgICAgICBfX2luaXQyKCkge3RoaXMuX3dyYXBwZWQgPSBmYWxzZTt9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsYXNzIEFzeW5jTG9jYWxTdG9yYWdlQ29udGV4dE1hbmFnZXIgZXh0ZW5kcyBBYnN0cmFjdEFzeW5jSG9va3NDb250ZXh0TWFuYWdlciB7XG5cbiAgICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgY29uc3QgTWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUNvbnN0cnVjdG9yID0gKGNvcmUuR0xPQkFMX09CSiApLkFzeW5jTG9jYWxTdG9yYWdlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFNYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlQ29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgIERFQlVHX0JVSUxEICYmXG4gICAgICAgICAgICAgICAgICAgIGNvcmUubG9nZ2VyLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgXCJUcmllZCB0byByZWdpc3RlciBBc3luY0xvY2FsU3RvcmFnZSBhc3luYyBjb250ZXh0IHN0cmF0ZWd5IGluIGEgcnVudGltZSB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBBc3luY0xvY2FsU3RvcmFnZS5cIixcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBWZW5kb3JlZCB0eXBlIHNoZW5hbmlnYW5zXG4gICAgICAgICAgICAgICAgICB0aGlzLl9hc3luY0xvY2FsU3RvcmFnZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0U3RvcmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcnVuKF9zdG9yZSwgY2FsbGJhY2ssIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fYXN5bmNMb2NhbFN0b3JhZ2UgPSBuZXcgTWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUNvbnN0cnVjdG9yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYWN0aXZlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfbnVsbGlzaENvYWxlc2NlKHRoaXMuX2FzeW5jTG9jYWxTdG9yYWdlLmdldFN0b3JlKCksICgpID0+ICggYXBpLlJPT1RfQ09OVEVYVCkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgd2l0aChcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgIGZuLFxuICAgICAgICAgICAgICAgIHRoaXNBcmcsXG4gICAgICAgICAgICAgICAgLi4uYXJnc1xuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IHRoaXNBcmcgPT0gbnVsbCA/IGZuIDogZm4uYmluZCh0aGlzQXJnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYXN5bmNMb2NhbFN0b3JhZ2UucnVuKGNvbnRleHQsIGNiICwgLi4uYXJncyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBlbmFibGUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkaXNhYmxlKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FzeW5jTG9jYWxTdG9yYWdlLmRpc2FibGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBub2RlU3RhY2tQYXJzZXIgPSBjb3JlLmNyZWF0ZVN0YWNrUGFyc2VyKGNvcmUubm9kZVN0YWNrTGluZVBhcnNlcigpKTtcblxuICAgICAgICAgICAgLyoqIEdldCB0aGUgZGVmYXVsdCBpbnRlZ3JhdGlvbnMgZm9yIHRoZSBicm93c2VyIFNESy4gKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldERlZmF1bHRJbnRlZ3JhdGlvbnMob3B0aW9ucykge1xuICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGNvcmUuZGVkdXBlSW50ZWdyYXRpb24oKSxcbiAgICAgICAgICAgICAgICBjb3JlLmluYm91bmRGaWx0ZXJzSW50ZWdyYXRpb24oKSxcbiAgICAgICAgICAgICAgICBjb3JlLmZ1bmN0aW9uVG9TdHJpbmdJbnRlZ3JhdGlvbigpLFxuICAgICAgICAgICAgICAgIGNvcmUubGlua2VkRXJyb3JzSW50ZWdyYXRpb24oKSxcbiAgICAgICAgICAgICAgICB3aW50ZXJDR0ZldGNoSW50ZWdyYXRpb24oKSxcbiAgICAgICAgICAgICAgICAuLi4ob3B0aW9ucy5zZW5kRGVmYXVsdFBpaSA/IFtjb3JlLnJlcXVlc3REYXRhSW50ZWdyYXRpb24oKV0gOiBbXSksXG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKiBJbml0cyB0aGUgU2VudHJ5IE5leHRKUyBTREsgb24gdGhlIEVkZ2UgUnVudGltZS4gKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIGluaXQob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgICAgICAgIHNldE9wZW5UZWxlbWV0cnlDb250ZXh0QXN5bmNDb250ZXh0U3RyYXRlZ3koKTtcblxuICAgICAgICAgICAgICBjb25zdCBzY29wZSA9IGNvcmUuZ2V0Q3VycmVudFNjb3BlKCk7XG4gICAgICAgICAgICAgIHNjb3BlLnVwZGF0ZShvcHRpb25zLmluaXRpYWxTY29wZSk7XG5cbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVmYXVsdEludGVncmF0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kZWZhdWx0SW50ZWdyYXRpb25zID0gZ2V0RGVmYXVsdEludGVncmF0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLmRzbiA9PT0gdW5kZWZpbmVkICYmIHByb2Nlc3MuZW52LlNFTlRSWV9EU04pIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmRzbiA9IHByb2Nlc3MuZW52LlNFTlRSWV9EU047XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy50cmFjZXNTYW1wbGVSYXRlID09PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy5lbnYuU0VOVFJZX1RSQUNFU19TQU1QTEVfUkFURSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYWNlc1NhbXBsZVJhdGUgPSBwYXJzZUZsb2F0KHByb2Nlc3MuZW52LlNFTlRSWV9UUkFDRVNfU0FNUExFX1JBVEUpO1xuICAgICAgICAgICAgICAgIGlmIChpc0Zpbml0ZSh0cmFjZXNTYW1wbGVSYXRlKSkge1xuICAgICAgICAgICAgICAgICAgb3B0aW9ucy50cmFjZXNTYW1wbGVSYXRlID0gdHJhY2VzU2FtcGxlUmF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWxlYXNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXRlY3RlZFJlbGVhc2UgPSBnZXRTZW50cnlSZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGRldGVjdGVkUmVsZWFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICBvcHRpb25zLnJlbGVhc2UgPSBkZXRlY3RlZFJlbGVhc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIElmIHJlbGVhc2UgaXMgbm90IHByb3ZpZGVkLCB0aGVuIHdlIHNob3VsZCBkaXNhYmxlIGF1dG9TZXNzaW9uVHJhY2tpbmdcbiAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgICAgICAgb3B0aW9ucy5hdXRvU2Vzc2lvblRyYWNraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb3B0aW9ucy5lbnZpcm9ubWVudCA9XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5lbnZpcm9ubWVudCB8fCBwcm9jZXNzLmVudi5TRU5UUllfRU5WSVJPTk1FTlQgfHwgZ2V0VmVyY2VsRW52KCkgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLmF1dG9TZXNzaW9uVHJhY2tpbmcgPT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLmRzbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlcHJlY2F0aW9uL2RlcHJlY2F0aW9uXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hdXRvU2Vzc2lvblRyYWNraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyBWZXJjZWxFZGdlQ2xpZW50KHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHN0YWNrUGFyc2VyOiBjb3JlLnN0YWNrUGFyc2VyRnJvbVN0YWNrUGFyc2VyT3B0aW9ucyhvcHRpb25zLnN0YWNrUGFyc2VyIHx8IG5vZGVTdGFja1BhcnNlciksXG4gICAgICAgICAgICAgICAgaW50ZWdyYXRpb25zOiBjb3JlLmdldEludGVncmF0aW9uc1RvU2V0dXAob3B0aW9ucyksXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0OiBvcHRpb25zLnRyYW5zcG9ydCB8fCBtYWtlRWRnZVRyYW5zcG9ydCxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIC8vIFRoZSBjbGllbnQgaXMgb24gdGhlIGN1cnJlbnQgc2NvcGUsIGZyb20gd2hlcmUgaXQgZ2VuZXJhbGx5IGlzIGluaGVyaXRlZFxuICAgICAgICAgICAgICBjb3JlLmdldEN1cnJlbnRTY29wZSgpLnNldENsaWVudChjbGllbnQpO1xuXG4gICAgICAgICAgICAgIGNsaWVudC5pbml0KCk7XG5cbiAgICAgICAgICAgICAgLy8gSWYgdXNlcnMgb3B0LW91dCBvZiB0aGlzLCB0aGV5IF9oYXZlXyB0byBzZXQgdXAgT3BlblRlbGVtZXRyeSB0aGVtc2VsdmVzXG4gICAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIHdheSB0byB1c2UgdGhpcyBTREsgd2l0aG91dCBPcGVuVGVsZW1ldHJ5IVxuICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuc2tpcE9wZW5UZWxlbWV0cnlTZXR1cCkge1xuICAgICAgICAgICAgICAgIHNldHVwT3RlbChjbGllbnQpO1xuICAgICAgICAgICAgICAgIHZhbGlkYXRlT3BlblRlbGVtZXRyeVNldHVwKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBlbmhhbmNlRHNjV2l0aE9wZW5UZWxlbWV0cnlSb290U3Bhbk5hbWUoY2xpZW50KTtcbiAgICAgICAgICAgICAgc2V0dXBFdmVudENvbnRleHRUcmFjZShjbGllbnQpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBjbGllbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlT3BlblRlbGVtZXRyeVNldHVwKCkge1xuICAgICAgICAgICAgICBpZiAoIURFQlVHX0JVSUxEKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3Qgc2V0dXAgPSBvcGVuVGVsZW1ldHJ5U2V0dXBDaGVjaygpO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVkID0gWydTZW50cnlDb250ZXh0TWFuYWdlcicsICdTZW50cnlQcm9wYWdhdG9yJ107XG5cbiAgICAgICAgICAgICAgaWYgKGNvcmUuaGFzVHJhY2luZ0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgIHJlcXVpcmVkLnB1c2goJ1NlbnRyeVNwYW5Qcm9jZXNzb3InKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZvciAoY29uc3QgayBvZiByZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgIGlmICghc2V0dXAuaW5jbHVkZXMoaykpIHtcbiAgICAgICAgICAgICAgICAgIGNvcmUubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgWW91IGhhdmUgdG8gc2V0IHVwIHRoZSAke2t9LiBXaXRob3V0IHRoaXMsIHRoZSBPcGVuVGVsZW1ldHJ5ICYgU2VudHJ5IGludGVncmF0aW9uIHdpbGwgbm90IHdvcmsgcHJvcGVybHkuYCxcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFzZXR1cC5pbmNsdWRlcygnU2VudHJ5U2FtcGxlcicpKSB7XG4gICAgICAgICAgICAgICAgY29yZS5sb2dnZXIud2FybihcbiAgICAgICAgICAgICAgICAgICdZb3UgaGF2ZSB0byBzZXQgdXAgdGhlIFNlbnRyeVNhbXBsZXIuIFdpdGhvdXQgdGhpcywgdGhlIE9wZW5UZWxlbWV0cnkgJiBTZW50cnkgaW50ZWdyYXRpb24gbWF5IHN0aWxsIHdvcmssIGJ1dCBzYW1wbGUgcmF0ZXMgc2V0IGZvciB0aGUgU2VudHJ5IFNESyB3aWxsIG5vdCBiZSByZXNwZWN0ZWQuIElmIHlvdSB1c2UgYSBjdXN0b20gc2FtcGxlciwgbWFrZSBzdXJlIHRvIHVzZSBgd3JhcFNhbXBsaW5nRGVjaXNpb25gLicsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBleHBvcnRlZCBmb3IgdGVzdHNcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc2RvYy9yZXF1aXJlLWpzZG9jXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXR1cE90ZWwoY2xpZW50KSB7XG4gICAgICAgICAgICAgIGlmIChjbGllbnQuZ2V0T3B0aW9ucygpLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBDcmVhdGUgYW5kIGNvbmZpZ3VyZSBOb2RlVHJhY2VyUHJvdmlkZXJcbiAgICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgQmFzaWNUcmFjZXJQcm92aWRlcih7XG4gICAgICAgICAgICAgICAgc2FtcGxlcjogbmV3IFNlbnRyeVNhbXBsZXIoY2xpZW50KSxcbiAgICAgICAgICAgICAgICByZXNvdXJjZTogbmV3IFJlc291cmNlKHtcbiAgICAgICAgICAgICAgICAgIFtBVFRSX1NFUlZJQ0VfTkFNRV06ICdlZGdlJyxcbiAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgICAgICAgICAgICAgICAgW1NFTVJFU0FUVFJTX1NFUlZJQ0VfTkFNRVNQQUNFXTogJ3NlbnRyeScsXG4gICAgICAgICAgICAgICAgICBbQVRUUl9TRVJWSUNFX1ZFUlNJT05dOiBjb3JlLlNES19WRVJTSU9OLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGZvcmNlRmx1c2hUaW1lb3V0TWlsbGlzOiA1MDAsXG4gICAgICAgICAgICAgICAgc3BhblByb2Nlc3NvcnM6IFtcbiAgICAgICAgICAgICAgICAgIG5ldyBTZW50cnlTcGFuUHJvY2Vzc29yKHtcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dDogY2xpZW50LmdldE9wdGlvbnMoKS5tYXhTcGFuV2FpdER1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY29uc3QgU2VudHJ5Q29udGV4dE1hbmFnZXIgPSB3cmFwQ29udGV4dE1hbmFnZXJDbGFzcyhBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyKTtcblxuICAgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBwcm92aWRlclxuICAgICAgICAgICAgICBwcm92aWRlci5yZWdpc3Rlcih7XG4gICAgICAgICAgICAgICAgcHJvcGFnYXRvcjogbmV3IFNlbnRyeVByb3BhZ2F0b3IoKSxcbiAgICAgICAgICAgICAgICBjb250ZXh0TWFuYWdlcjogbmV3IFNlbnRyeUNvbnRleHRNYW5hZ2VyKCksXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNsaWVudC50cmFjZVByb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2V0dXAgdGhlIE9URUwgbG9nZ2VyIHRvIHVzZSBvdXIgb3duIGxvZ2dlci5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyKCkge1xuICAgICAgICAgICAgICBjb25zdCBvdGVsTG9nZ2VyID0gbmV3IFByb3h5KGNvcmUubG9nZ2VyICwge1xuICAgICAgICAgICAgICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWxQcm9wID0gcHJvcCA9PT0gJ3ZlcmJvc2UnID8gJ2RlYnVnJyA6IHByb3A7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBhY3R1YWxQcm9wLCByZWNlaXZlcik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgLy8gRGlzYWJsZSBkaWFnLCB0byBlbnN1cmUgdGhpcyB3b3JrcyBldmVuIGlmIGNhbGxlZCBtdWx0aXBsZSB0aW1lc1xuICAgICAgICAgICAgICBhcGkuZGlhZy5kaXNhYmxlKCk7XG4gICAgICAgICAgICAgIGFwaS5kaWFnLnNldExvZ2dlcihvdGVsTG9nZ2VyLCBhcGkuRGlhZ0xvZ0xldmVsLkRFQlVHKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIGEgcmVsZWFzZSBkeW5hbWljYWxseSBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNlbnRyeVJlbGVhc2UoZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgLy8gQWx3YXlzIHJlYWQgZmlyc3QgYXMgU2VudHJ5IHRha2VzIHRoaXMgYXMgcHJlY2VkZW5jZVxuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuU0VOVFJZX1JFTEVBU0UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbnYuU0VOVFJZX1JFTEVBU0U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBUaGlzIHN1cHBvcnRzIHRoZSB2YXJpYWJsZSB0aGF0IHNlbnRyeS13ZWJwYWNrLXBsdWdpbiBpbmplY3RzXG4gICAgICAgICAgICAgIGlmIChjb3JlLkdMT0JBTF9PQkouU0VOVFJZX1JFTEVBU0UgJiYgY29yZS5HTE9CQUxfT0JKLlNFTlRSWV9SRUxFQVNFLmlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvcmUuR0xPQkFMX09CSi5TRU5UUllfUkVMRUFTRS5pZDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIFRoaXMgbGlzdCBpcyBpbiBhcHByb3hpbWF0ZSBhbHBoYSBvcmRlciwgc2VwYXJhdGVkIGludG8gMyBjYXRlZ29yaWVzOlxuICAgICAgICAgICAgICAvLyAxLiBHaXQgcHJvdmlkZXJzXG4gICAgICAgICAgICAgIC8vIDIuIENJIHByb3ZpZGVycyB3aXRoIHNwZWNpZmljIGVudmlyb25tZW50IHZhcmlhYmxlcyAoaGFzIHRoZSBwcm92aWRlciBuYW1lIGluIHRoZSB2YXJpYWJsZSBuYW1lKVxuICAgICAgICAgICAgICAvLyAzLiBDSSBwcm92aWRlcnMgd2l0aCBnZW5lcmljIGVudmlyb25tZW50IHZhcmlhYmxlcyAoY2hlY2tlZCBmb3IgbGFzdCB0byBwcmV2ZW50IHBvc3NpYmxlIGZhbHNlIHBvc2l0aXZlcylcblxuICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZVJlbGVhc2VOYW1lT2ZHaXRQcm92aWRlciA9XG4gICAgICAgICAgICAgICAgLy8gR2l0SHViIEFjdGlvbnMgLSBodHRwczovL2hlbHAuZ2l0aHViLmNvbS9lbi9hY3Rpb25zL2NvbmZpZ3VyaW5nLWFuZC1tYW5hZ2luZy13b3JrZmxvd3MvdXNpbmctZW52aXJvbm1lbnQtdmFyaWFibGVzI2RlZmF1bHQtZW52aXJvbm1lbnQtdmFyaWFibGVzXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ0dJVEhVQl9TSEEnXSB8fFxuICAgICAgICAgICAgICAgIC8vIEdpdExhYiBDSSAtIGh0dHBzOi8vZG9jcy5naXRsYWIuY29tL2VlL2NpL3ZhcmlhYmxlcy9wcmVkZWZpbmVkX3ZhcmlhYmxlcy5odG1sXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ0NJX01FUkdFX1JFUVVFU1RfU09VUkNFX0JSQU5DSF9TSEEnXSB8fFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydDSV9CVUlMRF9SRUYnXSB8fFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydDSV9DT01NSVRfU0hBJ10gfHxcbiAgICAgICAgICAgICAgICAvLyBCaXRidWNrZXQgLSBodHRwczovL3N1cHBvcnQuYXRsYXNzaWFuLmNvbS9iaXRidWNrZXQtY2xvdWQvZG9jcy92YXJpYWJsZXMtYW5kLXNlY3JldHMvXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ0JJVEJVQ0tFVF9DT01NSVQnXTtcblxuICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZVJlbGVhc2VOYW1lT2ZDaVByb3ZpZGVyc1dpdGhTcGVjaWZpY0VudlZhciA9XG4gICAgICAgICAgICAgICAgLy8gQXBwVmV5b3IgLSBodHRwczovL3d3dy5hcHB2ZXlvci5jb20vZG9jcy9lbnZpcm9ubWVudC12YXJpYWJsZXMvXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ0FQUFZFWU9SX1BVTExfUkVRVUVTVF9IRUFEX0NPTU1JVCddIHx8XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ0FQUFZFWU9SX1JFUE9fQ09NTUlUJ10gfHxcbiAgICAgICAgICAgICAgICAvLyBBV1MgQ29kZUJ1aWxkIC0gaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NvZGVidWlsZC9sYXRlc3QvdXNlcmd1aWRlL2J1aWxkLWVudi1yZWYtZW52LXZhcnMuaHRtbFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydDT0RFQlVJTERfUkVTT0xWRURfU09VUkNFX1ZFUlNJT04nXSB8fFxuICAgICAgICAgICAgICAgIC8vIEFXUyBBbXBsaWZ5IC0gaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2FtcGxpZnkvbGF0ZXN0L3VzZXJndWlkZS9lbnZpcm9ubWVudC12YXJpYWJsZXMuaHRtbFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydBV1NfQ09NTUlUX0lEJ10gfHxcbiAgICAgICAgICAgICAgICAvLyBBenVyZSBQaXBlbGluZXMgLSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9kZXZvcHMvcGlwZWxpbmVzL2J1aWxkL3ZhcmlhYmxlcz92aWV3PWF6dXJlLWRldm9wcyZ0YWJzPXlhbWxcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnQlVJTERfU09VUkNFVkVSU0lPTiddIHx8XG4gICAgICAgICAgICAgICAgLy8gQml0cmlzZSAtIGh0dHBzOi8vZGV2Y2VudGVyLmJpdHJpc2UuaW8vYnVpbGRzL2F2YWlsYWJsZS1lbnZpcm9ubWVudC12YXJpYWJsZXMvXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ0dJVF9DTE9ORV9DT01NSVRfSEFTSCddIHx8XG4gICAgICAgICAgICAgICAgLy8gQnVkZHkgQ0kgLSBodHRwczovL2J1ZGR5LndvcmtzL2RvY3MvcGlwZWxpbmVzL2Vudmlyb25tZW50LXZhcmlhYmxlcyNkZWZhdWx0LWVudmlyb25tZW50LXZhcmlhYmxlc1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydCVUREWV9FWEVDVVRJT05fUkVWSVNJT04nXSB8fFxuICAgICAgICAgICAgICAgIC8vIEJ1aWx0a2l0ZSAtIGh0dHBzOi8vYnVpbGRraXRlLmNvbS9kb2NzL3BpcGVsaW5lcy9lbnZpcm9ubWVudC12YXJpYWJsZXNcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnQlVJTERLSVRFX0NPTU1JVCddIHx8XG4gICAgICAgICAgICAgICAgLy8gQ2lyY2xlQ0kgLSBodHRwczovL2NpcmNsZWNpLmNvbS9kb2NzL3ZhcmlhYmxlcy9cbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnQ0lSQ0xFX1NIQTEnXSB8fFxuICAgICAgICAgICAgICAgIC8vIENpcnJ1cyBDSSAtIGh0dHBzOi8vY2lycnVzLWNpLm9yZy9ndWlkZS93cml0aW5nLXRhc2tzLyNlbnZpcm9ubWVudC12YXJpYWJsZXNcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnQ0lSUlVTX0NIQU5HRV9JTl9SRVBPJ10gfHxcbiAgICAgICAgICAgICAgICAvLyBDb2RlZnJlc2ggLSBodHRwczovL2NvZGVmcmVzaC5pby9kb2NzL2RvY3MvY29kZWZyZXNoLXlhbWwvdmFyaWFibGVzL1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydDRl9SRVZJU0lPTiddIHx8XG4gICAgICAgICAgICAgICAgLy8gQ29kZW1hZ2ljIC0gaHR0cHM6Ly9kb2NzLmNvZGVtYWdpYy5pby95YW1sLWJhc2ljLWNvbmZpZ3VyYXRpb24vZW52aXJvbm1lbnQtdmFyaWFibGVzL1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydDTV9DT01NSVQnXSB8fFxuICAgICAgICAgICAgICAgIC8vIENsb3VkZmxhcmUgUGFnZXMgLSBodHRwczovL2RldmVsb3BlcnMuY2xvdWRmbGFyZS5jb20vcGFnZXMvcGxhdGZvcm0vYnVpbGQtY29uZmlndXJhdGlvbi8jZW52aXJvbm1lbnQtdmFyaWFibGVzXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ0NGX1BBR0VTX0NPTU1JVF9TSEEnXSB8fFxuICAgICAgICAgICAgICAgIC8vIERyb25lIC0gaHR0cHM6Ly9kb2NzLmRyb25lLmlvL3BpcGVsaW5lL2Vudmlyb25tZW50L3JlZmVyZW5jZS9cbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnRFJPTkVfQ09NTUlUX1NIQSddIHx8XG4gICAgICAgICAgICAgICAgLy8gRmxpZ2h0Y29udHJvbCAtIGh0dHBzOi8vd3d3LmZsaWdodGNvbnRyb2wuZGV2L2RvY3MvZ3VpZGVzL2ZsaWdodGNvbnRyb2wvZW52aXJvbm1lbnQtdmFyaWFibGVzI2J1aWx0LWluLWVudmlyb25tZW50LXZhcmlhYmxlc1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydGQ19HSVRfQ09NTUlUX1NIQSddIHx8XG4gICAgICAgICAgICAgICAgLy8gSGVyb2t1ICMxIGh0dHBzOi8vZGV2Y2VudGVyLmhlcm9rdS5jb20vYXJ0aWNsZXMvaGVyb2t1LWNpXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ0hFUk9LVV9URVNUX1JVTl9DT01NSVRfVkVSU0lPTiddIHx8XG4gICAgICAgICAgICAgICAgLy8gSGVyb2t1ICMyIGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcHJvZHVjdC9pbnRlZ3JhdGlvbnMvZGVwbG95bWVudC9oZXJva3UvI2NvbmZpZ3VyZS1yZWxlYXNlc1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydIRVJPS1VfU0xVR19DT01NSVQnXSB8fFxuICAgICAgICAgICAgICAgIC8vIFJhaWx3YXkgLSBodHRwczovL2RvY3MucmFpbHdheS5hcHAvcmVmZXJlbmNlL3ZhcmlhYmxlcyNnaXQtdmFyaWFibGVzXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ1JBSUxXQVlfR0lUX0NPTU1JVF9TSEEnXSB8fFxuICAgICAgICAgICAgICAgIC8vIFJlbmRlciAtIGh0dHBzOi8vcmVuZGVyLmNvbS9kb2NzL2Vudmlyb25tZW50LXZhcmlhYmxlc1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydSRU5ERVJfR0lUX0NPTU1JVCddIHx8XG4gICAgICAgICAgICAgICAgLy8gU2VtYXBob3JlIENJIC0gaHR0cHM6Ly9kb2NzLnNlbWFwaG9yZWNpLmNvbS9jaS1jZC1lbnZpcm9ubWVudC9lbnZpcm9ubWVudC12YXJpYWJsZXNcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnU0VNQVBIT1JFX0dJVF9TSEEnXSB8fFxuICAgICAgICAgICAgICAgIC8vIFRyYXZpc0NJIC0gaHR0cHM6Ly9kb2NzLnRyYXZpcy1jaS5jb20vdXNlci9lbnZpcm9ubWVudC12YXJpYWJsZXMvI2RlZmF1bHQtZW52aXJvbm1lbnQtdmFyaWFibGVzXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ1RSQVZJU19QVUxMX1JFUVVFU1RfU0hBJ10gfHxcbiAgICAgICAgICAgICAgICAvLyBWZXJjZWwgLSBodHRwczovL3ZlcmNlbC5jb20vZG9jcy92Mi9idWlsZC1zdGVwI3N5c3RlbS1lbnZpcm9ubWVudC12YXJpYWJsZXNcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnVkVSQ0VMX0dJVF9DT01NSVRfU0hBJ10gfHxcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnVkVSQ0VMX0dJVEhVQl9DT01NSVRfU0hBJ10gfHxcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnVkVSQ0VMX0dJVExBQl9DT01NSVRfU0hBJ10gfHxcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnVkVSQ0VMX0JJVEJVQ0tFVF9DT01NSVRfU0hBJ10gfHxcbiAgICAgICAgICAgICAgICAvLyBaZWl0IChub3cga25vd24gYXMgVmVyY2VsKVxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydaRUlUX0dJVEhVQl9DT01NSVRfU0hBJ10gfHxcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnWkVJVF9HSVRMQUJfQ09NTUlUX1NIQSddIHx8XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ1pFSVRfQklUQlVDS0VUX0NPTU1JVF9TSEEnXTtcblxuICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZVJlbGVhc2VOYW1lT2ZDaVByb3ZpZGVyc1dpdGhHZW5lcmljRW52VmFyID1cbiAgICAgICAgICAgICAgICAvLyBDbG91ZEJlZXMgQ29kZVNoaXAgLSBodHRwczovL2RvY3MuY2xvdWRiZWVzLmNvbS9kb2NzL2Nsb3VkYmVlcy1jb2Rlc2hpcC9sYXRlc3QvcHJvLWJ1aWxkcy1hbmQtY29uZmlndXJhdGlvbi9lbnZpcm9ubWVudC12YXJpYWJsZXNcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnQ0lfQ09NTUlUX0lEJ10gfHxcbiAgICAgICAgICAgICAgICAvLyBDb29saWZ5IC0gaHR0cHM6Ly9jb29saWZ5LmlvL2RvY3Mva25vd2xlZGdlLWJhc2UvZW52aXJvbm1lbnQtdmFyaWFibGVzXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ1NPVVJDRV9DT01NSVQnXSB8fFxuICAgICAgICAgICAgICAgIC8vIEhlcm9rdSAjMyBodHRwczovL2RldmNlbnRlci5oZXJva3UuY29tL2NoYW5nZWxvZy1pdGVtcy82MzBcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudlsnU09VUkNFX1ZFUlNJT04nXSB8fFxuICAgICAgICAgICAgICAgIC8vIEplbmtpbnMgLSBodHRwczovL3BsdWdpbnMuamVua2lucy5pby9naXQvI2Vudmlyb25tZW50LXZhcmlhYmxlc1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydHSVRfQ09NTUlUJ10gfHxcbiAgICAgICAgICAgICAgICAvLyBOZXRsaWZ5IC0gaHR0cHM6Ly9kb2NzLm5ldGxpZnkuY29tL2NvbmZpZ3VyZS1idWlsZHMvZW52aXJvbm1lbnQtdmFyaWFibGVzLyNidWlsZC1tZXRhZGF0YVxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydDT01NSVRfUkVGJ10gfHxcbiAgICAgICAgICAgICAgICAvLyBUZWFtQ2l0eSAtIGh0dHBzOi8vd3d3LmpldGJyYWlucy5jb20vaGVscC90ZWFtY2l0eS9wcmVkZWZpbmVkLWJ1aWxkLXBhcmFtZXRlcnMuaHRtbFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52WydCVUlMRF9WQ1NfTlVNQkVSJ10gfHxcbiAgICAgICAgICAgICAgICAvLyBXb29kcGVja2VyIENJIC0gaHR0cHM6Ly93b29kcGVja2VyLWNpLm9yZy9kb2NzL3VzYWdlL2Vudmlyb25tZW50XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnZbJ0NJX0NPTU1JVF9TSEEnXTtcblxuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHBvc3NpYmxlUmVsZWFzZU5hbWVPZkdpdFByb3ZpZGVyIHx8XG4gICAgICAgICAgICAgICAgcG9zc2libGVSZWxlYXNlTmFtZU9mQ2lQcm92aWRlcnNXaXRoU3BlY2lmaWNFbnZWYXIgfHxcbiAgICAgICAgICAgICAgICBwb3NzaWJsZVJlbGVhc2VOYW1lT2ZDaVByb3ZpZGVyc1dpdGhHZW5lcmljRW52VmFyIHx8XG4gICAgICAgICAgICAgICAgZmFsbGJhY2tcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXhwb3J0cy5TREtfVkVSU0lPTiA9IGNvcmUuU0RLX1ZFUlNJT047XG4gICAgICAgICAgICBleHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1AgPSBjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1A7XG4gICAgICAgICAgICBleHBvcnRzLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfT1JJR0lOID0gY29yZS5TRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTjtcbiAgICAgICAgICAgIGV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURSA9IGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TQU1QTEVfUkFURTtcbiAgICAgICAgICAgIGV4cG9ydHMuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9TT1VSQ0UgPSBjb3JlLlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFO1xuICAgICAgICAgICAgZXhwb3J0cy5TY29wZSA9IGNvcmUuU2NvcGU7XG4gICAgICAgICAgICBleHBvcnRzLmFkZEJyZWFkY3J1bWIgPSBjb3JlLmFkZEJyZWFkY3J1bWI7XG4gICAgICAgICAgICBleHBvcnRzLmFkZEV2ZW50UHJvY2Vzc29yID0gY29yZS5hZGRFdmVudFByb2Nlc3NvcjtcbiAgICAgICAgICAgIGV4cG9ydHMuYWRkSW50ZWdyYXRpb24gPSBjb3JlLmFkZEludGVncmF0aW9uO1xuICAgICAgICAgICAgZXhwb3J0cy5jYXB0dXJlQ2hlY2tJbiA9IGNvcmUuY2FwdHVyZUNoZWNrSW47XG4gICAgICAgICAgICBleHBvcnRzLmNhcHR1cmVDb25zb2xlSW50ZWdyYXRpb24gPSBjb3JlLmNhcHR1cmVDb25zb2xlSW50ZWdyYXRpb247XG4gICAgICAgICAgICBleHBvcnRzLmNhcHR1cmVFdmVudCA9IGNvcmUuY2FwdHVyZUV2ZW50O1xuICAgICAgICAgICAgZXhwb3J0cy5jYXB0dXJlRXhjZXB0aW9uID0gY29yZS5jYXB0dXJlRXhjZXB0aW9uO1xuICAgICAgICAgICAgZXhwb3J0cy5jYXB0dXJlRmVlZGJhY2sgPSBjb3JlLmNhcHR1cmVGZWVkYmFjaztcbiAgICAgICAgICAgIGV4cG9ydHMuY2FwdHVyZU1lc3NhZ2UgPSBjb3JlLmNhcHR1cmVNZXNzYWdlO1xuICAgICAgICAgICAgZXhwb3J0cy5jbG9zZSA9IGNvcmUuY2xvc2U7XG4gICAgICAgICAgICBleHBvcnRzLmNvbnRpbnVlVHJhY2UgPSBjb3JlLmNvbnRpbnVlVHJhY2U7XG4gICAgICAgICAgICBleHBvcnRzLmNyZWF0ZVRyYW5zcG9ydCA9IGNvcmUuY3JlYXRlVHJhbnNwb3J0O1xuICAgICAgICAgICAgZXhwb3J0cy5kZWJ1Z0ludGVncmF0aW9uID0gY29yZS5kZWJ1Z0ludGVncmF0aW9uO1xuICAgICAgICAgICAgZXhwb3J0cy5kZWR1cGVJbnRlZ3JhdGlvbiA9IGNvcmUuZGVkdXBlSW50ZWdyYXRpb247XG4gICAgICAgICAgICBleHBvcnRzLmV4dHJhRXJyb3JEYXRhSW50ZWdyYXRpb24gPSBjb3JlLmV4dHJhRXJyb3JEYXRhSW50ZWdyYXRpb247XG4gICAgICAgICAgICBleHBvcnRzLmZsdXNoID0gY29yZS5mbHVzaDtcbiAgICAgICAgICAgIGV4cG9ydHMuZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uID0gY29yZS5mdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb247XG4gICAgICAgICAgICBleHBvcnRzLmdldEFjdGl2ZVNwYW4gPSBjb3JlLmdldEFjdGl2ZVNwYW47XG4gICAgICAgICAgICBleHBvcnRzLmdldENsaWVudCA9IGNvcmUuZ2V0Q2xpZW50O1xuICAgICAgICAgICAgZXhwb3J0cy5nZXRDdXJyZW50U2NvcGUgPSBjb3JlLmdldEN1cnJlbnRTY29wZTtcbiAgICAgICAgICAgIGV4cG9ydHMuZ2V0R2xvYmFsU2NvcGUgPSBjb3JlLmdldEdsb2JhbFNjb3BlO1xuICAgICAgICAgICAgZXhwb3J0cy5nZXRJc29sYXRpb25TY29wZSA9IGNvcmUuZ2V0SXNvbGF0aW9uU2NvcGU7XG4gICAgICAgICAgICBleHBvcnRzLmdldFJvb3RTcGFuID0gY29yZS5nZXRSb290U3BhbjtcbiAgICAgICAgICAgIGV4cG9ydHMuZ2V0U3BhbkRlc2NlbmRhbnRzID0gY29yZS5nZXRTcGFuRGVzY2VuZGFudHM7XG4gICAgICAgICAgICBleHBvcnRzLmdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUgPSBjb3JlLmdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGU7XG4gICAgICAgICAgICBleHBvcnRzLmdldFRyYWNlRGF0YSA9IGNvcmUuZ2V0VHJhY2VEYXRhO1xuICAgICAgICAgICAgZXhwb3J0cy5nZXRUcmFjZU1ldGFUYWdzID0gY29yZS5nZXRUcmFjZU1ldGFUYWdzO1xuICAgICAgICAgICAgZXhwb3J0cy5pbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uID0gY29yZS5pbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uO1xuICAgICAgICAgICAgZXhwb3J0cy5pc0luaXRpYWxpemVkID0gY29yZS5pc0luaXRpYWxpemVkO1xuICAgICAgICAgICAgZXhwb3J0cy5sYXN0RXZlbnRJZCA9IGNvcmUubGFzdEV2ZW50SWQ7XG4gICAgICAgICAgICBleHBvcnRzLmxpbmtlZEVycm9yc0ludGVncmF0aW9uID0gY29yZS5saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbjtcbiAgICAgICAgICAgIGV4cG9ydHMubWV0cmljcyA9IGNvcmUubWV0cmljcztcbiAgICAgICAgICAgIGV4cG9ydHMubW9kdWxlTWV0YWRhdGFJbnRlZ3JhdGlvbiA9IGNvcmUubW9kdWxlTWV0YWRhdGFJbnRlZ3JhdGlvbjtcbiAgICAgICAgICAgIGV4cG9ydHMucmVxdWVzdERhdGFJbnRlZ3JhdGlvbiA9IGNvcmUucmVxdWVzdERhdGFJbnRlZ3JhdGlvbjtcbiAgICAgICAgICAgIGV4cG9ydHMucmV3cml0ZUZyYW1lc0ludGVncmF0aW9uID0gY29yZS5yZXdyaXRlRnJhbWVzSW50ZWdyYXRpb247XG4gICAgICAgICAgICBleHBvcnRzLnNldENvbnRleHQgPSBjb3JlLnNldENvbnRleHQ7XG4gICAgICAgICAgICBleHBvcnRzLnNldEN1cnJlbnRDbGllbnQgPSBjb3JlLnNldEN1cnJlbnRDbGllbnQ7XG4gICAgICAgICAgICBleHBvcnRzLnNldEV4dHJhID0gY29yZS5zZXRFeHRyYTtcbiAgICAgICAgICAgIGV4cG9ydHMuc2V0RXh0cmFzID0gY29yZS5zZXRFeHRyYXM7XG4gICAgICAgICAgICBleHBvcnRzLnNldEh0dHBTdGF0dXMgPSBjb3JlLnNldEh0dHBTdGF0dXM7XG4gICAgICAgICAgICBleHBvcnRzLnNldE1lYXN1cmVtZW50ID0gY29yZS5zZXRNZWFzdXJlbWVudDtcbiAgICAgICAgICAgIGV4cG9ydHMuc2V0VGFnID0gY29yZS5zZXRUYWc7XG4gICAgICAgICAgICBleHBvcnRzLnNldFRhZ3MgPSBjb3JlLnNldFRhZ3M7XG4gICAgICAgICAgICBleHBvcnRzLnNldFVzZXIgPSBjb3JlLnNldFVzZXI7XG4gICAgICAgICAgICBleHBvcnRzLnNwYW5Ub0JhZ2dhZ2VIZWFkZXIgPSBjb3JlLnNwYW5Ub0JhZ2dhZ2VIZWFkZXI7XG4gICAgICAgICAgICBleHBvcnRzLnNwYW5Ub0pTT04gPSBjb3JlLnNwYW5Ub0pTT047XG4gICAgICAgICAgICBleHBvcnRzLnNwYW5Ub1RyYWNlSGVhZGVyID0gY29yZS5zcGFuVG9UcmFjZUhlYWRlcjtcbiAgICAgICAgICAgIGV4cG9ydHMuc3RhcnRJbmFjdGl2ZVNwYW4gPSBjb3JlLnN0YXJ0SW5hY3RpdmVTcGFuO1xuICAgICAgICAgICAgZXhwb3J0cy5zdGFydE5ld1RyYWNlID0gY29yZS5zdGFydE5ld1RyYWNlO1xuICAgICAgICAgICAgZXhwb3J0cy5zdGFydFNwYW4gPSBjb3JlLnN0YXJ0U3BhbjtcbiAgICAgICAgICAgIGV4cG9ydHMuc3RhcnRTcGFuTWFudWFsID0gY29yZS5zdGFydFNwYW5NYW51YWw7XG4gICAgICAgICAgICBleHBvcnRzLnN1cHByZXNzVHJhY2luZyA9IGNvcmUuc3VwcHJlc3NUcmFjaW5nO1xuICAgICAgICAgICAgZXhwb3J0cy50cnBjTWlkZGxld2FyZSA9IGNvcmUudHJwY01pZGRsZXdhcmU7XG4gICAgICAgICAgICBleHBvcnRzLndpdGhBY3RpdmVTcGFuID0gY29yZS53aXRoQWN0aXZlU3BhbjtcbiAgICAgICAgICAgIGV4cG9ydHMud2l0aElzb2xhdGlvblNjb3BlID0gY29yZS53aXRoSXNvbGF0aW9uU2NvcGU7XG4gICAgICAgICAgICBleHBvcnRzLndpdGhNb25pdG9yID0gY29yZS53aXRoTW9uaXRvcjtcbiAgICAgICAgICAgIGV4cG9ydHMud2l0aFNjb3BlID0gY29yZS53aXRoU2NvcGU7XG4gICAgICAgICAgICBleHBvcnRzLnpvZEVycm9yc0ludGVncmF0aW9uID0gY29yZS56b2RFcnJvcnNJbnRlZ3JhdGlvbjtcbiAgICAgICAgICAgIGV4cG9ydHMuVmVyY2VsRWRnZUNsaWVudCA9IFZlcmNlbEVkZ2VDbGllbnQ7XG4gICAgICAgICAgICBleHBvcnRzLmdldERlZmF1bHRJbnRlZ3JhdGlvbnMgPSBnZXREZWZhdWx0SW50ZWdyYXRpb25zO1xuICAgICAgICAgICAgZXhwb3J0cy5pbml0ID0gaW5pdDtcbiAgICAgICAgICAgIGV4cG9ydHMud2ludGVyQ0dGZXRjaEludGVncmF0aW9uID0gd2ludGVyQ0dGZXRjaEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiX29wdGlvbmFsQ2hhaW4iLCJfbnVsbGlzaENvYWxlc2NlIiwicmVxdWlyZSIsImdsb2JhbFRoaXMiLCJwZXJmb3JtYW5jZSIsInVuZGVmaW5lZCIsInRpbWVPcmlnaW4iLCJub3ciLCJEYXRlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb3JlIiwiYXBpIiwiX29wdGlvbmFsQ2hhaW4kNiIsIm9wcyIsImxhc3RBY2Nlc3NMSFMiLCJpIiwibGVuZ3RoIiwib3AiLCJmbiIsImFyZ3MiLCJjYWxsIiwiVmVyY2VsRWRnZUNsaWVudCIsIlNlcnZlclJ1bnRpbWVDbGllbnQiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJhcHBseVNka01ldGFkYXRhIiwiX21ldGFkYXRhIiwiY2xpZW50T3B0aW9ucyIsInBsYXRmb3JtIiwicnVudGltZSIsIm5hbWUiLCJzZXJ2ZXJOYW1lIiwicHJvY2VzcyIsImVudiIsIlNFTlRSWV9OQU1FIiwiZmx1c2giLCJ0aW1lb3V0IiwicHJvdmlkZXIiLCJ0cmFjZVByb3ZpZGVyIiwic3BhblByb2Nlc3NvciIsIl8iLCJhY3RpdmVTcGFuUHJvY2Vzc29yIiwiZm9yY2VGbHVzaCIsImdldE9wdGlvbnMiLCJzZW5kQ2xpZW50UmVwb3J0cyIsIl9mbHVzaE91dGNvbWVzIiwiVE1QX0RCX1NZU1RFTSIsIlRNUF9EQl9TVEFURU1FTlQiLCJUTVBfRVhDRVBUSU9OX1RZUEUiLCJUTVBfRVhDRVBUSU9OX01FU1NBR0UiLCJUTVBfRVhDRVBUSU9OX1NUQUNLVFJBQ0UiLCJUTVBfRkFBU19UUklHR0VSIiwiVE1QX0hUVFBfTUVUSE9EIiwiVE1QX0hUVFBfVVJMIiwiVE1QX0hUVFBfVEFSR0VUIiwiVE1QX0hUVFBfU1RBVFVTX0NPREUiLCJUTVBfTUVTU0FHSU5HX1NZU1RFTSIsIlRNUF9SUENfU0VSVklDRSIsIlRNUF9SUENfR1JQQ19TVEFUVVNfQ09ERSIsIlNFTUFUVFJTX0RCX1NZU1RFTSIsIlNFTUFUVFJTX0RCX1NUQVRFTUVOVCIsIlNFTUFUVFJTX0VYQ0VQVElPTl9UWVBFIiwiU0VNQVRUUlNfRVhDRVBUSU9OX01FU1NBR0UiLCJTRU1BVFRSU19FWENFUFRJT05fU1RBQ0tUUkFDRSIsIlNFTUFUVFJTX0ZBQVNfVFJJR0dFUiIsIlNFTUFUVFJTX0hUVFBfTUVUSE9EIiwiU0VNQVRUUlNfSFRUUF9VUkwiLCJTRU1BVFRSU19IVFRQX1RBUkdFVCIsIlNFTUFUVFJTX0hUVFBfU1RBVFVTX0NPREUiLCJTRU1BVFRSU19NRVNTQUdJTkdfU1lTVEVNIiwiU0VNQVRUUlNfUlBDX1NFUlZJQ0UiLCJTRU1BVFRSU19SUENfR1JQQ19TVEFUVVNfQ09ERSIsIlRNUF9QUk9DRVNTX1JVTlRJTUVfTkFNRSIsIlRNUF9TRVJWSUNFX05BTUUiLCJUTVBfU0VSVklDRV9OQU1FU1BBQ0UiLCJUTVBfVEVMRU1FVFJZX1NES19OQU1FIiwiVE1QX1RFTEVNRVRSWV9TREtfTEFOR1VBR0UiLCJUTVBfVEVMRU1FVFJZX1NES19WRVJTSU9OIiwiU0VNUkVTQVRUUlNfUFJPQ0VTU19SVU5USU1FX05BTUUiLCJTRU1SRVNBVFRSU19TRVJWSUNFX05BTUUiLCJTRU1SRVNBVFRSU19TRVJWSUNFX05BTUVTUEFDRSIsIlNFTVJFU0FUVFJTX1RFTEVNRVRSWV9TREtfTkFNRSIsIlNFTVJFU0FUVFJTX1RFTEVNRVRSWV9TREtfTEFOR1VBR0UiLCJTRU1SRVNBVFRSU19URUxFTUVUUllfU0RLX1ZFUlNJT04iLCJUTVBfVEVMRU1FVFJZU0RLTEFOR1VBR0VWQUxVRVNfTk9ERUpTIiwiVEVMRU1FVFJZU0RLTEFOR1VBR0VWQUxVRVNfTk9ERUpTIiwiQVRUUl9IVFRQX1JFUVVFU1RfTUVUSE9EIiwiQVRUUl9IVFRQX1JFU1BPTlNFX1NUQVRVU19DT0RFIiwiQVRUUl9IVFRQX1JPVVRFIiwiQVRUUl9TRVJWSUNFX05BTUUiLCJBVFRSX1NFUlZJQ0VfVkVSU0lPTiIsIkFUVFJfVVJMX0ZVTEwiLCJTVVBQUkVTU19UUkFDSU5HX0tFWSIsImNyZWF0ZUNvbnRleHRLZXkiLCJzdXBwcmVzc1RyYWNpbmckMSIsImNvbnRleHQiLCJzZXRWYWx1ZSIsImlzVHJhY2luZ1N1cHByZXNzZWQiLCJnZXRWYWx1ZSIsIkJBR0dBR0VfS0VZX1BBSVJfU0VQQVJBVE9SIiwiQkFHR0FHRV9QUk9QRVJUSUVTX1NFUEFSQVRPUiIsIkJBR0dBR0VfSVRFTVNfU0VQQVJBVE9SIiwiQkFHR0FHRV9IRUFERVIiLCJCQUdHQUdFX01BWF9OQU1FX1ZBTFVFX1BBSVJTIiwiQkFHR0FHRV9NQVhfUEVSX05BTUVfVkFMVUVfUEFJUlMiLCJCQUdHQUdFX01BWF9UT1RBTF9MRU5HVEgiLCJfX3JlYWQkNSIsIl9fcmVhZCIsIm8iLCJuIiwibSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiciIsImFyIiwiZSIsIm5leHQiLCJkb25lIiwicHVzaCIsImVycm9yIiwic2VyaWFsaXplS2V5UGFpcnMiLCJrZXlQYWlycyIsInJlZHVjZSIsImhWYWx1ZSIsImN1cnJlbnQiLCJnZXRLZXlQYWlycyIsImJhZ2dhZ2UiLCJnZXRBbGxFbnRyaWVzIiwibWFwIiwiX2EiLCJfYiIsImtleSIsImVudHJ5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibWV0YWRhdGEiLCJ0b1N0cmluZyIsInBhcnNlUGFpcktleVZhbHVlIiwidmFsdWVQcm9wcyIsInNwbGl0Iiwia2V5UGFpclBhcnQiLCJzaGlmdCIsInNlcGFyYXRvckluZGV4IiwiaW5kZXhPZiIsImRlY29kZVVSSUNvbXBvbmVudCIsInN1YnN0cmluZyIsInRyaW0iLCJiYWdnYWdlRW50cnlNZXRhZGF0YUZyb21TdHJpbmciLCJqb2luIiwiVzNDQmFnZ2FnZVByb3BhZ2F0b3IiLCJwcm90b3R5cGUiLCJpbmplY3QiLCJjYXJyaWVyIiwic2V0dGVyIiwicHJvcGFnYXRpb24iLCJnZXRCYWdnYWdlIiwiZmlsdGVyIiwicGFpciIsInNsaWNlIiwiaGVhZGVyVmFsdWUiLCJzZXQiLCJleHRyYWN0IiwiZ2V0dGVyIiwiZ2V0IiwiYmFnZ2FnZVN0cmluZyIsIkFycmF5IiwiaXNBcnJheSIsInBhaXJzIiwiZm9yRWFjaCIsImtleVBhaXIiLCJiYWdnYWdlRW50cnkiLCJlbnRyaWVzIiwic2V0QmFnZ2FnZSIsImNyZWF0ZUJhZ2dhZ2UiLCJmaWVsZHMiLCJfX3ZhbHVlcyQzIiwiX192YWx1ZXMiLCJzIiwiVHlwZUVycm9yIiwiX19yZWFkJDQiLCJzYW5pdGl6ZUF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiZV8xIiwib3V0IiwiX2MiLCJfZCIsInZhbCIsImlzQXR0cmlidXRlS2V5IiwiZGlhZyIsIndhcm4iLCJpc0F0dHJpYnV0ZVZhbHVlIiwiZV8xXzEiLCJyZXR1cm4iLCJpc0hvbW9nZW5lb3VzQXR0cmlidXRlVmFsdWVBcnJheSIsImlzVmFsaWRQcmltaXRpdmVBdHRyaWJ1dGVWYWx1ZSIsImFyciIsImVfMiIsInR5cGUiLCJhcnJfMSIsImFycl8xXzEiLCJlbGVtZW50IiwiZV8yXzEiLCJsb2dnaW5nRXJyb3JIYW5kbGVyIiwiZXgiLCJzdHJpbmdpZnlFeGNlcHRpb24iLCJKU09OIiwic3RyaW5naWZ5IiwiZmxhdHRlbkV4Y2VwdGlvbiIsInJlc3VsdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJwcm9wZXJ0eU5hbWUiLCJTdHJpbmciLCJnZXRQcm90b3R5cGVPZiIsImRlbGVnYXRlSGFuZGxlciIsImdsb2JhbEVycm9ySGFuZGxlciIsIlRyYWNlc1NhbXBsZXJWYWx1ZXMiLCJERUZBVUxUX0xJU1RfU0VQQVJBVE9SIiwiRU5WSVJPTk1FTlRfQk9PTEVBTl9LRVlTIiwiaXNFbnZWYXJBQm9vbGVhbiIsIkVOVklST05NRU5UX05VTUJFUlNfS0VZUyIsImlzRW52VmFyQU51bWJlciIsIkVOVklST05NRU5UX0xJU1RTX0tFWVMiLCJpc0VudlZhckFMaXN0IiwiREVGQVVMVF9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlUIiwiSW5maW5pdHkiLCJERUZBVUxUX0FUVFJJQlVURV9DT1VOVF9MSU1JVCIsIkRFRkFVTFRfU1BBTl9BVFRSSUJVVEVfUEVSX0VWRU5UX0NPVU5UX0xJTUlUIiwiREVGQVVMVF9TUEFOX0FUVFJJQlVURV9QRVJfTElOS19DT1VOVF9MSU1JVCIsIkRFRkFVTFRfRU5WSVJPTk1FTlQiLCJPVEVMX1NES19ESVNBQkxFRCIsIkNPTlRBSU5FUl9OQU1FIiwiRUNTX0NPTlRBSU5FUl9NRVRBREFUQV9VUklfVjQiLCJFQ1NfQ09OVEFJTkVSX01FVEFEQVRBX1VSSSIsIkhPU1ROQU1FIiwiS1VCRVJORVRFU19TRVJWSUNFX0hPU1QiLCJOQU1FU1BBQ0UiLCJPVEVMX0JTUF9FWFBPUlRfVElNRU9VVCIsIk9URUxfQlNQX01BWF9FWFBPUlRfQkFUQ0hfU0laRSIsIk9URUxfQlNQX01BWF9RVUVVRV9TSVpFIiwiT1RFTF9CU1BfU0NIRURVTEVfREVMQVkiLCJPVEVMX0JMUlBfRVhQT1JUX1RJTUVPVVQiLCJPVEVMX0JMUlBfTUFYX0VYUE9SVF9CQVRDSF9TSVpFIiwiT1RFTF9CTFJQX01BWF9RVUVVRV9TSVpFIiwiT1RFTF9CTFJQX1NDSEVEVUxFX0RFTEFZIiwiT1RFTF9FWFBPUlRFUl9KQUVHRVJfQUdFTlRfSE9TVCIsIk9URUxfRVhQT1JURVJfSkFFR0VSX0FHRU5UX1BPUlQiLCJPVEVMX0VYUE9SVEVSX0pBRUdFUl9FTkRQT0lOVCIsIk9URUxfRVhQT1JURVJfSkFFR0VSX1BBU1NXT1JEIiwiT1RFTF9FWFBPUlRFUl9KQUVHRVJfVVNFUiIsIk9URUxfRVhQT1JURVJfT1RMUF9FTkRQT0lOVCIsIk9URUxfRVhQT1JURVJfT1RMUF9UUkFDRVNfRU5EUE9JTlQiLCJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19FTkRQT0lOVCIsIk9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0VORFBPSU5UIiwiT1RFTF9FWFBPUlRFUl9PVExQX0hFQURFUlMiLCJPVEVMX0VYUE9SVEVSX09UTFBfVFJBQ0VTX0hFQURFUlMiLCJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19IRUFERVJTIiwiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfSEVBREVSUyIsIk9URUxfRVhQT1JURVJfT1RMUF9USU1FT1VUIiwiT1RFTF9FWFBPUlRFUl9PVExQX1RSQUNFU19USU1FT1VUIiwiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfVElNRU9VVCIsIk9URUxfRVhQT1JURVJfT1RMUF9MT0dTX1RJTUVPVVQiLCJPVEVMX0VYUE9SVEVSX1pJUEtJTl9FTkRQT0lOVCIsIk9URUxfTE9HX0xFVkVMIiwiRGlhZ0xvZ0xldmVsIiwiSU5GTyIsIk9URUxfTk9fUEFUQ0hfTU9EVUxFUyIsIk9URUxfUFJPUEFHQVRPUlMiLCJPVEVMX1JFU09VUkNFX0FUVFJJQlVURVMiLCJPVEVMX1NFUlZJQ0VfTkFNRSIsIk9URUxfQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCIsIk9URUxfQVRUUklCVVRFX0NPVU5UX0xJTUlUIiwiT1RFTF9TUEFOX0FUVFJJQlVURV9WQUxVRV9MRU5HVEhfTElNSVQiLCJPVEVMX1NQQU5fQVRUUklCVVRFX0NPVU5UX0xJTUlUIiwiT1RFTF9MT0dSRUNPUkRfQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVCIsIk9URUxfTE9HUkVDT1JEX0FUVFJJQlVURV9DT1VOVF9MSU1JVCIsIk9URUxfU1BBTl9FVkVOVF9DT1VOVF9MSU1JVCIsIk9URUxfU1BBTl9MSU5LX0NPVU5UX0xJTUlUIiwiT1RFTF9TUEFOX0FUVFJJQlVURV9QRVJfRVZFTlRfQ09VTlRfTElNSVQiLCJPVEVMX1NQQU5fQVRUUklCVVRFX1BFUl9MSU5LX0NPVU5UX0xJTUlUIiwiT1RFTF9UUkFDRVNfRVhQT1JURVIiLCJPVEVMX1RSQUNFU19TQU1QTEVSIiwiUGFyZW50QmFzZWRBbHdheXNPbiIsIk9URUxfVFJBQ0VTX1NBTVBMRVJfQVJHIiwiT1RFTF9MT0dTX0VYUE9SVEVSIiwiT1RFTF9FWFBPUlRFUl9PVExQX0lOU0VDVVJFIiwiT1RFTF9FWFBPUlRFUl9PVExQX1RSQUNFU19JTlNFQ1VSRSIsIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX0lOU0VDVVJFIiwiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfSU5TRUNVUkUiLCJPVEVMX0VYUE9SVEVSX09UTFBfQ0VSVElGSUNBVEUiLCJPVEVMX0VYUE9SVEVSX09UTFBfVFJBQ0VTX0NFUlRJRklDQVRFIiwiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfQ0VSVElGSUNBVEUiLCJPVEVMX0VYUE9SVEVSX09UTFBfTE9HU19DRVJUSUZJQ0FURSIsIk9URUxfRVhQT1JURVJfT1RMUF9DT01QUkVTU0lPTiIsIk9URUxfRVhQT1JURVJfT1RMUF9UUkFDRVNfQ09NUFJFU1NJT04iLCJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19DT01QUkVTU0lPTiIsIk9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0NPTVBSRVNTSU9OIiwiT1RFTF9FWFBPUlRFUl9PVExQX0NMSUVOVF9LRVkiLCJPVEVMX0VYUE9SVEVSX09UTFBfVFJBQ0VTX0NMSUVOVF9LRVkiLCJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19DTElFTlRfS0VZIiwiT1RFTF9FWFBPUlRFUl9PVExQX0xPR1NfQ0xJRU5UX0tFWSIsIk9URUxfRVhQT1JURVJfT1RMUF9DTElFTlRfQ0VSVElGSUNBVEUiLCJPVEVMX0VYUE9SVEVSX09UTFBfVFJBQ0VTX0NMSUVOVF9DRVJUSUZJQ0FURSIsIk9URUxfRVhQT1JURVJfT1RMUF9NRVRSSUNTX0NMSUVOVF9DRVJUSUZJQ0FURSIsIk9URUxfRVhQT1JURVJfT1RMUF9MT0dTX0NMSUVOVF9DRVJUSUZJQ0FURSIsIk9URUxfRVhQT1JURVJfT1RMUF9QUk9UT0NPTCIsIk9URUxfRVhQT1JURVJfT1RMUF9UUkFDRVNfUFJPVE9DT0wiLCJPVEVMX0VYUE9SVEVSX09UTFBfTUVUUklDU19QUk9UT0NPTCIsIk9URUxfRVhQT1JURVJfT1RMUF9MT0dTX1BST1RPQ09MIiwiT1RFTF9FWFBPUlRFUl9PVExQX01FVFJJQ1NfVEVNUE9SQUxJVFlfUFJFRkVSRU5DRSIsIk9URUxfU0VNQ09OVl9TVEFCSUxJVFlfT1BUX0lOIiwicGFyc2VCb29sZWFuIiwiZW52aXJvbm1lbnQiLCJ2YWx1ZXMiLCJ0b0xvd2VyQ2FzZSIsInBhcnNlTnVtYmVyIiwibWluIiwibWF4IiwiTnVtYmVyIiwiaXNOYU4iLCJwYXJzZVN0cmluZ0xpc3QiLCJvdXRwdXQiLCJpbnB1dCIsInNlcGFyYXRvciIsImdpdmVuVmFsdWUiLCJ2IiwibG9nTGV2ZWxNYXAiLCJBTEwiLCJWRVJCT1NFIiwiREVCVUciLCJXQVJOIiwiRVJST1IiLCJOT05FIiwic2V0TG9nTGV2ZWxGcm9tRW52IiwidGhlTGV2ZWwiLCJ0b1VwcGVyQ2FzZSIsInBhcnNlRW52aXJvbm1lbnQiLCJnZXRFbnYiLCJwcm9jZXNzRW52IiwiYXNzaWduIiwiZ2V0RW52V2l0aG91dERlZmF1bHRzIiwib3RwZXJmb3JtYW5jZSIsIlZFUlNJT04kMSIsIlNES19JTkZPIiwidW5yZWZUaW1lciIsInRpbWVyIiwidW5yZWYiLCJOQU5PU0VDT05EX0RJR0lUUyIsIk5BTk9TRUNPTkRfRElHSVRTX0lOX01JTExJUyIsIk1JTExJU0VDT05EU19UT19OQU5PU0VDT05EUyIsIk1hdGgiLCJwb3ciLCJTRUNPTkRfVE9fTkFOT1NFQ09ORFMiLCJtaWxsaXNUb0hyVGltZSIsImVwb2NoTWlsbGlzIiwiZXBvY2hTZWNvbmRzIiwic2Vjb25kcyIsInRydW5jIiwibmFub3MiLCJyb3VuZCIsImdldFRpbWVPcmlnaW4iLCJoclRpbWUiLCJwZXJmb3JtYW5jZU5vdyIsImFkZEhyVGltZXMiLCJoclRpbWVEdXJhdGlvbiIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJpc1RpbWVJbnB1dEhyVGltZSIsImlzVGltZUlucHV0IiwidGltZTEiLCJ0aW1lMiIsIkV4cG9ydFJlc3VsdENvZGUiLCJfX3ZhbHVlcyQyIiwiQ29tcG9zaXRlUHJvcGFnYXRvciIsImNvbmZpZyIsIl9wcm9wYWdhdG9ycyIsInByb3BhZ2F0b3JzIiwiX2ZpZWxkcyIsImZyb20iLCJTZXQiLCJwIiwieCIsInkiLCJjb25jYXQiLCJwcm9wYWdhdG9yIiwiZXJyIiwibWVzc2FnZSIsImN0eCIsIlZBTElEX0tFWV9DSEFSX1JBTkdFIiwiVkFMSURfS0VZIiwiVkFMSURfVkVORE9SX0tFWSIsIlZBTElEX0tFWV9SRUdFWCIsIlJlZ0V4cCIsIlZBTElEX1ZBTFVFX0JBU0VfUkVHRVgiLCJJTlZBTElEX1ZBTFVFX0NPTU1BX0VRVUFMX1JFR0VYIiwidmFsaWRhdGVLZXkiLCJ0ZXN0IiwidmFsaWRhdGVWYWx1ZSIsIk1BWF9UUkFDRV9TVEFURV9JVEVNUyIsIk1BWF9UUkFDRV9TVEFURV9MRU4iLCJMSVNUX01FTUJFUlNfU0VQQVJBVE9SIiwiTElTVF9NRU1CRVJfS0VZX1ZBTFVFX1NQTElUVEVSIiwiVHJhY2VTdGF0ZSIsInJhd1RyYWNlU3RhdGUiLCJfaW50ZXJuYWxTdGF0ZSIsIk1hcCIsIl9wYXJzZSIsInRyYWNlU3RhdGUiLCJfY2xvbmUiLCJoYXMiLCJkZWxldGUiLCJ1bnNldCIsInNlcmlhbGl6ZSIsIl90aGlzIiwiX2tleXMiLCJhZ2ciLCJyZXZlcnNlIiwicGFydCIsImxpc3RNZW1iZXIiLCJzaXplIiwia2V5cyIsIlRSQUNFX1BBUkVOVF9IRUFERVIiLCJUUkFDRV9TVEFURV9IRUFERVIiLCJWRVJTSU9OIiwiVkVSU0lPTl9QQVJUIiwiVFJBQ0VfSURfUEFSVCIsIlBBUkVOVF9JRF9QQVJUIiwiRkxBR1NfUEFSVCIsIlRSQUNFX1BBUkVOVF9SRUdFWCIsInBhcnNlVHJhY2VQYXJlbnQiLCJ0cmFjZVBhcmVudCIsIm1hdGNoIiwiZXhlYyIsInRyYWNlSWQiLCJzcGFuSWQiLCJ0cmFjZUZsYWdzIiwicGFyc2VJbnQiLCJXM0NUcmFjZUNvbnRleHRQcm9wYWdhdG9yIiwic3BhbkNvbnRleHQiLCJ0cmFjZSIsImdldFNwYW5Db250ZXh0IiwiaXNTcGFuQ29udGV4dFZhbGlkIiwiVHJhY2VGbGFncyIsInRyYWNlUGFyZW50SGVhZGVyIiwiaXNSZW1vdGUiLCJ0cmFjZVN0YXRlSGVhZGVyIiwic3RhdGUiLCJzZXRTcGFuQ29udGV4dCIsIm9iamVjdFRhZyIsIm51bGxUYWciLCJ1bmRlZmluZWRUYWciLCJmdW5jUHJvdG8iLCJGdW5jdGlvbiIsImZ1bmNUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJnZXRQcm90b3R5cGUiLCJvdmVyQXJnIiwib2JqZWN0UHJvdG8iLCJoYXNPd25Qcm9wZXJ0eSIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsImZ1bmMiLCJ0cmFuc2Zvcm0iLCJhcmciLCJpc1BsYWluT2JqZWN0IiwiaXNPYmplY3RMaWtlIiwiYmFzZUdldFRhZyIsInByb3RvIiwiQ3RvciIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwiaXNPd24iLCJ0YWciLCJ1bm1hc2tlZCIsIk1BWF9MRVZFTCIsIm1lcmdlIiwiX2kiLCJhcmd1bWVudHMiLCJvYmplY3RzIiwiV2Vha01hcCIsIm1lcmdlVHdvT2JqZWN0cyIsInRha2VWYWx1ZSIsIm9uZSIsInR3byIsImxldmVsIiwiaXNQcmltaXRpdmUiLCJpc0Z1bmN0aW9uIiwiaiIsImlzT2JqZWN0Iiwic2hvdWxkTWVyZ2UiLCJ0d29WYWx1ZSIsIm9iajEiLCJvYmoyIiwid2FzT2JqZWN0UmVmZXJlbmNlZCIsImFycjEiLCJhcnIyIiwib2JqIiwiaW5mbyIsIkRlZmVycmVkIiwiX3Byb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIl9yZXNvbHZlIiwiX3JlamVjdCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJfX3JlYWQkMyIsIl9fc3ByZWFkQXJyYXkkMiIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsInBhY2siLCJsIiwiQmluZE9uY2VGdXR1cmUiLCJfY2FsbGJhY2siLCJfdGhhdCIsIl9pc0NhbGxlZCIsIl9kZWZlcnJlZCIsInByb21pc2UiLCJhcHBseSIsInRoZW4iLCJkZWZhdWx0U2VydmljZU5hbWUiLCJfX2Fzc2lnbiQxIiwiX19hc3NpZ24iLCJ0IiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiYWRvcHQiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCJfX2dlbmVyYXRvciIsImJvZHkiLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwiZiIsImciLCJ2ZXJiIiwicG9wIiwiX19yZWFkJDIiLCJSZXNvdXJjZSIsImFzeW5jQXR0cmlidXRlc1Byb21pc2UiLCJfYXR0cmlidXRlcyIsImFzeW5jQXR0cmlidXRlc1BlbmRpbmciLCJfc3luY0F0dHJpYnV0ZXMiLCJfYXN5bmNBdHRyaWJ1dGVzUHJvbWlzZSIsImFzeW5jQXR0cmlidXRlcyIsImRlYnVnIiwiZW1wdHkiLCJFTVBUWSIsImRlZmF1bHQiLCJ3YWl0Rm9yQXN5bmNBdHRyaWJ1dGVzIiwib3RoZXIiLCJtZXJnZWRTeW5jQXR0cmlidXRlcyIsIm1lcmdlZEF0dHJpYnV0ZXNQcm9taXNlIiwiYWxsIiwidGhpc0FzeW5jQXR0cmlidXRlcyIsIm90aGVyQXN5bmNBdHRyaWJ1dGVzIiwiRXhjZXB0aW9uRXZlbnROYW1lIiwiX192YWx1ZXMkMSIsIl9fcmVhZCQxIiwiX19zcHJlYWRBcnJheSQxIiwiU3BhbiIsInBhcmVudFRyYWNlciIsInNwYW5OYW1lIiwia2luZCIsInBhcmVudFNwYW5JZCIsImxpbmtzIiwiX2RlcHJlY2F0ZWRDbG9jayIsImV2ZW50cyIsIl9kcm9wcGVkQXR0cmlidXRlc0NvdW50IiwiX2Ryb3BwZWRFdmVudHNDb3VudCIsIl9kcm9wcGVkTGlua3NDb3VudCIsInN0YXR1cyIsImNvZGUiLCJTcGFuU3RhdHVzQ29kZSIsIlVOU0VUIiwiX2VuZGVkIiwiX2R1cmF0aW9uIiwiX3NwYW5Db250ZXh0IiwiX3BlcmZvcm1hbmNlU3RhcnRUaW1lIiwiX3BlcmZvcm1hbmNlT2Zmc2V0IiwiX3N0YXJ0VGltZVByb3ZpZGVkIiwiX2dldFRpbWUiLCJyZXNvdXJjZSIsImluc3RydW1lbnRhdGlvbkxpYnJhcnkiLCJfc3BhbkxpbWl0cyIsImdldFNwYW5MaW1pdHMiLCJfYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdCIsImF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQiLCJzZXRBdHRyaWJ1dGVzIiwiX3NwYW5Qcm9jZXNzb3IiLCJnZXRBY3RpdmVTcGFuUHJvY2Vzc29yIiwib25TdGFydCIsInNldEF0dHJpYnV0ZSIsIl9pc1NwYW5FbmRlZCIsImF0dHJpYnV0ZUNvdW50TGltaXQiLCJfdHJ1bmNhdGVUb1NpemUiLCJrIiwiYWRkRXZlbnQiLCJhdHRyaWJ1dGVzT3JTdGFydFRpbWUiLCJ0aW1lU3RhbXAiLCJldmVudENvdW50TGltaXQiLCJ0aW1lIiwiZHJvcHBlZEF0dHJpYnV0ZXNDb3VudCIsImFkZExpbmsiLCJsaW5rIiwiYWRkTGlua3MiLCJzZXRTdGF0dXMiLCJ1cGRhdGVOYW1lIiwiZW5kIiwib25FbmQiLCJpbnAiLCJnZXRUaW1lIiwibXNEdXJhdGlvbiIsImlzUmVjb3JkaW5nIiwicmVjb3JkRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwic3RhY2siLCJfdHJ1bmNhdGVUb0xpbWl0VXRpbCIsImxpbWl0IiwiU2FtcGxpbmdEZWNpc2lvbiIsIkFsd2F5c09mZlNhbXBsZXIiLCJzaG91bGRTYW1wbGUiLCJkZWNpc2lvbiIsIk5PVF9SRUNPUkQiLCJBbHdheXNPblNhbXBsZXIiLCJSRUNPUkRfQU5EX1NBTVBMRUQiLCJQYXJlbnRCYXNlZFNhbXBsZXIiLCJfcm9vdCIsInJvb3QiLCJFcnJvciIsIl9yZW1vdGVQYXJlbnRTYW1wbGVkIiwicmVtb3RlUGFyZW50U2FtcGxlZCIsIl9yZW1vdGVQYXJlbnROb3RTYW1wbGVkIiwicmVtb3RlUGFyZW50Tm90U2FtcGxlZCIsIl9sb2NhbFBhcmVudFNhbXBsZWQiLCJsb2NhbFBhcmVudFNhbXBsZWQiLCJfbG9jYWxQYXJlbnROb3RTYW1wbGVkIiwibG9jYWxQYXJlbnROb3RTYW1wbGVkIiwic3BhbktpbmQiLCJwYXJlbnRDb250ZXh0IiwiU0FNUExFRCIsIlRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlciIsIl9yYXRpbyIsIl9ub3JtYWxpemUiLCJfdXBwZXJCb3VuZCIsImZsb29yIiwiaXNWYWxpZFRyYWNlSWQiLCJfYWNjdW11bGF0ZSIsInJhdGlvIiwiYWNjdW11bGF0aW9uIiwicG9zIiwiRkFMTEJBQ0tfT1RFTF9UUkFDRVNfU0FNUExFUiIsIkFsd2F5c09uIiwiREVGQVVMVF9SQVRJTyIsImxvYWREZWZhdWx0Q29uZmlnIiwiX2VudiIsInNhbXBsZXIiLCJidWlsZFNhbXBsZXJGcm9tRW52IiwiZm9yY2VGbHVzaFRpbWVvdXRNaWxsaXMiLCJnZW5lcmFsTGltaXRzIiwic3BhbkxpbWl0cyIsImxpbmtDb3VudExpbWl0IiwiYXR0cmlidXRlUGVyRXZlbnRDb3VudExpbWl0IiwiYXR0cmlidXRlUGVyTGlua0NvdW50TGltaXQiLCJtZXJnZVJlc291cmNlV2l0aERlZmF1bHRzIiwiQWx3YXlzT2ZmIiwiUGFyZW50QmFzZWRBbHdheXNPZmYiLCJUcmFjZUlkUmF0aW8iLCJnZXRTYW1wbGVyUHJvYmFiaWxpdHlGcm9tRW52IiwiUGFyZW50QmFzZWRUcmFjZUlkUmF0aW8iLCJwcm9iYWJpbGl0eSIsIm1lcmdlQ29uZmlnIiwidXNlckNvbmZpZyIsInBlckluc3RhbmNlRGVmYXVsdHMiLCJERUZBVUxUX0NPTkZJRyIsInRhcmdldCIsInJlY29uZmlndXJlTGltaXRzIiwiX2UiLCJfZiIsIl9nIiwiX2giLCJfaiIsIl9rIiwiX2wiLCJfbSIsInBhcnNlZEVudkNvbmZpZyIsIkJhdGNoU3BhblByb2Nlc3NvckJhc2UiLCJfZXhwb3J0ZXIiLCJfaXNFeHBvcnRpbmciLCJfZmluaXNoZWRTcGFucyIsIl9kcm9wcGVkU3BhbnNDb3VudCIsIl9tYXhFeHBvcnRCYXRjaFNpemUiLCJtYXhFeHBvcnRCYXRjaFNpemUiLCJfbWF4UXVldWVTaXplIiwibWF4UXVldWVTaXplIiwiX3NjaGVkdWxlZERlbGF5TWlsbGlzIiwic2NoZWR1bGVkRGVsYXlNaWxsaXMiLCJfZXhwb3J0VGltZW91dE1pbGxpcyIsImV4cG9ydFRpbWVvdXRNaWxsaXMiLCJfc2h1dGRvd25PbmNlIiwiX3NodXRkb3duIiwiaXNDYWxsZWQiLCJfZmx1c2hBbGwiLCJfc3BhbiIsIl9wYXJlbnRDb250ZXh0Iiwic3BhbiIsIl9hZGRUb0J1ZmZlciIsInNodXRkb3duIiwib25TaHV0ZG93biIsIl9tYXliZVN0YXJ0VGltZXIiLCJwcm9taXNlcyIsImNvdW50IiwiY2VpbCIsIl9mbHVzaE9uZUJhdGNoIiwiY2F0Y2giLCJfY2xlYXJUaW1lciIsInNldFRpbWVvdXQiLCJ3aXRoIiwiYWN0aXZlIiwic3BhbnMiLCJzcGxpY2UiLCJkb0V4cG9ydCIsImV4cG9ydCIsImNsZWFyVGltZW91dCIsIlNVQ0NFU1MiLCJwZW5kaW5nUmVzb3VyY2VzIiwibGVuIiwiZmluYWxseSIsIl90aW1lciIsIl9fZXh0ZW5kcyIsImV4dGVuZFN0YXRpY3MiLCJkIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX18iLCJjcmVhdGUiLCJCYXRjaFNwYW5Qcm9jZXNzb3IiLCJfc3VwZXIiLCJTUEFOX0lEX0JZVEVTIiwiVFJBQ0VfSURfQllURVMiLCJSYW5kb21JZEdlbmVyYXRvciIsImdlbmVyYXRlVHJhY2VJZCIsImdldElkR2VuZXJhdG9yIiwiZ2VuZXJhdGVTcGFuSWQiLCJTSEFSRURfQlVGRkVSIiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJieXRlcyIsImdlbmVyYXRlSWQiLCJ3cml0ZVVJbnQzMkJFIiwicmFuZG9tIiwiVHJhY2VyIiwiX3RyYWNlclByb3ZpZGVyIiwibG9jYWxDb25maWciLCJfc2FtcGxlciIsIl9nZW5lcmFsTGltaXRzIiwiX2lkR2VuZXJhdG9yIiwiaWRHZW5lcmF0b3IiLCJzdGFydFNwYW4iLCJkZWxldGVTcGFuIiwicGFyZW50U3BhbiIsImdldFNwYW4iLCJub25SZWNvcmRpbmdTcGFuIiwid3JhcFNwYW5Db250ZXh0IiwiSU5WQUxJRF9TUEFOX0NPTlRFWFQiLCJwYXJlbnRTcGFuQ29udGV4dCIsIlNwYW5LaW5kIiwiSU5URVJOQUwiLCJzYW1wbGluZ1Jlc3VsdCIsImluaXRBdHRyaWJ1dGVzIiwic3RhcnRBY3RpdmVTcGFuIiwiYXJnMiIsImFyZzMiLCJhcmc0Iiwib3B0cyIsImNvbnRleHRXaXRoU3BhblNldCIsInNldFNwYW4iLCJnZXRHZW5lcmFsTGltaXRzIiwiTXVsdGlTcGFuUHJvY2Vzc29yIiwiX3NwYW5Qcm9jZXNzb3JzIiwiZV8zIiwiZV8zXzEiLCJlXzQiLCJlXzRfMSIsIk5vb3BTcGFuUHJvY2Vzc29yIiwiX2NvbnRleHQiLCJGb3JjZUZsdXNoU3RhdGUiLCJCYXNpY1RyYWNlclByb3ZpZGVyIiwiX3JlZ2lzdGVyZWRTcGFuUHJvY2Vzc29ycyIsIl90cmFjZXJzIiwibWVyZ2VkQ29uZmlnIiwiX2NvbmZpZyIsInNwYW5Qcm9jZXNzb3JzIiwiZGVmYXVsdEV4cG9ydGVyIiwiX2J1aWxkRXhwb3J0ZXJGcm9tRW52IiwiYmF0Y2hQcm9jZXNzb3IiLCJnZXRUcmFjZXIiLCJ2ZXJzaW9uIiwic2NoZW1hVXJsIiwiYWRkU3BhblByb2Nlc3NvciIsInJlZ2lzdGVyIiwic2V0R2xvYmFsVHJhY2VyUHJvdmlkZXIiLCJfYnVpbGRQcm9wYWdhdG9yRnJvbUVudiIsImNvbnRleHRNYW5hZ2VyIiwic2V0R2xvYmFsQ29udGV4dE1hbmFnZXIiLCJzZXRHbG9iYWxQcm9wYWdhdG9yIiwidGltZW91dEludGVydmFsIiwicmVzb2x2ZWQiLCJyZXN1bHRzIiwiZXJyb3JzIiwiX2dldFByb3BhZ2F0b3IiLCJfcmVnaXN0ZXJlZFByb3BhZ2F0b3JzIiwiX2dldFNwYW5FeHBvcnRlciIsIl9yZWdpc3RlcmVkRXhwb3J0ZXJzIiwidW5pcXVlUHJvcGFnYXRvck5hbWVzIiwidmFsaWRQcm9wYWdhdG9ycyIsImxpc3QiLCJpdGVtIiwiZXhwb3J0ZXJOYW1lIiwiZXhwb3J0ZXIiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX1BBUkVOVF9JU19SRU1PVEUiLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX0dSQVBIUUxfT1BFUkFUSU9OIiwic3Bhbkhhc0F0dHJpYnV0ZXMiLCJjYXN0U3BhbiIsInNwYW5IYXNLaW5kIiwic3Bhbkhhc1N0YXR1cyIsInNwYW5IYXNOYW1lIiwic3Bhbkhhc1BhcmVudElkIiwiZ2V0UmVxdWVzdFNwYW5EYXRhIiwibWF5YmVVcmxBdHRyaWJ1dGUiLCJkYXRhIiwidXJsIiwicGFyc2VVcmwiLCJnZXRTYW5pdGl6ZWRVcmxTdHJpbmciLCJzZWFyY2giLCJoYXNoIiwiZ2V0U3BhbktpbmQiLCJTRU5UUllfVFJBQ0VfSEVBREVSIiwiU0VOVFJZX0JBR0dBR0VfSEVBREVSIiwiU0VOVFJZX1RSQUNFX1NUQVRFX0RTQyIsIlNFTlRSWV9UUkFDRV9TVEFURV9TQU1QTEVEX05PVF9SRUNPUkRJTkciLCJTRU5UUllfVFJBQ0VfU1RBVEVfVVJMIiwiU0VOVFJZX1NDT1BFU19DT05URVhUX0tFWSIsIlNFTlRSWV9GT1JLX0lTT0xBVElPTl9TQ09QRV9DT05URVhUX0tFWSIsIlNFTlRSWV9GT1JLX1NFVF9TQ09QRV9DT05URVhUX0tFWSIsIlNFTlRSWV9GT1JLX1NFVF9JU09MQVRJT05fU0NPUEVfQ09OVEVYVF9LRVkiLCJTQ09QRV9DT05URVhUX0ZJRUxEIiwiZ2V0U2NvcGVzRnJvbUNvbnRleHQiLCJzZXRTY29wZXNPbkNvbnRleHQiLCJzY29wZXMiLCJzZXRDb250ZXh0T25TY29wZSIsInNjb3BlIiwiYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZ2V0Q29udGV4dEZyb21TY29wZSIsIl9vcHRpb25hbENoYWluJDUiLCJnZXRTYW1wbGluZ0RlY2lzaW9uIiwic2FtcGxlZE5vdFJlY29yZGluZyIsImRzY1N0cmluZyIsImRzYyIsImJhZ2dhZ2VIZWFkZXJUb0R5bmFtaWNTYW1wbGluZ0NvbnRleHQiLCJzYW1wbGVkIiwiXzIiLCJpbmZlclNwYW5EYXRhIiwiaHR0cE1ldGhvZCIsImRlc2NyaXB0aW9uRm9ySHR0cE1ldGhvZCIsImRiU3lzdGVtIiwib3BJc0NhY2hlIiwiU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUCIsInN0YXJ0c1dpdGgiLCJkZXNjcmlwdGlvbkZvckRiU3lzdGVtIiwiY3VzdG9tU291cmNlT3JSb3V0ZSIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU09VUkNFIiwicnBjU2VydmljZSIsImdldFVzZXJVcGRhdGVkTmFtZUFuZFNvdXJjZSIsIm1lc3NhZ2luZ1N5c3RlbSIsImZhYXNUcmlnZ2VyIiwiZGVzY3JpcHRpb24iLCJzb3VyY2UiLCJwYXJzZVNwYW5EZXNjcmlwdGlvbiIsInVzZXJEZWZpbmVkTmFtZSIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfQ1VTVE9NX1NQQU5fTkFNRSIsInN0YXRlbWVudCIsIm9wUGFydHMiLCJDTElFTlQiLCJTRVJWRVIiLCJ1cmxQYXRoIiwicXVlcnkiLCJmcmFnbWVudCIsImhhc1JvdXRlIiwiZ2V0U2FuaXRpemVkVXJsIiwiZ3JhcGhxbE9wZXJhdGlvbnNBdHRyaWJ1dGUiLCJiYXNlRGVzY3JpcHRpb24iLCJpbmZlcnJlZERlc2NyaXB0aW9uIiwiZ2V0R3JhcGhxbE9wZXJhdGlvbk5hbWVzRnJvbUF0dHJpYnV0ZSIsImluZmVycmVkU291cmNlIiwiaXNDbGllbnRPclNlcnZlcktpbmQiLCJvcmlnaW4iLCJTRU1BTlRJQ19BVFRSSUJVVEVfU0VOVFJZX09SSUdJTiIsImlzTWFudWFsU3BhbiIsImFscmVhZHlIYXNDdXN0b21Tb3VyY2UiLCJjdXN0b21TcGFuTmFtZSIsInVzZUluZmVycmVkRGVzY3JpcHRpb24iLCJhdHRyIiwic29ydGVkIiwic29ydCIsImh0dHBUYXJnZXQiLCJodHRwVXJsIiwiaHR0cFJvdXRlIiwicGFyc2VkVXJsIiwic3RyaXBVcmxRdWVyeUFuZEZyYWdtZW50Iiwib3JpZ2luYWxOYW1lIiwiZmFsbGJhY2tTb3VyY2UiLCJlbmhhbmNlRHNjV2l0aE9wZW5UZWxlbWV0cnlSb290U3Bhbk5hbWUiLCJjbGllbnQiLCJvbiIsInJvb3RTcGFuIiwianNvblNwYW4iLCJzcGFuVG9KU09OIiwidHJhbnNhY3Rpb24iLCJoYXNUcmFjaW5nRW5hYmxlZCIsIm1ha2VUcmFjZVN0YXRlIiwiZHluYW1pY1NhbXBsaW5nQ29udGV4dFRvU2VudHJ5QmFnZ2FnZUhlYWRlciIsInRyYWNlU3RhdGVCYXNlIiwidHJhY2VTdGF0ZVdpdGhEc2MiLCJnZXRBY3RpdmVTcGFuIiwiREVCVUdfQlVJTEQkMSIsIl9fU0VOVFJZX0RFQlVHX18iLCJzZXR1cEVsZW1lbnRzIiwib3BlblRlbGVtZXRyeVNldHVwQ2hlY2siLCJzZXRJc1NldHVwIiwiYWRkIiwiX29wdGlvbmFsQ2hhaW4kNCIsImdldFByb3BhZ2F0aW9uQ29udGV4dEZyb21TcGFuIiwidHJhY2VTdGF0ZURzYyIsImdldER5bmFtaWNTYW1wbGluZ0NvbnRleHRGcm9tU3BhbiIsImdldFJvb3RTcGFuIiwiU2VudHJ5UHJvcGFnYXRvciIsIl91cmxNYXRjaGVzVGFyZ2V0c01hcCIsIkxSVU1hcCIsImxvZ2dlciIsImxvZyIsImFjdGl2ZVNwYW4iLCJnZXRDdXJyZW50VVJMIiwidHJhY2VQcm9wYWdhdGlvblRhcmdldHMiLCJnZXRDbGllbnQiLCJfMyIsIl80Iiwic2hvdWxkUHJvcGFnYXRlVHJhY2VGb3JVcmwiLCJleGlzdGluZ0JhZ2dhZ2VIZWFkZXIiLCJnZXRFeGlzdGluZ0JhZ2dhZ2UiLCJkeW5hbWljU2FtcGxpbmdDb250ZXh0IiwiZ2V0SW5qZWN0aW9uRGF0YSIsImJhZ2dhZ2VFbnRyaWVzIiwicGFyc2VCYWdnYWdlSGVhZGVyIiwic2V0RW50cnkiLCJkc2NLZXkiLCJkc2NWYWx1ZSIsIlNFTlRSWV9CQUdHQUdFX0tFWV9QUkVGSVgiLCJJTlZBTElEX1RSQUNFSUQiLCJnZW5lcmF0ZVNlbnRyeVRyYWNlSGVhZGVyIiwibWF5YmVTZW50cnlUcmFjZUhlYWRlciIsInNlbnRyeVRyYWNlIiwiZW5zdXJlU2NvcGVzT25Db250ZXh0IiwiZ2V0Q29udGV4dFdpdGhSZW1vdGVBY3RpdmVTcGFuIiwiTk9UX1BST1BBR0FURURfTUVTU0FHRSIsImRlY2lzaW9uTWFwIiwiY2FjaGVkRGVjaXNpb24iLCJfNSIsIl82Iiwic3RyaW5nTWF0Y2hlc1NvbWVQYXR0ZXJuIiwiXzciLCJfOCIsIl85IiwiXzEwIiwiZ2V0Q3VycmVudFNjb3BlIiwicHJvcGFnYXRpb25Db250ZXh0IiwiZ2V0UHJvcGFnYXRpb25Db250ZXh0IiwiZ2V0RHluYW1pY1NhbXBsaW5nQ29udGV4dEZyb21TY29wZSIsInByb3BhZ2F0aW9uQ29udGV4dEZyb21IZWFkZXJzIiwiZ2VuZXJhdGVSZW1vdGVTcGFuQ29udGV4dCIsImNvbnRpbnVlVHJhY2VBc1JlbW90ZVNwYW4iLCJjYWxsYmFjayIsImN0eFdpdGhTcGFuQ29udGV4dCIsIm5ld1Njb3BlcyIsImNsb25lIiwiaXNvbGF0aW9uU2NvcGUiLCJnZXRJc29sYXRpb25TY29wZSIsInNwYW5EYXRhIiwidXJsQXR0cmlidXRlIiwiXzExIiwiXzEyIiwidXJsVHJhY2VTdGF0ZSIsIl8xMyIsIl8xNCIsIl8xNSIsIl8xNiIsIl8xNyIsInRyYWNlciIsImN1c3RvbVBhcmVudFNwYW4iLCJ3cmFwcGVyIiwiZ2V0QWN0aXZlU3BhbldyYXBwZXIiLCJhY3RpdmVDdHgiLCJnZXRDb250ZXh0IiwiZm9yY2VUcmFuc2FjdGlvbiIsInNob3VsZFNraXBTcGFuIiwib25seUlmUGFyZW50Iiwic3Bhbk9wdGlvbnMiLCJnZXRTcGFuT3B0aW9ucyIsImhhbmRsZUNhbGxiYWNrRXJyb3JzIiwic3RhcnRTcGFuTWFudWFsIiwic3RhcnRJbmFjdGl2ZVNwYW4iLCJ3aXRoQWN0aXZlU3BhbiIsIm5ld0NvbnRleHRXaXRoQWN0aXZlU3BhbiIsIlNES19WRVJTSU9OIiwiZml4ZWRTdGFydFRpbWUiLCJlbnN1cmVUaW1lc3RhbXBJbk1pbGxpc2Vjb25kcyIsInRpbWVzdGFtcCIsImlzTXMiLCJnZXRDb250ZXh0Rm9yU2NvcGUiLCJjdHhXaXRob3V0U3BhbiIsImNvbnRpbnVlVHJhY2UiLCJzdXBwcmVzc1RyYWNpbmciLCJzZXR1cEV2ZW50Q29udGV4dFRyYWNlIiwiZXZlbnQiLCJjb250ZXh0cyIsInNwYW5Ub1RyYWNlQ29udGV4dCIsInNka1Byb2Nlc3NpbmdNZXRhZGF0YSIsImdldFRyYWNlRGF0YSIsImdldENhcHR1cmVkU2NvcGVzT25TcGFuIiwic2V0T3BlblRlbGVtZXRyeUNvbnRleHRBc3luY0NvbnRleHRTdHJhdGVneSIsImdldFNjb3BlcyIsImdldERlZmF1bHRDdXJyZW50U2NvcGUiLCJnZXREZWZhdWx0SXNvbGF0aW9uU2NvcGUiLCJ3aXRoU2NvcGUiLCJ3aXRoU2V0U2NvcGUiLCJ3aXRoSXNvbGF0aW9uU2NvcGUiLCJ3aXRoU2V0SXNvbGF0aW9uU2NvcGUiLCJzZXRBc3luY0NvbnRleHRTdHJhdGVneSIsIl9vcHRpb25hbENoYWluJDMiLCJ3cmFwQ29udGV4dE1hbmFnZXJDbGFzcyIsIkNvbnRleHRNYW5hZ2VyQ2xhc3MiLCJTZW50cnlDb250ZXh0TWFuYWdlciIsImN1cnJlbnRTY29wZXMiLCJjdXJyZW50U2NvcGUiLCJjdXJyZW50SXNvbGF0aW9uU2NvcGUiLCJzaG91bGRGb3JrSXNvbGF0aW9uU2NvcGUiLCJuZXdDdXJyZW50U2NvcGUiLCJuZXdJc29sYXRpb25TY29wZSIsImN0eDEiLCJjdHgyIiwiZGVsZXRlVmFsdWUiLCJncm91cFNwYW5zV2l0aFBhcmVudHMiLCJub2RlTWFwIiwiY3JlYXRlT3JVcGRhdGVTcGFuTm9kZUFuZFJlZnMiLCJfaWQiLCJzcGFuTm9kZSIsImdldExvY2FsUGFyZW50SWQiLCJwYXJlbnRJc1JlbW90ZSIsImlkIiwicGFyZW50SWQiLCJjcmVhdGVPclVwZGF0ZU5vZGUiLCJjaGlsZHJlbiIsInBhcmVudE5vZGUiLCJjcmVhdGVPckdldFBhcmVudE5vZGUiLCJub2RlIiwiZXhpc3RpbmciLCJjYW5vbmljYWxHcnBjRXJyb3JDb2Rlc01hcCIsImlzU3RhdHVzRXJyb3JNZXNzYWdlVmFsaWQiLCJpbmNsdWRlcyIsIm1hcFN0YXR1cyIsIk9LIiwiU1BBTl9TVEFUVVNfT0siLCJpbmZlcnJlZFN0YXR1cyIsImluZmVyU3RhdHVzRnJvbUF0dHJpYnV0ZXMiLCJTUEFOX1NUQVRVU19FUlJPUiIsImh0dHBDb2RlQXR0cmlidXRlIiwiZ3JwY0NvZGVBdHRyaWJ1dGUiLCJudW1iZXJIdHRwQ29kZSIsImdldFNwYW5TdGF0dXNGcm9tSHR0cENvZGUiLCJfb3B0aW9uYWxDaGFpbiQyIiwiTUFYX1NQQU5fQ09VTlQiLCJERUZBVUxUX1RJTUVPVVQiLCJTZW50cnlTcGFuRXhwb3J0ZXIiLCJfZmluaXNoZWRTcGFuQnVja2V0U2l6ZSIsIl9maW5pc2hlZFNwYW5CdWNrZXRzIiwiZmlsbCIsIl9sYXN0Q2xlYW51cFRpbWVzdGFtcEluUyIsIl9zcGFuc1RvQnVja2V0RW50cnkiLCJjdXJyZW50VGltZXN0YW1wSW5TIiwiZHJvcHBlZFNwYW5Db3VudCIsImJ1Y2tldCIsInRpbWVzdGFtcEluUyIsImN1cnJlbnRCdWNrZXRJbmRleCIsImN1cnJlbnRCdWNrZXQiLCJfY2xlYXJUaW1lb3V0IiwiX2ZsdXNoVGltZW91dCIsImZpbmlzaGVkU3BhbnMiLCJzZW50U3BhbnMiLCJtYXliZVNlbmQiLCJzZW50U3BhbkNvdW50IiwicmVtYWluaW5nT3BlblNwYW5Db3VudCIsImJ1Y2tldEVudHJ5IiwiY2xlYXIiLCJncm91cGVkIiwicm9vdE5vZGVzIiwiZ2V0Q29tcGxldGVkUm9vdE5vZGVzIiwidHJhbnNhY3Rpb25FdmVudCIsImNyZWF0ZVRyYW5zYWN0aW9uRm9yT3RlbFNwYW4iLCJjaGlsZCIsImNyZWF0ZUFuZEZpbmlzaFNwYW5Gb3JPdGVsU3BhbiIsImEiLCJzdGFydF90aW1lc3RhbXAiLCJtZWFzdXJlbWVudHMiLCJ0aW1lZEV2ZW50c1RvTWVhc3VyZW1lbnRzIiwiY2FwdHVyZUV2ZW50Iiwibm9kZUlzQ29tcGxldGVkUm9vdE5vZGUiLCJub2RlcyIsInBhcnNlU3BhbiIsImdldFNwYW5EYXRhIiwiY2FwdHVyZWRTcGFuU2NvcGVzIiwic2FtcGxlUmF0ZSIsIlNFTUFOVElDX0FUVFJJQlVURV9TRU5UUllfU0FNUExFX1JBVEUiLCJkcm9wVW5kZWZpbmVkS2V5cyIsInJlbW92ZVNlbnRyeUF0dHJpYnV0ZXMiLCJ0cmFjZV9pZCIsInNwYW5faWQiLCJwYXJlbnRfc3Bhbl9pZCIsInRyYWNlQ29udGV4dCIsImdldFN0YXR1c01lc3NhZ2UiLCJzdGF0dXNDb2RlIiwicmVzcG9uc2VDb250ZXh0IiwicmVzcG9uc2UiLCJzdGF0dXNfY29kZSIsIm90ZWwiLCJzcGFuVGltZUlucHV0VG9TZWNvbmRzIiwiY2FwdHVyZWRTcGFuU2NvcGUiLCJjYXB0dXJlZFNwYW5Jc29sYXRpb25TY29wZSIsInRyYW5zYWN0aW9uX2luZm8iLCJfbWV0cmljc19zdW1tYXJ5IiwiZ2V0TWV0cmljU3VtbWFyeUpzb25Gb3JTcGFuIiwic2hvdWxkRHJvcCIsImFsbERhdGEiLCJzcGFuSlNPTiIsImRlZmluZWRPcCIsImRlZmluZWRTb3VyY2UiLCJpbmZlcnJlZE9wIiwiaW5mZXJyZWREYXRhIiwiZ2V0RGF0YSIsImNsZWFuZWREYXRhIiwibWF5YmVIdHRwU3RhdHVzQ29kZUF0dHJpYnV0ZSIsInJlcXVlc3REYXRhIiwiX29wdGlvbmFsQ2hhaW4kMSIsIm9uU3BhblN0YXJ0IiwiYWRkQ2hpbGRTcGFuVG9TcGFuIiwiUk9PVF9DT05URVhUIiwic2V0Q2FwdHVyZWRTY29wZXNPblNwYW4iLCJsb2dTcGFuU3RhcnQiLCJlbWl0Iiwib25TcGFuRW5kIiwibG9nU3BhbkVuZCIsIlNlbnRyeVNwYW5Qcm9jZXNzb3IiLCJTZW50cnlTYW1wbGVyIiwiX2NsaWVudCIsInNwYW5BdHRyaWJ1dGVzIiwiX2xpbmtzIiwiZ2V0VmFsaWRTcGFuIiwid3JhcFNhbXBsaW5nRGVjaXNpb24iLCJtYXliZVNwYW5IdHRwTWV0aG9kIiwicGFyZW50U2FtcGxlZCIsImdldFBhcmVudFNhbXBsZWQiLCJpbmZlcnJlZFNwYW5OYW1lIiwiaW5mZXJyZWRBdHRyaWJ1dGVzIiwibWVyZ2VkQXR0cmlidXRlcyIsIm11dGFibGVTYW1wbGluZ0RlY2lzaW9uIiwic2FtcGxlU3BhbiIsInRyYW5zYWN0aW9uQ29udGV4dCIsIm1ldGhvZCIsImdldFBhcmVudFJlbW90ZVNhbXBsZWQiLCJ0cmFjZXBhcmVudERhdGEiLCJnZXRCYXNlVHJhY2VTdGF0ZSIsIkRFQlVHX0JVSUxEIiwiSU5URUdSQVRJT05fTkFNRSIsIkhBU19DTElFTlRfTUFQIiwiX3dpbnRlckNHRmV0Y2giLCJicmVhZGNydW1icyIsInNob3VsZENyZWF0ZVNwYW5Gb3JSZXF1ZXN0IiwiX2NyZWF0ZVNwYW5VcmxNYXAiLCJfaGVhZGVyc1VybE1hcCIsIl9zaG91bGRBdHRhY2hUcmFjZURhdGEiLCJfc2hvdWxkQ3JlYXRlU3BhbiIsInNldHVwT25jZSIsImFkZEZldGNoSW5zdHJ1bWVudGF0aW9uSGFuZGxlciIsImhhbmRsZXJEYXRhIiwiaXNTZW50cnlSZXF1ZXN0VXJsIiwiZmV0Y2hEYXRhIiwiaW5zdHJ1bWVudEZldGNoUmVxdWVzdCIsImNyZWF0ZUJyZWFkY3J1bWIiLCJzZXR1cCIsIndpbnRlckNHRmV0Y2hJbnRlZ3JhdGlvbiIsImRlZmluZUludGVncmF0aW9uIiwic3RhcnRUaW1lc3RhbXAiLCJlbmRUaW1lc3RhbXAiLCJoaW50IiwiYWRkQnJlYWRjcnVtYiIsImNhdGVnb3J5IiwiZ2V0QnJlYWRjcnVtYkxvZ0xldmVsRnJvbUh0dHBTdGF0dXNDb2RlIiwiREVGQVVMVF9UUkFOU1BPUlRfQlVGRkVSX1NJWkUiLCJJc29sYXRlZFByb21pc2VCdWZmZXIiLCJfYnVmZmVyU2l6ZSIsIiQiLCJfdGFza1Byb2R1Y2VycyIsInRhc2tQcm9kdWNlciIsIlNlbnRyeUVycm9yIiwiZHJhaW4iLCJvbGRUYXNrUHJvZHVjZXJzIiwibWFrZUVkZ2VUcmFuc3BvcnQiLCJtYWtlUmVxdWVzdCIsInJlcXVlc3QiLCJyZXF1ZXN0T3B0aW9ucyIsImhlYWRlcnMiLCJmZXRjaE9wdGlvbnMiLCJmZXRjaCIsImNyZWF0ZVRyYW5zcG9ydCIsImJ1ZmZlclNpemUiLCJnZXRWZXJjZWxFbnYiLCJpc0NsaWVudCIsInZlcmNlbEVudlZhciIsIlZFUkNFTF9FTlYiLCJBRERfTElTVEVORVJfTUVUSE9EUyIsIkFic3RyYWN0QXN5bmNIb29rc0NvbnRleHRNYW5hZ2VyIiwiX19pbml0IiwiX19pbml0MiIsImJpbmQiLCJfYmluZEV2ZW50RW1pdHRlciIsIl9iaW5kRnVuY3Rpb24iLCJtYW5hZ2VyIiwiY29udGV4dFdyYXBwZXIiLCJ3cml0YWJsZSIsImVlIiwiX2dldFBhdGNoTWFwIiwiX2NyZWF0ZVBhdGNoTWFwIiwibWV0aG9kTmFtZSIsIl9wYXRjaEFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJfcGF0Y2hSZW1vdmVMaXN0ZW5lciIsIm9mZiIsInJlbW92ZUFsbExpc3RlbmVycyIsIl9wYXRjaFJlbW92ZUFsbExpc3RlbmVycyIsIm9yaWdpbmFsIiwibGlzdGVuZXIiLCJwYXRjaGVkTGlzdGVuZXIiLCJfd3JhcHBlZCIsImxpc3RlbmVycyIsIl9rT3RMaXN0ZW5lcnMiLCJBc3luY0xvY2FsU3RvcmFnZUNvbnRleHRNYW5hZ2VyIiwiTWF5YmVHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUNvbnN0cnVjdG9yIiwiR0xPQkFMX09CSiIsIkFzeW5jTG9jYWxTdG9yYWdlIiwiX2FzeW5jTG9jYWxTdG9yYWdlIiwiZ2V0U3RvcmUiLCJydW4iLCJfc3RvcmUiLCJkaXNhYmxlIiwiY2IiLCJlbmFibGUiLCJub2RlU3RhY2tQYXJzZXIiLCJjcmVhdGVTdGFja1BhcnNlciIsIm5vZGVTdGFja0xpbmVQYXJzZXIiLCJnZXREZWZhdWx0SW50ZWdyYXRpb25zIiwiZGVkdXBlSW50ZWdyYXRpb24iLCJpbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uIiwiZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uIiwibGlua2VkRXJyb3JzSW50ZWdyYXRpb24iLCJzZW5kRGVmYXVsdFBpaSIsInJlcXVlc3REYXRhSW50ZWdyYXRpb24iLCJpbml0IiwidXBkYXRlIiwiaW5pdGlhbFNjb3BlIiwiZGVmYXVsdEludGVncmF0aW9ucyIsImRzbiIsIlNFTlRSWV9EU04iLCJ0cmFjZXNTYW1wbGVSYXRlIiwiU0VOVFJZX1RSQUNFU19TQU1QTEVfUkFURSIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsInJlbGVhc2UiLCJkZXRlY3RlZFJlbGVhc2UiLCJnZXRTZW50cnlSZWxlYXNlIiwiYXV0b1Nlc3Npb25UcmFja2luZyIsIlNFTlRSWV9FTlZJUk9OTUVOVCIsInN0YWNrUGFyc2VyIiwic3RhY2tQYXJzZXJGcm9tU3RhY2tQYXJzZXJPcHRpb25zIiwiaW50ZWdyYXRpb25zIiwiZ2V0SW50ZWdyYXRpb25zVG9TZXR1cCIsInRyYW5zcG9ydCIsInNldENsaWVudCIsInNraXBPcGVuVGVsZW1ldHJ5U2V0dXAiLCJzZXR1cE90ZWwiLCJ2YWxpZGF0ZU9wZW5UZWxlbWV0cnlTZXR1cCIsInJlcXVpcmVkIiwic2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyIiwibWF4U3BhbldhaXREdXJhdGlvbiIsIm90ZWxMb2dnZXIiLCJQcm94eSIsInByb3AiLCJyZWNlaXZlciIsImFjdHVhbFByb3AiLCJSZWZsZWN0Iiwic2V0TG9nZ2VyIiwiZmFsbGJhY2siLCJTRU5UUllfUkVMRUFTRSIsInBvc3NpYmxlUmVsZWFzZU5hbWVPZkdpdFByb3ZpZGVyIiwicG9zc2libGVSZWxlYXNlTmFtZU9mQ2lQcm92aWRlcnNXaXRoU3BlY2lmaWNFbnZWYXIiLCJwb3NzaWJsZVJlbGVhc2VOYW1lT2ZDaVByb3ZpZGVyc1dpdGhHZW5lcmljRW52VmFyIiwiU2NvcGUiLCJhZGRFdmVudFByb2Nlc3NvciIsImFkZEludGVncmF0aW9uIiwiY2FwdHVyZUNoZWNrSW4iLCJjYXB0dXJlQ29uc29sZUludGVncmF0aW9uIiwiY2FwdHVyZUV4Y2VwdGlvbiIsImNhcHR1cmVGZWVkYmFjayIsImNhcHR1cmVNZXNzYWdlIiwiY2xvc2UiLCJkZWJ1Z0ludGVncmF0aW9uIiwiZXh0cmFFcnJvckRhdGFJbnRlZ3JhdGlvbiIsImdldEdsb2JhbFNjb3BlIiwiZ2V0U3BhbkRlc2NlbmRhbnRzIiwiZ2V0VHJhY2VNZXRhVGFncyIsImlzSW5pdGlhbGl6ZWQiLCJsYXN0RXZlbnRJZCIsIm1ldHJpY3MiLCJtb2R1bGVNZXRhZGF0YUludGVncmF0aW9uIiwicmV3cml0ZUZyYW1lc0ludGVncmF0aW9uIiwic2V0Q29udGV4dCIsInNldEN1cnJlbnRDbGllbnQiLCJzZXRFeHRyYSIsInNldEV4dHJhcyIsInNldEh0dHBTdGF0dXMiLCJzZXRNZWFzdXJlbWVudCIsInNldFRhZyIsInNldFRhZ3MiLCJzZXRVc2VyIiwic3BhblRvQmFnZ2FnZUhlYWRlciIsInNwYW5Ub1RyYWNlSGVhZGVyIiwic3RhcnROZXdUcmFjZSIsInRycGNNaWRkbGV3YXJlIiwid2l0aE1vbml0b3IiLCJ6b2RFcnJvcnNJbnRlZ3JhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/@sentry/vercel-edge/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/next/dist/esm/api/constants.js":
/*!*****************************************************!*\
  !*** ./node_modules/next/dist/esm/api/constants.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar _constants = __webpack_require__(/*! ../shared/lib/constants */ \"(instrument)/./node_modules/next/dist/esm/shared/lib/constants.js\");\nObject.keys(_constants).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _constants[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _constants[key];\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vYXBpL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsbUJBQUE7QUFBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFILFVBQUEsRUFBQUksT0FBQSxXQUFBQyxHQUFBO0VBQUEsSUFBQUEsR0FBQSxrQkFBQUEsR0FBQTtFQUFBLElBQUFBLEdBQUEsSUFBQUMsT0FBQSxJQUFBQSxPQUFBLENBQUFELEdBQUEsTUFBQUwsVUFBQSxDQUFBSyxHQUFBO0VBQUFILE1BQUEsQ0FBQUssY0FBQSxDQUFBRCxPQUFBLEVBQUFELEdBQUE7SUFBQUcsVUFBQTtJQUFBQyxHQUFBLFdBQUFBLENBQUE7TUFBQSxPQUFBVCxVQUFBLENBQUFLLEdBQUE7SUFBQTtFQUFBO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vYXBpL2NvbnN0YW50cy5qcz9hZWE3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuLi9zaGFyZWQvbGliL2NvbnN0YW50c1wiO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIl9jb25zdGFudHMiLCJyZXF1aXJlIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJleHBvcnRzIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/next/dist/esm/api/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/next/dist/esm/shared/lib/constants.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MIDDLEWARE_REACT_LOADABLE_MANIFEST = exports.MIDDLEWARE_MANIFEST = exports.MIDDLEWARE_BUILD_MANIFEST = exports.INTERCEPTION_ROUTE_REWRITE_MANIFEST = exports.IMAGES_MANIFEST = exports.GOOGLE_FONT_PROVIDER = exports.FUNCTIONS_CONFIG_MANIFEST = exports.EXPORT_MARKER = exports.EXPORT_DETAIL = exports.EDGE_UNSUPPORTED_NODE_APIS = exports.EDGE_RUNTIME_WEBPACK = exports.DEV_MIDDLEWARE_MANIFEST = exports.DEV_CLIENT_PAGES_MANIFEST = exports.DEFAULT_SERIF_FONT = exports.DEFAULT_SANS_SERIF_FONT = exports.DEFAULT_RUNTIME_WEBPACK = exports.CONFIG_FILES = exports.COMPILER_NAMES = exports.COMPILER_INDEXES = exports.CLIENT_STATIC_FILES_RUNTIME_WEBPACK = exports.CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH = exports.CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL = exports.CLIENT_STATIC_FILES_RUNTIME_POLYFILLS = exports.CLIENT_STATIC_FILES_RUNTIME_MAIN_APP = exports.CLIENT_STATIC_FILES_RUNTIME_MAIN = exports.CLIENT_STATIC_FILES_RUNTIME_AMP = exports.CLIENT_STATIC_FILES_PATH = exports.CLIENT_REFERENCE_MANIFEST = exports.CLIENT_PUBLIC_FILES_PATH = exports.BUILD_MANIFEST = exports.BUILD_ID_FILE = exports.BLOCKED_PAGES = exports.BARREL_OPTIMIZATION_PREFIX = exports.AUTOMATIC_FONT_OPTIMIZATION_MANIFEST = exports.APP_PATH_ROUTES_MANIFEST = exports.APP_PATHS_MANIFEST = exports.APP_CLIENT_INTERNALS = exports.APP_BUILD_MANIFEST = void 0;\nObject.defineProperty(exports, \"MODERN_BROWSERSLIST_TARGET\", ({\n    enumerable: true,\n    get: function() {\n        return _modernBrowserslistTarget.default;\n    }\n}));\nexports.UNDERSCORE_NOT_FOUND_ROUTE_ENTRY = exports.UNDERSCORE_NOT_FOUND_ROUTE = exports.TURBO_TRACE_DEFAULT_MEMORY_LIMIT = exports.TRACE_OUTPUT_VERSION = exports.SYSTEM_ENTRYPOINTS = exports.SUBRESOURCE_INTEGRITY_MANIFEST = exports.STRING_LITERAL_DROP_BUNDLE = exports.STATIC_STATUS_PAGES = exports.STATIC_PROPS_ID = exports.SERVER_REFERENCE_MANIFEST = exports.SERVER_PROPS_ID = exports.SERVER_FILES_MANIFEST = exports.SERVER_DIRECTORY = exports.RSC_MODULE_TYPES = exports.ROUTES_MANIFEST = exports.REACT_LOADABLE_MANIFEST = exports.PRERENDER_MANIFEST = exports.PHASE_TEST = exports.PHASE_PRODUCTION_SERVER = exports.PHASE_PRODUCTION_BUILD = exports.PHASE_INFO = exports.PHASE_EXPORT = exports.PHASE_DEVELOPMENT_SERVER = exports.PAGES_MANIFEST = exports.OPTIMIZED_FONT_PROVIDERS = exports.NEXT_FONT_MANIFEST = exports.NEXT_BUILTIN_DOCUMENT = void 0;\nvar _modernBrowserslistTarget = _interopRequireDefault(__webpack_require__(/*! ./modern-browserslist-target */ \"(instrument)/./node_modules/next/dist/esm/shared/lib/modern-browserslist-target.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst COMPILER_NAMES = exports.COMPILER_NAMES = {\n    client: \"client\",\n    server: \"server\",\n    edgeServer: \"edge-server\"\n};\nconst COMPILER_INDEXES = exports.COMPILER_INDEXES = {\n    [COMPILER_NAMES.client]: 0,\n    [COMPILER_NAMES.server]: 1,\n    [COMPILER_NAMES.edgeServer]: 2\n};\nconst UNDERSCORE_NOT_FOUND_ROUTE = exports.UNDERSCORE_NOT_FOUND_ROUTE = \"/_not-found\";\nconst UNDERSCORE_NOT_FOUND_ROUTE_ENTRY = exports.UNDERSCORE_NOT_FOUND_ROUTE_ENTRY = \"\" + UNDERSCORE_NOT_FOUND_ROUTE + \"/page\";\nconst PHASE_EXPORT = exports.PHASE_EXPORT = \"phase-export\";\nconst PHASE_PRODUCTION_BUILD = exports.PHASE_PRODUCTION_BUILD = \"phase-production-build\";\nconst PHASE_PRODUCTION_SERVER = exports.PHASE_PRODUCTION_SERVER = \"phase-production-server\";\nconst PHASE_DEVELOPMENT_SERVER = exports.PHASE_DEVELOPMENT_SERVER = \"phase-development-server\";\nconst PHASE_TEST = exports.PHASE_TEST = \"phase-test\";\nconst PHASE_INFO = exports.PHASE_INFO = \"phase-info\";\nconst PAGES_MANIFEST = exports.PAGES_MANIFEST = \"pages-manifest.json\";\nconst APP_PATHS_MANIFEST = exports.APP_PATHS_MANIFEST = \"app-paths-manifest.json\";\nconst APP_PATH_ROUTES_MANIFEST = exports.APP_PATH_ROUTES_MANIFEST = \"app-path-routes-manifest.json\";\nconst BUILD_MANIFEST = exports.BUILD_MANIFEST = \"build-manifest.json\";\nconst APP_BUILD_MANIFEST = exports.APP_BUILD_MANIFEST = \"app-build-manifest.json\";\nconst FUNCTIONS_CONFIG_MANIFEST = exports.FUNCTIONS_CONFIG_MANIFEST = \"functions-config-manifest.json\";\nconst SUBRESOURCE_INTEGRITY_MANIFEST = exports.SUBRESOURCE_INTEGRITY_MANIFEST = \"subresource-integrity-manifest\";\nconst NEXT_FONT_MANIFEST = exports.NEXT_FONT_MANIFEST = \"next-font-manifest\";\nconst EXPORT_MARKER = exports.EXPORT_MARKER = \"export-marker.json\";\nconst EXPORT_DETAIL = exports.EXPORT_DETAIL = \"export-detail.json\";\nconst PRERENDER_MANIFEST = exports.PRERENDER_MANIFEST = \"prerender-manifest.json\";\nconst ROUTES_MANIFEST = exports.ROUTES_MANIFEST = \"routes-manifest.json\";\nconst IMAGES_MANIFEST = exports.IMAGES_MANIFEST = \"images-manifest.json\";\nconst SERVER_FILES_MANIFEST = exports.SERVER_FILES_MANIFEST = \"required-server-files.json\";\nconst DEV_CLIENT_PAGES_MANIFEST = exports.DEV_CLIENT_PAGES_MANIFEST = \"_devPagesManifest.json\";\nconst MIDDLEWARE_MANIFEST = exports.MIDDLEWARE_MANIFEST = \"middleware-manifest.json\";\nconst DEV_MIDDLEWARE_MANIFEST = exports.DEV_MIDDLEWARE_MANIFEST = \"_devMiddlewareManifest.json\";\nconst REACT_LOADABLE_MANIFEST = exports.REACT_LOADABLE_MANIFEST = \"react-loadable-manifest.json\";\nconst AUTOMATIC_FONT_OPTIMIZATION_MANIFEST = exports.AUTOMATIC_FONT_OPTIMIZATION_MANIFEST = \"font-manifest.json\";\nconst SERVER_DIRECTORY = exports.SERVER_DIRECTORY = \"server\";\nconst CONFIG_FILES = exports.CONFIG_FILES = [\n    \"next.config.js\",\n    \"next.config.mjs\"\n];\nconst BUILD_ID_FILE = exports.BUILD_ID_FILE = \"BUILD_ID\";\nconst BLOCKED_PAGES = exports.BLOCKED_PAGES = [\n    \"/_document\",\n    \"/_app\",\n    \"/_error\"\n];\nconst CLIENT_PUBLIC_FILES_PATH = exports.CLIENT_PUBLIC_FILES_PATH = \"public\";\nconst CLIENT_STATIC_FILES_PATH = exports.CLIENT_STATIC_FILES_PATH = \"static\";\nconst STRING_LITERAL_DROP_BUNDLE = exports.STRING_LITERAL_DROP_BUNDLE = \"__NEXT_DROP_CLIENT_FILE__\";\nconst NEXT_BUILTIN_DOCUMENT = exports.NEXT_BUILTIN_DOCUMENT = \"__NEXT_BUILTIN_DOCUMENT__\";\nconst BARREL_OPTIMIZATION_PREFIX = exports.BARREL_OPTIMIZATION_PREFIX = \"__barrel_optimize__\";\n// server/[entry]/page_client-reference-manifest.js\nconst CLIENT_REFERENCE_MANIFEST = exports.CLIENT_REFERENCE_MANIFEST = \"client-reference-manifest\";\n// server/server-reference-manifest\nconst SERVER_REFERENCE_MANIFEST = exports.SERVER_REFERENCE_MANIFEST = \"server-reference-manifest\";\n// server/middleware-build-manifest.js\nconst MIDDLEWARE_BUILD_MANIFEST = exports.MIDDLEWARE_BUILD_MANIFEST = \"middleware-build-manifest\";\n// server/middleware-react-loadable-manifest.js\nconst MIDDLEWARE_REACT_LOADABLE_MANIFEST = exports.MIDDLEWARE_REACT_LOADABLE_MANIFEST = \"middleware-react-loadable-manifest\";\n// server/interception-route-rewrite-manifest.js\nconst INTERCEPTION_ROUTE_REWRITE_MANIFEST = exports.INTERCEPTION_ROUTE_REWRITE_MANIFEST = \"interception-route-rewrite-manifest\";\n// static/runtime/main.js\nconst CLIENT_STATIC_FILES_RUNTIME_MAIN = exports.CLIENT_STATIC_FILES_RUNTIME_MAIN = \"main\";\nconst CLIENT_STATIC_FILES_RUNTIME_MAIN_APP = exports.CLIENT_STATIC_FILES_RUNTIME_MAIN_APP = \"\" + CLIENT_STATIC_FILES_RUNTIME_MAIN + \"-app\";\n// next internal client components chunk for layouts\nconst APP_CLIENT_INTERNALS = exports.APP_CLIENT_INTERNALS = \"app-pages-internals\";\n// static/runtime/react-refresh.js\nconst CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH = exports.CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH = \"react-refresh\";\n// static/runtime/amp.js\nconst CLIENT_STATIC_FILES_RUNTIME_AMP = exports.CLIENT_STATIC_FILES_RUNTIME_AMP = \"amp\";\n// static/runtime/webpack.js\nconst CLIENT_STATIC_FILES_RUNTIME_WEBPACK = exports.CLIENT_STATIC_FILES_RUNTIME_WEBPACK = \"webpack\";\n// static/runtime/polyfills.js\nconst CLIENT_STATIC_FILES_RUNTIME_POLYFILLS = exports.CLIENT_STATIC_FILES_RUNTIME_POLYFILLS = \"polyfills\";\nconst CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL = exports.CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL = Symbol(CLIENT_STATIC_FILES_RUNTIME_POLYFILLS);\nconst DEFAULT_RUNTIME_WEBPACK = exports.DEFAULT_RUNTIME_WEBPACK = \"webpack-runtime\";\nconst EDGE_RUNTIME_WEBPACK = exports.EDGE_RUNTIME_WEBPACK = \"edge-runtime-webpack\";\nconst STATIC_PROPS_ID = exports.STATIC_PROPS_ID = \"__N_SSG\";\nconst SERVER_PROPS_ID = exports.SERVER_PROPS_ID = \"__N_SSP\";\nconst GOOGLE_FONT_PROVIDER = exports.GOOGLE_FONT_PROVIDER = \"https://fonts.googleapis.com/\";\nconst OPTIMIZED_FONT_PROVIDERS = exports.OPTIMIZED_FONT_PROVIDERS = [\n    {\n        url: GOOGLE_FONT_PROVIDER,\n        preconnect: \"https://fonts.gstatic.com\"\n    },\n    {\n        url: \"https://use.typekit.net\",\n        preconnect: \"https://use.typekit.net\"\n    }\n];\nconst DEFAULT_SERIF_FONT = exports.DEFAULT_SERIF_FONT = {\n    name: \"Times New Roman\",\n    xAvgCharWidth: 821,\n    azAvgWidth: 854.3953488372093,\n    unitsPerEm: 2048\n};\nconst DEFAULT_SANS_SERIF_FONT = exports.DEFAULT_SANS_SERIF_FONT = {\n    name: \"Arial\",\n    xAvgCharWidth: 904,\n    azAvgWidth: 934.5116279069767,\n    unitsPerEm: 2048\n};\nconst STATIC_STATUS_PAGES = exports.STATIC_STATUS_PAGES = [\n    \"/500\"\n];\nconst TRACE_OUTPUT_VERSION = exports.TRACE_OUTPUT_VERSION = 1;\n// in `MB`\nconst TURBO_TRACE_DEFAULT_MEMORY_LIMIT = exports.TURBO_TRACE_DEFAULT_MEMORY_LIMIT = 6000;\nconst RSC_MODULE_TYPES = exports.RSC_MODULE_TYPES = {\n    client: \"client\",\n    server: \"server\"\n};\n// comparing\n// https://nextjs.org/docs/api-reference/edge-runtime\n// with\n// https://nodejs.org/docs/latest/api/globals.html\nconst EDGE_UNSUPPORTED_NODE_APIS = exports.EDGE_UNSUPPORTED_NODE_APIS = [\n    \"clearImmediate\",\n    \"setImmediate\",\n    \"BroadcastChannel\",\n    \"ByteLengthQueuingStrategy\",\n    \"CompressionStream\",\n    \"CountQueuingStrategy\",\n    \"DecompressionStream\",\n    \"DomException\",\n    \"MessageChannel\",\n    \"MessageEvent\",\n    \"MessagePort\",\n    \"ReadableByteStreamController\",\n    \"ReadableStreamBYOBRequest\",\n    \"ReadableStreamDefaultController\",\n    \"TransformStreamDefaultController\",\n    \"WritableStreamDefaultController\"\n];\nconst SYSTEM_ENTRYPOINTS = exports.SYSTEM_ENTRYPOINTS = new Set([\n    CLIENT_STATIC_FILES_RUNTIME_MAIN,\n    CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH,\n    CLIENT_STATIC_FILES_RUNTIME_AMP,\n    CLIENT_STATIC_FILES_RUNTIME_MAIN_APP\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/next/dist/esm/shared/lib/constants.js\n");

/***/ }),

/***/ "(instrument)/./node_modules/next/dist/esm/shared/lib/modern-browserslist-target.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/next/dist/esm/shared/lib/modern-browserslist-target.js ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n// Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.\n// Keep file changes in sync with the corresponding `.d.ts` files.\n/**\n * These are the browser versions that support all of the following:\n * static import: https://caniuse.com/es6-module\n * dynamic import: https://caniuse.com/es6-module-dynamic-import\n * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta\n */ const MODERN_BROWSERSLIST_TARGET = [\n    \"chrome 64\",\n    \"edge 79\",\n    \"firefox 67\",\n    \"opera 51\",\n    \"safari 12\"\n];\nmodule.exports = MODERN_BROWSERSLIST_TARGET;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vc2hhcmVkL2xpYi9tb2Rlcm4tYnJvd3NlcnNsaXN0LXRhcmdldC5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBOzs7OztDQUtBLEdBQUksTUFBTUEsNkJBQTZCO0lBQ25DO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSDtBQUNEQyxPQUFPQyxPQUFPLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvZXNtL3NoYXJlZC9saWIvbW9kZXJuLWJyb3dzZXJzbGlzdC10YXJnZXQuanM/MTEwMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBOb3RlOiBUaGlzIGZpbGUgaXMgSlMgYmVjYXVzZSBpdCdzIHVzZWQgYnkgdGhlIHRhc2tmaWxlLXN3Yy5qcyBmaWxlLCB3aGljaCBpcyBKUy5cbi8vIEtlZXAgZmlsZSBjaGFuZ2VzIGluIHN5bmMgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBgLmQudHNgIGZpbGVzLlxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIGJyb3dzZXIgdmVyc2lvbnMgdGhhdCBzdXBwb3J0IGFsbCBvZiB0aGUgZm9sbG93aW5nOlxuICogc3RhdGljIGltcG9ydDogaHR0cHM6Ly9jYW5pdXNlLmNvbS9lczYtbW9kdWxlXG4gKiBkeW5hbWljIGltcG9ydDogaHR0cHM6Ly9jYW5pdXNlLmNvbS9lczYtbW9kdWxlLWR5bmFtaWMtaW1wb3J0XG4gKiBpbXBvcnQubWV0YTogaHR0cHM6Ly9jYW5pdXNlLmNvbS9tZG4tamF2YXNjcmlwdF9vcGVyYXRvcnNfaW1wb3J0X21ldGFcbiAqLyBjb25zdCBNT0RFUk5fQlJPV1NFUlNMSVNUX1RBUkdFVCA9IFtcbiAgICBcImNocm9tZSA2NFwiLFxuICAgIFwiZWRnZSA3OVwiLFxuICAgIFwiZmlyZWZveCA2N1wiLFxuICAgIFwib3BlcmEgNTFcIixcbiAgICBcInNhZmFyaSAxMlwiXG5dO1xubW9kdWxlLmV4cG9ydHMgPSBNT0RFUk5fQlJPV1NFUlNMSVNUX1RBUkdFVDtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZXJuLWJyb3dzZXJzbGlzdC10YXJnZXQuanMubWFwIl0sIm5hbWVzIjpbIk1PREVSTl9CUk9XU0VSU0xJU1RfVEFSR0VUIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./node_modules/next/dist/esm/shared/lib/modern-browserslist-target.js\n");

/***/ }),

/***/ "(instrument)/./sentry.edge.config.ts":
/*!*******************************!*\
  !*** ./sentry.edge.config.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Sentry = _interopRequireWildcard(__webpack_require__(/*! @sentry/nextjs */ \"(instrument)/./node_modules/@sentry/nextjs/build/cjs/edge/index.js\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\n// This file configures the initialization of Sentry for edge features (middleware, edge routes, and so on).\n// The config you add here will be used whenever one of the edge features is loaded.\n// Note that this config is unrelated to the Vercel Edge Runtime and is also required when running locally.\n// https://docs.sentry.io/platforms/javascript/guides/nextjs/\nSentry.init({\n    dsn: \"https://d317d3a8de8fd9f33153438648686175@o4508569151668224.ingest.us.sentry.io/4508678138560512\",\n    // Define how likely traces are sampled. Adjust this value in production, or use tracesSampler for greater control.\n    tracesSampleRate: 1,\n    // Setting this option to true will print useful information to the console while you're setting up Sentry.\n    debug: false\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4vc2VudHJ5LmVkZ2UuY29uZmlnLnRzIiwibWFwcGluZ3MiOiI7QUFLQSxJQUFBQSxTQUFBQyx3QkFBQUMsbUJBQUFBLENBQUE7QUFBeUMsU0FBQUMseUJBQUFDLFdBQUE7SUFBQSxXQUFBQyxZQUFBO0lBQUEsSUFBQUMsb0JBQUEsSUFBQUQ7SUFBQSxJQUFBRSxtQkFBQSxJQUFBRjtJQUFBLFFBQUFGLDJCQUFBLFNBQUFDLFdBQUE7UUFBQSxPQUFBQSxjQUFBRyxtQkFBQUQ7SUFBQSxHQUFBRjtBQUFBO0FBQUEsU0FBQUgsd0JBQUFPLEdBQUEsRUFBQUosV0FBQTtJQUFBLEtBQUFBLGVBQUFJLE9BQUFBLElBQUFDLFVBQUE7UUFBQSxPQUFBRDtJQUFBO0lBQUEsSUFBQUEsUUFBQSxlQUFBQSxRQUFBLG1CQUFBQSxRQUFBO1FBQUE7WUFBQUUsU0FBQUY7UUFBQTtJQUFBO0lBQUEsSUFBQUcsUUFBQVIseUJBQUFDO0lBQUEsSUFBQU8sU0FBQUEsTUFBQUMsR0FBQSxDQUFBSixNQUFBO1FBQUEsT0FBQUcsTUFBQUUsR0FBQSxDQUFBTDtJQUFBO0lBQUEsSUFBQU0sU0FBQTtJQUFBLElBQUFDLHdCQUFBQyxPQUFBQyxjQUFBLElBQUFELE9BQUFFLHdCQUFBO0lBQUEsUUFBQUMsT0FBQVgsSUFBQTtRQUFBLElBQUFXLFFBQUEsYUFBQUgsT0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsS0FBQVcsTUFBQTtZQUFBLElBQUFJLE9BQUFSLHdCQUFBQyxPQUFBRSx3QkFBQSxDQUFBVixLQUFBVyxPQUFBO1lBQUEsSUFBQUksUUFBQUEsQ0FBQUEsS0FBQVYsR0FBQSxJQUFBVSxLQUFBQyxHQUFBO2dCQUFBUixPQUFBQyxjQUFBLENBQUFILFFBQUFLLEtBQUFJO1lBQUE7Z0JBQUFULE1BQUEsQ0FBQUssSUFBQSxHQUFBWCxHQUFBLENBQUFXLElBQUE7WUFBQTtRQUFBO0lBQUE7SUFBQUwsT0FBQUosT0FBQSxHQUFBRjtJQUFBLElBQUFHLE9BQUE7UUFBQUEsTUFBQWEsR0FBQSxDQUFBaEIsS0FBQU07SUFBQTtJQUFBLE9BQUFBO0FBQUE7QUFMekM7QUFDQTtBQUNBO0FBQ0E7QUFJQWQsT0FBT3lCLElBQUksQ0FBQztJQUNWQyxLQUFLO0lBRUw7SUFDQUMsa0JBQWtCO0lBRWxCO0lBQ0FDLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zZW50cnkuZWRnZS5jb25maWcudHM/MGZmZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgY29uZmlndXJlcyB0aGUgaW5pdGlhbGl6YXRpb24gb2YgU2VudHJ5IGZvciBlZGdlIGZlYXR1cmVzIChtaWRkbGV3YXJlLCBlZGdlIHJvdXRlcywgYW5kIHNvIG9uKS5cbi8vIFRoZSBjb25maWcgeW91IGFkZCBoZXJlIHdpbGwgYmUgdXNlZCB3aGVuZXZlciBvbmUgb2YgdGhlIGVkZ2UgZmVhdHVyZXMgaXMgbG9hZGVkLlxuLy8gTm90ZSB0aGF0IHRoaXMgY29uZmlnIGlzIHVucmVsYXRlZCB0byB0aGUgVmVyY2VsIEVkZ2UgUnVudGltZSBhbmQgaXMgYWxzbyByZXF1aXJlZCB3aGVuIHJ1bm5pbmcgbG9jYWxseS5cbi8vIGh0dHBzOi8vZG9jcy5zZW50cnkuaW8vcGxhdGZvcm1zL2phdmFzY3JpcHQvZ3VpZGVzL25leHRqcy9cblxuaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gXCJAc2VudHJ5L25leHRqc1wiO1xuXG5TZW50cnkuaW5pdCh7XG4gIGRzbjogXCJodHRwczovL2QzMTdkM2E4ZGU4ZmQ5ZjMzMTUzNDM4NjQ4Njg2MTc1QG80NTA4NTY5MTUxNjY4MjI0LmluZ2VzdC51cy5zZW50cnkuaW8vNDUwODY3ODEzODU2MDUxMlwiLFxuXG4gIC8vIERlZmluZSBob3cgbGlrZWx5IHRyYWNlcyBhcmUgc2FtcGxlZC4gQWRqdXN0IHRoaXMgdmFsdWUgaW4gcHJvZHVjdGlvbiwgb3IgdXNlIHRyYWNlc1NhbXBsZXIgZm9yIGdyZWF0ZXIgY29udHJvbC5cbiAgdHJhY2VzU2FtcGxlUmF0ZTogMSxcblxuICAvLyBTZXR0aW5nIHRoaXMgb3B0aW9uIHRvIHRydWUgd2lsbCBwcmludCB1c2VmdWwgaW5mb3JtYXRpb24gdG8gdGhlIGNvbnNvbGUgd2hpbGUgeW91J3JlIHNldHRpbmcgdXAgU2VudHJ5LlxuICBkZWJ1ZzogZmFsc2UsXG59KTtcbiJdLCJuYW1lcyI6WyJTZW50cnkiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiaW5pdCIsImRzbiIsInRyYWNlc1NhbXBsZVJhdGUiLCJkZWJ1ZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/./sentry.edge.config.ts\n");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("(instrument)/./src/instrumentation.ts"));
/******/ (_ENTRIES = typeof _ENTRIES === "undefined" ? {} : _ENTRIES).middleware_instrumentation = __webpack_exports__;
/******/ }
]);